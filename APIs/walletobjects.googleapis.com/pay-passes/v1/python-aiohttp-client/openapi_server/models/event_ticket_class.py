# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.callback_options import CallbackOptions
from openapi_server.models.class_template_info import ClassTemplateInfo
from openapi_server.models.event_date_time import EventDateTime
from openapi_server.models.event_venue import EventVenue
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.info_module_data import InfoModuleData
from openapi_server.models.lat_long_point import LatLongPoint
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.message import Message
from openapi_server.models.review import Review
from openapi_server.models.security_animation import SecurityAnimation
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.uri import Uri
from openapi_server import util


class EventTicketClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_multiple_users_per_object: bool=None, callback_options: CallbackOptions=None, class_template_info: ClassTemplateInfo=None, confirmation_code_label: str=None, country_code: str=None, custom_confirmation_code_label: LocalizedString=None, custom_gate_label: LocalizedString=None, custom_row_label: LocalizedString=None, custom_seat_label: LocalizedString=None, custom_section_label: LocalizedString=None, date_time: EventDateTime=None, enable_smart_tap: bool=None, event_id: str=None, event_name: LocalizedString=None, fine_print: LocalizedString=None, gate_label: str=None, hero_image: Image=None, hex_background_color: str=None, homepage_uri: Uri=None, id: str=None, image_modules_data: List[ImageModuleData]=None, info_module_data: InfoModuleData=None, issuer_name: str=None, kind: str=None, links_module_data: LinksModuleData=None, localized_issuer_name: LocalizedString=None, locations: List[LatLongPoint]=None, logo: Image=None, messages: List[Message]=None, multiple_devices_and_holders_allowed_status: str=None, redemption_issuers: List[str]=None, review: Review=None, review_status: str=None, row_label: str=None, seat_label: str=None, section_label: str=None, security_animation: SecurityAnimation=None, text_modules_data: List[TextModuleData]=None, venue: EventVenue=None, version: str=None, view_unlock_requirement: str=None, word_mark: Image=None):
        """EventTicketClass - a model defined in OpenAPI

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this EventTicketClass.
        :param callback_options: The callback_options of this EventTicketClass.
        :param class_template_info: The class_template_info of this EventTicketClass.
        :param confirmation_code_label: The confirmation_code_label of this EventTicketClass.
        :param country_code: The country_code of this EventTicketClass.
        :param custom_confirmation_code_label: The custom_confirmation_code_label of this EventTicketClass.
        :param custom_gate_label: The custom_gate_label of this EventTicketClass.
        :param custom_row_label: The custom_row_label of this EventTicketClass.
        :param custom_seat_label: The custom_seat_label of this EventTicketClass.
        :param custom_section_label: The custom_section_label of this EventTicketClass.
        :param date_time: The date_time of this EventTicketClass.
        :param enable_smart_tap: The enable_smart_tap of this EventTicketClass.
        :param event_id: The event_id of this EventTicketClass.
        :param event_name: The event_name of this EventTicketClass.
        :param fine_print: The fine_print of this EventTicketClass.
        :param gate_label: The gate_label of this EventTicketClass.
        :param hero_image: The hero_image of this EventTicketClass.
        :param hex_background_color: The hex_background_color of this EventTicketClass.
        :param homepage_uri: The homepage_uri of this EventTicketClass.
        :param id: The id of this EventTicketClass.
        :param image_modules_data: The image_modules_data of this EventTicketClass.
        :param info_module_data: The info_module_data of this EventTicketClass.
        :param issuer_name: The issuer_name of this EventTicketClass.
        :param kind: The kind of this EventTicketClass.
        :param links_module_data: The links_module_data of this EventTicketClass.
        :param localized_issuer_name: The localized_issuer_name of this EventTicketClass.
        :param locations: The locations of this EventTicketClass.
        :param logo: The logo of this EventTicketClass.
        :param messages: The messages of this EventTicketClass.
        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this EventTicketClass.
        :param redemption_issuers: The redemption_issuers of this EventTicketClass.
        :param review: The review of this EventTicketClass.
        :param review_status: The review_status of this EventTicketClass.
        :param row_label: The row_label of this EventTicketClass.
        :param seat_label: The seat_label of this EventTicketClass.
        :param section_label: The section_label of this EventTicketClass.
        :param security_animation: The security_animation of this EventTicketClass.
        :param text_modules_data: The text_modules_data of this EventTicketClass.
        :param venue: The venue of this EventTicketClass.
        :param version: The version of this EventTicketClass.
        :param view_unlock_requirement: The view_unlock_requirement of this EventTicketClass.
        :param word_mark: The word_mark of this EventTicketClass.
        """
        self.openapi_types = {
            'allow_multiple_users_per_object': bool,
            'callback_options': CallbackOptions,
            'class_template_info': ClassTemplateInfo,
            'confirmation_code_label': str,
            'country_code': str,
            'custom_confirmation_code_label': LocalizedString,
            'custom_gate_label': LocalizedString,
            'custom_row_label': LocalizedString,
            'custom_seat_label': LocalizedString,
            'custom_section_label': LocalizedString,
            'date_time': EventDateTime,
            'enable_smart_tap': bool,
            'event_id': str,
            'event_name': LocalizedString,
            'fine_print': LocalizedString,
            'gate_label': str,
            'hero_image': Image,
            'hex_background_color': str,
            'homepage_uri': Uri,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'info_module_data': InfoModuleData,
            'issuer_name': str,
            'kind': str,
            'links_module_data': LinksModuleData,
            'localized_issuer_name': LocalizedString,
            'locations': List[LatLongPoint],
            'logo': Image,
            'messages': List[Message],
            'multiple_devices_and_holders_allowed_status': str,
            'redemption_issuers': List[str],
            'review': Review,
            'review_status': str,
            'row_label': str,
            'seat_label': str,
            'section_label': str,
            'security_animation': SecurityAnimation,
            'text_modules_data': List[TextModuleData],
            'venue': EventVenue,
            'version': str,
            'view_unlock_requirement': str,
            'word_mark': Image
        }

        self.attribute_map = {
            'allow_multiple_users_per_object': 'allowMultipleUsersPerObject',
            'callback_options': 'callbackOptions',
            'class_template_info': 'classTemplateInfo',
            'confirmation_code_label': 'confirmationCodeLabel',
            'country_code': 'countryCode',
            'custom_confirmation_code_label': 'customConfirmationCodeLabel',
            'custom_gate_label': 'customGateLabel',
            'custom_row_label': 'customRowLabel',
            'custom_seat_label': 'customSeatLabel',
            'custom_section_label': 'customSectionLabel',
            'date_time': 'dateTime',
            'enable_smart_tap': 'enableSmartTap',
            'event_id': 'eventId',
            'event_name': 'eventName',
            'fine_print': 'finePrint',
            'gate_label': 'gateLabel',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'homepage_uri': 'homepageUri',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'info_module_data': 'infoModuleData',
            'issuer_name': 'issuerName',
            'kind': 'kind',
            'links_module_data': 'linksModuleData',
            'localized_issuer_name': 'localizedIssuerName',
            'locations': 'locations',
            'logo': 'logo',
            'messages': 'messages',
            'multiple_devices_and_holders_allowed_status': 'multipleDevicesAndHoldersAllowedStatus',
            'redemption_issuers': 'redemptionIssuers',
            'review': 'review',
            'review_status': 'reviewStatus',
            'row_label': 'rowLabel',
            'seat_label': 'seatLabel',
            'section_label': 'sectionLabel',
            'security_animation': 'securityAnimation',
            'text_modules_data': 'textModulesData',
            'venue': 'venue',
            'version': 'version',
            'view_unlock_requirement': 'viewUnlockRequirement',
            'word_mark': 'wordMark'
        }

        self._allow_multiple_users_per_object = allow_multiple_users_per_object
        self._callback_options = callback_options
        self._class_template_info = class_template_info
        self._confirmation_code_label = confirmation_code_label
        self._country_code = country_code
        self._custom_confirmation_code_label = custom_confirmation_code_label
        self._custom_gate_label = custom_gate_label
        self._custom_row_label = custom_row_label
        self._custom_seat_label = custom_seat_label
        self._custom_section_label = custom_section_label
        self._date_time = date_time
        self._enable_smart_tap = enable_smart_tap
        self._event_id = event_id
        self._event_name = event_name
        self._fine_print = fine_print
        self._gate_label = gate_label
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._homepage_uri = homepage_uri
        self._id = id
        self._image_modules_data = image_modules_data
        self._info_module_data = info_module_data
        self._issuer_name = issuer_name
        self._kind = kind
        self._links_module_data = links_module_data
        self._localized_issuer_name = localized_issuer_name
        self._locations = locations
        self._logo = logo
        self._messages = messages
        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status
        self._redemption_issuers = redemption_issuers
        self._review = review
        self._review_status = review_status
        self._row_label = row_label
        self._seat_label = seat_label
        self._section_label = section_label
        self._security_animation = security_animation
        self._text_modules_data = text_modules_data
        self._venue = venue
        self._version = version
        self._view_unlock_requirement = view_unlock_requirement
        self._word_mark = word_mark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventTicketClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventTicketClass of this EventTicketClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_multiple_users_per_object(self):
        """Gets the allow_multiple_users_per_object of this EventTicketClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :return: The allow_multiple_users_per_object of this EventTicketClass.
        :rtype: bool
        """
        return self._allow_multiple_users_per_object

    @allow_multiple_users_per_object.setter
    def allow_multiple_users_per_object(self, allow_multiple_users_per_object):
        """Sets the allow_multiple_users_per_object of this EventTicketClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this EventTicketClass.
        :type allow_multiple_users_per_object: bool
        """

        self._allow_multiple_users_per_object = allow_multiple_users_per_object

    @property
    def callback_options(self):
        """Gets the callback_options of this EventTicketClass.


        :return: The callback_options of this EventTicketClass.
        :rtype: CallbackOptions
        """
        return self._callback_options

    @callback_options.setter
    def callback_options(self, callback_options):
        """Sets the callback_options of this EventTicketClass.


        :param callback_options: The callback_options of this EventTicketClass.
        :type callback_options: CallbackOptions
        """

        self._callback_options = callback_options

    @property
    def class_template_info(self):
        """Gets the class_template_info of this EventTicketClass.


        :return: The class_template_info of this EventTicketClass.
        :rtype: ClassTemplateInfo
        """
        return self._class_template_info

    @class_template_info.setter
    def class_template_info(self, class_template_info):
        """Sets the class_template_info of this EventTicketClass.


        :param class_template_info: The class_template_info of this EventTicketClass.
        :type class_template_info: ClassTemplateInfo
        """

        self._class_template_info = class_template_info

    @property
    def confirmation_code_label(self):
        """Gets the confirmation_code_label of this EventTicketClass.

        The label to use for the confirmation code value (`eventTicketObject.reservationInfo.confirmationCode`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `confirmationCodeLabel` and `customConfirmationCodeLabel` may not be set. If neither is set, the label will default to \"Confirmation Code\", localized. If the confirmation code field is unset, this label will not be used.

        :return: The confirmation_code_label of this EventTicketClass.
        :rtype: str
        """
        return self._confirmation_code_label

    @confirmation_code_label.setter
    def confirmation_code_label(self, confirmation_code_label):
        """Sets the confirmation_code_label of this EventTicketClass.

        The label to use for the confirmation code value (`eventTicketObject.reservationInfo.confirmationCode`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `confirmationCodeLabel` and `customConfirmationCodeLabel` may not be set. If neither is set, the label will default to \"Confirmation Code\", localized. If the confirmation code field is unset, this label will not be used.

        :param confirmation_code_label: The confirmation_code_label of this EventTicketClass.
        :type confirmation_code_label: str
        """
        allowed_values = ["CONFIRMATION_CODE_LABEL_UNSPECIFIED", "CONFIRMATION_CODE", "confirmationCode", "CONFIRMATION_NUMBER", "confirmationNumber", "ORDER_NUMBER", "orderNumber", "RESERVATION_NUMBER", "reservationNumber"]  # noqa: E501
        if confirmation_code_label not in allowed_values:
            raise ValueError(
                "Invalid value for `confirmation_code_label` ({0}), must be one of {1}"
                .format(confirmation_code_label, allowed_values)
            )

        self._confirmation_code_label = confirmation_code_label

    @property
    def country_code(self):
        """Gets the country_code of this EventTicketClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :return: The country_code of this EventTicketClass.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this EventTicketClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :param country_code: The country_code of this EventTicketClass.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def custom_confirmation_code_label(self):
        """Gets the custom_confirmation_code_label of this EventTicketClass.


        :return: The custom_confirmation_code_label of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._custom_confirmation_code_label

    @custom_confirmation_code_label.setter
    def custom_confirmation_code_label(self, custom_confirmation_code_label):
        """Sets the custom_confirmation_code_label of this EventTicketClass.


        :param custom_confirmation_code_label: The custom_confirmation_code_label of this EventTicketClass.
        :type custom_confirmation_code_label: LocalizedString
        """

        self._custom_confirmation_code_label = custom_confirmation_code_label

    @property
    def custom_gate_label(self):
        """Gets the custom_gate_label of this EventTicketClass.


        :return: The custom_gate_label of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._custom_gate_label

    @custom_gate_label.setter
    def custom_gate_label(self, custom_gate_label):
        """Sets the custom_gate_label of this EventTicketClass.


        :param custom_gate_label: The custom_gate_label of this EventTicketClass.
        :type custom_gate_label: LocalizedString
        """

        self._custom_gate_label = custom_gate_label

    @property
    def custom_row_label(self):
        """Gets the custom_row_label of this EventTicketClass.


        :return: The custom_row_label of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._custom_row_label

    @custom_row_label.setter
    def custom_row_label(self, custom_row_label):
        """Sets the custom_row_label of this EventTicketClass.


        :param custom_row_label: The custom_row_label of this EventTicketClass.
        :type custom_row_label: LocalizedString
        """

        self._custom_row_label = custom_row_label

    @property
    def custom_seat_label(self):
        """Gets the custom_seat_label of this EventTicketClass.


        :return: The custom_seat_label of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._custom_seat_label

    @custom_seat_label.setter
    def custom_seat_label(self, custom_seat_label):
        """Sets the custom_seat_label of this EventTicketClass.


        :param custom_seat_label: The custom_seat_label of this EventTicketClass.
        :type custom_seat_label: LocalizedString
        """

        self._custom_seat_label = custom_seat_label

    @property
    def custom_section_label(self):
        """Gets the custom_section_label of this EventTicketClass.


        :return: The custom_section_label of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._custom_section_label

    @custom_section_label.setter
    def custom_section_label(self, custom_section_label):
        """Sets the custom_section_label of this EventTicketClass.


        :param custom_section_label: The custom_section_label of this EventTicketClass.
        :type custom_section_label: LocalizedString
        """

        self._custom_section_label = custom_section_label

    @property
    def date_time(self):
        """Gets the date_time of this EventTicketClass.


        :return: The date_time of this EventTicketClass.
        :rtype: EventDateTime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this EventTicketClass.


        :param date_time: The date_time of this EventTicketClass.
        :type date_time: EventDateTime
        """

        self._date_time = date_time

    @property
    def enable_smart_tap(self):
        """Gets the enable_smart_tap of this EventTicketClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The enable_smart_tap of this EventTicketClass.
        :rtype: bool
        """
        return self._enable_smart_tap

    @enable_smart_tap.setter
    def enable_smart_tap(self, enable_smart_tap):
        """Sets the enable_smart_tap of this EventTicketClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param enable_smart_tap: The enable_smart_tap of this EventTicketClass.
        :type enable_smart_tap: bool
        """

        self._enable_smart_tap = enable_smart_tap

    @property
    def event_id(self):
        """Gets the event_id of this EventTicketClass.

        The ID of the event. This ID should be unique for every event in an account. It is used to group tickets together if the user has saved multiple tickets for the same event. It can be at most 64 characters. If provided, the grouping will be stable. Be wary of unintentional collision to avoid grouping tickets that should not be grouped. If you use only one class per event, you can simply set this to the `classId` (with or without the issuer ID portion). If not provided, the platform will attempt to use other data to group tickets (potentially unstable).

        :return: The event_id of this EventTicketClass.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventTicketClass.

        The ID of the event. This ID should be unique for every event in an account. It is used to group tickets together if the user has saved multiple tickets for the same event. It can be at most 64 characters. If provided, the grouping will be stable. Be wary of unintentional collision to avoid grouping tickets that should not be grouped. If you use only one class per event, you can simply set this to the `classId` (with or without the issuer ID portion). If not provided, the platform will attempt to use other data to group tickets (potentially unstable).

        :param event_id: The event_id of this EventTicketClass.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this EventTicketClass.


        :return: The event_name of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this EventTicketClass.


        :param event_name: The event_name of this EventTicketClass.
        :type event_name: LocalizedString
        """

        self._event_name = event_name

    @property
    def fine_print(self):
        """Gets the fine_print of this EventTicketClass.


        :return: The fine_print of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._fine_print

    @fine_print.setter
    def fine_print(self, fine_print):
        """Sets the fine_print of this EventTicketClass.


        :param fine_print: The fine_print of this EventTicketClass.
        :type fine_print: LocalizedString
        """

        self._fine_print = fine_print

    @property
    def gate_label(self):
        """Gets the gate_label of this EventTicketClass.

        The label to use for the gate value (`eventTicketObject.seatInfo.gate`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `gateLabel` and `customGateLabel` may not be set. If neither is set, the label will default to \"Gate\", localized. If the gate field is unset, this label will not be used.

        :return: The gate_label of this EventTicketClass.
        :rtype: str
        """
        return self._gate_label

    @gate_label.setter
    def gate_label(self, gate_label):
        """Sets the gate_label of this EventTicketClass.

        The label to use for the gate value (`eventTicketObject.seatInfo.gate`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `gateLabel` and `customGateLabel` may not be set. If neither is set, the label will default to \"Gate\", localized. If the gate field is unset, this label will not be used.

        :param gate_label: The gate_label of this EventTicketClass.
        :type gate_label: str
        """
        allowed_values = ["GATE_LABEL_UNSPECIFIED", "GATE", "gate", "DOOR", "door", "ENTRANCE", "entrance"]  # noqa: E501
        if gate_label not in allowed_values:
            raise ValueError(
                "Invalid value for `gate_label` ({0}), must be one of {1}"
                .format(gate_label, allowed_values)
            )

        self._gate_label = gate_label

    @property
    def hero_image(self):
        """Gets the hero_image of this EventTicketClass.


        :return: The hero_image of this EventTicketClass.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this EventTicketClass.


        :param hero_image: The hero_image of this EventTicketClass.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this EventTicketClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :return: The hex_background_color of this EventTicketClass.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this EventTicketClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :param hex_background_color: The hex_background_color of this EventTicketClass.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def homepage_uri(self):
        """Gets the homepage_uri of this EventTicketClass.


        :return: The homepage_uri of this EventTicketClass.
        :rtype: Uri
        """
        return self._homepage_uri

    @homepage_uri.setter
    def homepage_uri(self, homepage_uri):
        """Sets the homepage_uri of this EventTicketClass.


        :param homepage_uri: The homepage_uri of this EventTicketClass.
        :type homepage_uri: Uri
        """

        self._homepage_uri = homepage_uri

    @property
    def id(self):
        """Gets the id of this EventTicketClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :return: The id of this EventTicketClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventTicketClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :param id: The id of this EventTicketClass.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this EventTicketClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :return: The image_modules_data of this EventTicketClass.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this EventTicketClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :param image_modules_data: The image_modules_data of this EventTicketClass.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def info_module_data(self):
        """Gets the info_module_data of this EventTicketClass.


        :return: The info_module_data of this EventTicketClass.
        :rtype: InfoModuleData
        """
        return self._info_module_data

    @info_module_data.setter
    def info_module_data(self, info_module_data):
        """Sets the info_module_data of this EventTicketClass.


        :param info_module_data: The info_module_data of this EventTicketClass.
        :type info_module_data: InfoModuleData
        """

        self._info_module_data = info_module_data

    @property
    def issuer_name(self):
        """Gets the issuer_name of this EventTicketClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :return: The issuer_name of this EventTicketClass.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this EventTicketClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :param issuer_name: The issuer_name of this EventTicketClass.
        :type issuer_name: str
        """

        self._issuer_name = issuer_name

    @property
    def kind(self):
        """Gets the kind of this EventTicketClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#eventTicketClass\"`.

        :return: The kind of this EventTicketClass.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventTicketClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#eventTicketClass\"`.

        :param kind: The kind of this EventTicketClass.
        :type kind: str
        """

        self._kind = kind

    @property
    def links_module_data(self):
        """Gets the links_module_data of this EventTicketClass.


        :return: The links_module_data of this EventTicketClass.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this EventTicketClass.


        :param links_module_data: The links_module_data of this EventTicketClass.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def localized_issuer_name(self):
        """Gets the localized_issuer_name of this EventTicketClass.


        :return: The localized_issuer_name of this EventTicketClass.
        :rtype: LocalizedString
        """
        return self._localized_issuer_name

    @localized_issuer_name.setter
    def localized_issuer_name(self, localized_issuer_name):
        """Sets the localized_issuer_name of this EventTicketClass.


        :param localized_issuer_name: The localized_issuer_name of this EventTicketClass.
        :type localized_issuer_name: LocalizedString
        """

        self._localized_issuer_name = localized_issuer_name

    @property
    def locations(self):
        """Gets the locations of this EventTicketClass.

        Note: This field is currently not supported to trigger geo notifications.

        :return: The locations of this EventTicketClass.
        :rtype: List[LatLongPoint]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this EventTicketClass.

        Note: This field is currently not supported to trigger geo notifications.

        :param locations: The locations of this EventTicketClass.
        :type locations: List[LatLongPoint]
        """

        self._locations = locations

    @property
    def logo(self):
        """Gets the logo of this EventTicketClass.


        :return: The logo of this EventTicketClass.
        :rtype: Image
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this EventTicketClass.


        :param logo: The logo of this EventTicketClass.
        :type logo: Image
        """

        self._logo = logo

    @property
    def messages(self):
        """Gets the messages of this EventTicketClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :return: The messages of this EventTicketClass.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this EventTicketClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :param messages: The messages of this EventTicketClass.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def multiple_devices_and_holders_allowed_status(self):
        """Gets the multiple_devices_and_holders_allowed_status of this EventTicketClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :return: The multiple_devices_and_holders_allowed_status of this EventTicketClass.
        :rtype: str
        """
        return self._multiple_devices_and_holders_allowed_status

    @multiple_devices_and_holders_allowed_status.setter
    def multiple_devices_and_holders_allowed_status(self, multiple_devices_and_holders_allowed_status):
        """Sets the multiple_devices_and_holders_allowed_status of this EventTicketClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this EventTicketClass.
        :type multiple_devices_and_holders_allowed_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "MULTIPLE_HOLDERS", "multipleHolders", "ONE_USER_ALL_DEVICES", "oneUserAllDevices", "ONE_USER_ONE_DEVICE", "oneUserOneDevice"]  # noqa: E501
        if multiple_devices_and_holders_allowed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `multiple_devices_and_holders_allowed_status` ({0}), must be one of {1}"
                .format(multiple_devices_and_holders_allowed_status, allowed_values)
            )

        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status

    @property
    def redemption_issuers(self):
        """Gets the redemption_issuers of this EventTicketClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The redemption_issuers of this EventTicketClass.
        :rtype: List[str]
        """
        return self._redemption_issuers

    @redemption_issuers.setter
    def redemption_issuers(self, redemption_issuers):
        """Sets the redemption_issuers of this EventTicketClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param redemption_issuers: The redemption_issuers of this EventTicketClass.
        :type redemption_issuers: List[str]
        """

        self._redemption_issuers = redemption_issuers

    @property
    def review(self):
        """Gets the review of this EventTicketClass.


        :return: The review of this EventTicketClass.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this EventTicketClass.


        :param review: The review of this EventTicketClass.
        :type review: Review
        """

        self._review = review

    @property
    def review_status(self):
        """Gets the review_status of this EventTicketClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :return: The review_status of this EventTicketClass.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this EventTicketClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :param review_status: The review_status of this EventTicketClass.
        :type review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "UNDER_REVIEW", "underReview", "APPROVED", "approved", "REJECTED", "rejected", "DRAFT", "draft"]  # noqa: E501
        if review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def row_label(self):
        """Gets the row_label of this EventTicketClass.

        The label to use for the row value (`eventTicketObject.seatInfo.row`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `rowLabel` and `customRowLabel` may not be set. If neither is set, the label will default to \"Row\", localized. If the row field is unset, this label will not be used.

        :return: The row_label of this EventTicketClass.
        :rtype: str
        """
        return self._row_label

    @row_label.setter
    def row_label(self, row_label):
        """Sets the row_label of this EventTicketClass.

        The label to use for the row value (`eventTicketObject.seatInfo.row`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `rowLabel` and `customRowLabel` may not be set. If neither is set, the label will default to \"Row\", localized. If the row field is unset, this label will not be used.

        :param row_label: The row_label of this EventTicketClass.
        :type row_label: str
        """
        allowed_values = ["ROW_LABEL_UNSPECIFIED", "ROW", "row"]  # noqa: E501
        if row_label not in allowed_values:
            raise ValueError(
                "Invalid value for `row_label` ({0}), must be one of {1}"
                .format(row_label, allowed_values)
            )

        self._row_label = row_label

    @property
    def seat_label(self):
        """Gets the seat_label of this EventTicketClass.

        The label to use for the seat value (`eventTicketObject.seatInfo.seat`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `seatLabel` and `customSeatLabel` may not be set. If neither is set, the label will default to \"Seat\", localized. If the seat field is unset, this label will not be used.

        :return: The seat_label of this EventTicketClass.
        :rtype: str
        """
        return self._seat_label

    @seat_label.setter
    def seat_label(self, seat_label):
        """Sets the seat_label of this EventTicketClass.

        The label to use for the seat value (`eventTicketObject.seatInfo.seat`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `seatLabel` and `customSeatLabel` may not be set. If neither is set, the label will default to \"Seat\", localized. If the seat field is unset, this label will not be used.

        :param seat_label: The seat_label of this EventTicketClass.
        :type seat_label: str
        """
        allowed_values = ["SEAT_LABEL_UNSPECIFIED", "SEAT", "seat"]  # noqa: E501
        if seat_label not in allowed_values:
            raise ValueError(
                "Invalid value for `seat_label` ({0}), must be one of {1}"
                .format(seat_label, allowed_values)
            )

        self._seat_label = seat_label

    @property
    def section_label(self):
        """Gets the section_label of this EventTicketClass.

        The label to use for the section value (`eventTicketObject.seatInfo.section`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `sectionLabel` and `customSectionLabel` may not be set. If neither is set, the label will default to \"Section\", localized. If the section field is unset, this label will not be used.

        :return: The section_label of this EventTicketClass.
        :rtype: str
        """
        return self._section_label

    @section_label.setter
    def section_label(self, section_label):
        """Sets the section_label of this EventTicketClass.

        The label to use for the section value (`eventTicketObject.seatInfo.section`) on the card detail view. Each available option maps to a set of localized strings, so that translations are shown to the user based on their locale. Both `sectionLabel` and `customSectionLabel` may not be set. If neither is set, the label will default to \"Section\", localized. If the section field is unset, this label will not be used.

        :param section_label: The section_label of this EventTicketClass.
        :type section_label: str
        """
        allowed_values = ["SECTION_LABEL_UNSPECIFIED", "SECTION", "section", "THEATER", "theater"]  # noqa: E501
        if section_label not in allowed_values:
            raise ValueError(
                "Invalid value for `section_label` ({0}), must be one of {1}"
                .format(section_label, allowed_values)
            )

        self._section_label = section_label

    @property
    def security_animation(self):
        """Gets the security_animation of this EventTicketClass.


        :return: The security_animation of this EventTicketClass.
        :rtype: SecurityAnimation
        """
        return self._security_animation

    @security_animation.setter
    def security_animation(self, security_animation):
        """Sets the security_animation of this EventTicketClass.


        :param security_animation: The security_animation of this EventTicketClass.
        :type security_animation: SecurityAnimation
        """

        self._security_animation = security_animation

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this EventTicketClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :return: The text_modules_data of this EventTicketClass.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this EventTicketClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :param text_modules_data: The text_modules_data of this EventTicketClass.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def venue(self):
        """Gets the venue of this EventTicketClass.


        :return: The venue of this EventTicketClass.
        :rtype: EventVenue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this EventTicketClass.


        :param venue: The venue of this EventTicketClass.
        :type venue: EventVenue
        """

        self._venue = venue

    @property
    def version(self):
        """Gets the version of this EventTicketClass.

        Deprecated

        :return: The version of this EventTicketClass.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EventTicketClass.

        Deprecated

        :param version: The version of this EventTicketClass.
        :type version: str
        """

        self._version = version

    @property
    def view_unlock_requirement(self):
        """Gets the view_unlock_requirement of this EventTicketClass.

        View Unlock Requirement options for the event ticket.

        :return: The view_unlock_requirement of this EventTicketClass.
        :rtype: str
        """
        return self._view_unlock_requirement

    @view_unlock_requirement.setter
    def view_unlock_requirement(self, view_unlock_requirement):
        """Sets the view_unlock_requirement of this EventTicketClass.

        View Unlock Requirement options for the event ticket.

        :param view_unlock_requirement: The view_unlock_requirement of this EventTicketClass.
        :type view_unlock_requirement: str
        """
        allowed_values = ["VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED", "UNLOCK_NOT_REQUIRED", "UNLOCK_REQUIRED_TO_VIEW"]  # noqa: E501
        if view_unlock_requirement not in allowed_values:
            raise ValueError(
                "Invalid value for `view_unlock_requirement` ({0}), must be one of {1}"
                .format(view_unlock_requirement, allowed_values)
            )

        self._view_unlock_requirement = view_unlock_requirement

    @property
    def word_mark(self):
        """Gets the word_mark of this EventTicketClass.


        :return: The word_mark of this EventTicketClass.
        :rtype: Image
        """
        return self._word_mark

    @word_mark.setter
    def word_mark(self, word_mark):
        """Sets the word_mark of this EventTicketClass.


        :param word_mark: The word_mark of this EventTicketClass.
        :type word_mark: Image
        """

        self._word_mark = word_mark
