# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.callback_options import CallbackOptions
from openapi_server.models.class_template_info import ClassTemplateInfo
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.info_module_data import InfoModuleData
from openapi_server.models.lat_long_point import LatLongPoint
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.message import Message
from openapi_server.models.review import Review
from openapi_server.models.security_animation import SecurityAnimation
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.uri import Uri
from openapi_server import util


class GiftCardClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_barcode_redemption: bool=None, allow_multiple_users_per_object: bool=None, callback_options: CallbackOptions=None, card_number_label: str=None, class_template_info: ClassTemplateInfo=None, country_code: str=None, enable_smart_tap: bool=None, event_number_label: str=None, hero_image: Image=None, hex_background_color: str=None, homepage_uri: Uri=None, id: str=None, image_modules_data: List[ImageModuleData]=None, info_module_data: InfoModuleData=None, issuer_name: str=None, kind: str=None, links_module_data: LinksModuleData=None, localized_card_number_label: LocalizedString=None, localized_event_number_label: LocalizedString=None, localized_issuer_name: LocalizedString=None, localized_merchant_name: LocalizedString=None, localized_pin_label: LocalizedString=None, locations: List[LatLongPoint]=None, merchant_name: str=None, messages: List[Message]=None, multiple_devices_and_holders_allowed_status: str=None, pin_label: str=None, program_logo: Image=None, redemption_issuers: List[str]=None, review: Review=None, review_status: str=None, security_animation: SecurityAnimation=None, text_modules_data: List[TextModuleData]=None, version: str=None, view_unlock_requirement: str=None, word_mark: Image=None):
        """GiftCardClass - a model defined in OpenAPI

        :param allow_barcode_redemption: The allow_barcode_redemption of this GiftCardClass.
        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this GiftCardClass.
        :param callback_options: The callback_options of this GiftCardClass.
        :param card_number_label: The card_number_label of this GiftCardClass.
        :param class_template_info: The class_template_info of this GiftCardClass.
        :param country_code: The country_code of this GiftCardClass.
        :param enable_smart_tap: The enable_smart_tap of this GiftCardClass.
        :param event_number_label: The event_number_label of this GiftCardClass.
        :param hero_image: The hero_image of this GiftCardClass.
        :param hex_background_color: The hex_background_color of this GiftCardClass.
        :param homepage_uri: The homepage_uri of this GiftCardClass.
        :param id: The id of this GiftCardClass.
        :param image_modules_data: The image_modules_data of this GiftCardClass.
        :param info_module_data: The info_module_data of this GiftCardClass.
        :param issuer_name: The issuer_name of this GiftCardClass.
        :param kind: The kind of this GiftCardClass.
        :param links_module_data: The links_module_data of this GiftCardClass.
        :param localized_card_number_label: The localized_card_number_label of this GiftCardClass.
        :param localized_event_number_label: The localized_event_number_label of this GiftCardClass.
        :param localized_issuer_name: The localized_issuer_name of this GiftCardClass.
        :param localized_merchant_name: The localized_merchant_name of this GiftCardClass.
        :param localized_pin_label: The localized_pin_label of this GiftCardClass.
        :param locations: The locations of this GiftCardClass.
        :param merchant_name: The merchant_name of this GiftCardClass.
        :param messages: The messages of this GiftCardClass.
        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this GiftCardClass.
        :param pin_label: The pin_label of this GiftCardClass.
        :param program_logo: The program_logo of this GiftCardClass.
        :param redemption_issuers: The redemption_issuers of this GiftCardClass.
        :param review: The review of this GiftCardClass.
        :param review_status: The review_status of this GiftCardClass.
        :param security_animation: The security_animation of this GiftCardClass.
        :param text_modules_data: The text_modules_data of this GiftCardClass.
        :param version: The version of this GiftCardClass.
        :param view_unlock_requirement: The view_unlock_requirement of this GiftCardClass.
        :param word_mark: The word_mark of this GiftCardClass.
        """
        self.openapi_types = {
            'allow_barcode_redemption': bool,
            'allow_multiple_users_per_object': bool,
            'callback_options': CallbackOptions,
            'card_number_label': str,
            'class_template_info': ClassTemplateInfo,
            'country_code': str,
            'enable_smart_tap': bool,
            'event_number_label': str,
            'hero_image': Image,
            'hex_background_color': str,
            'homepage_uri': Uri,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'info_module_data': InfoModuleData,
            'issuer_name': str,
            'kind': str,
            'links_module_data': LinksModuleData,
            'localized_card_number_label': LocalizedString,
            'localized_event_number_label': LocalizedString,
            'localized_issuer_name': LocalizedString,
            'localized_merchant_name': LocalizedString,
            'localized_pin_label': LocalizedString,
            'locations': List[LatLongPoint],
            'merchant_name': str,
            'messages': List[Message],
            'multiple_devices_and_holders_allowed_status': str,
            'pin_label': str,
            'program_logo': Image,
            'redemption_issuers': List[str],
            'review': Review,
            'review_status': str,
            'security_animation': SecurityAnimation,
            'text_modules_data': List[TextModuleData],
            'version': str,
            'view_unlock_requirement': str,
            'word_mark': Image
        }

        self.attribute_map = {
            'allow_barcode_redemption': 'allowBarcodeRedemption',
            'allow_multiple_users_per_object': 'allowMultipleUsersPerObject',
            'callback_options': 'callbackOptions',
            'card_number_label': 'cardNumberLabel',
            'class_template_info': 'classTemplateInfo',
            'country_code': 'countryCode',
            'enable_smart_tap': 'enableSmartTap',
            'event_number_label': 'eventNumberLabel',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'homepage_uri': 'homepageUri',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'info_module_data': 'infoModuleData',
            'issuer_name': 'issuerName',
            'kind': 'kind',
            'links_module_data': 'linksModuleData',
            'localized_card_number_label': 'localizedCardNumberLabel',
            'localized_event_number_label': 'localizedEventNumberLabel',
            'localized_issuer_name': 'localizedIssuerName',
            'localized_merchant_name': 'localizedMerchantName',
            'localized_pin_label': 'localizedPinLabel',
            'locations': 'locations',
            'merchant_name': 'merchantName',
            'messages': 'messages',
            'multiple_devices_and_holders_allowed_status': 'multipleDevicesAndHoldersAllowedStatus',
            'pin_label': 'pinLabel',
            'program_logo': 'programLogo',
            'redemption_issuers': 'redemptionIssuers',
            'review': 'review',
            'review_status': 'reviewStatus',
            'security_animation': 'securityAnimation',
            'text_modules_data': 'textModulesData',
            'version': 'version',
            'view_unlock_requirement': 'viewUnlockRequirement',
            'word_mark': 'wordMark'
        }

        self._allow_barcode_redemption = allow_barcode_redemption
        self._allow_multiple_users_per_object = allow_multiple_users_per_object
        self._callback_options = callback_options
        self._card_number_label = card_number_label
        self._class_template_info = class_template_info
        self._country_code = country_code
        self._enable_smart_tap = enable_smart_tap
        self._event_number_label = event_number_label
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._homepage_uri = homepage_uri
        self._id = id
        self._image_modules_data = image_modules_data
        self._info_module_data = info_module_data
        self._issuer_name = issuer_name
        self._kind = kind
        self._links_module_data = links_module_data
        self._localized_card_number_label = localized_card_number_label
        self._localized_event_number_label = localized_event_number_label
        self._localized_issuer_name = localized_issuer_name
        self._localized_merchant_name = localized_merchant_name
        self._localized_pin_label = localized_pin_label
        self._locations = locations
        self._merchant_name = merchant_name
        self._messages = messages
        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status
        self._pin_label = pin_label
        self._program_logo = program_logo
        self._redemption_issuers = redemption_issuers
        self._review = review
        self._review_status = review_status
        self._security_animation = security_animation
        self._text_modules_data = text_modules_data
        self._version = version
        self._view_unlock_requirement = view_unlock_requirement
        self._word_mark = word_mark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCardClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GiftCardClass of this GiftCardClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_barcode_redemption(self):
        """Gets the allow_barcode_redemption of this GiftCardClass.

        Determines whether the merchant supports gift card redemption using barcode. If true, app displays a barcode for the gift card on the Gift card details screen. If false, a barcode is not displayed.

        :return: The allow_barcode_redemption of this GiftCardClass.
        :rtype: bool
        """
        return self._allow_barcode_redemption

    @allow_barcode_redemption.setter
    def allow_barcode_redemption(self, allow_barcode_redemption):
        """Sets the allow_barcode_redemption of this GiftCardClass.

        Determines whether the merchant supports gift card redemption using barcode. If true, app displays a barcode for the gift card on the Gift card details screen. If false, a barcode is not displayed.

        :param allow_barcode_redemption: The allow_barcode_redemption of this GiftCardClass.
        :type allow_barcode_redemption: bool
        """

        self._allow_barcode_redemption = allow_barcode_redemption

    @property
    def allow_multiple_users_per_object(self):
        """Gets the allow_multiple_users_per_object of this GiftCardClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :return: The allow_multiple_users_per_object of this GiftCardClass.
        :rtype: bool
        """
        return self._allow_multiple_users_per_object

    @allow_multiple_users_per_object.setter
    def allow_multiple_users_per_object(self, allow_multiple_users_per_object):
        """Sets the allow_multiple_users_per_object of this GiftCardClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this GiftCardClass.
        :type allow_multiple_users_per_object: bool
        """

        self._allow_multiple_users_per_object = allow_multiple_users_per_object

    @property
    def callback_options(self):
        """Gets the callback_options of this GiftCardClass.


        :return: The callback_options of this GiftCardClass.
        :rtype: CallbackOptions
        """
        return self._callback_options

    @callback_options.setter
    def callback_options(self, callback_options):
        """Sets the callback_options of this GiftCardClass.


        :param callback_options: The callback_options of this GiftCardClass.
        :type callback_options: CallbackOptions
        """

        self._callback_options = callback_options

    @property
    def card_number_label(self):
        """Gets the card_number_label of this GiftCardClass.

        The label to display for the card number, such as \"Card Number\".

        :return: The card_number_label of this GiftCardClass.
        :rtype: str
        """
        return self._card_number_label

    @card_number_label.setter
    def card_number_label(self, card_number_label):
        """Sets the card_number_label of this GiftCardClass.

        The label to display for the card number, such as \"Card Number\".

        :param card_number_label: The card_number_label of this GiftCardClass.
        :type card_number_label: str
        """

        self._card_number_label = card_number_label

    @property
    def class_template_info(self):
        """Gets the class_template_info of this GiftCardClass.


        :return: The class_template_info of this GiftCardClass.
        :rtype: ClassTemplateInfo
        """
        return self._class_template_info

    @class_template_info.setter
    def class_template_info(self, class_template_info):
        """Sets the class_template_info of this GiftCardClass.


        :param class_template_info: The class_template_info of this GiftCardClass.
        :type class_template_info: ClassTemplateInfo
        """

        self._class_template_info = class_template_info

    @property
    def country_code(self):
        """Gets the country_code of this GiftCardClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :return: The country_code of this GiftCardClass.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GiftCardClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :param country_code: The country_code of this GiftCardClass.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def enable_smart_tap(self):
        """Gets the enable_smart_tap of this GiftCardClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The enable_smart_tap of this GiftCardClass.
        :rtype: bool
        """
        return self._enable_smart_tap

    @enable_smart_tap.setter
    def enable_smart_tap(self, enable_smart_tap):
        """Sets the enable_smart_tap of this GiftCardClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param enable_smart_tap: The enable_smart_tap of this GiftCardClass.
        :type enable_smart_tap: bool
        """

        self._enable_smart_tap = enable_smart_tap

    @property
    def event_number_label(self):
        """Gets the event_number_label of this GiftCardClass.

        The label to display for event number, such as \"Target Event #\".

        :return: The event_number_label of this GiftCardClass.
        :rtype: str
        """
        return self._event_number_label

    @event_number_label.setter
    def event_number_label(self, event_number_label):
        """Sets the event_number_label of this GiftCardClass.

        The label to display for event number, such as \"Target Event #\".

        :param event_number_label: The event_number_label of this GiftCardClass.
        :type event_number_label: str
        """

        self._event_number_label = event_number_label

    @property
    def hero_image(self):
        """Gets the hero_image of this GiftCardClass.


        :return: The hero_image of this GiftCardClass.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this GiftCardClass.


        :param hero_image: The hero_image of this GiftCardClass.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this GiftCardClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :return: The hex_background_color of this GiftCardClass.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this GiftCardClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :param hex_background_color: The hex_background_color of this GiftCardClass.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def homepage_uri(self):
        """Gets the homepage_uri of this GiftCardClass.


        :return: The homepage_uri of this GiftCardClass.
        :rtype: Uri
        """
        return self._homepage_uri

    @homepage_uri.setter
    def homepage_uri(self, homepage_uri):
        """Sets the homepage_uri of this GiftCardClass.


        :param homepage_uri: The homepage_uri of this GiftCardClass.
        :type homepage_uri: Uri
        """

        self._homepage_uri = homepage_uri

    @property
    def id(self):
        """Gets the id of this GiftCardClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :return: The id of this GiftCardClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GiftCardClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :param id: The id of this GiftCardClass.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this GiftCardClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :return: The image_modules_data of this GiftCardClass.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this GiftCardClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :param image_modules_data: The image_modules_data of this GiftCardClass.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def info_module_data(self):
        """Gets the info_module_data of this GiftCardClass.


        :return: The info_module_data of this GiftCardClass.
        :rtype: InfoModuleData
        """
        return self._info_module_data

    @info_module_data.setter
    def info_module_data(self, info_module_data):
        """Sets the info_module_data of this GiftCardClass.


        :param info_module_data: The info_module_data of this GiftCardClass.
        :type info_module_data: InfoModuleData
        """

        self._info_module_data = info_module_data

    @property
    def issuer_name(self):
        """Gets the issuer_name of this GiftCardClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :return: The issuer_name of this GiftCardClass.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this GiftCardClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :param issuer_name: The issuer_name of this GiftCardClass.
        :type issuer_name: str
        """

        self._issuer_name = issuer_name

    @property
    def kind(self):
        """Gets the kind of this GiftCardClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#giftCardClass\"`.

        :return: The kind of this GiftCardClass.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this GiftCardClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#giftCardClass\"`.

        :param kind: The kind of this GiftCardClass.
        :type kind: str
        """

        self._kind = kind

    @property
    def links_module_data(self):
        """Gets the links_module_data of this GiftCardClass.


        :return: The links_module_data of this GiftCardClass.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this GiftCardClass.


        :param links_module_data: The links_module_data of this GiftCardClass.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def localized_card_number_label(self):
        """Gets the localized_card_number_label of this GiftCardClass.


        :return: The localized_card_number_label of this GiftCardClass.
        :rtype: LocalizedString
        """
        return self._localized_card_number_label

    @localized_card_number_label.setter
    def localized_card_number_label(self, localized_card_number_label):
        """Sets the localized_card_number_label of this GiftCardClass.


        :param localized_card_number_label: The localized_card_number_label of this GiftCardClass.
        :type localized_card_number_label: LocalizedString
        """

        self._localized_card_number_label = localized_card_number_label

    @property
    def localized_event_number_label(self):
        """Gets the localized_event_number_label of this GiftCardClass.


        :return: The localized_event_number_label of this GiftCardClass.
        :rtype: LocalizedString
        """
        return self._localized_event_number_label

    @localized_event_number_label.setter
    def localized_event_number_label(self, localized_event_number_label):
        """Sets the localized_event_number_label of this GiftCardClass.


        :param localized_event_number_label: The localized_event_number_label of this GiftCardClass.
        :type localized_event_number_label: LocalizedString
        """

        self._localized_event_number_label = localized_event_number_label

    @property
    def localized_issuer_name(self):
        """Gets the localized_issuer_name of this GiftCardClass.


        :return: The localized_issuer_name of this GiftCardClass.
        :rtype: LocalizedString
        """
        return self._localized_issuer_name

    @localized_issuer_name.setter
    def localized_issuer_name(self, localized_issuer_name):
        """Sets the localized_issuer_name of this GiftCardClass.


        :param localized_issuer_name: The localized_issuer_name of this GiftCardClass.
        :type localized_issuer_name: LocalizedString
        """

        self._localized_issuer_name = localized_issuer_name

    @property
    def localized_merchant_name(self):
        """Gets the localized_merchant_name of this GiftCardClass.


        :return: The localized_merchant_name of this GiftCardClass.
        :rtype: LocalizedString
        """
        return self._localized_merchant_name

    @localized_merchant_name.setter
    def localized_merchant_name(self, localized_merchant_name):
        """Sets the localized_merchant_name of this GiftCardClass.


        :param localized_merchant_name: The localized_merchant_name of this GiftCardClass.
        :type localized_merchant_name: LocalizedString
        """

        self._localized_merchant_name = localized_merchant_name

    @property
    def localized_pin_label(self):
        """Gets the localized_pin_label of this GiftCardClass.


        :return: The localized_pin_label of this GiftCardClass.
        :rtype: LocalizedString
        """
        return self._localized_pin_label

    @localized_pin_label.setter
    def localized_pin_label(self, localized_pin_label):
        """Sets the localized_pin_label of this GiftCardClass.


        :param localized_pin_label: The localized_pin_label of this GiftCardClass.
        :type localized_pin_label: LocalizedString
        """

        self._localized_pin_label = localized_pin_label

    @property
    def locations(self):
        """Gets the locations of this GiftCardClass.

        Note: This field is currently not supported to trigger geo notifications.

        :return: The locations of this GiftCardClass.
        :rtype: List[LatLongPoint]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this GiftCardClass.

        Note: This field is currently not supported to trigger geo notifications.

        :param locations: The locations of this GiftCardClass.
        :type locations: List[LatLongPoint]
        """

        self._locations = locations

    @property
    def merchant_name(self):
        """Gets the merchant_name of this GiftCardClass.

        Merchant name, such as \"Adam's Apparel\". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.

        :return: The merchant_name of this GiftCardClass.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this GiftCardClass.

        Merchant name, such as \"Adam's Apparel\". The app may display an ellipsis after the first 20 characters to ensure full string is displayed on smaller screens.

        :param merchant_name: The merchant_name of this GiftCardClass.
        :type merchant_name: str
        """

        self._merchant_name = merchant_name

    @property
    def messages(self):
        """Gets the messages of this GiftCardClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :return: The messages of this GiftCardClass.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this GiftCardClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :param messages: The messages of this GiftCardClass.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def multiple_devices_and_holders_allowed_status(self):
        """Gets the multiple_devices_and_holders_allowed_status of this GiftCardClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :return: The multiple_devices_and_holders_allowed_status of this GiftCardClass.
        :rtype: str
        """
        return self._multiple_devices_and_holders_allowed_status

    @multiple_devices_and_holders_allowed_status.setter
    def multiple_devices_and_holders_allowed_status(self, multiple_devices_and_holders_allowed_status):
        """Sets the multiple_devices_and_holders_allowed_status of this GiftCardClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this GiftCardClass.
        :type multiple_devices_and_holders_allowed_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "MULTIPLE_HOLDERS", "multipleHolders", "ONE_USER_ALL_DEVICES", "oneUserAllDevices", "ONE_USER_ONE_DEVICE", "oneUserOneDevice"]  # noqa: E501
        if multiple_devices_and_holders_allowed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `multiple_devices_and_holders_allowed_status` ({0}), must be one of {1}"
                .format(multiple_devices_and_holders_allowed_status, allowed_values)
            )

        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status

    @property
    def pin_label(self):
        """Gets the pin_label of this GiftCardClass.

        The label to display for the PIN, such as \"4-digit PIN\".

        :return: The pin_label of this GiftCardClass.
        :rtype: str
        """
        return self._pin_label

    @pin_label.setter
    def pin_label(self, pin_label):
        """Sets the pin_label of this GiftCardClass.

        The label to display for the PIN, such as \"4-digit PIN\".

        :param pin_label: The pin_label of this GiftCardClass.
        :type pin_label: str
        """

        self._pin_label = pin_label

    @property
    def program_logo(self):
        """Gets the program_logo of this GiftCardClass.


        :return: The program_logo of this GiftCardClass.
        :rtype: Image
        """
        return self._program_logo

    @program_logo.setter
    def program_logo(self, program_logo):
        """Sets the program_logo of this GiftCardClass.


        :param program_logo: The program_logo of this GiftCardClass.
        :type program_logo: Image
        """

        self._program_logo = program_logo

    @property
    def redemption_issuers(self):
        """Gets the redemption_issuers of this GiftCardClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The redemption_issuers of this GiftCardClass.
        :rtype: List[str]
        """
        return self._redemption_issuers

    @redemption_issuers.setter
    def redemption_issuers(self, redemption_issuers):
        """Sets the redemption_issuers of this GiftCardClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param redemption_issuers: The redemption_issuers of this GiftCardClass.
        :type redemption_issuers: List[str]
        """

        self._redemption_issuers = redemption_issuers

    @property
    def review(self):
        """Gets the review of this GiftCardClass.


        :return: The review of this GiftCardClass.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this GiftCardClass.


        :param review: The review of this GiftCardClass.
        :type review: Review
        """

        self._review = review

    @property
    def review_status(self):
        """Gets the review_status of this GiftCardClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :return: The review_status of this GiftCardClass.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this GiftCardClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :param review_status: The review_status of this GiftCardClass.
        :type review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "UNDER_REVIEW", "underReview", "APPROVED", "approved", "REJECTED", "rejected", "DRAFT", "draft"]  # noqa: E501
        if review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def security_animation(self):
        """Gets the security_animation of this GiftCardClass.


        :return: The security_animation of this GiftCardClass.
        :rtype: SecurityAnimation
        """
        return self._security_animation

    @security_animation.setter
    def security_animation(self, security_animation):
        """Sets the security_animation of this GiftCardClass.


        :param security_animation: The security_animation of this GiftCardClass.
        :type security_animation: SecurityAnimation
        """

        self._security_animation = security_animation

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this GiftCardClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :return: The text_modules_data of this GiftCardClass.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this GiftCardClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :param text_modules_data: The text_modules_data of this GiftCardClass.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def version(self):
        """Gets the version of this GiftCardClass.

        Deprecated

        :return: The version of this GiftCardClass.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GiftCardClass.

        Deprecated

        :param version: The version of this GiftCardClass.
        :type version: str
        """

        self._version = version

    @property
    def view_unlock_requirement(self):
        """Gets the view_unlock_requirement of this GiftCardClass.

        View Unlock Requirement options for the gift card.

        :return: The view_unlock_requirement of this GiftCardClass.
        :rtype: str
        """
        return self._view_unlock_requirement

    @view_unlock_requirement.setter
    def view_unlock_requirement(self, view_unlock_requirement):
        """Sets the view_unlock_requirement of this GiftCardClass.

        View Unlock Requirement options for the gift card.

        :param view_unlock_requirement: The view_unlock_requirement of this GiftCardClass.
        :type view_unlock_requirement: str
        """
        allowed_values = ["VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED", "UNLOCK_NOT_REQUIRED", "UNLOCK_REQUIRED_TO_VIEW"]  # noqa: E501
        if view_unlock_requirement not in allowed_values:
            raise ValueError(
                "Invalid value for `view_unlock_requirement` ({0}), must be one of {1}"
                .format(view_unlock_requirement, allowed_values)
            )

        self._view_unlock_requirement = view_unlock_requirement

    @property
    def word_mark(self):
        """Gets the word_mark of this GiftCardClass.


        :return: The word_mark of this GiftCardClass.
        :rtype: Image
        """
        return self._word_mark

    @word_mark.setter
    def word_mark(self, word_mark):
        """Sets the word_mark of this GiftCardClass.


        :param word_mark: The word_mark of this GiftCardClass.
        :type word_mark: Image
        """

        self._word_mark = word_mark
