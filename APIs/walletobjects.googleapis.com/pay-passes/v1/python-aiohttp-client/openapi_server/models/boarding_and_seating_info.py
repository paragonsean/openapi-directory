# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class BoardingAndSeatingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boarding_door: str=None, boarding_group: str=None, boarding_position: str=None, boarding_privilege_image: Image=None, kind: str=None, seat_assignment: LocalizedString=None, seat_class: str=None, seat_number: str=None, sequence_number: str=None):
        """BoardingAndSeatingInfo - a model defined in OpenAPI

        :param boarding_door: The boarding_door of this BoardingAndSeatingInfo.
        :param boarding_group: The boarding_group of this BoardingAndSeatingInfo.
        :param boarding_position: The boarding_position of this BoardingAndSeatingInfo.
        :param boarding_privilege_image: The boarding_privilege_image of this BoardingAndSeatingInfo.
        :param kind: The kind of this BoardingAndSeatingInfo.
        :param seat_assignment: The seat_assignment of this BoardingAndSeatingInfo.
        :param seat_class: The seat_class of this BoardingAndSeatingInfo.
        :param seat_number: The seat_number of this BoardingAndSeatingInfo.
        :param sequence_number: The sequence_number of this BoardingAndSeatingInfo.
        """
        self.openapi_types = {
            'boarding_door': str,
            'boarding_group': str,
            'boarding_position': str,
            'boarding_privilege_image': Image,
            'kind': str,
            'seat_assignment': LocalizedString,
            'seat_class': str,
            'seat_number': str,
            'sequence_number': str
        }

        self.attribute_map = {
            'boarding_door': 'boardingDoor',
            'boarding_group': 'boardingGroup',
            'boarding_position': 'boardingPosition',
            'boarding_privilege_image': 'boardingPrivilegeImage',
            'kind': 'kind',
            'seat_assignment': 'seatAssignment',
            'seat_class': 'seatClass',
            'seat_number': 'seatNumber',
            'sequence_number': 'sequenceNumber'
        }

        self._boarding_door = boarding_door
        self._boarding_group = boarding_group
        self._boarding_position = boarding_position
        self._boarding_privilege_image = boarding_privilege_image
        self._kind = kind
        self._seat_assignment = seat_assignment
        self._seat_class = seat_class
        self._seat_number = seat_number
        self._sequence_number = sequence_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoardingAndSeatingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoardingAndSeatingInfo of this BoardingAndSeatingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boarding_door(self):
        """Gets the boarding_door of this BoardingAndSeatingInfo.

        Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the `seatClass`. In those cases `boardingDoor` should not be set.

        :return: The boarding_door of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._boarding_door

    @boarding_door.setter
    def boarding_door(self, boarding_door):
        """Sets the boarding_door of this BoardingAndSeatingInfo.

        Set this field only if this flight boards through more than one door or bridge and you want to explicitly print the door location on the boarding pass. Most airlines route their passengers to the right door or bridge by refering to doors/bridges by the `seatClass`. In those cases `boardingDoor` should not be set.

        :param boarding_door: The boarding_door of this BoardingAndSeatingInfo.
        :type boarding_door: str
        """
        allowed_values = ["BOARDING_DOOR_UNSPECIFIED", "FRONT", "front", "BACK", "back"]  # noqa: E501
        if boarding_door not in allowed_values:
            raise ValueError(
                "Invalid value for `boarding_door` ({0}), must be one of {1}"
                .format(boarding_door, allowed_values)
            )

        self._boarding_door = boarding_door

    @property
    def boarding_group(self):
        """Gets the boarding_group of this BoardingAndSeatingInfo.

        The value of boarding group (or zone) this passenger shall board with. eg: \"B\" The label for this value will be determined by the `boardingPolicy` field in the `flightClass` referenced by this object.

        :return: The boarding_group of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._boarding_group

    @boarding_group.setter
    def boarding_group(self, boarding_group):
        """Sets the boarding_group of this BoardingAndSeatingInfo.

        The value of boarding group (or zone) this passenger shall board with. eg: \"B\" The label for this value will be determined by the `boardingPolicy` field in the `flightClass` referenced by this object.

        :param boarding_group: The boarding_group of this BoardingAndSeatingInfo.
        :type boarding_group: str
        """

        self._boarding_group = boarding_group

    @property
    def boarding_position(self):
        """Gets the boarding_position of this BoardingAndSeatingInfo.

        The value of boarding position. eg: \"76\"

        :return: The boarding_position of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._boarding_position

    @boarding_position.setter
    def boarding_position(self, boarding_position):
        """Sets the boarding_position of this BoardingAndSeatingInfo.

        The value of boarding position. eg: \"76\"

        :param boarding_position: The boarding_position of this BoardingAndSeatingInfo.
        :type boarding_position: str
        """

        self._boarding_position = boarding_position

    @property
    def boarding_privilege_image(self):
        """Gets the boarding_privilege_image of this BoardingAndSeatingInfo.


        :return: The boarding_privilege_image of this BoardingAndSeatingInfo.
        :rtype: Image
        """
        return self._boarding_privilege_image

    @boarding_privilege_image.setter
    def boarding_privilege_image(self, boarding_privilege_image):
        """Sets the boarding_privilege_image of this BoardingAndSeatingInfo.


        :param boarding_privilege_image: The boarding_privilege_image of this BoardingAndSeatingInfo.
        :type boarding_privilege_image: Image
        """

        self._boarding_privilege_image = boarding_privilege_image

    @property
    def kind(self):
        """Gets the kind of this BoardingAndSeatingInfo.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingInfo\"`.

        :return: The kind of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BoardingAndSeatingInfo.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#boardingAndSeatingInfo\"`.

        :param kind: The kind of this BoardingAndSeatingInfo.
        :type kind: str
        """

        self._kind = kind

    @property
    def seat_assignment(self):
        """Gets the seat_assignment of this BoardingAndSeatingInfo.


        :return: The seat_assignment of this BoardingAndSeatingInfo.
        :rtype: LocalizedString
        """
        return self._seat_assignment

    @seat_assignment.setter
    def seat_assignment(self, seat_assignment):
        """Sets the seat_assignment of this BoardingAndSeatingInfo.


        :param seat_assignment: The seat_assignment of this BoardingAndSeatingInfo.
        :type seat_assignment: LocalizedString
        """

        self._seat_assignment = seat_assignment

    @property
    def seat_class(self):
        """Gets the seat_class of this BoardingAndSeatingInfo.

        The value of the seat class. eg: \"Economy\" or \"Economy Plus\"

        :return: The seat_class of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._seat_class

    @seat_class.setter
    def seat_class(self, seat_class):
        """Sets the seat_class of this BoardingAndSeatingInfo.

        The value of the seat class. eg: \"Economy\" or \"Economy Plus\"

        :param seat_class: The seat_class of this BoardingAndSeatingInfo.
        :type seat_class: str
        """

        self._seat_class = seat_class

    @property
    def seat_number(self):
        """Gets the seat_number of this BoardingAndSeatingInfo.

        The value of passenger seat. If there is no specific identifier, use `seatAssignment` instead. eg: \"25A\"

        :return: The seat_number of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._seat_number

    @seat_number.setter
    def seat_number(self, seat_number):
        """Sets the seat_number of this BoardingAndSeatingInfo.

        The value of passenger seat. If there is no specific identifier, use `seatAssignment` instead. eg: \"25A\"

        :param seat_number: The seat_number of this BoardingAndSeatingInfo.
        :type seat_number: str
        """

        self._seat_number = seat_number

    @property
    def sequence_number(self):
        """Gets the sequence_number of this BoardingAndSeatingInfo.

        The sequence number on the boarding pass. This usually matches the sequence in which the passengers checked in. Airline might use the number for manual boarding and bag tags. eg: \"49\"

        :return: The sequence_number of this BoardingAndSeatingInfo.
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this BoardingAndSeatingInfo.

        The sequence number on the boarding pass. This usually matches the sequence in which the passengers checked in. Airline might use the number for manual boarding and bag tags. eg: \"49\"

        :param sequence_number: The sequence_number of this BoardingAndSeatingInfo.
        :type sequence_number: str
        """

        self._sequence_number = sequence_number
