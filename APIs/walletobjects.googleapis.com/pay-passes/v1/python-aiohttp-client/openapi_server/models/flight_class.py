# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airport_info import AirportInfo
from openapi_server.models.boarding_and_seating_policy import BoardingAndSeatingPolicy
from openapi_server.models.callback_options import CallbackOptions
from openapi_server.models.class_template_info import ClassTemplateInfo
from openapi_server.models.flight_header import FlightHeader
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.info_module_data import InfoModuleData
from openapi_server.models.lat_long_point import LatLongPoint
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.message import Message
from openapi_server.models.review import Review
from openapi_server.models.security_animation import SecurityAnimation
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.uri import Uri
from openapi_server import util


class FlightClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_multiple_users_per_object: bool=None, boarding_and_seating_policy: BoardingAndSeatingPolicy=None, callback_options: CallbackOptions=None, class_template_info: ClassTemplateInfo=None, country_code: str=None, destination: AirportInfo=None, enable_smart_tap: bool=None, flight_header: FlightHeader=None, flight_status: str=None, hero_image: Image=None, hex_background_color: str=None, homepage_uri: Uri=None, id: str=None, image_modules_data: List[ImageModuleData]=None, info_module_data: InfoModuleData=None, issuer_name: str=None, kind: str=None, language_override: str=None, links_module_data: LinksModuleData=None, local_boarding_date_time: str=None, local_estimated_or_actual_arrival_date_time: str=None, local_estimated_or_actual_departure_date_time: str=None, local_gate_closing_date_time: str=None, local_scheduled_arrival_date_time: str=None, local_scheduled_departure_date_time: str=None, localized_issuer_name: LocalizedString=None, locations: List[LatLongPoint]=None, messages: List[Message]=None, multiple_devices_and_holders_allowed_status: str=None, origin: AirportInfo=None, redemption_issuers: List[str]=None, review: Review=None, review_status: str=None, security_animation: SecurityAnimation=None, text_modules_data: List[TextModuleData]=None, version: str=None, view_unlock_requirement: str=None, word_mark: Image=None):
        """FlightClass - a model defined in OpenAPI

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this FlightClass.
        :param boarding_and_seating_policy: The boarding_and_seating_policy of this FlightClass.
        :param callback_options: The callback_options of this FlightClass.
        :param class_template_info: The class_template_info of this FlightClass.
        :param country_code: The country_code of this FlightClass.
        :param destination: The destination of this FlightClass.
        :param enable_smart_tap: The enable_smart_tap of this FlightClass.
        :param flight_header: The flight_header of this FlightClass.
        :param flight_status: The flight_status of this FlightClass.
        :param hero_image: The hero_image of this FlightClass.
        :param hex_background_color: The hex_background_color of this FlightClass.
        :param homepage_uri: The homepage_uri of this FlightClass.
        :param id: The id of this FlightClass.
        :param image_modules_data: The image_modules_data of this FlightClass.
        :param info_module_data: The info_module_data of this FlightClass.
        :param issuer_name: The issuer_name of this FlightClass.
        :param kind: The kind of this FlightClass.
        :param language_override: The language_override of this FlightClass.
        :param links_module_data: The links_module_data of this FlightClass.
        :param local_boarding_date_time: The local_boarding_date_time of this FlightClass.
        :param local_estimated_or_actual_arrival_date_time: The local_estimated_or_actual_arrival_date_time of this FlightClass.
        :param local_estimated_or_actual_departure_date_time: The local_estimated_or_actual_departure_date_time of this FlightClass.
        :param local_gate_closing_date_time: The local_gate_closing_date_time of this FlightClass.
        :param local_scheduled_arrival_date_time: The local_scheduled_arrival_date_time of this FlightClass.
        :param local_scheduled_departure_date_time: The local_scheduled_departure_date_time of this FlightClass.
        :param localized_issuer_name: The localized_issuer_name of this FlightClass.
        :param locations: The locations of this FlightClass.
        :param messages: The messages of this FlightClass.
        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this FlightClass.
        :param origin: The origin of this FlightClass.
        :param redemption_issuers: The redemption_issuers of this FlightClass.
        :param review: The review of this FlightClass.
        :param review_status: The review_status of this FlightClass.
        :param security_animation: The security_animation of this FlightClass.
        :param text_modules_data: The text_modules_data of this FlightClass.
        :param version: The version of this FlightClass.
        :param view_unlock_requirement: The view_unlock_requirement of this FlightClass.
        :param word_mark: The word_mark of this FlightClass.
        """
        self.openapi_types = {
            'allow_multiple_users_per_object': bool,
            'boarding_and_seating_policy': BoardingAndSeatingPolicy,
            'callback_options': CallbackOptions,
            'class_template_info': ClassTemplateInfo,
            'country_code': str,
            'destination': AirportInfo,
            'enable_smart_tap': bool,
            'flight_header': FlightHeader,
            'flight_status': str,
            'hero_image': Image,
            'hex_background_color': str,
            'homepage_uri': Uri,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'info_module_data': InfoModuleData,
            'issuer_name': str,
            'kind': str,
            'language_override': str,
            'links_module_data': LinksModuleData,
            'local_boarding_date_time': str,
            'local_estimated_or_actual_arrival_date_time': str,
            'local_estimated_or_actual_departure_date_time': str,
            'local_gate_closing_date_time': str,
            'local_scheduled_arrival_date_time': str,
            'local_scheduled_departure_date_time': str,
            'localized_issuer_name': LocalizedString,
            'locations': List[LatLongPoint],
            'messages': List[Message],
            'multiple_devices_and_holders_allowed_status': str,
            'origin': AirportInfo,
            'redemption_issuers': List[str],
            'review': Review,
            'review_status': str,
            'security_animation': SecurityAnimation,
            'text_modules_data': List[TextModuleData],
            'version': str,
            'view_unlock_requirement': str,
            'word_mark': Image
        }

        self.attribute_map = {
            'allow_multiple_users_per_object': 'allowMultipleUsersPerObject',
            'boarding_and_seating_policy': 'boardingAndSeatingPolicy',
            'callback_options': 'callbackOptions',
            'class_template_info': 'classTemplateInfo',
            'country_code': 'countryCode',
            'destination': 'destination',
            'enable_smart_tap': 'enableSmartTap',
            'flight_header': 'flightHeader',
            'flight_status': 'flightStatus',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'homepage_uri': 'homepageUri',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'info_module_data': 'infoModuleData',
            'issuer_name': 'issuerName',
            'kind': 'kind',
            'language_override': 'languageOverride',
            'links_module_data': 'linksModuleData',
            'local_boarding_date_time': 'localBoardingDateTime',
            'local_estimated_or_actual_arrival_date_time': 'localEstimatedOrActualArrivalDateTime',
            'local_estimated_or_actual_departure_date_time': 'localEstimatedOrActualDepartureDateTime',
            'local_gate_closing_date_time': 'localGateClosingDateTime',
            'local_scheduled_arrival_date_time': 'localScheduledArrivalDateTime',
            'local_scheduled_departure_date_time': 'localScheduledDepartureDateTime',
            'localized_issuer_name': 'localizedIssuerName',
            'locations': 'locations',
            'messages': 'messages',
            'multiple_devices_and_holders_allowed_status': 'multipleDevicesAndHoldersAllowedStatus',
            'origin': 'origin',
            'redemption_issuers': 'redemptionIssuers',
            'review': 'review',
            'review_status': 'reviewStatus',
            'security_animation': 'securityAnimation',
            'text_modules_data': 'textModulesData',
            'version': 'version',
            'view_unlock_requirement': 'viewUnlockRequirement',
            'word_mark': 'wordMark'
        }

        self._allow_multiple_users_per_object = allow_multiple_users_per_object
        self._boarding_and_seating_policy = boarding_and_seating_policy
        self._callback_options = callback_options
        self._class_template_info = class_template_info
        self._country_code = country_code
        self._destination = destination
        self._enable_smart_tap = enable_smart_tap
        self._flight_header = flight_header
        self._flight_status = flight_status
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._homepage_uri = homepage_uri
        self._id = id
        self._image_modules_data = image_modules_data
        self._info_module_data = info_module_data
        self._issuer_name = issuer_name
        self._kind = kind
        self._language_override = language_override
        self._links_module_data = links_module_data
        self._local_boarding_date_time = local_boarding_date_time
        self._local_estimated_or_actual_arrival_date_time = local_estimated_or_actual_arrival_date_time
        self._local_estimated_or_actual_departure_date_time = local_estimated_or_actual_departure_date_time
        self._local_gate_closing_date_time = local_gate_closing_date_time
        self._local_scheduled_arrival_date_time = local_scheduled_arrival_date_time
        self._local_scheduled_departure_date_time = local_scheduled_departure_date_time
        self._localized_issuer_name = localized_issuer_name
        self._locations = locations
        self._messages = messages
        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status
        self._origin = origin
        self._redemption_issuers = redemption_issuers
        self._review = review
        self._review_status = review_status
        self._security_animation = security_animation
        self._text_modules_data = text_modules_data
        self._version = version
        self._view_unlock_requirement = view_unlock_requirement
        self._word_mark = word_mark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlightClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlightClass of this FlightClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_multiple_users_per_object(self):
        """Gets the allow_multiple_users_per_object of this FlightClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :return: The allow_multiple_users_per_object of this FlightClass.
        :rtype: bool
        """
        return self._allow_multiple_users_per_object

    @allow_multiple_users_per_object.setter
    def allow_multiple_users_per_object(self, allow_multiple_users_per_object):
        """Sets the allow_multiple_users_per_object of this FlightClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this FlightClass.
        :type allow_multiple_users_per_object: bool
        """

        self._allow_multiple_users_per_object = allow_multiple_users_per_object

    @property
    def boarding_and_seating_policy(self):
        """Gets the boarding_and_seating_policy of this FlightClass.


        :return: The boarding_and_seating_policy of this FlightClass.
        :rtype: BoardingAndSeatingPolicy
        """
        return self._boarding_and_seating_policy

    @boarding_and_seating_policy.setter
    def boarding_and_seating_policy(self, boarding_and_seating_policy):
        """Sets the boarding_and_seating_policy of this FlightClass.


        :param boarding_and_seating_policy: The boarding_and_seating_policy of this FlightClass.
        :type boarding_and_seating_policy: BoardingAndSeatingPolicy
        """

        self._boarding_and_seating_policy = boarding_and_seating_policy

    @property
    def callback_options(self):
        """Gets the callback_options of this FlightClass.


        :return: The callback_options of this FlightClass.
        :rtype: CallbackOptions
        """
        return self._callback_options

    @callback_options.setter
    def callback_options(self, callback_options):
        """Sets the callback_options of this FlightClass.


        :param callback_options: The callback_options of this FlightClass.
        :type callback_options: CallbackOptions
        """

        self._callback_options = callback_options

    @property
    def class_template_info(self):
        """Gets the class_template_info of this FlightClass.


        :return: The class_template_info of this FlightClass.
        :rtype: ClassTemplateInfo
        """
        return self._class_template_info

    @class_template_info.setter
    def class_template_info(self, class_template_info):
        """Sets the class_template_info of this FlightClass.


        :param class_template_info: The class_template_info of this FlightClass.
        :type class_template_info: ClassTemplateInfo
        """

        self._class_template_info = class_template_info

    @property
    def country_code(self):
        """Gets the country_code of this FlightClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :return: The country_code of this FlightClass.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this FlightClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :param country_code: The country_code of this FlightClass.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def destination(self):
        """Gets the destination of this FlightClass.


        :return: The destination of this FlightClass.
        :rtype: AirportInfo
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this FlightClass.


        :param destination: The destination of this FlightClass.
        :type destination: AirportInfo
        """

        self._destination = destination

    @property
    def enable_smart_tap(self):
        """Gets the enable_smart_tap of this FlightClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The enable_smart_tap of this FlightClass.
        :rtype: bool
        """
        return self._enable_smart_tap

    @enable_smart_tap.setter
    def enable_smart_tap(self, enable_smart_tap):
        """Sets the enable_smart_tap of this FlightClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param enable_smart_tap: The enable_smart_tap of this FlightClass.
        :type enable_smart_tap: bool
        """

        self._enable_smart_tap = enable_smart_tap

    @property
    def flight_header(self):
        """Gets the flight_header of this FlightClass.


        :return: The flight_header of this FlightClass.
        :rtype: FlightHeader
        """
        return self._flight_header

    @flight_header.setter
    def flight_header(self, flight_header):
        """Sets the flight_header of this FlightClass.


        :param flight_header: The flight_header of this FlightClass.
        :type flight_header: FlightHeader
        """

        self._flight_header = flight_header

    @property
    def flight_status(self):
        """Gets the flight_status of this FlightClass.

        Status of this flight. If unset, Google will compute status based on data from other sources, such as FlightStats, etc. Note: Google-computed status will not be returned in API responses.

        :return: The flight_status of this FlightClass.
        :rtype: str
        """
        return self._flight_status

    @flight_status.setter
    def flight_status(self, flight_status):
        """Sets the flight_status of this FlightClass.

        Status of this flight. If unset, Google will compute status based on data from other sources, such as FlightStats, etc. Note: Google-computed status will not be returned in API responses.

        :param flight_status: The flight_status of this FlightClass.
        :type flight_status: str
        """
        allowed_values = ["FLIGHT_STATUS_UNSPECIFIED", "SCHEDULED", "scheduled", "ACTIVE", "active", "LANDED", "landed", "CANCELLED", "cancelled", "REDIRECTED", "redirected", "DIVERTED", "diverted"]  # noqa: E501
        if flight_status not in allowed_values:
            raise ValueError(
                "Invalid value for `flight_status` ({0}), must be one of {1}"
                .format(flight_status, allowed_values)
            )

        self._flight_status = flight_status

    @property
    def hero_image(self):
        """Gets the hero_image of this FlightClass.


        :return: The hero_image of this FlightClass.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this FlightClass.


        :param hero_image: The hero_image of this FlightClass.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this FlightClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :return: The hex_background_color of this FlightClass.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this FlightClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :param hex_background_color: The hex_background_color of this FlightClass.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def homepage_uri(self):
        """Gets the homepage_uri of this FlightClass.


        :return: The homepage_uri of this FlightClass.
        :rtype: Uri
        """
        return self._homepage_uri

    @homepage_uri.setter
    def homepage_uri(self, homepage_uri):
        """Sets the homepage_uri of this FlightClass.


        :param homepage_uri: The homepage_uri of this FlightClass.
        :type homepage_uri: Uri
        """

        self._homepage_uri = homepage_uri

    @property
    def id(self):
        """Gets the id of this FlightClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :return: The id of this FlightClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlightClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :param id: The id of this FlightClass.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this FlightClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :return: The image_modules_data of this FlightClass.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this FlightClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :param image_modules_data: The image_modules_data of this FlightClass.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def info_module_data(self):
        """Gets the info_module_data of this FlightClass.


        :return: The info_module_data of this FlightClass.
        :rtype: InfoModuleData
        """
        return self._info_module_data

    @info_module_data.setter
    def info_module_data(self, info_module_data):
        """Sets the info_module_data of this FlightClass.


        :param info_module_data: The info_module_data of this FlightClass.
        :type info_module_data: InfoModuleData
        """

        self._info_module_data = info_module_data

    @property
    def issuer_name(self):
        """Gets the issuer_name of this FlightClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :return: The issuer_name of this FlightClass.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this FlightClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :param issuer_name: The issuer_name of this FlightClass.
        :type issuer_name: str
        """

        self._issuer_name = issuer_name

    @property
    def kind(self):
        """Gets the kind of this FlightClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightClass\"`.

        :return: The kind of this FlightClass.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FlightClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#flightClass\"`.

        :param kind: The kind of this FlightClass.
        :type kind: str
        """

        self._kind = kind

    @property
    def language_override(self):
        """Gets the language_override of this FlightClass.

        If this field is present, boarding passes served to a user's device will always be in this language. Represents the BCP 47 language tag. Example values are \"en-US\", \"en-GB\", \"de\", or \"de-AT\".

        :return: The language_override of this FlightClass.
        :rtype: str
        """
        return self._language_override

    @language_override.setter
    def language_override(self, language_override):
        """Sets the language_override of this FlightClass.

        If this field is present, boarding passes served to a user's device will always be in this language. Represents the BCP 47 language tag. Example values are \"en-US\", \"en-GB\", \"de\", or \"de-AT\".

        :param language_override: The language_override of this FlightClass.
        :type language_override: str
        """

        self._language_override = language_override

    @property
    def links_module_data(self):
        """Gets the links_module_data of this FlightClass.


        :return: The links_module_data of this FlightClass.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this FlightClass.


        :param links_module_data: The links_module_data of this FlightClass.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def local_boarding_date_time(self):
        """Gets the local_boarding_date_time of this FlightClass.

        The boarding time as it would be printed on the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.

        :return: The local_boarding_date_time of this FlightClass.
        :rtype: str
        """
        return self._local_boarding_date_time

    @local_boarding_date_time.setter
    def local_boarding_date_time(self, local_boarding_date_time):
        """Sets the local_boarding_date_time of this FlightClass.

        The boarding time as it would be printed on the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.

        :param local_boarding_date_time: The local_boarding_date_time of this FlightClass.
        :type local_boarding_date_time: str
        """

        self._local_boarding_date_time = local_boarding_date_time

    @property
    def local_estimated_or_actual_arrival_date_time(self):
        """Gets the local_estimated_or_actual_arrival_date_time of this FlightClass.

        The estimated time the aircraft plans to reach the destination gate (not the runway) or the actual time it reached the gate. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already arrived at the gate. Google will use it to inform the user that the flight has arrived at the gate. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.

        :return: The local_estimated_or_actual_arrival_date_time of this FlightClass.
        :rtype: str
        """
        return self._local_estimated_or_actual_arrival_date_time

    @local_estimated_or_actual_arrival_date_time.setter
    def local_estimated_or_actual_arrival_date_time(self, local_estimated_or_actual_arrival_date_time):
        """Sets the local_estimated_or_actual_arrival_date_time of this FlightClass.

        The estimated time the aircraft plans to reach the destination gate (not the runway) or the actual time it reached the gate. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already arrived at the gate. Google will use it to inform the user that the flight has arrived at the gate. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.

        :param local_estimated_or_actual_arrival_date_time: The local_estimated_or_actual_arrival_date_time of this FlightClass.
        :type local_estimated_or_actual_arrival_date_time: str
        """

        self._local_estimated_or_actual_arrival_date_time = local_estimated_or_actual_arrival_date_time

    @property
    def local_estimated_or_actual_departure_date_time(self):
        """Gets the local_estimated_or_actual_departure_date_time of this FlightClass.

        The estimated time the aircraft plans to pull from the gate or the actual time the aircraft already pulled from the gate. Note: This is not the runway time. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already pulled from the gate. Google will use it to inform the user when the flight actually departed. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.

        :return: The local_estimated_or_actual_departure_date_time of this FlightClass.
        :rtype: str
        """
        return self._local_estimated_or_actual_departure_date_time

    @local_estimated_or_actual_departure_date_time.setter
    def local_estimated_or_actual_departure_date_time(self, local_estimated_or_actual_departure_date_time):
        """Sets the local_estimated_or_actual_departure_date_time of this FlightClass.

        The estimated time the aircraft plans to pull from the gate or the actual time the aircraft already pulled from the gate. Note: This is not the runway time. This field should be set if at least one of the below is true: - It differs from the scheduled time. Google will use it to calculate the delay. - The aircraft already pulled from the gate. Google will use it to inform the user when the flight actually departed. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport. If this is not set, Google will set it based on data from other sources.

        :param local_estimated_or_actual_departure_date_time: The local_estimated_or_actual_departure_date_time of this FlightClass.
        :type local_estimated_or_actual_departure_date_time: str
        """

        self._local_estimated_or_actual_departure_date_time = local_estimated_or_actual_departure_date_time

    @property
    def local_gate_closing_date_time(self):
        """Gets the local_gate_closing_date_time of this FlightClass.

        The gate closing time as it would be printed on the boarding pass. Do not set this field if you do not want to print it in the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.

        :return: The local_gate_closing_date_time of this FlightClass.
        :rtype: str
        """
        return self._local_gate_closing_date_time

    @local_gate_closing_date_time.setter
    def local_gate_closing_date_time(self, local_gate_closing_date_time):
        """Sets the local_gate_closing_date_time of this FlightClass.

        The gate closing time as it would be printed on the boarding pass. Do not set this field if you do not want to print it in the boarding pass. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.

        :param local_gate_closing_date_time: The local_gate_closing_date_time of this FlightClass.
        :type local_gate_closing_date_time: str
        """

        self._local_gate_closing_date_time = local_gate_closing_date_time

    @property
    def local_scheduled_arrival_date_time(self):
        """Gets the local_scheduled_arrival_date_time of this FlightClass.

        The scheduled time the aircraft plans to reach the destination gate (not the runway). Note: This field should not change too close to the flight time. For updates to departure times (delays, etc), please set `localEstimatedOrActualArrivalDateTime`. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.

        :return: The local_scheduled_arrival_date_time of this FlightClass.
        :rtype: str
        """
        return self._local_scheduled_arrival_date_time

    @local_scheduled_arrival_date_time.setter
    def local_scheduled_arrival_date_time(self, local_scheduled_arrival_date_time):
        """Sets the local_scheduled_arrival_date_time of this FlightClass.

        The scheduled time the aircraft plans to reach the destination gate (not the runway). Note: This field should not change too close to the flight time. For updates to departure times (delays, etc), please set `localEstimatedOrActualArrivalDateTime`. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on arrival airport. If this is not set, Google will set it based on data from other sources.

        :param local_scheduled_arrival_date_time: The local_scheduled_arrival_date_time of this FlightClass.
        :type local_scheduled_arrival_date_time: str
        """

        self._local_scheduled_arrival_date_time = local_scheduled_arrival_date_time

    @property
    def local_scheduled_departure_date_time(self):
        """Gets the local_scheduled_departure_date_time of this FlightClass.

        Required. The scheduled date and time when the aircraft is expected to depart the gate (not the runway) Note: This field should not change too close to the departure time. For updates to departure times (delays, etc), please set `localEstimatedOrActualDepartureDateTime`. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.

        :return: The local_scheduled_departure_date_time of this FlightClass.
        :rtype: str
        """
        return self._local_scheduled_departure_date_time

    @local_scheduled_departure_date_time.setter
    def local_scheduled_departure_date_time(self, local_scheduled_departure_date_time):
        """Sets the local_scheduled_departure_date_time of this FlightClass.

        Required. The scheduled date and time when the aircraft is expected to depart the gate (not the runway) Note: This field should not change too close to the departure time. For updates to departure times (delays, etc), please set `localEstimatedOrActualDepartureDateTime`. This is an ISO 8601 extended format date/time without an offset. Time may be specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the local date/time at the airport (not a UTC time). Google will reject the request if UTC offset is provided. Time zones will be calculated by Google based on departure airport.

        :param local_scheduled_departure_date_time: The local_scheduled_departure_date_time of this FlightClass.
        :type local_scheduled_departure_date_time: str
        """

        self._local_scheduled_departure_date_time = local_scheduled_departure_date_time

    @property
    def localized_issuer_name(self):
        """Gets the localized_issuer_name of this FlightClass.


        :return: The localized_issuer_name of this FlightClass.
        :rtype: LocalizedString
        """
        return self._localized_issuer_name

    @localized_issuer_name.setter
    def localized_issuer_name(self, localized_issuer_name):
        """Sets the localized_issuer_name of this FlightClass.


        :param localized_issuer_name: The localized_issuer_name of this FlightClass.
        :type localized_issuer_name: LocalizedString
        """

        self._localized_issuer_name = localized_issuer_name

    @property
    def locations(self):
        """Gets the locations of this FlightClass.

        Note: This field is currently not supported to trigger geo notifications.

        :return: The locations of this FlightClass.
        :rtype: List[LatLongPoint]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this FlightClass.

        Note: This field is currently not supported to trigger geo notifications.

        :param locations: The locations of this FlightClass.
        :type locations: List[LatLongPoint]
        """

        self._locations = locations

    @property
    def messages(self):
        """Gets the messages of this FlightClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :return: The messages of this FlightClass.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this FlightClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :param messages: The messages of this FlightClass.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def multiple_devices_and_holders_allowed_status(self):
        """Gets the multiple_devices_and_holders_allowed_status of this FlightClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :return: The multiple_devices_and_holders_allowed_status of this FlightClass.
        :rtype: str
        """
        return self._multiple_devices_and_holders_allowed_status

    @multiple_devices_and_holders_allowed_status.setter
    def multiple_devices_and_holders_allowed_status(self, multiple_devices_and_holders_allowed_status):
        """Sets the multiple_devices_and_holders_allowed_status of this FlightClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this FlightClass.
        :type multiple_devices_and_holders_allowed_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "MULTIPLE_HOLDERS", "multipleHolders", "ONE_USER_ALL_DEVICES", "oneUserAllDevices", "ONE_USER_ONE_DEVICE", "oneUserOneDevice"]  # noqa: E501
        if multiple_devices_and_holders_allowed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `multiple_devices_and_holders_allowed_status` ({0}), must be one of {1}"
                .format(multiple_devices_and_holders_allowed_status, allowed_values)
            )

        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status

    @property
    def origin(self):
        """Gets the origin of this FlightClass.


        :return: The origin of this FlightClass.
        :rtype: AirportInfo
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this FlightClass.


        :param origin: The origin of this FlightClass.
        :type origin: AirportInfo
        """

        self._origin = origin

    @property
    def redemption_issuers(self):
        """Gets the redemption_issuers of this FlightClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The redemption_issuers of this FlightClass.
        :rtype: List[str]
        """
        return self._redemption_issuers

    @redemption_issuers.setter
    def redemption_issuers(self, redemption_issuers):
        """Sets the redemption_issuers of this FlightClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param redemption_issuers: The redemption_issuers of this FlightClass.
        :type redemption_issuers: List[str]
        """

        self._redemption_issuers = redemption_issuers

    @property
    def review(self):
        """Gets the review of this FlightClass.


        :return: The review of this FlightClass.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this FlightClass.


        :param review: The review of this FlightClass.
        :type review: Review
        """

        self._review = review

    @property
    def review_status(self):
        """Gets the review_status of this FlightClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :return: The review_status of this FlightClass.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this FlightClass.

        Required. The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :param review_status: The review_status of this FlightClass.
        :type review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "UNDER_REVIEW", "underReview", "APPROVED", "approved", "REJECTED", "rejected", "DRAFT", "draft"]  # noqa: E501
        if review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def security_animation(self):
        """Gets the security_animation of this FlightClass.


        :return: The security_animation of this FlightClass.
        :rtype: SecurityAnimation
        """
        return self._security_animation

    @security_animation.setter
    def security_animation(self, security_animation):
        """Sets the security_animation of this FlightClass.


        :param security_animation: The security_animation of this FlightClass.
        :type security_animation: SecurityAnimation
        """

        self._security_animation = security_animation

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this FlightClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :return: The text_modules_data of this FlightClass.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this FlightClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :param text_modules_data: The text_modules_data of this FlightClass.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def version(self):
        """Gets the version of this FlightClass.

        Deprecated

        :return: The version of this FlightClass.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FlightClass.

        Deprecated

        :param version: The version of this FlightClass.
        :type version: str
        """

        self._version = version

    @property
    def view_unlock_requirement(self):
        """Gets the view_unlock_requirement of this FlightClass.

        View Unlock Requirement options for the boarding pass.

        :return: The view_unlock_requirement of this FlightClass.
        :rtype: str
        """
        return self._view_unlock_requirement

    @view_unlock_requirement.setter
    def view_unlock_requirement(self, view_unlock_requirement):
        """Sets the view_unlock_requirement of this FlightClass.

        View Unlock Requirement options for the boarding pass.

        :param view_unlock_requirement: The view_unlock_requirement of this FlightClass.
        :type view_unlock_requirement: str
        """
        allowed_values = ["VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED", "UNLOCK_NOT_REQUIRED", "UNLOCK_REQUIRED_TO_VIEW"]  # noqa: E501
        if view_unlock_requirement not in allowed_values:
            raise ValueError(
                "Invalid value for `view_unlock_requirement` ({0}), must be one of {1}"
                .format(view_unlock_requirement, allowed_values)
            )

        self._view_unlock_requirement = view_unlock_requirement

    @property
    def word_mark(self):
        """Gets the word_mark of this FlightClass.


        :return: The word_mark of this FlightClass.
        :rtype: Image
        """
        return self._word_mark

    @word_mark.setter
    def word_mark(self, word_mark):
        """Sets the word_mark of this FlightClass.


        :param word_mark: The word_mark of this FlightClass.
        :type word_mark: Image
        """

        self._word_mark = word_mark
