# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivationOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_url: str=None, allow_reactivation: bool=None):
        """ActivationOptions - a model defined in OpenAPI

        :param activation_url: The activation_url of this ActivationOptions.
        :param allow_reactivation: The allow_reactivation of this ActivationOptions.
        """
        self.openapi_types = {
            'activation_url': str,
            'allow_reactivation': bool
        }

        self.attribute_map = {
            'activation_url': 'activationUrl',
            'allow_reactivation': 'allowReactivation'
        }

        self._activation_url = activation_url
        self._allow_reactivation = allow_reactivation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivationOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivationOptions of this ActivationOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_url(self):
        """Gets the activation_url of this ActivationOptions.

        HTTPS URL that supports REST semantics. Would be used for requesting activation from partners for given valuable, triggered by the users.

        :return: The activation_url of this ActivationOptions.
        :rtype: str
        """
        return self._activation_url

    @activation_url.setter
    def activation_url(self, activation_url):
        """Sets the activation_url of this ActivationOptions.

        HTTPS URL that supports REST semantics. Would be used for requesting activation from partners for given valuable, triggered by the users.

        :param activation_url: The activation_url of this ActivationOptions.
        :type activation_url: str
        """

        self._activation_url = activation_url

    @property
    def allow_reactivation(self):
        """Gets the allow_reactivation of this ActivationOptions.

        Flag to allow users to make activation call from different device. This allows client to render the activation button enabled even if the activationStatus is ACTIVATED but the requested device is different than the current device.

        :return: The allow_reactivation of this ActivationOptions.
        :rtype: bool
        """
        return self._allow_reactivation

    @allow_reactivation.setter
    def allow_reactivation(self, allow_reactivation):
        """Sets the allow_reactivation of this ActivationOptions.

        Flag to allow users to make activation call from different device. This allows client to render the activation button enabled even if the activationStatus is ACTIVATED but the requested device is different than the current device.

        :param allow_reactivation: The allow_reactivation of this ActivationOptions.
        :type allow_reactivation: bool
        """

        self._allow_reactivation = allow_reactivation
