# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.time_interval import TimeInterval
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, display_interval: TimeInterval=None, header: str=None, id: str=None, kind: str=None, localized_body: LocalizedString=None, localized_header: LocalizedString=None, message_type: str=None):
        """Message - a model defined in OpenAPI

        :param body: The body of this Message.
        :param display_interval: The display_interval of this Message.
        :param header: The header of this Message.
        :param id: The id of this Message.
        :param kind: The kind of this Message.
        :param localized_body: The localized_body of this Message.
        :param localized_header: The localized_header of this Message.
        :param message_type: The message_type of this Message.
        """
        self.openapi_types = {
            'body': str,
            'display_interval': TimeInterval,
            'header': str,
            'id': str,
            'kind': str,
            'localized_body': LocalizedString,
            'localized_header': LocalizedString,
            'message_type': str
        }

        self.attribute_map = {
            'body': 'body',
            'display_interval': 'displayInterval',
            'header': 'header',
            'id': 'id',
            'kind': 'kind',
            'localized_body': 'localizedBody',
            'localized_header': 'localizedHeader',
            'message_type': 'messageType'
        }

        self._body = body
        self._display_interval = display_interval
        self._header = header
        self._id = id
        self._kind = kind
        self._localized_body = localized_body
        self._localized_header = localized_header
        self._message_type = message_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Message.

        The message body.

        :return: The body of this Message.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Message.

        The message body.

        :param body: The body of this Message.
        :type body: str
        """

        self._body = body

    @property
    def display_interval(self):
        """Gets the display_interval of this Message.


        :return: The display_interval of this Message.
        :rtype: TimeInterval
        """
        return self._display_interval

    @display_interval.setter
    def display_interval(self, display_interval):
        """Sets the display_interval of this Message.


        :param display_interval: The display_interval of this Message.
        :type display_interval: TimeInterval
        """

        self._display_interval = display_interval

    @property
    def header(self):
        """Gets the header of this Message.

        The message header.

        :return: The header of this Message.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Message.

        The message header.

        :param header: The header of this Message.
        :type header: str
        """

        self._header = header

    @property
    def id(self):
        """Gets the id of this Message.

        The ID associated with a message. This field is here to enable ease of management of messages. Notice ID values could possibly duplicate across multiple messages in the same class/instance, and care must be taken to select a reasonable ID for each message.

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.

        The ID associated with a message. This field is here to enable ease of management of messages. Notice ID values could possibly duplicate across multiple messages in the same class/instance, and care must be taken to select a reasonable ID for each message.

        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Message.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#walletObjectMessage\"`.

        :return: The kind of this Message.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Message.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#walletObjectMessage\"`.

        :param kind: The kind of this Message.
        :type kind: str
        """

        self._kind = kind

    @property
    def localized_body(self):
        """Gets the localized_body of this Message.


        :return: The localized_body of this Message.
        :rtype: LocalizedString
        """
        return self._localized_body

    @localized_body.setter
    def localized_body(self, localized_body):
        """Sets the localized_body of this Message.


        :param localized_body: The localized_body of this Message.
        :type localized_body: LocalizedString
        """

        self._localized_body = localized_body

    @property
    def localized_header(self):
        """Gets the localized_header of this Message.


        :return: The localized_header of this Message.
        :rtype: LocalizedString
        """
        return self._localized_header

    @localized_header.setter
    def localized_header(self, localized_header):
        """Sets the localized_header of this Message.


        :param localized_header: The localized_header of this Message.
        :type localized_header: LocalizedString
        """

        self._localized_header = localized_header

    @property
    def message_type(self):
        """Gets the message_type of this Message.

        The type of the message. Currently, this can only be set for offers.

        :return: The message_type of this Message.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Message.

        The type of the message. Currently, this can only be set for offers.

        :param message_type: The message_type of this Message.
        :type message_type: str
        """
        allowed_values = ["MESSAGE_TYPE_UNSPECIFIED", "TEXT", "text", "EXPIRATION_NOTIFICATION", "expirationNotification"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type
