# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LatLongPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, latitude: float=None, longitude: float=None):
        """LatLongPoint - a model defined in OpenAPI

        :param kind: The kind of this LatLongPoint.
        :param latitude: The latitude of this LatLongPoint.
        :param longitude: The longitude of this LatLongPoint.
        """
        self.openapi_types = {
            'kind': str,
            'latitude': float,
            'longitude': float
        }

        self.attribute_map = {
            'kind': 'kind',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._kind = kind
        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatLongPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatLongPoint of this LatLongPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this LatLongPoint.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#latLongPoint\"`.

        :return: The kind of this LatLongPoint.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LatLongPoint.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#latLongPoint\"`.

        :param kind: The kind of this LatLongPoint.
        :type kind: str
        """

        self._kind = kind

    @property
    def latitude(self):
        """Gets the latitude of this LatLongPoint.

        The latitude specified as any value in the range of -90.0 through +90.0, both inclusive. Values outside these bounds will be rejected.

        :return: The latitude of this LatLongPoint.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this LatLongPoint.

        The latitude specified as any value in the range of -90.0 through +90.0, both inclusive. Values outside these bounds will be rejected.

        :param latitude: The latitude of this LatLongPoint.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this LatLongPoint.

        The longitude specified in the range -180.0 through +180.0, both inclusive. Values outside these bounds will be rejected.

        :return: The longitude of this LatLongPoint.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this LatLongPoint.

        The longitude specified in the range -180.0 through +180.0, both inclusive. Values outside these bounds will be rejected.

        :param longitude: The longitude of this LatLongPoint.
        :type longitude: float
        """

        self._longitude = longitude
