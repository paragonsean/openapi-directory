# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_token: str=None):
        """DeviceContext - a model defined in OpenAPI

        :param device_token: The device_token of this DeviceContext.
        """
        self.openapi_types = {
            'device_token': str
        }

        self.attribute_map = {
            'device_token': 'deviceToken'
        }

        self._device_token = device_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceContext of this DeviceContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_token(self):
        """Gets the device_token of this DeviceContext.

        If set, redemption information will only be returned to the given device upon activation of the object. This should not be used as a stable identifier to trace a user's device. It can change across different passes for the same device or even across different activations for the same device. When setting this, callers must also set has_linked_device on the object being activated.

        :return: The device_token of this DeviceContext.
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """Sets the device_token of this DeviceContext.

        If set, redemption information will only be returned to the given device upon activation of the object. This should not be used as a stable identifier to trace a user's device. It can change across different passes for the same device or even across different activations for the same device. When setting this, callers must also set has_linked_device on the object being activated.

        :param device_token: The device_token of this DeviceContext.
        :type device_token: str
        """

        self._device_token = device_token
