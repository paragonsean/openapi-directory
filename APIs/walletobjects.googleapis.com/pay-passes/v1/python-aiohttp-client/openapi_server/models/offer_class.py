# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.callback_options import CallbackOptions
from openapi_server.models.class_template_info import ClassTemplateInfo
from openapi_server.models.image import Image
from openapi_server.models.image_module_data import ImageModuleData
from openapi_server.models.info_module_data import InfoModuleData
from openapi_server.models.lat_long_point import LatLongPoint
from openapi_server.models.links_module_data import LinksModuleData
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.message import Message
from openapi_server.models.review import Review
from openapi_server.models.security_animation import SecurityAnimation
from openapi_server.models.text_module_data import TextModuleData
from openapi_server.models.uri import Uri
from openapi_server import util


class OfferClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_multiple_users_per_object: bool=None, callback_options: CallbackOptions=None, class_template_info: ClassTemplateInfo=None, country_code: str=None, details: str=None, enable_smart_tap: bool=None, fine_print: str=None, help_uri: Uri=None, hero_image: Image=None, hex_background_color: str=None, homepage_uri: Uri=None, id: str=None, image_modules_data: List[ImageModuleData]=None, info_module_data: InfoModuleData=None, issuer_name: str=None, kind: str=None, links_module_data: LinksModuleData=None, localized_details: LocalizedString=None, localized_fine_print: LocalizedString=None, localized_issuer_name: LocalizedString=None, localized_provider: LocalizedString=None, localized_short_title: LocalizedString=None, localized_title: LocalizedString=None, locations: List[LatLongPoint]=None, messages: List[Message]=None, multiple_devices_and_holders_allowed_status: str=None, provider: str=None, redemption_channel: str=None, redemption_issuers: List[str]=None, review: Review=None, review_status: str=None, security_animation: SecurityAnimation=None, short_title: str=None, text_modules_data: List[TextModuleData]=None, title: str=None, title_image: Image=None, version: str=None, view_unlock_requirement: str=None, word_mark: Image=None):
        """OfferClass - a model defined in OpenAPI

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this OfferClass.
        :param callback_options: The callback_options of this OfferClass.
        :param class_template_info: The class_template_info of this OfferClass.
        :param country_code: The country_code of this OfferClass.
        :param details: The details of this OfferClass.
        :param enable_smart_tap: The enable_smart_tap of this OfferClass.
        :param fine_print: The fine_print of this OfferClass.
        :param help_uri: The help_uri of this OfferClass.
        :param hero_image: The hero_image of this OfferClass.
        :param hex_background_color: The hex_background_color of this OfferClass.
        :param homepage_uri: The homepage_uri of this OfferClass.
        :param id: The id of this OfferClass.
        :param image_modules_data: The image_modules_data of this OfferClass.
        :param info_module_data: The info_module_data of this OfferClass.
        :param issuer_name: The issuer_name of this OfferClass.
        :param kind: The kind of this OfferClass.
        :param links_module_data: The links_module_data of this OfferClass.
        :param localized_details: The localized_details of this OfferClass.
        :param localized_fine_print: The localized_fine_print of this OfferClass.
        :param localized_issuer_name: The localized_issuer_name of this OfferClass.
        :param localized_provider: The localized_provider of this OfferClass.
        :param localized_short_title: The localized_short_title of this OfferClass.
        :param localized_title: The localized_title of this OfferClass.
        :param locations: The locations of this OfferClass.
        :param messages: The messages of this OfferClass.
        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this OfferClass.
        :param provider: The provider of this OfferClass.
        :param redemption_channel: The redemption_channel of this OfferClass.
        :param redemption_issuers: The redemption_issuers of this OfferClass.
        :param review: The review of this OfferClass.
        :param review_status: The review_status of this OfferClass.
        :param security_animation: The security_animation of this OfferClass.
        :param short_title: The short_title of this OfferClass.
        :param text_modules_data: The text_modules_data of this OfferClass.
        :param title: The title of this OfferClass.
        :param title_image: The title_image of this OfferClass.
        :param version: The version of this OfferClass.
        :param view_unlock_requirement: The view_unlock_requirement of this OfferClass.
        :param word_mark: The word_mark of this OfferClass.
        """
        self.openapi_types = {
            'allow_multiple_users_per_object': bool,
            'callback_options': CallbackOptions,
            'class_template_info': ClassTemplateInfo,
            'country_code': str,
            'details': str,
            'enable_smart_tap': bool,
            'fine_print': str,
            'help_uri': Uri,
            'hero_image': Image,
            'hex_background_color': str,
            'homepage_uri': Uri,
            'id': str,
            'image_modules_data': List[ImageModuleData],
            'info_module_data': InfoModuleData,
            'issuer_name': str,
            'kind': str,
            'links_module_data': LinksModuleData,
            'localized_details': LocalizedString,
            'localized_fine_print': LocalizedString,
            'localized_issuer_name': LocalizedString,
            'localized_provider': LocalizedString,
            'localized_short_title': LocalizedString,
            'localized_title': LocalizedString,
            'locations': List[LatLongPoint],
            'messages': List[Message],
            'multiple_devices_and_holders_allowed_status': str,
            'provider': str,
            'redemption_channel': str,
            'redemption_issuers': List[str],
            'review': Review,
            'review_status': str,
            'security_animation': SecurityAnimation,
            'short_title': str,
            'text_modules_data': List[TextModuleData],
            'title': str,
            'title_image': Image,
            'version': str,
            'view_unlock_requirement': str,
            'word_mark': Image
        }

        self.attribute_map = {
            'allow_multiple_users_per_object': 'allowMultipleUsersPerObject',
            'callback_options': 'callbackOptions',
            'class_template_info': 'classTemplateInfo',
            'country_code': 'countryCode',
            'details': 'details',
            'enable_smart_tap': 'enableSmartTap',
            'fine_print': 'finePrint',
            'help_uri': 'helpUri',
            'hero_image': 'heroImage',
            'hex_background_color': 'hexBackgroundColor',
            'homepage_uri': 'homepageUri',
            'id': 'id',
            'image_modules_data': 'imageModulesData',
            'info_module_data': 'infoModuleData',
            'issuer_name': 'issuerName',
            'kind': 'kind',
            'links_module_data': 'linksModuleData',
            'localized_details': 'localizedDetails',
            'localized_fine_print': 'localizedFinePrint',
            'localized_issuer_name': 'localizedIssuerName',
            'localized_provider': 'localizedProvider',
            'localized_short_title': 'localizedShortTitle',
            'localized_title': 'localizedTitle',
            'locations': 'locations',
            'messages': 'messages',
            'multiple_devices_and_holders_allowed_status': 'multipleDevicesAndHoldersAllowedStatus',
            'provider': 'provider',
            'redemption_channel': 'redemptionChannel',
            'redemption_issuers': 'redemptionIssuers',
            'review': 'review',
            'review_status': 'reviewStatus',
            'security_animation': 'securityAnimation',
            'short_title': 'shortTitle',
            'text_modules_data': 'textModulesData',
            'title': 'title',
            'title_image': 'titleImage',
            'version': 'version',
            'view_unlock_requirement': 'viewUnlockRequirement',
            'word_mark': 'wordMark'
        }

        self._allow_multiple_users_per_object = allow_multiple_users_per_object
        self._callback_options = callback_options
        self._class_template_info = class_template_info
        self._country_code = country_code
        self._details = details
        self._enable_smart_tap = enable_smart_tap
        self._fine_print = fine_print
        self._help_uri = help_uri
        self._hero_image = hero_image
        self._hex_background_color = hex_background_color
        self._homepage_uri = homepage_uri
        self._id = id
        self._image_modules_data = image_modules_data
        self._info_module_data = info_module_data
        self._issuer_name = issuer_name
        self._kind = kind
        self._links_module_data = links_module_data
        self._localized_details = localized_details
        self._localized_fine_print = localized_fine_print
        self._localized_issuer_name = localized_issuer_name
        self._localized_provider = localized_provider
        self._localized_short_title = localized_short_title
        self._localized_title = localized_title
        self._locations = locations
        self._messages = messages
        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status
        self._provider = provider
        self._redemption_channel = redemption_channel
        self._redemption_issuers = redemption_issuers
        self._review = review
        self._review_status = review_status
        self._security_animation = security_animation
        self._short_title = short_title
        self._text_modules_data = text_modules_data
        self._title = title
        self._title_image = title_image
        self._version = version
        self._view_unlock_requirement = view_unlock_requirement
        self._word_mark = word_mark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferClass of this OfferClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_multiple_users_per_object(self):
        """Gets the allow_multiple_users_per_object of this OfferClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :return: The allow_multiple_users_per_object of this OfferClass.
        :rtype: bool
        """
        return self._allow_multiple_users_per_object

    @allow_multiple_users_per_object.setter
    def allow_multiple_users_per_object(self, allow_multiple_users_per_object):
        """Sets the allow_multiple_users_per_object of this OfferClass.

        Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.

        :param allow_multiple_users_per_object: The allow_multiple_users_per_object of this OfferClass.
        :type allow_multiple_users_per_object: bool
        """

        self._allow_multiple_users_per_object = allow_multiple_users_per_object

    @property
    def callback_options(self):
        """Gets the callback_options of this OfferClass.


        :return: The callback_options of this OfferClass.
        :rtype: CallbackOptions
        """
        return self._callback_options

    @callback_options.setter
    def callback_options(self, callback_options):
        """Sets the callback_options of this OfferClass.


        :param callback_options: The callback_options of this OfferClass.
        :type callback_options: CallbackOptions
        """

        self._callback_options = callback_options

    @property
    def class_template_info(self):
        """Gets the class_template_info of this OfferClass.


        :return: The class_template_info of this OfferClass.
        :rtype: ClassTemplateInfo
        """
        return self._class_template_info

    @class_template_info.setter
    def class_template_info(self, class_template_info):
        """Sets the class_template_info of this OfferClass.


        :param class_template_info: The class_template_info of this OfferClass.
        :type class_template_info: ClassTemplateInfo
        """

        self._class_template_info = class_template_info

    @property
    def country_code(self):
        """Gets the country_code of this OfferClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :return: The country_code of this OfferClass.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OfferClass.

        Country code used to display the card's country (when the user is not in that country), as well as to display localized content when content is not available in the user's locale.

        :param country_code: The country_code of this OfferClass.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def details(self):
        """Gets the details of this OfferClass.

        The details of the offer.

        :return: The details of this OfferClass.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this OfferClass.

        The details of the offer.

        :param details: The details of this OfferClass.
        :type details: str
        """

        self._details = details

    @property
    def enable_smart_tap(self):
        """Gets the enable_smart_tap of this OfferClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The enable_smart_tap of this OfferClass.
        :rtype: bool
        """
        return self._enable_smart_tap

    @enable_smart_tap.setter
    def enable_smart_tap(self, enable_smart_tap):
        """Sets the enable_smart_tap of this OfferClass.

        Identifies whether this class supports Smart Tap. The `redemptionIssuers` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param enable_smart_tap: The enable_smart_tap of this OfferClass.
        :type enable_smart_tap: bool
        """

        self._enable_smart_tap = enable_smart_tap

    @property
    def fine_print(self):
        """Gets the fine_print of this OfferClass.

        The fine print or terms of the offer, such as \"20% off any t-shirt at Adam's Apparel.\"

        :return: The fine_print of this OfferClass.
        :rtype: str
        """
        return self._fine_print

    @fine_print.setter
    def fine_print(self, fine_print):
        """Sets the fine_print of this OfferClass.

        The fine print or terms of the offer, such as \"20% off any t-shirt at Adam's Apparel.\"

        :param fine_print: The fine_print of this OfferClass.
        :type fine_print: str
        """

        self._fine_print = fine_print

    @property
    def help_uri(self):
        """Gets the help_uri of this OfferClass.


        :return: The help_uri of this OfferClass.
        :rtype: Uri
        """
        return self._help_uri

    @help_uri.setter
    def help_uri(self, help_uri):
        """Sets the help_uri of this OfferClass.


        :param help_uri: The help_uri of this OfferClass.
        :type help_uri: Uri
        """

        self._help_uri = help_uri

    @property
    def hero_image(self):
        """Gets the hero_image of this OfferClass.


        :return: The hero_image of this OfferClass.
        :rtype: Image
        """
        return self._hero_image

    @hero_image.setter
    def hero_image(self, hero_image):
        """Sets the hero_image of this OfferClass.


        :param hero_image: The hero_image of this OfferClass.
        :type hero_image: Image
        """

        self._hero_image = hero_image

    @property
    def hex_background_color(self):
        """Gets the hex_background_color of this OfferClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :return: The hex_background_color of this OfferClass.
        :rtype: str
        """
        return self._hex_background_color

    @hex_background_color.setter
    def hex_background_color(self, hex_background_color):
        """Sets the hex_background_color of this OfferClass.

        The background color for the card. If not set the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as `#ffcc00`. You can also use the shorthand version of the RGB triplet which is #rgb, such as `#fc0`.

        :param hex_background_color: The hex_background_color of this OfferClass.
        :type hex_background_color: str
        """

        self._hex_background_color = hex_background_color

    @property
    def homepage_uri(self):
        """Gets the homepage_uri of this OfferClass.


        :return: The homepage_uri of this OfferClass.
        :rtype: Uri
        """
        return self._homepage_uri

    @homepage_uri.setter
    def homepage_uri(self, homepage_uri):
        """Sets the homepage_uri of this OfferClass.


        :param homepage_uri: The homepage_uri of this OfferClass.
        :type homepage_uri: Uri
        """

        self._homepage_uri = homepage_uri

    @property
    def id(self):
        """Gets the id of this OfferClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :return: The id of this OfferClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfferClass.

        Required. The unique identifier for a class. This ID must be unique across all classes from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'.

        :param id: The id of this OfferClass.
        :type id: str
        """

        self._id = id

    @property
    def image_modules_data(self):
        """Gets the image_modules_data of this OfferClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :return: The image_modules_data of this OfferClass.
        :rtype: List[ImageModuleData]
        """
        return self._image_modules_data

    @image_modules_data.setter
    def image_modules_data(self, image_modules_data):
        """Sets the image_modules_data of this OfferClass.

        Image module data. The maximum number of these fields displayed is 1 from object level and 1 for class object level.

        :param image_modules_data: The image_modules_data of this OfferClass.
        :type image_modules_data: List[ImageModuleData]
        """

        self._image_modules_data = image_modules_data

    @property
    def info_module_data(self):
        """Gets the info_module_data of this OfferClass.


        :return: The info_module_data of this OfferClass.
        :rtype: InfoModuleData
        """
        return self._info_module_data

    @info_module_data.setter
    def info_module_data(self, info_module_data):
        """Sets the info_module_data of this OfferClass.


        :param info_module_data: The info_module_data of this OfferClass.
        :type info_module_data: InfoModuleData
        """

        self._info_module_data = info_module_data

    @property
    def issuer_name(self):
        """Gets the issuer_name of this OfferClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :return: The issuer_name of this OfferClass.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this OfferClass.

        Required. The issuer name. Recommended maximum length is 20 characters to ensure full string is displayed on smaller screens.

        :param issuer_name: The issuer_name of this OfferClass.
        :type issuer_name: str
        """

        self._issuer_name = issuer_name

    @property
    def kind(self):
        """Gets the kind of this OfferClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#offerClass\"`.

        :return: The kind of this OfferClass.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this OfferClass.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#offerClass\"`.

        :param kind: The kind of this OfferClass.
        :type kind: str
        """

        self._kind = kind

    @property
    def links_module_data(self):
        """Gets the links_module_data of this OfferClass.


        :return: The links_module_data of this OfferClass.
        :rtype: LinksModuleData
        """
        return self._links_module_data

    @links_module_data.setter
    def links_module_data(self, links_module_data):
        """Sets the links_module_data of this OfferClass.


        :param links_module_data: The links_module_data of this OfferClass.
        :type links_module_data: LinksModuleData
        """

        self._links_module_data = links_module_data

    @property
    def localized_details(self):
        """Gets the localized_details of this OfferClass.


        :return: The localized_details of this OfferClass.
        :rtype: LocalizedString
        """
        return self._localized_details

    @localized_details.setter
    def localized_details(self, localized_details):
        """Sets the localized_details of this OfferClass.


        :param localized_details: The localized_details of this OfferClass.
        :type localized_details: LocalizedString
        """

        self._localized_details = localized_details

    @property
    def localized_fine_print(self):
        """Gets the localized_fine_print of this OfferClass.


        :return: The localized_fine_print of this OfferClass.
        :rtype: LocalizedString
        """
        return self._localized_fine_print

    @localized_fine_print.setter
    def localized_fine_print(self, localized_fine_print):
        """Sets the localized_fine_print of this OfferClass.


        :param localized_fine_print: The localized_fine_print of this OfferClass.
        :type localized_fine_print: LocalizedString
        """

        self._localized_fine_print = localized_fine_print

    @property
    def localized_issuer_name(self):
        """Gets the localized_issuer_name of this OfferClass.


        :return: The localized_issuer_name of this OfferClass.
        :rtype: LocalizedString
        """
        return self._localized_issuer_name

    @localized_issuer_name.setter
    def localized_issuer_name(self, localized_issuer_name):
        """Sets the localized_issuer_name of this OfferClass.


        :param localized_issuer_name: The localized_issuer_name of this OfferClass.
        :type localized_issuer_name: LocalizedString
        """

        self._localized_issuer_name = localized_issuer_name

    @property
    def localized_provider(self):
        """Gets the localized_provider of this OfferClass.


        :return: The localized_provider of this OfferClass.
        :rtype: LocalizedString
        """
        return self._localized_provider

    @localized_provider.setter
    def localized_provider(self, localized_provider):
        """Sets the localized_provider of this OfferClass.


        :param localized_provider: The localized_provider of this OfferClass.
        :type localized_provider: LocalizedString
        """

        self._localized_provider = localized_provider

    @property
    def localized_short_title(self):
        """Gets the localized_short_title of this OfferClass.


        :return: The localized_short_title of this OfferClass.
        :rtype: LocalizedString
        """
        return self._localized_short_title

    @localized_short_title.setter
    def localized_short_title(self, localized_short_title):
        """Sets the localized_short_title of this OfferClass.


        :param localized_short_title: The localized_short_title of this OfferClass.
        :type localized_short_title: LocalizedString
        """

        self._localized_short_title = localized_short_title

    @property
    def localized_title(self):
        """Gets the localized_title of this OfferClass.


        :return: The localized_title of this OfferClass.
        :rtype: LocalizedString
        """
        return self._localized_title

    @localized_title.setter
    def localized_title(self, localized_title):
        """Sets the localized_title of this OfferClass.


        :param localized_title: The localized_title of this OfferClass.
        :type localized_title: LocalizedString
        """

        self._localized_title = localized_title

    @property
    def locations(self):
        """Gets the locations of this OfferClass.

        Note: This field is currently not supported to trigger geo notifications.

        :return: The locations of this OfferClass.
        :rtype: List[LatLongPoint]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this OfferClass.

        Note: This field is currently not supported to trigger geo notifications.

        :param locations: The locations of this OfferClass.
        :type locations: List[LatLongPoint]
        """

        self._locations = locations

    @property
    def messages(self):
        """Gets the messages of this OfferClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :return: The messages of this OfferClass.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this OfferClass.

        An array of messages displayed in the app. All users of this object will receive its associated messages. The maximum number of these fields is 10.

        :param messages: The messages of this OfferClass.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def multiple_devices_and_holders_allowed_status(self):
        """Gets the multiple_devices_and_holders_allowed_status of this OfferClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :return: The multiple_devices_and_holders_allowed_status of this OfferClass.
        :rtype: str
        """
        return self._multiple_devices_and_holders_allowed_status

    @multiple_devices_and_holders_allowed_status.setter
    def multiple_devices_and_holders_allowed_status(self, multiple_devices_and_holders_allowed_status):
        """Sets the multiple_devices_and_holders_allowed_status of this OfferClass.

        Identifies whether multiple users and devices will save the same object referencing this class.

        :param multiple_devices_and_holders_allowed_status: The multiple_devices_and_holders_allowed_status of this OfferClass.
        :type multiple_devices_and_holders_allowed_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "MULTIPLE_HOLDERS", "multipleHolders", "ONE_USER_ALL_DEVICES", "oneUserAllDevices", "ONE_USER_ONE_DEVICE", "oneUserOneDevice"]  # noqa: E501
        if multiple_devices_and_holders_allowed_status not in allowed_values:
            raise ValueError(
                "Invalid value for `multiple_devices_and_holders_allowed_status` ({0}), must be one of {1}"
                .format(multiple_devices_and_holders_allowed_status, allowed_values)
            )

        self._multiple_devices_and_holders_allowed_status = multiple_devices_and_holders_allowed_status

    @property
    def provider(self):
        """Gets the provider of this OfferClass.

        Required. The offer provider (either the aggregator name or merchant name). Recommended maximum length is 12 characters to ensure full string is displayed on smaller screens.

        :return: The provider of this OfferClass.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this OfferClass.

        Required. The offer provider (either the aggregator name or merchant name). Recommended maximum length is 12 characters to ensure full string is displayed on smaller screens.

        :param provider: The provider of this OfferClass.
        :type provider: str
        """

        self._provider = provider

    @property
    def redemption_channel(self):
        """Gets the redemption_channel of this OfferClass.

        Required. The redemption channels applicable to this offer.

        :return: The redemption_channel of this OfferClass.
        :rtype: str
        """
        return self._redemption_channel

    @redemption_channel.setter
    def redemption_channel(self, redemption_channel):
        """Sets the redemption_channel of this OfferClass.

        Required. The redemption channels applicable to this offer.

        :param redemption_channel: The redemption_channel of this OfferClass.
        :type redemption_channel: str
        """
        allowed_values = ["REDEMPTION_CHANNEL_UNSPECIFIED", "INSTORE", "instore", "ONLINE", "online", "BOTH", "both", "TEMPORARY_PRICE_REDUCTION", "temporaryPriceReduction"]  # noqa: E501
        if redemption_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `redemption_channel` ({0}), must be one of {1}"
                .format(redemption_channel, allowed_values)
            )

        self._redemption_channel = redemption_channel

    @property
    def redemption_issuers(self):
        """Gets the redemption_issuers of this OfferClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :return: The redemption_issuers of this OfferClass.
        :rtype: List[str]
        """
        return self._redemption_issuers

    @redemption_issuers.setter
    def redemption_issuers(self, redemption_issuers):
        """Sets the redemption_issuers of this OfferClass.

        Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap.

        :param redemption_issuers: The redemption_issuers of this OfferClass.
        :type redemption_issuers: List[str]
        """

        self._redemption_issuers = redemption_issuers

    @property
    def review(self):
        """Gets the review of this OfferClass.


        :return: The review of this OfferClass.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this OfferClass.


        :param review: The review of this OfferClass.
        :type review: Review
        """

        self._review = review

    @property
    def review_status(self):
        """Gets the review_status of this OfferClass.

        Required. The status of the class. This field can be set to `draft` or The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :return: The review_status of this OfferClass.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this OfferClass.

        Required. The status of the class. This field can be set to `draft` or The status of the class. This field can be set to `draft` or `underReview` using the insert, patch, or update API calls. Once the review state is changed from `draft` it may not be changed back to `draft`. You should keep this field to `draft` when the class is under development. A `draft` class cannot be used to create any object. You should set this field to `underReview` when you believe the class is ready for use. The platform will automatically set this field to `approved` and it can be immediately used to create or migrate objects. When updating an already `approved` class you should keep setting this field to `underReview`.

        :param review_status: The review_status of this OfferClass.
        :type review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "UNDER_REVIEW", "underReview", "APPROVED", "approved", "REJECTED", "rejected", "DRAFT", "draft"]  # noqa: E501
        if review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def security_animation(self):
        """Gets the security_animation of this OfferClass.


        :return: The security_animation of this OfferClass.
        :rtype: SecurityAnimation
        """
        return self._security_animation

    @security_animation.setter
    def security_animation(self, security_animation):
        """Sets the security_animation of this OfferClass.


        :param security_animation: The security_animation of this OfferClass.
        :type security_animation: SecurityAnimation
        """

        self._security_animation = security_animation

    @property
    def short_title(self):
        """Gets the short_title of this OfferClass.

        A shortened version of the title of the offer, such as \"20% off,\" shown to users as a quick reference to the offer contents. Recommended maximum length is 20 characters.

        :return: The short_title of this OfferClass.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this OfferClass.

        A shortened version of the title of the offer, such as \"20% off,\" shown to users as a quick reference to the offer contents. Recommended maximum length is 20 characters.

        :param short_title: The short_title of this OfferClass.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def text_modules_data(self):
        """Gets the text_modules_data of this OfferClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :return: The text_modules_data of this OfferClass.
        :rtype: List[TextModuleData]
        """
        return self._text_modules_data

    @text_modules_data.setter
    def text_modules_data(self, text_modules_data):
        """Sets the text_modules_data of this OfferClass.

        Text module data. If text module data is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from the object and 10 from the class.

        :param text_modules_data: The text_modules_data of this OfferClass.
        :type text_modules_data: List[TextModuleData]
        """

        self._text_modules_data = text_modules_data

    @property
    def title(self):
        """Gets the title of this OfferClass.

        Required. The title of the offer, such as \"20% off any t-shirt.\" Recommended maximum length is 60 characters to ensure full string is displayed on smaller screens.

        :return: The title of this OfferClass.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OfferClass.

        Required. The title of the offer, such as \"20% off any t-shirt.\" Recommended maximum length is 60 characters to ensure full string is displayed on smaller screens.

        :param title: The title of this OfferClass.
        :type title: str
        """

        self._title = title

    @property
    def title_image(self):
        """Gets the title_image of this OfferClass.


        :return: The title_image of this OfferClass.
        :rtype: Image
        """
        return self._title_image

    @title_image.setter
    def title_image(self, title_image):
        """Sets the title_image of this OfferClass.


        :param title_image: The title_image of this OfferClass.
        :type title_image: Image
        """

        self._title_image = title_image

    @property
    def version(self):
        """Gets the version of this OfferClass.

        Deprecated

        :return: The version of this OfferClass.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OfferClass.

        Deprecated

        :param version: The version of this OfferClass.
        :type version: str
        """

        self._version = version

    @property
    def view_unlock_requirement(self):
        """Gets the view_unlock_requirement of this OfferClass.

        View Unlock Requirement options for the offer.

        :return: The view_unlock_requirement of this OfferClass.
        :rtype: str
        """
        return self._view_unlock_requirement

    @view_unlock_requirement.setter
    def view_unlock_requirement(self, view_unlock_requirement):
        """Sets the view_unlock_requirement of this OfferClass.

        View Unlock Requirement options for the offer.

        :param view_unlock_requirement: The view_unlock_requirement of this OfferClass.
        :type view_unlock_requirement: str
        """
        allowed_values = ["VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED", "UNLOCK_NOT_REQUIRED", "UNLOCK_REQUIRED_TO_VIEW"]  # noqa: E501
        if view_unlock_requirement not in allowed_values:
            raise ValueError(
                "Invalid value for `view_unlock_requirement` ({0}), must be one of {1}"
                .format(view_unlock_requirement, allowed_values)
            )

        self._view_unlock_requirement = view_unlock_requirement

    @property
    def word_mark(self):
        """Gets the word_mark of this OfferClass.


        :return: The word_mark of this OfferClass.
        :rtype: Image
        """
        return self._word_mark

    @word_mark.setter
    def word_mark(self, word_mark):
        """Sets the word_mark of this OfferClass.


        :param word_mark: The word_mark of this OfferClass.
        :type word_mark: Image
        """

        self._word_mark = word_mark
