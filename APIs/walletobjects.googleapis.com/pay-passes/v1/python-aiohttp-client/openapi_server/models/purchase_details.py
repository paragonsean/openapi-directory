# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ticket_cost import TicketCost
from openapi_server import util


class PurchaseDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, confirmation_code: str=None, purchase_date_time: str=None, purchase_receipt_number: str=None, ticket_cost: TicketCost=None):
        """PurchaseDetails - a model defined in OpenAPI

        :param account_id: The account_id of this PurchaseDetails.
        :param confirmation_code: The confirmation_code of this PurchaseDetails.
        :param purchase_date_time: The purchase_date_time of this PurchaseDetails.
        :param purchase_receipt_number: The purchase_receipt_number of this PurchaseDetails.
        :param ticket_cost: The ticket_cost of this PurchaseDetails.
        """
        self.openapi_types = {
            'account_id': str,
            'confirmation_code': str,
            'purchase_date_time': str,
            'purchase_receipt_number': str,
            'ticket_cost': TicketCost
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'confirmation_code': 'confirmationCode',
            'purchase_date_time': 'purchaseDateTime',
            'purchase_receipt_number': 'purchaseReceiptNumber',
            'ticket_cost': 'ticketCost'
        }

        self._account_id = account_id
        self._confirmation_code = confirmation_code
        self._purchase_date_time = purchase_date_time
        self._purchase_receipt_number = purchase_receipt_number
        self._ticket_cost = ticket_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseDetails of this PurchaseDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this PurchaseDetails.

        ID of the account used to purchase the ticket.

        :return: The account_id of this PurchaseDetails.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PurchaseDetails.

        ID of the account used to purchase the ticket.

        :param account_id: The account_id of this PurchaseDetails.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def confirmation_code(self):
        """Gets the confirmation_code of this PurchaseDetails.

        The confirmation code for the purchase. This may be the same for multiple different tickets and is used to group tickets together.

        :return: The confirmation_code of this PurchaseDetails.
        :rtype: str
        """
        return self._confirmation_code

    @confirmation_code.setter
    def confirmation_code(self, confirmation_code):
        """Sets the confirmation_code of this PurchaseDetails.

        The confirmation code for the purchase. This may be the same for multiple different tickets and is used to group tickets together.

        :param confirmation_code: The confirmation_code of this PurchaseDetails.
        :type confirmation_code: str
        """

        self._confirmation_code = confirmation_code

    @property
    def purchase_date_time(self):
        """Gets the purchase_date_time of this PurchaseDetails.

        The purchase date/time of the ticket. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. Without offset information, some rich features may not be available.

        :return: The purchase_date_time of this PurchaseDetails.
        :rtype: str
        """
        return self._purchase_date_time

    @purchase_date_time.setter
    def purchase_date_time(self, purchase_date_time):
        """Sets the purchase_date_time of this PurchaseDetails.

        The purchase date/time of the ticket. This is an ISO 8601 extended format date/time, with or without an offset. Time may be specified up to nanosecond precision. Offsets may be specified with seconds precision (even though offset seconds is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time as the above example). If the event were in New York, this would be the equivalent of Eastern Daylight Time (EDT). Remember that offset varies in regions that observe Daylight Saving Time (or Summer Time), depending on the time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985 with no offset information. Without offset information, some rich features may not be available.

        :param purchase_date_time: The purchase_date_time of this PurchaseDetails.
        :type purchase_date_time: str
        """

        self._purchase_date_time = purchase_date_time

    @property
    def purchase_receipt_number(self):
        """Gets the purchase_receipt_number of this PurchaseDetails.

        Receipt number/identifier for tracking the ticket purchase via the body that sold the ticket.

        :return: The purchase_receipt_number of this PurchaseDetails.
        :rtype: str
        """
        return self._purchase_receipt_number

    @purchase_receipt_number.setter
    def purchase_receipt_number(self, purchase_receipt_number):
        """Sets the purchase_receipt_number of this PurchaseDetails.

        Receipt number/identifier for tracking the ticket purchase via the body that sold the ticket.

        :param purchase_receipt_number: The purchase_receipt_number of this PurchaseDetails.
        :type purchase_receipt_number: str
        """

        self._purchase_receipt_number = purchase_receipt_number

    @property
    def ticket_cost(self):
        """Gets the ticket_cost of this PurchaseDetails.


        :return: The ticket_cost of this PurchaseDetails.
        :rtype: TicketCost
        """
        return self._ticket_cost

    @ticket_cost.setter
    def ticket_cost(self, ticket_cost):
        """Sets the ticket_cost of this PurchaseDetails.


        :param ticket_cost: The ticket_cost of this PurchaseDetails.
        :type ticket_cost: TicketCost
        """

        self._ticket_cost = ticket_cost
