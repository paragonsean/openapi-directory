# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class Barcode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_text: str=None, kind: str=None, render_encoding: str=None, show_code_text: LocalizedString=None, type: str=None, value: str=None):
        """Barcode - a model defined in OpenAPI

        :param alternate_text: The alternate_text of this Barcode.
        :param kind: The kind of this Barcode.
        :param render_encoding: The render_encoding of this Barcode.
        :param show_code_text: The show_code_text of this Barcode.
        :param type: The type of this Barcode.
        :param value: The value of this Barcode.
        """
        self.openapi_types = {
            'alternate_text': str,
            'kind': str,
            'render_encoding': str,
            'show_code_text': LocalizedString,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'alternate_text': 'alternateText',
            'kind': 'kind',
            'render_encoding': 'renderEncoding',
            'show_code_text': 'showCodeText',
            'type': 'type',
            'value': 'value'
        }

        self._alternate_text = alternate_text
        self._kind = kind
        self._render_encoding = render_encoding
        self._show_code_text = show_code_text
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Barcode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Barcode of this Barcode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_text(self):
        """Gets the alternate_text of this Barcode.

        An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.

        :return: The alternate_text of this Barcode.
        :rtype: str
        """
        return self._alternate_text

    @alternate_text.setter
    def alternate_text(self, alternate_text):
        """Sets the alternate_text of this Barcode.

        An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.

        :param alternate_text: The alternate_text of this Barcode.
        :type alternate_text: str
        """

        self._alternate_text = alternate_text

    @property
    def kind(self):
        """Gets the kind of this Barcode.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#barcode\"`.

        :return: The kind of this Barcode.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Barcode.

        Identifies what kind of resource this is. Value: the fixed string `\"walletobjects#barcode\"`.

        :param kind: The kind of this Barcode.
        :type kind: str
        """

        self._kind = kind

    @property
    def render_encoding(self):
        """Gets the render_encoding of this Barcode.

        The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.

        :return: The render_encoding of this Barcode.
        :rtype: str
        """
        return self._render_encoding

    @render_encoding.setter
    def render_encoding(self, render_encoding):
        """Sets the render_encoding of this Barcode.

        The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.

        :param render_encoding: The render_encoding of this Barcode.
        :type render_encoding: str
        """
        allowed_values = ["RENDER_ENCODING_UNSPECIFIED", "UTF_8"]  # noqa: E501
        if render_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `render_encoding` ({0}), must be one of {1}"
                .format(render_encoding, allowed_values)
            )

        self._render_encoding = render_encoding

    @property
    def show_code_text(self):
        """Gets the show_code_text of this Barcode.


        :return: The show_code_text of this Barcode.
        :rtype: LocalizedString
        """
        return self._show_code_text

    @show_code_text.setter
    def show_code_text(self, show_code_text):
        """Sets the show_code_text of this Barcode.


        :param show_code_text: The show_code_text of this Barcode.
        :type show_code_text: LocalizedString
        """

        self._show_code_text = show_code_text

    @property
    def type(self):
        """Gets the type of this Barcode.

        The type of barcode.

        :return: The type of this Barcode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Barcode.

        The type of barcode.

        :param type: The type of this Barcode.
        :type type: str
        """
        allowed_values = ["BARCODE_TYPE_UNSPECIFIED", "AZTEC", "aztec", "CODE_39", "code39", "CODE_128", "code128", "CODABAR", "codabar", "DATA_MATRIX", "dataMatrix", "EAN_8", "ean8", "EAN_13", "ean13", "EAN13", "ITF_14", "itf14", "PDF_417", "pdf417", "PDF417", "QR_CODE", "qrCode", "qrcode", "UPC_A", "upcA", "TEXT_ONLY", "textOnly"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this Barcode.

        The value encoded in the barcode.

        :return: The value of this Barcode.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Barcode.

        The value encoded in the barcode.

        :param value: The value of this Barcode.
        :type value: str
        """

        self._value = value
