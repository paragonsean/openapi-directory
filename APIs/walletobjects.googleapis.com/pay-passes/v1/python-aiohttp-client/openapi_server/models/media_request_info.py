# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediaRequestInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_bytes: str=None, custom_data: str=None, diff_object_version: str=None, final_status: int=None, notification_type: str=None, request_id: str=None, total_bytes: str=None, total_bytes_is_estimated: bool=None):
        """MediaRequestInfo - a model defined in OpenAPI

        :param current_bytes: The current_bytes of this MediaRequestInfo.
        :param custom_data: The custom_data of this MediaRequestInfo.
        :param diff_object_version: The diff_object_version of this MediaRequestInfo.
        :param final_status: The final_status of this MediaRequestInfo.
        :param notification_type: The notification_type of this MediaRequestInfo.
        :param request_id: The request_id of this MediaRequestInfo.
        :param total_bytes: The total_bytes of this MediaRequestInfo.
        :param total_bytes_is_estimated: The total_bytes_is_estimated of this MediaRequestInfo.
        """
        self.openapi_types = {
            'current_bytes': str,
            'custom_data': str,
            'diff_object_version': str,
            'final_status': int,
            'notification_type': str,
            'request_id': str,
            'total_bytes': str,
            'total_bytes_is_estimated': bool
        }

        self.attribute_map = {
            'current_bytes': 'currentBytes',
            'custom_data': 'customData',
            'diff_object_version': 'diffObjectVersion',
            'final_status': 'finalStatus',
            'notification_type': 'notificationType',
            'request_id': 'requestId',
            'total_bytes': 'totalBytes',
            'total_bytes_is_estimated': 'totalBytesIsEstimated'
        }

        self._current_bytes = current_bytes
        self._custom_data = custom_data
        self._diff_object_version = diff_object_version
        self._final_status = final_status
        self._notification_type = notification_type
        self._request_id = request_id
        self._total_bytes = total_bytes
        self._total_bytes_is_estimated = total_bytes_is_estimated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaRequestInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaRequestInfo of this MediaRequestInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_bytes(self):
        """Gets the current_bytes of this MediaRequestInfo.

        The number of current bytes uploaded or downloaded.

        :return: The current_bytes of this MediaRequestInfo.
        :rtype: str
        """
        return self._current_bytes

    @current_bytes.setter
    def current_bytes(self, current_bytes):
        """Sets the current_bytes of this MediaRequestInfo.

        The number of current bytes uploaded or downloaded.

        :param current_bytes: The current_bytes of this MediaRequestInfo.
        :type current_bytes: str
        """

        self._current_bytes = current_bytes

    @property
    def custom_data(self):
        """Gets the custom_data of this MediaRequestInfo.

        Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.

        :return: The custom_data of this MediaRequestInfo.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this MediaRequestInfo.

        Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.

        :param custom_data: The custom_data of this MediaRequestInfo.
        :type custom_data: str
        """

        self._custom_data = custom_data

    @property
    def diff_object_version(self):
        """Gets the diff_object_version of this MediaRequestInfo.

        Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.

        :return: The diff_object_version of this MediaRequestInfo.
        :rtype: str
        """
        return self._diff_object_version

    @diff_object_version.setter
    def diff_object_version(self, diff_object_version):
        """Sets the diff_object_version of this MediaRequestInfo.

        Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information.

        :param diff_object_version: The diff_object_version of this MediaRequestInfo.
        :type diff_object_version: str
        """

        self._diff_object_version = diff_object_version

    @property
    def final_status(self):
        """Gets the final_status of this MediaRequestInfo.

        The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929

        :return: The final_status of this MediaRequestInfo.
        :rtype: int
        """
        return self._final_status

    @final_status.setter
    def final_status(self, final_status):
        """Sets the final_status of this MediaRequestInfo.

        The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929

        :param final_status: The final_status of this MediaRequestInfo.
        :type final_status: int
        """

        self._final_status = final_status

    @property
    def notification_type(self):
        """Gets the notification_type of this MediaRequestInfo.

        The type of notification received from Scotty.

        :return: The notification_type of this MediaRequestInfo.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this MediaRequestInfo.

        The type of notification received from Scotty.

        :param notification_type: The notification_type of this MediaRequestInfo.
        :type notification_type: str
        """
        allowed_values = ["START", "PROGRESS", "END", "RESPONSE_SENT", "ERROR"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def request_id(self):
        """Gets the request_id of this MediaRequestInfo.

        The Scotty request ID.

        :return: The request_id of this MediaRequestInfo.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this MediaRequestInfo.

        The Scotty request ID.

        :param request_id: The request_id of this MediaRequestInfo.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def total_bytes(self):
        """Gets the total_bytes of this MediaRequestInfo.

        The total size of the file.

        :return: The total_bytes of this MediaRequestInfo.
        :rtype: str
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this MediaRequestInfo.

        The total size of the file.

        :param total_bytes: The total_bytes of this MediaRequestInfo.
        :type total_bytes: str
        """

        self._total_bytes = total_bytes

    @property
    def total_bytes_is_estimated(self):
        """Gets the total_bytes_is_estimated of this MediaRequestInfo.

        Whether the total bytes field contains an estimated data.

        :return: The total_bytes_is_estimated of this MediaRequestInfo.
        :rtype: bool
        """
        return self._total_bytes_is_estimated

    @total_bytes_is_estimated.setter
    def total_bytes_is_estimated(self, total_bytes_is_estimated):
        """Sets the total_bytes_is_estimated of this MediaRequestInfo.

        Whether the total bytes field contains an estimated data.

        :param total_bytes_is_estimated: The total_bytes_is_estimated of this MediaRequestInfo.
        :type total_bytes_is_estimated: bool
        """

        self._total_bytes_is_estimated = total_bytes_is_estimated
