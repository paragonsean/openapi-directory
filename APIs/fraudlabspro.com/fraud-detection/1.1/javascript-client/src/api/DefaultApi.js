/**
 * FraudLabs Pro Fraud Detection
 * Online payment fraud detection service. It helps merchants to minimize chargebacks and therefore maximize the revenue. It can be used to detect fraud for various kinds of payment method, such as credit card, paypal, cod and so on. Please visit https://www.fraudlabspro.com to learn more.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1OrderFeedbackPost operation.
     * @callback module:api/DefaultApi~v1OrderFeedbackPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Feedback the status of an order transaction.
     * @param {String} id 
     * @param {String} key 
     * @param {module:model/String} action 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] 
     * @param {String} [notes] 
     * @param {module:api/DefaultApi~v1OrderFeedbackPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1OrderFeedbackPost(id, key, action, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1OrderFeedbackPost");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling v1OrderFeedbackPost");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling v1OrderFeedbackPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'key': key,
        'format': opts['format'],
        'action': action,
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/order/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1OrderScreenPost operation.
     * @callback module:api/DefaultApi~v1OrderScreenPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Screen order for payment fraud.
     * @param {String} ip 
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] 
     * @param {String} [lastName] 
     * @param {String} [firstName] 
     * @param {String} [billAddr] 
     * @param {String} [billCity] 
     * @param {String} [billState] 
     * @param {String} [billCountry] 
     * @param {String} [billZipCode] 
     * @param {String} [shipAddr] 
     * @param {String} [shipCity] 
     * @param {String} [shipState] 
     * @param {String} [shipCountry] 
     * @param {String} [shipZipCode] 
     * @param {String} [emailDomain] 
     * @param {String} [userPhone] 
     * @param {String} [email] 
     * @param {String} [emailHash] 
     * @param {String} [usernameHash] 
     * @param {String} [passwordHash] 
     * @param {String} [binNo] 
     * @param {String} [cardHash] 
     * @param {String} [avsResult] 
     * @param {String} [cvvResult] 
     * @param {String} [userOrderId] 
     * @param {String} [userOrderMemo] 
     * @param {Number} [amount] 
     * @param {Number} [quantity] 
     * @param {String} [currency] 
     * @param {String} [department] 
     * @param {String} [paymentMode] 
     * @param {String} [flpChecksum] 
     * @param {module:api/DefaultApi~v1OrderScreenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    v1OrderScreenPost(ip, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling v1OrderScreenPost");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling v1OrderScreenPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'ip': ip,
        'key': key,
        'format': opts['format'],
        'last_name': opts['lastName'],
        'first_name': opts['firstName'],
        'bill_addr': opts['billAddr'],
        'bill_city': opts['billCity'],
        'bill_state': opts['billState'],
        'bill_country': opts['billCountry'],
        'bill_zip_code': opts['billZipCode'],
        'ship_addr': opts['shipAddr'],
        'ship_city': opts['shipCity'],
        'ship_state': opts['shipState'],
        'ship_country': opts['shipCountry'],
        'ship_zip_code': opts['shipZipCode'],
        'email_domain': opts['emailDomain'],
        'user_phone': opts['userPhone'],
        'email': opts['email'],
        'email_hash': opts['emailHash'],
        'username_hash': opts['usernameHash'],
        'password_hash': opts['passwordHash'],
        'bin_no': opts['binNo'],
        'card_hash': opts['cardHash'],
        'avs_result': opts['avsResult'],
        'cvv_result': opts['cvvResult'],
        'user_order_id': opts['userOrderId'],
        'user_order_memo': opts['userOrderMemo'],
        'amount': opts['amount'],
        'quantity': opts['quantity'],
        'currency': opts['currency'],
        'department': opts['department'],
        'payment_mode': opts['paymentMode'],
        'flp_checksum': opts['flpChecksum']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/order/screen', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
