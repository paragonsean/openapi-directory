/*
 * FraudLabs Pro Fraud Detection
 * Online payment fraud detection service. It helps merchants to minimize chargebacks and therefore maximize the revenue. It can be used to detect fraud for various kinds of payment method, such as credit card, paypal, cod and so on. Please visit https://www.fraudlabspro.com to learn more.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrderFeedbackPost
     * @param id  (required)
     * @param key  (required)
     * @param action  (required)
     * @param format  (optional)
     * @param notes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback order response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderFeedbackPostCall(String id, String key, String action, String format, String notes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/order/feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrderFeedbackPostValidateBeforeCall(String id, String key, String action, String format, String notes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v1OrderFeedbackPost(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1OrderFeedbackPost(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling v1OrderFeedbackPost(Async)");
        }

        return v1OrderFeedbackPostCall(id, key, action, format, notes, _callback);

    }

    /**
     * 
     * Feedback the status of an order transaction.
     * @param id  (required)
     * @param key  (required)
     * @param action  (required)
     * @param format  (optional)
     * @param notes  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback order response </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrderFeedbackPost(String id, String key, String action, String format, String notes) throws ApiException {
        ApiResponse<String> localVarResp = v1OrderFeedbackPostWithHttpInfo(id, key, action, format, notes);
        return localVarResp.getData();
    }

    /**
     * 
     * Feedback the status of an order transaction.
     * @param id  (required)
     * @param key  (required)
     * @param action  (required)
     * @param format  (optional)
     * @param notes  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback order response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrderFeedbackPostWithHttpInfo(String id, String key, String action, String format, String notes) throws ApiException {
        okhttp3.Call localVarCall = v1OrderFeedbackPostValidateBeforeCall(id, key, action, format, notes, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Feedback the status of an order transaction.
     * @param id  (required)
     * @param key  (required)
     * @param action  (required)
     * @param format  (optional)
     * @param notes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback order response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderFeedbackPostAsync(String id, String key, String action, String format, String notes, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrderFeedbackPostValidateBeforeCall(id, key, action, format, notes, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrderScreenPost
     * @param ip  (required)
     * @param key  (required)
     * @param format  (optional)
     * @param lastName  (optional)
     * @param firstName  (optional)
     * @param billAddr  (optional)
     * @param billCity  (optional)
     * @param billState  (optional)
     * @param billCountry  (optional)
     * @param billZipCode  (optional)
     * @param shipAddr  (optional)
     * @param shipCity  (optional)
     * @param shipState  (optional)
     * @param shipCountry  (optional)
     * @param shipZipCode  (optional)
     * @param emailDomain  (optional)
     * @param userPhone  (optional)
     * @param email  (optional)
     * @param emailHash  (optional)
     * @param usernameHash  (optional)
     * @param passwordHash  (optional)
     * @param binNo  (optional)
     * @param cardHash  (optional)
     * @param avsResult  (optional)
     * @param cvvResult  (optional)
     * @param userOrderId  (optional)
     * @param userOrderMemo  (optional)
     * @param amount  (optional)
     * @param quantity  (optional)
     * @param currency  (optional)
     * @param department  (optional)
     * @param paymentMode  (optional)
     * @param flpChecksum  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screen order response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderScreenPostCall(String ip, String key, String format, String lastName, String firstName, String billAddr, String billCity, String billState, String billCountry, String billZipCode, String shipAddr, String shipCity, String shipState, String shipCountry, String shipZipCode, String emailDomain, String userPhone, String email, String emailHash, String usernameHash, String passwordHash, String binNo, String cardHash, String avsResult, String cvvResult, String userOrderId, String userOrderMemo, BigDecimal amount, Integer quantity, String currency, String department, String paymentMode, String flpChecksum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/order/screen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (billAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill_addr", billAddr));
        }

        if (billCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill_city", billCity));
        }

        if (billState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill_state", billState));
        }

        if (billCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill_country", billCountry));
        }

        if (billZipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill_zip_code", billZipCode));
        }

        if (shipAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_addr", shipAddr));
        }

        if (shipCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_city", shipCity));
        }

        if (shipState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_state", shipState));
        }

        if (shipCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_country", shipCountry));
        }

        if (shipZipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_zip_code", shipZipCode));
        }

        if (emailDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email_domain", emailDomain));
        }

        if (userPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_phone", userPhone));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (emailHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email_hash", emailHash));
        }

        if (usernameHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username_hash", usernameHash));
        }

        if (passwordHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password_hash", passwordHash));
        }

        if (binNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bin_no", binNo));
        }

        if (cardHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_hash", cardHash));
        }

        if (avsResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avs_result", avsResult));
        }

        if (cvvResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cvv_result", cvvResult));
        }

        if (userOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_order_id", userOrderId));
        }

        if (userOrderMemo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_order_memo", userOrderMemo));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (department != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department", department));
        }

        if (paymentMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_mode", paymentMode));
        }

        if (flpChecksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flp_checksum", flpChecksum));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrderScreenPostValidateBeforeCall(String ip, String key, String format, String lastName, String firstName, String billAddr, String billCity, String billState, String billCountry, String billZipCode, String shipAddr, String shipCity, String shipState, String shipCountry, String shipZipCode, String emailDomain, String userPhone, String email, String emailHash, String usernameHash, String passwordHash, String binNo, String cardHash, String avsResult, String cvvResult, String userOrderId, String userOrderMemo, BigDecimal amount, Integer quantity, String currency, String department, String paymentMode, String flpChecksum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling v1OrderScreenPost(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1OrderScreenPost(Async)");
        }

        return v1OrderScreenPostCall(ip, key, format, lastName, firstName, billAddr, billCity, billState, billCountry, billZipCode, shipAddr, shipCity, shipState, shipCountry, shipZipCode, emailDomain, userPhone, email, emailHash, usernameHash, passwordHash, binNo, cardHash, avsResult, cvvResult, userOrderId, userOrderMemo, amount, quantity, currency, department, paymentMode, flpChecksum, _callback);

    }

    /**
     * 
     * Screen order for payment fraud.
     * @param ip  (required)
     * @param key  (required)
     * @param format  (optional)
     * @param lastName  (optional)
     * @param firstName  (optional)
     * @param billAddr  (optional)
     * @param billCity  (optional)
     * @param billState  (optional)
     * @param billCountry  (optional)
     * @param billZipCode  (optional)
     * @param shipAddr  (optional)
     * @param shipCity  (optional)
     * @param shipState  (optional)
     * @param shipCountry  (optional)
     * @param shipZipCode  (optional)
     * @param emailDomain  (optional)
     * @param userPhone  (optional)
     * @param email  (optional)
     * @param emailHash  (optional)
     * @param usernameHash  (optional)
     * @param passwordHash  (optional)
     * @param binNo  (optional)
     * @param cardHash  (optional)
     * @param avsResult  (optional)
     * @param cvvResult  (optional)
     * @param userOrderId  (optional)
     * @param userOrderMemo  (optional)
     * @param amount  (optional)
     * @param quantity  (optional)
     * @param currency  (optional)
     * @param department  (optional)
     * @param paymentMode  (optional)
     * @param flpChecksum  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screen order response </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrderScreenPost(String ip, String key, String format, String lastName, String firstName, String billAddr, String billCity, String billState, String billCountry, String billZipCode, String shipAddr, String shipCity, String shipState, String shipCountry, String shipZipCode, String emailDomain, String userPhone, String email, String emailHash, String usernameHash, String passwordHash, String binNo, String cardHash, String avsResult, String cvvResult, String userOrderId, String userOrderMemo, BigDecimal amount, Integer quantity, String currency, String department, String paymentMode, String flpChecksum) throws ApiException {
        ApiResponse<String> localVarResp = v1OrderScreenPostWithHttpInfo(ip, key, format, lastName, firstName, billAddr, billCity, billState, billCountry, billZipCode, shipAddr, shipCity, shipState, shipCountry, shipZipCode, emailDomain, userPhone, email, emailHash, usernameHash, passwordHash, binNo, cardHash, avsResult, cvvResult, userOrderId, userOrderMemo, amount, quantity, currency, department, paymentMode, flpChecksum);
        return localVarResp.getData();
    }

    /**
     * 
     * Screen order for payment fraud.
     * @param ip  (required)
     * @param key  (required)
     * @param format  (optional)
     * @param lastName  (optional)
     * @param firstName  (optional)
     * @param billAddr  (optional)
     * @param billCity  (optional)
     * @param billState  (optional)
     * @param billCountry  (optional)
     * @param billZipCode  (optional)
     * @param shipAddr  (optional)
     * @param shipCity  (optional)
     * @param shipState  (optional)
     * @param shipCountry  (optional)
     * @param shipZipCode  (optional)
     * @param emailDomain  (optional)
     * @param userPhone  (optional)
     * @param email  (optional)
     * @param emailHash  (optional)
     * @param usernameHash  (optional)
     * @param passwordHash  (optional)
     * @param binNo  (optional)
     * @param cardHash  (optional)
     * @param avsResult  (optional)
     * @param cvvResult  (optional)
     * @param userOrderId  (optional)
     * @param userOrderMemo  (optional)
     * @param amount  (optional)
     * @param quantity  (optional)
     * @param currency  (optional)
     * @param department  (optional)
     * @param paymentMode  (optional)
     * @param flpChecksum  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screen order response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrderScreenPostWithHttpInfo(String ip, String key, String format, String lastName, String firstName, String billAddr, String billCity, String billState, String billCountry, String billZipCode, String shipAddr, String shipCity, String shipState, String shipCountry, String shipZipCode, String emailDomain, String userPhone, String email, String emailHash, String usernameHash, String passwordHash, String binNo, String cardHash, String avsResult, String cvvResult, String userOrderId, String userOrderMemo, BigDecimal amount, Integer quantity, String currency, String department, String paymentMode, String flpChecksum) throws ApiException {
        okhttp3.Call localVarCall = v1OrderScreenPostValidateBeforeCall(ip, key, format, lastName, firstName, billAddr, billCity, billState, billCountry, billZipCode, shipAddr, shipCity, shipState, shipCountry, shipZipCode, emailDomain, userPhone, email, emailHash, usernameHash, passwordHash, binNo, cardHash, avsResult, cvvResult, userOrderId, userOrderMemo, amount, quantity, currency, department, paymentMode, flpChecksum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Screen order for payment fraud.
     * @param ip  (required)
     * @param key  (required)
     * @param format  (optional)
     * @param lastName  (optional)
     * @param firstName  (optional)
     * @param billAddr  (optional)
     * @param billCity  (optional)
     * @param billState  (optional)
     * @param billCountry  (optional)
     * @param billZipCode  (optional)
     * @param shipAddr  (optional)
     * @param shipCity  (optional)
     * @param shipState  (optional)
     * @param shipCountry  (optional)
     * @param shipZipCode  (optional)
     * @param emailDomain  (optional)
     * @param userPhone  (optional)
     * @param email  (optional)
     * @param emailHash  (optional)
     * @param usernameHash  (optional)
     * @param passwordHash  (optional)
     * @param binNo  (optional)
     * @param cardHash  (optional)
     * @param avsResult  (optional)
     * @param cvvResult  (optional)
     * @param userOrderId  (optional)
     * @param userOrderMemo  (optional)
     * @param amount  (optional)
     * @param quantity  (optional)
     * @param currency  (optional)
     * @param department  (optional)
     * @param paymentMode  (optional)
     * @param flpChecksum  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Screen order response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderScreenPostAsync(String ip, String key, String format, String lastName, String firstName, String billAddr, String billCity, String billState, String billCountry, String billZipCode, String shipAddr, String shipCity, String shipState, String shipCountry, String shipZipCode, String emailDomain, String userPhone, String email, String emailHash, String usernameHash, String passwordHash, String binNo, String cardHash, String avsResult, String cvvResult, String userOrderId, String userOrderMemo, BigDecimal amount, Integer quantity, String currency, String department, String paymentMode, String flpChecksum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrderScreenPostValidateBeforeCall(ip, key, format, lastName, firstName, billAddr, billCity, billState, billCountry, billZipCode, shipAddr, shipCity, shipState, shipCountry, shipZipCode, emailDomain, userPhone, email, emailHash, usernameHash, passwordHash, binNo, cardHash, avsResult, cvvResult, userOrderId, userOrderMemo, amount, quantity, currency, department, paymentMode, flpChecksum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
