/**
 * FraudLabs Pro Fraud Detection
 * Online payment fraud detection service. It helps merchants to minimize chargebacks and therefore maximize the revenue. It can be used to detect fraud for various kinds of payment method, such as credit card, paypal, cod and so on. Please visit https://www.fraudlabspro.com to learn more.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  action QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  notes QString [optional]
    */
    virtual void v1OrderFeedbackPost(const QString &id, const QString &key, const QString &action, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ip QString [required]
    * @param[in]  key QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  bill_addr QString [optional]
    * @param[in]  bill_city QString [optional]
    * @param[in]  bill_state QString [optional]
    * @param[in]  bill_country QString [optional]
    * @param[in]  bill_zip_code QString [optional]
    * @param[in]  ship_addr QString [optional]
    * @param[in]  ship_city QString [optional]
    * @param[in]  ship_state QString [optional]
    * @param[in]  ship_country QString [optional]
    * @param[in]  ship_zip_code QString [optional]
    * @param[in]  email_domain QString [optional]
    * @param[in]  user_phone QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  email_hash QString [optional]
    * @param[in]  username_hash QString [optional]
    * @param[in]  password_hash QString [optional]
    * @param[in]  bin_no QString [optional]
    * @param[in]  card_hash QString [optional]
    * @param[in]  avs_result QString [optional]
    * @param[in]  cvv_result QString [optional]
    * @param[in]  user_order_id QString [optional]
    * @param[in]  user_order_memo QString [optional]
    * @param[in]  amount double [optional]
    * @param[in]  quantity qint32 [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  department QString [optional]
    * @param[in]  payment_mode QString [optional]
    * @param[in]  flp_checksum QString [optional]
    */
    virtual void v1OrderScreenPost(const QString &ip, const QString &key, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bill_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bill_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bill_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bill_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bill_zip_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_addr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_zip_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bin_no = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &avs_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cvv_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_order_memo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &amount = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &quantity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &department = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flp_checksum = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v1OrderFeedbackPostCallback(OAIHttpRequestWorker *worker);
    void v1OrderScreenPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v1OrderFeedbackPostSignal(QString summary);
    void v1OrderScreenPostSignal(QString summary);


    void v1OrderFeedbackPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void v1OrderScreenPostSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use v1OrderFeedbackPostSignalError() instead")
    void v1OrderFeedbackPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrderFeedbackPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1OrderScreenPostSignalError() instead")
    void v1OrderScreenPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrderScreenPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v1OrderFeedbackPostSignalErrorFull() instead")
    void v1OrderFeedbackPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrderFeedbackPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1OrderScreenPostSignalErrorFull() instead")
    void v1OrderScreenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrderScreenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
