/*
 * FraudLabs Pro SMS Verification
 * Send an SMS with verification code and a custom message for authentication purpose. It helps merchants to minimize chargebacks and fraud for various kinds of payment method, such as credit card, paypal, cod and so on. Please visit https://www.fraudlabspro.com to learn more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1VerificationResultGet
     * @param tranId The unique ID that was returned by the Send Verification SMS API that triggered the OTP sms. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param otp The OTP that was sent to the recipient’s phone. (required)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get verification response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1VerificationResultGetCall(String tranId, String key, String otp, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/verification/result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tranId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tran_id", tranId));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (otp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otp", otp));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1VerificationResultGetValidateBeforeCall(String tranId, String key, String otp, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tranId' is set
        if (tranId == null) {
            throw new ApiException("Missing the required parameter 'tranId' when calling v1VerificationResultGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1VerificationResultGet(Async)");
        }

        // verify the required parameter 'otp' is set
        if (otp == null) {
            throw new ApiException("Missing the required parameter 'otp' when calling v1VerificationResultGet(Async)");
        }

        return v1VerificationResultGetCall(tranId, key, otp, format, _callback);

    }

    /**
     * 
     * Verify that an OTP sent by the Send SMS Verification API is valid.
     * @param tranId The unique ID that was returned by the Send Verification SMS API that triggered the OTP sms. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param otp The OTP that was sent to the recipient’s phone. (required)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get verification response </td><td>  -  </td></tr>
     </table>
     */
    public String v1VerificationResultGet(String tranId, String key, String otp, String format) throws ApiException {
        ApiResponse<String> localVarResp = v1VerificationResultGetWithHttpInfo(tranId, key, otp, format);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify that an OTP sent by the Send SMS Verification API is valid.
     * @param tranId The unique ID that was returned by the Send Verification SMS API that triggered the OTP sms. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param otp The OTP that was sent to the recipient’s phone. (required)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get verification response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1VerificationResultGetWithHttpInfo(String tranId, String key, String otp, String format) throws ApiException {
        okhttp3.Call localVarCall = v1VerificationResultGetValidateBeforeCall(tranId, key, otp, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify that an OTP sent by the Send SMS Verification API is valid.
     * @param tranId The unique ID that was returned by the Send Verification SMS API that triggered the OTP sms. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param otp The OTP that was sent to the recipient’s phone. (required)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get verification response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1VerificationResultGetAsync(String tranId, String key, String otp, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1VerificationResultGetValidateBeforeCall(tranId, key, otp, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1VerificationSendPost
     * @param tel The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param countryCode ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done. (optional)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @param mesg The message template for the SMS. Add &lt;otp&gt; as placeholder for the actual OTP to be generated. Max length is 140 characters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> send verification response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1VerificationSendPostCall(String tel, String key, String countryCode, String format, String mesg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/verification/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (tel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tel", tel));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (mesg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mesg", mesg));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1VerificationSendPostValidateBeforeCall(String tel, String key, String countryCode, String format, String mesg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tel' is set
        if (tel == null) {
            throw new ApiException("Missing the required parameter 'tel' when calling v1VerificationSendPost(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1VerificationSendPost(Async)");
        }

        return v1VerificationSendPostCall(tel, key, countryCode, format, mesg, _callback);

    }

    /**
     * 
     * Send an SMS with verification code and a custom message for authentication purpose.
     * @param tel The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param countryCode ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done. (optional)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @param mesg The message template for the SMS. Add &lt;otp&gt; as placeholder for the actual OTP to be generated. Max length is 140 characters. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> send verification response </td><td>  -  </td></tr>
     </table>
     */
    public String v1VerificationSendPost(String tel, String key, String countryCode, String format, String mesg) throws ApiException {
        ApiResponse<String> localVarResp = v1VerificationSendPostWithHttpInfo(tel, key, countryCode, format, mesg);
        return localVarResp.getData();
    }

    /**
     * 
     * Send an SMS with verification code and a custom message for authentication purpose.
     * @param tel The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param countryCode ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done. (optional)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @param mesg The message template for the SMS. Add &lt;otp&gt; as placeholder for the actual OTP to be generated. Max length is 140 characters. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> send verification response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1VerificationSendPostWithHttpInfo(String tel, String key, String countryCode, String format, String mesg) throws ApiException {
        okhttp3.Call localVarCall = v1VerificationSendPostValidateBeforeCall(tel, key, countryCode, format, mesg, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an SMS with verification code and a custom message for authentication purpose.
     * @param tel The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses. (required)
     * @param key FraudLabs Pro API key. (required)
     * @param countryCode ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done. (optional)
     * @param format Returns the API response in json (default) or xml format. (optional)
     * @param mesg The message template for the SMS. Add &lt;otp&gt; as placeholder for the actual OTP to be generated. Max length is 140 characters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> send verification response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1VerificationSendPostAsync(String tel, String key, String countryCode, String format, String mesg, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1VerificationSendPostValidateBeforeCall(tel, key, countryCode, format, mesg, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
