# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_node_options import JsonNodeOptions
from openapi_server import util


class JsonNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: JsonNodeOptions=None, parent: JsonNode=None, root: JsonNode=None):
        """JsonNode - a model defined in OpenAPI

        :param options: The options of this JsonNode.
        :param parent: The parent of this JsonNode.
        :param root: The root of this JsonNode.
        """
        self.openapi_types = {
            'options': JsonNodeOptions,
            'parent': JsonNode,
            'root': JsonNode
        }

        self.attribute_map = {
            'options': 'options',
            'parent': 'parent',
            'root': 'root'
        }

        self._options = options
        self._parent = parent
        self._root = root

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonNode of this JsonNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this JsonNode.


        :return: The options of this JsonNode.
        :rtype: JsonNodeOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this JsonNode.


        :param options: The options of this JsonNode.
        :type options: JsonNodeOptions
        """

        self._options = options

    @property
    def parent(self):
        """Gets the parent of this JsonNode.


        :return: The parent of this JsonNode.
        :rtype: JsonNode
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this JsonNode.


        :param parent: The parent of this JsonNode.
        :type parent: JsonNode
        """

        self._parent = parent

    @property
    def root(self):
        """Gets the root of this JsonNode.


        :return: The root of this JsonNode.
        :rtype: JsonNode
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this JsonNode.


        :param root: The root of this JsonNode.
        :type root: JsonNode
        """

        self._root = root
