# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference_line import ReferenceLine
from openapi_server import util


class ReferenceLines(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file: str=None, file_url: str=None, post_lines: List[ReferenceLine]=None, pre_lines: List[ReferenceLine]=None, reference_line: ReferenceLine=None):
        """ReferenceLines - a model defined in OpenAPI

        :param file: The file of this ReferenceLines.
        :param file_url: The file_url of this ReferenceLines.
        :param post_lines: The post_lines of this ReferenceLines.
        :param pre_lines: The pre_lines of this ReferenceLines.
        :param reference_line: The reference_line of this ReferenceLines.
        """
        self.openapi_types = {
            'file': str,
            'file_url': str,
            'post_lines': List[ReferenceLine],
            'pre_lines': List[ReferenceLine],
            'reference_line': ReferenceLine
        }

        self.attribute_map = {
            'file': 'file',
            'file_url': 'fileUrl',
            'post_lines': 'postLines',
            'pre_lines': 'preLines',
            'reference_line': 'referenceLine'
        }

        self._file = file
        self._file_url = file_url
        self._post_lines = post_lines
        self._pre_lines = pre_lines
        self._reference_line = reference_line

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceLines':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceLines of this ReferenceLines.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this ReferenceLines.

        The file's name in where the code reference has been found. (Appears on the ConfigCat Dashboard)

        :return: The file of this ReferenceLines.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ReferenceLines.

        The file's name in where the code reference has been found. (Appears on the ConfigCat Dashboard)

        :param file: The file of this ReferenceLines.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")
        if file is not None and len(file) > 255:
            raise ValueError("Invalid value for `file`, length must be less than or equal to `255`")
        if file is not None and len(file) < 0:
            raise ValueError("Invalid value for `file`, length must be greater than or equal to `0`")

        self._file = file

    @property
    def file_url(self):
        """Gets the file_url of this ReferenceLines.

        The file's url. (Used to point to the file on the repository's website)

        :return: The file_url of this ReferenceLines.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this ReferenceLines.

        The file's url. (Used to point to the file on the repository's website)

        :param file_url: The file_url of this ReferenceLines.
        :type file_url: str
        """
        if file_url is not None and len(file_url) > 1000:
            raise ValueError("Invalid value for `file_url`, length must be less than or equal to `1000`")
        if file_url is not None and len(file_url) < 0:
            raise ValueError("Invalid value for `file_url`, length must be greater than or equal to `0`")

        self._file_url = file_url

    @property
    def post_lines(self):
        """Gets the post_lines of this ReferenceLines.

        The lines after the actual reference line.

        :return: The post_lines of this ReferenceLines.
        :rtype: List[ReferenceLine]
        """
        return self._post_lines

    @post_lines.setter
    def post_lines(self, post_lines):
        """Sets the post_lines of this ReferenceLines.

        The lines after the actual reference line.

        :param post_lines: The post_lines of this ReferenceLines.
        :type post_lines: List[ReferenceLine]
        """

        self._post_lines = post_lines

    @property
    def pre_lines(self):
        """Gets the pre_lines of this ReferenceLines.

        The lines before the actual reference line.

        :return: The pre_lines of this ReferenceLines.
        :rtype: List[ReferenceLine]
        """
        return self._pre_lines

    @pre_lines.setter
    def pre_lines(self, pre_lines):
        """Sets the pre_lines of this ReferenceLines.

        The lines before the actual reference line.

        :param pre_lines: The pre_lines of this ReferenceLines.
        :type pre_lines: List[ReferenceLine]
        """

        self._pre_lines = pre_lines

    @property
    def reference_line(self):
        """Gets the reference_line of this ReferenceLines.


        :return: The reference_line of this ReferenceLines.
        :rtype: ReferenceLine
        """
        return self._reference_line

    @reference_line.setter
    def reference_line(self, reference_line):
        """Sets the reference_line of this ReferenceLines.


        :param reference_line: The reference_line of this ReferenceLines.
        :type reference_line: ReferenceLine
        """
        if reference_line is None:
            raise ValueError("Invalid value for `reference_line`, must not be `None`")

        self._reference_line = reference_line
