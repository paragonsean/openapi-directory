# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteRepositoryReportsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, config_id: str=None, repository: str=None, setting_id: int=None):
        """DeleteRepositoryReportsRequest - a model defined in OpenAPI

        :param branch: The branch of this DeleteRepositoryReportsRequest.
        :param config_id: The config_id of this DeleteRepositoryReportsRequest.
        :param repository: The repository of this DeleteRepositoryReportsRequest.
        :param setting_id: The setting_id of this DeleteRepositoryReportsRequest.
        """
        self.openapi_types = {
            'branch': str,
            'config_id': str,
            'repository': str,
            'setting_id': int
        }

        self.attribute_map = {
            'branch': 'branch',
            'config_id': 'configId',
            'repository': 'repository',
            'setting_id': 'settingId'
        }

        self._branch = branch
        self._config_id = config_id
        self._repository = repository
        self._setting_id = setting_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRepositoryReportsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRepositoryReportsRequest of this DeleteRepositoryReportsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this DeleteRepositoryReportsRequest.

        If it's set, only this branch's reports belonging to the given repository will be deleted.

        :return: The branch of this DeleteRepositoryReportsRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this DeleteRepositoryReportsRequest.

        If it's set, only this branch's reports belonging to the given repository will be deleted.

        :param branch: The branch of this DeleteRepositoryReportsRequest.
        :type branch: str
        """
        if branch is not None and len(branch) > 255:
            raise ValueError("Invalid value for `branch`, length must be less than or equal to `255`")
        if branch is not None and len(branch) < 0:
            raise ValueError("Invalid value for `branch`, length must be greater than or equal to `0`")

        self._branch = branch

    @property
    def config_id(self):
        """Gets the config_id of this DeleteRepositoryReportsRequest.

        The Config's identifier from where the reports should be deleted.

        :return: The config_id of this DeleteRepositoryReportsRequest.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this DeleteRepositoryReportsRequest.

        The Config's identifier from where the reports should be deleted.

        :param config_id: The config_id of this DeleteRepositoryReportsRequest.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def repository(self):
        """Gets the repository of this DeleteRepositoryReportsRequest.

        The source control repository which's reports should be deleted.

        :return: The repository of this DeleteRepositoryReportsRequest.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this DeleteRepositoryReportsRequest.

        The source control repository which's reports should be deleted.

        :param repository: The repository of this DeleteRepositoryReportsRequest.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")
        if repository is not None and len(repository) > 255:
            raise ValueError("Invalid value for `repository`, length must be less than or equal to `255`")
        if repository is not None and len(repository) < 0:
            raise ValueError("Invalid value for `repository`, length must be greater than or equal to `0`")

        self._repository = repository

    @property
    def setting_id(self):
        """Gets the setting_id of this DeleteRepositoryReportsRequest.

        If it's set, only this setting's reports belonging to the given repository will be deleted.

        :return: The setting_id of this DeleteRepositoryReportsRequest.
        :rtype: int
        """
        return self._setting_id

    @setting_id.setter
    def setting_id(self, setting_id):
        """Sets the setting_id of this DeleteRepositoryReportsRequest.

        If it's set, only this setting's reports belonging to the given repository will be deleted.

        :param setting_id: The setting_id of this DeleteRepositoryReportsRequest.
        :type setting_id: int
        """

        self._setting_id = setting_id
