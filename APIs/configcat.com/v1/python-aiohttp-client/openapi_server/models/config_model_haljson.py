# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_model_haljson_embedded import ConfigModelHaljsonEmbedded
from openapi_server.models.config_model_haljson_links import ConfigModelHaljsonLinks
from openapi_server import util


class ConfigModelHaljson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: ConfigModelHaljsonEmbedded=None, links: ConfigModelHaljsonLinks=None, config_id: str=None, description: str=None, name: str=None, order: int=None):
        """ConfigModelHaljson - a model defined in OpenAPI

        :param embedded: The embedded of this ConfigModelHaljson.
        :param links: The links of this ConfigModelHaljson.
        :param config_id: The config_id of this ConfigModelHaljson.
        :param description: The description of this ConfigModelHaljson.
        :param name: The name of this ConfigModelHaljson.
        :param order: The order of this ConfigModelHaljson.
        """
        self.openapi_types = {
            'embedded': ConfigModelHaljsonEmbedded,
            'links': ConfigModelHaljsonLinks,
            'config_id': str,
            'description': str,
            'name': str,
            'order': int
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'config_id': 'configId',
            'description': 'description',
            'name': 'name',
            'order': 'order'
        }

        self._embedded = embedded
        self._links = links
        self._config_id = config_id
        self._description = description
        self._name = name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigModelHaljson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigModel-haljson of this ConfigModelHaljson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this ConfigModelHaljson.


        :return: The embedded of this ConfigModelHaljson.
        :rtype: ConfigModelHaljsonEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this ConfigModelHaljson.


        :param embedded: The embedded of this ConfigModelHaljson.
        :type embedded: ConfigModelHaljsonEmbedded
        """

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this ConfigModelHaljson.


        :return: The links of this ConfigModelHaljson.
        :rtype: ConfigModelHaljsonLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConfigModelHaljson.


        :param links: The links of this ConfigModelHaljson.
        :type links: ConfigModelHaljsonLinks
        """

        self._links = links

    @property
    def config_id(self):
        """Gets the config_id of this ConfigModelHaljson.


        :return: The config_id of this ConfigModelHaljson.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this ConfigModelHaljson.


        :param config_id: The config_id of this ConfigModelHaljson.
        :type config_id: str
        """

        self._config_id = config_id

    @property
    def description(self):
        """Gets the description of this ConfigModelHaljson.


        :return: The description of this ConfigModelHaljson.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigModelHaljson.


        :param description: The description of this ConfigModelHaljson.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ConfigModelHaljson.


        :return: The name of this ConfigModelHaljson.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigModelHaljson.


        :param name: The name of this ConfigModelHaljson.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this ConfigModelHaljson.


        :return: The order of this ConfigModelHaljson.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ConfigModelHaljson.


        :param order: The order of this ConfigModelHaljson.
        :type order: int
        """

        self._order = order
