# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_key: str=None, jira_jwt_token: str=None):
        """ConnectRequest - a model defined in OpenAPI

        :param client_key: The client_key of this ConnectRequest.
        :param jira_jwt_token: The jira_jwt_token of this ConnectRequest.
        """
        self.openapi_types = {
            'client_key': str,
            'jira_jwt_token': str
        }

        self.attribute_map = {
            'client_key': 'clientKey',
            'jira_jwt_token': 'jiraJwtToken'
        }

        self._client_key = client_key
        self._jira_jwt_token = jira_jwt_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectRequest of this ConnectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_key(self):
        """Gets the client_key of this ConnectRequest.


        :return: The client_key of this ConnectRequest.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this ConnectRequest.


        :param client_key: The client_key of this ConnectRequest.
        :type client_key: str
        """
        if client_key is None:
            raise ValueError("Invalid value for `client_key`, must not be `None`")
        if client_key is not None and len(client_key) > 255:
            raise ValueError("Invalid value for `client_key`, length must be less than or equal to `255`")
        if client_key is not None and len(client_key) < 0:
            raise ValueError("Invalid value for `client_key`, length must be greater than or equal to `0`")

        self._client_key = client_key

    @property
    def jira_jwt_token(self):
        """Gets the jira_jwt_token of this ConnectRequest.


        :return: The jira_jwt_token of this ConnectRequest.
        :rtype: str
        """
        return self._jira_jwt_token

    @jira_jwt_token.setter
    def jira_jwt_token(self, jira_jwt_token):
        """Sets the jira_jwt_token of this ConnectRequest.


        :param jira_jwt_token: The jira_jwt_token of this ConnectRequest.
        :type jira_jwt_token: str
        """
        if jira_jwt_token is None:
            raise ValueError("Invalid value for `jira_jwt_token`, must not be `None`")
        if jira_jwt_token is not None and len(jira_jwt_token) > 15000:
            raise ValueError("Invalid value for `jira_jwt_token`, length must be less than or equal to `15000`")
        if jira_jwt_token is not None and len(jira_jwt_token) < 0:
            raise ValueError("Invalid value for `jira_jwt_token`, length must be greater than or equal to `0`")

        self._jira_jwt_token = jira_jwt_token
