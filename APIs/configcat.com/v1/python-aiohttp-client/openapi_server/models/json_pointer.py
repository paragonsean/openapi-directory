# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_pointer_kind import JsonPointerKind
from openapi_server.models.pointer_segment import PointerSegment
from openapi_server import util


class JsonPointer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_uri_encoded: bool=None, kind: JsonPointerKind=None, segments: List[PointerSegment]=None, source: str=None):
        """JsonPointer - a model defined in OpenAPI

        :param is_uri_encoded: The is_uri_encoded of this JsonPointer.
        :param kind: The kind of this JsonPointer.
        :param segments: The segments of this JsonPointer.
        :param source: The source of this JsonPointer.
        """
        self.openapi_types = {
            'is_uri_encoded': bool,
            'kind': JsonPointerKind,
            'segments': List[PointerSegment],
            'source': str
        }

        self.attribute_map = {
            'is_uri_encoded': 'isUriEncoded',
            'kind': 'kind',
            'segments': 'segments',
            'source': 'source'
        }

        self._is_uri_encoded = is_uri_encoded
        self._kind = kind
        self._segments = segments
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonPointer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonPointer of this JsonPointer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_uri_encoded(self):
        """Gets the is_uri_encoded of this JsonPointer.


        :return: The is_uri_encoded of this JsonPointer.
        :rtype: bool
        """
        return self._is_uri_encoded

    @is_uri_encoded.setter
    def is_uri_encoded(self, is_uri_encoded):
        """Sets the is_uri_encoded of this JsonPointer.


        :param is_uri_encoded: The is_uri_encoded of this JsonPointer.
        :type is_uri_encoded: bool
        """

        self._is_uri_encoded = is_uri_encoded

    @property
    def kind(self):
        """Gets the kind of this JsonPointer.


        :return: The kind of this JsonPointer.
        :rtype: JsonPointerKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this JsonPointer.


        :param kind: The kind of this JsonPointer.
        :type kind: JsonPointerKind
        """

        self._kind = kind

    @property
    def segments(self):
        """Gets the segments of this JsonPointer.


        :return: The segments of this JsonPointer.
        :rtype: List[PointerSegment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this JsonPointer.


        :param segments: The segments of this JsonPointer.
        :type segments: List[PointerSegment]
        """

        self._segments = segments

    @property
    def source(self):
        """Gets the source of this JsonPointer.


        :return: The source of this JsonPointer.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JsonPointer.


        :param source: The source of this JsonPointer.
        :type source: str
        """

        self._source = source
