# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_model import ConfigModel
from openapi_server.models.config_setting_value_model import ConfigSettingValueModel
from openapi_server.models.environment_model import EnvironmentModel
from openapi_server import util


class ConfigSettingValuesModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: ConfigModel=None, environment: EnvironmentModel=None, read_only: bool=None, setting_values: List[ConfigSettingValueModel]=None):
        """ConfigSettingValuesModel - a model defined in OpenAPI

        :param config: The config of this ConfigSettingValuesModel.
        :param environment: The environment of this ConfigSettingValuesModel.
        :param read_only: The read_only of this ConfigSettingValuesModel.
        :param setting_values: The setting_values of this ConfigSettingValuesModel.
        """
        self.openapi_types = {
            'config': ConfigModel,
            'environment': EnvironmentModel,
            'read_only': bool,
            'setting_values': List[ConfigSettingValueModel]
        }

        self.attribute_map = {
            'config': 'config',
            'environment': 'environment',
            'read_only': 'readOnly',
            'setting_values': 'settingValues'
        }

        self._config = config
        self._environment = environment
        self._read_only = read_only
        self._setting_values = setting_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigSettingValuesModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigSettingValuesModel of this ConfigSettingValuesModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this ConfigSettingValuesModel.


        :return: The config of this ConfigSettingValuesModel.
        :rtype: ConfigModel
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ConfigSettingValuesModel.


        :param config: The config of this ConfigSettingValuesModel.
        :type config: ConfigModel
        """

        self._config = config

    @property
    def environment(self):
        """Gets the environment of this ConfigSettingValuesModel.


        :return: The environment of this ConfigSettingValuesModel.
        :rtype: EnvironmentModel
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ConfigSettingValuesModel.


        :param environment: The environment of this ConfigSettingValuesModel.
        :type environment: EnvironmentModel
        """

        self._environment = environment

    @property
    def read_only(self):
        """Gets the read_only of this ConfigSettingValuesModel.


        :return: The read_only of this ConfigSettingValuesModel.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ConfigSettingValuesModel.


        :param read_only: The read_only of this ConfigSettingValuesModel.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def setting_values(self):
        """Gets the setting_values of this ConfigSettingValuesModel.


        :return: The setting_values of this ConfigSettingValuesModel.
        :rtype: List[ConfigSettingValueModel]
        """
        return self._setting_values

    @setting_values.setter
    def setting_values(self, setting_values):
        """Sets the setting_values of this ConfigSettingValuesModel.


        :param setting_values: The setting_values of this ConfigSettingValuesModel.
        :type setting_values: List[ConfigSettingValueModel]
        """

        self._setting_values = setting_values
