# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_model_haljson_embedded import ConfigModelHaljsonEmbedded
from openapi_server.models.environment_model_haljson_links import EnvironmentModelHaljsonLinks
from openapi_server import util


class TagModelHaljson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: ConfigModelHaljsonEmbedded=None, links: EnvironmentModelHaljsonLinks=None, color: str=None, name: str=None, tag_id: int=None):
        """TagModelHaljson - a model defined in OpenAPI

        :param embedded: The embedded of this TagModelHaljson.
        :param links: The links of this TagModelHaljson.
        :param color: The color of this TagModelHaljson.
        :param name: The name of this TagModelHaljson.
        :param tag_id: The tag_id of this TagModelHaljson.
        """
        self.openapi_types = {
            'embedded': ConfigModelHaljsonEmbedded,
            'links': EnvironmentModelHaljsonLinks,
            'color': str,
            'name': str,
            'tag_id': int
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'color': 'color',
            'name': 'name',
            'tag_id': 'tagId'
        }

        self._embedded = embedded
        self._links = links
        self._color = color
        self._name = name
        self._tag_id = tag_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagModelHaljson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagModel-haljson of this TagModelHaljson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this TagModelHaljson.


        :return: The embedded of this TagModelHaljson.
        :rtype: ConfigModelHaljsonEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this TagModelHaljson.


        :param embedded: The embedded of this TagModelHaljson.
        :type embedded: ConfigModelHaljsonEmbedded
        """

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this TagModelHaljson.


        :return: The links of this TagModelHaljson.
        :rtype: EnvironmentModelHaljsonLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TagModelHaljson.


        :param links: The links of this TagModelHaljson.
        :type links: EnvironmentModelHaljsonLinks
        """

        self._links = links

    @property
    def color(self):
        """Gets the color of this TagModelHaljson.


        :return: The color of this TagModelHaljson.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TagModelHaljson.


        :param color: The color of this TagModelHaljson.
        :type color: str
        """

        self._color = color

    @property
    def name(self):
        """Gets the name of this TagModelHaljson.


        :return: The name of this TagModelHaljson.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagModelHaljson.


        :param name: The name of this TagModelHaljson.
        :type name: str
        """

        self._name = name

    @property
    def tag_id(self):
        """Gets the tag_id of this TagModelHaljson.


        :return: The tag_id of this TagModelHaljson.
        :rtype: int
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this TagModelHaljson.


        :param tag_id: The tag_id of this TagModelHaljson.
        :type tag_id: int
        """

        self._tag_id = tag_id
