# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.initial_value import InitialValue
from openapi_server.models.setting_type import SettingType
import re
from openapi_server import util


class CreateSettingInitialValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hint: str=None, initial_values: List[InitialValue]=None, key: str=None, name: str=None, setting_type: SettingType=None, tags: List[int]=None):
        """CreateSettingInitialValues - a model defined in OpenAPI

        :param hint: The hint of this CreateSettingInitialValues.
        :param initial_values: The initial_values of this CreateSettingInitialValues.
        :param key: The key of this CreateSettingInitialValues.
        :param name: The name of this CreateSettingInitialValues.
        :param setting_type: The setting_type of this CreateSettingInitialValues.
        :param tags: The tags of this CreateSettingInitialValues.
        """
        self.openapi_types = {
            'hint': str,
            'initial_values': List[InitialValue],
            'key': str,
            'name': str,
            'setting_type': SettingType,
            'tags': List[int]
        }

        self.attribute_map = {
            'hint': 'hint',
            'initial_values': 'initialValues',
            'key': 'key',
            'name': 'name',
            'setting_type': 'settingType',
            'tags': 'tags'
        }

        self._hint = hint
        self._initial_values = initial_values
        self._key = key
        self._name = name
        self._setting_type = setting_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSettingInitialValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSettingInitialValues of this CreateSettingInitialValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hint(self):
        """Gets the hint of this CreateSettingInitialValues.

        A short description for the setting, shown on the Dashboard UI.

        :return: The hint of this CreateSettingInitialValues.
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this CreateSettingInitialValues.

        A short description for the setting, shown on the Dashboard UI.

        :param hint: The hint of this CreateSettingInitialValues.
        :type hint: str
        """
        if hint is not None and len(hint) > 1000:
            raise ValueError("Invalid value for `hint`, length must be less than or equal to `1000`")
        if hint is not None and len(hint) < 0:
            raise ValueError("Invalid value for `hint`, length must be greater than or equal to `0`")

        self._hint = hint

    @property
    def initial_values(self):
        """Gets the initial_values of this CreateSettingInitialValues.

        Optional, initial values of the feature flag or setting in the given Environments.

        :return: The initial_values of this CreateSettingInitialValues.
        :rtype: List[InitialValue]
        """
        return self._initial_values

    @initial_values.setter
    def initial_values(self, initial_values):
        """Sets the initial_values of this CreateSettingInitialValues.

        Optional, initial values of the feature flag or setting in the given Environments.

        :param initial_values: The initial_values of this CreateSettingInitialValues.
        :type initial_values: List[InitialValue]
        """

        self._initial_values = initial_values

    @property
    def key(self):
        """Gets the key of this CreateSettingInitialValues.

        The key of the setting.

        :return: The key of this CreateSettingInitialValues.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateSettingInitialValues.

        The key of the setting.

        :param key: The key of this CreateSettingInitialValues.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")
        if key is not None and len(key) > 255:
            raise ValueError("Invalid value for `key`, length must be less than or equal to `255`")
        if key is not None and len(key) < 0:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `0`")
        if key is not None and not re.search(r'^[a-zA-Z]+[a-zA-Z0-9_]*', key):
            raise ValueError("Invalid value for `key`, must be a follow pattern or equal to `/^[a-zA-Z]+[a-zA-Z0-9_]*/`")

        self._key = key

    @property
    def name(self):
        """Gets the name of this CreateSettingInitialValues.

        The name of the setting, shown on the Dashboard UI.

        :return: The name of this CreateSettingInitialValues.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSettingInitialValues.

        The name of the setting, shown on the Dashboard UI.

        :param name: The name of this CreateSettingInitialValues.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def setting_type(self):
        """Gets the setting_type of this CreateSettingInitialValues.


        :return: The setting_type of this CreateSettingInitialValues.
        :rtype: SettingType
        """
        return self._setting_type

    @setting_type.setter
    def setting_type(self, setting_type):
        """Sets the setting_type of this CreateSettingInitialValues.


        :param setting_type: The setting_type of this CreateSettingInitialValues.
        :type setting_type: SettingType
        """
        if setting_type is None:
            raise ValueError("Invalid value for `setting_type`, must not be `None`")

        self._setting_type = setting_type

    @property
    def tags(self):
        """Gets the tags of this CreateSettingInitialValues.

        The IDs of the tags which are attached to the setting.

        :return: The tags of this CreateSettingInitialValues.
        :rtype: List[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSettingInitialValues.

        The IDs of the tags which are attached to the setting.

        :param tags: The tags of this CreateSettingInitialValues.
        :type tags: List[int]
        """

        self._tags = tags
