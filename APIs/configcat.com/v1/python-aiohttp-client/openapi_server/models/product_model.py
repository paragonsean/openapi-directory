# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_model import OrganizationModel
from openapi_server import util


class ProductModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, order: int=None, organization: OrganizationModel=None, product_id: str=None, reason_required: bool=None):
        """ProductModel - a model defined in OpenAPI

        :param description: The description of this ProductModel.
        :param name: The name of this ProductModel.
        :param order: The order of this ProductModel.
        :param organization: The organization of this ProductModel.
        :param product_id: The product_id of this ProductModel.
        :param reason_required: The reason_required of this ProductModel.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'order': int,
            'organization': OrganizationModel,
            'product_id': str,
            'reason_required': bool
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'order': 'order',
            'organization': 'organization',
            'product_id': 'productId',
            'reason_required': 'reasonRequired'
        }

        self._description = description
        self._name = name
        self._order = order
        self._organization = organization
        self._product_id = product_id
        self._reason_required = reason_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductModel of this ProductModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProductModel.


        :return: The description of this ProductModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductModel.


        :param description: The description of this ProductModel.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ProductModel.


        :return: The name of this ProductModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductModel.


        :param name: The name of this ProductModel.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this ProductModel.


        :return: The order of this ProductModel.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ProductModel.


        :param order: The order of this ProductModel.
        :type order: int
        """

        self._order = order

    @property
    def organization(self):
        """Gets the organization of this ProductModel.


        :return: The organization of this ProductModel.
        :rtype: OrganizationModel
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ProductModel.


        :param organization: The organization of this ProductModel.
        :type organization: OrganizationModel
        """

        self._organization = organization

    @property
    def product_id(self):
        """Gets the product_id of this ProductModel.


        :return: The product_id of this ProductModel.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductModel.


        :param product_id: The product_id of this ProductModel.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def reason_required(self):
        """Gets the reason_required of this ProductModel.


        :return: The reason_required of this ProductModel.
        :rtype: bool
        """
        return self._reason_required

    @reason_required.setter
    def reason_required(self, reason_required):
        """Sets the reason_required of this ProductModel.


        :param reason_required: The reason_required of this ProductModel.
        :type reason_required: bool
        """

        self._reason_required = reason_required
