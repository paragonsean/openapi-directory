# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReferenceLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, line_number: int=None, line_text: str=None):
        """ReferenceLine - a model defined in OpenAPI

        :param line_number: The line_number of this ReferenceLine.
        :param line_text: The line_text of this ReferenceLine.
        """
        self.openapi_types = {
            'line_number': int,
            'line_text': str
        }

        self.attribute_map = {
            'line_number': 'lineNumber',
            'line_text': 'lineText'
        }

        self._line_number = line_number
        self._line_text = line_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceLine of this ReferenceLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line_number(self):
        """Gets the line_number of this ReferenceLine.

        The line number of the reference line.

        :return: The line_number of this ReferenceLine.
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this ReferenceLine.

        The line number of the reference line.

        :param line_number: The line_number of this ReferenceLine.
        :type line_number: int
        """
        if line_number is None:
            raise ValueError("Invalid value for `line_number`, must not be `None`")

        self._line_number = line_number

    @property
    def line_text(self):
        """Gets the line_text of this ReferenceLine.

        The content of the reference line.

        :return: The line_text of this ReferenceLine.
        :rtype: str
        """
        return self._line_text

    @line_text.setter
    def line_text(self, line_text):
        """Sets the line_text of this ReferenceLine.

        The content of the reference line.

        :param line_text: The line_text of this ReferenceLine.
        :type line_text: str
        """
        if line_text is not None and len(line_text) > 1000:
            raise ValueError("Invalid value for `line_text`, length must be less than or equal to `1000`")
        if line_text is not None and len(line_text) < 0:
            raise ValueError("Invalid value for `line_text`, length must be greater than or equal to `0`")

        self._line_text = line_text
