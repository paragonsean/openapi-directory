# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddUserToGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permission_group_ids: List[int]=None):
        """AddUserToGroupRequest - a model defined in OpenAPI

        :param permission_group_ids: The permission_group_ids of this AddUserToGroupRequest.
        """
        self.openapi_types = {
            'permission_group_ids': List[int]
        }

        self.attribute_map = {
            'permission_group_ids': 'permissionGroupIds'
        }

        self._permission_group_ids = permission_group_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUserToGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddUserToGroupRequest of this AddUserToGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission_group_ids(self):
        """Gets the permission_group_ids of this AddUserToGroupRequest.


        :return: The permission_group_ids of this AddUserToGroupRequest.
        :rtype: List[int]
        """
        return self._permission_group_ids

    @permission_group_ids.setter
    def permission_group_ids(self, permission_group_ids):
        """Sets the permission_group_ids of this AddUserToGroupRequest.


        :param permission_group_ids: The permission_group_ids of this AddUserToGroupRequest.
        :type permission_group_ids: List[int]
        """
        if permission_group_ids is None:
            raise ValueError("Invalid value for `permission_group_ids`, must not be `None`")

        self._permission_group_ids = permission_group_ids
