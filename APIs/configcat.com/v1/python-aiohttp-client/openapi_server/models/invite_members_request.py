# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InviteMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emails: List[str]=None, permission_group_id: int=None):
        """InviteMembersRequest - a model defined in OpenAPI

        :param emails: The emails of this InviteMembersRequest.
        :param permission_group_id: The permission_group_id of this InviteMembersRequest.
        """
        self.openapi_types = {
            'emails': List[str],
            'permission_group_id': int
        }

        self.attribute_map = {
            'emails': 'emails',
            'permission_group_id': 'permissionGroupId'
        }

        self._emails = emails
        self._permission_group_id = permission_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InviteMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InviteMembersRequest of this InviteMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emails(self):
        """Gets the emails of this InviteMembersRequest.


        :return: The emails of this InviteMembersRequest.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this InviteMembersRequest.


        :param emails: The emails of this InviteMembersRequest.
        :type emails: List[str]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")

        self._emails = emails

    @property
    def permission_group_id(self):
        """Gets the permission_group_id of this InviteMembersRequest.


        :return: The permission_group_id of this InviteMembersRequest.
        :rtype: int
        """
        return self._permission_group_id

    @permission_group_id.setter
    def permission_group_id(self, permission_group_id):
        """Sets the permission_group_id of this InviteMembersRequest.


        :param permission_group_id: The permission_group_id of this InviteMembersRequest.
        :type permission_group_id: int
        """
        if permission_group_id is None:
            raise ValueError("Invalid value for `permission_group_id`, must not be `None`")

        self._permission_group_id = permission_group_id
