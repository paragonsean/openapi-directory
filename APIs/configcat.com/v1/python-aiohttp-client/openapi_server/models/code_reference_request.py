# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flag_reference import FlagReference
from openapi_server import util


class CodeReferenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_branches: List[str]=None, branch: str=None, commit_hash: str=None, commit_url: str=None, config_id: str=None, flag_references: List[FlagReference]=None, repository: str=None, uploader: str=None):
        """CodeReferenceRequest - a model defined in OpenAPI

        :param active_branches: The active_branches of this CodeReferenceRequest.
        :param branch: The branch of this CodeReferenceRequest.
        :param commit_hash: The commit_hash of this CodeReferenceRequest.
        :param commit_url: The commit_url of this CodeReferenceRequest.
        :param config_id: The config_id of this CodeReferenceRequest.
        :param flag_references: The flag_references of this CodeReferenceRequest.
        :param repository: The repository of this CodeReferenceRequest.
        :param uploader: The uploader of this CodeReferenceRequest.
        """
        self.openapi_types = {
            'active_branches': List[str],
            'branch': str,
            'commit_hash': str,
            'commit_url': str,
            'config_id': str,
            'flag_references': List[FlagReference],
            'repository': str,
            'uploader': str
        }

        self.attribute_map = {
            'active_branches': 'activeBranches',
            'branch': 'branch',
            'commit_hash': 'commitHash',
            'commit_url': 'commitUrl',
            'config_id': 'configId',
            'flag_references': 'flagReferences',
            'repository': 'repository',
            'uploader': 'uploader'
        }

        self._active_branches = active_branches
        self._branch = branch
        self._commit_hash = commit_hash
        self._commit_url = commit_url
        self._config_id = config_id
        self._flag_references = flag_references
        self._repository = repository
        self._uploader = uploader

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeReferenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeReferenceRequest of this CodeReferenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_branches(self):
        """Gets the active_branches of this CodeReferenceRequest.

        The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.

        :return: The active_branches of this CodeReferenceRequest.
        :rtype: List[str]
        """
        return self._active_branches

    @active_branches.setter
    def active_branches(self, active_branches):
        """Sets the active_branches of this CodeReferenceRequest.

        The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.

        :param active_branches: The active_branches of this CodeReferenceRequest.
        :type active_branches: List[str]
        """

        self._active_branches = active_branches

    @property
    def branch(self):
        """Gets the branch of this CodeReferenceRequest.

        The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)

        :return: The branch of this CodeReferenceRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CodeReferenceRequest.

        The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)

        :param branch: The branch of this CodeReferenceRequest.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")
        if branch is not None and len(branch) > 255:
            raise ValueError("Invalid value for `branch`, length must be less than or equal to `255`")
        if branch is not None and len(branch) < 0:
            raise ValueError("Invalid value for `branch`, length must be greater than or equal to `0`")

        self._branch = branch

    @property
    def commit_hash(self):
        """Gets the commit_hash of this CodeReferenceRequest.

        The related commit's hash. (Appears on the ConfigCat Dashboard)

        :return: The commit_hash of this CodeReferenceRequest.
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this CodeReferenceRequest.

        The related commit's hash. (Appears on the ConfigCat Dashboard)

        :param commit_hash: The commit_hash of this CodeReferenceRequest.
        :type commit_hash: str
        """
        if commit_hash is not None and len(commit_hash) > 255:
            raise ValueError("Invalid value for `commit_hash`, length must be less than or equal to `255`")
        if commit_hash is not None and len(commit_hash) < 0:
            raise ValueError("Invalid value for `commit_hash`, length must be greater than or equal to `0`")

        self._commit_hash = commit_hash

    @property
    def commit_url(self):
        """Gets the commit_url of this CodeReferenceRequest.

        The related commit's URL. (Appears on the ConfigCat Dashboard)

        :return: The commit_url of this CodeReferenceRequest.
        :rtype: str
        """
        return self._commit_url

    @commit_url.setter
    def commit_url(self, commit_url):
        """Sets the commit_url of this CodeReferenceRequest.

        The related commit's URL. (Appears on the ConfigCat Dashboard)

        :param commit_url: The commit_url of this CodeReferenceRequest.
        :type commit_url: str
        """
        if commit_url is not None and len(commit_url) > 1000:
            raise ValueError("Invalid value for `commit_url`, length must be less than or equal to `1000`")
        if commit_url is not None and len(commit_url) < 0:
            raise ValueError("Invalid value for `commit_url`, length must be greater than or equal to `0`")

        self._commit_url = commit_url

    @property
    def config_id(self):
        """Gets the config_id of this CodeReferenceRequest.

        The Config's identifier the scanning was performed against.

        :return: The config_id of this CodeReferenceRequest.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this CodeReferenceRequest.

        The Config's identifier the scanning was performed against.

        :param config_id: The config_id of this CodeReferenceRequest.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def flag_references(self):
        """Gets the flag_references of this CodeReferenceRequest.

        The actual code reference collection.

        :return: The flag_references of this CodeReferenceRequest.
        :rtype: List[FlagReference]
        """
        return self._flag_references

    @flag_references.setter
    def flag_references(self, flag_references):
        """Sets the flag_references of this CodeReferenceRequest.

        The actual code reference collection.

        :param flag_references: The flag_references of this CodeReferenceRequest.
        :type flag_references: List[FlagReference]
        """

        self._flag_references = flag_references

    @property
    def repository(self):
        """Gets the repository of this CodeReferenceRequest.

        The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)

        :return: The repository of this CodeReferenceRequest.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CodeReferenceRequest.

        The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)

        :param repository: The repository of this CodeReferenceRequest.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")
        if repository is not None and len(repository) > 255:
            raise ValueError("Invalid value for `repository`, length must be less than or equal to `255`")
        if repository is not None and len(repository) < 0:
            raise ValueError("Invalid value for `repository`, length must be greater than or equal to `0`")

        self._repository = repository

    @property
    def uploader(self):
        """Gets the uploader of this CodeReferenceRequest.

        The scanning tool's name. (Appears on the ConfigCat Dashboard)

        :return: The uploader of this CodeReferenceRequest.
        :rtype: str
        """
        return self._uploader

    @uploader.setter
    def uploader(self, uploader):
        """Sets the uploader of this CodeReferenceRequest.

        The scanning tool's name. (Appears on the ConfigCat Dashboard)

        :param uploader: The uploader of this CodeReferenceRequest.
        :type uploader: str
        """
        if uploader is not None and len(uploader) > 255:
            raise ValueError("Invalid value for `uploader`, length must be less than or equal to `255`")
        if uploader is not None and len(uploader) < 0:
            raise ValueError("Invalid value for `uploader`, length must be greater than or equal to `0`")

        self._uploader = uploader
