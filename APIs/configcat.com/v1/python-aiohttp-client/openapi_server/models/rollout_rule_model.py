# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rollout_rule_comparator import RolloutRuleComparator
from openapi_server.models.segment_comparator import SegmentComparator
from openapi_server import util


class RolloutRuleModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparator: RolloutRuleComparator=None, comparison_attribute: str=None, comparison_value: str=None, segment_comparator: SegmentComparator=None, segment_id: str=None, value: object=None):
        """RolloutRuleModel - a model defined in OpenAPI

        :param comparator: The comparator of this RolloutRuleModel.
        :param comparison_attribute: The comparison_attribute of this RolloutRuleModel.
        :param comparison_value: The comparison_value of this RolloutRuleModel.
        :param segment_comparator: The segment_comparator of this RolloutRuleModel.
        :param segment_id: The segment_id of this RolloutRuleModel.
        :param value: The value of this RolloutRuleModel.
        """
        self.openapi_types = {
            'comparator': RolloutRuleComparator,
            'comparison_attribute': str,
            'comparison_value': str,
            'segment_comparator': SegmentComparator,
            'segment_id': str,
            'value': object
        }

        self.attribute_map = {
            'comparator': 'comparator',
            'comparison_attribute': 'comparisonAttribute',
            'comparison_value': 'comparisonValue',
            'segment_comparator': 'segmentComparator',
            'segment_id': 'segmentId',
            'value': 'value'
        }

        self._comparator = comparator
        self._comparison_attribute = comparison_attribute
        self._comparison_value = comparison_value
        self._segment_comparator = segment_comparator
        self._segment_id = segment_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RolloutRuleModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RolloutRuleModel of this RolloutRuleModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparator(self):
        """Gets the comparator of this RolloutRuleModel.


        :return: The comparator of this RolloutRuleModel.
        :rtype: RolloutRuleComparator
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this RolloutRuleModel.


        :param comparator: The comparator of this RolloutRuleModel.
        :type comparator: RolloutRuleComparator
        """

        self._comparator = comparator

    @property
    def comparison_attribute(self):
        """Gets the comparison_attribute of this RolloutRuleModel.

        The user attribute to compare.

        :return: The comparison_attribute of this RolloutRuleModel.
        :rtype: str
        """
        return self._comparison_attribute

    @comparison_attribute.setter
    def comparison_attribute(self, comparison_attribute):
        """Sets the comparison_attribute of this RolloutRuleModel.

        The user attribute to compare.

        :param comparison_attribute: The comparison_attribute of this RolloutRuleModel.
        :type comparison_attribute: str
        """
        if comparison_attribute is not None and len(comparison_attribute) > 1000:
            raise ValueError("Invalid value for `comparison_attribute`, length must be less than or equal to `1000`")
        if comparison_attribute is not None and len(comparison_attribute) < 0:
            raise ValueError("Invalid value for `comparison_attribute`, length must be greater than or equal to `0`")

        self._comparison_attribute = comparison_attribute

    @property
    def comparison_value(self):
        """Gets the comparison_value of this RolloutRuleModel.

        The value to compare against.

        :return: The comparison_value of this RolloutRuleModel.
        :rtype: str
        """
        return self._comparison_value

    @comparison_value.setter
    def comparison_value(self, comparison_value):
        """Sets the comparison_value of this RolloutRuleModel.

        The value to compare against.

        :param comparison_value: The comparison_value of this RolloutRuleModel.
        :type comparison_value: str
        """
        if comparison_value is not None and len(comparison_value) > 65535:
            raise ValueError("Invalid value for `comparison_value`, length must be less than or equal to `65535`")
        if comparison_value is not None and len(comparison_value) < 0:
            raise ValueError("Invalid value for `comparison_value`, length must be greater than or equal to `0`")

        self._comparison_value = comparison_value

    @property
    def segment_comparator(self):
        """Gets the segment_comparator of this RolloutRuleModel.


        :return: The segment_comparator of this RolloutRuleModel.
        :rtype: SegmentComparator
        """
        return self._segment_comparator

    @segment_comparator.setter
    def segment_comparator(self, segment_comparator):
        """Sets the segment_comparator of this RolloutRuleModel.


        :param segment_comparator: The segment_comparator of this RolloutRuleModel.
        :type segment_comparator: SegmentComparator
        """

        self._segment_comparator = segment_comparator

    @property
    def segment_id(self):
        """Gets the segment_id of this RolloutRuleModel.

        The segment to compare against.

        :return: The segment_id of this RolloutRuleModel.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this RolloutRuleModel.

        The segment to compare against.

        :param segment_id: The segment_id of this RolloutRuleModel.
        :type segment_id: str
        """

        self._segment_id = segment_id

    @property
    def value(self):
        """Gets the value of this RolloutRuleModel.

        The value to serve when the comparison matches. It must respect the setting type.

        :return: The value of this RolloutRuleModel.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RolloutRuleModel.

        The value to serve when the comparison matches. It must respect the setting type.

        :param value: The value of this RolloutRuleModel.
        :type value: object
        """

        self._value = value
