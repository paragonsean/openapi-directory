# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InitialValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_id: str=None, value: object=None):
        """InitialValue - a model defined in OpenAPI

        :param environment_id: The environment_id of this InitialValue.
        :param value: The value of this InitialValue.
        """
        self.openapi_types = {
            'environment_id': str,
            'value': object
        }

        self.attribute_map = {
            'environment_id': 'environmentId',
            'value': 'value'
        }

        self._environment_id = environment_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InitialValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InitialValue of this InitialValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_id(self):
        """Gets the environment_id of this InitialValue.

        The ID of the Environment where the initial value should be set.

        :return: The environment_id of this InitialValue.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this InitialValue.

        The ID of the Environment where the initial value should be set.

        :param environment_id: The environment_id of this InitialValue.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def value(self):
        """Gets the value of this InitialValue.

        The initial value in the given Environment. It must respect the setting type.

        :return: The value of this InitialValue.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InitialValue.

        The initial value in the given Environment. It must respect the setting type.

        :param value: The value of this InitialValue.
        :type value: object
        """

        self._value = value
