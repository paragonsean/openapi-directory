/*
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.FlagReference;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeReferenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:46.616681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeReferenceRequest {
  public static final String SERIALIZED_NAME_ACTIVE_BRANCHES = "activeBranches";
  @SerializedName(SERIALIZED_NAME_ACTIVE_BRANCHES)
  private List<String> activeBranches;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_COMMIT_HASH = "commitHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_HASH)
  private String commitHash;

  public static final String SERIALIZED_NAME_COMMIT_URL = "commitUrl";
  @SerializedName(SERIALIZED_NAME_COMMIT_URL)
  private String commitUrl;

  public static final String SERIALIZED_NAME_CONFIG_ID = "configId";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private UUID configId;

  public static final String SERIALIZED_NAME_FLAG_REFERENCES = "flagReferences";
  @SerializedName(SERIALIZED_NAME_FLAG_REFERENCES)
  private List<FlagReference> flagReferences;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_UPLOADER = "uploader";
  @SerializedName(SERIALIZED_NAME_UPLOADER)
  private String uploader;

  public CodeReferenceRequest() {
  }

  public CodeReferenceRequest activeBranches(List<String> activeBranches) {
    this.activeBranches = activeBranches;
    return this;
  }

  public CodeReferenceRequest addActiveBranchesItem(String activeBranchesItem) {
    if (this.activeBranches == null) {
      this.activeBranches = new ArrayList<>();
    }
    this.activeBranches.add(activeBranchesItem);
    return this;
  }

  /**
   * The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.
   * @return activeBranches
   */
  @javax.annotation.Nullable
  public List<String> getActiveBranches() {
    return activeBranches;
  }

  public void setActiveBranches(List<String> activeBranches) {
    this.activeBranches = activeBranches;
  }


  public CodeReferenceRequest branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)
   * @return branch
   */
  @javax.annotation.Nonnull
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public CodeReferenceRequest commitHash(String commitHash) {
    this.commitHash = commitHash;
    return this;
  }

  /**
   * The related commit&#39;s hash. (Appears on the ConfigCat Dashboard)
   * @return commitHash
   */
  @javax.annotation.Nullable
  public String getCommitHash() {
    return commitHash;
  }

  public void setCommitHash(String commitHash) {
    this.commitHash = commitHash;
  }


  public CodeReferenceRequest commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

  /**
   * The related commit&#39;s URL. (Appears on the ConfigCat Dashboard)
   * @return commitUrl
   */
  @javax.annotation.Nullable
  public String getCommitUrl() {
    return commitUrl;
  }

  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public CodeReferenceRequest configId(UUID configId) {
    this.configId = configId;
    return this;
  }

  /**
   * The Config&#39;s identifier the scanning was performed against.
   * @return configId
   */
  @javax.annotation.Nonnull
  public UUID getConfigId() {
    return configId;
  }

  public void setConfigId(UUID configId) {
    this.configId = configId;
  }


  public CodeReferenceRequest flagReferences(List<FlagReference> flagReferences) {
    this.flagReferences = flagReferences;
    return this;
  }

  public CodeReferenceRequest addFlagReferencesItem(FlagReference flagReferencesItem) {
    if (this.flagReferences == null) {
      this.flagReferences = new ArrayList<>();
    }
    this.flagReferences.add(flagReferencesItem);
    return this;
  }

  /**
   * The actual code reference collection.
   * @return flagReferences
   */
  @javax.annotation.Nullable
  public List<FlagReference> getFlagReferences() {
    return flagReferences;
  }

  public void setFlagReferences(List<FlagReference> flagReferences) {
    this.flagReferences = flagReferences;
  }


  public CodeReferenceRequest repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)
   * @return repository
   */
  @javax.annotation.Nonnull
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public CodeReferenceRequest uploader(String uploader) {
    this.uploader = uploader;
    return this;
  }

  /**
   * The scanning tool&#39;s name. (Appears on the ConfigCat Dashboard)
   * @return uploader
   */
  @javax.annotation.Nullable
  public String getUploader() {
    return uploader;
  }

  public void setUploader(String uploader) {
    this.uploader = uploader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeReferenceRequest codeReferenceRequest = (CodeReferenceRequest) o;
    return Objects.equals(this.activeBranches, codeReferenceRequest.activeBranches) &&
        Objects.equals(this.branch, codeReferenceRequest.branch) &&
        Objects.equals(this.commitHash, codeReferenceRequest.commitHash) &&
        Objects.equals(this.commitUrl, codeReferenceRequest.commitUrl) &&
        Objects.equals(this.configId, codeReferenceRequest.configId) &&
        Objects.equals(this.flagReferences, codeReferenceRequest.flagReferences) &&
        Objects.equals(this.repository, codeReferenceRequest.repository) &&
        Objects.equals(this.uploader, codeReferenceRequest.uploader);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeBranches, branch, commitHash, commitUrl, configId, flagReferences, repository, uploader);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeReferenceRequest {\n");
    sb.append("    activeBranches: ").append(toIndentedString(activeBranches)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    commitHash: ").append(toIndentedString(commitHash)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    flagReferences: ").append(toIndentedString(flagReferences)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    uploader: ").append(toIndentedString(uploader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeBranches");
    openapiFields.add("branch");
    openapiFields.add("commitHash");
    openapiFields.add("commitUrl");
    openapiFields.add("configId");
    openapiFields.add("flagReferences");
    openapiFields.add("repository");
    openapiFields.add("uploader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("branch");
    openapiRequiredFields.add("configId");
    openapiRequiredFields.add("repository");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeReferenceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeReferenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeReferenceRequest is not found in the empty JSON string", CodeReferenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeReferenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeReferenceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeReferenceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activeBranches") != null && !jsonObj.get("activeBranches").isJsonNull() && !jsonObj.get("activeBranches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeBranches` to be an array in the JSON string but got `%s`", jsonObj.get("activeBranches").toString()));
      }
      if (!jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("commitHash") != null && !jsonObj.get("commitHash").isJsonNull()) && !jsonObj.get("commitHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitHash").toString()));
      }
      if ((jsonObj.get("commitUrl") != null && !jsonObj.get("commitUrl").isJsonNull()) && !jsonObj.get("commitUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitUrl").toString()));
      }
      if (!jsonObj.get("configId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configId").toString()));
      }
      if (jsonObj.get("flagReferences") != null && !jsonObj.get("flagReferences").isJsonNull()) {
        JsonArray jsonArrayflagReferences = jsonObj.getAsJsonArray("flagReferences");
        if (jsonArrayflagReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flagReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flagReferences` to be an array in the JSON string but got `%s`", jsonObj.get("flagReferences").toString()));
          }

          // validate the optional field `flagReferences` (array)
          for (int i = 0; i < jsonArrayflagReferences.size(); i++) {
            FlagReference.validateJsonElement(jsonArrayflagReferences.get(i));
          };
        }
      }
      if (!jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("uploader") != null && !jsonObj.get("uploader").isJsonNull()) && !jsonObj.get("uploader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeReferenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeReferenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeReferenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeReferenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeReferenceRequest>() {
           @Override
           public void write(JsonWriter out, CodeReferenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeReferenceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeReferenceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeReferenceRequest
   * @throws IOException if the JSON string is invalid with respect to CodeReferenceRequest
   */
  public static CodeReferenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeReferenceRequest.class);
  }

  /**
   * Convert an instance of CodeReferenceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

