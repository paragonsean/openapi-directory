/*
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReferenceLine;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReferenceLines
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:46.616681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceLines {
  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_FILE_URL = "fileUrl";
  @SerializedName(SERIALIZED_NAME_FILE_URL)
  private String fileUrl;

  public static final String SERIALIZED_NAME_POST_LINES = "postLines";
  @SerializedName(SERIALIZED_NAME_POST_LINES)
  private List<ReferenceLine> postLines;

  public static final String SERIALIZED_NAME_PRE_LINES = "preLines";
  @SerializedName(SERIALIZED_NAME_PRE_LINES)
  private List<ReferenceLine> preLines;

  public static final String SERIALIZED_NAME_REFERENCE_LINE = "referenceLine";
  @SerializedName(SERIALIZED_NAME_REFERENCE_LINE)
  private ReferenceLine referenceLine;

  public ReferenceLines() {
  }

  public ReferenceLines _file(String _file) {
    this._file = _file;
    return this;
  }

  /**
   * The file&#39;s name in where the code reference has been found. (Appears on the ConfigCat Dashboard)
   * @return _file
   */
  @javax.annotation.Nonnull
  public String getFile() {
    return _file;
  }

  public void setFile(String _file) {
    this._file = _file;
  }


  public ReferenceLines fileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  /**
   * The file&#39;s url. (Used to point to the file on the repository&#39;s website)
   * @return fileUrl
   */
  @javax.annotation.Nullable
  public String getFileUrl() {
    return fileUrl;
  }

  public void setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
  }


  public ReferenceLines postLines(List<ReferenceLine> postLines) {
    this.postLines = postLines;
    return this;
  }

  public ReferenceLines addPostLinesItem(ReferenceLine postLinesItem) {
    if (this.postLines == null) {
      this.postLines = new ArrayList<>();
    }
    this.postLines.add(postLinesItem);
    return this;
  }

  /**
   * The lines after the actual reference line.
   * @return postLines
   */
  @javax.annotation.Nullable
  public List<ReferenceLine> getPostLines() {
    return postLines;
  }

  public void setPostLines(List<ReferenceLine> postLines) {
    this.postLines = postLines;
  }


  public ReferenceLines preLines(List<ReferenceLine> preLines) {
    this.preLines = preLines;
    return this;
  }

  public ReferenceLines addPreLinesItem(ReferenceLine preLinesItem) {
    if (this.preLines == null) {
      this.preLines = new ArrayList<>();
    }
    this.preLines.add(preLinesItem);
    return this;
  }

  /**
   * The lines before the actual reference line.
   * @return preLines
   */
  @javax.annotation.Nullable
  public List<ReferenceLine> getPreLines() {
    return preLines;
  }

  public void setPreLines(List<ReferenceLine> preLines) {
    this.preLines = preLines;
  }


  public ReferenceLines referenceLine(ReferenceLine referenceLine) {
    this.referenceLine = referenceLine;
    return this;
  }

  /**
   * Get referenceLine
   * @return referenceLine
   */
  @javax.annotation.Nonnull
  public ReferenceLine getReferenceLine() {
    return referenceLine;
  }

  public void setReferenceLine(ReferenceLine referenceLine) {
    this.referenceLine = referenceLine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceLines referenceLines = (ReferenceLines) o;
    return Objects.equals(this._file, referenceLines._file) &&
        Objects.equals(this.fileUrl, referenceLines.fileUrl) &&
        Objects.equals(this.postLines, referenceLines.postLines) &&
        Objects.equals(this.preLines, referenceLines.preLines) &&
        Objects.equals(this.referenceLine, referenceLines.referenceLine);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(_file, fileUrl, postLines, preLines, referenceLine);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceLines {\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    fileUrl: ").append(toIndentedString(fileUrl)).append("\n");
    sb.append("    postLines: ").append(toIndentedString(postLines)).append("\n");
    sb.append("    preLines: ").append(toIndentedString(preLines)).append("\n");
    sb.append("    referenceLine: ").append(toIndentedString(referenceLine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file");
    openapiFields.add("fileUrl");
    openapiFields.add("postLines");
    openapiFields.add("preLines");
    openapiFields.add("referenceLine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("file");
    openapiRequiredFields.add("referenceLine");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceLines
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceLines.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceLines is not found in the empty JSON string", ReferenceLines.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceLines.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceLines` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReferenceLines.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if ((jsonObj.get("fileUrl") != null && !jsonObj.get("fileUrl").isJsonNull()) && !jsonObj.get("fileUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileUrl").toString()));
      }
      if (jsonObj.get("postLines") != null && !jsonObj.get("postLines").isJsonNull()) {
        JsonArray jsonArraypostLines = jsonObj.getAsJsonArray("postLines");
        if (jsonArraypostLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postLines` to be an array in the JSON string but got `%s`", jsonObj.get("postLines").toString()));
          }

          // validate the optional field `postLines` (array)
          for (int i = 0; i < jsonArraypostLines.size(); i++) {
            ReferenceLine.validateJsonElement(jsonArraypostLines.get(i));
          };
        }
      }
      if (jsonObj.get("preLines") != null && !jsonObj.get("preLines").isJsonNull()) {
        JsonArray jsonArraypreLines = jsonObj.getAsJsonArray("preLines");
        if (jsonArraypreLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preLines` to be an array in the JSON string but got `%s`", jsonObj.get("preLines").toString()));
          }

          // validate the optional field `preLines` (array)
          for (int i = 0; i < jsonArraypreLines.size(); i++) {
            ReferenceLine.validateJsonElement(jsonArraypreLines.get(i));
          };
        }
      }
      // validate the required field `referenceLine`
      ReferenceLine.validateJsonElement(jsonObj.get("referenceLine"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceLines.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceLines' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceLines> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceLines.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceLines>() {
           @Override
           public void write(JsonWriter out, ReferenceLines value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceLines read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceLines given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceLines
   * @throws IOException if the JSON string is invalid with respect to ReferenceLines
   */
  public static ReferenceLines fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceLines.class);
  }

  /**
   * Convert an instance of ReferenceLines to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

