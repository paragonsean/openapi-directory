/*
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateTagModel;
import org.openapitools.client.model.SettingModel;
import org.openapitools.client.model.SettingModelHaljson;
import org.openapitools.client.model.TagModel;
import org.openapitools.client.model.TagModelHaljson;
import java.util.UUID;
import org.openapitools.client.model.UpdateTagModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create Tag
     *
     * This endpoint creates a new Tag in a specified Product  identified by the &#x60;productId&#x60; parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        UUID productId = null;
        CreateTagModel createTagModel = null;
        TagModelHaljson response = api.createTag(productId, createTagModel);
        // TODO: test validations
    }

    /**
     * Delete Tag
     *
     * This endpoint deletes a Tag identified by the &#x60;tagId&#x60; parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        Long tagId = null;
        api.deleteTag(tagId);
        // TODO: test validations
    }

    /**
     * List Settings by Tag
     *
     * This endpoint returns the list of the Settings that  has the specified Tag, identified by the &#x60;tagId&#x60; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsByTagTest() throws ApiException {
        Long tagId = null;
        List<SettingModelHaljson> response = api.getSettingsByTag(tagId);
        // TODO: test validations
    }

    /**
     * Get Tag
     *
     * This endpoint returns the metadata of a Tag  identified by the &#x60;tagId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        Long tagId = null;
        TagModelHaljson response = api.getTag(tagId);
        // TODO: test validations
    }

    /**
     * List Tags
     *
     * This endpoint returns the list of the Tags in a  specified Product, identified by the &#x60;productId&#x60; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        UUID productId = null;
        List<TagModelHaljson> response = api.getTags(productId);
        // TODO: test validations
    }

    /**
     * Update Tag
     *
     * This endpoint updates a Tag identified by the &#x60;tagId&#x60; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        Long tagId = null;
        UpdateTagModel updateTagModel = null;
        TagModelHaljson response = api.updateTag(tagId, updateTagModel);
        // TODO: test validations
    }

}
