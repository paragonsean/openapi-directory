/*
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateProductRequest;
import org.openapitools.client.model.ProductModel;
import org.openapitools.client.model.ProductModelHaljson;
import java.util.UUID;
import org.openapitools.client.model.UpdateProductRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Create Product
     *
     * This endpoint creates a new Product in a specified Organization  identified by the &#x60;organizationId&#x60; parameter, which can be obtained from the [List Organizations](#operation/get-organizations) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductTest() throws ApiException {
        UUID organizationId = null;
        CreateProductRequest createProductRequest = null;
        ProductModelHaljson response = api.createProduct(organizationId, createProductRequest);
        // TODO: test validations
    }

    /**
     * Delete Product
     *
     * This endpoint removes a Product identified by the &#x60;productId&#x60; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        UUID productId = null;
        api.deleteProduct(productId);
        // TODO: test validations
    }

    /**
     * Get Product
     *
     * This endpoint returns the metadata of a Product  identified by the &#x60;productId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductTest() throws ApiException {
        UUID productId = null;
        ProductModelHaljson response = api.getProduct(productId);
        // TODO: test validations
    }

    /**
     * List Products
     *
     * This endpoint returns the list of the Products that belongs to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        List<ProductModelHaljson> response = api.getProducts();
        // TODO: test validations
    }

    /**
     * Update Product
     *
     * This endpoint updates a Product identified by the &#x60;productId&#x60; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        UUID productId = null;
        UpdateProductRequest updateProductRequest = null;
        ProductModelHaljson response = api.updateProduct(productId, updateProductRequest);
        // TODO: test validations
    }

}
