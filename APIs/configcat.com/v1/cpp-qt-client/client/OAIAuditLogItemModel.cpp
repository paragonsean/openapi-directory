/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLogItemModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLogItemModel::OAIAuditLogItemModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLogItemModel::OAIAuditLogItemModel() {
    this->initializeModel();
}

OAIAuditLogItemModel::~OAIAuditLogItemModel() {}

void OAIAuditLogItemModel::initializeModel() {

    m_action_target_isSet = false;
    m_action_target_isValid = false;

    m_audit_log_date_time_isSet = false;
    m_audit_log_date_time_isValid = false;

    m_audit_log_id_isSet = false;
    m_audit_log_id_isValid = false;

    m_audit_log_type_isSet = false;
    m_audit_log_type_isValid = false;

    m_audit_log_type_enum_isSet = false;
    m_audit_log_type_enum_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_where_isSet = false;
    m_where_isValid = false;

    m_why_isSet = false;
    m_why_isValid = false;
}

void OAIAuditLogItemModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLogItemModel::fromJsonObject(QJsonObject json) {

    m_action_target_isValid = ::OpenAPI::fromJsonValue(m_action_target, json[QString("actionTarget")]);
    m_action_target_isSet = !json[QString("actionTarget")].isNull() && m_action_target_isValid;

    m_audit_log_date_time_isValid = ::OpenAPI::fromJsonValue(m_audit_log_date_time, json[QString("auditLogDateTime")]);
    m_audit_log_date_time_isSet = !json[QString("auditLogDateTime")].isNull() && m_audit_log_date_time_isValid;

    m_audit_log_id_isValid = ::OpenAPI::fromJsonValue(m_audit_log_id, json[QString("auditLogId")]);
    m_audit_log_id_isSet = !json[QString("auditLogId")].isNull() && m_audit_log_id_isValid;

    m_audit_log_type_isValid = ::OpenAPI::fromJsonValue(m_audit_log_type, json[QString("auditLogType")]);
    m_audit_log_type_isSet = !json[QString("auditLogType")].isNull() && m_audit_log_type_isValid;

    m_audit_log_type_enum_isValid = ::OpenAPI::fromJsonValue(m_audit_log_type_enum, json[QString("auditLogTypeEnum")]);
    m_audit_log_type_enum_isSet = !json[QString("auditLogTypeEnum")].isNull() && m_audit_log_type_enum_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_where_isValid = ::OpenAPI::fromJsonValue(m_where, json[QString("where")]);
    m_where_isSet = !json[QString("where")].isNull() && m_where_isValid;

    m_why_isValid = ::OpenAPI::fromJsonValue(m_why, json[QString("why")]);
    m_why_isSet = !json[QString("why")].isNull() && m_why_isValid;
}

QString OAIAuditLogItemModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLogItemModel::asJsonObject() const {
    QJsonObject obj;
    if (m_action_target_isSet) {
        obj.insert(QString("actionTarget"), ::OpenAPI::toJsonValue(m_action_target));
    }
    if (m_audit_log_date_time_isSet) {
        obj.insert(QString("auditLogDateTime"), ::OpenAPI::toJsonValue(m_audit_log_date_time));
    }
    if (m_audit_log_id_isSet) {
        obj.insert(QString("auditLogId"), ::OpenAPI::toJsonValue(m_audit_log_id));
    }
    if (m_audit_log_type_isSet) {
        obj.insert(QString("auditLogType"), ::OpenAPI::toJsonValue(m_audit_log_type));
    }
    if (m_audit_log_type_enum.isSet()) {
        obj.insert(QString("auditLogTypeEnum"), ::OpenAPI::toJsonValue(m_audit_log_type_enum));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_where_isSet) {
        obj.insert(QString("where"), ::OpenAPI::toJsonValue(m_where));
    }
    if (m_why_isSet) {
        obj.insert(QString("why"), ::OpenAPI::toJsonValue(m_why));
    }
    return obj;
}

QString OAIAuditLogItemModel::getActionTarget() const {
    return m_action_target;
}
void OAIAuditLogItemModel::setActionTarget(const QString &action_target) {
    m_action_target = action_target;
    m_action_target_isSet = true;
}

bool OAIAuditLogItemModel::is_action_target_Set() const{
    return m_action_target_isSet;
}

bool OAIAuditLogItemModel::is_action_target_Valid() const{
    return m_action_target_isValid;
}

QDateTime OAIAuditLogItemModel::getAuditLogDateTime() const {
    return m_audit_log_date_time;
}
void OAIAuditLogItemModel::setAuditLogDateTime(const QDateTime &audit_log_date_time) {
    m_audit_log_date_time = audit_log_date_time;
    m_audit_log_date_time_isSet = true;
}

bool OAIAuditLogItemModel::is_audit_log_date_time_Set() const{
    return m_audit_log_date_time_isSet;
}

bool OAIAuditLogItemModel::is_audit_log_date_time_Valid() const{
    return m_audit_log_date_time_isValid;
}

qint64 OAIAuditLogItemModel::getAuditLogId() const {
    return m_audit_log_id;
}
void OAIAuditLogItemModel::setAuditLogId(const qint64 &audit_log_id) {
    m_audit_log_id = audit_log_id;
    m_audit_log_id_isSet = true;
}

bool OAIAuditLogItemModel::is_audit_log_id_Set() const{
    return m_audit_log_id_isSet;
}

bool OAIAuditLogItemModel::is_audit_log_id_Valid() const{
    return m_audit_log_id_isValid;
}

QString OAIAuditLogItemModel::getAuditLogType() const {
    return m_audit_log_type;
}
void OAIAuditLogItemModel::setAuditLogType(const QString &audit_log_type) {
    m_audit_log_type = audit_log_type;
    m_audit_log_type_isSet = true;
}

bool OAIAuditLogItemModel::is_audit_log_type_Set() const{
    return m_audit_log_type_isSet;
}

bool OAIAuditLogItemModel::is_audit_log_type_Valid() const{
    return m_audit_log_type_isValid;
}

OAIAuditLogType OAIAuditLogItemModel::getAuditLogTypeEnum() const {
    return m_audit_log_type_enum;
}
void OAIAuditLogItemModel::setAuditLogTypeEnum(const OAIAuditLogType &audit_log_type_enum) {
    m_audit_log_type_enum = audit_log_type_enum;
    m_audit_log_type_enum_isSet = true;
}

bool OAIAuditLogItemModel::is_audit_log_type_enum_Set() const{
    return m_audit_log_type_enum_isSet;
}

bool OAIAuditLogItemModel::is_audit_log_type_enum_Valid() const{
    return m_audit_log_type_enum_isValid;
}

QString OAIAuditLogItemModel::getDetails() const {
    return m_details;
}
void OAIAuditLogItemModel::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAuditLogItemModel::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAuditLogItemModel::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIAuditLogItemModel::getUserEmail() const {
    return m_user_email;
}
void OAIAuditLogItemModel::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIAuditLogItemModel::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIAuditLogItemModel::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIAuditLogItemModel::getUserName() const {
    return m_user_name;
}
void OAIAuditLogItemModel::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIAuditLogItemModel::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIAuditLogItemModel::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIAuditLogItemModel::getWhere() const {
    return m_where;
}
void OAIAuditLogItemModel::setWhere(const QString &where) {
    m_where = where;
    m_where_isSet = true;
}

bool OAIAuditLogItemModel::is_where_Set() const{
    return m_where_isSet;
}

bool OAIAuditLogItemModel::is_where_Valid() const{
    return m_where_isValid;
}

QString OAIAuditLogItemModel::getWhy() const {
    return m_why;
}
void OAIAuditLogItemModel::setWhy(const QString &why) {
    m_why = why;
    m_why_isSet = true;
}

bool OAIAuditLogItemModel::is_why_Set() const{
    return m_why_isSet;
}

bool OAIAuditLogItemModel::is_why_Valid() const{
    return m_why_isValid;
}

bool OAIAuditLogItemModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_log_type_enum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_where_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_why_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLogItemModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
