/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettingValueModel_haljson__embedded_setting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettingValueModel_haljson__embedded_setting::OAISettingValueModel_haljson__embedded_setting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettingValueModel_haljson__embedded_setting::OAISettingValueModel_haljson__embedded_setting() {
    this->initializeModel();
}

OAISettingValueModel_haljson__embedded_setting::~OAISettingValueModel_haljson__embedded_setting() {}

void OAISettingValueModel_haljson__embedded_setting::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_email_isSet = false;
    m_creator_email_isValid = false;

    m_creator_full_name_isSet = false;
    m_creator_full_name_isValid = false;

    m_hint_isSet = false;
    m_hint_isValid = false;

    m_is_watching_isSet = false;
    m_is_watching_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_setting_id_isSet = false;
    m_setting_id_isValid = false;

    m_setting_type_isSet = false;
    m_setting_type_isValid = false;
}

void OAISettingValueModel_haljson__embedded_setting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettingValueModel_haljson__embedded_setting::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_creator_email_isValid = ::OpenAPI::fromJsonValue(m_creator_email, json[QString("creatorEmail")]);
    m_creator_email_isSet = !json[QString("creatorEmail")].isNull() && m_creator_email_isValid;

    m_creator_full_name_isValid = ::OpenAPI::fromJsonValue(m_creator_full_name, json[QString("creatorFullName")]);
    m_creator_full_name_isSet = !json[QString("creatorFullName")].isNull() && m_creator_full_name_isValid;

    m_hint_isValid = ::OpenAPI::fromJsonValue(m_hint, json[QString("hint")]);
    m_hint_isSet = !json[QString("hint")].isNull() && m_hint_isValid;

    m_is_watching_isValid = ::OpenAPI::fromJsonValue(m_is_watching, json[QString("isWatching")]);
    m_is_watching_isSet = !json[QString("isWatching")].isNull() && m_is_watching_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_setting_id_isValid = ::OpenAPI::fromJsonValue(m_setting_id, json[QString("settingId")]);
    m_setting_id_isSet = !json[QString("settingId")].isNull() && m_setting_id_isValid;

    m_setting_type_isValid = ::OpenAPI::fromJsonValue(m_setting_type, json[QString("settingType")]);
    m_setting_type_isSet = !json[QString("settingType")].isNull() && m_setting_type_isValid;
}

QString OAISettingValueModel_haljson__embedded_setting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettingValueModel_haljson__embedded_setting::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_email_isSet) {
        obj.insert(QString("creatorEmail"), ::OpenAPI::toJsonValue(m_creator_email));
    }
    if (m_creator_full_name_isSet) {
        obj.insert(QString("creatorFullName"), ::OpenAPI::toJsonValue(m_creator_full_name));
    }
    if (m_hint_isSet) {
        obj.insert(QString("hint"), ::OpenAPI::toJsonValue(m_hint));
    }
    if (m_is_watching_isSet) {
        obj.insert(QString("isWatching"), ::OpenAPI::toJsonValue(m_is_watching));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_setting_id_isSet) {
        obj.insert(QString("settingId"), ::OpenAPI::toJsonValue(m_setting_id));
    }
    if (m_setting_type.isSet()) {
        obj.insert(QString("settingType"), ::OpenAPI::toJsonValue(m_setting_type));
    }
    return obj;
}

QDateTime OAISettingValueModel_haljson__embedded_setting::getCreatedAt() const {
    return m_created_at;
}
void OAISettingValueModel_haljson__embedded_setting::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISettingValueModel_haljson__embedded_setting::getCreatorEmail() const {
    return m_creator_email;
}
void OAISettingValueModel_haljson__embedded_setting::setCreatorEmail(const QString &creator_email) {
    m_creator_email = creator_email;
    m_creator_email_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_creator_email_Set() const{
    return m_creator_email_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_creator_email_Valid() const{
    return m_creator_email_isValid;
}

QString OAISettingValueModel_haljson__embedded_setting::getCreatorFullName() const {
    return m_creator_full_name;
}
void OAISettingValueModel_haljson__embedded_setting::setCreatorFullName(const QString &creator_full_name) {
    m_creator_full_name = creator_full_name;
    m_creator_full_name_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_creator_full_name_Set() const{
    return m_creator_full_name_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_creator_full_name_Valid() const{
    return m_creator_full_name_isValid;
}

QString OAISettingValueModel_haljson__embedded_setting::getHint() const {
    return m_hint;
}
void OAISettingValueModel_haljson__embedded_setting::setHint(const QString &hint) {
    m_hint = hint;
    m_hint_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_hint_Set() const{
    return m_hint_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_hint_Valid() const{
    return m_hint_isValid;
}

bool OAISettingValueModel_haljson__embedded_setting::isIsWatching() const {
    return m_is_watching;
}
void OAISettingValueModel_haljson__embedded_setting::setIsWatching(const bool &is_watching) {
    m_is_watching = is_watching;
    m_is_watching_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_is_watching_Set() const{
    return m_is_watching_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_is_watching_Valid() const{
    return m_is_watching_isValid;
}

QString OAISettingValueModel_haljson__embedded_setting::getKey() const {
    return m_key;
}
void OAISettingValueModel_haljson__embedded_setting::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_key_Set() const{
    return m_key_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISettingValueModel_haljson__embedded_setting::getName() const {
    return m_name;
}
void OAISettingValueModel_haljson__embedded_setting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_name_Set() const{
    return m_name_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISettingValueModel_haljson__embedded_setting::getOrder() const {
    return m_order;
}
void OAISettingValueModel_haljson__embedded_setting::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_order_Set() const{
    return m_order_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_order_Valid() const{
    return m_order_isValid;
}

qint32 OAISettingValueModel_haljson__embedded_setting::getSettingId() const {
    return m_setting_id;
}
void OAISettingValueModel_haljson__embedded_setting::setSettingId(const qint32 &setting_id) {
    m_setting_id = setting_id;
    m_setting_id_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_setting_id_Set() const{
    return m_setting_id_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_setting_id_Valid() const{
    return m_setting_id_isValid;
}

OAISettingType OAISettingValueModel_haljson__embedded_setting::getSettingType() const {
    return m_setting_type;
}
void OAISettingValueModel_haljson__embedded_setting::setSettingType(const OAISettingType &setting_type) {
    m_setting_type = setting_type;
    m_setting_type_isSet = true;
}

bool OAISettingValueModel_haljson__embedded_setting::is_setting_type_Set() const{
    return m_setting_type_isSet;
}

bool OAISettingValueModel_haljson__embedded_setting::is_setting_type_Valid() const{
    return m_setting_type_isValid;
}

bool OAISettingValueModel_haljson__embedded_setting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_watching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettingValueModel_haljson__embedded_setting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
