/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInviteMembersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInviteMembersRequest::OAIInviteMembersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInviteMembersRequest::OAIInviteMembersRequest() {
    this->initializeModel();
}

OAIInviteMembersRequest::~OAIInviteMembersRequest() {}

void OAIInviteMembersRequest::initializeModel() {

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_permission_group_id_isSet = false;
    m_permission_group_id_isValid = false;
}

void OAIInviteMembersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInviteMembersRequest::fromJsonObject(QJsonObject json) {

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_permission_group_id_isValid = ::OpenAPI::fromJsonValue(m_permission_group_id, json[QString("permissionGroupId")]);
    m_permission_group_id_isSet = !json[QString("permissionGroupId")].isNull() && m_permission_group_id_isValid;
}

QString OAIInviteMembersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInviteMembersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_permission_group_id_isSet) {
        obj.insert(QString("permissionGroupId"), ::OpenAPI::toJsonValue(m_permission_group_id));
    }
    return obj;
}

QList<QString> OAIInviteMembersRequest::getEmails() const {
    return m_emails;
}
void OAIInviteMembersRequest::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIInviteMembersRequest::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIInviteMembersRequest::is_emails_Valid() const{
    return m_emails_isValid;
}

qint64 OAIInviteMembersRequest::getPermissionGroupId() const {
    return m_permission_group_id;
}
void OAIInviteMembersRequest::setPermissionGroupId(const qint64 &permission_group_id) {
    m_permission_group_id = permission_group_id;
    m_permission_group_id_isSet = true;
}

bool OAIInviteMembersRequest::is_permission_group_id_Set() const{
    return m_permission_group_id_isSet;
}

bool OAIInviteMembersRequest::is_permission_group_id_Valid() const{
    return m_permission_group_id_isValid;
}

bool OAIInviteMembersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInviteMembersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_emails_isValid && m_permission_group_id_isValid && true;
}

} // namespace OpenAPI
