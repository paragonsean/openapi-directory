/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReferenceLines.h
 *
 * 
 */

#ifndef OAIReferenceLines_H
#define OAIReferenceLines_H

#include <QJsonObject>

#include "OAIReferenceLine.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReferenceLine;

class OAIReferenceLines : public OAIObject {
public:
    OAIReferenceLines();
    OAIReferenceLines(QString json);
    ~OAIReferenceLines() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFile() const;
    void setFile(const QString &file);
    bool is_file_Set() const;
    bool is_file_Valid() const;

    QString getFileUrl() const;
    void setFileUrl(const QString &file_url);
    bool is_file_url_Set() const;
    bool is_file_url_Valid() const;

    QList<OAIReferenceLine> getPostLines() const;
    void setPostLines(const QList<OAIReferenceLine> &post_lines);
    bool is_post_lines_Set() const;
    bool is_post_lines_Valid() const;

    QList<OAIReferenceLine> getPreLines() const;
    void setPreLines(const QList<OAIReferenceLine> &pre_lines);
    bool is_pre_lines_Set() const;
    bool is_pre_lines_Valid() const;

    OAIReferenceLine getReferenceLine() const;
    void setReferenceLine(const OAIReferenceLine &reference_line);
    bool is_reference_line_Set() const;
    bool is_reference_line_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file;
    bool m_file_isSet;
    bool m_file_isValid;

    QString m_file_url;
    bool m_file_url_isSet;
    bool m_file_url_isValid;

    QList<OAIReferenceLine> m_post_lines;
    bool m_post_lines_isSet;
    bool m_post_lines_isValid;

    QList<OAIReferenceLine> m_pre_lines;
    bool m_pre_lines_isSet;
    bool m_pre_lines_isValid;

    OAIReferenceLine m_reference_line;
    bool m_reference_line_isSet;
    bool m_reference_line_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReferenceLines)

#endif // OAIReferenceLines_H
