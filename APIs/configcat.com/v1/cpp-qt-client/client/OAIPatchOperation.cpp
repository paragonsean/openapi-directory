/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchOperation::OAIPatchOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchOperation::OAIPatchOperation() {
    this->initializeModel();
}

OAIPatchOperation::~OAIPatchOperation() {}

void OAIPatchOperation::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPatchOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchOperation::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPatchOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_op.isSet()) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIJsonPointer OAIPatchOperation::getFrom() const {
    return m_from;
}
void OAIPatchOperation::setFrom(const OAIJsonPointer &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIPatchOperation::is_from_Set() const{
    return m_from_isSet;
}

bool OAIPatchOperation::is_from_Valid() const{
    return m_from_isValid;
}

OAIOperationType OAIPatchOperation::getOp() const {
    return m_op;
}
void OAIPatchOperation::setOp(const OAIOperationType &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIPatchOperation::is_op_Set() const{
    return m_op_isSet;
}

bool OAIPatchOperation::is_op_Valid() const{
    return m_op_isValid;
}

OAIJsonPointer OAIPatchOperation::getPath() const {
    return m_path;
}
void OAIPatchOperation::setPath(const OAIJsonPointer &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPatchOperation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPatchOperation::is_path_Valid() const{
    return m_path_isValid;
}

OAIJsonNode OAIPatchOperation::getValue() const {
    return m_value;
}
void OAIPatchOperation::setValue(const OAIJsonNode &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPatchOperation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPatchOperation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPatchOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_op.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
