/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentComparator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentComparator::OAISegmentComparator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentComparator::OAISegmentComparator() {
    this->initializeModel();
}

OAISegmentComparator::~OAISegmentComparator() {}

void OAISegmentComparator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISegmentComparator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISegmentComparator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("isIn", Qt::CaseInsensitive) == 0) {
        m_value = eOAISegmentComparator::ISIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("isNotIn", Qt::CaseInsensitive) == 0) {
        m_value = eOAISegmentComparator::ISNOTIN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISegmentComparator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISegmentComparator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISegmentComparator::ISIN:
            val = "isIn";
            break;
        case eOAISegmentComparator::ISNOTIN:
            val = "isNotIn";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISegmentComparator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISegmentComparator::eOAISegmentComparator OAISegmentComparator::getValue() const {
    return m_value;
}

void OAISegmentComparator::setValue(const OAISegmentComparator::eOAISegmentComparator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISegmentComparator::isSet() const {
    
    return m_value_isSet;
}

bool OAISegmentComparator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
