/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettingValueModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettingValueModel::OAISettingValueModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettingValueModel::OAISettingValueModel() {
    this->initializeModel();
}

OAISettingValueModel::~OAISettingValueModel() {}

void OAISettingValueModel::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_integration_links_isSet = false;
    m_integration_links_isValid = false;

    m_last_updater_user_email_isSet = false;
    m_last_updater_user_email_isValid = false;

    m_last_updater_user_full_name_isSet = false;
    m_last_updater_user_full_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_rollout_percentage_items_isSet = false;
    m_rollout_percentage_items_isValid = false;

    m_rollout_rules_isSet = false;
    m_rollout_rules_isValid = false;

    m_setting_isSet = false;
    m_setting_isValid = false;

    m_setting_tags_isSet = false;
    m_setting_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISettingValueModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettingValueModel::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_integration_links_isValid = ::OpenAPI::fromJsonValue(m_integration_links, json[QString("integrationLinks")]);
    m_integration_links_isSet = !json[QString("integrationLinks")].isNull() && m_integration_links_isValid;

    m_last_updater_user_email_isValid = ::OpenAPI::fromJsonValue(m_last_updater_user_email, json[QString("lastUpdaterUserEmail")]);
    m_last_updater_user_email_isSet = !json[QString("lastUpdaterUserEmail")].isNull() && m_last_updater_user_email_isValid;

    m_last_updater_user_full_name_isValid = ::OpenAPI::fromJsonValue(m_last_updater_user_full_name, json[QString("lastUpdaterUserFullName")]);
    m_last_updater_user_full_name_isSet = !json[QString("lastUpdaterUserFullName")].isNull() && m_last_updater_user_full_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_rollout_percentage_items_isValid = ::OpenAPI::fromJsonValue(m_rollout_percentage_items, json[QString("rolloutPercentageItems")]);
    m_rollout_percentage_items_isSet = !json[QString("rolloutPercentageItems")].isNull() && m_rollout_percentage_items_isValid;

    m_rollout_rules_isValid = ::OpenAPI::fromJsonValue(m_rollout_rules, json[QString("rolloutRules")]);
    m_rollout_rules_isSet = !json[QString("rolloutRules")].isNull() && m_rollout_rules_isValid;

    m_setting_isValid = ::OpenAPI::fromJsonValue(m_setting, json[QString("setting")]);
    m_setting_isSet = !json[QString("setting")].isNull() && m_setting_isValid;

    m_setting_tags_isValid = ::OpenAPI::fromJsonValue(m_setting_tags, json[QString("settingTags")]);
    m_setting_tags_isSet = !json[QString("settingTags")].isNull() && m_setting_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISettingValueModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettingValueModel::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_integration_links.size() > 0) {
        obj.insert(QString("integrationLinks"), ::OpenAPI::toJsonValue(m_integration_links));
    }
    if (m_last_updater_user_email_isSet) {
        obj.insert(QString("lastUpdaterUserEmail"), ::OpenAPI::toJsonValue(m_last_updater_user_email));
    }
    if (m_last_updater_user_full_name_isSet) {
        obj.insert(QString("lastUpdaterUserFullName"), ::OpenAPI::toJsonValue(m_last_updater_user_full_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_rollout_percentage_items.size() > 0) {
        obj.insert(QString("rolloutPercentageItems"), ::OpenAPI::toJsonValue(m_rollout_percentage_items));
    }
    if (m_rollout_rules.size() > 0) {
        obj.insert(QString("rolloutRules"), ::OpenAPI::toJsonValue(m_rollout_rules));
    }
    if (m_setting.isSet()) {
        obj.insert(QString("setting"), ::OpenAPI::toJsonValue(m_setting));
    }
    if (m_setting_tags.size() > 0) {
        obj.insert(QString("settingTags"), ::OpenAPI::toJsonValue(m_setting_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIConfigModel OAISettingValueModel::getConfig() const {
    return m_config;
}
void OAISettingValueModel::setConfig(const OAIConfigModel &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAISettingValueModel::is_config_Set() const{
    return m_config_isSet;
}

bool OAISettingValueModel::is_config_Valid() const{
    return m_config_isValid;
}

OAIEnvironmentModel OAISettingValueModel::getEnvironment() const {
    return m_environment;
}
void OAISettingValueModel::setEnvironment(const OAIEnvironmentModel &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAISettingValueModel::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAISettingValueModel::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAIIntegrationLinkModel> OAISettingValueModel::getIntegrationLinks() const {
    return m_integration_links;
}
void OAISettingValueModel::setIntegrationLinks(const QList<OAIIntegrationLinkModel> &integration_links) {
    m_integration_links = integration_links;
    m_integration_links_isSet = true;
}

bool OAISettingValueModel::is_integration_links_Set() const{
    return m_integration_links_isSet;
}

bool OAISettingValueModel::is_integration_links_Valid() const{
    return m_integration_links_isValid;
}

QString OAISettingValueModel::getLastUpdaterUserEmail() const {
    return m_last_updater_user_email;
}
void OAISettingValueModel::setLastUpdaterUserEmail(const QString &last_updater_user_email) {
    m_last_updater_user_email = last_updater_user_email;
    m_last_updater_user_email_isSet = true;
}

bool OAISettingValueModel::is_last_updater_user_email_Set() const{
    return m_last_updater_user_email_isSet;
}

bool OAISettingValueModel::is_last_updater_user_email_Valid() const{
    return m_last_updater_user_email_isValid;
}

QString OAISettingValueModel::getLastUpdaterUserFullName() const {
    return m_last_updater_user_full_name;
}
void OAISettingValueModel::setLastUpdaterUserFullName(const QString &last_updater_user_full_name) {
    m_last_updater_user_full_name = last_updater_user_full_name;
    m_last_updater_user_full_name_isSet = true;
}

bool OAISettingValueModel::is_last_updater_user_full_name_Set() const{
    return m_last_updater_user_full_name_isSet;
}

bool OAISettingValueModel::is_last_updater_user_full_name_Valid() const{
    return m_last_updater_user_full_name_isValid;
}

bool OAISettingValueModel::isReadOnly() const {
    return m_read_only;
}
void OAISettingValueModel::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAISettingValueModel::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAISettingValueModel::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QList<OAIRolloutPercentageItemModel> OAISettingValueModel::getRolloutPercentageItems() const {
    return m_rollout_percentage_items;
}
void OAISettingValueModel::setRolloutPercentageItems(const QList<OAIRolloutPercentageItemModel> &rollout_percentage_items) {
    m_rollout_percentage_items = rollout_percentage_items;
    m_rollout_percentage_items_isSet = true;
}

bool OAISettingValueModel::is_rollout_percentage_items_Set() const{
    return m_rollout_percentage_items_isSet;
}

bool OAISettingValueModel::is_rollout_percentage_items_Valid() const{
    return m_rollout_percentage_items_isValid;
}

QList<OAIRolloutRuleModel> OAISettingValueModel::getRolloutRules() const {
    return m_rollout_rules;
}
void OAISettingValueModel::setRolloutRules(const QList<OAIRolloutRuleModel> &rollout_rules) {
    m_rollout_rules = rollout_rules;
    m_rollout_rules_isSet = true;
}

bool OAISettingValueModel::is_rollout_rules_Set() const{
    return m_rollout_rules_isSet;
}

bool OAISettingValueModel::is_rollout_rules_Valid() const{
    return m_rollout_rules_isValid;
}

OAISettingDataModel OAISettingValueModel::getSetting() const {
    return m_setting;
}
void OAISettingValueModel::setSetting(const OAISettingDataModel &setting) {
    m_setting = setting;
    m_setting_isSet = true;
}

bool OAISettingValueModel::is_setting_Set() const{
    return m_setting_isSet;
}

bool OAISettingValueModel::is_setting_Valid() const{
    return m_setting_isValid;
}

QList<OAISettingTagModel> OAISettingValueModel::getSettingTags() const {
    return m_setting_tags;
}
void OAISettingValueModel::setSettingTags(const QList<OAISettingTagModel> &setting_tags) {
    m_setting_tags = setting_tags;
    m_setting_tags_isSet = true;
}

bool OAISettingValueModel::is_setting_tags_Set() const{
    return m_setting_tags_isSet;
}

bool OAISettingValueModel::is_setting_tags_Valid() const{
    return m_setting_tags_isValid;
}

QDateTime OAISettingValueModel::getUpdatedAt() const {
    return m_updated_at;
}
void OAISettingValueModel::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISettingValueModel::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISettingValueModel::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QJsonValue OAISettingValueModel::getValue() const {
    return m_value;
}
void OAISettingValueModel::setValue(const QJsonValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISettingValueModel::is_value_Set() const{
    return m_value_isSet;
}

bool OAISettingValueModel::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISettingValueModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_user_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_percentage_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettingValueModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
