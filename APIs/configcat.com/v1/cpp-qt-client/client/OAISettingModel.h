/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISettingModel.h
 *
 * 
 */

#ifndef OAISettingModel_H
#define OAISettingModel_H

#include <QJsonObject>

#include "OAISettingType.h"
#include "OAITagModel.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITagModel;

class OAISettingModel : public OAIObject {
public:
    OAISettingModel();
    OAISettingModel(QString json);
    ~OAISettingModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConfigId() const;
    void setConfigId(const QString &config_id);
    bool is_config_id_Set() const;
    bool is_config_id_Valid() const;

    QString getConfigName() const;
    void setConfigName(const QString &config_name);
    bool is_config_name_Set() const;
    bool is_config_name_Valid() const;

    QString getHint() const;
    void setHint(const QString &hint);
    bool is_hint_Set() const;
    bool is_hint_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOrder() const;
    void setOrder(const qint32 &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    qint32 getSettingId() const;
    void setSettingId(const qint32 &setting_id);
    bool is_setting_id_Set() const;
    bool is_setting_id_Valid() const;

    OAISettingType getSettingType() const;
    void setSettingType(const OAISettingType &setting_type);
    bool is_setting_type_Set() const;
    bool is_setting_type_Valid() const;

    QList<OAITagModel> getTags() const;
    void setTags(const QList<OAITagModel> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_config_id;
    bool m_config_id_isSet;
    bool m_config_id_isValid;

    QString m_config_name;
    bool m_config_name_isSet;
    bool m_config_name_isValid;

    QString m_hint;
    bool m_hint_isSet;
    bool m_hint_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    qint32 m_setting_id;
    bool m_setting_id_isSet;
    bool m_setting_id_isValid;

    OAISettingType m_setting_type;
    bool m_setting_type_isSet;
    bool m_setting_type_isValid;

    QList<OAITagModel> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISettingModel)

#endif // OAISettingModel_H
