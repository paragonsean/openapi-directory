/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeReferenceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeReferenceRequest::OAICodeReferenceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeReferenceRequest::OAICodeReferenceRequest() {
    this->initializeModel();
}

OAICodeReferenceRequest::~OAICodeReferenceRequest() {}

void OAICodeReferenceRequest::initializeModel() {

    m_active_branches_isSet = false;
    m_active_branches_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_commit_hash_isSet = false;
    m_commit_hash_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_flag_references_isSet = false;
    m_flag_references_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_uploader_isSet = false;
    m_uploader_isValid = false;
}

void OAICodeReferenceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeReferenceRequest::fromJsonObject(QJsonObject json) {

    m_active_branches_isValid = ::OpenAPI::fromJsonValue(m_active_branches, json[QString("activeBranches")]);
    m_active_branches_isSet = !json[QString("activeBranches")].isNull() && m_active_branches_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_commit_hash_isValid = ::OpenAPI::fromJsonValue(m_commit_hash, json[QString("commitHash")]);
    m_commit_hash_isSet = !json[QString("commitHash")].isNull() && m_commit_hash_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commitUrl")]);
    m_commit_url_isSet = !json[QString("commitUrl")].isNull() && m_commit_url_isValid;

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("configId")]);
    m_config_id_isSet = !json[QString("configId")].isNull() && m_config_id_isValid;

    m_flag_references_isValid = ::OpenAPI::fromJsonValue(m_flag_references, json[QString("flagReferences")]);
    m_flag_references_isSet = !json[QString("flagReferences")].isNull() && m_flag_references_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_uploader_isValid = ::OpenAPI::fromJsonValue(m_uploader, json[QString("uploader")]);
    m_uploader_isSet = !json[QString("uploader")].isNull() && m_uploader_isValid;
}

QString OAICodeReferenceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeReferenceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_active_branches.size() > 0) {
        obj.insert(QString("activeBranches"), ::OpenAPI::toJsonValue(m_active_branches));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_commit_hash_isSet) {
        obj.insert(QString("commitHash"), ::OpenAPI::toJsonValue(m_commit_hash));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commitUrl"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_config_id_isSet) {
        obj.insert(QString("configId"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_flag_references.size() > 0) {
        obj.insert(QString("flagReferences"), ::OpenAPI::toJsonValue(m_flag_references));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_uploader_isSet) {
        obj.insert(QString("uploader"), ::OpenAPI::toJsonValue(m_uploader));
    }
    return obj;
}

QList<QString> OAICodeReferenceRequest::getActiveBranches() const {
    return m_active_branches;
}
void OAICodeReferenceRequest::setActiveBranches(const QList<QString> &active_branches) {
    m_active_branches = active_branches;
    m_active_branches_isSet = true;
}

bool OAICodeReferenceRequest::is_active_branches_Set() const{
    return m_active_branches_isSet;
}

bool OAICodeReferenceRequest::is_active_branches_Valid() const{
    return m_active_branches_isValid;
}

QString OAICodeReferenceRequest::getBranch() const {
    return m_branch;
}
void OAICodeReferenceRequest::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAICodeReferenceRequest::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAICodeReferenceRequest::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAICodeReferenceRequest::getCommitHash() const {
    return m_commit_hash;
}
void OAICodeReferenceRequest::setCommitHash(const QString &commit_hash) {
    m_commit_hash = commit_hash;
    m_commit_hash_isSet = true;
}

bool OAICodeReferenceRequest::is_commit_hash_Set() const{
    return m_commit_hash_isSet;
}

bool OAICodeReferenceRequest::is_commit_hash_Valid() const{
    return m_commit_hash_isValid;
}

QString OAICodeReferenceRequest::getCommitUrl() const {
    return m_commit_url;
}
void OAICodeReferenceRequest::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAICodeReferenceRequest::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAICodeReferenceRequest::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

QString OAICodeReferenceRequest::getConfigId() const {
    return m_config_id;
}
void OAICodeReferenceRequest::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAICodeReferenceRequest::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAICodeReferenceRequest::is_config_id_Valid() const{
    return m_config_id_isValid;
}

QList<OAIFlagReference> OAICodeReferenceRequest::getFlagReferences() const {
    return m_flag_references;
}
void OAICodeReferenceRequest::setFlagReferences(const QList<OAIFlagReference> &flag_references) {
    m_flag_references = flag_references;
    m_flag_references_isSet = true;
}

bool OAICodeReferenceRequest::is_flag_references_Set() const{
    return m_flag_references_isSet;
}

bool OAICodeReferenceRequest::is_flag_references_Valid() const{
    return m_flag_references_isValid;
}

QString OAICodeReferenceRequest::getRepository() const {
    return m_repository;
}
void OAICodeReferenceRequest::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICodeReferenceRequest::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICodeReferenceRequest::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAICodeReferenceRequest::getUploader() const {
    return m_uploader;
}
void OAICodeReferenceRequest::setUploader(const QString &uploader) {
    m_uploader = uploader;
    m_uploader_isSet = true;
}

bool OAICodeReferenceRequest::is_uploader_Set() const{
    return m_uploader_isSet;
}

bool OAICodeReferenceRequest::is_uploader_Valid() const{
    return m_uploader_isValid;
}

bool OAICodeReferenceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploader_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeReferenceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_branch_isValid && m_config_id_isValid && m_repository_isValid && true;
}

} // namespace OpenAPI
