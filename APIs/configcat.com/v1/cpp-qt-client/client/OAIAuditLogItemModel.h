/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditLogItemModel.h
 *
 * 
 */

#ifndef OAIAuditLogItemModel_H
#define OAIAuditLogItemModel_H

#include <QJsonObject>

#include "OAIAuditLogType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAuditLogItemModel : public OAIObject {
public:
    OAIAuditLogItemModel();
    OAIAuditLogItemModel(QString json);
    ~OAIAuditLogItemModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionTarget() const;
    void setActionTarget(const QString &action_target);
    bool is_action_target_Set() const;
    bool is_action_target_Valid() const;

    QDateTime getAuditLogDateTime() const;
    void setAuditLogDateTime(const QDateTime &audit_log_date_time);
    bool is_audit_log_date_time_Set() const;
    bool is_audit_log_date_time_Valid() const;

    qint64 getAuditLogId() const;
    void setAuditLogId(const qint64 &audit_log_id);
    bool is_audit_log_id_Set() const;
    bool is_audit_log_id_Valid() const;

    QString getAuditLogType() const;
    void setAuditLogType(const QString &audit_log_type);
    bool is_audit_log_type_Set() const;
    bool is_audit_log_type_Valid() const;

    OAIAuditLogType getAuditLogTypeEnum() const;
    void setAuditLogTypeEnum(const OAIAuditLogType &audit_log_type_enum);
    bool is_audit_log_type_enum_Set() const;
    bool is_audit_log_type_enum_Valid() const;

    QString getDetails() const;
    void setDetails(const QString &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getUserEmail() const;
    void setUserEmail(const QString &user_email);
    bool is_user_email_Set() const;
    bool is_user_email_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getWhere() const;
    void setWhere(const QString &where);
    bool is_where_Set() const;
    bool is_where_Valid() const;

    QString getWhy() const;
    void setWhy(const QString &why);
    bool is_why_Set() const;
    bool is_why_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_target;
    bool m_action_target_isSet;
    bool m_action_target_isValid;

    QDateTime m_audit_log_date_time;
    bool m_audit_log_date_time_isSet;
    bool m_audit_log_date_time_isValid;

    qint64 m_audit_log_id;
    bool m_audit_log_id_isSet;
    bool m_audit_log_id_isValid;

    QString m_audit_log_type;
    bool m_audit_log_type_isSet;
    bool m_audit_log_type_isValid;

    OAIAuditLogType m_audit_log_type_enum;
    bool m_audit_log_type_enum_isSet;
    bool m_audit_log_type_enum_isValid;

    QString m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_user_email;
    bool m_user_email_isSet;
    bool m_user_email_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString m_where;
    bool m_where_isSet;
    bool m_where_isValid;

    QString m_why;
    bool m_why_isSet;
    bool m_why_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditLogItemModel)

#endif // OAIAuditLogItemModel_H
