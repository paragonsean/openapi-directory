/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigModel_haljson__embedded_product__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigModel_haljson__embedded_product__links::OAIConfigModel_haljson__embedded_product__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigModel_haljson__embedded_product__links::OAIConfigModel_haljson__embedded_product__links() {
    this->initializeModel();
}

OAIConfigModel_haljson__embedded_product__links::~OAIConfigModel_haljson__embedded_product__links() {}

void OAIConfigModel_haljson__embedded_product__links::initializeModel() {

    m_configs_isSet = false;
    m_configs_isValid = false;

    m_environments_isSet = false;
    m_environments_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_permission_groups_isSet = false;
    m_permission_groups_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIConfigModel_haljson__embedded_product__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigModel_haljson__embedded_product__links::fromJsonObject(QJsonObject json) {

    m_configs_isValid = ::OpenAPI::fromJsonValue(m_configs, json[QString("configs")]);
    m_configs_isSet = !json[QString("configs")].isNull() && m_configs_isValid;

    m_environments_isValid = ::OpenAPI::fromJsonValue(m_environments, json[QString("environments")]);
    m_environments_isSet = !json[QString("environments")].isNull() && m_environments_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_permission_groups_isValid = ::OpenAPI::fromJsonValue(m_permission_groups, json[QString("permission-groups")]);
    m_permission_groups_isSet = !json[QString("permission-groups")].isNull() && m_permission_groups_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigModel_haljson__embedded_product__links::asJsonObject() const {
    QJsonObject obj;
    if (m_configs_isSet) {
        obj.insert(QString("configs"), ::OpenAPI::toJsonValue(m_configs));
    }
    if (m_environments_isSet) {
        obj.insert(QString("environments"), ::OpenAPI::toJsonValue(m_environments));
    }
    if (m_members_isSet) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_permission_groups_isSet) {
        obj.insert(QString("permission-groups"), ::OpenAPI::toJsonValue(m_permission_groups));
    }
    if (m_segments_isSet) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIConfigModel_haljson__embedded_product__links::getConfigs() const {
    return m_configs;
}
void OAIConfigModel_haljson__embedded_product__links::setConfigs(const QString &configs) {
    m_configs = configs;
    m_configs_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_configs_Set() const{
    return m_configs_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_configs_Valid() const{
    return m_configs_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::getEnvironments() const {
    return m_environments;
}
void OAIConfigModel_haljson__embedded_product__links::setEnvironments(const QString &environments) {
    m_environments = environments;
    m_environments_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_environments_Set() const{
    return m_environments_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_environments_Valid() const{
    return m_environments_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::getMembers() const {
    return m_members;
}
void OAIConfigModel_haljson__embedded_product__links::setMembers(const QString &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_members_Set() const{
    return m_members_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::getPermissionGroups() const {
    return m_permission_groups;
}
void OAIConfigModel_haljson__embedded_product__links::setPermissionGroups(const QString &permission_groups) {
    m_permission_groups = permission_groups;
    m_permission_groups_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_permission_groups_Set() const{
    return m_permission_groups_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_permission_groups_Valid() const{
    return m_permission_groups_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::getSegments() const {
    return m_segments;
}
void OAIConfigModel_haljson__embedded_product__links::setSegments(const QString &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_segments_Valid() const{
    return m_segments_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::getSelf() const {
    return m_self;
}
void OAIConfigModel_haljson__embedded_product__links::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIConfigModel_haljson__embedded_product__links::getTags() const {
    return m_tags;
}
void OAIConfigModel_haljson__embedded_product__links::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConfigModel_haljson__embedded_product__links::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConfigModel_haljson__embedded_product__links::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIConfigModel_haljson__embedded_product__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigModel_haljson__embedded_product__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
