/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLines.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLines::OAIReferenceLines(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLines::OAIReferenceLines() {
    this->initializeModel();
}

OAIReferenceLines::~OAIReferenceLines() {}

void OAIReferenceLines::initializeModel() {

    m_file_isSet = false;
    m_file_isValid = false;

    m_file_url_isSet = false;
    m_file_url_isValid = false;

    m_post_lines_isSet = false;
    m_post_lines_isValid = false;

    m_pre_lines_isSet = false;
    m_pre_lines_isValid = false;

    m_reference_line_isSet = false;
    m_reference_line_isValid = false;
}

void OAIReferenceLines::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLines::fromJsonObject(QJsonObject json) {

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_file_url_isValid = ::OpenAPI::fromJsonValue(m_file_url, json[QString("fileUrl")]);
    m_file_url_isSet = !json[QString("fileUrl")].isNull() && m_file_url_isValid;

    m_post_lines_isValid = ::OpenAPI::fromJsonValue(m_post_lines, json[QString("postLines")]);
    m_post_lines_isSet = !json[QString("postLines")].isNull() && m_post_lines_isValid;

    m_pre_lines_isValid = ::OpenAPI::fromJsonValue(m_pre_lines, json[QString("preLines")]);
    m_pre_lines_isSet = !json[QString("preLines")].isNull() && m_pre_lines_isValid;

    m_reference_line_isValid = ::OpenAPI::fromJsonValue(m_reference_line, json[QString("referenceLine")]);
    m_reference_line_isSet = !json[QString("referenceLine")].isNull() && m_reference_line_isValid;
}

QString OAIReferenceLines::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLines::asJsonObject() const {
    QJsonObject obj;
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_file_url_isSet) {
        obj.insert(QString("fileUrl"), ::OpenAPI::toJsonValue(m_file_url));
    }
    if (m_post_lines.size() > 0) {
        obj.insert(QString("postLines"), ::OpenAPI::toJsonValue(m_post_lines));
    }
    if (m_pre_lines.size() > 0) {
        obj.insert(QString("preLines"), ::OpenAPI::toJsonValue(m_pre_lines));
    }
    if (m_reference_line.isSet()) {
        obj.insert(QString("referenceLine"), ::OpenAPI::toJsonValue(m_reference_line));
    }
    return obj;
}

QString OAIReferenceLines::getFile() const {
    return m_file;
}
void OAIReferenceLines::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIReferenceLines::is_file_Set() const{
    return m_file_isSet;
}

bool OAIReferenceLines::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIReferenceLines::getFileUrl() const {
    return m_file_url;
}
void OAIReferenceLines::setFileUrl(const QString &file_url) {
    m_file_url = file_url;
    m_file_url_isSet = true;
}

bool OAIReferenceLines::is_file_url_Set() const{
    return m_file_url_isSet;
}

bool OAIReferenceLines::is_file_url_Valid() const{
    return m_file_url_isValid;
}

QList<OAIReferenceLine> OAIReferenceLines::getPostLines() const {
    return m_post_lines;
}
void OAIReferenceLines::setPostLines(const QList<OAIReferenceLine> &post_lines) {
    m_post_lines = post_lines;
    m_post_lines_isSet = true;
}

bool OAIReferenceLines::is_post_lines_Set() const{
    return m_post_lines_isSet;
}

bool OAIReferenceLines::is_post_lines_Valid() const{
    return m_post_lines_isValid;
}

QList<OAIReferenceLine> OAIReferenceLines::getPreLines() const {
    return m_pre_lines;
}
void OAIReferenceLines::setPreLines(const QList<OAIReferenceLine> &pre_lines) {
    m_pre_lines = pre_lines;
    m_pre_lines_isSet = true;
}

bool OAIReferenceLines::is_pre_lines_Set() const{
    return m_pre_lines_isSet;
}

bool OAIReferenceLines::is_pre_lines_Valid() const{
    return m_pre_lines_isValid;
}

OAIReferenceLine OAIReferenceLines::getReferenceLine() const {
    return m_reference_line;
}
void OAIReferenceLines::setReferenceLine(const OAIReferenceLine &reference_line) {
    m_reference_line = reference_line;
    m_reference_line_isSet = true;
}

bool OAIReferenceLines::is_reference_line_Set() const{
    return m_reference_line_isSet;
}

bool OAIReferenceLines::is_reference_line_Valid() const{
    return m_reference_line_isValid;
}

bool OAIReferenceLines::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_line.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLines::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_isValid && m_reference_line_isValid && true;
}

} // namespace OpenAPI
