/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentsApi_H
#define OAI_OAIEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateEnvironmentModel.h"
#include "OAIEnvironmentModel.h"
#include "OAIEnvironmentModel_haljson.h"
#include "OAIUpdateEnvironmentModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentsApi(const int timeOut = 0);
    ~OAIEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  oai_create_environment_model OAICreateEnvironmentModel [required]
    */
    virtual void createEnvironment(const QString &product_id, const OAICreateEnvironmentModel &oai_create_environment_model);

    /**
    * @param[in]  environment_id QString [required]
    */
    virtual void deleteEnvironment(const QString &environment_id);

    /**
    * @param[in]  environment_id QString [required]
    */
    virtual void getEnvironment(const QString &environment_id);

    /**
    * @param[in]  product_id QString [required]
    */
    virtual void getEnvironments(const QString &product_id);

    /**
    * @param[in]  environment_id QString [required]
    * @param[in]  oai_update_environment_model OAIUpdateEnvironmentModel [required]
    */
    virtual void updateEnvironment(const QString &environment_id, const OAIUpdateEnvironmentModel &oai_update_environment_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEnvironmentCallback(OAIHttpRequestWorker *worker);
    void deleteEnvironmentCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void updateEnvironmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEnvironmentSignal(OAIEnvironmentModel_haljson summary);
    void deleteEnvironmentSignal();
    void getEnvironmentSignal(OAIEnvironmentModel_haljson summary);
    void getEnvironmentsSignal(QList<OAIEnvironmentModel_haljson> summary);
    void updateEnvironmentSignal(OAIEnvironmentModel_haljson summary);


    void createEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentModel_haljson summary);
    void deleteEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void getEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentModel_haljson summary);
    void getEnvironmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnvironmentModel_haljson> summary);
    void updateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentModel_haljson summary);

    Q_DECL_DEPRECATED_X("Use createEnvironmentSignalError() instead")
    void createEnvironmentSignalE(OAIEnvironmentModel_haljson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEnvironmentSignalError(OAIEnvironmentModel_haljson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvironmentSignalError() instead")
    void deleteEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentSignalError() instead")
    void getEnvironmentSignalE(OAIEnvironmentModel_haljson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentSignalError(OAIEnvironmentModel_haljson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentsSignalError() instead")
    void getEnvironmentsSignalE(QList<OAIEnvironmentModel_haljson> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentsSignalError(QList<OAIEnvironmentModel_haljson> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvironmentSignalError() instead")
    void updateEnvironmentSignalE(OAIEnvironmentModel_haljson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentSignalError(OAIEnvironmentModel_haljson summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEnvironmentSignalErrorFull() instead")
    void createEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvironmentSignalErrorFull() instead")
    void deleteEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentSignalErrorFull() instead")
    void getEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentsSignalErrorFull() instead")
    void getEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvironmentSignalErrorFull() instead")
    void updateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
