/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigSettingValuesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigSettingValuesModel::OAIConfigSettingValuesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigSettingValuesModel::OAIConfigSettingValuesModel() {
    this->initializeModel();
}

OAIConfigSettingValuesModel::~OAIConfigSettingValuesModel() {}

void OAIConfigSettingValuesModel::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_setting_values_isSet = false;
    m_setting_values_isValid = false;
}

void OAIConfigSettingValuesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigSettingValuesModel::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_setting_values_isValid = ::OpenAPI::fromJsonValue(m_setting_values, json[QString("settingValues")]);
    m_setting_values_isSet = !json[QString("settingValues")].isNull() && m_setting_values_isValid;
}

QString OAIConfigSettingValuesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigSettingValuesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_setting_values.size() > 0) {
        obj.insert(QString("settingValues"), ::OpenAPI::toJsonValue(m_setting_values));
    }
    return obj;
}

OAIConfigModel OAIConfigSettingValuesModel::getConfig() const {
    return m_config;
}
void OAIConfigSettingValuesModel::setConfig(const OAIConfigModel &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIConfigSettingValuesModel::is_config_Set() const{
    return m_config_isSet;
}

bool OAIConfigSettingValuesModel::is_config_Valid() const{
    return m_config_isValid;
}

OAIEnvironmentModel OAIConfigSettingValuesModel::getEnvironment() const {
    return m_environment;
}
void OAIConfigSettingValuesModel::setEnvironment(const OAIEnvironmentModel &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIConfigSettingValuesModel::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIConfigSettingValuesModel::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAIConfigSettingValuesModel::isReadOnly() const {
    return m_read_only;
}
void OAIConfigSettingValuesModel::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIConfigSettingValuesModel::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIConfigSettingValuesModel::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QList<OAIConfigSettingValueModel> OAIConfigSettingValuesModel::getSettingValues() const {
    return m_setting_values;
}
void OAIConfigSettingValuesModel::setSettingValues(const QList<OAIConfigSettingValueModel> &setting_values) {
    m_setting_values = setting_values;
    m_setting_values_isSet = true;
}

bool OAIConfigSettingValuesModel::is_setting_values_Set() const{
    return m_setting_values_isSet;
}

bool OAIConfigSettingValuesModel::is_setting_values_Valid() const{
    return m_setting_values_isValid;
}

bool OAIConfigSettingValuesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigSettingValuesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
