/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionGroupModel_haljson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionGroupModel_haljson::OAIPermissionGroupModel_haljson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionGroupModel_haljson::OAIPermissionGroupModel_haljson() {
    this->initializeModel();
}

OAIPermissionGroupModel_haljson::~OAIPermissionGroupModel_haljson() {}

void OAIPermissionGroupModel_haljson::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_can_create_or_update_config_isSet = false;
    m_can_create_or_update_config_isValid = false;

    m_can_create_or_update_environment_isSet = false;
    m_can_create_or_update_environment_isValid = false;

    m_can_create_or_update_segments_isSet = false;
    m_can_create_or_update_segments_isValid = false;

    m_can_create_or_update_setting_isSet = false;
    m_can_create_or_update_setting_isValid = false;

    m_can_create_or_update_tag_isSet = false;
    m_can_create_or_update_tag_isValid = false;

    m_can_delete_config_isSet = false;
    m_can_delete_config_isValid = false;

    m_can_delete_environment_isSet = false;
    m_can_delete_environment_isValid = false;

    m_can_delete_segments_isSet = false;
    m_can_delete_segments_isValid = false;

    m_can_delete_setting_isSet = false;
    m_can_delete_setting_isValid = false;

    m_can_delete_tag_isSet = false;
    m_can_delete_tag_isValid = false;

    m_can_manage_integrations_isSet = false;
    m_can_manage_integrations_isValid = false;

    m_can_manage_members_isSet = false;
    m_can_manage_members_isValid = false;

    m_can_manage_product_preferences_isSet = false;
    m_can_manage_product_preferences_isValid = false;

    m_can_manage_webhook_isSet = false;
    m_can_manage_webhook_isValid = false;

    m_can_rotate_sdk_key_isSet = false;
    m_can_rotate_sdk_key_isValid = false;

    m_can_tag_setting_isSet = false;
    m_can_tag_setting_isValid = false;

    m_can_use_export_import_isSet = false;
    m_can_use_export_import_isValid = false;

    m_can_view_product_audit_log_isSet = false;
    m_can_view_product_audit_log_isValid = false;

    m_can_view_product_statistics_isSet = false;
    m_can_view_product_statistics_isValid = false;

    m_can_view_sdk_key_isSet = false;
    m_can_view_sdk_key_isValid = false;

    m_environment_accesses_isSet = false;
    m_environment_accesses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_new_environment_access_type_isSet = false;
    m_new_environment_access_type_isValid = false;

    m_permission_group_id_isSet = false;
    m_permission_group_id_isValid = false;
}

void OAIPermissionGroupModel_haljson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissionGroupModel_haljson::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_access_type_isValid = ::OpenAPI::fromJsonValue(m_access_type, json[QString("accessType")]);
    m_access_type_isSet = !json[QString("accessType")].isNull() && m_access_type_isValid;

    m_can_create_or_update_config_isValid = ::OpenAPI::fromJsonValue(m_can_create_or_update_config, json[QString("canCreateOrUpdateConfig")]);
    m_can_create_or_update_config_isSet = !json[QString("canCreateOrUpdateConfig")].isNull() && m_can_create_or_update_config_isValid;

    m_can_create_or_update_environment_isValid = ::OpenAPI::fromJsonValue(m_can_create_or_update_environment, json[QString("canCreateOrUpdateEnvironment")]);
    m_can_create_or_update_environment_isSet = !json[QString("canCreateOrUpdateEnvironment")].isNull() && m_can_create_or_update_environment_isValid;

    m_can_create_or_update_segments_isValid = ::OpenAPI::fromJsonValue(m_can_create_or_update_segments, json[QString("canCreateOrUpdateSegments")]);
    m_can_create_or_update_segments_isSet = !json[QString("canCreateOrUpdateSegments")].isNull() && m_can_create_or_update_segments_isValid;

    m_can_create_or_update_setting_isValid = ::OpenAPI::fromJsonValue(m_can_create_or_update_setting, json[QString("canCreateOrUpdateSetting")]);
    m_can_create_or_update_setting_isSet = !json[QString("canCreateOrUpdateSetting")].isNull() && m_can_create_or_update_setting_isValid;

    m_can_create_or_update_tag_isValid = ::OpenAPI::fromJsonValue(m_can_create_or_update_tag, json[QString("canCreateOrUpdateTag")]);
    m_can_create_or_update_tag_isSet = !json[QString("canCreateOrUpdateTag")].isNull() && m_can_create_or_update_tag_isValid;

    m_can_delete_config_isValid = ::OpenAPI::fromJsonValue(m_can_delete_config, json[QString("canDeleteConfig")]);
    m_can_delete_config_isSet = !json[QString("canDeleteConfig")].isNull() && m_can_delete_config_isValid;

    m_can_delete_environment_isValid = ::OpenAPI::fromJsonValue(m_can_delete_environment, json[QString("canDeleteEnvironment")]);
    m_can_delete_environment_isSet = !json[QString("canDeleteEnvironment")].isNull() && m_can_delete_environment_isValid;

    m_can_delete_segments_isValid = ::OpenAPI::fromJsonValue(m_can_delete_segments, json[QString("canDeleteSegments")]);
    m_can_delete_segments_isSet = !json[QString("canDeleteSegments")].isNull() && m_can_delete_segments_isValid;

    m_can_delete_setting_isValid = ::OpenAPI::fromJsonValue(m_can_delete_setting, json[QString("canDeleteSetting")]);
    m_can_delete_setting_isSet = !json[QString("canDeleteSetting")].isNull() && m_can_delete_setting_isValid;

    m_can_delete_tag_isValid = ::OpenAPI::fromJsonValue(m_can_delete_tag, json[QString("canDeleteTag")]);
    m_can_delete_tag_isSet = !json[QString("canDeleteTag")].isNull() && m_can_delete_tag_isValid;

    m_can_manage_integrations_isValid = ::OpenAPI::fromJsonValue(m_can_manage_integrations, json[QString("canManageIntegrations")]);
    m_can_manage_integrations_isSet = !json[QString("canManageIntegrations")].isNull() && m_can_manage_integrations_isValid;

    m_can_manage_members_isValid = ::OpenAPI::fromJsonValue(m_can_manage_members, json[QString("canManageMembers")]);
    m_can_manage_members_isSet = !json[QString("canManageMembers")].isNull() && m_can_manage_members_isValid;

    m_can_manage_product_preferences_isValid = ::OpenAPI::fromJsonValue(m_can_manage_product_preferences, json[QString("canManageProductPreferences")]);
    m_can_manage_product_preferences_isSet = !json[QString("canManageProductPreferences")].isNull() && m_can_manage_product_preferences_isValid;

    m_can_manage_webhook_isValid = ::OpenAPI::fromJsonValue(m_can_manage_webhook, json[QString("canManageWebhook")]);
    m_can_manage_webhook_isSet = !json[QString("canManageWebhook")].isNull() && m_can_manage_webhook_isValid;

    m_can_rotate_sdk_key_isValid = ::OpenAPI::fromJsonValue(m_can_rotate_sdk_key, json[QString("canRotateSdkKey")]);
    m_can_rotate_sdk_key_isSet = !json[QString("canRotateSdkKey")].isNull() && m_can_rotate_sdk_key_isValid;

    m_can_tag_setting_isValid = ::OpenAPI::fromJsonValue(m_can_tag_setting, json[QString("canTagSetting")]);
    m_can_tag_setting_isSet = !json[QString("canTagSetting")].isNull() && m_can_tag_setting_isValid;

    m_can_use_export_import_isValid = ::OpenAPI::fromJsonValue(m_can_use_export_import, json[QString("canUseExportImport")]);
    m_can_use_export_import_isSet = !json[QString("canUseExportImport")].isNull() && m_can_use_export_import_isValid;

    m_can_view_product_audit_log_isValid = ::OpenAPI::fromJsonValue(m_can_view_product_audit_log, json[QString("canViewProductAuditLog")]);
    m_can_view_product_audit_log_isSet = !json[QString("canViewProductAuditLog")].isNull() && m_can_view_product_audit_log_isValid;

    m_can_view_product_statistics_isValid = ::OpenAPI::fromJsonValue(m_can_view_product_statistics, json[QString("canViewProductStatistics")]);
    m_can_view_product_statistics_isSet = !json[QString("canViewProductStatistics")].isNull() && m_can_view_product_statistics_isValid;

    m_can_view_sdk_key_isValid = ::OpenAPI::fromJsonValue(m_can_view_sdk_key, json[QString("canViewSdkKey")]);
    m_can_view_sdk_key_isSet = !json[QString("canViewSdkKey")].isNull() && m_can_view_sdk_key_isValid;

    m_environment_accesses_isValid = ::OpenAPI::fromJsonValue(m_environment_accesses, json[QString("environmentAccesses")]);
    m_environment_accesses_isSet = !json[QString("environmentAccesses")].isNull() && m_environment_accesses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_new_environment_access_type_isValid = ::OpenAPI::fromJsonValue(m_new_environment_access_type, json[QString("newEnvironmentAccessType")]);
    m_new_environment_access_type_isSet = !json[QString("newEnvironmentAccessType")].isNull() && m_new_environment_access_type_isValid;

    m_permission_group_id_isValid = ::OpenAPI::fromJsonValue(m_permission_group_id, json[QString("permissionGroupId")]);
    m_permission_group_id_isSet = !json[QString("permissionGroupId")].isNull() && m_permission_group_id_isValid;
}

QString OAIPermissionGroupModel_haljson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissionGroupModel_haljson::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_access_type.isSet()) {
        obj.insert(QString("accessType"), ::OpenAPI::toJsonValue(m_access_type));
    }
    if (m_can_create_or_update_config_isSet) {
        obj.insert(QString("canCreateOrUpdateConfig"), ::OpenAPI::toJsonValue(m_can_create_or_update_config));
    }
    if (m_can_create_or_update_environment_isSet) {
        obj.insert(QString("canCreateOrUpdateEnvironment"), ::OpenAPI::toJsonValue(m_can_create_or_update_environment));
    }
    if (m_can_create_or_update_segments_isSet) {
        obj.insert(QString("canCreateOrUpdateSegments"), ::OpenAPI::toJsonValue(m_can_create_or_update_segments));
    }
    if (m_can_create_or_update_setting_isSet) {
        obj.insert(QString("canCreateOrUpdateSetting"), ::OpenAPI::toJsonValue(m_can_create_or_update_setting));
    }
    if (m_can_create_or_update_tag_isSet) {
        obj.insert(QString("canCreateOrUpdateTag"), ::OpenAPI::toJsonValue(m_can_create_or_update_tag));
    }
    if (m_can_delete_config_isSet) {
        obj.insert(QString("canDeleteConfig"), ::OpenAPI::toJsonValue(m_can_delete_config));
    }
    if (m_can_delete_environment_isSet) {
        obj.insert(QString("canDeleteEnvironment"), ::OpenAPI::toJsonValue(m_can_delete_environment));
    }
    if (m_can_delete_segments_isSet) {
        obj.insert(QString("canDeleteSegments"), ::OpenAPI::toJsonValue(m_can_delete_segments));
    }
    if (m_can_delete_setting_isSet) {
        obj.insert(QString("canDeleteSetting"), ::OpenAPI::toJsonValue(m_can_delete_setting));
    }
    if (m_can_delete_tag_isSet) {
        obj.insert(QString("canDeleteTag"), ::OpenAPI::toJsonValue(m_can_delete_tag));
    }
    if (m_can_manage_integrations_isSet) {
        obj.insert(QString("canManageIntegrations"), ::OpenAPI::toJsonValue(m_can_manage_integrations));
    }
    if (m_can_manage_members_isSet) {
        obj.insert(QString("canManageMembers"), ::OpenAPI::toJsonValue(m_can_manage_members));
    }
    if (m_can_manage_product_preferences_isSet) {
        obj.insert(QString("canManageProductPreferences"), ::OpenAPI::toJsonValue(m_can_manage_product_preferences));
    }
    if (m_can_manage_webhook_isSet) {
        obj.insert(QString("canManageWebhook"), ::OpenAPI::toJsonValue(m_can_manage_webhook));
    }
    if (m_can_rotate_sdk_key_isSet) {
        obj.insert(QString("canRotateSdkKey"), ::OpenAPI::toJsonValue(m_can_rotate_sdk_key));
    }
    if (m_can_tag_setting_isSet) {
        obj.insert(QString("canTagSetting"), ::OpenAPI::toJsonValue(m_can_tag_setting));
    }
    if (m_can_use_export_import_isSet) {
        obj.insert(QString("canUseExportImport"), ::OpenAPI::toJsonValue(m_can_use_export_import));
    }
    if (m_can_view_product_audit_log_isSet) {
        obj.insert(QString("canViewProductAuditLog"), ::OpenAPI::toJsonValue(m_can_view_product_audit_log));
    }
    if (m_can_view_product_statistics_isSet) {
        obj.insert(QString("canViewProductStatistics"), ::OpenAPI::toJsonValue(m_can_view_product_statistics));
    }
    if (m_can_view_sdk_key_isSet) {
        obj.insert(QString("canViewSdkKey"), ::OpenAPI::toJsonValue(m_can_view_sdk_key));
    }
    if (m_environment_accesses.size() > 0) {
        obj.insert(QString("environmentAccesses"), ::OpenAPI::toJsonValue(m_environment_accesses));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_new_environment_access_type.isSet()) {
        obj.insert(QString("newEnvironmentAccessType"), ::OpenAPI::toJsonValue(m_new_environment_access_type));
    }
    if (m_permission_group_id_isSet) {
        obj.insert(QString("permissionGroupId"), ::OpenAPI::toJsonValue(m_permission_group_id));
    }
    return obj;
}

OAIConfigModel_haljson__embedded OAIPermissionGroupModel_haljson::getEmbedded() const {
    return m__embedded;
}
void OAIPermissionGroupModel_haljson::setEmbedded(const OAIConfigModel_haljson__embedded &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIPermissionGroupModel_haljson::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAIEnvironmentModel_haljson__links OAIPermissionGroupModel_haljson::getLinks() const {
    return m__links;
}
void OAIPermissionGroupModel_haljson::setLinks(const OAIEnvironmentModel_haljson__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPermissionGroupModel_haljson::is__links_Valid() const{
    return m__links_isValid;
}

OAIAccessType OAIPermissionGroupModel_haljson::getAccessType() const {
    return m_access_type;
}
void OAIPermissionGroupModel_haljson::setAccessType(const OAIAccessType &access_type) {
    m_access_type = access_type;
    m_access_type_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAIPermissionGroupModel_haljson::is_access_type_Valid() const{
    return m_access_type_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanCreateOrUpdateConfig() const {
    return m_can_create_or_update_config;
}
void OAIPermissionGroupModel_haljson::setCanCreateOrUpdateConfig(const bool &can_create_or_update_config) {
    m_can_create_or_update_config = can_create_or_update_config;
    m_can_create_or_update_config_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_config_Set() const{
    return m_can_create_or_update_config_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_config_Valid() const{
    return m_can_create_or_update_config_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanCreateOrUpdateEnvironment() const {
    return m_can_create_or_update_environment;
}
void OAIPermissionGroupModel_haljson::setCanCreateOrUpdateEnvironment(const bool &can_create_or_update_environment) {
    m_can_create_or_update_environment = can_create_or_update_environment;
    m_can_create_or_update_environment_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_environment_Set() const{
    return m_can_create_or_update_environment_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_environment_Valid() const{
    return m_can_create_or_update_environment_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanCreateOrUpdateSegments() const {
    return m_can_create_or_update_segments;
}
void OAIPermissionGroupModel_haljson::setCanCreateOrUpdateSegments(const bool &can_create_or_update_segments) {
    m_can_create_or_update_segments = can_create_or_update_segments;
    m_can_create_or_update_segments_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_segments_Set() const{
    return m_can_create_or_update_segments_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_segments_Valid() const{
    return m_can_create_or_update_segments_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanCreateOrUpdateSetting() const {
    return m_can_create_or_update_setting;
}
void OAIPermissionGroupModel_haljson::setCanCreateOrUpdateSetting(const bool &can_create_or_update_setting) {
    m_can_create_or_update_setting = can_create_or_update_setting;
    m_can_create_or_update_setting_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_setting_Set() const{
    return m_can_create_or_update_setting_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_setting_Valid() const{
    return m_can_create_or_update_setting_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanCreateOrUpdateTag() const {
    return m_can_create_or_update_tag;
}
void OAIPermissionGroupModel_haljson::setCanCreateOrUpdateTag(const bool &can_create_or_update_tag) {
    m_can_create_or_update_tag = can_create_or_update_tag;
    m_can_create_or_update_tag_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_tag_Set() const{
    return m_can_create_or_update_tag_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_create_or_update_tag_Valid() const{
    return m_can_create_or_update_tag_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanDeleteConfig() const {
    return m_can_delete_config;
}
void OAIPermissionGroupModel_haljson::setCanDeleteConfig(const bool &can_delete_config) {
    m_can_delete_config = can_delete_config;
    m_can_delete_config_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_config_Set() const{
    return m_can_delete_config_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_config_Valid() const{
    return m_can_delete_config_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanDeleteEnvironment() const {
    return m_can_delete_environment;
}
void OAIPermissionGroupModel_haljson::setCanDeleteEnvironment(const bool &can_delete_environment) {
    m_can_delete_environment = can_delete_environment;
    m_can_delete_environment_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_environment_Set() const{
    return m_can_delete_environment_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_environment_Valid() const{
    return m_can_delete_environment_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanDeleteSegments() const {
    return m_can_delete_segments;
}
void OAIPermissionGroupModel_haljson::setCanDeleteSegments(const bool &can_delete_segments) {
    m_can_delete_segments = can_delete_segments;
    m_can_delete_segments_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_segments_Set() const{
    return m_can_delete_segments_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_segments_Valid() const{
    return m_can_delete_segments_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanDeleteSetting() const {
    return m_can_delete_setting;
}
void OAIPermissionGroupModel_haljson::setCanDeleteSetting(const bool &can_delete_setting) {
    m_can_delete_setting = can_delete_setting;
    m_can_delete_setting_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_setting_Set() const{
    return m_can_delete_setting_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_setting_Valid() const{
    return m_can_delete_setting_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanDeleteTag() const {
    return m_can_delete_tag;
}
void OAIPermissionGroupModel_haljson::setCanDeleteTag(const bool &can_delete_tag) {
    m_can_delete_tag = can_delete_tag;
    m_can_delete_tag_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_tag_Set() const{
    return m_can_delete_tag_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_delete_tag_Valid() const{
    return m_can_delete_tag_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanManageIntegrations() const {
    return m_can_manage_integrations;
}
void OAIPermissionGroupModel_haljson::setCanManageIntegrations(const bool &can_manage_integrations) {
    m_can_manage_integrations = can_manage_integrations;
    m_can_manage_integrations_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_integrations_Set() const{
    return m_can_manage_integrations_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_integrations_Valid() const{
    return m_can_manage_integrations_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanManageMembers() const {
    return m_can_manage_members;
}
void OAIPermissionGroupModel_haljson::setCanManageMembers(const bool &can_manage_members) {
    m_can_manage_members = can_manage_members;
    m_can_manage_members_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_members_Set() const{
    return m_can_manage_members_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_members_Valid() const{
    return m_can_manage_members_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanManageProductPreferences() const {
    return m_can_manage_product_preferences;
}
void OAIPermissionGroupModel_haljson::setCanManageProductPreferences(const bool &can_manage_product_preferences) {
    m_can_manage_product_preferences = can_manage_product_preferences;
    m_can_manage_product_preferences_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_product_preferences_Set() const{
    return m_can_manage_product_preferences_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_product_preferences_Valid() const{
    return m_can_manage_product_preferences_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanManageWebhook() const {
    return m_can_manage_webhook;
}
void OAIPermissionGroupModel_haljson::setCanManageWebhook(const bool &can_manage_webhook) {
    m_can_manage_webhook = can_manage_webhook;
    m_can_manage_webhook_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_webhook_Set() const{
    return m_can_manage_webhook_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_manage_webhook_Valid() const{
    return m_can_manage_webhook_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanRotateSdkKey() const {
    return m_can_rotate_sdk_key;
}
void OAIPermissionGroupModel_haljson::setCanRotateSdkKey(const bool &can_rotate_sdk_key) {
    m_can_rotate_sdk_key = can_rotate_sdk_key;
    m_can_rotate_sdk_key_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_rotate_sdk_key_Set() const{
    return m_can_rotate_sdk_key_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_rotate_sdk_key_Valid() const{
    return m_can_rotate_sdk_key_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanTagSetting() const {
    return m_can_tag_setting;
}
void OAIPermissionGroupModel_haljson::setCanTagSetting(const bool &can_tag_setting) {
    m_can_tag_setting = can_tag_setting;
    m_can_tag_setting_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_tag_setting_Set() const{
    return m_can_tag_setting_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_tag_setting_Valid() const{
    return m_can_tag_setting_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanUseExportImport() const {
    return m_can_use_export_import;
}
void OAIPermissionGroupModel_haljson::setCanUseExportImport(const bool &can_use_export_import) {
    m_can_use_export_import = can_use_export_import;
    m_can_use_export_import_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_use_export_import_Set() const{
    return m_can_use_export_import_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_use_export_import_Valid() const{
    return m_can_use_export_import_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanViewProductAuditLog() const {
    return m_can_view_product_audit_log;
}
void OAIPermissionGroupModel_haljson::setCanViewProductAuditLog(const bool &can_view_product_audit_log) {
    m_can_view_product_audit_log = can_view_product_audit_log;
    m_can_view_product_audit_log_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_view_product_audit_log_Set() const{
    return m_can_view_product_audit_log_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_view_product_audit_log_Valid() const{
    return m_can_view_product_audit_log_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanViewProductStatistics() const {
    return m_can_view_product_statistics;
}
void OAIPermissionGroupModel_haljson::setCanViewProductStatistics(const bool &can_view_product_statistics) {
    m_can_view_product_statistics = can_view_product_statistics;
    m_can_view_product_statistics_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_view_product_statistics_Set() const{
    return m_can_view_product_statistics_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_view_product_statistics_Valid() const{
    return m_can_view_product_statistics_isValid;
}

bool OAIPermissionGroupModel_haljson::isCanViewSdkKey() const {
    return m_can_view_sdk_key;
}
void OAIPermissionGroupModel_haljson::setCanViewSdkKey(const bool &can_view_sdk_key) {
    m_can_view_sdk_key = can_view_sdk_key;
    m_can_view_sdk_key_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_can_view_sdk_key_Set() const{
    return m_can_view_sdk_key_isSet;
}

bool OAIPermissionGroupModel_haljson::is_can_view_sdk_key_Valid() const{
    return m_can_view_sdk_key_isValid;
}

QList<OAIEnvironmentAccessModel> OAIPermissionGroupModel_haljson::getEnvironmentAccesses() const {
    return m_environment_accesses;
}
void OAIPermissionGroupModel_haljson::setEnvironmentAccesses(const QList<OAIEnvironmentAccessModel> &environment_accesses) {
    m_environment_accesses = environment_accesses;
    m_environment_accesses_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_environment_accesses_Set() const{
    return m_environment_accesses_isSet;
}

bool OAIPermissionGroupModel_haljson::is_environment_accesses_Valid() const{
    return m_environment_accesses_isValid;
}

QString OAIPermissionGroupModel_haljson::getName() const {
    return m_name;
}
void OAIPermissionGroupModel_haljson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermissionGroupModel_haljson::is_name_Valid() const{
    return m_name_isValid;
}

OAIEnvironmentAccessType OAIPermissionGroupModel_haljson::getNewEnvironmentAccessType() const {
    return m_new_environment_access_type;
}
void OAIPermissionGroupModel_haljson::setNewEnvironmentAccessType(const OAIEnvironmentAccessType &new_environment_access_type) {
    m_new_environment_access_type = new_environment_access_type;
    m_new_environment_access_type_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_new_environment_access_type_Set() const{
    return m_new_environment_access_type_isSet;
}

bool OAIPermissionGroupModel_haljson::is_new_environment_access_type_Valid() const{
    return m_new_environment_access_type_isValid;
}

qint64 OAIPermissionGroupModel_haljson::getPermissionGroupId() const {
    return m_permission_group_id;
}
void OAIPermissionGroupModel_haljson::setPermissionGroupId(const qint64 &permission_group_id) {
    m_permission_group_id = permission_group_id;
    m_permission_group_id_isSet = true;
}

bool OAIPermissionGroupModel_haljson::is_permission_group_id_Set() const{
    return m_permission_group_id_isSet;
}

bool OAIPermissionGroupModel_haljson::is_permission_group_id_Valid() const{
    return m_permission_group_id_isValid;
}

bool OAIPermissionGroupModel_haljson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_or_update_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_or_update_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_or_update_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_or_update_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_or_update_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manage_integrations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manage_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manage_product_preferences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manage_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_rotate_sdk_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_tag_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_use_export_import_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_view_product_audit_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_view_product_statistics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_view_sdk_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_accesses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_environment_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissionGroupModel_haljson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
