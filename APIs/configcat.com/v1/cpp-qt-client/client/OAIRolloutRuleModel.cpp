/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRolloutRuleModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRolloutRuleModel::OAIRolloutRuleModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRolloutRuleModel::OAIRolloutRuleModel() {
    this->initializeModel();
}

OAIRolloutRuleModel::~OAIRolloutRuleModel() {}

void OAIRolloutRuleModel::initializeModel() {

    m_comparator_isSet = false;
    m_comparator_isValid = false;

    m_comparison_attribute_isSet = false;
    m_comparison_attribute_isValid = false;

    m_comparison_value_isSet = false;
    m_comparison_value_isValid = false;

    m_segment_comparator_isSet = false;
    m_segment_comparator_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRolloutRuleModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRolloutRuleModel::fromJsonObject(QJsonObject json) {

    m_comparator_isValid = ::OpenAPI::fromJsonValue(m_comparator, json[QString("comparator")]);
    m_comparator_isSet = !json[QString("comparator")].isNull() && m_comparator_isValid;

    m_comparison_attribute_isValid = ::OpenAPI::fromJsonValue(m_comparison_attribute, json[QString("comparisonAttribute")]);
    m_comparison_attribute_isSet = !json[QString("comparisonAttribute")].isNull() && m_comparison_attribute_isValid;

    m_comparison_value_isValid = ::OpenAPI::fromJsonValue(m_comparison_value, json[QString("comparisonValue")]);
    m_comparison_value_isSet = !json[QString("comparisonValue")].isNull() && m_comparison_value_isValid;

    m_segment_comparator_isValid = ::OpenAPI::fromJsonValue(m_segment_comparator, json[QString("segmentComparator")]);
    m_segment_comparator_isSet = !json[QString("segmentComparator")].isNull() && m_segment_comparator_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRolloutRuleModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRolloutRuleModel::asJsonObject() const {
    QJsonObject obj;
    if (m_comparator.isSet()) {
        obj.insert(QString("comparator"), ::OpenAPI::toJsonValue(m_comparator));
    }
    if (m_comparison_attribute_isSet) {
        obj.insert(QString("comparisonAttribute"), ::OpenAPI::toJsonValue(m_comparison_attribute));
    }
    if (m_comparison_value_isSet) {
        obj.insert(QString("comparisonValue"), ::OpenAPI::toJsonValue(m_comparison_value));
    }
    if (m_segment_comparator.isSet()) {
        obj.insert(QString("segmentComparator"), ::OpenAPI::toJsonValue(m_segment_comparator));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIRolloutRuleComparator OAIRolloutRuleModel::getComparator() const {
    return m_comparator;
}
void OAIRolloutRuleModel::setComparator(const OAIRolloutRuleComparator &comparator) {
    m_comparator = comparator;
    m_comparator_isSet = true;
}

bool OAIRolloutRuleModel::is_comparator_Set() const{
    return m_comparator_isSet;
}

bool OAIRolloutRuleModel::is_comparator_Valid() const{
    return m_comparator_isValid;
}

QString OAIRolloutRuleModel::getComparisonAttribute() const {
    return m_comparison_attribute;
}
void OAIRolloutRuleModel::setComparisonAttribute(const QString &comparison_attribute) {
    m_comparison_attribute = comparison_attribute;
    m_comparison_attribute_isSet = true;
}

bool OAIRolloutRuleModel::is_comparison_attribute_Set() const{
    return m_comparison_attribute_isSet;
}

bool OAIRolloutRuleModel::is_comparison_attribute_Valid() const{
    return m_comparison_attribute_isValid;
}

QString OAIRolloutRuleModel::getComparisonValue() const {
    return m_comparison_value;
}
void OAIRolloutRuleModel::setComparisonValue(const QString &comparison_value) {
    m_comparison_value = comparison_value;
    m_comparison_value_isSet = true;
}

bool OAIRolloutRuleModel::is_comparison_value_Set() const{
    return m_comparison_value_isSet;
}

bool OAIRolloutRuleModel::is_comparison_value_Valid() const{
    return m_comparison_value_isValid;
}

OAISegmentComparator OAIRolloutRuleModel::getSegmentComparator() const {
    return m_segment_comparator;
}
void OAIRolloutRuleModel::setSegmentComparator(const OAISegmentComparator &segment_comparator) {
    m_segment_comparator = segment_comparator;
    m_segment_comparator_isSet = true;
}

bool OAIRolloutRuleModel::is_segment_comparator_Set() const{
    return m_segment_comparator_isSet;
}

bool OAIRolloutRuleModel::is_segment_comparator_Valid() const{
    return m_segment_comparator_isValid;
}

QString OAIRolloutRuleModel::getSegmentId() const {
    return m_segment_id;
}
void OAIRolloutRuleModel::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIRolloutRuleModel::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIRolloutRuleModel::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QJsonValue OAIRolloutRuleModel::getValue() const {
    return m_value;
}
void OAIRolloutRuleModel::setValue(const QJsonValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRolloutRuleModel::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRolloutRuleModel::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRolloutRuleModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_comparator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRolloutRuleModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
