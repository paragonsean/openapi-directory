/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentModel::OAISegmentModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentModel::OAISegmentModel() {
    this->initializeModel();
}

OAISegmentModel::~OAISegmentModel() {}

void OAISegmentModel::initializeModel() {

    m_comparator_isSet = false;
    m_comparator_isValid = false;

    m_comparison_attribute_isSet = false;
    m_comparison_attribute_isValid = false;

    m_comparison_value_isSet = false;
    m_comparison_value_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_email_isSet = false;
    m_creator_email_isValid = false;

    m_creator_full_name_isSet = false;
    m_creator_full_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_updater_email_isSet = false;
    m_last_updater_email_isValid = false;

    m_last_updater_full_name_isSet = false;
    m_last_updater_full_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISegmentModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentModel::fromJsonObject(QJsonObject json) {

    m_comparator_isValid = ::OpenAPI::fromJsonValue(m_comparator, json[QString("comparator")]);
    m_comparator_isSet = !json[QString("comparator")].isNull() && m_comparator_isValid;

    m_comparison_attribute_isValid = ::OpenAPI::fromJsonValue(m_comparison_attribute, json[QString("comparisonAttribute")]);
    m_comparison_attribute_isSet = !json[QString("comparisonAttribute")].isNull() && m_comparison_attribute_isValid;

    m_comparison_value_isValid = ::OpenAPI::fromJsonValue(m_comparison_value, json[QString("comparisonValue")]);
    m_comparison_value_isSet = !json[QString("comparisonValue")].isNull() && m_comparison_value_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_creator_email_isValid = ::OpenAPI::fromJsonValue(m_creator_email, json[QString("creatorEmail")]);
    m_creator_email_isSet = !json[QString("creatorEmail")].isNull() && m_creator_email_isValid;

    m_creator_full_name_isValid = ::OpenAPI::fromJsonValue(m_creator_full_name, json[QString("creatorFullName")]);
    m_creator_full_name_isSet = !json[QString("creatorFullName")].isNull() && m_creator_full_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_updater_email_isValid = ::OpenAPI::fromJsonValue(m_last_updater_email, json[QString("lastUpdaterEmail")]);
    m_last_updater_email_isSet = !json[QString("lastUpdaterEmail")].isNull() && m_last_updater_email_isValid;

    m_last_updater_full_name_isValid = ::OpenAPI::fromJsonValue(m_last_updater_full_name, json[QString("lastUpdaterFullName")]);
    m_last_updater_full_name_isSet = !json[QString("lastUpdaterFullName")].isNull() && m_last_updater_full_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segmentId")]);
    m_segment_id_isSet = !json[QString("segmentId")].isNull() && m_segment_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAISegmentModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentModel::asJsonObject() const {
    QJsonObject obj;
    if (m_comparator.isSet()) {
        obj.insert(QString("comparator"), ::OpenAPI::toJsonValue(m_comparator));
    }
    if (m_comparison_attribute_isSet) {
        obj.insert(QString("comparisonAttribute"), ::OpenAPI::toJsonValue(m_comparison_attribute));
    }
    if (m_comparison_value_isSet) {
        obj.insert(QString("comparisonValue"), ::OpenAPI::toJsonValue(m_comparison_value));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_email_isSet) {
        obj.insert(QString("creatorEmail"), ::OpenAPI::toJsonValue(m_creator_email));
    }
    if (m_creator_full_name_isSet) {
        obj.insert(QString("creatorFullName"), ::OpenAPI::toJsonValue(m_creator_full_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_updater_email_isSet) {
        obj.insert(QString("lastUpdaterEmail"), ::OpenAPI::toJsonValue(m_last_updater_email));
    }
    if (m_last_updater_full_name_isSet) {
        obj.insert(QString("lastUpdaterFullName"), ::OpenAPI::toJsonValue(m_last_updater_full_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIRolloutRuleComparator OAISegmentModel::getComparator() const {
    return m_comparator;
}
void OAISegmentModel::setComparator(const OAIRolloutRuleComparator &comparator) {
    m_comparator = comparator;
    m_comparator_isSet = true;
}

bool OAISegmentModel::is_comparator_Set() const{
    return m_comparator_isSet;
}

bool OAISegmentModel::is_comparator_Valid() const{
    return m_comparator_isValid;
}

QString OAISegmentModel::getComparisonAttribute() const {
    return m_comparison_attribute;
}
void OAISegmentModel::setComparisonAttribute(const QString &comparison_attribute) {
    m_comparison_attribute = comparison_attribute;
    m_comparison_attribute_isSet = true;
}

bool OAISegmentModel::is_comparison_attribute_Set() const{
    return m_comparison_attribute_isSet;
}

bool OAISegmentModel::is_comparison_attribute_Valid() const{
    return m_comparison_attribute_isValid;
}

QString OAISegmentModel::getComparisonValue() const {
    return m_comparison_value;
}
void OAISegmentModel::setComparisonValue(const QString &comparison_value) {
    m_comparison_value = comparison_value;
    m_comparison_value_isSet = true;
}

bool OAISegmentModel::is_comparison_value_Set() const{
    return m_comparison_value_isSet;
}

bool OAISegmentModel::is_comparison_value_Valid() const{
    return m_comparison_value_isValid;
}

QDateTime OAISegmentModel::getCreatedAt() const {
    return m_created_at;
}
void OAISegmentModel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISegmentModel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISegmentModel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISegmentModel::getCreatorEmail() const {
    return m_creator_email;
}
void OAISegmentModel::setCreatorEmail(const QString &creator_email) {
    m_creator_email = creator_email;
    m_creator_email_isSet = true;
}

bool OAISegmentModel::is_creator_email_Set() const{
    return m_creator_email_isSet;
}

bool OAISegmentModel::is_creator_email_Valid() const{
    return m_creator_email_isValid;
}

QString OAISegmentModel::getCreatorFullName() const {
    return m_creator_full_name;
}
void OAISegmentModel::setCreatorFullName(const QString &creator_full_name) {
    m_creator_full_name = creator_full_name;
    m_creator_full_name_isSet = true;
}

bool OAISegmentModel::is_creator_full_name_Set() const{
    return m_creator_full_name_isSet;
}

bool OAISegmentModel::is_creator_full_name_Valid() const{
    return m_creator_full_name_isValid;
}

QString OAISegmentModel::getDescription() const {
    return m_description;
}
void OAISegmentModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISegmentModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAISegmentModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISegmentModel::getLastUpdaterEmail() const {
    return m_last_updater_email;
}
void OAISegmentModel::setLastUpdaterEmail(const QString &last_updater_email) {
    m_last_updater_email = last_updater_email;
    m_last_updater_email_isSet = true;
}

bool OAISegmentModel::is_last_updater_email_Set() const{
    return m_last_updater_email_isSet;
}

bool OAISegmentModel::is_last_updater_email_Valid() const{
    return m_last_updater_email_isValid;
}

QString OAISegmentModel::getLastUpdaterFullName() const {
    return m_last_updater_full_name;
}
void OAISegmentModel::setLastUpdaterFullName(const QString &last_updater_full_name) {
    m_last_updater_full_name = last_updater_full_name;
    m_last_updater_full_name_isSet = true;
}

bool OAISegmentModel::is_last_updater_full_name_Set() const{
    return m_last_updater_full_name_isSet;
}

bool OAISegmentModel::is_last_updater_full_name_Valid() const{
    return m_last_updater_full_name_isValid;
}

QString OAISegmentModel::getName() const {
    return m_name;
}
void OAISegmentModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISegmentModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAISegmentModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIProductModel OAISegmentModel::getProduct() const {
    return m_product;
}
void OAISegmentModel::setProduct(const OAIProductModel &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAISegmentModel::is_product_Set() const{
    return m_product_isSet;
}

bool OAISegmentModel::is_product_Valid() const{
    return m_product_isValid;
}

QString OAISegmentModel::getSegmentId() const {
    return m_segment_id;
}
void OAISegmentModel::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAISegmentModel::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAISegmentModel::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QDateTime OAISegmentModel::getUpdatedAt() const {
    return m_updated_at;
}
void OAISegmentModel::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISegmentModel::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISegmentModel::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISegmentModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
