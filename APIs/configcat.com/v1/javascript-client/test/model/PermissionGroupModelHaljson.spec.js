/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConfigCatPublicManagementApi);
  }
}(this, function(expect, ConfigCatPublicManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PermissionGroupModelHaljson', function() {
    it('should create an instance of PermissionGroupModelHaljson', function() {
      // uncomment below and update the code to test PermissionGroupModelHaljson
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be.a(ConfigCatPublicManagementApi.PermissionGroupModelHaljson);
    });

    it('should have the property embedded (base name: "_embedded")', function() {
      // uncomment below and update the code to test the property embedded
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property accessType (base name: "accessType")', function() {
      // uncomment below and update the code to test the property accessType
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canCreateOrUpdateConfig (base name: "canCreateOrUpdateConfig")', function() {
      // uncomment below and update the code to test the property canCreateOrUpdateConfig
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canCreateOrUpdateEnvironment (base name: "canCreateOrUpdateEnvironment")', function() {
      // uncomment below and update the code to test the property canCreateOrUpdateEnvironment
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canCreateOrUpdateSegments (base name: "canCreateOrUpdateSegments")', function() {
      // uncomment below and update the code to test the property canCreateOrUpdateSegments
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canCreateOrUpdateSetting (base name: "canCreateOrUpdateSetting")', function() {
      // uncomment below and update the code to test the property canCreateOrUpdateSetting
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canCreateOrUpdateTag (base name: "canCreateOrUpdateTag")', function() {
      // uncomment below and update the code to test the property canCreateOrUpdateTag
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteConfig (base name: "canDeleteConfig")', function() {
      // uncomment below and update the code to test the property canDeleteConfig
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteEnvironment (base name: "canDeleteEnvironment")', function() {
      // uncomment below and update the code to test the property canDeleteEnvironment
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteSegments (base name: "canDeleteSegments")', function() {
      // uncomment below and update the code to test the property canDeleteSegments
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteSetting (base name: "canDeleteSetting")', function() {
      // uncomment below and update the code to test the property canDeleteSetting
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canDeleteTag (base name: "canDeleteTag")', function() {
      // uncomment below and update the code to test the property canDeleteTag
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canManageIntegrations (base name: "canManageIntegrations")', function() {
      // uncomment below and update the code to test the property canManageIntegrations
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canManageMembers (base name: "canManageMembers")', function() {
      // uncomment below and update the code to test the property canManageMembers
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canManageProductPreferences (base name: "canManageProductPreferences")', function() {
      // uncomment below and update the code to test the property canManageProductPreferences
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canManageWebhook (base name: "canManageWebhook")', function() {
      // uncomment below and update the code to test the property canManageWebhook
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canRotateSdkKey (base name: "canRotateSdkKey")', function() {
      // uncomment below and update the code to test the property canRotateSdkKey
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canTagSetting (base name: "canTagSetting")', function() {
      // uncomment below and update the code to test the property canTagSetting
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canUseExportImport (base name: "canUseExportImport")', function() {
      // uncomment below and update the code to test the property canUseExportImport
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canViewProductAuditLog (base name: "canViewProductAuditLog")', function() {
      // uncomment below and update the code to test the property canViewProductAuditLog
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canViewProductStatistics (base name: "canViewProductStatistics")', function() {
      // uncomment below and update the code to test the property canViewProductStatistics
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property canViewSdkKey (base name: "canViewSdkKey")', function() {
      // uncomment below and update the code to test the property canViewSdkKey
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property environmentAccesses (base name: "environmentAccesses")', function() {
      // uncomment below and update the code to test the property environmentAccesses
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property newEnvironmentAccessType (base name: "newEnvironmentAccessType")', function() {
      // uncomment below and update the code to test the property newEnvironmentAccessType
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

    it('should have the property permissionGroupId (base name: "permissionGroupId")', function() {
      // uncomment below and update the code to test the property permissionGroupId
      //var instance = new ConfigCatPublicManagementApi.PermissionGroupModelHaljson();
      //expect(instance).to.be();
    });

  });

}));
