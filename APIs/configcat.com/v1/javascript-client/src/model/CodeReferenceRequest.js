/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlagReference from './FlagReference';

/**
 * The CodeReferenceRequest model module.
 * @module model/CodeReferenceRequest
 * @version v1
 */
class CodeReferenceRequest {
    /**
     * Constructs a new <code>CodeReferenceRequest</code>.
     * @alias module:model/CodeReferenceRequest
     * @param branch {String} The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)
     * @param configId {String} The Config's identifier the scanning was performed against.
     * @param repository {String} The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)
     */
    constructor(branch, configId, repository) { 
        
        CodeReferenceRequest.initialize(this, branch, configId, repository);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, branch, configId, repository) { 
        obj['branch'] = branch;
        obj['configId'] = configId;
        obj['repository'] = repository;
    }

    /**
     * Constructs a <code>CodeReferenceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeReferenceRequest} obj Optional instance to populate.
     * @return {module:model/CodeReferenceRequest} The populated <code>CodeReferenceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeReferenceRequest();

            if (data.hasOwnProperty('activeBranches')) {
                obj['activeBranches'] = ApiClient.convertToType(data['activeBranches'], ['String']);
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('commitHash')) {
                obj['commitHash'] = ApiClient.convertToType(data['commitHash'], 'String');
            }
            if (data.hasOwnProperty('commitUrl')) {
                obj['commitUrl'] = ApiClient.convertToType(data['commitUrl'], 'String');
            }
            if (data.hasOwnProperty('configId')) {
                obj['configId'] = ApiClient.convertToType(data['configId'], 'String');
            }
            if (data.hasOwnProperty('flagReferences')) {
                obj['flagReferences'] = ApiClient.convertToType(data['flagReferences'], [FlagReference]);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('uploader')) {
                obj['uploader'] = ApiClient.convertToType(data['uploader'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeReferenceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeReferenceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeReferenceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['activeBranches'])) {
            throw new Error("Expected the field `activeBranches` to be an array in the JSON data but got " + data['activeBranches']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['commitHash'] && !(typeof data['commitHash'] === 'string' || data['commitHash'] instanceof String)) {
            throw new Error("Expected the field `commitHash` to be a primitive type in the JSON string but got " + data['commitHash']);
        }
        // ensure the json data is a string
        if (data['commitUrl'] && !(typeof data['commitUrl'] === 'string' || data['commitUrl'] instanceof String)) {
            throw new Error("Expected the field `commitUrl` to be a primitive type in the JSON string but got " + data['commitUrl']);
        }
        // ensure the json data is a string
        if (data['configId'] && !(typeof data['configId'] === 'string' || data['configId'] instanceof String)) {
            throw new Error("Expected the field `configId` to be a primitive type in the JSON string but got " + data['configId']);
        }
        if (data['flagReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flagReferences'])) {
                throw new Error("Expected the field `flagReferences` to be an array in the JSON data but got " + data['flagReferences']);
            }
            // validate the optional field `flagReferences` (array)
            for (const item of data['flagReferences']) {
                FlagReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['uploader'] && !(typeof data['uploader'] === 'string' || data['uploader'] instanceof String)) {
            throw new Error("Expected the field `uploader` to be a primitive type in the JSON string but got " + data['uploader']);
        }

        return true;
    }


}

CodeReferenceRequest.RequiredProperties = ["branch", "configId", "repository"];

/**
 * The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.
 * @member {Array.<String>} activeBranches
 */
CodeReferenceRequest.prototype['activeBranches'] = undefined;

/**
 * The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)
 * @member {String} branch
 */
CodeReferenceRequest.prototype['branch'] = undefined;

/**
 * The related commit's hash. (Appears on the ConfigCat Dashboard)
 * @member {String} commitHash
 */
CodeReferenceRequest.prototype['commitHash'] = undefined;

/**
 * The related commit's URL. (Appears on the ConfigCat Dashboard)
 * @member {String} commitUrl
 */
CodeReferenceRequest.prototype['commitUrl'] = undefined;

/**
 * The Config's identifier the scanning was performed against.
 * @member {String} configId
 */
CodeReferenceRequest.prototype['configId'] = undefined;

/**
 * The actual code reference collection.
 * @member {Array.<module:model/FlagReference>} flagReferences
 */
CodeReferenceRequest.prototype['flagReferences'] = undefined;

/**
 * The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)
 * @member {String} repository
 */
CodeReferenceRequest.prototype['repository'] = undefined;

/**
 * The scanning tool's name. (Appears on the ConfigCat Dashboard)
 * @member {String} uploader
 */
CodeReferenceRequest.prototype['uploader'] = undefined;






export default CodeReferenceRequest;

