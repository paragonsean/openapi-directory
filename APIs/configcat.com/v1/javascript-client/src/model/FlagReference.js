/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferenceLines from './ReferenceLines';

/**
 * The FlagReference model module.
 * @module model/FlagReference
 * @version v1
 */
class FlagReference {
    /**
     * Constructs a new <code>FlagReference</code>.
     * @alias module:model/FlagReference
     * @param references {Array.<module:model/ReferenceLines>} The actual references to the given Feature Flag or Setting.
     * @param settingId {Number} The identifier of the Feature Flag or Setting the code reference belongs to.
     */
    constructor(references, settingId) { 
        
        FlagReference.initialize(this, references, settingId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, references, settingId) { 
        obj['references'] = references;
        obj['settingId'] = settingId;
    }

    /**
     * Constructs a <code>FlagReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlagReference} obj Optional instance to populate.
     * @return {module:model/FlagReference} The populated <code>FlagReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlagReference();

            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], [ReferenceLines]);
            }
            if (data.hasOwnProperty('settingId')) {
                obj['settingId'] = ApiClient.convertToType(data['settingId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlagReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlagReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlagReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['references']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['references'])) {
                throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
            }
            // validate the optional field `references` (array)
            for (const item of data['references']) {
                ReferenceLines.validateJSON(item);
            };
        }

        return true;
    }


}

FlagReference.RequiredProperties = ["references", "settingId"];

/**
 * The actual references to the given Feature Flag or Setting.
 * @member {Array.<module:model/ReferenceLines>} references
 */
FlagReference.prototype['references'] = undefined;

/**
 * The identifier of the Feature Flag or Setting the code reference belongs to.
 * @member {Number} settingId
 */
FlagReference.prototype['settingId'] = undefined;






export default FlagReference;

