/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductModel from './ProductModel';

/**
 * The SegmentListModel model module.
 * @module model/SegmentListModel
 * @version v1
 */
class SegmentListModel {
    /**
     * Constructs a new <code>SegmentListModel</code>.
     * @alias module:model/SegmentListModel
     */
    constructor() { 
        
        SegmentListModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SegmentListModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SegmentListModel} obj Optional instance to populate.
     * @return {module:model/SegmentListModel} The populated <code>SegmentListModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SegmentListModel();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('creatorEmail')) {
                obj['creatorEmail'] = ApiClient.convertToType(data['creatorEmail'], 'String');
            }
            if (data.hasOwnProperty('creatorFullName')) {
                obj['creatorFullName'] = ApiClient.convertToType(data['creatorFullName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('lastUpdaterEmail')) {
                obj['lastUpdaterEmail'] = ApiClient.convertToType(data['lastUpdaterEmail'], 'String');
            }
            if (data.hasOwnProperty('lastUpdaterFullName')) {
                obj['lastUpdaterFullName'] = ApiClient.convertToType(data['lastUpdaterFullName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ProductModel.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('segmentId')) {
                obj['segmentId'] = ApiClient.convertToType(data['segmentId'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SegmentListModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SegmentListModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creatorEmail'] && !(typeof data['creatorEmail'] === 'string' || data['creatorEmail'] instanceof String)) {
            throw new Error("Expected the field `creatorEmail` to be a primitive type in the JSON string but got " + data['creatorEmail']);
        }
        // ensure the json data is a string
        if (data['creatorFullName'] && !(typeof data['creatorFullName'] === 'string' || data['creatorFullName'] instanceof String)) {
            throw new Error("Expected the field `creatorFullName` to be a primitive type in the JSON string but got " + data['creatorFullName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['lastUpdaterEmail'] && !(typeof data['lastUpdaterEmail'] === 'string' || data['lastUpdaterEmail'] instanceof String)) {
            throw new Error("Expected the field `lastUpdaterEmail` to be a primitive type in the JSON string but got " + data['lastUpdaterEmail']);
        }
        // ensure the json data is a string
        if (data['lastUpdaterFullName'] && !(typeof data['lastUpdaterFullName'] === 'string' || data['lastUpdaterFullName'] instanceof String)) {
            throw new Error("Expected the field `lastUpdaterFullName` to be a primitive type in the JSON string but got " + data['lastUpdaterFullName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          ProductModel.validateJSON(data['product']);
        }
        // ensure the json data is a string
        if (data['segmentId'] && !(typeof data['segmentId'] === 'string' || data['segmentId'] instanceof String)) {
            throw new Error("Expected the field `segmentId` to be a primitive type in the JSON string but got " + data['segmentId']);
        }

        return true;
    }


}



/**
 * @member {Date} createdAt
 */
SegmentListModel.prototype['createdAt'] = undefined;

/**
 * @member {String} creatorEmail
 */
SegmentListModel.prototype['creatorEmail'] = undefined;

/**
 * @member {String} creatorFullName
 */
SegmentListModel.prototype['creatorFullName'] = undefined;

/**
 * @member {String} description
 */
SegmentListModel.prototype['description'] = undefined;

/**
 * @member {String} lastUpdaterEmail
 */
SegmentListModel.prototype['lastUpdaterEmail'] = undefined;

/**
 * @member {String} lastUpdaterFullName
 */
SegmentListModel.prototype['lastUpdaterFullName'] = undefined;

/**
 * @member {String} name
 */
SegmentListModel.prototype['name'] = undefined;

/**
 * @member {module:model/ProductModel} product
 */
SegmentListModel.prototype['product'] = undefined;

/**
 * @member {String} segmentId
 */
SegmentListModel.prototype['segmentId'] = undefined;

/**
 * @member {Date} updatedAt
 */
SegmentListModel.prototype['updatedAt'] = undefined;

/**
 * @member {Number} usage
 */
SegmentListModel.prototype['usage'] = undefined;






export default SegmentListModel;

