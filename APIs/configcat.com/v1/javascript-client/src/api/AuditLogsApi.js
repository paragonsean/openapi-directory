/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditLogItemModel from '../model/AuditLogItemModel';
import AuditLogType from '../model/AuditLogType';
import SettingModel from '../model/SettingModel';
import SettingModelHaljson from '../model/SettingModelHaljson';

/**
* AuditLogs service.
* @module api/AuditLogsApi
* @version v1
*/
export default class AuditLogsApi {

    /**
    * Constructs a new AuditLogsApi. 
    * @alias module:api/AuditLogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAuditlogs operation.
     * @callback module:api/AuditLogsApi~getAuditlogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuditLogItemModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Audit log items for Product
     * This endpoint returns the list of Audit log items for a given Product  and the result can be optionally filtered by Config and/or Environment.
     * @param {String} productId The identifier of the Product.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] The identifier of the Config.
     * @param {String} [environmentId] The identifier of the Environment.
     * @param {module:model/AuditLogType} [auditLogType] Filter Audit logs by Audit log type.
     * @param {Date} [fromUtcDateTime] Filter Audit logs by starting UTC date.
     * @param {Date} [toUtcDateTime] Filter Audit logs by ending UTC date.
     * @param {module:api/AuditLogsApi~getAuditlogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuditLogItemModel>}
     */
    getAuditlogs(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getAuditlogs");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'configId': opts['configId'],
        'environmentId': opts['environmentId'],
        'auditLogType': opts['auditLogType'],
        'fromUtcDateTime': opts['fromUtcDateTime'],
        'toUtcDateTime': opts['toUtcDateTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = [AuditLogItemModel];
      return this.apiClient.callApi(
        '/v1/products/{productId}/auditlogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedSettings operation.
     * @callback module:api/AuditLogsApi~getDeletedSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SettingModelHaljson>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Deleted Settings
     * This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
     * @param {String} configId The identifier of the Config.
     * @param {module:api/AuditLogsApi~getDeletedSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SettingModelHaljson>}
     */
    getDeletedSettings(configId, callback) {
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getDeletedSettings");
      }

      let pathParams = {
        'configId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = [SettingModelHaljson];
      return this.apiClient.callApi(
        '/v1/configs/{configId}/deleted-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAuditlogs operation.
     * @callback module:api/AuditLogsApi~getOrganizationAuditlogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuditLogItemModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Audit log items for Organization
     * This endpoint returns the list of Audit log items for a given Organization  and the result can be optionally filtered by Product and/or Config and/or Environment.
     * @param {String} organizationId The identifier of the Organization.
     * @param {Object} opts Optional parameters
     * @param {String} [productId] The identifier of the Product.
     * @param {String} [configId] The identifier of the Config.
     * @param {String} [environmentId] The identifier of the Environment.
     * @param {module:model/AuditLogType} [auditLogType] Filter Audit logs by Audit log type.
     * @param {Date} [fromUtcDateTime] Filter Audit logs by starting UTC date.
     * @param {Date} [toUtcDateTime] Filter Audit logs by ending UTC date.
     * @param {module:api/AuditLogsApi~getOrganizationAuditlogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuditLogItemModel>}
     */
    getOrganizationAuditlogs(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAuditlogs");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'productId': opts['productId'],
        'configId': opts['configId'],
        'environmentId': opts['environmentId'],
        'auditLogType': opts['auditLogType'],
        'fromUtcDateTime': opts['fromUtcDateTime'],
        'toUtcDateTime': opts['toUtcDateTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = [AuditLogItemModel];
      return this.apiClient.callApi(
        '/v1/organizations/{organizationId}/auditlogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
