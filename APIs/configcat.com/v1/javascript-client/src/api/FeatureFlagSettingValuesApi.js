/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigSettingValuesModel from '../model/ConfigSettingValuesModel';
import JsonPatch from '../model/JsonPatch';
import SettingValueModel from '../model/SettingValueModel';
import SettingValueModelHaljson from '../model/SettingValueModelHaljson';
import UpdateSettingValueModel from '../model/UpdateSettingValueModel';
import UpdateSettingValuesWithIdModel from '../model/UpdateSettingValuesWithIdModel';

/**
* FeatureFlagSettingValues service.
* @module api/FeatureFlagSettingValuesApi
* @version v1
*/
export default class FeatureFlagSettingValuesApi {

    /**
    * Constructs a new FeatureFlagSettingValuesApi. 
    * @alias module:api/FeatureFlagSettingValuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSettingValue operation.
     * @callback module:api/FeatureFlagSettingValuesApi~getSettingValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingValueModelHaljson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get value
     * This endpoint returns the value of a Feature Flag or Setting  in a specified Environment identified by the `environmentId` parameter.  The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`. The `value` represents what the clients will get when the evaluation requests of our SDKs  are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.  The `rolloutRules` and `percentageRules` attributes are representing the current  Targeting and Percentage Rules configuration of the actual Feature Flag or Setting  in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
     * @param {String} environmentId The identifier of the Environment.
     * @param {Number} settingId The id of the Setting.
     * @param {module:api/FeatureFlagSettingValuesApi~getSettingValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingValueModelHaljson}
     */
    getSettingValue(environmentId, settingId, callback) {
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getSettingValue");
      }
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling getSettingValue");
      }

      let pathParams = {
        'environmentId': environmentId,
        'settingId': settingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = SettingValueModelHaljson;
      return this.apiClient.callApi(
        '/v1/environments/{environmentId}/settings/{settingId}/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettingValues operation.
     * @callback module:api/FeatureFlagSettingValuesApi~getSettingValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSettingValuesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get values
     * This endpoint returns the value of a specified Config's Feature Flags or Settings identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`. The `value` represents what the clients will get when the evaluation requests of our SDKs  are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.  The `rolloutRules` and `percentageRules` attributes are representing the current  Targeting and Percentage Rules configuration of the actual Feature Flag or Setting  in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
     * @param {String} configId The identifier of the Config.
     * @param {String} environmentId The identifier of the Environment.
     * @param {module:api/FeatureFlagSettingValuesApi~getSettingValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSettingValuesModel}
     */
    getSettingValues(configId, environmentId, callback) {
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getSettingValues");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getSettingValues");
      }

      let pathParams = {
        'configId': configId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = ConfigSettingValuesModel;
      return this.apiClient.callApi(
        '/v1/configs/{configId}/environments/{environmentId}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSettingValues operation.
     * @callback module:api/FeatureFlagSettingValuesApi~postSettingValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSettingValuesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post values
     * This endpoint replaces the values of a specified Config's Feature Flags or Settings identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't  want to change in its original state. Not listing one means that it will reset.  For example: We have the following resource. ``` {     \"settingValues\": [   {    \"rolloutPercentageItems\": [     {      \"percentage\": 30,      \"value\": true     },     {      \"percentage\": 70,      \"value\": false     }    ],    \"rolloutRules\": [],    \"value\": false,    \"settingId\": 1   }  ] } ``` If we send a replace request body as below: ``` {   \"settingValues\": [   {    \"value\": true,    \"settingId\": 1   }  ] } ``` Then besides that the default value is set to `true`, all the Percentage Rules are deleted.  So we get a response like this: ``` {  \"settingValues\": [   {    \"rolloutPercentageItems\": [],    \"rolloutRules\": [],    \"value\": true,    \"setting\":     {     \"settingId\": 1    }   }  ] } ```  The `rolloutRules` property describes two types of rules:  - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required. - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
     * @param {String} configId The identifier of the Config.
     * @param {String} environmentId The identifier of the Environment.
     * @param {module:model/UpdateSettingValuesWithIdModel} updateSettingValuesWithIdModel 
     * @param {Object} opts Optional parameters
     * @param {String} [reason] The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.
     * @param {module:api/FeatureFlagSettingValuesApi~postSettingValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSettingValuesModel}
     */
    postSettingValues(configId, environmentId, updateSettingValuesWithIdModel, opts, callback) {
      opts = opts || {};
      let postBody = updateSettingValuesWithIdModel;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling postSettingValues");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling postSettingValues");
      }
      // verify the required parameter 'updateSettingValuesWithIdModel' is set
      if (updateSettingValuesWithIdModel === undefined || updateSettingValuesWithIdModel === null) {
        throw new Error("Missing the required parameter 'updateSettingValuesWithIdModel' when calling postSettingValues");
      }

      let pathParams = {
        'configId': configId,
        'environmentId': environmentId
      };
      let queryParams = {
        'reason': opts['reason']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = ConfigSettingValuesModel;
      return this.apiClient.callApi(
        '/v1/configs/{configId}/environments/{environmentId}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceSettingValue operation.
     * @callback module:api/FeatureFlagSettingValuesApi~replaceSettingValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingValueModelHaljson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace value
     * This endpoint replaces the whole value of a Feature Flag or Setting in a specified Environment.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't  want to change in its original state. Not listing one means that it will reset.  For example: We have the following resource. ``` {  \"rolloutPercentageItems\": [   {    \"percentage\": 30,    \"value\": true   },   {    \"percentage\": 70,    \"value\": false   }  ],  \"rolloutRules\": [],  \"value\": false } ``` If we send a replace request body as below: ``` {  \"value\": true } ``` Then besides that the default value is set to `true`, all the Percentage Rules are deleted.  So we get a response like this: ``` {  \"rolloutPercentageItems\": [],  \"rolloutRules\": [],  \"value\": true } ```  The `rolloutRules` property describes two types of rules:  - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required. - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
     * @param {String} environmentId The identifier of the Environment.
     * @param {Number} settingId The id of the Setting.
     * @param {module:model/UpdateSettingValueModel} updateSettingValueModel 
     * @param {Object} opts Optional parameters
     * @param {String} [reason] The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.
     * @param {module:api/FeatureFlagSettingValuesApi~replaceSettingValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingValueModelHaljson}
     */
    replaceSettingValue(environmentId, settingId, updateSettingValueModel, opts, callback) {
      opts = opts || {};
      let postBody = updateSettingValueModel;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling replaceSettingValue");
      }
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling replaceSettingValue");
      }
      // verify the required parameter 'updateSettingValueModel' is set
      if (updateSettingValueModel === undefined || updateSettingValueModel === null) {
        throw new Error("Missing the required parameter 'updateSettingValueModel' when calling replaceSettingValue");
      }

      let pathParams = {
        'environmentId': environmentId,
        'settingId': settingId
      };
      let queryParams = {
        'reason': opts['reason']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = SettingValueModelHaljson;
      return this.apiClient.callApi(
        '/v1/environments/{environmentId}/settings/{settingId}/value', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSettingValue operation.
     * @callback module:api/FeatureFlagSettingValuesApi~updateSettingValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingValueModelHaljson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update value
     * This endpoint updates the value of a Feature Flag or Setting  with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don't want to change. It supports collection reordering, so it also  can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource. ``` {  \"rolloutPercentageItems\": [   {    \"percentage\": 30,    \"value\": true   },   {    \"percentage\": 70,    \"value\": false   }  ],  \"rolloutRules\": [],  \"value\": false } ``` If we send an update request body as below: ``` [  {   \"op\": \"replace\",   \"path\": \"/value\",   \"value\": true  } ] ``` Only the default value is going to be set to `true` and all the Percentage Rules are remaining unchanged. So we get a response like this: ``` {  \"rolloutPercentageItems\": [   {    \"percentage\": 30,    \"value\": true   },   {    \"percentage\": 70,    \"value\": false   }  ],  \"rolloutRules\": [],  \"value\": true } ```  The `rolloutRules` property describes two types of rules:  - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required. - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
     * @param {String} environmentId The identifier of the Environment.
     * @param {Number} settingId The id of the Setting.
     * @param {module:model/JsonPatch} jsonPatch 
     * @param {Object} opts Optional parameters
     * @param {String} [reason] The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.
     * @param {module:api/FeatureFlagSettingValuesApi~updateSettingValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingValueModelHaljson}
     */
    updateSettingValue(environmentId, settingId, jsonPatch, opts, callback) {
      opts = opts || {};
      let postBody = jsonPatch;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling updateSettingValue");
      }
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling updateSettingValue");
      }
      // verify the required parameter 'jsonPatch' is set
      if (jsonPatch === undefined || jsonPatch === null) {
        throw new Error("Missing the required parameter 'jsonPatch' when calling updateSettingValue");
      }

      let pathParams = {
        'environmentId': environmentId,
        'settingId': settingId
      };
      let queryParams = {
        'reason': opts['reason']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = SettingValueModelHaljson;
      return this.apiClient.callApi(
        '/v1/environments/{environmentId}/settings/{settingId}/value', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
