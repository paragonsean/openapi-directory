/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddUserToGroupRequest from '../model/AddUserToGroupRequest';
import InviteMembersRequest from '../model/InviteMembersRequest';
import MemberModel from '../model/MemberModel';
import UserModel from '../model/UserModel';

/**
* Members service.
* @module api/MembersApi
* @version v1
*/
export default class MembersApi {

    /**
    * Constructs a new MembersApi. 
    * @alias module:api/MembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMemberToGroup operation.
     * @callback module:api/MembersApi~addMemberToGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Member Permissions
     * This endpoint adds a Member identified by the `userId` to one or more Permission Groups.  This endpoint can also be used to move a Member between Permission Groups within a Product. Only a single Permission Group can be set per Product.
     * @param {String} organizationId The identifier of the Organization.
     * @param {String} userId The identifier of the Member.
     * @param {module:model/AddUserToGroupRequest} addUserToGroupRequest 
     * @param {module:api/MembersApi~addMemberToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMemberToGroup(organizationId, userId, addUserToGroupRequest, callback) {
      let postBody = addUserToGroupRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addMemberToGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addMemberToGroup");
      }
      // verify the required parameter 'addUserToGroupRequest' is set
      if (addUserToGroupRequest === undefined || addUserToGroupRequest === null) {
        throw new Error("Missing the required parameter 'addUserToGroupRequest' when calling addMemberToGroup");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/organizations/{organizationId}/members/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationMember operation.
     * @callback module:api/MembersApi~deleteOrganizationMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Member from Organization
     * This endpoint removes a Member identified by the `userId` from the  given Organization identified by the `organizationId` parameter.
     * @param {String} organizationId The identifier of the Organization.
     * @param {String} userId The identifier of the Member.
     * @param {module:api/MembersApi~deleteOrganizationMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationMember(organizationId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationMember");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteOrganizationMember");
      }

      let pathParams = {
        'organizationId': organizationId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/organizations/{organizationId}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductMember operation.
     * @callback module:api/MembersApi~deleteProductMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Member from Product
     * This endpoint removes a Member identified by the `userId` from the  given Product identified by the `productId` parameter.
     * @param {String} productId The identifier of the Product.
     * @param {String} userId The identifier of the Member.
     * @param {module:api/MembersApi~deleteProductMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProductMember(productId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductMember");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteProductMember");
      }

      let pathParams = {
        'productId': productId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/products/{productId}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationMembers operation.
     * @callback module:api/MembersApi~getOrganizationMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Organization Members
     * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.
     * @param {String} organizationId The identifier of the Organization.
     * @param {module:api/MembersApi~getOrganizationMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserModel>}
     */
    getOrganizationMembers(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationMembers");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = [UserModel];
      return this.apiClient.callApi(
        '/v1/organizations/{organizationId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductMembers operation.
     * @callback module:api/MembersApi~getProductMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MemberModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Members
     * This endpoint returns the list of Members that belongs  to the given Product, identified by the `productId` parameter.
     * @param {String} productId The identifier of the Product.
     * @param {module:api/MembersApi~getProductMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MemberModel>}
     */
    getProductMembers(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductMembers");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = [MemberModel];
      return this.apiClient.callApi(
        '/v1/products/{productId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteMember operation.
     * @callback module:api/MembersApi~inviteMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite Member
     * This endpoint invites a Member into the given Product identified by the `productId` parameter.
     * @param {String} productId The identifier of the Product.
     * @param {module:model/InviteMembersRequest} inviteMembersRequest 
     * @param {module:api/MembersApi~inviteMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    inviteMember(productId, inviteMembersRequest, callback) {
      let postBody = inviteMembersRequest;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling inviteMember");
      }
      // verify the required parameter 'inviteMembersRequest' is set
      if (inviteMembersRequest === undefined || inviteMembersRequest === null) {
        throw new Error("Missing the required parameter 'inviteMembersRequest' when calling inviteMember");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/products/{productId}/members/invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
