/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSettingInitialValues from '../model/CreateSettingInitialValues';
import JsonPatch from '../model/JsonPatch';
import SettingModel from '../model/SettingModel';
import SettingModelHaljson from '../model/SettingModelHaljson';

/**
* FeatureFlagsSettings service.
* @module api/FeatureFlagsSettingsApi
* @version v1
*/
export default class FeatureFlagsSettingsApi {

    /**
    * Constructs a new FeatureFlagsSettingsApi. 
    * @alias module:api/FeatureFlagsSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSetting operation.
     * @callback module:api/FeatureFlagsSettingsApi~createSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingModelHaljson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Flag
     * This endpoint creates a new Feature Flag or Setting in a specified Config identified by the `configId` parameter.  **Important:** The `key` attribute must be unique within the given Config.
     * @param {String} configId The identifier of the Config.
     * @param {module:model/CreateSettingInitialValues} createSettingInitialValues 
     * @param {module:api/FeatureFlagsSettingsApi~createSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingModelHaljson}
     */
    createSetting(configId, createSettingInitialValues, callback) {
      let postBody = createSettingInitialValues;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling createSetting");
      }
      // verify the required parameter 'createSettingInitialValues' is set
      if (createSettingInitialValues === undefined || createSettingInitialValues === null) {
        throw new Error("Missing the required parameter 'createSettingInitialValues' when calling createSetting");
      }

      let pathParams = {
        'configId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = SettingModelHaljson;
      return this.apiClient.callApi(
        '/v1/configs/{configId}/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSetting operation.
     * @callback module:api/FeatureFlagsSettingsApi~deleteSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Flag
     * This endpoint removes a Feature Flag or Setting from a specified Config,  identified by the `configId` parameter.
     * @param {Number} settingId The identifier of the Setting.
     * @param {module:api/FeatureFlagsSettingsApi~deleteSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSetting(settingId, callback) {
      let postBody = null;
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteSetting");
      }

      let pathParams = {
        'settingId': settingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/settings/{settingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSetting operation.
     * @callback module:api/FeatureFlagsSettingsApi~getSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingModelHaljson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Flag
     * This endpoint returns the metadata attributes of a Feature Flag or Setting  identified by the `settingId` parameter.
     * @param {Number} settingId The identifier of the Setting.
     * @param {module:api/FeatureFlagsSettingsApi~getSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingModelHaljson}
     */
    getSetting(settingId, callback) {
      let postBody = null;
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling getSetting");
      }

      let pathParams = {
        'settingId': settingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = SettingModelHaljson;
      return this.apiClient.callApi(
        '/v1/settings/{settingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettings operation.
     * @callback module:api/FeatureFlagsSettingsApi~getSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SettingModelHaljson>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Flags
     * This endpoint returns the list of the Feature Flags and Settings defined in a  specified Config, identified by the `configId` parameter.
     * @param {String} configId The identifier of the Config.
     * @param {module:api/FeatureFlagsSettingsApi~getSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SettingModelHaljson>}
     */
    getSettings(configId, callback) {
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getSettings");
      }

      let pathParams = {
        'configId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = [SettingModelHaljson];
      return this.apiClient.callApi(
        '/v1/configs/{configId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSetting operation.
     * @callback module:api/FeatureFlagsSettingsApi~updateSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingModelHaljson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Flag
     * This endpoint updates the metadata of a Feature Flag or Setting  with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Config.  Only the `name`, `hint` and `tags` attributes are modifiable by this endpoint. The `tags` attribute is a simple collection of the [tag IDs](#operation/get-tags) attached to the given setting.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don't want to change.  For example: We have the following resource. ``` {  \"settingId\": 5345,  \"key\": \"myGrandFeature\",  \"name\": \"Tihs is a naem with soem typos.\",  \"hint\": \"This flag controls my grandioso feature.\",  \"settingType\": \"boolean\",  \"tags\": [   {    \"tagId\": 0,    \"name\": \"sample tag\",    \"color\": \"whale\"   }  ] } ``` If we send an update request body as below (it changes the name and adds the already existing tag with the id 2): ``` [  {   \"op\": \"replace\",   \"path\": \"/name\",   \"value\": \"This is the name without typos.\"  },  {   \"op\": \"add\",   \"path\": \"/tags/-\",   \"value\": 2  } ] ``` Only the `name` and `tags` are going to be updated and all the other attributes are remaining unchanged. So we get a response like this: ``` {  \"settingId\": 5345,  \"key\": \"myGrandFeature\",  \"name\": \"This is the name without typos.\",  \"hint\": \"This flag controls my grandioso feature.\",  \"settingType\": \"boolean\",  \"tags\": [   {    \"tagId\": 0,    \"name\": \"sample tag\",    \"color\": \"whale\"   },   {    \"tagId\": 2,    \"name\": \"another tag\",    \"color\": \"koala\"   }  ] } ```
     * @param {Number} settingId The identifier of the Setting.
     * @param {module:model/JsonPatch} jsonPatch 
     * @param {module:api/FeatureFlagsSettingsApi~updateSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingModelHaljson}
     */
    updateSetting(settingId, jsonPatch, callback) {
      let postBody = jsonPatch;
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling updateSetting");
      }
      // verify the required parameter 'jsonPatch' is set
      if (jsonPatch === undefined || jsonPatch === null) {
        throw new Error("Missing the required parameter 'jsonPatch' when calling updateSetting");
      }

      let pathParams = {
        'settingId': settingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = SettingModelHaljson;
      return this.apiClient.callApi(
        '/v1/settings/{settingId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
