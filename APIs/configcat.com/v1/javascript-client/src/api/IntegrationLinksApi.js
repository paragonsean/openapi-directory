/**
 * ConfigCat Public Management API
 * **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The purpose of this API is to access the ConfigCat platform programmatically.  You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.   The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available here: [swagger.json](v1/swagger.json).  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrUpdateIntegrationLinkModel from '../model/AddOrUpdateIntegrationLinkModel';
import AddOrUpdateJiraIntegrationLinkModel from '../model/AddOrUpdateJiraIntegrationLinkModel';
import ConnectRequest from '../model/ConnectRequest';
import DeleteIntegrationLinkModel from '../model/DeleteIntegrationLinkModel';
import IntegrationLinkDetailsModel from '../model/IntegrationLinkDetailsModel';
import IntegrationLinkModel from '../model/IntegrationLinkModel';
import IntegrationLinkType from '../model/IntegrationLinkType';

/**
* IntegrationLinks service.
* @module api/IntegrationLinksApi
* @version v1
*/
export default class IntegrationLinksApi {

    /**
    * Constructs a new IntegrationLinksApi. 
    * @alias module:api/IntegrationLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrUpdateIntegrationLink operation.
     * @callback module:api/IntegrationLinksApi~addOrUpdateIntegrationLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationLinkModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update Integration link
     * 
     * @param {String} environmentId The identifier of the Environment.
     * @param {Number} settingId The id of the Setting.
     * @param {module:model/IntegrationLinkType} integrationLinkType The integration link's type.
     * @param {String} key The key of the integration link.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddOrUpdateIntegrationLinkModel} [addOrUpdateIntegrationLinkModel] 
     * @param {module:api/IntegrationLinksApi~addOrUpdateIntegrationLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationLinkModel}
     */
    addOrUpdateIntegrationLink(environmentId, settingId, integrationLinkType, key, opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrUpdateIntegrationLinkModel'];
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling addOrUpdateIntegrationLink");
      }
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling addOrUpdateIntegrationLink");
      }
      // verify the required parameter 'integrationLinkType' is set
      if (integrationLinkType === undefined || integrationLinkType === null) {
        throw new Error("Missing the required parameter 'integrationLinkType' when calling addOrUpdateIntegrationLink");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addOrUpdateIntegrationLink");
      }

      let pathParams = {
        'environmentId': environmentId,
        'settingId': settingId,
        'integrationLinkType': integrationLinkType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = IntegrationLinkModel;
      return this.apiClient.callApi(
        '/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegrationLink operation.
     * @callback module:api/IntegrationLinksApi~deleteIntegrationLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIntegrationLinkModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Integration link
     * 
     * @param {String} environmentId The identifier of the Environment.
     * @param {Number} settingId The id of the Setting.
     * @param {module:model/IntegrationLinkType} integrationLinkType The integration's type.
     * @param {String} key The key of the integration link.
     * @param {module:api/IntegrationLinksApi~deleteIntegrationLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIntegrationLinkModel}
     */
    deleteIntegrationLink(environmentId, settingId, integrationLinkType, key, callback) {
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling deleteIntegrationLink");
      }
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling deleteIntegrationLink");
      }
      // verify the required parameter 'integrationLinkType' is set
      if (integrationLinkType === undefined || integrationLinkType === null) {
        throw new Error("Missing the required parameter 'integrationLinkType' when calling deleteIntegrationLink");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteIntegrationLink");
      }

      let pathParams = {
        'environmentId': environmentId,
        'settingId': settingId,
        'integrationLinkType': integrationLinkType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = DeleteIntegrationLinkModel;
      return this.apiClient.callApi(
        '/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrationLinkDetails operation.
     * @callback module:api/IntegrationLinksApi~getIntegrationLinkDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationLinkDetailsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Integration link
     * 
     * @param {module:model/IntegrationLinkType} integrationLinkType The integration link's type.
     * @param {String} key The key of the integration link.
     * @param {module:api/IntegrationLinksApi~getIntegrationLinkDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationLinkDetailsModel}
     */
    getIntegrationLinkDetails(integrationLinkType, key, callback) {
      let postBody = null;
      // verify the required parameter 'integrationLinkType' is set
      if (integrationLinkType === undefined || integrationLinkType === null) {
        throw new Error("Missing the required parameter 'integrationLinkType' when calling getIntegrationLinkDetails");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getIntegrationLinkDetails");
      }

      let pathParams = {
        'integrationLinkType': integrationLinkType,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = IntegrationLinkDetailsModel;
      return this.apiClient.callApi(
        '/v1/integrationLink/{integrationLinkType}/{key}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jiraAddOrUpdateIntegrationLink operation.
     * @callback module:api/IntegrationLinksApi~jiraAddOrUpdateIntegrationLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationLinkModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} environmentId The identifier of the Environment.
     * @param {Number} settingId The id of the Setting.
     * @param {String} key The key of the integration link.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddOrUpdateJiraIntegrationLinkModel} [addOrUpdateJiraIntegrationLinkModel] 
     * @param {module:api/IntegrationLinksApi~jiraAddOrUpdateIntegrationLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationLinkModel}
     */
    jiraAddOrUpdateIntegrationLink(environmentId, settingId, key, opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrUpdateJiraIntegrationLinkModel'];
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling jiraAddOrUpdateIntegrationLink");
      }
      // verify the required parameter 'settingId' is set
      if (settingId === undefined || settingId === null) {
        throw new Error("Missing the required parameter 'settingId' when calling jiraAddOrUpdateIntegrationLink");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling jiraAddOrUpdateIntegrationLink");
      }

      let pathParams = {
        'environmentId': environmentId,
        'settingId': settingId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/hal+json', 'application/json'];
      let returnType = IntegrationLinkModel;
      return this.apiClient.callApi(
        '/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1JiraConnectPost operation.
     * @callback module:api/IntegrationLinksApi~v1JiraConnectPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ConnectRequest} [connectRequest] 
     * @param {module:api/IntegrationLinksApi~v1JiraConnectPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1JiraConnectPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['connectRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/jira/Connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
