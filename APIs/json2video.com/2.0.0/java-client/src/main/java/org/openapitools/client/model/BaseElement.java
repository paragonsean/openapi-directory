/*
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:13.123987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseElement {
  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private Boolean cache = true;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Float duration = -1f;

  public static final String SERIALIZED_NAME_EXTRA_TIME = "extra-time";
  @SerializedName(SERIALIZED_NAME_EXTRA_TIME)
  private Float extraTime = 0f;

  public static final String SERIALIZED_NAME_FADE_IN = "fade-in";
  @SerializedName(SERIALIZED_NAME_FADE_IN)
  private Float fadeIn;

  public static final String SERIALIZED_NAME_FADE_OUT = "fade-out";
  @SerializedName(SERIALIZED_NAME_FADE_OUT)
  private Float fadeOut;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Float start = 0f;

  public static final String SERIALIZED_NAME_Z_INDEX = "z-index";
  @SerializedName(SERIALIZED_NAME_Z_INDEX)
  private BigDecimal zIndex = new BigDecimal("0");

  public BaseElement() {
  }

  public BaseElement cache(Boolean cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Element&#39;s cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
   * @return cache
   */
  @javax.annotation.Nullable
  public Boolean getCache() {
    return cache;
  }

  public void setCache(Boolean cache) {
    this.cache = cache;
  }


  public BaseElement comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Used for adding your comments
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public BaseElement duration(Float duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Element&#39;s duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
   * @return duration
   */
  @javax.annotation.Nullable
  public Float getDuration() {
    return duration;
  }

  public void setDuration(Float duration) {
    this.duration = duration;
  }


  public BaseElement extraTime(Float extraTime) {
    this.extraTime = extraTime;
    return this;
  }

  /**
   * Element&#39;s time span added after the playback.
   * @return extraTime
   */
  @javax.annotation.Nullable
  public Float getExtraTime() {
    return extraTime;
  }

  public void setExtraTime(Float extraTime) {
    this.extraTime = extraTime;
  }


  public BaseElement fadeIn(Float fadeIn) {
    this.fadeIn = fadeIn;
    return this;
  }

  /**
   * Adds a fade in effect to the element. Value in seconds.
   * minimum: 0
   * @return fadeIn
   */
  @javax.annotation.Nullable
  public Float getFadeIn() {
    return fadeIn;
  }

  public void setFadeIn(Float fadeIn) {
    this.fadeIn = fadeIn;
  }


  public BaseElement fadeOut(Float fadeOut) {
    this.fadeOut = fadeOut;
    return this;
  }

  /**
   * Adds a fade out effect to the element. Value in seconds.
   * minimum: 0
   * @return fadeOut
   */
  @javax.annotation.Nullable
  public Float getFadeOut() {
    return fadeOut;
  }

  public void setFadeOut(Float fadeOut) {
    this.fadeOut = fadeOut;
  }


  public BaseElement start(Float start) {
    this.start = start;
    return this;
  }

  /**
   * Element&#39;s starting time in seconds relative to the container scene or the movie if the element is in the Movie&#39;s elements array.
   * @return start
   */
  @javax.annotation.Nullable
  public Float getStart() {
    return start;
  }

  public void setStart(Float start) {
    this.start = start;
  }


  public BaseElement zIndex(BigDecimal zIndex) {
    this.zIndex = zIndex;
    return this;
  }

  /**
   * Element&#39;s z-index. Use this property to reorganize the layering of the elements like in HTML
   * @return zIndex
   */
  @javax.annotation.Nullable
  public BigDecimal getzIndex() {
    return zIndex;
  }

  public void setzIndex(BigDecimal zIndex) {
    this.zIndex = zIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseElement baseElement = (BaseElement) o;
    return Objects.equals(this.cache, baseElement.cache) &&
        Objects.equals(this.comment, baseElement.comment) &&
        Objects.equals(this.duration, baseElement.duration) &&
        Objects.equals(this.extraTime, baseElement.extraTime) &&
        Objects.equals(this.fadeIn, baseElement.fadeIn) &&
        Objects.equals(this.fadeOut, baseElement.fadeOut) &&
        Objects.equals(this.start, baseElement.start) &&
        Objects.equals(this.zIndex, baseElement.zIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cache, comment, duration, extraTime, fadeIn, fadeOut, start, zIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseElement {\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    extraTime: ").append(toIndentedString(extraTime)).append("\n");
    sb.append("    fadeIn: ").append(toIndentedString(fadeIn)).append("\n");
    sb.append("    fadeOut: ").append(toIndentedString(fadeOut)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    zIndex: ").append(toIndentedString(zIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache");
    openapiFields.add("comment");
    openapiFields.add("duration");
    openapiFields.add("extra-time");
    openapiFields.add("fade-in");
    openapiFields.add("fade-out");
    openapiFields.add("start");
    openapiFields.add("z-index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseElement is not found in the empty JSON string", BaseElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseElement.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseElement>() {
           @Override
           public void write(JsonWriter out, BaseElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseElement
   * @throws IOException if the JSON string is invalid with respect to BaseElement
   */
  public static BaseElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseElement.class);
  }

  /**
   * Convert an instance of BaseElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

