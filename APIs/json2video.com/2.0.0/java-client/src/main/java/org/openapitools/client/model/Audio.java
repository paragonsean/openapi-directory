/*
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Audio
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:13.123987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Audio {
  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private Boolean cache = true;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Float duration = -1f;

  public static final String SERIALIZED_NAME_EXTRA_TIME = "extra-time";
  @SerializedName(SERIALIZED_NAME_EXTRA_TIME)
  private Float extraTime = 0f;

  public static final String SERIALIZED_NAME_FADE_IN = "fade-in";
  @SerializedName(SERIALIZED_NAME_FADE_IN)
  private Float fadeIn;

  public static final String SERIALIZED_NAME_FADE_OUT = "fade-out";
  @SerializedName(SERIALIZED_NAME_FADE_OUT)
  private Float fadeOut;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Float start = 0f;

  public static final String SERIALIZED_NAME_Z_INDEX = "z-index";
  @SerializedName(SERIALIZED_NAME_Z_INDEX)
  private BigDecimal zIndex = new BigDecimal("0");

  public static final String SERIALIZED_NAME_MUTED = "muted";
  @SerializedName(SERIALIZED_NAME_MUTED)
  private Boolean muted = false;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private BigDecimal volume = new BigDecimal("5");

  public static final String SERIALIZED_NAME_SRC = "src";
  @SerializedName(SERIALIZED_NAME_SRC)
  private URI src;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUDIO("audio");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Audio() {
  }

  public Audio cache(Boolean cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Element&#39;s cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
   * @return cache
   */
  @javax.annotation.Nullable
  public Boolean getCache() {
    return cache;
  }

  public void setCache(Boolean cache) {
    this.cache = cache;
  }


  public Audio comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Used for adding your comments
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Audio duration(Float duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Element&#39;s duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
   * @return duration
   */
  @javax.annotation.Nullable
  public Float getDuration() {
    return duration;
  }

  public void setDuration(Float duration) {
    this.duration = duration;
  }


  public Audio extraTime(Float extraTime) {
    this.extraTime = extraTime;
    return this;
  }

  /**
   * Element&#39;s time span added after the playback.
   * @return extraTime
   */
  @javax.annotation.Nullable
  public Float getExtraTime() {
    return extraTime;
  }

  public void setExtraTime(Float extraTime) {
    this.extraTime = extraTime;
  }


  public Audio fadeIn(Float fadeIn) {
    this.fadeIn = fadeIn;
    return this;
  }

  /**
   * Adds a fade in effect to the element. Value in seconds.
   * minimum: 0
   * @return fadeIn
   */
  @javax.annotation.Nullable
  public Float getFadeIn() {
    return fadeIn;
  }

  public void setFadeIn(Float fadeIn) {
    this.fadeIn = fadeIn;
  }


  public Audio fadeOut(Float fadeOut) {
    this.fadeOut = fadeOut;
    return this;
  }

  /**
   * Adds a fade out effect to the element. Value in seconds.
   * minimum: 0
   * @return fadeOut
   */
  @javax.annotation.Nullable
  public Float getFadeOut() {
    return fadeOut;
  }

  public void setFadeOut(Float fadeOut) {
    this.fadeOut = fadeOut;
  }


  public Audio start(Float start) {
    this.start = start;
    return this;
  }

  /**
   * Element&#39;s starting time in seconds relative to the container scene or the movie if the element is in the Movie&#39;s elements array.
   * @return start
   */
  @javax.annotation.Nullable
  public Float getStart() {
    return start;
  }

  public void setStart(Float start) {
    this.start = start;
  }


  public Audio zIndex(BigDecimal zIndex) {
    this.zIndex = zIndex;
    return this;
  }

  /**
   * Element&#39;s z-index. Use this property to reorganize the layering of the elements like in HTML
   * @return zIndex
   */
  @javax.annotation.Nullable
  public BigDecimal getzIndex() {
    return zIndex;
  }

  public void setzIndex(BigDecimal zIndex) {
    this.zIndex = zIndex;
  }


  public Audio muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

  /**
   * Mutes the audio
   * @return muted
   */
  @javax.annotation.Nullable
  public Boolean getMuted() {
    return muted;
  }

  public void setMuted(Boolean muted) {
    this.muted = muted;
  }


  public Audio volume(BigDecimal volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Get volume
   * minimum: 0
   * maximum: 10
   * @return volume
   */
  @javax.annotation.Nullable
  public BigDecimal getVolume() {
    return volume;
  }

  public void setVolume(BigDecimal volume) {
    this.volume = volume;
  }


  public Audio src(URI src) {
    this.src = src;
    return this;
  }

  /**
   * Get src
   * @return src
   */
  @javax.annotation.Nullable
  public URI getSrc() {
    return src;
  }

  public void setSrc(URI src) {
    this.src = src;
  }


  public Audio type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Audio audio = (Audio) o;
    return Objects.equals(this.cache, audio.cache) &&
        Objects.equals(this.comment, audio.comment) &&
        Objects.equals(this.duration, audio.duration) &&
        Objects.equals(this.extraTime, audio.extraTime) &&
        Objects.equals(this.fadeIn, audio.fadeIn) &&
        Objects.equals(this.fadeOut, audio.fadeOut) &&
        Objects.equals(this.start, audio.start) &&
        Objects.equals(this.zIndex, audio.zIndex) &&
        Objects.equals(this.muted, audio.muted) &&
        Objects.equals(this.volume, audio.volume) &&
        Objects.equals(this.src, audio.src) &&
        Objects.equals(this.type, audio.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cache, comment, duration, extraTime, fadeIn, fadeOut, start, zIndex, muted, volume, src, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Audio {\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    extraTime: ").append(toIndentedString(extraTime)).append("\n");
    sb.append("    fadeIn: ").append(toIndentedString(fadeIn)).append("\n");
    sb.append("    fadeOut: ").append(toIndentedString(fadeOut)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    zIndex: ").append(toIndentedString(zIndex)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    src: ").append(toIndentedString(src)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache");
    openapiFields.add("comment");
    openapiFields.add("duration");
    openapiFields.add("extra-time");
    openapiFields.add("fade-in");
    openapiFields.add("fade-out");
    openapiFields.add("start");
    openapiFields.add("z-index");
    openapiFields.add("muted");
    openapiFields.add("volume");
    openapiFields.add("src");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Audio
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Audio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Audio is not found in the empty JSON string", Audio.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Audio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Audio` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("src") != null && !jsonObj.get("src").isJsonNull()) && !jsonObj.get("src").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `src` to be a primitive type in the JSON string but got `%s`", jsonObj.get("src").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Audio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Audio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Audio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Audio.class));

       return (TypeAdapter<T>) new TypeAdapter<Audio>() {
           @Override
           public void write(JsonWriter out, Audio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Audio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Audio given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Audio
   * @throws IOException if the JSON string is invalid with respect to Audio
   */
  public static Audio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Audio.class);
  }

  /**
   * Convert an instance of Audio to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

