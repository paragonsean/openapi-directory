/*
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MovieElementsInner;
import org.openapitools.client.model.Scene;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object defining the movie to be rendered
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:13.123987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Movie {
  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private Boolean cache = true;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft = true;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<MovieElementsInner> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPORTS = "exports";
  @SerializedName(SERIALIZED_NAME_EXPORTS)
  private List<Object> exports = new ArrayList<>();

  public static final String SERIALIZED_NAME_FPS = "fps";
  @SerializedName(SERIALIZED_NAME_FPS)
  private Integer fps = 25;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height = 360;

  /**
   * Gets or Sets quality
   */
  @JsonAdapter(QualityEnum.Adapter.class)
  public enum QualityEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QualityEnum fromValue(String value) {
      for (QualityEnum b : QualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QualityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QualityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QualityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private QualityEnum quality = QualityEnum.HIGH;

  /**
   * Gets or Sets resolution
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    SD("sd"),
    
    HD("hd"),
    
    FULL_HD("full-hd"),
    
    SQUARED("squared"),
    
    INSTAGRAM_STORY("instagram-story"),
    
    INSTAGRAM_FEED("instagram-feed"),
    
    TWITTER_LANDSCAPE("twitter-landscape"),
    
    TWITTER_PORTRAIT("twitter-portrait");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  public static final String SERIALIZED_NAME_SCENES = "scenes";
  @SerializedName(SERIALIZED_NAME_SCENES)
  private List<Scene> scenes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Object settings = {};

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width = 640;

  public Movie() {
  }

  public Movie cache(Boolean cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Get cache
   * @return cache
   */
  @javax.annotation.Nullable
  public Boolean getCache() {
    return cache;
  }

  public void setCache(Boolean cache) {
    this.cache = cache;
  }


  public Movie comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Used for adding your comments
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Movie draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Draft movies include a watermark. Check your plan how many draft and final movies you have
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public Movie elements(List<MovieElementsInner> elements) {
    this.elements = elements;
    return this;
  }

  public Movie addElementsItem(MovieElementsInner elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * Get elements
   * @return elements
   */
  @javax.annotation.Nullable
  public List<MovieElementsInner> getElements() {
    return elements;
  }

  public void setElements(List<MovieElementsInner> elements) {
    this.elements = elements;
  }


  public Movie exports(List<Object> exports) {
    this.exports = exports;
    return this;
  }

  public Movie addExportsItem(Object exportsItem) {
    if (this.exports == null) {
      this.exports = new ArrayList<>();
    }
    this.exports.add(exportsItem);
    return this;
  }

  /**
   * You can define different types of exports for your movie. Check the &lt;a href&#x3D;\&quot;https://json2video.com/docs/tutorial/exports\&quot;&gt;documentation&lt;/a&gt; for more information
   * @return exports
   */
  @javax.annotation.Nullable
  public List<Object> getExports() {
    return exports;
  }

  public void setExports(List<Object> exports) {
    this.exports = exports;
  }


  public Movie fps(Integer fps) {
    this.fps = fps;
    return this;
  }

  /**
   * Frames per second
   * @return fps
   */
  @javax.annotation.Nullable
  public Integer getFps() {
    return fps;
  }

  public void setFps(Integer fps) {
    this.fps = fps;
  }


  public Movie height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * minimum: 50
   * maximum: 1080
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Movie quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

  /**
   * Get quality
   * @return quality
   */
  @javax.annotation.Nullable
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }


  public Movie resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  public Movie scenes(List<Scene> scenes) {
    this.scenes = scenes;
    return this;
  }

  public Movie addScenesItem(Scene scenesItem) {
    if (this.scenes == null) {
      this.scenes = new ArrayList<>();
    }
    this.scenes.add(scenesItem);
    return this;
  }

  /**
   * Get scenes
   * @return scenes
   */
  @javax.annotation.Nonnull
  public List<Scene> getScenes() {
    return scenes;
  }

  public void setScenes(List<Scene> scenes) {
    this.scenes = scenes;
  }


  public Movie settings(Object settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Movie advanced settings
   * @return settings
   */
  @javax.annotation.Nullable
  public Object getSettings() {
    return settings;
  }

  public void setSettings(Object settings) {
    this.settings = settings;
  }


  public Movie width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * minimum: 50
   * maximum: 1920
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Movie movie = (Movie) o;
    return Objects.equals(this.cache, movie.cache) &&
        Objects.equals(this.comment, movie.comment) &&
        Objects.equals(this.draft, movie.draft) &&
        Objects.equals(this.elements, movie.elements) &&
        Objects.equals(this.exports, movie.exports) &&
        Objects.equals(this.fps, movie.fps) &&
        Objects.equals(this.height, movie.height) &&
        Objects.equals(this.quality, movie.quality) &&
        Objects.equals(this.resolution, movie.resolution) &&
        Objects.equals(this.scenes, movie.scenes) &&
        Objects.equals(this.settings, movie.settings) &&
        Objects.equals(this.width, movie.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cache, comment, draft, elements, exports, fps, height, quality, resolution, scenes, settings, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Movie {\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    exports: ").append(toIndentedString(exports)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    scenes: ").append(toIndentedString(scenes)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache");
    openapiFields.add("comment");
    openapiFields.add("draft");
    openapiFields.add("elements");
    openapiFields.add("exports");
    openapiFields.add("fps");
    openapiFields.add("height");
    openapiFields.add("quality");
    openapiFields.add("resolution");
    openapiFields.add("scenes");
    openapiFields.add("settings");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scenes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Movie
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Movie.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Movie is not found in the empty JSON string", Movie.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Movie.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Movie` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Movie.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("elements") != null && !jsonObj.get("elements").isJsonNull()) {
        JsonArray jsonArrayelements = jsonObj.getAsJsonArray("elements");
        if (jsonArrayelements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
          }

          // validate the optional field `elements` (array)
          for (int i = 0; i < jsonArrayelements.size(); i++) {
            MovieElementsInner.validateJsonElement(jsonArrayelements.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exports") != null && !jsonObj.get("exports").isJsonNull() && !jsonObj.get("exports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exports` to be an array in the JSON string but got `%s`", jsonObj.get("exports").toString()));
      }
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      // validate the optional field `quality`
      if (jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) {
        QualityEnum.validateJsonElement(jsonObj.get("quality"));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        ResolutionEnum.validateJsonElement(jsonObj.get("resolution"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("scenes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenes` to be an array in the JSON string but got `%s`", jsonObj.get("scenes").toString()));
      }

      JsonArray jsonArrayscenes = jsonObj.getAsJsonArray("scenes");
      // validate the required field `scenes` (array)
      for (int i = 0; i < jsonArrayscenes.size(); i++) {
        Scene.validateJsonElement(jsonArrayscenes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Movie.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Movie' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Movie> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Movie.class));

       return (TypeAdapter<T>) new TypeAdapter<Movie>() {
           @Override
           public void write(JsonWriter out, Movie value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Movie read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Movie given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Movie
   * @throws IOException if the JSON string is invalid with respect to Movie
   */
  public static Movie fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Movie.class);
  }

  /**
   * Convert an instance of Movie to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

