/*
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.Audio;
import org.openapitools.client.model.Component;
import org.openapitools.client.model.Html;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Template;
import org.openapitools.client.model.Text;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.VisualElementChromaKey;
import org.openapitools.client.model.VisualElementCrop;
import org.openapitools.client.model.VisualElementRotate;
import org.openapitools.client.model.VisualElementScale;
import org.openapitools.client.model.Voice;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:13.123987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MovieElementsInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(MovieElementsInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MovieElementsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MovieElementsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Video> adapterVideo = gson.getDelegateAdapter(this, TypeToken.get(Video.class));
            final TypeAdapter<Image> adapterImage = gson.getDelegateAdapter(this, TypeToken.get(Image.class));
            final TypeAdapter<Text> adapterText = gson.getDelegateAdapter(this, TypeToken.get(Text.class));
            final TypeAdapter<Html> adapterHtml = gson.getDelegateAdapter(this, TypeToken.get(Html.class));
            final TypeAdapter<Component> adapterComponent = gson.getDelegateAdapter(this, TypeToken.get(Component.class));
            final TypeAdapter<Template> adapterTemplate = gson.getDelegateAdapter(this, TypeToken.get(Template.class));
            final TypeAdapter<Audio> adapterAudio = gson.getDelegateAdapter(this, TypeToken.get(Audio.class));
            final TypeAdapter<Voice> adapterVoice = gson.getDelegateAdapter(this, TypeToken.get(Voice.class));

            return (TypeAdapter<T>) new TypeAdapter<MovieElementsInner>() {
                @Override
                public void write(JsonWriter out, MovieElementsInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Video`
                    if (value.getActualInstance() instanceof Video) {
                        JsonElement element = adapterVideo.toJsonTree((Video)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Image`
                    if (value.getActualInstance() instanceof Image) {
                        JsonElement element = adapterImage.toJsonTree((Image)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Text`
                    if (value.getActualInstance() instanceof Text) {
                        JsonElement element = adapterText.toJsonTree((Text)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Html`
                    if (value.getActualInstance() instanceof Html) {
                        JsonElement element = adapterHtml.toJsonTree((Html)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Component`
                    if (value.getActualInstance() instanceof Component) {
                        JsonElement element = adapterComponent.toJsonTree((Component)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Template`
                    if (value.getActualInstance() instanceof Template) {
                        JsonElement element = adapterTemplate.toJsonTree((Template)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Audio`
                    if (value.getActualInstance() instanceof Audio) {
                        JsonElement element = adapterAudio.toJsonTree((Audio)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Voice`
                    if (value.getActualInstance() instanceof Voice) {
                        JsonElement element = adapterVoice.toJsonTree((Voice)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Audio, Component, Html, Image, Template, Text, Video, Voice");
                }

                @Override
                public MovieElementsInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Video
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Video.validateJsonElement(jsonElement);
                        actualAdapter = adapterVideo;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Video'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Video failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Video'", e);
                    }
                    // deserialize Image
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Image.validateJsonElement(jsonElement);
                        actualAdapter = adapterImage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Image'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Image failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Image'", e);
                    }
                    // deserialize Text
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Text.validateJsonElement(jsonElement);
                        actualAdapter = adapterText;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Text'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Text failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Text'", e);
                    }
                    // deserialize Html
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Html.validateJsonElement(jsonElement);
                        actualAdapter = adapterHtml;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Html'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Html failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Html'", e);
                    }
                    // deserialize Component
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Component.validateJsonElement(jsonElement);
                        actualAdapter = adapterComponent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Component'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Component failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Component'", e);
                    }
                    // deserialize Template
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Template.validateJsonElement(jsonElement);
                        actualAdapter = adapterTemplate;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Template'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Template failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Template'", e);
                    }
                    // deserialize Audio
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Audio.validateJsonElement(jsonElement);
                        actualAdapter = adapterAudio;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Audio'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Audio failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Audio'", e);
                    }
                    // deserialize Voice
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Voice.validateJsonElement(jsonElement);
                        actualAdapter = adapterVoice;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Voice'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Voice failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Voice'", e);
                    }

                    if (match == 1) {
                        MovieElementsInner ret = new MovieElementsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for MovieElementsInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public MovieElementsInner() {
        super("oneOf", Boolean.FALSE);
    }

    public MovieElementsInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Video", Video.class);
        schemas.put("Image", Image.class);
        schemas.put("Text", Text.class);
        schemas.put("Html", Html.class);
        schemas.put("Component", Component.class);
        schemas.put("Template", Template.class);
        schemas.put("Audio", Audio.class);
        schemas.put("Voice", Voice.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return MovieElementsInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Audio, Component, Html, Image, Template, Text, Video, Voice
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Video) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Image) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Text) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Html) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Component) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Template) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Audio) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Voice) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Audio, Component, Html, Image, Template, Text, Video, Voice");
    }

    /**
     * Get the actual instance, which can be the following:
     * Audio, Component, Html, Image, Template, Text, Video, Voice
     *
     * @return The actual instance (Audio, Component, Html, Image, Template, Text, Video, Voice)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Video`. If the actual instance is not `Video`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Video`
     * @throws ClassCastException if the instance is not `Video`
     */
    public Video getVideo() throws ClassCastException {
        return (Video)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Image`. If the actual instance is not `Image`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Image`
     * @throws ClassCastException if the instance is not `Image`
     */
    public Image getImage() throws ClassCastException {
        return (Image)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Text`. If the actual instance is not `Text`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Text`
     * @throws ClassCastException if the instance is not `Text`
     */
    public Text getText() throws ClassCastException {
        return (Text)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Html`. If the actual instance is not `Html`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Html`
     * @throws ClassCastException if the instance is not `Html`
     */
    public Html getHtml() throws ClassCastException {
        return (Html)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Component`. If the actual instance is not `Component`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Component`
     * @throws ClassCastException if the instance is not `Component`
     */
    public Component getComponent() throws ClassCastException {
        return (Component)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Template`. If the actual instance is not `Template`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Template`
     * @throws ClassCastException if the instance is not `Template`
     */
    public Template getTemplate() throws ClassCastException {
        return (Template)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Audio`. If the actual instance is not `Audio`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Audio`
     * @throws ClassCastException if the instance is not `Audio`
     */
    public Audio getAudio() throws ClassCastException {
        return (Audio)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Voice`. If the actual instance is not `Voice`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Voice`
     * @throws ClassCastException if the instance is not `Voice`
     */
    public Voice getVoice() throws ClassCastException {
        return (Voice)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MovieElementsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Video
        try {
            Video.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Video failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Image
        try {
            Image.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Image failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Text
        try {
            Text.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Text failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Html
        try {
            Html.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Html failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Component
        try {
            Component.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Component failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Template
        try {
            Template.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Template failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Audio
        try {
            Audio.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Audio failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Voice
        try {
            Voice.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Voice failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for MovieElementsInner with oneOf schemas: Audio, Component, Html, Image, Template, Text, Video, Voice. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of MovieElementsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MovieElementsInner
     * @throws IOException if the JSON string is invalid with respect to MovieElementsInner
     */
    public static MovieElementsInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MovieElementsInner.class);
    }

    /**
     * Convert an instance of MovieElementsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

