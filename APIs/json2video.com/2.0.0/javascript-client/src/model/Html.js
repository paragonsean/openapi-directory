/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseElement from './BaseElement';
import VisualElement from './VisualElement';
import VisualElementChromaKey from './VisualElementChromaKey';
import VisualElementCrop from './VisualElementCrop';
import VisualElementRotate from './VisualElementRotate';
import VisualElementScale from './VisualElementScale';

/**
 * The Html model module.
 * @module model/Html
 * @version 2.0.0
 */
class Html {
    /**
     * Constructs a new <code>Html</code>.
     * Creates a video recording or a screenshot of the provided HTML snippet
     * @alias module:model/Html
     * @implements module:model/BaseElement
     * @implements module:model/VisualElement
     * @param html {String} HTML snippet to render. Compatible with HTML5, CSS3 and Javascript
     * @param type {module:model/Html.TypeEnum} 
     */
    constructor(html, type) { 
        BaseElement.initialize(this);VisualElement.initialize(this);
        Html.initialize(this, html, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, html, type) { 
        obj['cache'] = true;
        obj['duration'] = -1;
        obj['extra-time'] = 0;
        obj['start'] = 0;
        obj['z-index'] = 0;
        obj['position'] = 'custom';
        obj['x'] = 0;
        obj['y'] = 0;
        obj['height'] = -1;
        obj['html'] = html;
        obj['tailwindcss'] = false;
        obj['type'] = type;
        obj['width'] = -1;
    }

    /**
     * Constructs a <code>Html</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Html} obj Optional instance to populate.
     * @return {module:model/Html} The populated <code>Html</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Html();
            BaseElement.constructFromObject(data, obj);
            VisualElement.constructFromObject(data, obj);

            if (data.hasOwnProperty('cache')) {
                obj['cache'] = ApiClient.convertToType(data['cache'], 'Boolean');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('extra-time')) {
                obj['extra-time'] = ApiClient.convertToType(data['extra-time'], 'Number');
            }
            if (data.hasOwnProperty('fade-in')) {
                obj['fade-in'] = ApiClient.convertToType(data['fade-in'], 'Number');
            }
            if (data.hasOwnProperty('fade-out')) {
                obj['fade-out'] = ApiClient.convertToType(data['fade-out'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('z-index')) {
                obj['z-index'] = ApiClient.convertToType(data['z-index'], 'Number');
            }
            if (data.hasOwnProperty('chroma-key')) {
                obj['chroma-key'] = VisualElementChromaKey.constructFromObject(data['chroma-key']);
            }
            if (data.hasOwnProperty('crop')) {
                obj['crop'] = VisualElementCrop.constructFromObject(data['crop']);
            }
            if (data.hasOwnProperty('pan')) {
                obj['pan'] = ApiClient.convertToType(data['pan'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('rotate')) {
                obj['rotate'] = VisualElementRotate.constructFromObject(data['rotate']);
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = VisualElementScale.constructFromObject(data['scale']);
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('zoom')) {
                obj['zoom'] = ApiClient.convertToType(data['zoom'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('tailwindcss')) {
                obj['tailwindcss'] = ApiClient.convertToType(data['tailwindcss'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Html</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Html</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Html.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `chroma-key`
        if (data['chroma-key']) { // data not null
          VisualElementChromaKey.validateJSON(data['chroma-key']);
        }
        // validate the optional field `crop`
        if (data['crop']) { // data not null
          VisualElementCrop.validateJSON(data['crop']);
        }
        // ensure the json data is a string
        if (data['pan'] && !(typeof data['pan'] === 'string' || data['pan'] instanceof String)) {
            throw new Error("Expected the field `pan` to be a primitive type in the JSON string but got " + data['pan']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // validate the optional field `rotate`
        if (data['rotate']) { // data not null
          VisualElementRotate.validateJSON(data['rotate']);
        }
        // validate the optional field `scale`
        if (data['scale']) { // data not null
          VisualElementScale.validateJSON(data['scale']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Html.RequiredProperties = ["html", "type"];

/**
 * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
 * @member {Boolean} cache
 * @default true
 */
Html.prototype['cache'] = true;

/**
 * Used for adding your comments
 * @member {String} comment
 */
Html.prototype['comment'] = undefined;

/**
 * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
 * @member {Number} duration
 * @default -1
 */
Html.prototype['duration'] = -1;

/**
 * Element's time span added after the playback.
 * @member {Number} extra-time
 * @default 0
 */
Html.prototype['extra-time'] = 0;

/**
 * Adds a fade in effect to the element. Value in seconds.
 * @member {Number} fade-in
 */
Html.prototype['fade-in'] = undefined;

/**
 * Adds a fade out effect to the element. Value in seconds.
 * @member {Number} fade-out
 */
Html.prototype['fade-out'] = undefined;

/**
 * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
 * @member {Number} start
 * @default 0
 */
Html.prototype['start'] = 0;

/**
 * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
 * @member {Number} z-index
 * @default 0
 */
Html.prototype['z-index'] = 0;

/**
 * @member {module:model/VisualElementChromaKey} chroma-key
 */
Html.prototype['chroma-key'] = undefined;

/**
 * @member {module:model/VisualElementCrop} crop
 */
Html.prototype['crop'] = undefined;

/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 * @member {module:model/Html.PanEnum} pan
 */
Html.prototype['pan'] = undefined;

/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 * @member {module:model/Html.PositionEnum} position
 * @default 'custom'
 */
Html.prototype['position'] = 'custom';

/**
 * @member {module:model/VisualElementRotate} rotate
 */
Html.prototype['rotate'] = undefined;

/**
 * @member {module:model/VisualElementScale} scale
 */
Html.prototype['scale'] = undefined;

/**
 * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
 * @member {Number} x
 * @default 0
 */
Html.prototype['x'] = 0;

/**
 * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
 * @member {Number} y
 * @default 0
 */
Html.prototype['y'] = 0;

/**
 * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
 * @member {Number} zoom
 */
Html.prototype['zoom'] = undefined;

/**
 * Desired text element height. A value of <code>-1</code> means inherits scenes or movie height
 * @member {Number} height
 * @default -1
 */
Html.prototype['height'] = -1;

/**
 * HTML snippet to render. Compatible with HTML5, CSS3 and Javascript
 * @member {String} html
 */
Html.prototype['html'] = undefined;

/**
 * Enables usage of TailwindCSS for the HTML snippet
 * @member {Boolean} tailwindcss
 * @default false
 */
Html.prototype['tailwindcss'] = false;

/**
 * @member {module:model/Html.TypeEnum} type
 */
Html.prototype['type'] = undefined;

/**
 * Desired text element width. A value of <code>-1</code> means inherits scenes or movie width
 * @member {Number} width
 * @default -1
 */
Html.prototype['width'] = -1;


// Implement BaseElement interface:
/**
 * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
 * @member {Boolean} cache
 * @default true
 */
BaseElement.prototype['cache'] = true;
/**
 * Used for adding your comments
 * @member {String} comment
 */
BaseElement.prototype['comment'] = undefined;
/**
 * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
 * @member {Number} duration
 * @default -1
 */
BaseElement.prototype['duration'] = -1;
/**
 * Element's time span added after the playback.
 * @member {Number} extra-time
 * @default 0
 */
BaseElement.prototype['extra-time'] = 0;
/**
 * Adds a fade in effect to the element. Value in seconds.
 * @member {Number} fade-in
 */
BaseElement.prototype['fade-in'] = undefined;
/**
 * Adds a fade out effect to the element. Value in seconds.
 * @member {Number} fade-out
 */
BaseElement.prototype['fade-out'] = undefined;
/**
 * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
 * @member {Number} start
 * @default 0
 */
BaseElement.prototype['start'] = 0;
/**
 * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
 * @member {Number} z-index
 * @default 0
 */
BaseElement.prototype['z-index'] = 0;
// Implement VisualElement interface:
/**
 * @member {module:model/VisualElementChromaKey} chroma-key
 */
VisualElement.prototype['chroma-key'] = undefined;
/**
 * @member {module:model/VisualElementCrop} crop
 */
VisualElement.prototype['crop'] = undefined;
/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 * @member {module:model/VisualElement.PanEnum} pan
 */
VisualElement.prototype['pan'] = undefined;
/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 * @member {module:model/VisualElement.PositionEnum} position
 * @default 'custom'
 */
VisualElement.prototype['position'] = 'custom';
/**
 * @member {module:model/VisualElementRotate} rotate
 */
VisualElement.prototype['rotate'] = undefined;
/**
 * @member {module:model/VisualElementScale} scale
 */
VisualElement.prototype['scale'] = undefined;
/**
 * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
 * @member {Number} x
 * @default 0
 */
VisualElement.prototype['x'] = 0;
/**
 * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
 * @member {Number} y
 * @default 0
 */
VisualElement.prototype['y'] = 0;
/**
 * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
 * @member {Number} zoom
 */
VisualElement.prototype['zoom'] = undefined;



/**
 * Allowed values for the <code>pan</code> property.
 * @enum {String}
 * @readonly
 */
Html['PanEnum'] = {

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "right"
     * @const
     */
    "right": "right",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right"
};


/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Html['PositionEnum'] = {

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "center-center"
     * @const
     */
    "center-center": "center-center",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Html['TypeEnum'] = {

    /**
     * value: "html"
     * @const
     */
    "html": "html"
};



export default Html;

