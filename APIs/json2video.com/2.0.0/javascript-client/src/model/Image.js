/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VisualElement from './VisualElement';
import VisualElementChromaKey from './VisualElementChromaKey';
import VisualElementCrop from './VisualElementCrop';
import VisualElementRotate from './VisualElementRotate';
import VisualElementScale from './VisualElementScale';

/**
 * The Image model module.
 * @module model/Image
 * @version 2.0.0
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * @alias module:model/Image
     * @implements module:model/VisualElement
     */
    constructor() { 
        VisualElement.initialize(this);
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['position'] = 'custom';
        obj['x'] = 0;
        obj['y'] = 0;
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();
            VisualElement.constructFromObject(data, obj);

            if (data.hasOwnProperty('chroma-key')) {
                obj['chroma-key'] = VisualElementChromaKey.constructFromObject(data['chroma-key']);
            }
            if (data.hasOwnProperty('crop')) {
                obj['crop'] = VisualElementCrop.constructFromObject(data['crop']);
            }
            if (data.hasOwnProperty('pan')) {
                obj['pan'] = ApiClient.convertToType(data['pan'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('rotate')) {
                obj['rotate'] = VisualElementRotate.constructFromObject(data['rotate']);
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = VisualElementScale.constructFromObject(data['scale']);
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('zoom')) {
                obj['zoom'] = ApiClient.convertToType(data['zoom'], 'Number');
            }
            if (data.hasOwnProperty('src')) {
                obj['src'] = ApiClient.convertToType(data['src'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // validate the optional field `chroma-key`
        if (data['chroma-key']) { // data not null
          VisualElementChromaKey.validateJSON(data['chroma-key']);
        }
        // validate the optional field `crop`
        if (data['crop']) { // data not null
          VisualElementCrop.validateJSON(data['crop']);
        }
        // ensure the json data is a string
        if (data['pan'] && !(typeof data['pan'] === 'string' || data['pan'] instanceof String)) {
            throw new Error("Expected the field `pan` to be a primitive type in the JSON string but got " + data['pan']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // validate the optional field `rotate`
        if (data['rotate']) { // data not null
          VisualElementRotate.validateJSON(data['rotate']);
        }
        // validate the optional field `scale`
        if (data['scale']) { // data not null
          VisualElementScale.validateJSON(data['scale']);
        }
        // ensure the json data is a string
        if (data['src'] && !(typeof data['src'] === 'string' || data['src'] instanceof String)) {
            throw new Error("Expected the field `src` to be a primitive type in the JSON string but got " + data['src']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/VisualElementChromaKey} chroma-key
 */
Image.prototype['chroma-key'] = undefined;

/**
 * @member {module:model/VisualElementCrop} crop
 */
Image.prototype['crop'] = undefined;

/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 * @member {module:model/Image.PanEnum} pan
 */
Image.prototype['pan'] = undefined;

/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 * @member {module:model/Image.PositionEnum} position
 * @default 'custom'
 */
Image.prototype['position'] = 'custom';

/**
 * @member {module:model/VisualElementRotate} rotate
 */
Image.prototype['rotate'] = undefined;

/**
 * @member {module:model/VisualElementScale} scale
 */
Image.prototype['scale'] = undefined;

/**
 * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
 * @member {Number} x
 * @default 0
 */
Image.prototype['x'] = 0;

/**
 * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
 * @member {Number} y
 * @default 0
 */
Image.prototype['y'] = 0;

/**
 * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
 * @member {Number} zoom
 */
Image.prototype['zoom'] = undefined;

/**
 * @member {String} src
 */
Image.prototype['src'] = undefined;

/**
 * @member {module:model/Image.TypeEnum} type
 */
Image.prototype['type'] = undefined;


// Implement VisualElement interface:
/**
 * @member {module:model/VisualElementChromaKey} chroma-key
 */
VisualElement.prototype['chroma-key'] = undefined;
/**
 * @member {module:model/VisualElementCrop} crop
 */
VisualElement.prototype['crop'] = undefined;
/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 * @member {module:model/VisualElement.PanEnum} pan
 */
VisualElement.prototype['pan'] = undefined;
/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 * @member {module:model/VisualElement.PositionEnum} position
 * @default 'custom'
 */
VisualElement.prototype['position'] = 'custom';
/**
 * @member {module:model/VisualElementRotate} rotate
 */
VisualElement.prototype['rotate'] = undefined;
/**
 * @member {module:model/VisualElementScale} scale
 */
VisualElement.prototype['scale'] = undefined;
/**
 * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
 * @member {Number} x
 * @default 0
 */
VisualElement.prototype['x'] = 0;
/**
 * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
 * @member {Number} y
 * @default 0
 */
VisualElement.prototype['y'] = 0;
/**
 * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
 * @member {Number} zoom
 */
VisualElement.prototype['zoom'] = undefined;



/**
 * Allowed values for the <code>pan</code> property.
 * @enum {String}
 * @readonly
 */
Image['PanEnum'] = {

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "right"
     * @const
     */
    "right": "right",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right"
};


/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Image['PositionEnum'] = {

    /**
     * value: "top-left"
     * @const
     */
    "top-left": "top-left",

    /**
     * value: "top-right"
     * @const
     */
    "top-right": "top-right",

    /**
     * value: "bottom-right"
     * @const
     */
    "bottom-right": "bottom-right",

    /**
     * value: "bottom-left"
     * @const
     */
    "bottom-left": "bottom-left",

    /**
     * value: "center-center"
     * @const
     */
    "center-center": "center-center",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Image['TypeEnum'] = {

    /**
     * value: "image"
     * @const
     */
    "image": "image"
};



export default Image;

