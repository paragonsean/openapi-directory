/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioElement from './AudioElement';
import BaseElement from './BaseElement';

/**
 * The Voice model module.
 * @module model/Voice
 * @version 2.0.0
 */
class Voice {
    /**
     * Constructs a new <code>Voice</code>.
     * Creates a voice audio element from the provided text
     * @alias module:model/Voice
     * @implements module:model/BaseElement
     * @implements module:model/AudioElement
     * @param text {String} The sentence or sentences to be converted to voice audio
     * @param type {module:model/Voice.TypeEnum} 
     */
    constructor(text, type) { 
        BaseElement.initialize(this);AudioElement.initialize(this);
        Voice.initialize(this, text, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text, type) { 
        obj['cache'] = true;
        obj['duration'] = -1;
        obj['extra-time'] = 0;
        obj['start'] = 0;
        obj['z-index'] = 0;
        obj['muted'] = false;
        obj['volume'] = 5;
        obj['text'] = text;
        obj['type'] = type;
        obj['voice'] = 'en-GB-LibbyNeural';
    }

    /**
     * Constructs a <code>Voice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Voice} obj Optional instance to populate.
     * @return {module:model/Voice} The populated <code>Voice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Voice();
            BaseElement.constructFromObject(data, obj);
            AudioElement.constructFromObject(data, obj);

            if (data.hasOwnProperty('cache')) {
                obj['cache'] = ApiClient.convertToType(data['cache'], 'Boolean');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('extra-time')) {
                obj['extra-time'] = ApiClient.convertToType(data['extra-time'], 'Number');
            }
            if (data.hasOwnProperty('fade-in')) {
                obj['fade-in'] = ApiClient.convertToType(data['fade-in'], 'Number');
            }
            if (data.hasOwnProperty('fade-out')) {
                obj['fade-out'] = ApiClient.convertToType(data['fade-out'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('z-index')) {
                obj['z-index'] = ApiClient.convertToType(data['z-index'], 'Number');
            }
            if (data.hasOwnProperty('muted')) {
                obj['muted'] = ApiClient.convertToType(data['muted'], 'Boolean');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('voice')) {
                obj['voice'] = ApiClient.convertToType(data['voice'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Voice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Voice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Voice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['voice'] && !(typeof data['voice'] === 'string' || data['voice'] instanceof String)) {
            throw new Error("Expected the field `voice` to be a primitive type in the JSON string but got " + data['voice']);
        }

        return true;
    }


}

Voice.RequiredProperties = ["text", "type"];

/**
 * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
 * @member {Boolean} cache
 * @default true
 */
Voice.prototype['cache'] = true;

/**
 * Used for adding your comments
 * @member {String} comment
 */
Voice.prototype['comment'] = undefined;

/**
 * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
 * @member {Number} duration
 * @default -1
 */
Voice.prototype['duration'] = -1;

/**
 * Element's time span added after the playback.
 * @member {Number} extra-time
 * @default 0
 */
Voice.prototype['extra-time'] = 0;

/**
 * Adds a fade in effect to the element. Value in seconds.
 * @member {Number} fade-in
 */
Voice.prototype['fade-in'] = undefined;

/**
 * Adds a fade out effect to the element. Value in seconds.
 * @member {Number} fade-out
 */
Voice.prototype['fade-out'] = undefined;

/**
 * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
 * @member {Number} start
 * @default 0
 */
Voice.prototype['start'] = 0;

/**
 * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
 * @member {Number} z-index
 * @default 0
 */
Voice.prototype['z-index'] = 0;

/**
 * Mutes the audio
 * @member {Boolean} muted
 * @default false
 */
Voice.prototype['muted'] = false;

/**
 * @member {Number} volume
 * @default 5
 */
Voice.prototype['volume'] = 5;

/**
 * The sentence or sentences to be converted to voice audio
 * @member {String} text
 */
Voice.prototype['text'] = undefined;

/**
 * @member {module:model/Voice.TypeEnum} type
 */
Voice.prototype['type'] = undefined;

/**
 * The voice name to be used. Check <a href=\"/docs/tutorial/voice-elements/\">available voices</a>.
 * @member {String} voice
 * @default 'en-GB-LibbyNeural'
 */
Voice.prototype['voice'] = 'en-GB-LibbyNeural';


// Implement BaseElement interface:
/**
 * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
 * @member {Boolean} cache
 * @default true
 */
BaseElement.prototype['cache'] = true;
/**
 * Used for adding your comments
 * @member {String} comment
 */
BaseElement.prototype['comment'] = undefined;
/**
 * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
 * @member {Number} duration
 * @default -1
 */
BaseElement.prototype['duration'] = -1;
/**
 * Element's time span added after the playback.
 * @member {Number} extra-time
 * @default 0
 */
BaseElement.prototype['extra-time'] = 0;
/**
 * Adds a fade in effect to the element. Value in seconds.
 * @member {Number} fade-in
 */
BaseElement.prototype['fade-in'] = undefined;
/**
 * Adds a fade out effect to the element. Value in seconds.
 * @member {Number} fade-out
 */
BaseElement.prototype['fade-out'] = undefined;
/**
 * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
 * @member {Number} start
 * @default 0
 */
BaseElement.prototype['start'] = 0;
/**
 * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
 * @member {Number} z-index
 * @default 0
 */
BaseElement.prototype['z-index'] = 0;
// Implement AudioElement interface:
/**
 * Mutes the audio
 * @member {Boolean} muted
 * @default false
 */
AudioElement.prototype['muted'] = false;
/**
 * @member {Number} volume
 * @default 5
 */
AudioElement.prototype['volume'] = 5;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Voice['TypeEnum'] = {

    /**
     * value: "voice"
     * @const
     */
    "voice": "voice"
};



export default Voice;

