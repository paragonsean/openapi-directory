/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VisualElementChromaKey model module.
 * @module model/VisualElementChromaKey
 * @version 2.0.0
 */
class VisualElementChromaKey {
    /**
     * Constructs a new <code>VisualElementChromaKey</code>.
     * Allows to define a color (or a range of colors) that will be converted to transparent
     * @alias module:model/VisualElementChromaKey
     * @param color {String} Set the color for which alpha will be set to 0 (full transparency)
     */
    constructor(color) { 
        
        VisualElementChromaKey.initialize(this, color);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color) { 
        obj['color'] = color;
        obj['tolerance'] = 25;
    }

    /**
     * Constructs a <code>VisualElementChromaKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VisualElementChromaKey} obj Optional instance to populate.
     * @return {module:model/VisualElementChromaKey} The populated <code>VisualElementChromaKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VisualElementChromaKey();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('tolerance')) {
                obj['tolerance'] = ApiClient.convertToType(data['tolerance'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VisualElementChromaKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VisualElementChromaKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VisualElementChromaKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }

        return true;
    }


}

VisualElementChromaKey.RequiredProperties = ["color"];

/**
 * Set the color for which alpha will be set to 0 (full transparency)
 * @member {String} color
 */
VisualElementChromaKey.prototype['color'] = undefined;

/**
 * Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas
 * @member {Number} tolerance
 * @default 25
 */
VisualElementChromaKey.prototype['tolerance'] = 25;






export default VisualElementChromaKey;

