/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MovieElementsInner from './MovieElementsInner';
import Scene from './Scene';

/**
 * The Movie model module.
 * @module model/Movie
 * @version 2.0.0
 */
class Movie {
    /**
     * Constructs a new <code>Movie</code>.
     * Object defining the movie to be rendered
     * @alias module:model/Movie
     * @param scenes {Array.<module:model/Scene>} 
     */
    constructor(scenes) { 
        
        Movie.initialize(this, scenes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scenes) { 
        obj['cache'] = true;
        obj['draft'] = true;
        obj['fps'] = 25;
        obj['height'] = 360;
        obj['quality'] = 'high';
        obj['scenes'] = scenes;
        obj['width'] = 640;
    }

    /**
     * Constructs a <code>Movie</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Movie} obj Optional instance to populate.
     * @return {module:model/Movie} The populated <code>Movie</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Movie();

            if (data.hasOwnProperty('cache')) {
                obj['cache'] = ApiClient.convertToType(data['cache'], 'Boolean');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], [MovieElementsInner]);
            }
            if (data.hasOwnProperty('exports')) {
                obj['exports'] = ApiClient.convertToType(data['exports'], [Object]);
            }
            if (data.hasOwnProperty('fps')) {
                obj['fps'] = ApiClient.convertToType(data['fps'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('scenes')) {
                obj['scenes'] = ApiClient.convertToType(data['scenes'], [Scene]);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ApiClient.convertToType(data['settings'], Object);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Movie</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Movie</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Movie.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        if (data['elements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elements'])) {
                throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
            }
            // validate the optional field `elements` (array)
            for (const item of data['elements']) {
                MovieElementsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exports'])) {
            throw new Error("Expected the field `exports` to be an array in the JSON data but got " + data['exports']);
        }
        // ensure the json data is a string
        if (data['quality'] && !(typeof data['quality'] === 'string' || data['quality'] instanceof String)) {
            throw new Error("Expected the field `quality` to be a primitive type in the JSON string but got " + data['quality']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        if (data['scenes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scenes'])) {
                throw new Error("Expected the field `scenes` to be an array in the JSON data but got " + data['scenes']);
            }
            // validate the optional field `scenes` (array)
            for (const item of data['scenes']) {
                Scene.validateJSON(item);
            };
        }

        return true;
    }


}

Movie.RequiredProperties = ["scenes"];

/**
 * @member {Boolean} cache
 * @default true
 */
Movie.prototype['cache'] = true;

/**
 * Used for adding your comments
 * @member {String} comment
 */
Movie.prototype['comment'] = undefined;

/**
 * Draft movies include a watermark. Check your plan how many draft and final movies you have
 * @member {Boolean} draft
 * @default true
 */
Movie.prototype['draft'] = true;

/**
 * @member {Array.<module:model/MovieElementsInner>} elements
 */
Movie.prototype['elements'] = undefined;

/**
 * You can define different types of exports for your movie. Check the <a href=\"https://json2video.com/docs/tutorial/exports\">documentation</a> for more information
 * @member {Array.<Object>} exports
 */
Movie.prototype['exports'] = undefined;

/**
 * Frames per second
 * @member {Number} fps
 * @default 25
 */
Movie.prototype['fps'] = 25;

/**
 * @member {Number} height
 * @default 360
 */
Movie.prototype['height'] = 360;

/**
 * @member {module:model/Movie.QualityEnum} quality
 * @default 'high'
 */
Movie.prototype['quality'] = 'high';

/**
 * @member {module:model/Movie.ResolutionEnum} resolution
 */
Movie.prototype['resolution'] = undefined;

/**
 * @member {Array.<module:model/Scene>} scenes
 */
Movie.prototype['scenes'] = undefined;

/**
 * Movie advanced settings
 * @member {Object} settings
 */
Movie.prototype['settings'] = undefined;

/**
 * @member {Number} width
 * @default 640
 */
Movie.prototype['width'] = 640;





/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
Movie['QualityEnum'] = {

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Movie['ResolutionEnum'] = {

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "full-hd"
     * @const
     */
    "full-hd": "full-hd",

    /**
     * value: "squared"
     * @const
     */
    "squared": "squared",

    /**
     * value: "instagram-story"
     * @const
     */
    "instagram-story": "instagram-story",

    /**
     * value: "instagram-feed"
     * @const
     */
    "instagram-feed": "instagram-feed",

    /**
     * value: "twitter-landscape"
     * @const
     */
    "twitter-landscape": "twitter-landscape",

    /**
     * value: "twitter-portrait"
     * @const
     */
    "twitter-portrait": "twitter-portrait"
};



export default Movie;

