/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SceneTransition model module.
 * @module model/SceneTransition
 * @version 2.0.0
 */
class SceneTransition {
    /**
     * Constructs a new <code>SceneTransition</code>.
     * @alias module:model/SceneTransition
     */
    constructor() { 
        
        SceneTransition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['style'] = 'fade';
        obj['type'] = 'xfade';
    }

    /**
     * Constructs a <code>SceneTransition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SceneTransition} obj Optional instance to populate.
     * @return {module:model/SceneTransition} The populated <code>SceneTransition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SceneTransition();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SceneTransition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SceneTransition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Duration of the transition in seconds
 * @member {Number} duration
 */
SceneTransition.prototype['duration'] = undefined;

/**
 * @member {module:model/SceneTransition.StyleEnum} style
 * @default 'fade'
 */
SceneTransition.prototype['style'] = 'fade';

/**
 * @member {module:model/SceneTransition.TypeEnum} type
 * @default 'xfade'
 */
SceneTransition.prototype['type'] = 'xfade';





/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
SceneTransition['StyleEnum'] = {

    /**
     * value: "fade"
     * @const
     */
    "fade": "fade",

    /**
     * value: "wipeleft"
     * @const
     */
    "wipeleft": "wipeleft",

    /**
     * value: "wiperight"
     * @const
     */
    "wiperight": "wiperight",

    /**
     * value: "wipeup"
     * @const
     */
    "wipeup": "wipeup",

    /**
     * value: "wipedown"
     * @const
     */
    "wipedown": "wipedown",

    /**
     * value: "slideleft"
     * @const
     */
    "slideleft": "slideleft",

    /**
     * value: "slideright"
     * @const
     */
    "slideright": "slideright",

    /**
     * value: "slideup"
     * @const
     */
    "slideup": "slideup",

    /**
     * value: "slidedown"
     * @const
     */
    "slidedown": "slidedown",

    /**
     * value: "circlecrop"
     * @const
     */
    "circlecrop": "circlecrop",

    /**
     * value: "rectcrop"
     * @const
     */
    "rectcrop": "rectcrop",

    /**
     * value: "distance"
     * @const
     */
    "distance": "distance",

    /**
     * value: "fadeblack"
     * @const
     */
    "fadeblack": "fadeblack",

    /**
     * value: "fadewhite"
     * @const
     */
    "fadewhite": "fadewhite",

    /**
     * value: "radial"
     * @const
     */
    "radial": "radial",

    /**
     * value: "smoothleft"
     * @const
     */
    "smoothleft": "smoothleft",

    /**
     * value: "smoothright"
     * @const
     */
    "smoothright": "smoothright",

    /**
     * value: "smoothup"
     * @const
     */
    "smoothup": "smoothup",

    /**
     * value: "smoothdown"
     * @const
     */
    "smoothdown": "smoothdown",

    /**
     * value: "circleopen"
     * @const
     */
    "circleopen": "circleopen",

    /**
     * value: "circleclose"
     * @const
     */
    "circleclose": "circleclose",

    /**
     * value: "vertopen"
     * @const
     */
    "vertopen": "vertopen",

    /**
     * value: "vertclose"
     * @const
     */
    "vertclose": "vertclose",

    /**
     * value: "horzopen"
     * @const
     */
    "horzopen": "horzopen",

    /**
     * value: "horzclose"
     * @const
     */
    "horzclose": "horzclose",

    /**
     * value: "dissolve"
     * @const
     */
    "dissolve": "dissolve",

    /**
     * value: "pixelize"
     * @const
     */
    "pixelize": "pixelize",

    /**
     * value: "diagtl"
     * @const
     */
    "diagtl": "diagtl",

    /**
     * value: "diagtr"
     * @const
     */
    "diagtr": "diagtr",

    /**
     * value: "diagbl"
     * @const
     */
    "diagbl": "diagbl",

    /**
     * value: "diagbr"
     * @const
     */
    "diagbr": "diagbr",

    /**
     * value: "hlslice"
     * @const
     */
    "hlslice": "hlslice",

    /**
     * value: "hrslice"
     * @const
     */
    "hrslice": "hrslice",

    /**
     * value: "vuslice"
     * @const
     */
    "vuslice": "vuslice",

    /**
     * value: "vdslice"
     * @const
     */
    "vdslice": "vdslice",

    /**
     * value: "hblur"
     * @const
     */
    "hblur": "hblur",

    /**
     * value: "fadegrays"
     * @const
     */
    "fadegrays": "fadegrays",

    /**
     * value: "wipetl"
     * @const
     */
    "wipetl": "wipetl",

    /**
     * value: "wipetr"
     * @const
     */
    "wipetr": "wipetr",

    /**
     * value: "wipebl"
     * @const
     */
    "wipebl": "wipebl",

    /**
     * value: "wipebr"
     * @const
     */
    "wipebr": "wipebr",

    /**
     * value: "squeezeh"
     * @const
     */
    "squeezeh": "squeezeh",

    /**
     * value: "squeezev"
     * @const
     */
    "squeezev": "squeezev",

    /**
     * value: "zoomin"
     * @const
     */
    "zoomin": "zoomin"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SceneTransition['TypeEnum'] = {

    /**
     * value: "xfade"
     * @const
     */
    "xfade": "xfade"
};



export default SceneTransition;

