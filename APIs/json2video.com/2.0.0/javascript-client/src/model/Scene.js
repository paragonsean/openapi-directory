/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SceneElementsInner from './SceneElementsInner';
import SceneTransition from './SceneTransition';

/**
 * The Scene model module.
 * @module model/Scene
 * @version 2.0.0
 */
class Scene {
    /**
     * Constructs a new <code>Scene</code>.
     * @alias module:model/Scene
     */
    constructor() { 
        
        Scene.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['background-color'] = '#000000';
        obj['cache'] = true;
        obj['duration'] = -1;
    }

    /**
     * Constructs a <code>Scene</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scene} obj Optional instance to populate.
     * @return {module:model/Scene} The populated <code>Scene</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scene();

            if (data.hasOwnProperty('background-color')) {
                obj['background-color'] = ApiClient.convertToType(data['background-color'], 'String');
            }
            if (data.hasOwnProperty('cache')) {
                obj['cache'] = ApiClient.convertToType(data['cache'], 'Boolean');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], [SceneElementsInner]);
            }
            if (data.hasOwnProperty('transition')) {
                obj['transition'] = SceneTransition.constructFromObject(data['transition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scene</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scene</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['background-color'] && !(typeof data['background-color'] === 'string' || data['background-color'] instanceof String)) {
            throw new Error("Expected the field `background-color` to be a primitive type in the JSON string but got " + data['background-color']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        if (data['elements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elements'])) {
                throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
            }
            // validate the optional field `elements` (array)
            for (const item of data['elements']) {
                SceneElementsInner.validateJSON(item);
            };
        }
        // validate the optional field `transition`
        if (data['transition']) { // data not null
          SceneTransition.validateJSON(data['transition']);
        }

        return true;
    }


}



/**
 * A hexadecimal representation of a color or 'transparent'
 * @member {String} background-color
 * @default '#000000'
 */
Scene.prototype['background-color'] = '#000000';

/**
 * @member {Boolean} cache
 * @default true
 */
Scene.prototype['cache'] = true;

/**
 * Used for adding your comments
 * @member {String} comment
 */
Scene.prototype['comment'] = undefined;

/**
 * @member {Number} duration
 * @default -1
 */
Scene.prototype['duration'] = -1;

/**
 * @member {Array.<module:model/SceneElementsInner>} elements
 */
Scene.prototype['elements'] = undefined;

/**
 * @member {module:model/SceneTransition} transition
 */
Scene.prototype['transition'] = undefined;






export default Scene;

