/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Audio from './Audio';
import Component from './Component';
import Html from './Html';
import Image from './Image';
import Template from './Template';
import Text from './Text';
import Video from './Video';
import VisualElementChromaKey from './VisualElementChromaKey';
import VisualElementCrop from './VisualElementCrop';
import VisualElementRotate from './VisualElementRotate';
import VisualElementScale from './VisualElementScale';
import Voice from './Voice';

/**
 * The MovieElementsInner model module.
 * @module model/MovieElementsInner
 * @version 2.0.0
 */
class MovieElementsInner {
    /**
     * Constructs a new <code>MovieElementsInner</code>.
     * @alias module:model/MovieElementsInner
     * @param {(module:model/Audio|module:model/Component|module:model/Html|module:model/Image|module:model/Template|module:model/Text|module:model/Video|module:model/Voice)} instance The actual instance to initialize MovieElementsInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Video") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Video.validateJSON(instance); // throw an exception if no match
                // create Video from JS object
                this.actualInstance = Video.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Video
            errorMessages.push("Failed to construct Video: " + err)
        }

        try {
            if (typeof instance === "Image") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Image.validateJSON(instance); // throw an exception if no match
                // create Image from JS object
                this.actualInstance = Image.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Image
            errorMessages.push("Failed to construct Image: " + err)
        }

        try {
            if (typeof instance === "Text") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Text.validateJSON(instance); // throw an exception if no match
                // create Text from JS object
                this.actualInstance = Text.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Text
            errorMessages.push("Failed to construct Text: " + err)
        }

        try {
            if (typeof instance === "Html") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Html.validateJSON(instance); // throw an exception if no match
                // create Html from JS object
                this.actualInstance = Html.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Html
            errorMessages.push("Failed to construct Html: " + err)
        }

        try {
            if (typeof instance === "Component") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Component.validateJSON(instance); // throw an exception if no match
                // create Component from JS object
                this.actualInstance = Component.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Component
            errorMessages.push("Failed to construct Component: " + err)
        }

        try {
            if (typeof instance === "Template") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Template.validateJSON(instance); // throw an exception if no match
                // create Template from JS object
                this.actualInstance = Template.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Template
            errorMessages.push("Failed to construct Template: " + err)
        }

        try {
            if (typeof instance === "Audio") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Audio.validateJSON(instance); // throw an exception if no match
                // create Audio from JS object
                this.actualInstance = Audio.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Audio
            errorMessages.push("Failed to construct Audio: " + err)
        }

        try {
            if (typeof instance === "Voice") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Voice.validateJSON(instance); // throw an exception if no match
                // create Voice from JS object
                this.actualInstance = Voice.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Voice
            errorMessages.push("Failed to construct Voice: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `MovieElementsInner` with oneOf schemas Audio, Component, Html, Image, Template, Text, Video, Voice. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `MovieElementsInner` with oneOf schemas Audio, Component, Html, Image, Template, Text, Video, Voice. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>MovieElementsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MovieElementsInner} obj Optional instance to populate.
     * @return {module:model/MovieElementsInner} The populated <code>MovieElementsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new MovieElementsInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>Audio</code>, <code>Component</code>, <code>Html</code>, <code>Image</code>, <code>Template</code>, <code>Text</code>, <code>Video</code>, <code>Voice</code>.
     * @return {(module:model/Audio|module:model/Component|module:model/Html|module:model/Image|module:model/Template|module:model/Text|module:model/Video|module:model/Voice)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Audio</code>, <code>Component</code>, <code>Html</code>, <code>Image</code>, <code>Template</code>, <code>Text</code>, <code>Video</code>, <code>Voice</code>.
     * @param {(module:model/Audio|module:model/Component|module:model/Html|module:model/Image|module:model/Template|module:model/Text|module:model/Video|module:model/Voice)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = MovieElementsInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of MovieElementsInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/MovieElementsInner} An instance of MovieElementsInner.
     */
    static fromJSON = function(json_string){
        return MovieElementsInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} src
 */
MovieElementsInner.prototype['src'] = undefined;

/**
 * @member {module:model/MovieElementsInner.TypeEnum} type
 */
MovieElementsInner.prototype['type'] = undefined;

/**
 * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
 * @member {Boolean} cache
 * @default true
 */
MovieElementsInner.prototype['cache'] = true;

/**
 * Used for adding your comments
 * @member {String} comment
 */
MovieElementsInner.prototype['comment'] = undefined;

/**
 * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
 * @member {Number} duration
 * @default -1
 */
MovieElementsInner.prototype['duration'] = -1;

/**
 * Element's time span added after the playback.
 * @member {Number} extra-time
 * @default 0
 */
MovieElementsInner.prototype['extra-time'] = 0;

/**
 * Adds a fade in effect to the element. Value in seconds.
 * @member {Number} fade-in
 */
MovieElementsInner.prototype['fade-in'] = undefined;

/**
 * Adds a fade out effect to the element. Value in seconds.
 * @member {Number} fade-out
 */
MovieElementsInner.prototype['fade-out'] = undefined;

/**
 * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
 * @member {Number} start
 * @default 0
 */
MovieElementsInner.prototype['start'] = 0;

/**
 * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
 * @member {Number} z-index
 * @default 0
 */
MovieElementsInner.prototype['z-index'] = 0;

/**
 * @member {module:model/VisualElementChromaKey} chroma-key
 */
MovieElementsInner.prototype['chroma-key'] = undefined;

/**
 * @member {module:model/VisualElementCrop} crop
 */
MovieElementsInner.prototype['crop'] = undefined;

/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 * @member {module:model/MovieElementsInner.PanEnum} pan
 */
MovieElementsInner.prototype['pan'] = undefined;

/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 * @member {module:model/MovieElementsInner.PositionEnum} position
 * @default 'custom'
 */
MovieElementsInner.prototype['position'] = 'custom';

/**
 * @member {module:model/VisualElementRotate} rotate
 */
MovieElementsInner.prototype['rotate'] = undefined;

/**
 * @member {module:model/VisualElementScale} scale
 */
MovieElementsInner.prototype['scale'] = undefined;

/**
 * Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
 * @member {Number} x
 * @default 0
 */
MovieElementsInner.prototype['x'] = 0;

/**
 * Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
 * @member {Number} y
 * @default 0
 */
MovieElementsInner.prototype['y'] = 0;

/**
 * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
 * @member {Number} zoom
 */
MovieElementsInner.prototype['zoom'] = undefined;

/**
 * Sets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.
 * @member {Number} loop
 */
MovieElementsInner.prototype['loop'] = undefined;

/**
 * Mutes the audio
 * @member {Boolean} muted
 * @default false
 */
MovieElementsInner.prototype['muted'] = false;

/**
 * @member {Number} volume
 * @default 5
 */
MovieElementsInner.prototype['volume'] = 5;

/**
 * Desired text element height, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie height
 * @member {Number} height
 * @default -1
 */
MovieElementsInner.prototype['height'] = -1;

/**
 * Settings to be passed to the component
 * @member {Object} settings
 */
MovieElementsInner.prototype['settings'] = undefined;

/**
 * Style of the text element. Check all available text style at <a href='https://json2video.com/docs/resources/text/'>https://json2video.com/resources/text/</a>
 * @member {String} style
 * @default '001'
 */
MovieElementsInner.prototype['style'] = '001';

/**
 * The sentence or sentences to be converted to voice audio
 * @member {String} text
 */
MovieElementsInner.prototype['text'] = undefined;

/**
 * Desired text element width, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie width
 * @member {Number} width
 * @default -1
 */
MovieElementsInner.prototype['width'] = -1;

/**
 * HTML snippet to render. Compatible with HTML5, CSS3 and Javascript
 * @member {String} html
 */
MovieElementsInner.prototype['html'] = undefined;

/**
 * Enables usage of TailwindCSS for the HTML snippet
 * @member {Boolean} tailwindcss
 * @default false
 */
MovieElementsInner.prototype['tailwindcss'] = false;

/**
 * ID of the Component element. Check all available components in the <a href='https://json2video.com/docs/resources/basic/'>library</a>
 * @member {String} component
 */
MovieElementsInner.prototype['component'] = undefined;

/**
 * ID of the Component element. Check all available components at <a href='https://json2video.com/docs/resources/basic/'>https://json2video.com/docs/resources/basic/</a>
 * @member {String} template
 */
MovieElementsInner.prototype['template'] = undefined;

/**
 * The voice name to be used. Check <a href=\"/docs/tutorial/voice-elements/\">available voices</a>.
 * @member {String} voice
 * @default 'en-GB-LibbyNeural'
 */
MovieElementsInner.prototype['voice'] = 'en-GB-LibbyNeural';


MovieElementsInner.OneOf = ["Audio", "Component", "Html", "Image", "Template", "Text", "Video", "Voice"];

export default MovieElementsInner;

