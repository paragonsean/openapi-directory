# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.visual_element_chroma_key import VisualElementChromaKey
from openapi_server.models.visual_element_crop import VisualElementCrop
from openapi_server.models.visual_element_rotate import VisualElementRotate
from openapi_server.models.visual_element_scale import VisualElementScale
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache: bool=True, comment: str=None, duration: float=-1, extra_time: float=0, fade_in: float=None, fade_out: float=None, start: float=0, z_index: float=0, chroma_key: VisualElementChromaKey=None, crop: VisualElementCrop=None, pan: str=None, position: str='custom', rotate: VisualElementRotate=None, scale: VisualElementScale=None, x: float=0, y: float=0, zoom: int=None, muted: bool=False, volume: float=5, src: str=None, type: str=None, loop: int=None):
        """Video - a model defined in OpenAPI

        :param cache: The cache of this Video.
        :param comment: The comment of this Video.
        :param duration: The duration of this Video.
        :param extra_time: The extra_time of this Video.
        :param fade_in: The fade_in of this Video.
        :param fade_out: The fade_out of this Video.
        :param start: The start of this Video.
        :param z_index: The z_index of this Video.
        :param chroma_key: The chroma_key of this Video.
        :param crop: The crop of this Video.
        :param pan: The pan of this Video.
        :param position: The position of this Video.
        :param rotate: The rotate of this Video.
        :param scale: The scale of this Video.
        :param x: The x of this Video.
        :param y: The y of this Video.
        :param zoom: The zoom of this Video.
        :param muted: The muted of this Video.
        :param volume: The volume of this Video.
        :param src: The src of this Video.
        :param type: The type of this Video.
        :param loop: The loop of this Video.
        """
        self.openapi_types = {
            'cache': bool,
            'comment': str,
            'duration': float,
            'extra_time': float,
            'fade_in': float,
            'fade_out': float,
            'start': float,
            'z_index': float,
            'chroma_key': VisualElementChromaKey,
            'crop': VisualElementCrop,
            'pan': str,
            'position': str,
            'rotate': VisualElementRotate,
            'scale': VisualElementScale,
            'x': float,
            'y': float,
            'zoom': int,
            'muted': bool,
            'volume': float,
            'src': str,
            'type': str,
            'loop': int
        }

        self.attribute_map = {
            'cache': 'cache',
            'comment': 'comment',
            'duration': 'duration',
            'extra_time': 'extra-time',
            'fade_in': 'fade-in',
            'fade_out': 'fade-out',
            'start': 'start',
            'z_index': 'z-index',
            'chroma_key': 'chroma-key',
            'crop': 'crop',
            'pan': 'pan',
            'position': 'position',
            'rotate': 'rotate',
            'scale': 'scale',
            'x': 'x',
            'y': 'y',
            'zoom': 'zoom',
            'muted': 'muted',
            'volume': 'volume',
            'src': 'src',
            'type': 'type',
            'loop': 'loop'
        }

        self._cache = cache
        self._comment = comment
        self._duration = duration
        self._extra_time = extra_time
        self._fade_in = fade_in
        self._fade_out = fade_out
        self._start = start
        self._z_index = z_index
        self._chroma_key = chroma_key
        self._crop = crop
        self._pan = pan
        self._position = position
        self._rotate = rotate
        self._scale = scale
        self._x = x
        self._y = y
        self._zoom = zoom
        self._muted = muted
        self._volume = volume
        self._src = src
        self._type = type
        self._loop = loop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache(self):
        """Gets the cache of this Video.

        Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.

        :return: The cache of this Video.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Video.

        Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.

        :param cache: The cache of this Video.
        :type cache: bool
        """

        self._cache = cache

    @property
    def comment(self):
        """Gets the comment of this Video.

        Used for adding your comments

        :return: The comment of this Video.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Video.

        Used for adding your comments

        :param comment: The comment of this Video.
        :type comment: str
        """

        self._comment = comment

    @property
    def duration(self):
        """Gets the duration of this Video.

        Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.

        :return: The duration of this Video.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Video.

        Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.

        :param duration: The duration of this Video.
        :type duration: float
        """

        self._duration = duration

    @property
    def extra_time(self):
        """Gets the extra_time of this Video.

        Element's time span added after the playback.

        :return: The extra_time of this Video.
        :rtype: float
        """
        return self._extra_time

    @extra_time.setter
    def extra_time(self, extra_time):
        """Sets the extra_time of this Video.

        Element's time span added after the playback.

        :param extra_time: The extra_time of this Video.
        :type extra_time: float
        """

        self._extra_time = extra_time

    @property
    def fade_in(self):
        """Gets the fade_in of this Video.

        Adds a fade in effect to the element. Value in seconds.

        :return: The fade_in of this Video.
        :rtype: float
        """
        return self._fade_in

    @fade_in.setter
    def fade_in(self, fade_in):
        """Sets the fade_in of this Video.

        Adds a fade in effect to the element. Value in seconds.

        :param fade_in: The fade_in of this Video.
        :type fade_in: float
        """
        if fade_in is not None and fade_in < 0:
            raise ValueError("Invalid value for `fade_in`, must be a value greater than or equal to `0`")

        self._fade_in = fade_in

    @property
    def fade_out(self):
        """Gets the fade_out of this Video.

        Adds a fade out effect to the element. Value in seconds.

        :return: The fade_out of this Video.
        :rtype: float
        """
        return self._fade_out

    @fade_out.setter
    def fade_out(self, fade_out):
        """Sets the fade_out of this Video.

        Adds a fade out effect to the element. Value in seconds.

        :param fade_out: The fade_out of this Video.
        :type fade_out: float
        """
        if fade_out is not None and fade_out < 0:
            raise ValueError("Invalid value for `fade_out`, must be a value greater than or equal to `0`")

        self._fade_out = fade_out

    @property
    def start(self):
        """Gets the start of this Video.

        Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.

        :return: The start of this Video.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Video.

        Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.

        :param start: The start of this Video.
        :type start: float
        """

        self._start = start

    @property
    def z_index(self):
        """Gets the z_index of this Video.

        Element's z-index. Use this property to reorganize the layering of the elements like in HTML

        :return: The z_index of this Video.
        :rtype: float
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this Video.

        Element's z-index. Use this property to reorganize the layering of the elements like in HTML

        :param z_index: The z_index of this Video.
        :type z_index: float
        """

        self._z_index = z_index

    @property
    def chroma_key(self):
        """Gets the chroma_key of this Video.


        :return: The chroma_key of this Video.
        :rtype: VisualElementChromaKey
        """
        return self._chroma_key

    @chroma_key.setter
    def chroma_key(self, chroma_key):
        """Sets the chroma_key of this Video.


        :param chroma_key: The chroma_key of this Video.
        :type chroma_key: VisualElementChromaKey
        """

        self._chroma_key = chroma_key

    @property
    def crop(self):
        """Gets the crop of this Video.


        :return: The crop of this Video.
        :rtype: VisualElementCrop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this Video.


        :param crop: The crop of this Video.
        :type crop: VisualElementCrop
        """

        self._crop = crop

    @property
    def pan(self):
        """Gets the pan of this Video.

        Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan

        :return: The pan of this Video.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this Video.

        Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan

        :param pan: The pan of this Video.
        :type pan: str
        """
        allowed_values = ["left", "top", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right"]  # noqa: E501
        if pan not in allowed_values:
            raise ValueError(
                "Invalid value for `pan` ({0}), must be one of {1}"
                .format(pan, allowed_values)
            )

        self._pan = pan

    @property
    def position(self):
        """Gets the position of this Video.

        Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties

        :return: The position of this Video.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Video.

        Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties

        :param position: The position of this Video.
        :type position: str
        """
        allowed_values = ["top-left", "top-right", "bottom-right", "bottom-left", "center-center", "custom"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def rotate(self):
        """Gets the rotate of this Video.


        :return: The rotate of this Video.
        :rtype: VisualElementRotate
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this Video.


        :param rotate: The rotate of this Video.
        :type rotate: VisualElementRotate
        """

        self._rotate = rotate

    @property
    def scale(self):
        """Gets the scale of this Video.


        :return: The scale of this Video.
        :rtype: VisualElementScale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Video.


        :param scale: The scale of this Video.
        :type scale: VisualElementScale
        """

        self._scale = scale

    @property
    def x(self):
        """Gets the x of this Video.

        Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side

        :return: The x of this Video.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Video.

        Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side

        :param x: The x of this Video.
        :type x: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Video.

        Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side

        :return: The y of this Video.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Video.

        Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side

        :param y: The y of this Video.
        :type y: float
        """

        self._y = y

    @property
    def zoom(self):
        """Gets the zoom of this Video.

        Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming

        :return: The zoom of this Video.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this Video.

        Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming

        :param zoom: The zoom of this Video.
        :type zoom: int
        """
        if zoom is not None and zoom > 100:
            raise ValueError("Invalid value for `zoom`, must be a value less than or equal to `100`")
        if zoom is not None and zoom < -100:
            raise ValueError("Invalid value for `zoom`, must be a value greater than or equal to `-100`")

        self._zoom = zoom

    @property
    def muted(self):
        """Gets the muted of this Video.

        Mutes the audio

        :return: The muted of this Video.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this Video.

        Mutes the audio

        :param muted: The muted of this Video.
        :type muted: bool
        """

        self._muted = muted

    @property
    def volume(self):
        """Gets the volume of this Video.


        :return: The volume of this Video.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Video.


        :param volume: The volume of this Video.
        :type volume: float
        """
        if volume is not None and volume > 10:
            raise ValueError("Invalid value for `volume`, must be a value less than or equal to `10`")
        if volume is not None and volume < 0:
            raise ValueError("Invalid value for `volume`, must be a value greater than or equal to `0`")

        self._volume = volume

    @property
    def src(self):
        """Gets the src of this Video.

        URL to the asset file. Videos can be in MP4, MKV, MOV but MP4 is recommended.

        :return: The src of this Video.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this Video.

        URL to the asset file. Videos can be in MP4, MKV, MOV but MP4 is recommended.

        :param src: The src of this Video.
        :type src: str
        """

        self._src = src

    @property
    def type(self):
        """Gets the type of this Video.


        :return: The type of this Video.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Video.


        :param type: The type of this Video.
        :type type: str
        """
        allowed_values = ["video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def loop(self):
        """Gets the loop of this Video.

        Sets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.

        :return: The loop of this Video.
        :rtype: int
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """Sets the loop of this Video.

        Sets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.

        :param loop: The loop of this Video.
        :type loop: int
        """
        if loop is not None and loop < -1:
            raise ValueError("Invalid value for `loop`, must be a value greater than or equal to `-1`")

        self._loop = loop
