# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SceneTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: float=None, style: str='fade', type: str='xfade'):
        """SceneTransition - a model defined in OpenAPI

        :param duration: The duration of this SceneTransition.
        :param style: The style of this SceneTransition.
        :param type: The type of this SceneTransition.
        """
        self.openapi_types = {
            'duration': float,
            'style': str,
            'type': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'style': 'style',
            'type': 'type'
        }

        self._duration = duration
        self._style = style
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SceneTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scene_transition of this SceneTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this SceneTransition.

        Duration of the transition in seconds

        :return: The duration of this SceneTransition.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SceneTransition.

        Duration of the transition in seconds

        :param duration: The duration of this SceneTransition.
        :type duration: float
        """

        self._duration = duration

    @property
    def style(self):
        """Gets the style of this SceneTransition.


        :return: The style of this SceneTransition.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this SceneTransition.


        :param style: The style of this SceneTransition.
        :type style: str
        """
        allowed_values = ["fade", "wipeleft", "wiperight", "wipeup", "wipedown", "slideleft", "slideright", "slideup", "slidedown", "circlecrop", "rectcrop", "distance", "fadeblack", "fadewhite", "radial", "smoothleft", "smoothright", "smoothup", "smoothdown", "circleopen", "circleclose", "vertopen", "vertclose", "horzopen", "horzclose", "dissolve", "pixelize", "diagtl", "diagtr", "diagbl", "diagbr", "hlslice", "hrslice", "vuslice", "vdslice", "hblur", "fadegrays", "wipetl", "wipetr", "wipebl", "wipebr", "squeezeh", "squeezev", "zoomin"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def type(self):
        """Gets the type of this SceneTransition.


        :return: The type of this SceneTransition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SceneTransition.


        :param type: The type of this SceneTransition.
        :type type: str
        """
        allowed_values = ["xfade"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
