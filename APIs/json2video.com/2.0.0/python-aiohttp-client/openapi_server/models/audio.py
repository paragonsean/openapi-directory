# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Audio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache: bool=True, comment: str=None, duration: float=-1, extra_time: float=0, fade_in: float=None, fade_out: float=None, start: float=0, z_index: float=0, muted: bool=False, volume: float=5, src: str=None, type: str=None):
        """Audio - a model defined in OpenAPI

        :param cache: The cache of this Audio.
        :param comment: The comment of this Audio.
        :param duration: The duration of this Audio.
        :param extra_time: The extra_time of this Audio.
        :param fade_in: The fade_in of this Audio.
        :param fade_out: The fade_out of this Audio.
        :param start: The start of this Audio.
        :param z_index: The z_index of this Audio.
        :param muted: The muted of this Audio.
        :param volume: The volume of this Audio.
        :param src: The src of this Audio.
        :param type: The type of this Audio.
        """
        self.openapi_types = {
            'cache': bool,
            'comment': str,
            'duration': float,
            'extra_time': float,
            'fade_in': float,
            'fade_out': float,
            'start': float,
            'z_index': float,
            'muted': bool,
            'volume': float,
            'src': str,
            'type': str
        }

        self.attribute_map = {
            'cache': 'cache',
            'comment': 'comment',
            'duration': 'duration',
            'extra_time': 'extra-time',
            'fade_in': 'fade-in',
            'fade_out': 'fade-out',
            'start': 'start',
            'z_index': 'z-index',
            'muted': 'muted',
            'volume': 'volume',
            'src': 'src',
            'type': 'type'
        }

        self._cache = cache
        self._comment = comment
        self._duration = duration
        self._extra_time = extra_time
        self._fade_in = fade_in
        self._fade_out = fade_out
        self._start = start
        self._z_index = z_index
        self._muted = muted
        self._volume = volume
        self._src = src
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Audio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The audio of this Audio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache(self):
        """Gets the cache of this Audio.

        Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.

        :return: The cache of this Audio.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Audio.

        Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.

        :param cache: The cache of this Audio.
        :type cache: bool
        """

        self._cache = cache

    @property
    def comment(self):
        """Gets the comment of this Audio.

        Used for adding your comments

        :return: The comment of this Audio.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Audio.

        Used for adding your comments

        :param comment: The comment of this Audio.
        :type comment: str
        """

        self._comment = comment

    @property
    def duration(self):
        """Gets the duration of this Audio.

        Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.

        :return: The duration of this Audio.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Audio.

        Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.

        :param duration: The duration of this Audio.
        :type duration: float
        """

        self._duration = duration

    @property
    def extra_time(self):
        """Gets the extra_time of this Audio.

        Element's time span added after the playback.

        :return: The extra_time of this Audio.
        :rtype: float
        """
        return self._extra_time

    @extra_time.setter
    def extra_time(self, extra_time):
        """Sets the extra_time of this Audio.

        Element's time span added after the playback.

        :param extra_time: The extra_time of this Audio.
        :type extra_time: float
        """

        self._extra_time = extra_time

    @property
    def fade_in(self):
        """Gets the fade_in of this Audio.

        Adds a fade in effect to the element. Value in seconds.

        :return: The fade_in of this Audio.
        :rtype: float
        """
        return self._fade_in

    @fade_in.setter
    def fade_in(self, fade_in):
        """Sets the fade_in of this Audio.

        Adds a fade in effect to the element. Value in seconds.

        :param fade_in: The fade_in of this Audio.
        :type fade_in: float
        """
        if fade_in is not None and fade_in < 0:
            raise ValueError("Invalid value for `fade_in`, must be a value greater than or equal to `0`")

        self._fade_in = fade_in

    @property
    def fade_out(self):
        """Gets the fade_out of this Audio.

        Adds a fade out effect to the element. Value in seconds.

        :return: The fade_out of this Audio.
        :rtype: float
        """
        return self._fade_out

    @fade_out.setter
    def fade_out(self, fade_out):
        """Sets the fade_out of this Audio.

        Adds a fade out effect to the element. Value in seconds.

        :param fade_out: The fade_out of this Audio.
        :type fade_out: float
        """
        if fade_out is not None and fade_out < 0:
            raise ValueError("Invalid value for `fade_out`, must be a value greater than or equal to `0`")

        self._fade_out = fade_out

    @property
    def start(self):
        """Gets the start of this Audio.

        Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.

        :return: The start of this Audio.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Audio.

        Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.

        :param start: The start of this Audio.
        :type start: float
        """

        self._start = start

    @property
    def z_index(self):
        """Gets the z_index of this Audio.

        Element's z-index. Use this property to reorganize the layering of the elements like in HTML

        :return: The z_index of this Audio.
        :rtype: float
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this Audio.

        Element's z-index. Use this property to reorganize the layering of the elements like in HTML

        :param z_index: The z_index of this Audio.
        :type z_index: float
        """

        self._z_index = z_index

    @property
    def muted(self):
        """Gets the muted of this Audio.

        Mutes the audio

        :return: The muted of this Audio.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this Audio.

        Mutes the audio

        :param muted: The muted of this Audio.
        :type muted: bool
        """

        self._muted = muted

    @property
    def volume(self):
        """Gets the volume of this Audio.


        :return: The volume of this Audio.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Audio.


        :param volume: The volume of this Audio.
        :type volume: float
        """
        if volume is not None and volume > 10:
            raise ValueError("Invalid value for `volume`, must be a value less than or equal to `10`")
        if volume is not None and volume < 0:
            raise ValueError("Invalid value for `volume`, must be a value greater than or equal to `0`")

        self._volume = volume

    @property
    def src(self):
        """Gets the src of this Audio.


        :return: The src of this Audio.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this Audio.


        :param src: The src of this Audio.
        :type src: str
        """

        self._src = src

    @property
    def type(self):
        """Gets the type of this Audio.


        :return: The type of this Audio.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Audio.


        :param type: The type of this Audio.
        :type type: str
        """
        allowed_values = ["audio"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
