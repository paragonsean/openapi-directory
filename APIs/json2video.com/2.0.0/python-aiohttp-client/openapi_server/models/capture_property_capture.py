# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CapturePropertyCapture(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: float=0, height: int=360, width: int=640):
        """CapturePropertyCapture - a model defined in OpenAPI

        :param duration: The duration of this CapturePropertyCapture.
        :param height: The height of this CapturePropertyCapture.
        :param width: The width of this CapturePropertyCapture.
        """
        self.openapi_types = {
            'duration': float,
            'height': int,
            'width': int
        }

        self.attribute_map = {
            'duration': 'duration',
            'height': 'height',
            'width': 'width'
        }

        self._duration = duration
        self._height = height
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapturePropertyCapture':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptureProperty_capture of this CapturePropertyCapture.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this CapturePropertyCapture.

        Screen recording duration in seconds. Use 0 to take a screenshot

        :return: The duration of this CapturePropertyCapture.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CapturePropertyCapture.

        Screen recording duration in seconds. Use 0 to take a screenshot

        :param duration: The duration of this CapturePropertyCapture.
        :type duration: float
        """
        if duration is not None and duration > 10:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `10`")
        if duration is not None and duration < 0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")

        self._duration = duration

    @property
    def height(self):
        """Gets the height of this CapturePropertyCapture.

        Viewport height

        :return: The height of this CapturePropertyCapture.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CapturePropertyCapture.

        Viewport height

        :param height: The height of this CapturePropertyCapture.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")
        if height is not None and height > 1080:
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1080`")
        if height is not None and height < 50:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `50`")

        self._height = height

    @property
    def width(self):
        """Gets the width of this CapturePropertyCapture.

        Viewport width

        :return: The width of this CapturePropertyCapture.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this CapturePropertyCapture.

        Viewport width

        :param width: The width of this CapturePropertyCapture.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")
        if width is not None and width > 1920:
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1920`")
        if width is not None and width < 50:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `50`")

        self._width = width
