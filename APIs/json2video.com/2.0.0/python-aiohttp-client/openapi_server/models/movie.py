# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.movie_elements_inner import MovieElementsInner
from openapi_server.models.scene import Scene
from openapi_server import util


class Movie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache: bool=True, comment: str=None, draft: bool=True, elements: List[MovieElementsInner]=None, exports: List[object]=None, fps: int=25, height: int=360, quality: str='high', resolution: str=None, scenes: List[Scene]=None, settings: object=None, width: int=640):
        """Movie - a model defined in OpenAPI

        :param cache: The cache of this Movie.
        :param comment: The comment of this Movie.
        :param draft: The draft of this Movie.
        :param elements: The elements of this Movie.
        :param exports: The exports of this Movie.
        :param fps: The fps of this Movie.
        :param height: The height of this Movie.
        :param quality: The quality of this Movie.
        :param resolution: The resolution of this Movie.
        :param scenes: The scenes of this Movie.
        :param settings: The settings of this Movie.
        :param width: The width of this Movie.
        """
        self.openapi_types = {
            'cache': bool,
            'comment': str,
            'draft': bool,
            'elements': List[MovieElementsInner],
            'exports': List[object],
            'fps': int,
            'height': int,
            'quality': str,
            'resolution': str,
            'scenes': List[Scene],
            'settings': object,
            'width': int
        }

        self.attribute_map = {
            'cache': 'cache',
            'comment': 'comment',
            'draft': 'draft',
            'elements': 'elements',
            'exports': 'exports',
            'fps': 'fps',
            'height': 'height',
            'quality': 'quality',
            'resolution': 'resolution',
            'scenes': 'scenes',
            'settings': 'settings',
            'width': 'width'
        }

        self._cache = cache
        self._comment = comment
        self._draft = draft
        self._elements = elements
        self._exports = exports
        self._fps = fps
        self._height = height
        self._quality = quality
        self._resolution = resolution
        self._scenes = scenes
        self._settings = settings
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Movie':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The movie of this Movie.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache(self):
        """Gets the cache of this Movie.


        :return: The cache of this Movie.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Movie.


        :param cache: The cache of this Movie.
        :type cache: bool
        """

        self._cache = cache

    @property
    def comment(self):
        """Gets the comment of this Movie.

        Used for adding your comments

        :return: The comment of this Movie.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Movie.

        Used for adding your comments

        :param comment: The comment of this Movie.
        :type comment: str
        """

        self._comment = comment

    @property
    def draft(self):
        """Gets the draft of this Movie.

        Draft movies include a watermark. Check your plan how many draft and final movies you have

        :return: The draft of this Movie.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Movie.

        Draft movies include a watermark. Check your plan how many draft and final movies you have

        :param draft: The draft of this Movie.
        :type draft: bool
        """

        self._draft = draft

    @property
    def elements(self):
        """Gets the elements of this Movie.


        :return: The elements of this Movie.
        :rtype: List[MovieElementsInner]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Movie.


        :param elements: The elements of this Movie.
        :type elements: List[MovieElementsInner]
        """

        self._elements = elements

    @property
    def exports(self):
        """Gets the exports of this Movie.

        You can define different types of exports for your movie. Check the <a href=\"https://json2video.com/docs/tutorial/exports\">documentation</a> for more information

        :return: The exports of this Movie.
        :rtype: List[object]
        """
        return self._exports

    @exports.setter
    def exports(self, exports):
        """Sets the exports of this Movie.

        You can define different types of exports for your movie. Check the <a href=\"https://json2video.com/docs/tutorial/exports\">documentation</a> for more information

        :param exports: The exports of this Movie.
        :type exports: List[object]
        """

        self._exports = exports

    @property
    def fps(self):
        """Gets the fps of this Movie.

        Frames per second

        :return: The fps of this Movie.
        :rtype: int
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this Movie.

        Frames per second

        :param fps: The fps of this Movie.
        :type fps: int
        """

        self._fps = fps

    @property
    def height(self):
        """Gets the height of this Movie.


        :return: The height of this Movie.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Movie.


        :param height: The height of this Movie.
        :type height: int
        """
        if height is not None and height > 1080:
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1080`")
        if height is not None and height < 50:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `50`")

        self._height = height

    @property
    def quality(self):
        """Gets the quality of this Movie.


        :return: The quality of this Movie.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this Movie.


        :param quality: The quality of this Movie.
        :type quality: str
        """
        allowed_values = ["low", "medium", "high"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def resolution(self):
        """Gets the resolution of this Movie.


        :return: The resolution of this Movie.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Movie.


        :param resolution: The resolution of this Movie.
        :type resolution: str
        """
        allowed_values = ["sd", "hd", "full-hd", "squared", "instagram-story", "instagram-feed", "twitter-landscape", "twitter-portrait"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def scenes(self):
        """Gets the scenes of this Movie.


        :return: The scenes of this Movie.
        :rtype: List[Scene]
        """
        return self._scenes

    @scenes.setter
    def scenes(self, scenes):
        """Sets the scenes of this Movie.


        :param scenes: The scenes of this Movie.
        :type scenes: List[Scene]
        """
        if scenes is None:
            raise ValueError("Invalid value for `scenes`, must not be `None`")

        self._scenes = scenes

    @property
    def settings(self):
        """Gets the settings of this Movie.

        Movie advanced settings

        :return: The settings of this Movie.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Movie.

        Movie advanced settings

        :param settings: The settings of this Movie.
        :type settings: object
        """

        self._settings = settings

    @property
    def width(self):
        """Gets the width of this Movie.


        :return: The width of this Movie.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Movie.


        :param width: The width of this Movie.
        :type width: int
        """
        if width is not None and width > 1920:
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1920`")
        if width is not None and width < 50:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `50`")

        self._width = width
