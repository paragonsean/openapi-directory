# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VisualElementChromaKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, tolerance: int=25):
        """VisualElementChromaKey - a model defined in OpenAPI

        :param color: The color of this VisualElementChromaKey.
        :param tolerance: The tolerance of this VisualElementChromaKey.
        """
        self.openapi_types = {
            'color': str,
            'tolerance': int
        }

        self.attribute_map = {
            'color': 'color',
            'tolerance': 'tolerance'
        }

        self._color = color
        self._tolerance = tolerance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisualElementChromaKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisualElement_chroma_key of this VisualElementChromaKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this VisualElementChromaKey.

        Set the color for which alpha will be set to 0 (full transparency)

        :return: The color of this VisualElementChromaKey.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this VisualElementChromaKey.

        Set the color for which alpha will be set to 0 (full transparency)

        :param color: The color of this VisualElementChromaKey.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def tolerance(self):
        """Gets the tolerance of this VisualElementChromaKey.

        Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas

        :return: The tolerance of this VisualElementChromaKey.
        :rtype: int
        """
        return self._tolerance

    @tolerance.setter
    def tolerance(self, tolerance):
        """Sets the tolerance of this VisualElementChromaKey.

        Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas

        :param tolerance: The tolerance of this VisualElementChromaKey.
        :type tolerance: int
        """
        if tolerance is not None and tolerance > 100:
            raise ValueError("Invalid value for `tolerance`, must be a value less than or equal to `100`")
        if tolerance is not None and tolerance < 1:
            raise ValueError("Invalid value for `tolerance`, must be a value greater than or equal to `1`")

        self._tolerance = tolerance
