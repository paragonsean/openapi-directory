# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scene_elements_inner import SceneElementsInner
from openapi_server.models.scene_transition import SceneTransition
from openapi_server import util


class Scene(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str='#000000', cache: bool=True, comment: str=None, duration: float=-1, elements: List[SceneElementsInner]=None, transition: SceneTransition=None):
        """Scene - a model defined in OpenAPI

        :param background_color: The background_color of this Scene.
        :param cache: The cache of this Scene.
        :param comment: The comment of this Scene.
        :param duration: The duration of this Scene.
        :param elements: The elements of this Scene.
        :param transition: The transition of this Scene.
        """
        self.openapi_types = {
            'background_color': str,
            'cache': bool,
            'comment': str,
            'duration': float,
            'elements': List[SceneElementsInner],
            'transition': SceneTransition
        }

        self.attribute_map = {
            'background_color': 'background-color',
            'cache': 'cache',
            'comment': 'comment',
            'duration': 'duration',
            'elements': 'elements',
            'transition': 'transition'
        }

        self._background_color = background_color
        self._cache = cache
        self._comment = comment
        self._duration = duration
        self._elements = elements
        self._transition = transition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scene':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scene of this Scene.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this Scene.

        A hexadecimal representation of a color or 'transparent'

        :return: The background_color of this Scene.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this Scene.

        A hexadecimal representation of a color or 'transparent'

        :param background_color: The background_color of this Scene.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def cache(self):
        """Gets the cache of this Scene.


        :return: The cache of this Scene.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Scene.


        :param cache: The cache of this Scene.
        :type cache: bool
        """

        self._cache = cache

    @property
    def comment(self):
        """Gets the comment of this Scene.

        Used for adding your comments

        :return: The comment of this Scene.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Scene.

        Used for adding your comments

        :param comment: The comment of this Scene.
        :type comment: str
        """

        self._comment = comment

    @property
    def duration(self):
        """Gets the duration of this Scene.


        :return: The duration of this Scene.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Scene.


        :param duration: The duration of this Scene.
        :type duration: float
        """

        self._duration = duration

    @property
    def elements(self):
        """Gets the elements of this Scene.


        :return: The elements of this Scene.
        :rtype: List[SceneElementsInner]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Scene.


        :param elements: The elements of this Scene.
        :type elements: List[SceneElementsInner]
        """

        self._elements = elements

    @property
    def transition(self):
        """Gets the transition of this Scene.


        :return: The transition of this Scene.
        :rtype: SceneTransition
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this Scene.


        :param transition: The transition of this Scene.
        :type transition: SceneTransition
        """

        self._transition = transition
