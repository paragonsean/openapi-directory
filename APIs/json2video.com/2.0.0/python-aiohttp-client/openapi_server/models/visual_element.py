# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.visual_element_chroma_key import VisualElementChromaKey
from openapi_server.models.visual_element_crop import VisualElementCrop
from openapi_server.models.visual_element_rotate import VisualElementRotate
from openapi_server.models.visual_element_scale import VisualElementScale
from openapi_server import util


class VisualElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chroma_key: VisualElementChromaKey=None, crop: VisualElementCrop=None, pan: str=None, position: str='custom', rotate: VisualElementRotate=None, scale: VisualElementScale=None, x: float=0, y: float=0, zoom: int=None):
        """VisualElement - a model defined in OpenAPI

        :param chroma_key: The chroma_key of this VisualElement.
        :param crop: The crop of this VisualElement.
        :param pan: The pan of this VisualElement.
        :param position: The position of this VisualElement.
        :param rotate: The rotate of this VisualElement.
        :param scale: The scale of this VisualElement.
        :param x: The x of this VisualElement.
        :param y: The y of this VisualElement.
        :param zoom: The zoom of this VisualElement.
        """
        self.openapi_types = {
            'chroma_key': VisualElementChromaKey,
            'crop': VisualElementCrop,
            'pan': str,
            'position': str,
            'rotate': VisualElementRotate,
            'scale': VisualElementScale,
            'x': float,
            'y': float,
            'zoom': int
        }

        self.attribute_map = {
            'chroma_key': 'chroma-key',
            'crop': 'crop',
            'pan': 'pan',
            'position': 'position',
            'rotate': 'rotate',
            'scale': 'scale',
            'x': 'x',
            'y': 'y',
            'zoom': 'zoom'
        }

        self._chroma_key = chroma_key
        self._crop = crop
        self._pan = pan
        self._position = position
        self._rotate = rotate
        self._scale = scale
        self._x = x
        self._y = y
        self._zoom = zoom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisualElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisualElement of this VisualElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chroma_key(self):
        """Gets the chroma_key of this VisualElement.


        :return: The chroma_key of this VisualElement.
        :rtype: VisualElementChromaKey
        """
        return self._chroma_key

    @chroma_key.setter
    def chroma_key(self, chroma_key):
        """Sets the chroma_key of this VisualElement.


        :param chroma_key: The chroma_key of this VisualElement.
        :type chroma_key: VisualElementChromaKey
        """

        self._chroma_key = chroma_key

    @property
    def crop(self):
        """Gets the crop of this VisualElement.


        :return: The crop of this VisualElement.
        :rtype: VisualElementCrop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this VisualElement.


        :param crop: The crop of this VisualElement.
        :type crop: VisualElementCrop
        """

        self._crop = crop

    @property
    def pan(self):
        """Gets the pan of this VisualElement.

        Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan

        :return: The pan of this VisualElement.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this VisualElement.

        Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan

        :param pan: The pan of this VisualElement.
        :type pan: str
        """
        allowed_values = ["left", "top", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right"]  # noqa: E501
        if pan not in allowed_values:
            raise ValueError(
                "Invalid value for `pan` ({0}), must be one of {1}"
                .format(pan, allowed_values)
            )

        self._pan = pan

    @property
    def position(self):
        """Gets the position of this VisualElement.

        Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties

        :return: The position of this VisualElement.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this VisualElement.

        Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties

        :param position: The position of this VisualElement.
        :type position: str
        """
        allowed_values = ["top-left", "top-right", "bottom-right", "bottom-left", "center-center", "custom"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def rotate(self):
        """Gets the rotate of this VisualElement.


        :return: The rotate of this VisualElement.
        :rtype: VisualElementRotate
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this VisualElement.


        :param rotate: The rotate of this VisualElement.
        :type rotate: VisualElementRotate
        """

        self._rotate = rotate

    @property
    def scale(self):
        """Gets the scale of this VisualElement.


        :return: The scale of this VisualElement.
        :rtype: VisualElementScale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this VisualElement.


        :param scale: The scale of this VisualElement.
        :type scale: VisualElementScale
        """

        self._scale = scale

    @property
    def x(self):
        """Gets the x of this VisualElement.

        Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side

        :return: The x of this VisualElement.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this VisualElement.

        Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side

        :param x: The x of this VisualElement.
        :type x: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this VisualElement.

        Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side

        :return: The y of this VisualElement.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this VisualElement.

        Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side

        :param y: The y of this VisualElement.
        :type y: float
        """

        self._y = y

    @property
    def zoom(self):
        """Gets the zoom of this VisualElement.

        Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming

        :return: The zoom of this VisualElement.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this VisualElement.

        Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming

        :param zoom: The zoom of this VisualElement.
        :type zoom: int
        """
        if zoom is not None and zoom > 100:
            raise ValueError("Invalid value for `zoom`, must be a value less than or equal to `100`")
        if zoom is not None and zoom < -100:
            raise ValueError("Invalid value for `zoom`, must be a value greater than or equal to `-100`")

        self._zoom = zoom
