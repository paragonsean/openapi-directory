# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio import Audio
from openapi_server.models.component import Component
from openapi_server.models.html import Html
from openapi_server.models.image import Image
from openapi_server.models.template import Template
from openapi_server.models.text import Text
from openapi_server.models.video import Video
from openapi_server.models.visual_element_chroma_key import VisualElementChromaKey
from openapi_server.models.visual_element_crop import VisualElementCrop
from openapi_server.models.visual_element_rotate import VisualElementRotate
from openapi_server.models.visual_element_scale import VisualElementScale
from openapi_server.models.voice import Voice
from openapi_server import util


class MovieElementsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, src: str=None, type: str=None, cache: bool=True, comment: str=None, duration: float=-1, extra_time: float=0, fade_in: float=None, fade_out: float=None, start: float=0, z_index: float=0, chroma_key: VisualElementChromaKey=None, crop: VisualElementCrop=None, pan: str=None, position: str='custom', rotate: VisualElementRotate=None, scale: VisualElementScale=None, x: float=0, y: float=0, zoom: int=None, loop: int=None, muted: bool=False, volume: float=5, height: int=-1, settings: object=None, style: str='001', text: str=None, width: int=-1, html: str=None, tailwindcss: bool=False, component: str=None, template: str=None, voice: str='en-GB-LibbyNeural'):
        """MovieElementsInner - a model defined in OpenAPI

        :param src: The src of this MovieElementsInner.
        :param type: The type of this MovieElementsInner.
        :param cache: The cache of this MovieElementsInner.
        :param comment: The comment of this MovieElementsInner.
        :param duration: The duration of this MovieElementsInner.
        :param extra_time: The extra_time of this MovieElementsInner.
        :param fade_in: The fade_in of this MovieElementsInner.
        :param fade_out: The fade_out of this MovieElementsInner.
        :param start: The start of this MovieElementsInner.
        :param z_index: The z_index of this MovieElementsInner.
        :param chroma_key: The chroma_key of this MovieElementsInner.
        :param crop: The crop of this MovieElementsInner.
        :param pan: The pan of this MovieElementsInner.
        :param position: The position of this MovieElementsInner.
        :param rotate: The rotate of this MovieElementsInner.
        :param scale: The scale of this MovieElementsInner.
        :param x: The x of this MovieElementsInner.
        :param y: The y of this MovieElementsInner.
        :param zoom: The zoom of this MovieElementsInner.
        :param loop: The loop of this MovieElementsInner.
        :param muted: The muted of this MovieElementsInner.
        :param volume: The volume of this MovieElementsInner.
        :param height: The height of this MovieElementsInner.
        :param settings: The settings of this MovieElementsInner.
        :param style: The style of this MovieElementsInner.
        :param text: The text of this MovieElementsInner.
        :param width: The width of this MovieElementsInner.
        :param html: The html of this MovieElementsInner.
        :param tailwindcss: The tailwindcss of this MovieElementsInner.
        :param component: The component of this MovieElementsInner.
        :param template: The template of this MovieElementsInner.
        :param voice: The voice of this MovieElementsInner.
        """
        self.openapi_types = {
            'src': str,
            'type': str,
            'cache': bool,
            'comment': str,
            'duration': float,
            'extra_time': float,
            'fade_in': float,
            'fade_out': float,
            'start': float,
            'z_index': float,
            'chroma_key': VisualElementChromaKey,
            'crop': VisualElementCrop,
            'pan': str,
            'position': str,
            'rotate': VisualElementRotate,
            'scale': VisualElementScale,
            'x': float,
            'y': float,
            'zoom': int,
            'loop': int,
            'muted': bool,
            'volume': float,
            'height': int,
            'settings': object,
            'style': str,
            'text': str,
            'width': int,
            'html': str,
            'tailwindcss': bool,
            'component': str,
            'template': str,
            'voice': str
        }

        self.attribute_map = {
            'src': 'src',
            'type': 'type',
            'cache': 'cache',
            'comment': 'comment',
            'duration': 'duration',
            'extra_time': 'extra-time',
            'fade_in': 'fade-in',
            'fade_out': 'fade-out',
            'start': 'start',
            'z_index': 'z-index',
            'chroma_key': 'chroma-key',
            'crop': 'crop',
            'pan': 'pan',
            'position': 'position',
            'rotate': 'rotate',
            'scale': 'scale',
            'x': 'x',
            'y': 'y',
            'zoom': 'zoom',
            'loop': 'loop',
            'muted': 'muted',
            'volume': 'volume',
            'height': 'height',
            'settings': 'settings',
            'style': 'style',
            'text': 'text',
            'width': 'width',
            'html': 'html',
            'tailwindcss': 'tailwindcss',
            'component': 'component',
            'template': 'template',
            'voice': 'voice'
        }

        self._src = src
        self._type = type
        self._cache = cache
        self._comment = comment
        self._duration = duration
        self._extra_time = extra_time
        self._fade_in = fade_in
        self._fade_out = fade_out
        self._start = start
        self._z_index = z_index
        self._chroma_key = chroma_key
        self._crop = crop
        self._pan = pan
        self._position = position
        self._rotate = rotate
        self._scale = scale
        self._x = x
        self._y = y
        self._zoom = zoom
        self._loop = loop
        self._muted = muted
        self._volume = volume
        self._height = height
        self._settings = settings
        self._style = style
        self._text = text
        self._width = width
        self._html = html
        self._tailwindcss = tailwindcss
        self._component = component
        self._template = template
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MovieElementsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The movie_elements_inner of this MovieElementsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def src(self):
        """Gets the src of this MovieElementsInner.


        :return: The src of this MovieElementsInner.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this MovieElementsInner.


        :param src: The src of this MovieElementsInner.
        :type src: str
        """

        self._src = src

    @property
    def type(self):
        """Gets the type of this MovieElementsInner.


        :return: The type of this MovieElementsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MovieElementsInner.


        :param type: The type of this MovieElementsInner.
        :type type: str
        """
        allowed_values = ["video", "image", "text", "html", "component", "template", "audio", "voice"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cache(self):
        """Gets the cache of this MovieElementsInner.

        Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.

        :return: The cache of this MovieElementsInner.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this MovieElementsInner.

        Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.

        :param cache: The cache of this MovieElementsInner.
        :type cache: bool
        """

        self._cache = cache

    @property
    def comment(self):
        """Gets the comment of this MovieElementsInner.

        Used for adding your comments

        :return: The comment of this MovieElementsInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MovieElementsInner.

        Used for adding your comments

        :param comment: The comment of this MovieElementsInner.
        :type comment: str
        """

        self._comment = comment

    @property
    def duration(self):
        """Gets the duration of this MovieElementsInner.

        Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.

        :return: The duration of this MovieElementsInner.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MovieElementsInner.

        Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.

        :param duration: The duration of this MovieElementsInner.
        :type duration: float
        """

        self._duration = duration

    @property
    def extra_time(self):
        """Gets the extra_time of this MovieElementsInner.

        Element's time span added after the playback.

        :return: The extra_time of this MovieElementsInner.
        :rtype: float
        """
        return self._extra_time

    @extra_time.setter
    def extra_time(self, extra_time):
        """Sets the extra_time of this MovieElementsInner.

        Element's time span added after the playback.

        :param extra_time: The extra_time of this MovieElementsInner.
        :type extra_time: float
        """

        self._extra_time = extra_time

    @property
    def fade_in(self):
        """Gets the fade_in of this MovieElementsInner.

        Adds a fade in effect to the element. Value in seconds.

        :return: The fade_in of this MovieElementsInner.
        :rtype: float
        """
        return self._fade_in

    @fade_in.setter
    def fade_in(self, fade_in):
        """Sets the fade_in of this MovieElementsInner.

        Adds a fade in effect to the element. Value in seconds.

        :param fade_in: The fade_in of this MovieElementsInner.
        :type fade_in: float
        """
        if fade_in is not None and fade_in < 0:
            raise ValueError("Invalid value for `fade_in`, must be a value greater than or equal to `0`")

        self._fade_in = fade_in

    @property
    def fade_out(self):
        """Gets the fade_out of this MovieElementsInner.

        Adds a fade out effect to the element. Value in seconds.

        :return: The fade_out of this MovieElementsInner.
        :rtype: float
        """
        return self._fade_out

    @fade_out.setter
    def fade_out(self, fade_out):
        """Sets the fade_out of this MovieElementsInner.

        Adds a fade out effect to the element. Value in seconds.

        :param fade_out: The fade_out of this MovieElementsInner.
        :type fade_out: float
        """
        if fade_out is not None and fade_out < 0:
            raise ValueError("Invalid value for `fade_out`, must be a value greater than or equal to `0`")

        self._fade_out = fade_out

    @property
    def start(self):
        """Gets the start of this MovieElementsInner.

        Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.

        :return: The start of this MovieElementsInner.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this MovieElementsInner.

        Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.

        :param start: The start of this MovieElementsInner.
        :type start: float
        """

        self._start = start

    @property
    def z_index(self):
        """Gets the z_index of this MovieElementsInner.

        Element's z-index. Use this property to reorganize the layering of the elements like in HTML

        :return: The z_index of this MovieElementsInner.
        :rtype: float
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this MovieElementsInner.

        Element's z-index. Use this property to reorganize the layering of the elements like in HTML

        :param z_index: The z_index of this MovieElementsInner.
        :type z_index: float
        """

        self._z_index = z_index

    @property
    def chroma_key(self):
        """Gets the chroma_key of this MovieElementsInner.


        :return: The chroma_key of this MovieElementsInner.
        :rtype: VisualElementChromaKey
        """
        return self._chroma_key

    @chroma_key.setter
    def chroma_key(self, chroma_key):
        """Sets the chroma_key of this MovieElementsInner.


        :param chroma_key: The chroma_key of this MovieElementsInner.
        :type chroma_key: VisualElementChromaKey
        """

        self._chroma_key = chroma_key

    @property
    def crop(self):
        """Gets the crop of this MovieElementsInner.


        :return: The crop of this MovieElementsInner.
        :rtype: VisualElementCrop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this MovieElementsInner.


        :param crop: The crop of this MovieElementsInner.
        :type crop: VisualElementCrop
        """

        self._crop = crop

    @property
    def pan(self):
        """Gets the pan of this MovieElementsInner.

        Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan

        :return: The pan of this MovieElementsInner.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this MovieElementsInner.

        Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan

        :param pan: The pan of this MovieElementsInner.
        :type pan: str
        """
        allowed_values = ["left", "top", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right"]  # noqa: E501
        if pan not in allowed_values:
            raise ValueError(
                "Invalid value for `pan` ({0}), must be one of {1}"
                .format(pan, allowed_values)
            )

        self._pan = pan

    @property
    def position(self):
        """Gets the position of this MovieElementsInner.

        Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties

        :return: The position of this MovieElementsInner.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this MovieElementsInner.

        Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties

        :param position: The position of this MovieElementsInner.
        :type position: str
        """
        allowed_values = ["top-left", "top-right", "bottom-right", "bottom-left", "center-center", "custom"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def rotate(self):
        """Gets the rotate of this MovieElementsInner.


        :return: The rotate of this MovieElementsInner.
        :rtype: VisualElementRotate
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this MovieElementsInner.


        :param rotate: The rotate of this MovieElementsInner.
        :type rotate: VisualElementRotate
        """

        self._rotate = rotate

    @property
    def scale(self):
        """Gets the scale of this MovieElementsInner.


        :return: The scale of this MovieElementsInner.
        :rtype: VisualElementScale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this MovieElementsInner.


        :param scale: The scale of this MovieElementsInner.
        :type scale: VisualElementScale
        """

        self._scale = scale

    @property
    def x(self):
        """Gets the x of this MovieElementsInner.

        Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side

        :return: The x of this MovieElementsInner.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this MovieElementsInner.

        Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side

        :param x: The x of this MovieElementsInner.
        :type x: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this MovieElementsInner.

        Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side

        :return: The y of this MovieElementsInner.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this MovieElementsInner.

        Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side

        :param y: The y of this MovieElementsInner.
        :type y: float
        """

        self._y = y

    @property
    def zoom(self):
        """Gets the zoom of this MovieElementsInner.

        Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming

        :return: The zoom of this MovieElementsInner.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this MovieElementsInner.

        Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming

        :param zoom: The zoom of this MovieElementsInner.
        :type zoom: int
        """
        if zoom is not None and zoom > 100:
            raise ValueError("Invalid value for `zoom`, must be a value less than or equal to `100`")
        if zoom is not None and zoom < -100:
            raise ValueError("Invalid value for `zoom`, must be a value greater than or equal to `-100`")

        self._zoom = zoom

    @property
    def loop(self):
        """Gets the loop of this MovieElementsInner.

        Sets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.

        :return: The loop of this MovieElementsInner.
        :rtype: int
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """Sets the loop of this MovieElementsInner.

        Sets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.

        :param loop: The loop of this MovieElementsInner.
        :type loop: int
        """
        if loop is not None and loop < -1:
            raise ValueError("Invalid value for `loop`, must be a value greater than or equal to `-1`")

        self._loop = loop

    @property
    def muted(self):
        """Gets the muted of this MovieElementsInner.

        Mutes the audio

        :return: The muted of this MovieElementsInner.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this MovieElementsInner.

        Mutes the audio

        :param muted: The muted of this MovieElementsInner.
        :type muted: bool
        """

        self._muted = muted

    @property
    def volume(self):
        """Gets the volume of this MovieElementsInner.


        :return: The volume of this MovieElementsInner.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MovieElementsInner.


        :param volume: The volume of this MovieElementsInner.
        :type volume: float
        """
        if volume is not None and volume > 10:
            raise ValueError("Invalid value for `volume`, must be a value less than or equal to `10`")
        if volume is not None and volume < 0:
            raise ValueError("Invalid value for `volume`, must be a value greater than or equal to `0`")

        self._volume = volume

    @property
    def height(self):
        """Gets the height of this MovieElementsInner.

        Desired text element height, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie height

        :return: The height of this MovieElementsInner.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MovieElementsInner.

        Desired text element height, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie height

        :param height: The height of this MovieElementsInner.
        :type height: int
        """
        if height is not None and height > 1080:
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1080`")
        if height is not None and height < -1:
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `-1`")

        self._height = height

    @property
    def settings(self):
        """Gets the settings of this MovieElementsInner.

        Settings to be passed to the component

        :return: The settings of this MovieElementsInner.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this MovieElementsInner.

        Settings to be passed to the component

        :param settings: The settings of this MovieElementsInner.
        :type settings: object
        """

        self._settings = settings

    @property
    def style(self):
        """Gets the style of this MovieElementsInner.

        Style of the text element. Check all available text style at <a href='https://json2video.com/docs/resources/text/'>https://json2video.com/resources/text/</a>

        :return: The style of this MovieElementsInner.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this MovieElementsInner.

        Style of the text element. Check all available text style at <a href='https://json2video.com/docs/resources/text/'>https://json2video.com/resources/text/</a>

        :param style: The style of this MovieElementsInner.
        :type style: str
        """

        self._style = style

    @property
    def text(self):
        """Gets the text of this MovieElementsInner.

        The sentence or sentences to be converted to voice audio

        :return: The text of this MovieElementsInner.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MovieElementsInner.

        The sentence or sentences to be converted to voice audio

        :param text: The text of this MovieElementsInner.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def width(self):
        """Gets the width of this MovieElementsInner.

        Desired text element width, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie width

        :return: The width of this MovieElementsInner.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this MovieElementsInner.

        Desired text element width, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie width

        :param width: The width of this MovieElementsInner.
        :type width: int
        """
        if width is not None and width > 1920:
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1920`")
        if width is not None and width < -1:
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `-1`")

        self._width = width

    @property
    def html(self):
        """Gets the html of this MovieElementsInner.

        HTML snippet to render. Compatible with HTML5, CSS3 and Javascript

        :return: The html of this MovieElementsInner.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this MovieElementsInner.

        HTML snippet to render. Compatible with HTML5, CSS3 and Javascript

        :param html: The html of this MovieElementsInner.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def tailwindcss(self):
        """Gets the tailwindcss of this MovieElementsInner.

        Enables usage of TailwindCSS for the HTML snippet

        :return: The tailwindcss of this MovieElementsInner.
        :rtype: bool
        """
        return self._tailwindcss

    @tailwindcss.setter
    def tailwindcss(self, tailwindcss):
        """Sets the tailwindcss of this MovieElementsInner.

        Enables usage of TailwindCSS for the HTML snippet

        :param tailwindcss: The tailwindcss of this MovieElementsInner.
        :type tailwindcss: bool
        """

        self._tailwindcss = tailwindcss

    @property
    def component(self):
        """Gets the component of this MovieElementsInner.

        ID of the Component element. Check all available components in the <a href='https://json2video.com/docs/resources/basic/'>library</a>

        :return: The component of this MovieElementsInner.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this MovieElementsInner.

        ID of the Component element. Check all available components in the <a href='https://json2video.com/docs/resources/basic/'>library</a>

        :param component: The component of this MovieElementsInner.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def template(self):
        """Gets the template of this MovieElementsInner.

        ID of the Component element. Check all available components at <a href='https://json2video.com/docs/resources/basic/'>https://json2video.com/docs/resources/basic/</a>

        :return: The template of this MovieElementsInner.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this MovieElementsInner.

        ID of the Component element. Check all available components at <a href='https://json2video.com/docs/resources/basic/'>https://json2video.com/docs/resources/basic/</a>

        :param template: The template of this MovieElementsInner.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def voice(self):
        """Gets the voice of this MovieElementsInner.

        The voice name to be used. Check <a href=\"/docs/tutorial/voice-elements/\">available voices</a>.

        :return: The voice of this MovieElementsInner.
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this MovieElementsInner.

        The voice name to be used. Check <a href=\"/docs/tutorial/voice-elements/\">available voices</a>.

        :param voice: The voice of this MovieElementsInner.
        :type voice: str
        """

        self._voice = voice
