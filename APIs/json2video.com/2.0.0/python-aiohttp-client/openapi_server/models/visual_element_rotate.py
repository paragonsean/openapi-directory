# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VisualElementRotate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: float=0, speed: float=0):
        """VisualElementRotate - a model defined in OpenAPI

        :param angle: The angle of this VisualElementRotate.
        :param speed: The speed of this VisualElementRotate.
        """
        self.openapi_types = {
            'angle': float,
            'speed': float
        }

        self.attribute_map = {
            'angle': 'angle',
            'speed': 'speed'
        }

        self._angle = angle
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisualElementRotate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisualElement_rotate of this VisualElementRotate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this VisualElementRotate.

        Sets the angle of rotation

        :return: The angle of this VisualElementRotate.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this VisualElementRotate.

        Sets the angle of rotation

        :param angle: The angle of this VisualElementRotate.
        :type angle: float
        """
        if angle is None:
            raise ValueError("Invalid value for `angle`, must not be `None`")
        if angle is not None and angle > 360:
            raise ValueError("Invalid value for `angle`, must be a value less than or equal to `360`")
        if angle is not None and angle < -360:
            raise ValueError("Invalid value for `angle`, must be a value greater than or equal to `-360`")

        self._angle = angle

    @property
    def speed(self):
        """Gets the speed of this VisualElementRotate.

        Sets the time it takes to rotate the provided angle. A zero value means no movement

        :return: The speed of this VisualElementRotate.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VisualElementRotate.

        Sets the time it takes to rotate the provided angle. A zero value means no movement

        :param speed: The speed of this VisualElementRotate.
        :type speed: float
        """
        if speed is not None and speed < 0:
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")

        self._speed = speed
