# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, muted: bool=False, volume: float=5):
        """AudioElement - a model defined in OpenAPI

        :param muted: The muted of this AudioElement.
        :param volume: The volume of this AudioElement.
        """
        self.openapi_types = {
            'muted': bool,
            'volume': float
        }

        self.attribute_map = {
            'muted': 'muted',
            'volume': 'volume'
        }

        self._muted = muted
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioElement of this AudioElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def muted(self):
        """Gets the muted of this AudioElement.

        Mutes the audio

        :return: The muted of this AudioElement.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this AudioElement.

        Mutes the audio

        :param muted: The muted of this AudioElement.
        :type muted: bool
        """

        self._muted = muted

    @property
    def volume(self):
        """Gets the volume of this AudioElement.


        :return: The volume of this AudioElement.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this AudioElement.


        :param volume: The volume of this AudioElement.
        :type volume: float
        """
        if volume is not None and volume > 10:
            raise ValueError("Invalid value for `volume`, must be a value less than or equal to `10`")
        if volume is not None and volume < 0:
            raise ValueError("Invalid value for `volume`, must be a value greater than or equal to `0`")

        self._volume = volume
