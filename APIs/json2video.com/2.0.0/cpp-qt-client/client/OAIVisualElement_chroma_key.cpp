/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualElement_chroma_key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualElement_chroma_key::OAIVisualElement_chroma_key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualElement_chroma_key::OAIVisualElement_chroma_key() {
    this->initializeModel();
}

OAIVisualElement_chroma_key::~OAIVisualElement_chroma_key() {}

void OAIVisualElement_chroma_key::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_tolerance_isSet = false;
    m_tolerance_isValid = false;
}

void OAIVisualElement_chroma_key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualElement_chroma_key::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_tolerance_isValid = ::OpenAPI::fromJsonValue(m_tolerance, json[QString("tolerance")]);
    m_tolerance_isSet = !json[QString("tolerance")].isNull() && m_tolerance_isValid;
}

QString OAIVisualElement_chroma_key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualElement_chroma_key::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_tolerance_isSet) {
        obj.insert(QString("tolerance"), ::OpenAPI::toJsonValue(m_tolerance));
    }
    return obj;
}

QString OAIVisualElement_chroma_key::getColor() const {
    return m_color;
}
void OAIVisualElement_chroma_key::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIVisualElement_chroma_key::is_color_Set() const{
    return m_color_isSet;
}

bool OAIVisualElement_chroma_key::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAIVisualElement_chroma_key::getTolerance() const {
    return m_tolerance;
}
void OAIVisualElement_chroma_key::setTolerance(const qint32 &tolerance) {
    m_tolerance = tolerance;
    m_tolerance_isSet = true;
}

bool OAIVisualElement_chroma_key::is_tolerance_Set() const{
    return m_tolerance_isSet;
}

bool OAIVisualElement_chroma_key::is_tolerance_Valid() const{
    return m_tolerance_isValid;
}

bool OAIVisualElement_chroma_key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualElement_chroma_key::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_color_isValid && true;
}

} // namespace OpenAPI
