/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScene.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScene::OAIScene(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScene::OAIScene() {
    this->initializeModel();
}

OAIScene::~OAIScene() {}

void OAIScene::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;
}

void OAIScene::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScene::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("background-color")]);
    m_background_color_isSet = !json[QString("background-color")].isNull() && m_background_color_isValid;

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("transition")]);
    m_transition_isSet = !json[QString("transition")].isNull() && m_transition_isValid;
}

QString OAIScene::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScene::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("background-color"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_transition.isSet()) {
        obj.insert(QString("transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    return obj;
}

QString OAIScene::getBackgroundColor() const {
    return m_background_color;
}
void OAIScene::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIScene::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIScene::is_background_color_Valid() const{
    return m_background_color_isValid;
}

bool OAIScene::isCache() const {
    return m_cache;
}
void OAIScene::setCache(const bool &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIScene::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIScene::is_cache_Valid() const{
    return m_cache_isValid;
}

QString OAIScene::getComment() const {
    return m_comment;
}
void OAIScene::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIScene::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIScene::is_comment_Valid() const{
    return m_comment_isValid;
}

float OAIScene::getDuration() const {
    return m_duration;
}
void OAIScene::setDuration(const float &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIScene::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIScene::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAIScene_elements_inner> OAIScene::getElements() const {
    return m_elements;
}
void OAIScene::setElements(const QList<OAIScene_elements_inner> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIScene::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIScene::is_elements_Valid() const{
    return m_elements_isValid;
}

OAIScene_transition OAIScene::getTransition() const {
    return m_transition;
}
void OAIScene::setTransition(const OAIScene_transition &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIScene::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIScene::is_transition_Valid() const{
    return m_transition_isValid;
}

bool OAIScene::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScene::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
