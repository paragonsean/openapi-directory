/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo::OAIVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo::OAIVideo() {
    this->initializeModel();
}

OAIVideo::~OAIVideo() {}

void OAIVideo::initializeModel() {

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_extra_time_isSet = false;
    m_extra_time_isValid = false;

    m_fade_in_isSet = false;
    m_fade_in_isValid = false;

    m_fade_out_isSet = false;
    m_fade_out_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_z_index_isSet = false;
    m_z_index_isValid = false;

    m_chroma_key_isSet = false;
    m_chroma_key_isValid = false;

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_pan_isSet = false;
    m_pan_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_rotate_isSet = false;
    m_rotate_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_src_isSet = false;
    m_src_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_loop_isSet = false;
    m_loop_isValid = false;
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_extra_time_isValid = ::OpenAPI::fromJsonValue(m_extra_time, json[QString("extra-time")]);
    m_extra_time_isSet = !json[QString("extra-time")].isNull() && m_extra_time_isValid;

    m_fade_in_isValid = ::OpenAPI::fromJsonValue(m_fade_in, json[QString("fade-in")]);
    m_fade_in_isSet = !json[QString("fade-in")].isNull() && m_fade_in_isValid;

    m_fade_out_isValid = ::OpenAPI::fromJsonValue(m_fade_out, json[QString("fade-out")]);
    m_fade_out_isSet = !json[QString("fade-out")].isNull() && m_fade_out_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_z_index_isValid = ::OpenAPI::fromJsonValue(m_z_index, json[QString("z-index")]);
    m_z_index_isSet = !json[QString("z-index")].isNull() && m_z_index_isValid;

    m_chroma_key_isValid = ::OpenAPI::fromJsonValue(m_chroma_key, json[QString("chroma-key")]);
    m_chroma_key_isSet = !json[QString("chroma-key")].isNull() && m_chroma_key_isValid;

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("crop")]);
    m_crop_isSet = !json[QString("crop")].isNull() && m_crop_isValid;

    m_pan_isValid = ::OpenAPI::fromJsonValue(m_pan, json[QString("pan")]);
    m_pan_isSet = !json[QString("pan")].isNull() && m_pan_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_rotate_isValid = ::OpenAPI::fromJsonValue(m_rotate, json[QString("rotate")]);
    m_rotate_isSet = !json[QString("rotate")].isNull() && m_rotate_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_src_isValid = ::OpenAPI::fromJsonValue(m_src, json[QString("src")]);
    m_src_isSet = !json[QString("src")].isNull() && m_src_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_loop_isValid = ::OpenAPI::fromJsonValue(m_loop, json[QString("loop")]);
    m_loop_isSet = !json[QString("loop")].isNull() && m_loop_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_extra_time_isSet) {
        obj.insert(QString("extra-time"), ::OpenAPI::toJsonValue(m_extra_time));
    }
    if (m_fade_in_isSet) {
        obj.insert(QString("fade-in"), ::OpenAPI::toJsonValue(m_fade_in));
    }
    if (m_fade_out_isSet) {
        obj.insert(QString("fade-out"), ::OpenAPI::toJsonValue(m_fade_out));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_z_index_isSet) {
        obj.insert(QString("z-index"), ::OpenAPI::toJsonValue(m_z_index));
    }
    if (m_chroma_key.isSet()) {
        obj.insert(QString("chroma-key"), ::OpenAPI::toJsonValue(m_chroma_key));
    }
    if (m_crop.isSet()) {
        obj.insert(QString("crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_pan_isSet) {
        obj.insert(QString("pan"), ::OpenAPI::toJsonValue(m_pan));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_rotate.isSet()) {
        obj.insert(QString("rotate"), ::OpenAPI::toJsonValue(m_rotate));
    }
    if (m_scale.isSet()) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_src_isSet) {
        obj.insert(QString("src"), ::OpenAPI::toJsonValue(m_src));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_loop_isSet) {
        obj.insert(QString("loop"), ::OpenAPI::toJsonValue(m_loop));
    }
    return obj;
}

bool OAIVideo::isCache() const {
    return m_cache;
}
void OAIVideo::setCache(const bool &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIVideo::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIVideo::is_cache_Valid() const{
    return m_cache_isValid;
}

QString OAIVideo::getComment() const {
    return m_comment;
}
void OAIVideo::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIVideo::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIVideo::is_comment_Valid() const{
    return m_comment_isValid;
}

float OAIVideo::getDuration() const {
    return m_duration;
}
void OAIVideo::setDuration(const float &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo::is_duration_Valid() const{
    return m_duration_isValid;
}

float OAIVideo::getExtraTime() const {
    return m_extra_time;
}
void OAIVideo::setExtraTime(const float &extra_time) {
    m_extra_time = extra_time;
    m_extra_time_isSet = true;
}

bool OAIVideo::is_extra_time_Set() const{
    return m_extra_time_isSet;
}

bool OAIVideo::is_extra_time_Valid() const{
    return m_extra_time_isValid;
}

float OAIVideo::getFadeIn() const {
    return m_fade_in;
}
void OAIVideo::setFadeIn(const float &fade_in) {
    m_fade_in = fade_in;
    m_fade_in_isSet = true;
}

bool OAIVideo::is_fade_in_Set() const{
    return m_fade_in_isSet;
}

bool OAIVideo::is_fade_in_Valid() const{
    return m_fade_in_isValid;
}

float OAIVideo::getFadeOut() const {
    return m_fade_out;
}
void OAIVideo::setFadeOut(const float &fade_out) {
    m_fade_out = fade_out;
    m_fade_out_isSet = true;
}

bool OAIVideo::is_fade_out_Set() const{
    return m_fade_out_isSet;
}

bool OAIVideo::is_fade_out_Valid() const{
    return m_fade_out_isValid;
}

float OAIVideo::getStart() const {
    return m_start;
}
void OAIVideo::setStart(const float &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIVideo::is_start_Set() const{
    return m_start_isSet;
}

bool OAIVideo::is_start_Valid() const{
    return m_start_isValid;
}

double OAIVideo::getZIndex() const {
    return m_z_index;
}
void OAIVideo::setZIndex(const double &z_index) {
    m_z_index = z_index;
    m_z_index_isSet = true;
}

bool OAIVideo::is_z_index_Set() const{
    return m_z_index_isSet;
}

bool OAIVideo::is_z_index_Valid() const{
    return m_z_index_isValid;
}

OAIVisualElement_chroma_key OAIVideo::getChromaKey() const {
    return m_chroma_key;
}
void OAIVideo::setChromaKey(const OAIVisualElement_chroma_key &chroma_key) {
    m_chroma_key = chroma_key;
    m_chroma_key_isSet = true;
}

bool OAIVideo::is_chroma_key_Set() const{
    return m_chroma_key_isSet;
}

bool OAIVideo::is_chroma_key_Valid() const{
    return m_chroma_key_isValid;
}

OAIVisualElement_crop OAIVideo::getCrop() const {
    return m_crop;
}
void OAIVideo::setCrop(const OAIVisualElement_crop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIVideo::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIVideo::is_crop_Valid() const{
    return m_crop_isValid;
}

QString OAIVideo::getPan() const {
    return m_pan;
}
void OAIVideo::setPan(const QString &pan) {
    m_pan = pan;
    m_pan_isSet = true;
}

bool OAIVideo::is_pan_Set() const{
    return m_pan_isSet;
}

bool OAIVideo::is_pan_Valid() const{
    return m_pan_isValid;
}

QString OAIVideo::getPosition() const {
    return m_position;
}
void OAIVideo::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIVideo::is_position_Set() const{
    return m_position_isSet;
}

bool OAIVideo::is_position_Valid() const{
    return m_position_isValid;
}

OAIVisualElement_rotate OAIVideo::getRotate() const {
    return m_rotate;
}
void OAIVideo::setRotate(const OAIVisualElement_rotate &rotate) {
    m_rotate = rotate;
    m_rotate_isSet = true;
}

bool OAIVideo::is_rotate_Set() const{
    return m_rotate_isSet;
}

bool OAIVideo::is_rotate_Valid() const{
    return m_rotate_isValid;
}

OAIVisualElement_scale OAIVideo::getScale() const {
    return m_scale;
}
void OAIVideo::setScale(const OAIVisualElement_scale &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIVideo::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIVideo::is_scale_Valid() const{
    return m_scale_isValid;
}

double OAIVideo::getX() const {
    return m_x;
}
void OAIVideo::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIVideo::is_x_Set() const{
    return m_x_isSet;
}

bool OAIVideo::is_x_Valid() const{
    return m_x_isValid;
}

double OAIVideo::getY() const {
    return m_y;
}
void OAIVideo::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIVideo::is_y_Set() const{
    return m_y_isSet;
}

bool OAIVideo::is_y_Valid() const{
    return m_y_isValid;
}

qint32 OAIVideo::getZoom() const {
    return m_zoom;
}
void OAIVideo::setZoom(const qint32 &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIVideo::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIVideo::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIVideo::isMuted() const {
    return m_muted;
}
void OAIVideo::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAIVideo::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAIVideo::is_muted_Valid() const{
    return m_muted_isValid;
}

double OAIVideo::getVolume() const {
    return m_volume;
}
void OAIVideo::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIVideo::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIVideo::is_volume_Valid() const{
    return m_volume_isValid;
}

QString OAIVideo::getSrc() const {
    return m_src;
}
void OAIVideo::setSrc(const QString &src) {
    m_src = src;
    m_src_isSet = true;
}

bool OAIVideo::is_src_Set() const{
    return m_src_isSet;
}

bool OAIVideo::is_src_Valid() const{
    return m_src_isValid;
}

QString OAIVideo::getType() const {
    return m_type;
}
void OAIVideo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVideo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVideo::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIVideo::getLoop() const {
    return m_loop;
}
void OAIVideo::setLoop(const qint32 &loop) {
    m_loop = loop;
    m_loop_isSet = true;
}

bool OAIVideo::is_loop_Set() const{
    return m_loop_isSet;
}

bool OAIVideo::is_loop_Valid() const{
    return m_loop_isValid;
}

bool OAIVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chroma_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loop_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
