/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptureProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptureProperty::OAICaptureProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptureProperty::OAICaptureProperty() {
    this->initializeModel();
}

OAICaptureProperty::~OAICaptureProperty() {}

void OAICaptureProperty::initializeModel() {

    m_capture_isSet = false;
    m_capture_isValid = false;
}

void OAICaptureProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptureProperty::fromJsonObject(QJsonObject json) {

    m_capture_isValid = ::OpenAPI::fromJsonValue(m_capture, json[QString("capture")]);
    m_capture_isSet = !json[QString("capture")].isNull() && m_capture_isValid;
}

QString OAICaptureProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptureProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_capture.isSet()) {
        obj.insert(QString("capture"), ::OpenAPI::toJsonValue(m_capture));
    }
    return obj;
}

OAICaptureProperty_capture OAICaptureProperty::getCapture() const {
    return m_capture;
}
void OAICaptureProperty::setCapture(const OAICaptureProperty_capture &capture) {
    m_capture = capture;
    m_capture_isSet = true;
}

bool OAICaptureProperty::is_capture_Set() const{
    return m_capture_isSet;
}

bool OAICaptureProperty::is_capture_Valid() const{
    return m_capture_isValid;
}

bool OAICaptureProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capture.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptureProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
