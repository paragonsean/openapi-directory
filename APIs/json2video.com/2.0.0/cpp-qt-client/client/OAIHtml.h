/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHtml.h
 *
 * Creates a video recording or a screenshot of the provided HTML snippet
 */

#ifndef OAIHtml_H
#define OAIHtml_H

#include <QJsonObject>

#include "OAIVisualElement_chroma_key.h"
#include "OAIVisualElement_crop.h"
#include "OAIVisualElement_rotate.h"
#include "OAIVisualElement_scale.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVisualElement_chroma_key;
class OAIVisualElement_crop;
class OAIVisualElement_rotate;
class OAIVisualElement_scale;

class OAIHtml : public OAIObject {
public:
    OAIHtml();
    OAIHtml(QString json);
    ~OAIHtml() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCache() const;
    void setCache(const bool &cache);
    bool is_cache_Set() const;
    bool is_cache_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    float getDuration() const;
    void setDuration(const float &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    float getExtraTime() const;
    void setExtraTime(const float &extra_time);
    bool is_extra_time_Set() const;
    bool is_extra_time_Valid() const;

    float getFadeIn() const;
    void setFadeIn(const float &fade_in);
    bool is_fade_in_Set() const;
    bool is_fade_in_Valid() const;

    float getFadeOut() const;
    void setFadeOut(const float &fade_out);
    bool is_fade_out_Set() const;
    bool is_fade_out_Valid() const;

    float getStart() const;
    void setStart(const float &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    double getZIndex() const;
    void setZIndex(const double &z_index);
    bool is_z_index_Set() const;
    bool is_z_index_Valid() const;

    OAIVisualElement_chroma_key getChromaKey() const;
    void setChromaKey(const OAIVisualElement_chroma_key &chroma_key);
    bool is_chroma_key_Set() const;
    bool is_chroma_key_Valid() const;

    OAIVisualElement_crop getCrop() const;
    void setCrop(const OAIVisualElement_crop &crop);
    bool is_crop_Set() const;
    bool is_crop_Valid() const;

    QString getPan() const;
    void setPan(const QString &pan);
    bool is_pan_Set() const;
    bool is_pan_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIVisualElement_rotate getRotate() const;
    void setRotate(const OAIVisualElement_rotate &rotate);
    bool is_rotate_Set() const;
    bool is_rotate_Valid() const;

    OAIVisualElement_scale getScale() const;
    void setScale(const OAIVisualElement_scale &scale);
    bool is_scale_Set() const;
    bool is_scale_Valid() const;

    double getX() const;
    void setX(const double &x);
    bool is_x_Set() const;
    bool is_x_Valid() const;

    double getY() const;
    void setY(const double &y);
    bool is_y_Set() const;
    bool is_y_Valid() const;

    qint32 getZoom() const;
    void setZoom(const qint32 &zoom);
    bool is_zoom_Set() const;
    bool is_zoom_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    QString getHtml() const;
    void setHtml(const QString &html);
    bool is_html_Set() const;
    bool is_html_Valid() const;

    bool isTailwindcss() const;
    void setTailwindcss(const bool &tailwindcss);
    bool is_tailwindcss_Set() const;
    bool is_tailwindcss_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cache;
    bool m_cache_isSet;
    bool m_cache_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    float m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    float m_extra_time;
    bool m_extra_time_isSet;
    bool m_extra_time_isValid;

    float m_fade_in;
    bool m_fade_in_isSet;
    bool m_fade_in_isValid;

    float m_fade_out;
    bool m_fade_out_isSet;
    bool m_fade_out_isValid;

    float m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    double m_z_index;
    bool m_z_index_isSet;
    bool m_z_index_isValid;

    OAIVisualElement_chroma_key m_chroma_key;
    bool m_chroma_key_isSet;
    bool m_chroma_key_isValid;

    OAIVisualElement_crop m_crop;
    bool m_crop_isSet;
    bool m_crop_isValid;

    QString m_pan;
    bool m_pan_isSet;
    bool m_pan_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIVisualElement_rotate m_rotate;
    bool m_rotate_isSet;
    bool m_rotate_isValid;

    OAIVisualElement_scale m_scale;
    bool m_scale_isSet;
    bool m_scale_isValid;

    double m_x;
    bool m_x_isSet;
    bool m_x_isValid;

    double m_y;
    bool m_y_isSet;
    bool m_y_isValid;

    qint32 m_zoom;
    bool m_zoom_isSet;
    bool m_zoom_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    QString m_html;
    bool m_html_isSet;
    bool m_html_isValid;

    bool m_tailwindcss;
    bool m_tailwindcss_isSet;
    bool m_tailwindcss_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHtml)

#endif // OAIHtml_H
