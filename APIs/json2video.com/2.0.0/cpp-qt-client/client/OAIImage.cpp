/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_chroma_key_isSet = false;
    m_chroma_key_isValid = false;

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_pan_isSet = false;
    m_pan_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_rotate_isSet = false;
    m_rotate_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;

    m_src_isSet = false;
    m_src_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_chroma_key_isValid = ::OpenAPI::fromJsonValue(m_chroma_key, json[QString("chroma-key")]);
    m_chroma_key_isSet = !json[QString("chroma-key")].isNull() && m_chroma_key_isValid;

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("crop")]);
    m_crop_isSet = !json[QString("crop")].isNull() && m_crop_isValid;

    m_pan_isValid = ::OpenAPI::fromJsonValue(m_pan, json[QString("pan")]);
    m_pan_isSet = !json[QString("pan")].isNull() && m_pan_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_rotate_isValid = ::OpenAPI::fromJsonValue(m_rotate, json[QString("rotate")]);
    m_rotate_isSet = !json[QString("rotate")].isNull() && m_rotate_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;

    m_src_isValid = ::OpenAPI::fromJsonValue(m_src, json[QString("src")]);
    m_src_isSet = !json[QString("src")].isNull() && m_src_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_chroma_key.isSet()) {
        obj.insert(QString("chroma-key"), ::OpenAPI::toJsonValue(m_chroma_key));
    }
    if (m_crop.isSet()) {
        obj.insert(QString("crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_pan_isSet) {
        obj.insert(QString("pan"), ::OpenAPI::toJsonValue(m_pan));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_rotate.isSet()) {
        obj.insert(QString("rotate"), ::OpenAPI::toJsonValue(m_rotate));
    }
    if (m_scale.isSet()) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    if (m_src_isSet) {
        obj.insert(QString("src"), ::OpenAPI::toJsonValue(m_src));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIVisualElement_chroma_key OAIImage::getChromaKey() const {
    return m_chroma_key;
}
void OAIImage::setChromaKey(const OAIVisualElement_chroma_key &chroma_key) {
    m_chroma_key = chroma_key;
    m_chroma_key_isSet = true;
}

bool OAIImage::is_chroma_key_Set() const{
    return m_chroma_key_isSet;
}

bool OAIImage::is_chroma_key_Valid() const{
    return m_chroma_key_isValid;
}

OAIVisualElement_crop OAIImage::getCrop() const {
    return m_crop;
}
void OAIImage::setCrop(const OAIVisualElement_crop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIImage::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIImage::is_crop_Valid() const{
    return m_crop_isValid;
}

QString OAIImage::getPan() const {
    return m_pan;
}
void OAIImage::setPan(const QString &pan) {
    m_pan = pan;
    m_pan_isSet = true;
}

bool OAIImage::is_pan_Set() const{
    return m_pan_isSet;
}

bool OAIImage::is_pan_Valid() const{
    return m_pan_isValid;
}

QString OAIImage::getPosition() const {
    return m_position;
}
void OAIImage::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIImage::is_position_Set() const{
    return m_position_isSet;
}

bool OAIImage::is_position_Valid() const{
    return m_position_isValid;
}

OAIVisualElement_rotate OAIImage::getRotate() const {
    return m_rotate;
}
void OAIImage::setRotate(const OAIVisualElement_rotate &rotate) {
    m_rotate = rotate;
    m_rotate_isSet = true;
}

bool OAIImage::is_rotate_Set() const{
    return m_rotate_isSet;
}

bool OAIImage::is_rotate_Valid() const{
    return m_rotate_isValid;
}

OAIVisualElement_scale OAIImage::getScale() const {
    return m_scale;
}
void OAIImage::setScale(const OAIVisualElement_scale &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIImage::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIImage::is_scale_Valid() const{
    return m_scale_isValid;
}

double OAIImage::getX() const {
    return m_x;
}
void OAIImage::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIImage::is_x_Set() const{
    return m_x_isSet;
}

bool OAIImage::is_x_Valid() const{
    return m_x_isValid;
}

double OAIImage::getY() const {
    return m_y;
}
void OAIImage::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIImage::is_y_Set() const{
    return m_y_isSet;
}

bool OAIImage::is_y_Valid() const{
    return m_y_isValid;
}

qint32 OAIImage::getZoom() const {
    return m_zoom;
}
void OAIImage::setZoom(const qint32 &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIImage::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIImage::is_zoom_Valid() const{
    return m_zoom_isValid;
}

QString OAIImage::getSrc() const {
    return m_src;
}
void OAIImage::setSrc(const QString &src) {
    m_src = src;
    m_src_isSet = true;
}

bool OAIImage::is_src_Set() const{
    return m_src_isSet;
}

bool OAIImage::is_src_Valid() const{
    return m_src_isValid;
}

QString OAIImage::getType() const {
    return m_type;
}
void OAIImage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImage::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chroma_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
