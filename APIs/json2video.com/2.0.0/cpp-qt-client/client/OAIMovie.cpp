/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMovie.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMovie::OAIMovie(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMovie::OAIMovie() {
    this->initializeModel();
}

OAIMovie::~OAIMovie() {}

void OAIMovie::initializeModel() {

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_exports_isSet = false;
    m_exports_isValid = false;

    m_fps_isSet = false;
    m_fps_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_scenes_isSet = false;
    m_scenes_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIMovie::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMovie::fromJsonObject(QJsonObject json) {

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_exports_isValid = ::OpenAPI::fromJsonValue(m_exports, json[QString("exports")]);
    m_exports_isSet = !json[QString("exports")].isNull() && m_exports_isValid;

    m_fps_isValid = ::OpenAPI::fromJsonValue(m_fps, json[QString("fps")]);
    m_fps_isSet = !json[QString("fps")].isNull() && m_fps_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_scenes_isValid = ::OpenAPI::fromJsonValue(m_scenes, json[QString("scenes")]);
    m_scenes_isSet = !json[QString("scenes")].isNull() && m_scenes_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIMovie::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMovie::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_exports.size() > 0) {
        obj.insert(QString("exports"), ::OpenAPI::toJsonValue(m_exports));
    }
    if (m_fps_isSet) {
        obj.insert(QString("fps"), ::OpenAPI::toJsonValue(m_fps));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_scenes.size() > 0) {
        obj.insert(QString("scenes"), ::OpenAPI::toJsonValue(m_scenes));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

bool OAIMovie::isCache() const {
    return m_cache;
}
void OAIMovie::setCache(const bool &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIMovie::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIMovie::is_cache_Valid() const{
    return m_cache_isValid;
}

QString OAIMovie::getComment() const {
    return m_comment;
}
void OAIMovie::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIMovie::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIMovie::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIMovie::isDraft() const {
    return m_draft;
}
void OAIMovie::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIMovie::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIMovie::is_draft_Valid() const{
    return m_draft_isValid;
}

QList<OAIMovie_elements_inner> OAIMovie::getElements() const {
    return m_elements;
}
void OAIMovie::setElements(const QList<OAIMovie_elements_inner> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIMovie::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIMovie::is_elements_Valid() const{
    return m_elements_isValid;
}

QList<QJsonValue> OAIMovie::getExports() const {
    return m_exports;
}
void OAIMovie::setExports(const QList<QJsonValue> &exports) {
    m_exports = exports;
    m_exports_isSet = true;
}

bool OAIMovie::is_exports_Set() const{
    return m_exports_isSet;
}

bool OAIMovie::is_exports_Valid() const{
    return m_exports_isValid;
}

qint32 OAIMovie::getFps() const {
    return m_fps;
}
void OAIMovie::setFps(const qint32 &fps) {
    m_fps = fps;
    m_fps_isSet = true;
}

bool OAIMovie::is_fps_Set() const{
    return m_fps_isSet;
}

bool OAIMovie::is_fps_Valid() const{
    return m_fps_isValid;
}

qint32 OAIMovie::getHeight() const {
    return m_height;
}
void OAIMovie::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIMovie::is_height_Set() const{
    return m_height_isSet;
}

bool OAIMovie::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIMovie::getQuality() const {
    return m_quality;
}
void OAIMovie::setQuality(const QString &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIMovie::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIMovie::is_quality_Valid() const{
    return m_quality_isValid;
}

QString OAIMovie::getResolution() const {
    return m_resolution;
}
void OAIMovie::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIMovie::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIMovie::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QList<OAIScene> OAIMovie::getScenes() const {
    return m_scenes;
}
void OAIMovie::setScenes(const QList<OAIScene> &scenes) {
    m_scenes = scenes;
    m_scenes_isSet = true;
}

bool OAIMovie::is_scenes_Set() const{
    return m_scenes_isSet;
}

bool OAIMovie::is_scenes_Valid() const{
    return m_scenes_isValid;
}

OAIObject OAIMovie::getSettings() const {
    return m_settings;
}
void OAIMovie::setSettings(const OAIObject &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIMovie::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIMovie::is_settings_Valid() const{
    return m_settings_isValid;
}

qint32 OAIMovie::getWidth() const {
    return m_width;
}
void OAIMovie::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIMovie::is_width_Set() const{
    return m_width_isSet;
}

bool OAIMovie::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIMovie::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMovie::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scenes_isValid && true;
}

} // namespace OpenAPI
