/**
 * JSON2Video API
 * Create and edit awesome videos programmatically
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoice::OAIVoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoice::OAIVoice() {
    this->initializeModel();
}

OAIVoice::~OAIVoice() {}

void OAIVoice::initializeModel() {

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_extra_time_isSet = false;
    m_extra_time_isValid = false;

    m_fade_in_isSet = false;
    m_fade_in_isValid = false;

    m_fade_out_isSet = false;
    m_fade_out_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_z_index_isSet = false;
    m_z_index_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIVoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoice::fromJsonObject(QJsonObject json) {

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_extra_time_isValid = ::OpenAPI::fromJsonValue(m_extra_time, json[QString("extra-time")]);
    m_extra_time_isSet = !json[QString("extra-time")].isNull() && m_extra_time_isValid;

    m_fade_in_isValid = ::OpenAPI::fromJsonValue(m_fade_in, json[QString("fade-in")]);
    m_fade_in_isSet = !json[QString("fade-in")].isNull() && m_fade_in_isValid;

    m_fade_out_isValid = ::OpenAPI::fromJsonValue(m_fade_out, json[QString("fade-out")]);
    m_fade_out_isSet = !json[QString("fade-out")].isNull() && m_fade_out_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_z_index_isValid = ::OpenAPI::fromJsonValue(m_z_index, json[QString("z-index")]);
    m_z_index_isSet = !json[QString("z-index")].isNull() && m_z_index_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIVoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoice::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_extra_time_isSet) {
        obj.insert(QString("extra-time"), ::OpenAPI::toJsonValue(m_extra_time));
    }
    if (m_fade_in_isSet) {
        obj.insert(QString("fade-in"), ::OpenAPI::toJsonValue(m_fade_in));
    }
    if (m_fade_out_isSet) {
        obj.insert(QString("fade-out"), ::OpenAPI::toJsonValue(m_fade_out));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_z_index_isSet) {
        obj.insert(QString("z-index"), ::OpenAPI::toJsonValue(m_z_index));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_voice_isSet) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

bool OAIVoice::isCache() const {
    return m_cache;
}
void OAIVoice::setCache(const bool &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIVoice::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIVoice::is_cache_Valid() const{
    return m_cache_isValid;
}

QString OAIVoice::getComment() const {
    return m_comment;
}
void OAIVoice::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIVoice::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIVoice::is_comment_Valid() const{
    return m_comment_isValid;
}

float OAIVoice::getDuration() const {
    return m_duration;
}
void OAIVoice::setDuration(const float &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVoice::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVoice::is_duration_Valid() const{
    return m_duration_isValid;
}

float OAIVoice::getExtraTime() const {
    return m_extra_time;
}
void OAIVoice::setExtraTime(const float &extra_time) {
    m_extra_time = extra_time;
    m_extra_time_isSet = true;
}

bool OAIVoice::is_extra_time_Set() const{
    return m_extra_time_isSet;
}

bool OAIVoice::is_extra_time_Valid() const{
    return m_extra_time_isValid;
}

float OAIVoice::getFadeIn() const {
    return m_fade_in;
}
void OAIVoice::setFadeIn(const float &fade_in) {
    m_fade_in = fade_in;
    m_fade_in_isSet = true;
}

bool OAIVoice::is_fade_in_Set() const{
    return m_fade_in_isSet;
}

bool OAIVoice::is_fade_in_Valid() const{
    return m_fade_in_isValid;
}

float OAIVoice::getFadeOut() const {
    return m_fade_out;
}
void OAIVoice::setFadeOut(const float &fade_out) {
    m_fade_out = fade_out;
    m_fade_out_isSet = true;
}

bool OAIVoice::is_fade_out_Set() const{
    return m_fade_out_isSet;
}

bool OAIVoice::is_fade_out_Valid() const{
    return m_fade_out_isValid;
}

float OAIVoice::getStart() const {
    return m_start;
}
void OAIVoice::setStart(const float &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIVoice::is_start_Set() const{
    return m_start_isSet;
}

bool OAIVoice::is_start_Valid() const{
    return m_start_isValid;
}

double OAIVoice::getZIndex() const {
    return m_z_index;
}
void OAIVoice::setZIndex(const double &z_index) {
    m_z_index = z_index;
    m_z_index_isSet = true;
}

bool OAIVoice::is_z_index_Set() const{
    return m_z_index_isSet;
}

bool OAIVoice::is_z_index_Valid() const{
    return m_z_index_isValid;
}

bool OAIVoice::isMuted() const {
    return m_muted;
}
void OAIVoice::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAIVoice::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAIVoice::is_muted_Valid() const{
    return m_muted_isValid;
}

double OAIVoice::getVolume() const {
    return m_volume;
}
void OAIVoice::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIVoice::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIVoice::is_volume_Valid() const{
    return m_volume_isValid;
}

QString OAIVoice::getText() const {
    return m_text;
}
void OAIVoice::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIVoice::is_text_Set() const{
    return m_text_isSet;
}

bool OAIVoice::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIVoice::getType() const {
    return m_type;
}
void OAIVoice::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVoice::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVoice::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVoice::getVoice() const {
    return m_voice;
}
void OAIVoice::setVoice(const QString &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIVoice::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIVoice::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIVoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
