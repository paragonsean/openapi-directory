/**
 * Analytics API
 * The <b>Analytics API</b> retrieves call-limit data and the quotas that are set for the RESTful APIs and the legacy Trading API.  <br><br>Responses from calls made to <b>getRateLimits</b> and <b>getUerRateLimits</b> include a list of the applicable resources and the \"call limit\", or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the \"time window\" to which the quota applies.  <br><br>The <b>getRateLimits</b> and <b>getUserRateLimits</b> methods retrieve call-limit information for either an application or user, respectively, and each method must be called with an appropriate OAuth token. That is, <b>getRateLimites</b> requires an access token generated with a client credentials grant and <b>getUserRateLimites</b> requires an access token generated with an authorization code grant. For more information, see <a href=\"/api-docs/static/oauth-tokens.html\">OAuth tokens</a>.  <br><br>Users can analyze the response data to see whether or not a limit might be reached, and from that determine if any action needs to be taken (such as programmatically throttling their request rate). For more on call limits, see <a href=\"https://developer.ebay.com/support/app-check \" target=\"_blank\">Compatible Application Check</a>.
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Error from './model/Error';
import ErrorParameter from './model/ErrorParameter';
import Rate from './model/Rate';
import RateLimit from './model/RateLimit';
import RateLimitsResponse from './model/RateLimitsResponse';
import Resource from './model/Resource';
import RateLimitApi from './api/RateLimitApi';
import UserRateLimitApi from './api/UserRateLimitApi';


/**
* The &lt;b&gt;Analytics API&lt;/b&gt; retrieves call-limit data and the quotas that are set for the RESTful APIs and the legacy Trading API.  &lt;br&gt;&lt;br&gt;Responses from calls made to &lt;b&gt;getRateLimits&lt;/b&gt; and &lt;b&gt;getUerRateLimits&lt;/b&gt; include a list of the applicable resources and the \&quot;call limit\&quot;, or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the \&quot;time window\&quot; to which the quota applies.  &lt;br&gt;&lt;br&gt;The &lt;b&gt;getRateLimits&lt;/b&gt; and &lt;b&gt;getUserRateLimits&lt;/b&gt; methods retrieve call-limit information for either an application or user, respectively, and each method must be called with an appropriate OAuth token. That is, &lt;b&gt;getRateLimites&lt;/b&gt; requires an access token generated with a client credentials grant and &lt;b&gt;getUserRateLimites&lt;/b&gt; requires an access token generated with an authorization code grant. For more information, see &lt;a href&#x3D;\&quot;/api-docs/static/oauth-tokens.html\&quot;&gt;OAuth tokens&lt;/a&gt;.  &lt;br&gt;&lt;br&gt;Users can analyze the response data to see whether or not a limit might be reached, and from that determine if any action needs to be taken (such as programmatically throttling their request rate). For more on call limits, see &lt;a href&#x3D;\&quot;https://developer.ebay.com/support/app-check \&quot; target&#x3D;\&quot;_blank\&quot;&gt;Compatible Application Check&lt;/a&gt;..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AnalyticsApi = require('index'); // See note below*.
* var xxxSvc = new AnalyticsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AnalyticsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AnalyticsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AnalyticsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1_beta.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorParameter model constructor.
     * @property {module:model/ErrorParameter}
     */
    ErrorParameter,

    /**
     * The Rate model constructor.
     * @property {module:model/Rate}
     */
    Rate,

    /**
     * The RateLimit model constructor.
     * @property {module:model/RateLimit}
     */
    RateLimit,

    /**
     * The RateLimitsResponse model constructor.
     * @property {module:model/RateLimitsResponse}
     */
    RateLimitsResponse,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
    * The RateLimitApi service constructor.
    * @property {module:api/RateLimitApi}
    */
    RateLimitApi,

    /**
    * The UserRateLimitApi service constructor.
    * @property {module:api/UserRateLimitApi}
    */
    UserRateLimitApi
};
