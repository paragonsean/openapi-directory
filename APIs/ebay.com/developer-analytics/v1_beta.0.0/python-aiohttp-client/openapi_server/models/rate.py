# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=None, remaining: int=None, reset: str=None, time_window: int=None):
        """Rate - a model defined in OpenAPI

        :param limit: The limit of this Rate.
        :param remaining: The remaining of this Rate.
        :param reset: The reset of this Rate.
        :param time_window: The time_window of this Rate.
        """
        self.openapi_types = {
            'limit': int,
            'remaining': int,
            'reset': str,
            'time_window': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'remaining': 'remaining',
            'reset': 'reset',
            'time_window': 'timeWindow'
        }

        self._limit = limit
        self._remaining = remaining
        self._reset = reset
        self._time_window = time_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rate of this Rate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this Rate.

        The maximum number of requests that can be made to this resource during a set time period. The length of time to which the limit is applied is defined by the associated <b>timeWindow</b> value.  <br><br>This value is often referred to as the \"call quota\" for the resource.

        :return: The limit of this Rate.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Rate.

        The maximum number of requests that can be made to this resource during a set time period. The length of time to which the limit is applied is defined by the associated <b>timeWindow</b> value.  <br><br>This value is often referred to as the \"call quota\" for the resource.

        :param limit: The limit of this Rate.
        :type limit: int
        """

        self._limit = limit

    @property
    def remaining(self):
        """Gets the remaining of this Rate.

        The remaining number of requests that can be made to this resource before the associated time window resets.

        :return: The remaining of this Rate.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this Rate.

        The remaining number of requests that can be made to this resource before the associated time window resets.

        :param remaining: The remaining of this Rate.
        :type remaining: int
        """

        self._remaining = remaining

    @property
    def reset(self):
        """Gets the reset of this Rate.

        The data and time the time window and accumulated calls for this resource reset.  <br><br>When the <b>reset</b> time is reached, the <b>remaining</b> value is reset to the value of <b>limit</b>, and this <b>reset</b> value is reset to the current time plus the number of seconds defined by the <b>timeWindow</b> value. <br><br>The time stamp is formatted as an <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm \" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2018-08-04T07:09:00.000Z</code>

        :return: The reset of this Rate.
        :rtype: str
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this Rate.

        The data and time the time window and accumulated calls for this resource reset.  <br><br>When the <b>reset</b> time is reached, the <b>remaining</b> value is reset to the value of <b>limit</b>, and this <b>reset</b> value is reset to the current time plus the number of seconds defined by the <b>timeWindow</b> value. <br><br>The time stamp is formatted as an <a href=\"http://www.iso.org/iso/home/standards/iso8601.htm \" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2018-08-04T07:09:00.000Z</code>

        :param reset: The reset of this Rate.
        :type reset: str
        """

        self._reset = reset

    @property
    def time_window(self):
        """Gets the time_window of this Rate.

        A period of time, expressed in seconds. The call quota for a resource is applied to the period of time defined by the value of this field.

        :return: The time_window of this Rate.
        :rtype: int
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this Rate.

        A period of time, expressed in seconds. The call quota for a resource is applied to the period of time defined by the value of this field.

        :param time_window: The time_window of this Rate.
        :type time_window: int
        """

        self._time_window = time_window
