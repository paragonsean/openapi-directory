/**
 * Analytics API
 * The <b>Analytics API</b> retrieves call-limit data and the quotas that are set for the RESTful APIs and the legacy Trading API.  <br><br>Responses from calls made to <b>getRateLimits</b> and <b>getUerRateLimits</b> include a list of the applicable resources and the \"call limit\", or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the \"time window\" to which the quota applies.  <br><br>The <b>getRateLimits</b> and <b>getUserRateLimits</b> methods retrieve call-limit information for either an application or user, respectively, and each method must be called with an appropriate OAuth token. That is, <b>getRateLimites</b> requires an access token generated with a client credentials grant and <b>getUserRateLimites</b> requires an access token generated with an authorization code grant. For more information, see <a href=\"/api-docs/static/oauth-tokens.html\">OAuth tokens</a>.  <br><br>Users can analyze the response data to see whether or not a limit might be reached, and from that determine if any action needs to be taken (such as programmatically throttling their request rate). For more on call limits, see <a href=\"https://developer.ebay.com/support/app-check \" target=\"_blank\">Compatible Application Check</a>.
 *
 * The version of the OpenAPI document: v1_beta.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIError.h
 *
 * This type defines the fields that can be returned in an error.
 */

#ifndef OAIError_H
#define OAIError_H

#include <QJsonObject>

#include "OAIErrorParameter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIErrorParameter;

class OAIError : public OAIObject {
public:
    OAIError();
    OAIError(QString json);
    ~OAIError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    qint32 getErrorId() const;
    void setErrorId(const qint32 &error_id);
    bool is_error_id_Set() const;
    bool is_error_id_Valid() const;

    QList<QString> getInputRefIds() const;
    void setInputRefIds(const QList<QString> &input_ref_ids);
    bool is_input_ref_ids_Set() const;
    bool is_input_ref_ids_Valid() const;

    QString getLongMessage() const;
    void setLongMessage(const QString &long_message);
    bool is_long_message_Set() const;
    bool is_long_message_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QList<QString> getOutputRefIds() const;
    void setOutputRefIds(const QList<QString> &output_ref_ids);
    bool is_output_ref_ids_Set() const;
    bool is_output_ref_ids_Valid() const;

    QList<OAIErrorParameter> getParameters() const;
    void setParameters(const QList<OAIErrorParameter> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getSubdomain() const;
    void setSubdomain(const QString &subdomain);
    bool is_subdomain_Set() const;
    bool is_subdomain_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    qint32 m_error_id;
    bool m_error_id_isSet;
    bool m_error_id_isValid;

    QList<QString> m_input_ref_ids;
    bool m_input_ref_ids_isSet;
    bool m_input_ref_ids_isValid;

    QString m_long_message;
    bool m_long_message_isSet;
    bool m_long_message_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QList<QString> m_output_ref_ids;
    bool m_output_ref_ids_isSet;
    bool m_output_ref_ids_isValid;

    QList<OAIErrorParameter> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_subdomain;
    bool m_subdomain_isSet;
    bool m_subdomain_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIError)

#endif // OAIError_H
