/*
 * Analytics API
 * The <b>Analytics API</b> retrieves call-limit data and the quotas that are set for the RESTful APIs and the legacy Trading API.  <br><br>Responses from calls made to <b>getRateLimits</b> and <b>getUerRateLimits</b> include a list of the applicable resources and the \"call limit\", or quota, that is set for each resource. In addition to quota information, the response also includes the number of remaining calls available before the limit is reached, the time remaining before the quota resets, and the length of the \"time window\" to which the quota applies.  <br><br>The <b>getRateLimits</b> and <b>getUserRateLimits</b> methods retrieve call-limit information for either an application or user, respectively, and each method must be called with an appropriate OAuth token. That is, <b>getRateLimites</b> requires an access token generated with a client credentials grant and <b>getUserRateLimites</b> requires an access token generated with an authorization code grant. For more information, see <a href=\"/api-docs/static/oauth-tokens.html\">OAuth tokens</a>.  <br><br>Users can analyze the response data to see whether or not a limit might be reached, and from that determine if any action needs to be taken (such as programmatically throttling their request rate). For more on call limits, see <a href=\"https://developer.ebay.com/support/app-check \" target=\"_blank\">Compatible Application Check</a>.
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RateLimit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type defines a list of rate-limit data as it pertains to a method within the specified version of an API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:35.701874-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RateLimitsResponse {
  public static final String SERIALIZED_NAME_RATE_LIMITS = "rateLimits";
  @SerializedName(SERIALIZED_NAME_RATE_LIMITS)
  private List<RateLimit> rateLimits = new ArrayList<>();

  public RateLimitsResponse() {
  }

  public RateLimitsResponse rateLimits(List<RateLimit> rateLimits) {
    this.rateLimits = rateLimits;
    return this;
  }

  public RateLimitsResponse addRateLimitsItem(RateLimit rateLimitsItem) {
    if (this.rateLimits == null) {
      this.rateLimits = new ArrayList<>();
    }
    this.rateLimits.add(rateLimitsItem);
    return this;
  }

  /**
   * The rate-limit data for the specified APIs. The rate-limit data is returned for all the methods in the specified APIs and data pertains to the current time window.
   * @return rateLimits
   */
  @javax.annotation.Nullable
  public List<RateLimit> getRateLimits() {
    return rateLimits;
  }

  public void setRateLimits(List<RateLimit> rateLimits) {
    this.rateLimits = rateLimits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateLimitsResponse rateLimitsResponse = (RateLimitsResponse) o;
    return Objects.equals(this.rateLimits, rateLimitsResponse.rateLimits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rateLimits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateLimitsResponse {\n");
    sb.append("    rateLimits: ").append(toIndentedString(rateLimits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rateLimits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateLimitsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateLimitsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateLimitsResponse is not found in the empty JSON string", RateLimitsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateLimitsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateLimitsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rateLimits") != null && !jsonObj.get("rateLimits").isJsonNull()) {
        JsonArray jsonArrayrateLimits = jsonObj.getAsJsonArray("rateLimits");
        if (jsonArrayrateLimits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rateLimits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rateLimits` to be an array in the JSON string but got `%s`", jsonObj.get("rateLimits").toString()));
          }

          // validate the optional field `rateLimits` (array)
          for (int i = 0; i < jsonArrayrateLimits.size(); i++) {
            RateLimit.validateJsonElement(jsonArrayrateLimits.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateLimitsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateLimitsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateLimitsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateLimitsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RateLimitsResponse>() {
           @Override
           public void write(JsonWriter out, RateLimitsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateLimitsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateLimitsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateLimitsResponse
   * @throws IOException if the JSON string is invalid with respect to RateLimitsResponse
   */
  public static RateLimitsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateLimitsResponse.class);
  }

  /**
   * Convert an instance of RateLimitsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

