/**
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DealApi);
  }
}(this, function(expect, DealApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DealApi.MarketingPrice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MarketingPrice', function() {
    it('should create an instance of MarketingPrice', function() {
      // uncomment below and update the code to test MarketingPrice
      //var instance = new DealApi.MarketingPrice();
      //expect(instance).to.be.a(DealApi.MarketingPrice);
    });

    it('should have the property discountAmount (base name: "discountAmount")', function() {
      // uncomment below and update the code to test the property discountAmount
      //var instance = new DealApi.MarketingPrice();
      //expect(instance).to.be();
    });

    it('should have the property discountPercentage (base name: "discountPercentage")', function() {
      // uncomment below and update the code to test the property discountPercentage
      //var instance = new DealApi.MarketingPrice();
      //expect(instance).to.be();
    });

    it('should have the property originalPrice (base name: "originalPrice")', function() {
      // uncomment below and update the code to test the property originalPrice
      //var instance = new DealApi.MarketingPrice();
      //expect(instance).to.be();
    });

    it('should have the property priceTreatment (base name: "priceTreatment")', function() {
      // uncomment below and update the code to test the property priceTreatment
      //var instance = new DealApi.MarketingPrice();
      //expect(instance).to.be();
    });

  });

}));
