/**
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coupon from './Coupon';
import Image from './Image';
import Terms from './Terms';

/**
 * The Event model module.
 * @module model/Event
 * @version v1.3.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * The result set for the event search.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('applicableCoupons')) {
                obj['applicableCoupons'] = ApiClient.convertToType(data['applicableCoupons'], [Coupon]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('eventAffiliateWebUrl')) {
                obj['eventAffiliateWebUrl'] = ApiClient.convertToType(data['eventAffiliateWebUrl'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('eventWebUrl')) {
                obj['eventWebUrl'] = ApiClient.convertToType(data['eventWebUrl'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = Terms.constructFromObject(data['terms']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        if (data['applicableCoupons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicableCoupons'])) {
                throw new Error("Expected the field `applicableCoupons` to be an array in the JSON data but got " + data['applicableCoupons']);
            }
            // validate the optional field `applicableCoupons` (array)
            for (const item of data['applicableCoupons']) {
                Coupon.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['eventAffiliateWebUrl'] && !(typeof data['eventAffiliateWebUrl'] === 'string' || data['eventAffiliateWebUrl'] instanceof String)) {
            throw new Error("Expected the field `eventAffiliateWebUrl` to be a primitive type in the JSON string but got " + data['eventAffiliateWebUrl']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['eventWebUrl'] && !(typeof data['eventWebUrl'] === 'string' || data['eventWebUrl'] instanceof String)) {
            throw new Error("Expected the field `eventWebUrl` to be a primitive type in the JSON string but got " + data['eventWebUrl']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // validate the optional field `terms`
        if (data['terms']) { // data not null
          Terms.validateJSON(data['terms']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * A list of coupons associated with the event.
 * @member {Array.<module:model/Coupon>} applicableCoupons
 */
Event.prototype['applicableCoupons'] = undefined;

/**
 * The event description.
 * @member {String} description
 */
Event.prototype['description'] = undefined;

/**
 * The end date for the event.
 * @member {String} endDate
 */
Event.prototype['endDate'] = undefined;

/**
 * The URL of the View Event page for the event, which includes the affiliate tracking ID.
 * @member {String} eventAffiliateWebUrl
 */
Event.prototype['eventAffiliateWebUrl'] = undefined;

/**
 * The unique identifier for the event.
 * @member {String} eventId
 */
Event.prototype['eventId'] = undefined;

/**
 * The web URL for the event.
 * @member {String} eventWebUrl
 */
Event.prototype['eventWebUrl'] = undefined;

/**
 * The images for the event.
 * @member {Array.<module:model/Image>} images
 */
Event.prototype['images'] = undefined;

/**
 * The start date for the event.
 * @member {String} startDate
 */
Event.prototype['startDate'] = undefined;

/**
 * @member {module:model/Terms} terms
 */
Event.prototype['terms'] = undefined;

/**
 * The title of the event.
 * @member {String} title
 */
Event.prototype['title'] = undefined;






export default Event;

