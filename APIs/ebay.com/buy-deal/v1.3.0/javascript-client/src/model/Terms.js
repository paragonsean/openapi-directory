/**
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Terms model module.
 * @module model/Terms
 * @version v1.3.0
 */
class Terms {
    /**
     * Constructs a new <code>Terms</code>.
     * The terms for the event, provided in a full-text description and summary.
     * @alias module:model/Terms
     */
    constructor() { 
        
        Terms.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Terms</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Terms} obj Optional instance to populate.
     * @return {module:model/Terms} The populated <code>Terms</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Terms();

            if (data.hasOwnProperty('fullText')) {
                obj['fullText'] = ApiClient.convertToType(data['fullText'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Terms</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Terms</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fullText'] && !(typeof data['fullText'] === 'string' || data['fullText'] instanceof String)) {
            throw new Error("Expected the field `fullText` to be a primitive type in the JSON string but got " + data['fullText']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * A full-text description of the terms.
 * @member {String} fullText
 */
Terms.prototype['fullText'] = undefined;

/**
 * A summarized description of the terms.
 * @member {String} summary
 */
Terms.prototype['summary'] = undefined;






export default Terms;

