/**
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import Image from './Image';
import MarketingPrice from './MarketingPrice';
import ShippingOption from './ShippingOption';

/**
 * The EventItem model module.
 * @module model/EventItem
 * @version v1.3.0
 */
class EventItem {
    /**
     * Constructs a new <code>EventItem</code>.
     * The detailed data returned for the event item.
     * @alias module:model/EventItem
     */
    constructor() { 
        
        EventItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventItem} obj Optional instance to populate.
     * @return {module:model/EventItem} The populated <code>EventItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventItem();

            if (data.hasOwnProperty('additionalImages')) {
                obj['additionalImages'] = ApiClient.convertToType(data['additionalImages'], [Image]);
            }
            if (data.hasOwnProperty('categoryAncestorIds')) {
                obj['categoryAncestorIds'] = ApiClient.convertToType(data['categoryAncestorIds'], ['String']);
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('energyEfficiencyClass')) {
                obj['energyEfficiencyClass'] = ApiClient.convertToType(data['energyEfficiencyClass'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('itemAffiliateWebUrl')) {
                obj['itemAffiliateWebUrl'] = ApiClient.convertToType(data['itemAffiliateWebUrl'], 'String');
            }
            if (data.hasOwnProperty('itemGroupId')) {
                obj['itemGroupId'] = ApiClient.convertToType(data['itemGroupId'], 'String');
            }
            if (data.hasOwnProperty('itemGroupType')) {
                obj['itemGroupType'] = ApiClient.convertToType(data['itemGroupType'], 'String');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('itemWebUrl')) {
                obj['itemWebUrl'] = ApiClient.convertToType(data['itemWebUrl'], 'String');
            }
            if (data.hasOwnProperty('legacyItemId')) {
                obj['legacyItemId'] = ApiClient.convertToType(data['legacyItemId'], 'String');
            }
            if (data.hasOwnProperty('marketingPrice')) {
                obj['marketingPrice'] = MarketingPrice.constructFromObject(data['marketingPrice']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Amount.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('qualifiedPrograms')) {
                obj['qualifiedPrograms'] = ApiClient.convertToType(data['qualifiedPrograms'], ['String']);
            }
            if (data.hasOwnProperty('shippingOptions')) {
                obj['shippingOptions'] = ApiClient.convertToType(data['shippingOptions'], [ShippingOption]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = Amount.constructFromObject(data['unitPrice']);
            }
            if (data.hasOwnProperty('unitPricingMeasure')) {
                obj['unitPricingMeasure'] = ApiClient.convertToType(data['unitPricingMeasure'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventItem</code>.
     */
    static validateJSON(data) {
        if (data['additionalImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalImages'])) {
                throw new Error("Expected the field `additionalImages` to be an array in the JSON data but got " + data['additionalImages']);
            }
            // validate the optional field `additionalImages` (array)
            for (const item of data['additionalImages']) {
                Image.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categoryAncestorIds'])) {
            throw new Error("Expected the field `categoryAncestorIds` to be an array in the JSON data but got " + data['categoryAncestorIds']);
        }
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['energyEfficiencyClass'] && !(typeof data['energyEfficiencyClass'] === 'string' || data['energyEfficiencyClass'] instanceof String)) {
            throw new Error("Expected the field `energyEfficiencyClass` to be a primitive type in the JSON string but got " + data['energyEfficiencyClass']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['itemAffiliateWebUrl'] && !(typeof data['itemAffiliateWebUrl'] === 'string' || data['itemAffiliateWebUrl'] instanceof String)) {
            throw new Error("Expected the field `itemAffiliateWebUrl` to be a primitive type in the JSON string but got " + data['itemAffiliateWebUrl']);
        }
        // ensure the json data is a string
        if (data['itemGroupId'] && !(typeof data['itemGroupId'] === 'string' || data['itemGroupId'] instanceof String)) {
            throw new Error("Expected the field `itemGroupId` to be a primitive type in the JSON string but got " + data['itemGroupId']);
        }
        // ensure the json data is a string
        if (data['itemGroupType'] && !(typeof data['itemGroupType'] === 'string' || data['itemGroupType'] instanceof String)) {
            throw new Error("Expected the field `itemGroupType` to be a primitive type in the JSON string but got " + data['itemGroupType']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // ensure the json data is a string
        if (data['itemWebUrl'] && !(typeof data['itemWebUrl'] === 'string' || data['itemWebUrl'] instanceof String)) {
            throw new Error("Expected the field `itemWebUrl` to be a primitive type in the JSON string but got " + data['itemWebUrl']);
        }
        // ensure the json data is a string
        if (data['legacyItemId'] && !(typeof data['legacyItemId'] === 'string' || data['legacyItemId'] instanceof String)) {
            throw new Error("Expected the field `legacyItemId` to be a primitive type in the JSON string but got " + data['legacyItemId']);
        }
        // validate the optional field `marketingPrice`
        if (data['marketingPrice']) { // data not null
          MarketingPrice.validateJSON(data['marketingPrice']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Amount.validateJSON(data['price']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['qualifiedPrograms'])) {
            throw new Error("Expected the field `qualifiedPrograms` to be an array in the JSON data but got " + data['qualifiedPrograms']);
        }
        if (data['shippingOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shippingOptions'])) {
                throw new Error("Expected the field `shippingOptions` to be an array in the JSON data but got " + data['shippingOptions']);
            }
            // validate the optional field `shippingOptions` (array)
            for (const item of data['shippingOptions']) {
                ShippingOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `unitPrice`
        if (data['unitPrice']) { // data not null
          Amount.validateJSON(data['unitPrice']);
        }
        // ensure the json data is a string
        if (data['unitPricingMeasure'] && !(typeof data['unitPricingMeasure'] === 'string' || data['unitPricingMeasure'] instanceof String)) {
            throw new Error("Expected the field `unitPricingMeasure` to be a primitive type in the JSON string but got " + data['unitPricingMeasure']);
        }

        return true;
    }


}



/**
 * The additional images for the event item.
 * @member {Array.<module:model/Image>} additionalImages
 */
EventItem.prototype['additionalImages'] = undefined;

/**
 * The IDs of the ancestors for the primary category.
 * @member {Array.<String>} categoryAncestorIds
 */
EventItem.prototype['categoryAncestorIds'] = undefined;

/**
 * The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.
 * @member {String} categoryId
 */
EventItem.prototype['categoryId'] = undefined;

/**
 * A string value specifying the Energy Efficiency class.
 * @member {String} energyEfficiencyClass
 */
EventItem.prototype['energyEfficiencyClass'] = undefined;

/**
 * The unique event identifier associated with the item.
 * @member {String} eventId
 */
EventItem.prototype['eventId'] = undefined;

/**
 * @member {module:model/Image} image
 */
EventItem.prototype['image'] = undefined;

/**
 * The item web URL with affiliate attribution.
 * @member {String} itemAffiliateWebUrl
 */
EventItem.prototype['itemAffiliateWebUrl'] = undefined;

/**
 * The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.
 * @member {String} itemGroupId
 */
EventItem.prototype['itemGroupId'] = undefined;

/**
 * An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>
 * @member {String} itemGroupType
 */
EventItem.prototype['itemGroupType'] = undefined;

/**
 * The unique identifier for the event item. Note: This field is only returned for single-SKU items.
 * @member {String} itemId
 */
EventItem.prototype['itemId'] = undefined;

/**
 * The web URL for the event item.
 * @member {String} itemWebUrl
 */
EventItem.prototype['itemWebUrl'] = undefined;

/**
 * The legacy item ID associated with the event item.
 * @member {String} legacyItemId
 */
EventItem.prototype['legacyItemId'] = undefined;

/**
 * @member {module:model/MarketingPrice} marketingPrice
 */
EventItem.prototype['marketingPrice'] = undefined;

/**
 * @member {module:model/Amount} price
 */
EventItem.prototype['price'] = undefined;

/**
 * A list of programs applicable to the event item.
 * @member {Array.<String>} qualifiedPrograms
 */
EventItem.prototype['qualifiedPrograms'] = undefined;

/**
 * The cost required to ship the event item.
 * @member {Array.<module:model/ShippingOption>} shippingOptions
 */
EventItem.prototype['shippingOptions'] = undefined;

/**
 * The title of the event item.
 * @member {String} title
 */
EventItem.prototype['title'] = undefined;

/**
 * @member {module:model/Amount} unitPrice
 */
EventItem.prototype['unitPrice'] = undefined;

/**
 * The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
 * @member {String} unitPricingMeasure
 */
EventItem.prototype['unitPricingMeasure'] = undefined;






export default EventItem;

