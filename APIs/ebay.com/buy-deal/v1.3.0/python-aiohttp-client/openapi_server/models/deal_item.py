# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.image import Image
from openapi_server.models.marketing_price import MarketingPrice
from openapi_server.models.shipping_option import ShippingOption
from openapi_server import util


class DealItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_images: List[Image]=None, category_ancestor_ids: List[str]=None, category_id: str=None, commissionable: bool=None, deal_affiliate_web_url: str=None, deal_end_date: str=None, deal_start_date: str=None, deal_web_url: str=None, energy_efficiency_class: str=None, image: Image=None, item_affiliate_web_url: str=None, item_group_id: str=None, item_group_type: str=None, item_id: str=None, item_web_url: str=None, legacy_item_id: str=None, marketing_price: MarketingPrice=None, price: Amount=None, qualified_programs: List[str]=None, shipping_options: List[ShippingOption]=None, title: str=None, unit_price: Amount=None, unit_pricing_measure: str=None):
        """DealItem - a model defined in OpenAPI

        :param additional_images: The additional_images of this DealItem.
        :param category_ancestor_ids: The category_ancestor_ids of this DealItem.
        :param category_id: The category_id of this DealItem.
        :param commissionable: The commissionable of this DealItem.
        :param deal_affiliate_web_url: The deal_affiliate_web_url of this DealItem.
        :param deal_end_date: The deal_end_date of this DealItem.
        :param deal_start_date: The deal_start_date of this DealItem.
        :param deal_web_url: The deal_web_url of this DealItem.
        :param energy_efficiency_class: The energy_efficiency_class of this DealItem.
        :param image: The image of this DealItem.
        :param item_affiliate_web_url: The item_affiliate_web_url of this DealItem.
        :param item_group_id: The item_group_id of this DealItem.
        :param item_group_type: The item_group_type of this DealItem.
        :param item_id: The item_id of this DealItem.
        :param item_web_url: The item_web_url of this DealItem.
        :param legacy_item_id: The legacy_item_id of this DealItem.
        :param marketing_price: The marketing_price of this DealItem.
        :param price: The price of this DealItem.
        :param qualified_programs: The qualified_programs of this DealItem.
        :param shipping_options: The shipping_options of this DealItem.
        :param title: The title of this DealItem.
        :param unit_price: The unit_price of this DealItem.
        :param unit_pricing_measure: The unit_pricing_measure of this DealItem.
        """
        self.openapi_types = {
            'additional_images': List[Image],
            'category_ancestor_ids': List[str],
            'category_id': str,
            'commissionable': bool,
            'deal_affiliate_web_url': str,
            'deal_end_date': str,
            'deal_start_date': str,
            'deal_web_url': str,
            'energy_efficiency_class': str,
            'image': Image,
            'item_affiliate_web_url': str,
            'item_group_id': str,
            'item_group_type': str,
            'item_id': str,
            'item_web_url': str,
            'legacy_item_id': str,
            'marketing_price': MarketingPrice,
            'price': Amount,
            'qualified_programs': List[str],
            'shipping_options': List[ShippingOption],
            'title': str,
            'unit_price': Amount,
            'unit_pricing_measure': str
        }

        self.attribute_map = {
            'additional_images': 'additionalImages',
            'category_ancestor_ids': 'categoryAncestorIds',
            'category_id': 'categoryId',
            'commissionable': 'commissionable',
            'deal_affiliate_web_url': 'dealAffiliateWebUrl',
            'deal_end_date': 'dealEndDate',
            'deal_start_date': 'dealStartDate',
            'deal_web_url': 'dealWebUrl',
            'energy_efficiency_class': 'energyEfficiencyClass',
            'image': 'image',
            'item_affiliate_web_url': 'itemAffiliateWebUrl',
            'item_group_id': 'itemGroupId',
            'item_group_type': 'itemGroupType',
            'item_id': 'itemId',
            'item_web_url': 'itemWebUrl',
            'legacy_item_id': 'legacyItemId',
            'marketing_price': 'marketingPrice',
            'price': 'price',
            'qualified_programs': 'qualifiedPrograms',
            'shipping_options': 'shippingOptions',
            'title': 'title',
            'unit_price': 'unitPrice',
            'unit_pricing_measure': 'unitPricingMeasure'
        }

        self._additional_images = additional_images
        self._category_ancestor_ids = category_ancestor_ids
        self._category_id = category_id
        self._commissionable = commissionable
        self._deal_affiliate_web_url = deal_affiliate_web_url
        self._deal_end_date = deal_end_date
        self._deal_start_date = deal_start_date
        self._deal_web_url = deal_web_url
        self._energy_efficiency_class = energy_efficiency_class
        self._image = image
        self._item_affiliate_web_url = item_affiliate_web_url
        self._item_group_id = item_group_id
        self._item_group_type = item_group_type
        self._item_id = item_id
        self._item_web_url = item_web_url
        self._legacy_item_id = legacy_item_id
        self._marketing_price = marketing_price
        self._price = price
        self._qualified_programs = qualified_programs
        self._shipping_options = shipping_options
        self._title = title
        self._unit_price = unit_price
        self._unit_pricing_measure = unit_pricing_measure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DealItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DealItem of this DealItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_images(self):
        """Gets the additional_images of this DealItem.

        The additional images for the deal item.

        :return: The additional_images of this DealItem.
        :rtype: List[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this DealItem.

        The additional images for the deal item.

        :param additional_images: The additional_images of this DealItem.
        :type additional_images: List[Image]
        """

        self._additional_images = additional_images

    @property
    def category_ancestor_ids(self):
        """Gets the category_ancestor_ids of this DealItem.

        The IDs of the ancestors for the primary category.

        :return: The category_ancestor_ids of this DealItem.
        :rtype: List[str]
        """
        return self._category_ancestor_ids

    @category_ancestor_ids.setter
    def category_ancestor_ids(self, category_ancestor_ids):
        """Sets the category_ancestor_ids of this DealItem.

        The IDs of the ancestors for the primary category.

        :param category_ancestor_ids: The category_ancestor_ids of this DealItem.
        :type category_ancestor_ids: List[str]
        """

        self._category_ancestor_ids = category_ancestor_ids

    @property
    def category_id(self):
        """Gets the category_id of this DealItem.

        The ID of the leaf category for the deal item. A leaf category is the lowest level in a category and has no children.

        :return: The category_id of this DealItem.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this DealItem.

        The ID of the leaf category for the deal item. A leaf category is the lowest level in a category and has no children.

        :param category_id: The category_id of this DealItem.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def commissionable(self):
        """Gets the commissionable of this DealItem.

        A boolean value specifying whether the listing has commission.

        :return: The commissionable of this DealItem.
        :rtype: bool
        """
        return self._commissionable

    @commissionable.setter
    def commissionable(self, commissionable):
        """Sets the commissionable of this DealItem.

        A boolean value specifying whether the listing has commission.

        :param commissionable: The commissionable of this DealItem.
        :type commissionable: bool
        """

        self._commissionable = commissionable

    @property
    def deal_affiliate_web_url(self):
        """Gets the deal_affiliate_web_url of this DealItem.

        The deal associated with the item with affiliate attribution.

        :return: The deal_affiliate_web_url of this DealItem.
        :rtype: str
        """
        return self._deal_affiliate_web_url

    @deal_affiliate_web_url.setter
    def deal_affiliate_web_url(self, deal_affiliate_web_url):
        """Sets the deal_affiliate_web_url of this DealItem.

        The deal associated with the item with affiliate attribution.

        :param deal_affiliate_web_url: The deal_affiliate_web_url of this DealItem.
        :type deal_affiliate_web_url: str
        """

        self._deal_affiliate_web_url = deal_affiliate_web_url

    @property
    def deal_end_date(self):
        """Gets the deal_end_date of this DealItem.

        The date after which the deal ends.

        :return: The deal_end_date of this DealItem.
        :rtype: str
        """
        return self._deal_end_date

    @deal_end_date.setter
    def deal_end_date(self, deal_end_date):
        """Sets the deal_end_date of this DealItem.

        The date after which the deal ends.

        :param deal_end_date: The deal_end_date of this DealItem.
        :type deal_end_date: str
        """

        self._deal_end_date = deal_end_date

    @property
    def deal_start_date(self):
        """Gets the deal_start_date of this DealItem.

        The date on which the deal starts.

        :return: The deal_start_date of this DealItem.
        :rtype: str
        """
        return self._deal_start_date

    @deal_start_date.setter
    def deal_start_date(self, deal_start_date):
        """Sets the deal_start_date of this DealItem.

        The date on which the deal starts.

        :param deal_start_date: The deal_start_date of this DealItem.
        :type deal_start_date: str
        """

        self._deal_start_date = deal_start_date

    @property
    def deal_web_url(self):
        """Gets the deal_web_url of this DealItem.

        The web URL for the deal associated with the item.

        :return: The deal_web_url of this DealItem.
        :rtype: str
        """
        return self._deal_web_url

    @deal_web_url.setter
    def deal_web_url(self, deal_web_url):
        """Sets the deal_web_url of this DealItem.

        The web URL for the deal associated with the item.

        :param deal_web_url: The deal_web_url of this DealItem.
        :type deal_web_url: str
        """

        self._deal_web_url = deal_web_url

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this DealItem.

        A string value specifying the Energy Efficiency class.

        :return: The energy_efficiency_class of this DealItem.
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this DealItem.

        A string value specifying the Energy Efficiency class.

        :param energy_efficiency_class: The energy_efficiency_class of this DealItem.
        :type energy_efficiency_class: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def image(self):
        """Gets the image of this DealItem.


        :return: The image of this DealItem.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DealItem.


        :param image: The image of this DealItem.
        :type image: Image
        """

        self._image = image

    @property
    def item_affiliate_web_url(self):
        """Gets the item_affiliate_web_url of this DealItem.

        The item web URL with affiliate attribution.

        :return: The item_affiliate_web_url of this DealItem.
        :rtype: str
        """
        return self._item_affiliate_web_url

    @item_affiliate_web_url.setter
    def item_affiliate_web_url(self, item_affiliate_web_url):
        """Sets the item_affiliate_web_url of this DealItem.

        The item web URL with affiliate attribution.

        :param item_affiliate_web_url: The item_affiliate_web_url of this DealItem.
        :type item_affiliate_web_url: str
        """

        self._item_affiliate_web_url = item_affiliate_web_url

    @property
    def item_group_id(self):
        """Gets the item_group_id of this DealItem.

        The unique identifier for the deal item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.

        :return: The item_group_id of this DealItem.
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this DealItem.

        The unique identifier for the deal item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.

        :param item_group_id: The item_group_id of this DealItem.
        :type item_group_id: str
        """

        self._item_group_id = item_group_id

    @property
    def item_group_type(self):
        """Gets the item_group_type of this DealItem.

        An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>

        :return: The item_group_type of this DealItem.
        :rtype: str
        """
        return self._item_group_type

    @item_group_type.setter
    def item_group_type(self, item_group_type):
        """Sets the item_group_type of this DealItem.

        An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>

        :param item_group_type: The item_group_type of this DealItem.
        :type item_group_type: str
        """

        self._item_group_type = item_group_type

    @property
    def item_id(self):
        """Gets the item_id of this DealItem.

        The unique identifier for the deal item. Note: This field is only returned for single-SKU items.

        :return: The item_id of this DealItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this DealItem.

        The unique identifier for the deal item. Note: This field is only returned for single-SKU items.

        :param item_id: The item_id of this DealItem.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_web_url(self):
        """Gets the item_web_url of this DealItem.

        The web URL for the deal item.

        :return: The item_web_url of this DealItem.
        :rtype: str
        """
        return self._item_web_url

    @item_web_url.setter
    def item_web_url(self, item_web_url):
        """Sets the item_web_url of this DealItem.

        The web URL for the deal item.

        :param item_web_url: The item_web_url of this DealItem.
        :type item_web_url: str
        """

        self._item_web_url = item_web_url

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this DealItem.

        The legacy item ID associated with the deal item.

        :return: The legacy_item_id of this DealItem.
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this DealItem.

        The legacy item ID associated with the deal item.

        :param legacy_item_id: The legacy_item_id of this DealItem.
        :type legacy_item_id: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def marketing_price(self):
        """Gets the marketing_price of this DealItem.


        :return: The marketing_price of this DealItem.
        :rtype: MarketingPrice
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this DealItem.


        :param marketing_price: The marketing_price of this DealItem.
        :type marketing_price: MarketingPrice
        """

        self._marketing_price = marketing_price

    @property
    def price(self):
        """Gets the price of this DealItem.


        :return: The price of this DealItem.
        :rtype: Amount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DealItem.


        :param price: The price of this DealItem.
        :type price: Amount
        """

        self._price = price

    @property
    def qualified_programs(self):
        """Gets the qualified_programs of this DealItem.

        A list of programs applicable to the item.

        :return: The qualified_programs of this DealItem.
        :rtype: List[str]
        """
        return self._qualified_programs

    @qualified_programs.setter
    def qualified_programs(self, qualified_programs):
        """Sets the qualified_programs of this DealItem.

        A list of programs applicable to the item.

        :param qualified_programs: The qualified_programs of this DealItem.
        :type qualified_programs: List[str]
        """

        self._qualified_programs = qualified_programs

    @property
    def shipping_options(self):
        """Gets the shipping_options of this DealItem.

        The cost required to ship the deal item.

        :return: The shipping_options of this DealItem.
        :rtype: List[ShippingOption]
        """
        return self._shipping_options

    @shipping_options.setter
    def shipping_options(self, shipping_options):
        """Sets the shipping_options of this DealItem.

        The cost required to ship the deal item.

        :param shipping_options: The shipping_options of this DealItem.
        :type shipping_options: List[ShippingOption]
        """

        self._shipping_options = shipping_options

    @property
    def title(self):
        """Gets the title of this DealItem.

        The title of the deal item.

        :return: The title of this DealItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DealItem.

        The title of the deal item.

        :param title: The title of this DealItem.
        :type title: str
        """

        self._title = title

    @property
    def unit_price(self):
        """Gets the unit_price of this DealItem.


        :return: The unit_price of this DealItem.
        :rtype: Amount
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this DealItem.


        :param unit_price: The unit_price of this DealItem.
        :type unit_price: Amount
        """

        self._unit_price = unit_price

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this DealItem.

        The designation used to specify the quantity of the deal item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :return: The unit_pricing_measure of this DealItem.
        :rtype: str
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this DealItem.

        The designation used to specify the quantity of the deal item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :param unit_pricing_measure: The unit_pricing_measure of this DealItem.
        :type unit_pricing_measure: str
        """

        self._unit_pricing_measure = unit_pricing_measure
