# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_item import EventItem
from openapi_server import util


class EventItemSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_items: List[EventItem]=None, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """EventItemSearchResponse - a model defined in OpenAPI

        :param event_items: The event_items of this EventItemSearchResponse.
        :param href: The href of this EventItemSearchResponse.
        :param limit: The limit of this EventItemSearchResponse.
        :param next: The next of this EventItemSearchResponse.
        :param offset: The offset of this EventItemSearchResponse.
        :param prev: The prev of this EventItemSearchResponse.
        :param total: The total of this EventItemSearchResponse.
        """
        self.openapi_types = {
            'event_items': List[EventItem],
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'event_items': 'eventItems',
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._event_items = event_items
        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventItemSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventItemSearchResponse of this EventItemSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_items(self):
        """Gets the event_items of this EventItemSearchResponse.

        A list of event items that match the search criteria.

        :return: The event_items of this EventItemSearchResponse.
        :rtype: List[EventItem]
        """
        return self._event_items

    @event_items.setter
    def event_items(self, event_items):
        """Sets the event_items of this EventItemSearchResponse.

        A list of event items that match the search criteria.

        :param event_items: The event_items of this EventItemSearchResponse.
        :type event_items: List[EventItem]
        """

        self._event_items = event_items

    @property
    def href(self):
        """Gets the href of this EventItemSearchResponse.

        The relative path to the current set of results.

        :return: The href of this EventItemSearchResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this EventItemSearchResponse.

        The relative path to the current set of results.

        :param href: The href of this EventItemSearchResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this EventItemSearchResponse.

        The maximum number of items, from the current result set, returned on a single page. Default: 20

        :return: The limit of this EventItemSearchResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this EventItemSearchResponse.

        The maximum number of items, from the current result set, returned on a single page. Default: 20

        :param limit: The limit of this EventItemSearchResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this EventItemSearchResponse.

        The relative path to the next set of results.

        :return: The next of this EventItemSearchResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this EventItemSearchResponse.

        The relative path to the next set of results.

        :param next: The next of this EventItemSearchResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this EventItemSearchResponse.

        The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0

        :return: The offset of this EventItemSearchResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this EventItemSearchResponse.

        The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0

        :param offset: The offset of this EventItemSearchResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this EventItemSearchResponse.

        The relative path to the previous set of results.

        :return: The prev of this EventItemSearchResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this EventItemSearchResponse.

        The relative path to the previous set of results.

        :param prev: The prev of this EventItemSearchResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this EventItemSearchResponse.

        The total number of matches for the specified search criteria.

        :return: The total of this EventItemSearchResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this EventItemSearchResponse.

        The total number of matches for the specified search criteria.

        :param total: The total of this EventItemSearchResponse.
        :type total: int
        """

        self._total = total
