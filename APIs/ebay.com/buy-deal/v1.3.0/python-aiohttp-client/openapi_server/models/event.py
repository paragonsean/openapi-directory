# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coupon import Coupon
from openapi_server.models.image import Image
from openapi_server.models.terms import Terms
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_coupons: List[Coupon]=None, description: str=None, end_date: str=None, event_affiliate_web_url: str=None, event_id: str=None, event_web_url: str=None, images: List[Image]=None, start_date: str=None, terms: Terms=None, title: str=None):
        """Event - a model defined in OpenAPI

        :param applicable_coupons: The applicable_coupons of this Event.
        :param description: The description of this Event.
        :param end_date: The end_date of this Event.
        :param event_affiliate_web_url: The event_affiliate_web_url of this Event.
        :param event_id: The event_id of this Event.
        :param event_web_url: The event_web_url of this Event.
        :param images: The images of this Event.
        :param start_date: The start_date of this Event.
        :param terms: The terms of this Event.
        :param title: The title of this Event.
        """
        self.openapi_types = {
            'applicable_coupons': List[Coupon],
            'description': str,
            'end_date': str,
            'event_affiliate_web_url': str,
            'event_id': str,
            'event_web_url': str,
            'images': List[Image],
            'start_date': str,
            'terms': Terms,
            'title': str
        }

        self.attribute_map = {
            'applicable_coupons': 'applicableCoupons',
            'description': 'description',
            'end_date': 'endDate',
            'event_affiliate_web_url': 'eventAffiliateWebUrl',
            'event_id': 'eventId',
            'event_web_url': 'eventWebUrl',
            'images': 'images',
            'start_date': 'startDate',
            'terms': 'terms',
            'title': 'title'
        }

        self._applicable_coupons = applicable_coupons
        self._description = description
        self._end_date = end_date
        self._event_affiliate_web_url = event_affiliate_web_url
        self._event_id = event_id
        self._event_web_url = event_web_url
        self._images = images
        self._start_date = start_date
        self._terms = terms
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_coupons(self):
        """Gets the applicable_coupons of this Event.

        A list of coupons associated with the event.

        :return: The applicable_coupons of this Event.
        :rtype: List[Coupon]
        """
        return self._applicable_coupons

    @applicable_coupons.setter
    def applicable_coupons(self, applicable_coupons):
        """Sets the applicable_coupons of this Event.

        A list of coupons associated with the event.

        :param applicable_coupons: The applicable_coupons of this Event.
        :type applicable_coupons: List[Coupon]
        """

        self._applicable_coupons = applicable_coupons

    @property
    def description(self):
        """Gets the description of this Event.

        The event description.

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        The event description.

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this Event.

        The end date for the event.

        :return: The end_date of this Event.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Event.

        The end date for the event.

        :param end_date: The end_date of this Event.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def event_affiliate_web_url(self):
        """Gets the event_affiliate_web_url of this Event.

        The URL of the View Event page for the event, which includes the affiliate tracking ID.

        :return: The event_affiliate_web_url of this Event.
        :rtype: str
        """
        return self._event_affiliate_web_url

    @event_affiliate_web_url.setter
    def event_affiliate_web_url(self, event_affiliate_web_url):
        """Sets the event_affiliate_web_url of this Event.

        The URL of the View Event page for the event, which includes the affiliate tracking ID.

        :param event_affiliate_web_url: The event_affiliate_web_url of this Event.
        :type event_affiliate_web_url: str
        """

        self._event_affiliate_web_url = event_affiliate_web_url

    @property
    def event_id(self):
        """Gets the event_id of this Event.

        The unique identifier for the event.

        :return: The event_id of this Event.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.

        The unique identifier for the event.

        :param event_id: The event_id of this Event.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_web_url(self):
        """Gets the event_web_url of this Event.

        The web URL for the event.

        :return: The event_web_url of this Event.
        :rtype: str
        """
        return self._event_web_url

    @event_web_url.setter
    def event_web_url(self, event_web_url):
        """Sets the event_web_url of this Event.

        The web URL for the event.

        :param event_web_url: The event_web_url of this Event.
        :type event_web_url: str
        """

        self._event_web_url = event_web_url

    @property
    def images(self):
        """Gets the images of this Event.

        The images for the event.

        :return: The images of this Event.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Event.

        The images for the event.

        :param images: The images of this Event.
        :type images: List[Image]
        """

        self._images = images

    @property
    def start_date(self):
        """Gets the start_date of this Event.

        The start date for the event.

        :return: The start_date of this Event.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Event.

        The start date for the event.

        :param start_date: The start_date of this Event.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def terms(self):
        """Gets the terms of this Event.


        :return: The terms of this Event.
        :rtype: Terms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Event.


        :param terms: The terms of this Event.
        :type terms: Terms
        """

        self._terms = terms

    @property
    def title(self):
        """Gets the title of this Event.

        The title of the event.

        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.

        The title of the event.

        :param title: The title of this Event.
        :type title: str
        """

        self._title = title
