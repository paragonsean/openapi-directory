# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.image import Image
from openapi_server.models.marketing_price import MarketingPrice
from openapi_server.models.shipping_option import ShippingOption
from openapi_server import util


class EventItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_images: List[Image]=None, category_ancestor_ids: List[str]=None, category_id: str=None, energy_efficiency_class: str=None, event_id: str=None, image: Image=None, item_affiliate_web_url: str=None, item_group_id: str=None, item_group_type: str=None, item_id: str=None, item_web_url: str=None, legacy_item_id: str=None, marketing_price: MarketingPrice=None, price: Amount=None, qualified_programs: List[str]=None, shipping_options: List[ShippingOption]=None, title: str=None, unit_price: Amount=None, unit_pricing_measure: str=None):
        """EventItem - a model defined in OpenAPI

        :param additional_images: The additional_images of this EventItem.
        :param category_ancestor_ids: The category_ancestor_ids of this EventItem.
        :param category_id: The category_id of this EventItem.
        :param energy_efficiency_class: The energy_efficiency_class of this EventItem.
        :param event_id: The event_id of this EventItem.
        :param image: The image of this EventItem.
        :param item_affiliate_web_url: The item_affiliate_web_url of this EventItem.
        :param item_group_id: The item_group_id of this EventItem.
        :param item_group_type: The item_group_type of this EventItem.
        :param item_id: The item_id of this EventItem.
        :param item_web_url: The item_web_url of this EventItem.
        :param legacy_item_id: The legacy_item_id of this EventItem.
        :param marketing_price: The marketing_price of this EventItem.
        :param price: The price of this EventItem.
        :param qualified_programs: The qualified_programs of this EventItem.
        :param shipping_options: The shipping_options of this EventItem.
        :param title: The title of this EventItem.
        :param unit_price: The unit_price of this EventItem.
        :param unit_pricing_measure: The unit_pricing_measure of this EventItem.
        """
        self.openapi_types = {
            'additional_images': List[Image],
            'category_ancestor_ids': List[str],
            'category_id': str,
            'energy_efficiency_class': str,
            'event_id': str,
            'image': Image,
            'item_affiliate_web_url': str,
            'item_group_id': str,
            'item_group_type': str,
            'item_id': str,
            'item_web_url': str,
            'legacy_item_id': str,
            'marketing_price': MarketingPrice,
            'price': Amount,
            'qualified_programs': List[str],
            'shipping_options': List[ShippingOption],
            'title': str,
            'unit_price': Amount,
            'unit_pricing_measure': str
        }

        self.attribute_map = {
            'additional_images': 'additionalImages',
            'category_ancestor_ids': 'categoryAncestorIds',
            'category_id': 'categoryId',
            'energy_efficiency_class': 'energyEfficiencyClass',
            'event_id': 'eventId',
            'image': 'image',
            'item_affiliate_web_url': 'itemAffiliateWebUrl',
            'item_group_id': 'itemGroupId',
            'item_group_type': 'itemGroupType',
            'item_id': 'itemId',
            'item_web_url': 'itemWebUrl',
            'legacy_item_id': 'legacyItemId',
            'marketing_price': 'marketingPrice',
            'price': 'price',
            'qualified_programs': 'qualifiedPrograms',
            'shipping_options': 'shippingOptions',
            'title': 'title',
            'unit_price': 'unitPrice',
            'unit_pricing_measure': 'unitPricingMeasure'
        }

        self._additional_images = additional_images
        self._category_ancestor_ids = category_ancestor_ids
        self._category_id = category_id
        self._energy_efficiency_class = energy_efficiency_class
        self._event_id = event_id
        self._image = image
        self._item_affiliate_web_url = item_affiliate_web_url
        self._item_group_id = item_group_id
        self._item_group_type = item_group_type
        self._item_id = item_id
        self._item_web_url = item_web_url
        self._legacy_item_id = legacy_item_id
        self._marketing_price = marketing_price
        self._price = price
        self._qualified_programs = qualified_programs
        self._shipping_options = shipping_options
        self._title = title
        self._unit_price = unit_price
        self._unit_pricing_measure = unit_pricing_measure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventItem of this EventItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_images(self):
        """Gets the additional_images of this EventItem.

        The additional images for the event item.

        :return: The additional_images of this EventItem.
        :rtype: List[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this EventItem.

        The additional images for the event item.

        :param additional_images: The additional_images of this EventItem.
        :type additional_images: List[Image]
        """

        self._additional_images = additional_images

    @property
    def category_ancestor_ids(self):
        """Gets the category_ancestor_ids of this EventItem.

        The IDs of the ancestors for the primary category.

        :return: The category_ancestor_ids of this EventItem.
        :rtype: List[str]
        """
        return self._category_ancestor_ids

    @category_ancestor_ids.setter
    def category_ancestor_ids(self, category_ancestor_ids):
        """Sets the category_ancestor_ids of this EventItem.

        The IDs of the ancestors for the primary category.

        :param category_ancestor_ids: The category_ancestor_ids of this EventItem.
        :type category_ancestor_ids: List[str]
        """

        self._category_ancestor_ids = category_ancestor_ids

    @property
    def category_id(self):
        """Gets the category_id of this EventItem.

        The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.

        :return: The category_id of this EventItem.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this EventItem.

        The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.

        :param category_id: The category_id of this EventItem.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this EventItem.

        A string value specifying the Energy Efficiency class.

        :return: The energy_efficiency_class of this EventItem.
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this EventItem.

        A string value specifying the Energy Efficiency class.

        :param energy_efficiency_class: The energy_efficiency_class of this EventItem.
        :type energy_efficiency_class: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def event_id(self):
        """Gets the event_id of this EventItem.

        The unique event identifier associated with the item.

        :return: The event_id of this EventItem.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventItem.

        The unique event identifier associated with the item.

        :param event_id: The event_id of this EventItem.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def image(self):
        """Gets the image of this EventItem.


        :return: The image of this EventItem.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EventItem.


        :param image: The image of this EventItem.
        :type image: Image
        """

        self._image = image

    @property
    def item_affiliate_web_url(self):
        """Gets the item_affiliate_web_url of this EventItem.

        The item web URL with affiliate attribution.

        :return: The item_affiliate_web_url of this EventItem.
        :rtype: str
        """
        return self._item_affiliate_web_url

    @item_affiliate_web_url.setter
    def item_affiliate_web_url(self, item_affiliate_web_url):
        """Sets the item_affiliate_web_url of this EventItem.

        The item web URL with affiliate attribution.

        :param item_affiliate_web_url: The item_affiliate_web_url of this EventItem.
        :type item_affiliate_web_url: str
        """

        self._item_affiliate_web_url = item_affiliate_web_url

    @property
    def item_group_id(self):
        """Gets the item_group_id of this EventItem.

        The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.

        :return: The item_group_id of this EventItem.
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this EventItem.

        The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.

        :param item_group_id: The item_group_id of this EventItem.
        :type item_group_id: str
        """

        self._item_group_id = item_group_id

    @property
    def item_group_type(self):
        """Gets the item_group_type of this EventItem.

        An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>

        :return: The item_group_type of this EventItem.
        :rtype: str
        """
        return self._item_group_type

    @item_group_type.setter
    def item_group_type(self, item_group_type):
        """Sets the item_group_type of this EventItem.

        An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>

        :param item_group_type: The item_group_type of this EventItem.
        :type item_group_type: str
        """

        self._item_group_type = item_group_type

    @property
    def item_id(self):
        """Gets the item_id of this EventItem.

        The unique identifier for the event item. Note: This field is only returned for single-SKU items.

        :return: The item_id of this EventItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this EventItem.

        The unique identifier for the event item. Note: This field is only returned for single-SKU items.

        :param item_id: The item_id of this EventItem.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_web_url(self):
        """Gets the item_web_url of this EventItem.

        The web URL for the event item.

        :return: The item_web_url of this EventItem.
        :rtype: str
        """
        return self._item_web_url

    @item_web_url.setter
    def item_web_url(self, item_web_url):
        """Sets the item_web_url of this EventItem.

        The web URL for the event item.

        :param item_web_url: The item_web_url of this EventItem.
        :type item_web_url: str
        """

        self._item_web_url = item_web_url

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this EventItem.

        The legacy item ID associated with the event item.

        :return: The legacy_item_id of this EventItem.
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this EventItem.

        The legacy item ID associated with the event item.

        :param legacy_item_id: The legacy_item_id of this EventItem.
        :type legacy_item_id: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def marketing_price(self):
        """Gets the marketing_price of this EventItem.


        :return: The marketing_price of this EventItem.
        :rtype: MarketingPrice
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this EventItem.


        :param marketing_price: The marketing_price of this EventItem.
        :type marketing_price: MarketingPrice
        """

        self._marketing_price = marketing_price

    @property
    def price(self):
        """Gets the price of this EventItem.


        :return: The price of this EventItem.
        :rtype: Amount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this EventItem.


        :param price: The price of this EventItem.
        :type price: Amount
        """

        self._price = price

    @property
    def qualified_programs(self):
        """Gets the qualified_programs of this EventItem.

        A list of programs applicable to the event item.

        :return: The qualified_programs of this EventItem.
        :rtype: List[str]
        """
        return self._qualified_programs

    @qualified_programs.setter
    def qualified_programs(self, qualified_programs):
        """Sets the qualified_programs of this EventItem.

        A list of programs applicable to the event item.

        :param qualified_programs: The qualified_programs of this EventItem.
        :type qualified_programs: List[str]
        """

        self._qualified_programs = qualified_programs

    @property
    def shipping_options(self):
        """Gets the shipping_options of this EventItem.

        The cost required to ship the event item.

        :return: The shipping_options of this EventItem.
        :rtype: List[ShippingOption]
        """
        return self._shipping_options

    @shipping_options.setter
    def shipping_options(self, shipping_options):
        """Sets the shipping_options of this EventItem.

        The cost required to ship the event item.

        :param shipping_options: The shipping_options of this EventItem.
        :type shipping_options: List[ShippingOption]
        """

        self._shipping_options = shipping_options

    @property
    def title(self):
        """Gets the title of this EventItem.

        The title of the event item.

        :return: The title of this EventItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventItem.

        The title of the event item.

        :param title: The title of this EventItem.
        :type title: str
        """

        self._title = title

    @property
    def unit_price(self):
        """Gets the unit_price of this EventItem.


        :return: The unit_price of this EventItem.
        :rtype: Amount
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this EventItem.


        :param unit_price: The unit_price of this EventItem.
        :type unit_price: Amount
        """

        self._unit_price = unit_price

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this EventItem.

        The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :return: The unit_pricing_measure of this EventItem.
        :rtype: str
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this EventItem.

        The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :param unit_pricing_measure: The unit_pricing_measure of this EventItem.
        :type unit_pricing_measure: str
        """

        self._unit_pricing_measure = unit_pricing_measure
