/*
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Coupon;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Terms;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result set for the event search.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:54.023361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_APPLICABLE_COUPONS = "applicableCoupons";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_COUPONS)
  private List<Coupon> applicableCoupons = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_EVENT_AFFILIATE_WEB_URL = "eventAffiliateWebUrl";
  @SerializedName(SERIALIZED_NAME_EVENT_AFFILIATE_WEB_URL)
  private String eventAffiliateWebUrl;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_WEB_URL = "eventWebUrl";
  @SerializedName(SERIALIZED_NAME_EVENT_WEB_URL)
  private String eventWebUrl;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private Terms terms;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Event() {
  }

  public Event applicableCoupons(List<Coupon> applicableCoupons) {
    this.applicableCoupons = applicableCoupons;
    return this;
  }

  public Event addApplicableCouponsItem(Coupon applicableCouponsItem) {
    if (this.applicableCoupons == null) {
      this.applicableCoupons = new ArrayList<>();
    }
    this.applicableCoupons.add(applicableCouponsItem);
    return this;
  }

  /**
   * A list of coupons associated with the event.
   * @return applicableCoupons
   */
  @javax.annotation.Nullable
  public List<Coupon> getApplicableCoupons() {
    return applicableCoupons;
  }

  public void setApplicableCoupons(List<Coupon> applicableCoupons) {
    this.applicableCoupons = applicableCoupons;
  }


  public Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The event description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Event endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date for the event.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Event eventAffiliateWebUrl(String eventAffiliateWebUrl) {
    this.eventAffiliateWebUrl = eventAffiliateWebUrl;
    return this;
  }

  /**
   * The URL of the View Event page for the event, which includes the affiliate tracking ID.
   * @return eventAffiliateWebUrl
   */
  @javax.annotation.Nullable
  public String getEventAffiliateWebUrl() {
    return eventAffiliateWebUrl;
  }

  public void setEventAffiliateWebUrl(String eventAffiliateWebUrl) {
    this.eventAffiliateWebUrl = eventAffiliateWebUrl;
  }


  public Event eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The unique identifier for the event.
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Event eventWebUrl(String eventWebUrl) {
    this.eventWebUrl = eventWebUrl;
    return this;
  }

  /**
   * The web URL for the event.
   * @return eventWebUrl
   */
  @javax.annotation.Nullable
  public String getEventWebUrl() {
    return eventWebUrl;
  }

  public void setEventWebUrl(String eventWebUrl) {
    this.eventWebUrl = eventWebUrl;
  }


  public Event images(List<Image> images) {
    this.images = images;
    return this;
  }

  public Event addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * The images for the event.
   * @return images
   */
  @javax.annotation.Nullable
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public Event startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date for the event.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Event terms(Terms terms) {
    this.terms = terms;
    return this;
  }

  /**
   * Get terms
   * @return terms
   */
  @javax.annotation.Nullable
  public Terms getTerms() {
    return terms;
  }

  public void setTerms(Terms terms) {
    this.terms = terms;
  }


  public Event title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the event.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.applicableCoupons, event.applicableCoupons) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.endDate, event.endDate) &&
        Objects.equals(this.eventAffiliateWebUrl, event.eventAffiliateWebUrl) &&
        Objects.equals(this.eventId, event.eventId) &&
        Objects.equals(this.eventWebUrl, event.eventWebUrl) &&
        Objects.equals(this.images, event.images) &&
        Objects.equals(this.startDate, event.startDate) &&
        Objects.equals(this.terms, event.terms) &&
        Objects.equals(this.title, event.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableCoupons, description, endDate, eventAffiliateWebUrl, eventId, eventWebUrl, images, startDate, terms, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    applicableCoupons: ").append(toIndentedString(applicableCoupons)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    eventAffiliateWebUrl: ").append(toIndentedString(eventAffiliateWebUrl)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventWebUrl: ").append(toIndentedString(eventWebUrl)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableCoupons");
    openapiFields.add("description");
    openapiFields.add("endDate");
    openapiFields.add("eventAffiliateWebUrl");
    openapiFields.add("eventId");
    openapiFields.add("eventWebUrl");
    openapiFields.add("images");
    openapiFields.add("startDate");
    openapiFields.add("terms");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applicableCoupons") != null && !jsonObj.get("applicableCoupons").isJsonNull()) {
        JsonArray jsonArrayapplicableCoupons = jsonObj.getAsJsonArray("applicableCoupons");
        if (jsonArrayapplicableCoupons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicableCoupons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicableCoupons` to be an array in the JSON string but got `%s`", jsonObj.get("applicableCoupons").toString()));
          }

          // validate the optional field `applicableCoupons` (array)
          for (int i = 0; i < jsonArrayapplicableCoupons.size(); i++) {
            Coupon.validateJsonElement(jsonArrayapplicableCoupons.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("eventAffiliateWebUrl") != null && !jsonObj.get("eventAffiliateWebUrl").isJsonNull()) && !jsonObj.get("eventAffiliateWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventAffiliateWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventAffiliateWebUrl").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("eventWebUrl") != null && !jsonObj.get("eventWebUrl").isJsonNull()) && !jsonObj.get("eventWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventWebUrl").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      // validate the optional field `terms`
      if (jsonObj.get("terms") != null && !jsonObj.get("terms").isJsonNull()) {
        Terms.validateJsonElement(jsonObj.get("terms"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

