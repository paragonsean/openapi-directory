/*
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DealItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result set for the deal item search.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:54.023361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealItemSearchResponse {
  public static final String SERIALIZED_NAME_DEAL_ITEMS = "dealItems";
  @SerializedName(SERIALIZED_NAME_DEAL_ITEMS)
  private List<DealItem> dealItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public DealItemSearchResponse() {
  }

  public DealItemSearchResponse dealItems(List<DealItem> dealItems) {
    this.dealItems = dealItems;
    return this;
  }

  public DealItemSearchResponse addDealItemsItem(DealItem dealItemsItem) {
    if (this.dealItems == null) {
      this.dealItems = new ArrayList<>();
    }
    this.dealItems.add(dealItemsItem);
    return this;
  }

  /**
   * A list of deal items that match the search criteria.
   * @return dealItems
   */
  @javax.annotation.Nullable
  public List<DealItem> getDealItems() {
    return dealItems;
  }

  public void setDealItems(List<DealItem> dealItems) {
    this.dealItems = dealItems;
  }


  public DealItemSearchResponse href(String href) {
    this.href = href;
    return this;
  }

  /**
   * The relative path to the current set of results.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public DealItemSearchResponse limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of items, from the current result set, returned on a single page. Default: 20
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public DealItemSearchResponse next(String next) {
    this.next = next;
    return this;
  }

  /**
   * The relative path to the next set of results.
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public DealItemSearchResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public DealItemSearchResponse prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * The relative path to the previous set of results.
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public DealItemSearchResponse total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of matches for the search criteria.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealItemSearchResponse dealItemSearchResponse = (DealItemSearchResponse) o;
    return Objects.equals(this.dealItems, dealItemSearchResponse.dealItems) &&
        Objects.equals(this.href, dealItemSearchResponse.href) &&
        Objects.equals(this.limit, dealItemSearchResponse.limit) &&
        Objects.equals(this.next, dealItemSearchResponse.next) &&
        Objects.equals(this.offset, dealItemSearchResponse.offset) &&
        Objects.equals(this.prev, dealItemSearchResponse.prev) &&
        Objects.equals(this.total, dealItemSearchResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dealItems, href, limit, next, offset, prev, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealItemSearchResponse {\n");
    sb.append("    dealItems: ").append(toIndentedString(dealItems)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dealItems");
    openapiFields.add("href");
    openapiFields.add("limit");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("prev");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealItemSearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealItemSearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealItemSearchResponse is not found in the empty JSON string", DealItemSearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealItemSearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealItemSearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dealItems") != null && !jsonObj.get("dealItems").isJsonNull()) {
        JsonArray jsonArraydealItems = jsonObj.getAsJsonArray("dealItems");
        if (jsonArraydealItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dealItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dealItems` to be an array in the JSON string but got `%s`", jsonObj.get("dealItems").toString()));
          }

          // validate the optional field `dealItems` (array)
          for (int i = 0; i < jsonArraydealItems.size(); i++) {
            DealItem.validateJsonElement(jsonArraydealItems.get(i));
          };
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealItemSearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealItemSearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealItemSearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealItemSearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DealItemSearchResponse>() {
           @Override
           public void write(JsonWriter out, DealItemSearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealItemSearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealItemSearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealItemSearchResponse
   * @throws IOException if the JSON string is invalid with respect to DealItemSearchResponse
   */
  public static DealItemSearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealItemSearchResponse.class);
  }

  /**
   * Convert an instance of DealItemSearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

