/*
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.MarketingPrice;
import org.openapitools.client.model.ShippingOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The detailed data returned for the event item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:54.023361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventItem {
  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGES = "additionalImages";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGES)
  private List<Image> additionalImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_ANCESTOR_IDS = "categoryAncestorIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ANCESTOR_IDS)
  private List<String> categoryAncestorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENCY_CLASS = "energyEfficiencyClass";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENCY_CLASS)
  private String energyEfficiencyClass;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_ITEM_AFFILIATE_WEB_URL = "itemAffiliateWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_AFFILIATE_WEB_URL)
  private String itemAffiliateWebUrl;

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID = "itemGroupId";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID)
  private String itemGroupId;

  public static final String SERIALIZED_NAME_ITEM_GROUP_TYPE = "itemGroupType";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_TYPE)
  private String itemGroupType;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_WEB_URL = "itemWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_WEB_URL)
  private String itemWebUrl;

  public static final String SERIALIZED_NAME_LEGACY_ITEM_ID = "legacyItemId";
  @SerializedName(SERIALIZED_NAME_LEGACY_ITEM_ID)
  private String legacyItemId;

  public static final String SERIALIZED_NAME_MARKETING_PRICE = "marketingPrice";
  @SerializedName(SERIALIZED_NAME_MARKETING_PRICE)
  private MarketingPrice marketingPrice;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Amount price;

  public static final String SERIALIZED_NAME_QUALIFIED_PROGRAMS = "qualifiedPrograms";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_PROGRAMS)
  private List<String> qualifiedPrograms = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_OPTIONS = "shippingOptions";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTIONS)
  private List<ShippingOption> shippingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Amount unitPrice;

  public static final String SERIALIZED_NAME_UNIT_PRICING_MEASURE = "unitPricingMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICING_MEASURE)
  private String unitPricingMeasure;

  public EventItem() {
  }

  public EventItem additionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
    return this;
  }

  public EventItem addAdditionalImagesItem(Image additionalImagesItem) {
    if (this.additionalImages == null) {
      this.additionalImages = new ArrayList<>();
    }
    this.additionalImages.add(additionalImagesItem);
    return this;
  }

  /**
   * The additional images for the event item.
   * @return additionalImages
   */
  @javax.annotation.Nullable
  public List<Image> getAdditionalImages() {
    return additionalImages;
  }

  public void setAdditionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
  }


  public EventItem categoryAncestorIds(List<String> categoryAncestorIds) {
    this.categoryAncestorIds = categoryAncestorIds;
    return this;
  }

  public EventItem addCategoryAncestorIdsItem(String categoryAncestorIdsItem) {
    if (this.categoryAncestorIds == null) {
      this.categoryAncestorIds = new ArrayList<>();
    }
    this.categoryAncestorIds.add(categoryAncestorIdsItem);
    return this;
  }

  /**
   * The IDs of the ancestors for the primary category.
   * @return categoryAncestorIds
   */
  @javax.annotation.Nullable
  public List<String> getCategoryAncestorIds() {
    return categoryAncestorIds;
  }

  public void setCategoryAncestorIds(List<String> categoryAncestorIds) {
    this.categoryAncestorIds = categoryAncestorIds;
  }


  public EventItem categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public EventItem energyEfficiencyClass(String energyEfficiencyClass) {
    this.energyEfficiencyClass = energyEfficiencyClass;
    return this;
  }

  /**
   * A string value specifying the Energy Efficiency class.
   * @return energyEfficiencyClass
   */
  @javax.annotation.Nullable
  public String getEnergyEfficiencyClass() {
    return energyEfficiencyClass;
  }

  public void setEnergyEfficiencyClass(String energyEfficiencyClass) {
    this.energyEfficiencyClass = energyEfficiencyClass;
  }


  public EventItem eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The unique event identifier associated with the item.
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EventItem image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public EventItem itemAffiliateWebUrl(String itemAffiliateWebUrl) {
    this.itemAffiliateWebUrl = itemAffiliateWebUrl;
    return this;
  }

  /**
   * The item web URL with affiliate attribution.
   * @return itemAffiliateWebUrl
   */
  @javax.annotation.Nullable
  public String getItemAffiliateWebUrl() {
    return itemAffiliateWebUrl;
  }

  public void setItemAffiliateWebUrl(String itemAffiliateWebUrl) {
    this.itemAffiliateWebUrl = itemAffiliateWebUrl;
  }


  public EventItem itemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
    return this;
  }

  /**
   * The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.
   * @return itemGroupId
   */
  @javax.annotation.Nullable
  public String getItemGroupId() {
    return itemGroupId;
  }

  public void setItemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
  }


  public EventItem itemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
    return this;
  }

  /**
   * An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return itemGroupType
   */
  @javax.annotation.Nullable
  public String getItemGroupType() {
    return itemGroupType;
  }

  public void setItemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
  }


  public EventItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The unique identifier for the event item. Note: This field is only returned for single-SKU items.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public EventItem itemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
    return this;
  }

  /**
   * The web URL for the event item.
   * @return itemWebUrl
   */
  @javax.annotation.Nullable
  public String getItemWebUrl() {
    return itemWebUrl;
  }

  public void setItemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
  }


  public EventItem legacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
    return this;
  }

  /**
   * The legacy item ID associated with the event item.
   * @return legacyItemId
   */
  @javax.annotation.Nullable
  public String getLegacyItemId() {
    return legacyItemId;
  }

  public void setLegacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
  }


  public EventItem marketingPrice(MarketingPrice marketingPrice) {
    this.marketingPrice = marketingPrice;
    return this;
  }

  /**
   * Get marketingPrice
   * @return marketingPrice
   */
  @javax.annotation.Nullable
  public MarketingPrice getMarketingPrice() {
    return marketingPrice;
  }

  public void setMarketingPrice(MarketingPrice marketingPrice) {
    this.marketingPrice = marketingPrice;
  }


  public EventItem price(Amount price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Amount getPrice() {
    return price;
  }

  public void setPrice(Amount price) {
    this.price = price;
  }


  public EventItem qualifiedPrograms(List<String> qualifiedPrograms) {
    this.qualifiedPrograms = qualifiedPrograms;
    return this;
  }

  public EventItem addQualifiedProgramsItem(String qualifiedProgramsItem) {
    if (this.qualifiedPrograms == null) {
      this.qualifiedPrograms = new ArrayList<>();
    }
    this.qualifiedPrograms.add(qualifiedProgramsItem);
    return this;
  }

  /**
   * A list of programs applicable to the event item.
   * @return qualifiedPrograms
   */
  @javax.annotation.Nullable
  public List<String> getQualifiedPrograms() {
    return qualifiedPrograms;
  }

  public void setQualifiedPrograms(List<String> qualifiedPrograms) {
    this.qualifiedPrograms = qualifiedPrograms;
  }


  public EventItem shippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public EventItem addShippingOptionsItem(ShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

  /**
   * The cost required to ship the event item.
   * @return shippingOptions
   */
  @javax.annotation.Nullable
  public List<ShippingOption> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }


  public EventItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the event item.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EventItem unitPrice(Amount unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public Amount getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Amount unitPrice) {
    this.unitPrice = unitPrice;
  }


  public EventItem unitPricingMeasure(String unitPricingMeasure) {
    this.unitPricingMeasure = unitPricingMeasure;
    return this;
  }

  /**
   * The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &amp;quot;unitPricingMeasure&amp;quot;: &amp;quot;100g&amp;quot;, &amp;quot;unitPrice&amp;quot;: { &amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot;: &amp;quot;7.99&amp;quot;, &amp;nbsp;&amp;nbsp;&amp;quot;currency&amp;quot;: &amp;quot;GBP&amp;quot;
   * @return unitPricingMeasure
   */
  @javax.annotation.Nullable
  public String getUnitPricingMeasure() {
    return unitPricingMeasure;
  }

  public void setUnitPricingMeasure(String unitPricingMeasure) {
    this.unitPricingMeasure = unitPricingMeasure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventItem eventItem = (EventItem) o;
    return Objects.equals(this.additionalImages, eventItem.additionalImages) &&
        Objects.equals(this.categoryAncestorIds, eventItem.categoryAncestorIds) &&
        Objects.equals(this.categoryId, eventItem.categoryId) &&
        Objects.equals(this.energyEfficiencyClass, eventItem.energyEfficiencyClass) &&
        Objects.equals(this.eventId, eventItem.eventId) &&
        Objects.equals(this.image, eventItem.image) &&
        Objects.equals(this.itemAffiliateWebUrl, eventItem.itemAffiliateWebUrl) &&
        Objects.equals(this.itemGroupId, eventItem.itemGroupId) &&
        Objects.equals(this.itemGroupType, eventItem.itemGroupType) &&
        Objects.equals(this.itemId, eventItem.itemId) &&
        Objects.equals(this.itemWebUrl, eventItem.itemWebUrl) &&
        Objects.equals(this.legacyItemId, eventItem.legacyItemId) &&
        Objects.equals(this.marketingPrice, eventItem.marketingPrice) &&
        Objects.equals(this.price, eventItem.price) &&
        Objects.equals(this.qualifiedPrograms, eventItem.qualifiedPrograms) &&
        Objects.equals(this.shippingOptions, eventItem.shippingOptions) &&
        Objects.equals(this.title, eventItem.title) &&
        Objects.equals(this.unitPrice, eventItem.unitPrice) &&
        Objects.equals(this.unitPricingMeasure, eventItem.unitPricingMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalImages, categoryAncestorIds, categoryId, energyEfficiencyClass, eventId, image, itemAffiliateWebUrl, itemGroupId, itemGroupType, itemId, itemWebUrl, legacyItemId, marketingPrice, price, qualifiedPrograms, shippingOptions, title, unitPrice, unitPricingMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventItem {\n");
    sb.append("    additionalImages: ").append(toIndentedString(additionalImages)).append("\n");
    sb.append("    categoryAncestorIds: ").append(toIndentedString(categoryAncestorIds)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    energyEfficiencyClass: ").append(toIndentedString(energyEfficiencyClass)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    itemAffiliateWebUrl: ").append(toIndentedString(itemAffiliateWebUrl)).append("\n");
    sb.append("    itemGroupId: ").append(toIndentedString(itemGroupId)).append("\n");
    sb.append("    itemGroupType: ").append(toIndentedString(itemGroupType)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemWebUrl: ").append(toIndentedString(itemWebUrl)).append("\n");
    sb.append("    legacyItemId: ").append(toIndentedString(legacyItemId)).append("\n");
    sb.append("    marketingPrice: ").append(toIndentedString(marketingPrice)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    qualifiedPrograms: ").append(toIndentedString(qualifiedPrograms)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    unitPricingMeasure: ").append(toIndentedString(unitPricingMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalImages");
    openapiFields.add("categoryAncestorIds");
    openapiFields.add("categoryId");
    openapiFields.add("energyEfficiencyClass");
    openapiFields.add("eventId");
    openapiFields.add("image");
    openapiFields.add("itemAffiliateWebUrl");
    openapiFields.add("itemGroupId");
    openapiFields.add("itemGroupType");
    openapiFields.add("itemId");
    openapiFields.add("itemWebUrl");
    openapiFields.add("legacyItemId");
    openapiFields.add("marketingPrice");
    openapiFields.add("price");
    openapiFields.add("qualifiedPrograms");
    openapiFields.add("shippingOptions");
    openapiFields.add("title");
    openapiFields.add("unitPrice");
    openapiFields.add("unitPricingMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventItem is not found in the empty JSON string", EventItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalImages") != null && !jsonObj.get("additionalImages").isJsonNull()) {
        JsonArray jsonArrayadditionalImages = jsonObj.getAsJsonArray("additionalImages");
        if (jsonArrayadditionalImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalImages` to be an array in the JSON string but got `%s`", jsonObj.get("additionalImages").toString()));
          }

          // validate the optional field `additionalImages` (array)
          for (int i = 0; i < jsonArrayadditionalImages.size(); i++) {
            Image.validateJsonElement(jsonArrayadditionalImages.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryAncestorIds") != null && !jsonObj.get("categoryAncestorIds").isJsonNull() && !jsonObj.get("categoryAncestorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryAncestorIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoryAncestorIds").toString()));
      }
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("energyEfficiencyClass") != null && !jsonObj.get("energyEfficiencyClass").isJsonNull()) && !jsonObj.get("energyEfficiencyClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyEfficiencyClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyEfficiencyClass").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("itemAffiliateWebUrl") != null && !jsonObj.get("itemAffiliateWebUrl").isJsonNull()) && !jsonObj.get("itemAffiliateWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemAffiliateWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemAffiliateWebUrl").toString()));
      }
      if ((jsonObj.get("itemGroupId") != null && !jsonObj.get("itemGroupId").isJsonNull()) && !jsonObj.get("itemGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupId").toString()));
      }
      if ((jsonObj.get("itemGroupType") != null && !jsonObj.get("itemGroupType").isJsonNull()) && !jsonObj.get("itemGroupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupType").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("itemWebUrl") != null && !jsonObj.get("itemWebUrl").isJsonNull()) && !jsonObj.get("itemWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemWebUrl").toString()));
      }
      if ((jsonObj.get("legacyItemId") != null && !jsonObj.get("legacyItemId").isJsonNull()) && !jsonObj.get("legacyItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyItemId").toString()));
      }
      // validate the optional field `marketingPrice`
      if (jsonObj.get("marketingPrice") != null && !jsonObj.get("marketingPrice").isJsonNull()) {
        MarketingPrice.validateJsonElement(jsonObj.get("marketingPrice"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("price"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qualifiedPrograms") != null && !jsonObj.get("qualifiedPrograms").isJsonNull() && !jsonObj.get("qualifiedPrograms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifiedPrograms` to be an array in the JSON string but got `%s`", jsonObj.get("qualifiedPrograms").toString()));
      }
      if (jsonObj.get("shippingOptions") != null && !jsonObj.get("shippingOptions").isJsonNull()) {
        JsonArray jsonArrayshippingOptions = jsonObj.getAsJsonArray("shippingOptions");
        if (jsonArrayshippingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("shippingOptions").toString()));
          }

          // validate the optional field `shippingOptions` (array)
          for (int i = 0; i < jsonArrayshippingOptions.size(); i++) {
            ShippingOption.validateJsonElement(jsonArrayshippingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("unitPrice"));
      }
      if ((jsonObj.get("unitPricingMeasure") != null && !jsonObj.get("unitPricingMeasure").isJsonNull()) && !jsonObj.get("unitPricingMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitPricingMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitPricingMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EventItem>() {
           @Override
           public void write(JsonWriter out, EventItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventItem
   * @throws IOException if the JSON string is invalid with respect to EventItem
   */
  public static EventItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventItem.class);
  }

  /**
   * Convert an instance of EventItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

