/**
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_applicable_coupons_isSet = false;
    m_applicable_coupons_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_event_affiliate_web_url_isSet = false;
    m_event_affiliate_web_url_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_web_url_isSet = false;
    m_event_web_url_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_applicable_coupons_isValid = ::OpenAPI::fromJsonValue(m_applicable_coupons, json[QString("applicableCoupons")]);
    m_applicable_coupons_isSet = !json[QString("applicableCoupons")].isNull() && m_applicable_coupons_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_event_affiliate_web_url_isValid = ::OpenAPI::fromJsonValue(m_event_affiliate_web_url, json[QString("eventAffiliateWebUrl")]);
    m_event_affiliate_web_url_isSet = !json[QString("eventAffiliateWebUrl")].isNull() && m_event_affiliate_web_url_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_web_url_isValid = ::OpenAPI::fromJsonValue(m_event_web_url, json[QString("eventWebUrl")]);
    m_event_web_url_isSet = !json[QString("eventWebUrl")].isNull() && m_event_web_url_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_coupons.size() > 0) {
        obj.insert(QString("applicableCoupons"), ::OpenAPI::toJsonValue(m_applicable_coupons));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_event_affiliate_web_url_isSet) {
        obj.insert(QString("eventAffiliateWebUrl"), ::OpenAPI::toJsonValue(m_event_affiliate_web_url));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_web_url_isSet) {
        obj.insert(QString("eventWebUrl"), ::OpenAPI::toJsonValue(m_event_web_url));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAICoupon> OAIEvent::getApplicableCoupons() const {
    return m_applicable_coupons;
}
void OAIEvent::setApplicableCoupons(const QList<OAICoupon> &applicable_coupons) {
    m_applicable_coupons = applicable_coupons;
    m_applicable_coupons_isSet = true;
}

bool OAIEvent::is_applicable_coupons_Set() const{
    return m_applicable_coupons_isSet;
}

bool OAIEvent::is_applicable_coupons_Valid() const{
    return m_applicable_coupons_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEvent::getEndDate() const {
    return m_end_date;
}
void OAIEvent::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEvent::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEvent::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEvent::getEventAffiliateWebUrl() const {
    return m_event_affiliate_web_url;
}
void OAIEvent::setEventAffiliateWebUrl(const QString &event_affiliate_web_url) {
    m_event_affiliate_web_url = event_affiliate_web_url;
    m_event_affiliate_web_url_isSet = true;
}

bool OAIEvent::is_event_affiliate_web_url_Set() const{
    return m_event_affiliate_web_url_isSet;
}

bool OAIEvent::is_event_affiliate_web_url_Valid() const{
    return m_event_affiliate_web_url_isValid;
}

QString OAIEvent::getEventId() const {
    return m_event_id;
}
void OAIEvent::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIEvent::getEventWebUrl() const {
    return m_event_web_url;
}
void OAIEvent::setEventWebUrl(const QString &event_web_url) {
    m_event_web_url = event_web_url;
    m_event_web_url_isSet = true;
}

bool OAIEvent::is_event_web_url_Set() const{
    return m_event_web_url_isSet;
}

bool OAIEvent::is_event_web_url_Valid() const{
    return m_event_web_url_isValid;
}

QList<OAIImage> OAIEvent::getImages() const {
    return m_images;
}
void OAIEvent::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIEvent::is_images_Set() const{
    return m_images_isSet;
}

bool OAIEvent::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIEvent::getStartDate() const {
    return m_start_date;
}
void OAIEvent::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEvent::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEvent::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAITerms OAIEvent::getTerms() const {
    return m_terms;
}
void OAIEvent::setTerms(const OAITerms &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIEvent::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIEvent::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIEvent::getTitle() const {
    return m_title;
}
void OAIEvent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEvent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEvent::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_coupons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_affiliate_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
