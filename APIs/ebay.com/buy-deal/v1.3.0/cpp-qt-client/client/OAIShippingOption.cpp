/**
 * Deal API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.
 *
 * The version of the OpenAPI document: v1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingOption::OAIShippingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingOption::OAIShippingOption() {
    this->initializeModel();
}

OAIShippingOption::~OAIShippingOption() {}

void OAIShippingOption::initializeModel() {

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_cost_type_isSet = false;
    m_shipping_cost_type_isValid = false;
}

void OAIShippingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingOption::fromJsonObject(QJsonObject json) {

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_cost_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost_type, json[QString("shippingCostType")]);
    m_shipping_cost_type_isSet = !json[QString("shippingCostType")].isNull() && m_shipping_cost_type_isValid;
}

QString OAIShippingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_cost_type_isSet) {
        obj.insert(QString("shippingCostType"), ::OpenAPI::toJsonValue(m_shipping_cost_type));
    }
    return obj;
}

OAIAmount OAIShippingOption::getShippingCost() const {
    return m_shipping_cost;
}
void OAIShippingOption::setShippingCost(const OAIAmount &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIShippingOption::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIShippingOption::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIShippingOption::getShippingCostType() const {
    return m_shipping_cost_type;
}
void OAIShippingOption::setShippingCostType(const QString &shipping_cost_type) {
    m_shipping_cost_type = shipping_cost_type;
    m_shipping_cost_type_isSet = true;
}

bool OAIShippingOption::is_shipping_cost_type_Set() const{
    return m_shipping_cost_type_isSet;
}

bool OAIShippingOption::is_shipping_cost_type_Valid() const{
    return m_shipping_cost_type_isValid;
}

bool OAIShippingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
