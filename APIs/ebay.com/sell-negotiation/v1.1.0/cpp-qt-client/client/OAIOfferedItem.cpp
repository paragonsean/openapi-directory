/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferedItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferedItem::OAIOfferedItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferedItem::OAIOfferedItem() {
    this->initializeModel();
}

OAIOfferedItem::~OAIOfferedItem() {}

void OAIOfferedItem::initializeModel() {

    m_discount_percentage_isSet = false;
    m_discount_percentage_isValid = false;

    m_listing_id_isSet = false;
    m_listing_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIOfferedItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferedItem::fromJsonObject(QJsonObject json) {

    m_discount_percentage_isValid = ::OpenAPI::fromJsonValue(m_discount_percentage, json[QString("discountPercentage")]);
    m_discount_percentage_isSet = !json[QString("discountPercentage")].isNull() && m_discount_percentage_isValid;

    m_listing_id_isValid = ::OpenAPI::fromJsonValue(m_listing_id, json[QString("listingId")]);
    m_listing_id_isSet = !json[QString("listingId")].isNull() && m_listing_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIOfferedItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferedItem::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_percentage_isSet) {
        obj.insert(QString("discountPercentage"), ::OpenAPI::toJsonValue(m_discount_percentage));
    }
    if (m_listing_id_isSet) {
        obj.insert(QString("listingId"), ::OpenAPI::toJsonValue(m_listing_id));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAIOfferedItem::getDiscountPercentage() const {
    return m_discount_percentage;
}
void OAIOfferedItem::setDiscountPercentage(const QString &discount_percentage) {
    m_discount_percentage = discount_percentage;
    m_discount_percentage_isSet = true;
}

bool OAIOfferedItem::is_discount_percentage_Set() const{
    return m_discount_percentage_isSet;
}

bool OAIOfferedItem::is_discount_percentage_Valid() const{
    return m_discount_percentage_isValid;
}

QString OAIOfferedItem::getListingId() const {
    return m_listing_id;
}
void OAIOfferedItem::setListingId(const QString &listing_id) {
    m_listing_id = listing_id;
    m_listing_id_isSet = true;
}

bool OAIOfferedItem::is_listing_id_Set() const{
    return m_listing_id_isSet;
}

bool OAIOfferedItem::is_listing_id_Valid() const{
    return m_listing_id_isValid;
}

OAIAmount OAIOfferedItem::getPrice() const {
    return m_price;
}
void OAIOfferedItem::setPrice(const OAIAmount &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOfferedItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOfferedItem::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIOfferedItem::getQuantity() const {
    return m_quantity;
}
void OAIOfferedItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOfferedItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOfferedItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIOfferedItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferedItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
