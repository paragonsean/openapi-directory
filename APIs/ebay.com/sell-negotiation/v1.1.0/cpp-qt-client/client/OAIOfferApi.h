/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOfferApi_H
#define OAI_OAIOfferApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOffersRequest.h"
#include "OAIPagedEligibleItemCollection.h"
#include "OAISendOfferToInterestedBuyersCollectionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOfferApi : public QObject {
    Q_OBJECT

public:
    OAIOfferApi(const int timeOut = 0);
    ~OAIOfferApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void findEligibleItems(const QString &x_ebay_c_marketplace_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    * @param[in]  oai_create_offers_request OAICreateOffersRequest [optional]
    */
    virtual void sendOfferToInterestedBuyers(const QString &x_ebay_c_marketplace_id, const ::OpenAPI::OptionalParam<OAICreateOffersRequest> &oai_create_offers_request = ::OpenAPI::OptionalParam<OAICreateOffersRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findEligibleItemsCallback(OAIHttpRequestWorker *worker);
    void sendOfferToInterestedBuyersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findEligibleItemsSignal(OAIPagedEligibleItemCollection summary);
    void sendOfferToInterestedBuyersSignal(OAISendOfferToInterestedBuyersCollectionResponse summary);


    void findEligibleItemsSignalFull(OAIHttpRequestWorker *worker, OAIPagedEligibleItemCollection summary);
    void sendOfferToInterestedBuyersSignalFull(OAIHttpRequestWorker *worker, OAISendOfferToInterestedBuyersCollectionResponse summary);

    Q_DECL_DEPRECATED_X("Use findEligibleItemsSignalError() instead")
    void findEligibleItemsSignalE(OAIPagedEligibleItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findEligibleItemsSignalError(OAIPagedEligibleItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendOfferToInterestedBuyersSignalError() instead")
    void sendOfferToInterestedBuyersSignalE(OAISendOfferToInterestedBuyersCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendOfferToInterestedBuyersSignalError(OAISendOfferToInterestedBuyersCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findEligibleItemsSignalErrorFull() instead")
    void findEligibleItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findEligibleItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendOfferToInterestedBuyersSignalErrorFull() instead")
    void sendOfferToInterestedBuyersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendOfferToInterestedBuyersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
