/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendOfferToInterestedBuyersCollectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendOfferToInterestedBuyersCollectionResponse::OAISendOfferToInterestedBuyersCollectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendOfferToInterestedBuyersCollectionResponse::OAISendOfferToInterestedBuyersCollectionResponse() {
    this->initializeModel();
}

OAISendOfferToInterestedBuyersCollectionResponse::~OAISendOfferToInterestedBuyersCollectionResponse() {}

void OAISendOfferToInterestedBuyersCollectionResponse::initializeModel() {

    m_offers_isSet = false;
    m_offers_isValid = false;
}

void OAISendOfferToInterestedBuyersCollectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendOfferToInterestedBuyersCollectionResponse::fromJsonObject(QJsonObject json) {

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;
}

QString OAISendOfferToInterestedBuyersCollectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendOfferToInterestedBuyersCollectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    return obj;
}

QList<OAIOffer> OAISendOfferToInterestedBuyersCollectionResponse::getOffers() const {
    return m_offers;
}
void OAISendOfferToInterestedBuyersCollectionResponse::setOffers(const QList<OAIOffer> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAISendOfferToInterestedBuyersCollectionResponse::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAISendOfferToInterestedBuyersCollectionResponse::is_offers_Valid() const{
    return m_offers_isValid;
}

bool OAISendOfferToInterestedBuyersCollectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendOfferToInterestedBuyersCollectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
