/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOffersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOffersRequest::OAICreateOffersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOffersRequest::OAICreateOffersRequest() {
    this->initializeModel();
}

OAICreateOffersRequest::~OAICreateOffersRequest() {}

void OAICreateOffersRequest::initializeModel() {

    m_allow_counter_offer_isSet = false;
    m_allow_counter_offer_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_offer_duration_isSet = false;
    m_offer_duration_isValid = false;

    m_offered_items_isSet = false;
    m_offered_items_isValid = false;
}

void OAICreateOffersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOffersRequest::fromJsonObject(QJsonObject json) {

    m_allow_counter_offer_isValid = ::OpenAPI::fromJsonValue(m_allow_counter_offer, json[QString("allowCounterOffer")]);
    m_allow_counter_offer_isSet = !json[QString("allowCounterOffer")].isNull() && m_allow_counter_offer_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_offer_duration_isValid = ::OpenAPI::fromJsonValue(m_offer_duration, json[QString("offerDuration")]);
    m_offer_duration_isSet = !json[QString("offerDuration")].isNull() && m_offer_duration_isValid;

    m_offered_items_isValid = ::OpenAPI::fromJsonValue(m_offered_items, json[QString("offeredItems")]);
    m_offered_items_isSet = !json[QString("offeredItems")].isNull() && m_offered_items_isValid;
}

QString OAICreateOffersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOffersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_counter_offer_isSet) {
        obj.insert(QString("allowCounterOffer"), ::OpenAPI::toJsonValue(m_allow_counter_offer));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_offer_duration.isSet()) {
        obj.insert(QString("offerDuration"), ::OpenAPI::toJsonValue(m_offer_duration));
    }
    if (m_offered_items.size() > 0) {
        obj.insert(QString("offeredItems"), ::OpenAPI::toJsonValue(m_offered_items));
    }
    return obj;
}

bool OAICreateOffersRequest::isAllowCounterOffer() const {
    return m_allow_counter_offer;
}
void OAICreateOffersRequest::setAllowCounterOffer(const bool &allow_counter_offer) {
    m_allow_counter_offer = allow_counter_offer;
    m_allow_counter_offer_isSet = true;
}

bool OAICreateOffersRequest::is_allow_counter_offer_Set() const{
    return m_allow_counter_offer_isSet;
}

bool OAICreateOffersRequest::is_allow_counter_offer_Valid() const{
    return m_allow_counter_offer_isValid;
}

QString OAICreateOffersRequest::getMessage() const {
    return m_message;
}
void OAICreateOffersRequest::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateOffersRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateOffersRequest::is_message_Valid() const{
    return m_message_isValid;
}

OAITimeDuration OAICreateOffersRequest::getOfferDuration() const {
    return m_offer_duration;
}
void OAICreateOffersRequest::setOfferDuration(const OAITimeDuration &offer_duration) {
    m_offer_duration = offer_duration;
    m_offer_duration_isSet = true;
}

bool OAICreateOffersRequest::is_offer_duration_Set() const{
    return m_offer_duration_isSet;
}

bool OAICreateOffersRequest::is_offer_duration_Valid() const{
    return m_offer_duration_isValid;
}

QList<OAIOfferedItem> OAICreateOffersRequest::getOfferedItems() const {
    return m_offered_items;
}
void OAICreateOffersRequest::setOfferedItems(const QList<OAIOfferedItem> &offered_items) {
    m_offered_items = offered_items;
    m_offered_items_isSet = true;
}

bool OAICreateOffersRequest::is_offered_items_Set() const{
    return m_offered_items_isSet;
}

bool OAICreateOffersRequest::is_offered_items_Valid() const{
    return m_offered_items_isValid;
}

bool OAICreateOffersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_counter_offer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offered_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOffersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
