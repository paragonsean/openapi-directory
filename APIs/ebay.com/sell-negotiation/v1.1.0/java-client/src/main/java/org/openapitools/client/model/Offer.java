/*
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OfferedItem;
import org.openapitools.client.model.TimeDuration;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that defines an offer that a seller makes to eligible buyers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:06.236756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Offer {
  public static final String SERIALIZED_NAME_ALLOW_COUNTER_OFFER = "allowCounterOffer";
  @SerializedName(SERIALIZED_NAME_ALLOW_COUNTER_OFFER)
  private Boolean allowCounterOffer;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private User buyer;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_INITIATED_BY = "initiatedBy";
  @SerializedName(SERIALIZED_NAME_INITIATED_BY)
  private String initiatedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OFFER_DURATION = "offerDuration";
  @SerializedName(SERIALIZED_NAME_OFFER_DURATION)
  private TimeDuration offerDuration;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_OFFER_STATUS = "offerStatus";
  @SerializedName(SERIALIZED_NAME_OFFER_STATUS)
  private String offerStatus;

  public static final String SERIALIZED_NAME_OFFER_TYPE = "offerType";
  @SerializedName(SERIALIZED_NAME_OFFER_TYPE)
  private String offerType;

  public static final String SERIALIZED_NAME_OFFERED_ITEMS = "offeredItems";
  @SerializedName(SERIALIZED_NAME_OFFERED_ITEMS)
  private List<OfferedItem> offeredItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public Offer() {
  }

  public Offer allowCounterOffer(Boolean allowCounterOffer) {
    this.allowCounterOffer = allowCounterOffer;
    return this;
  }

  /**
   * If set to true, the buyer is allowed to make a counter-offer to the seller&#39;s offer.
   * @return allowCounterOffer
   */
  @javax.annotation.Nullable
  public Boolean getAllowCounterOffer() {
    return allowCounterOffer;
  }

  public void setAllowCounterOffer(Boolean allowCounterOffer) {
    this.allowCounterOffer = allowCounterOffer;
  }


  public Offer buyer(User buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public User getBuyer() {
    return buyer;
  }

  public void setBuyer(User buyer) {
    this.buyer = buyer;
  }


  public Offer creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date and time when the seller&#39;s offer was created. The returned timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public Offer initiatedBy(String initiatedBy) {
    this.initiatedBy = initiatedBy;
    return this;
  }

  /**
   * The eBay UserName of the user (seller) who initiated the offer.
   * @return initiatedBy
   */
  @javax.annotation.Nullable
  public String getInitiatedBy() {
    return initiatedBy;
  }

  public void setInitiatedBy(String initiatedBy) {
    this.initiatedBy = initiatedBy;
  }


  public Offer lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * The date and time when the offer was last modified. The returned timestamp is formatted as an ISO 8601 string.
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public Offer message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A seller-defined message related to the offer being made. This message is sent to the list of &amp;quot;interested&amp;quot; buyers along with the offer message from eBay.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Offer offerDuration(TimeDuration offerDuration) {
    this.offerDuration = offerDuration;
    return this;
  }

  /**
   * Get offerDuration
   * @return offerDuration
   */
  @javax.annotation.Nullable
  public TimeDuration getOfferDuration() {
    return offerDuration;
  }

  public void setOfferDuration(TimeDuration offerDuration) {
    this.offerDuration = offerDuration;
  }


  public Offer offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * A unique eBay-assigned identifier for the offer.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public Offer offerStatus(String offerStatus) {
    this.offerStatus = offerStatus;
    return this;
  }

  /**
   * The current state, or status, of an offer. Status states include PENDING, COUNTERED, ACCEPTED, and DECLINED. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return offerStatus
   */
  @javax.annotation.Nullable
  public String getOfferStatus() {
    return offerStatus;
  }

  public void setOfferStatus(String offerStatus) {
    this.offerStatus = offerStatus;
  }


  public Offer offerType(String offerType) {
    this.offerType = offerType;
    return this;
  }

  /**
   * The type of offer being made. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return offerType
   */
  @javax.annotation.Nullable
  public String getOfferType() {
    return offerType;
  }

  public void setOfferType(String offerType) {
    this.offerType = offerType;
  }


  public Offer offeredItems(List<OfferedItem> offeredItems) {
    this.offeredItems = offeredItems;
    return this;
  }

  public Offer addOfferedItemsItem(OfferedItem offeredItemsItem) {
    if (this.offeredItems == null) {
      this.offeredItems = new ArrayList<>();
    }
    this.offeredItems.add(offeredItemsItem);
    return this;
  }

  /**
   * The list of items associated with the offer. Currently, the offer list is restricted to a single offer.
   * @return offeredItems
   */
  @javax.annotation.Nullable
  public List<OfferedItem> getOfferedItems() {
    return offeredItems;
  }

  public void setOfferedItems(List<OfferedItem> offeredItems) {
    this.offeredItems = offeredItems;
  }


  public Offer revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * A unique, eBay-assigned ID for the revision of the offer.
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Offer offer = (Offer) o;
    return Objects.equals(this.allowCounterOffer, offer.allowCounterOffer) &&
        Objects.equals(this.buyer, offer.buyer) &&
        Objects.equals(this.creationDate, offer.creationDate) &&
        Objects.equals(this.initiatedBy, offer.initiatedBy) &&
        Objects.equals(this.lastModifiedDate, offer.lastModifiedDate) &&
        Objects.equals(this.message, offer.message) &&
        Objects.equals(this.offerDuration, offer.offerDuration) &&
        Objects.equals(this.offerId, offer.offerId) &&
        Objects.equals(this.offerStatus, offer.offerStatus) &&
        Objects.equals(this.offerType, offer.offerType) &&
        Objects.equals(this.offeredItems, offer.offeredItems) &&
        Objects.equals(this.revision, offer.revision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCounterOffer, buyer, creationDate, initiatedBy, lastModifiedDate, message, offerDuration, offerId, offerStatus, offerType, offeredItems, revision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Offer {\n");
    sb.append("    allowCounterOffer: ").append(toIndentedString(allowCounterOffer)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    initiatedBy: ").append(toIndentedString(initiatedBy)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    offerDuration: ").append(toIndentedString(offerDuration)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerStatus: ").append(toIndentedString(offerStatus)).append("\n");
    sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
    sb.append("    offeredItems: ").append(toIndentedString(offeredItems)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowCounterOffer");
    openapiFields.add("buyer");
    openapiFields.add("creationDate");
    openapiFields.add("initiatedBy");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("message");
    openapiFields.add("offerDuration");
    openapiFields.add("offerId");
    openapiFields.add("offerStatus");
    openapiFields.add("offerType");
    openapiFields.add("offeredItems");
    openapiFields.add("revision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Offer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Offer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Offer is not found in the empty JSON string", Offer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Offer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Offer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buyer`
      if (jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("buyer"));
      }
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("initiatedBy") != null && !jsonObj.get("initiatedBy").isJsonNull()) && !jsonObj.get("initiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiatedBy").toString()));
      }
      if ((jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) && !jsonObj.get("lastModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedDate").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `offerDuration`
      if (jsonObj.get("offerDuration") != null && !jsonObj.get("offerDuration").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("offerDuration"));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("offerStatus") != null && !jsonObj.get("offerStatus").isJsonNull()) && !jsonObj.get("offerStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerStatus").toString()));
      }
      if ((jsonObj.get("offerType") != null && !jsonObj.get("offerType").isJsonNull()) && !jsonObj.get("offerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerType").toString()));
      }
      if (jsonObj.get("offeredItems") != null && !jsonObj.get("offeredItems").isJsonNull()) {
        JsonArray jsonArrayofferedItems = jsonObj.getAsJsonArray("offeredItems");
        if (jsonArrayofferedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offeredItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offeredItems` to be an array in the JSON string but got `%s`", jsonObj.get("offeredItems").toString()));
          }

          // validate the optional field `offeredItems` (array)
          for (int i = 0; i < jsonArrayofferedItems.size(); i++) {
            OfferedItem.validateJsonElement(jsonArrayofferedItems.get(i));
          };
        }
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Offer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Offer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Offer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Offer.class));

       return (TypeAdapter<T>) new TypeAdapter<Offer>() {
           @Override
           public void write(JsonWriter out, Offer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Offer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Offer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Offer
   * @throws IOException if the JSON string is invalid with respect to Offer
   */
  public static Offer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Offer.class);
  }

  /**
   * Convert an instance of Offer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

