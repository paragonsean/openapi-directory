/*
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EligibleItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type defines a collection of listings that are eligible for an offer to a buyer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:06.236756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PagedEligibleItemCollection {
  public static final String SERIALIZED_NAME_ELIGIBLE_ITEMS = "eligibleItems";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_ITEMS)
  private List<EligibleItem> eligibleItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public PagedEligibleItemCollection() {
  }

  public PagedEligibleItemCollection eligibleItems(List<EligibleItem> eligibleItems) {
    this.eligibleItems = eligibleItems;
    return this;
  }

  public PagedEligibleItemCollection addEligibleItemsItem(EligibleItem eligibleItemsItem) {
    if (this.eligibleItems == null) {
      this.eligibleItems = new ArrayList<>();
    }
    this.eligibleItems.add(eligibleItemsItem);
    return this;
  }

  /**
   * A list of items that are eligible for a seller-initiated offer to a buyer. Each element in the list contains the listing ID of a listed item. These IDs represent the listings for which buyers have shown an interest.
   * @return eligibleItems
   */
  @javax.annotation.Nullable
  public List<EligibleItem> getEligibleItems() {
    return eligibleItems;
  }

  public void setEligibleItems(List<EligibleItem> eligibleItems) {
    this.eligibleItems = eligibleItems;
  }


  public PagedEligibleItemCollection href(String href) {
    this.href = href;
    return this;
  }

  /**
   * The URI of the current page of results from the result set.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public PagedEligibleItemCollection limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public PagedEligibleItemCollection next(String next) {
    this.next = next;
    return this;
  }

  /**
   * The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public PagedEligibleItemCollection offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public PagedEligibleItemCollection prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public PagedEligibleItemCollection total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of items retrieved in the result set. If no items match the search criteria, the server returns the HTTP status code 204 No Content.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagedEligibleItemCollection pagedEligibleItemCollection = (PagedEligibleItemCollection) o;
    return Objects.equals(this.eligibleItems, pagedEligibleItemCollection.eligibleItems) &&
        Objects.equals(this.href, pagedEligibleItemCollection.href) &&
        Objects.equals(this.limit, pagedEligibleItemCollection.limit) &&
        Objects.equals(this.next, pagedEligibleItemCollection.next) &&
        Objects.equals(this.offset, pagedEligibleItemCollection.offset) &&
        Objects.equals(this.prev, pagedEligibleItemCollection.prev) &&
        Objects.equals(this.total, pagedEligibleItemCollection.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eligibleItems, href, limit, next, offset, prev, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagedEligibleItemCollection {\n");
    sb.append("    eligibleItems: ").append(toIndentedString(eligibleItems)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eligibleItems");
    openapiFields.add("href");
    openapiFields.add("limit");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("prev");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PagedEligibleItemCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagedEligibleItemCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagedEligibleItemCollection is not found in the empty JSON string", PagedEligibleItemCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagedEligibleItemCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagedEligibleItemCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("eligibleItems") != null && !jsonObj.get("eligibleItems").isJsonNull()) {
        JsonArray jsonArrayeligibleItems = jsonObj.getAsJsonArray("eligibleItems");
        if (jsonArrayeligibleItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eligibleItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eligibleItems` to be an array in the JSON string but got `%s`", jsonObj.get("eligibleItems").toString()));
          }

          // validate the optional field `eligibleItems` (array)
          for (int i = 0; i < jsonArrayeligibleItems.size(); i++) {
            EligibleItem.validateJsonElement(jsonArrayeligibleItems.get(i));
          };
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagedEligibleItemCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagedEligibleItemCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagedEligibleItemCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagedEligibleItemCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<PagedEligibleItemCollection>() {
           @Override
           public void write(JsonWriter out, PagedEligibleItemCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagedEligibleItemCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PagedEligibleItemCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PagedEligibleItemCollection
   * @throws IOException if the JSON string is invalid with respect to PagedEligibleItemCollection
   */
  public static PagedEligibleItemCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagedEligibleItemCollection.class);
  }

  /**
   * Convert an instance of PagedEligibleItemCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

