/*
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OfferedItem;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type contains the fields needed to create an offer to a buyer that is initiated by the seller.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:06.236756-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOffersRequest {
  public static final String SERIALIZED_NAME_ALLOW_COUNTER_OFFER = "allowCounterOffer";
  @SerializedName(SERIALIZED_NAME_ALLOW_COUNTER_OFFER)
  private Boolean allowCounterOffer;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OFFER_DURATION = "offerDuration";
  @SerializedName(SERIALIZED_NAME_OFFER_DURATION)
  private TimeDuration offerDuration;

  public static final String SERIALIZED_NAME_OFFERED_ITEMS = "offeredItems";
  @SerializedName(SERIALIZED_NAME_OFFERED_ITEMS)
  private List<OfferedItem> offeredItems = new ArrayList<>();

  public CreateOffersRequest() {
  }

  public CreateOffersRequest allowCounterOffer(Boolean allowCounterOffer) {
    this.allowCounterOffer = allowCounterOffer;
    return this;
  }

  /**
   * If set to true, the buyer is allowed to make a counter-offer to the seller&#39;s offer. Note: Currently, you must set this field to false; counter-offers are not supported in this release. Default: false
   * @return allowCounterOffer
   */
  @javax.annotation.Nullable
  public Boolean getAllowCounterOffer() {
    return allowCounterOffer;
  }

  public void setAllowCounterOffer(Boolean allowCounterOffer) {
    this.allowCounterOffer = allowCounterOffer;
  }


  public CreateOffersRequest message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A seller-defined message related to the offer being made. This message is sent to the list of &amp;quot;interested&amp;quot; buyers. To increase the conversion rate of the offers a seller makes to buyers, eBay recommends you always add a customized message to your offers. Maximum length: 2,000 characters
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CreateOffersRequest offerDuration(TimeDuration offerDuration) {
    this.offerDuration = offerDuration;
    return this;
  }

  /**
   * Get offerDuration
   * @return offerDuration
   */
  @javax.annotation.Nullable
  public TimeDuration getOfferDuration() {
    return offerDuration;
  }

  public void setOfferDuration(TimeDuration offerDuration) {
    this.offerDuration = offerDuration;
  }


  public CreateOffersRequest offeredItems(List<OfferedItem> offeredItems) {
    this.offeredItems = offeredItems;
    return this;
  }

  public CreateOffersRequest addOfferedItemsItem(OfferedItem offeredItemsItem) {
    if (this.offeredItems == null) {
      this.offeredItems = new ArrayList<>();
    }
    this.offeredItems.add(offeredItemsItem);
    return this;
  }

  /**
   * An array of objects where each object contains the details of an offer and the ID of the listing on which the offer is being made. Note that the service does not currently support the creation of multiple offers with a single call to sendOfferToInterestedBuyer. With this, each request can target only one listing at a time and you must populate this array with a single element that contains the details of one offer.
   * @return offeredItems
   */
  @javax.annotation.Nullable
  public List<OfferedItem> getOfferedItems() {
    return offeredItems;
  }

  public void setOfferedItems(List<OfferedItem> offeredItems) {
    this.offeredItems = offeredItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOffersRequest createOffersRequest = (CreateOffersRequest) o;
    return Objects.equals(this.allowCounterOffer, createOffersRequest.allowCounterOffer) &&
        Objects.equals(this.message, createOffersRequest.message) &&
        Objects.equals(this.offerDuration, createOffersRequest.offerDuration) &&
        Objects.equals(this.offeredItems, createOffersRequest.offeredItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCounterOffer, message, offerDuration, offeredItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOffersRequest {\n");
    sb.append("    allowCounterOffer: ").append(toIndentedString(allowCounterOffer)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    offerDuration: ").append(toIndentedString(offerDuration)).append("\n");
    sb.append("    offeredItems: ").append(toIndentedString(offeredItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowCounterOffer");
    openapiFields.add("message");
    openapiFields.add("offerDuration");
    openapiFields.add("offeredItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOffersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOffersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOffersRequest is not found in the empty JSON string", CreateOffersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOffersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOffersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `offerDuration`
      if (jsonObj.get("offerDuration") != null && !jsonObj.get("offerDuration").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("offerDuration"));
      }
      if (jsonObj.get("offeredItems") != null && !jsonObj.get("offeredItems").isJsonNull()) {
        JsonArray jsonArrayofferedItems = jsonObj.getAsJsonArray("offeredItems");
        if (jsonArrayofferedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offeredItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offeredItems` to be an array in the JSON string but got `%s`", jsonObj.get("offeredItems").toString()));
          }

          // validate the optional field `offeredItems` (array)
          for (int i = 0; i < jsonArrayofferedItems.size(); i++) {
            OfferedItem.validateJsonElement(jsonArrayofferedItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOffersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOffersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOffersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOffersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOffersRequest>() {
           @Override
           public void write(JsonWriter out, CreateOffersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOffersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOffersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOffersRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOffersRequest
   */
  public static CreateOffersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOffersRequest.class);
  }

  /**
   * Convert an instance of CreateOffersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

