/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Amount from './model/Amount';
import CreateOffersRequest from './model/CreateOffersRequest';
import EligibleItem from './model/EligibleItem';
import Error from './model/Error';
import ErrorParameter from './model/ErrorParameter';
import Offer from './model/Offer';
import OfferedItem from './model/OfferedItem';
import PagedEligibleItemCollection from './model/PagedEligibleItemCollection';
import SendOfferToInterestedBuyersCollectionResponse from './model/SendOfferToInterestedBuyersCollectionResponse';
import TimeDuration from './model/TimeDuration';
import User from './model/User';
import OfferApi from './api/OfferApi';


/**
* The &lt;b&gt;Negotiations API&lt;/b&gt; gives sellers the ability to proactively send discount offers to buyers who have shown an \&quot;interest\&quot; in their listings.  &lt;br&gt;&lt;br&gt;By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  &lt;br&gt;&lt;br&gt;There are various ways for a buyer to show &lt;i&gt;interest &lt;/i&gt; in a listing. For example, if a buyer adds the listing to their &lt;b&gt;Watch&lt;/b&gt; list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  &lt;br&gt;&lt;br&gt;In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  &lt;br&gt;&lt;br&gt;For details about how seller offers work, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/offers-to-buyers.html\&quot; title&#x3D;\&quot;Selling Integration Guide\&quot;&gt;Sending offers to buyers&lt;/a&gt;..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var NegotiationApi = require('index'); // See note below*.
* var xxxSvc = new NegotiationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new NegotiationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new NegotiationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new NegotiationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Amount model constructor.
     * @property {module:model/Amount}
     */
    Amount,

    /**
     * The CreateOffersRequest model constructor.
     * @property {module:model/CreateOffersRequest}
     */
    CreateOffersRequest,

    /**
     * The EligibleItem model constructor.
     * @property {module:model/EligibleItem}
     */
    EligibleItem,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorParameter model constructor.
     * @property {module:model/ErrorParameter}
     */
    ErrorParameter,

    /**
     * The Offer model constructor.
     * @property {module:model/Offer}
     */
    Offer,

    /**
     * The OfferedItem model constructor.
     * @property {module:model/OfferedItem}
     */
    OfferedItem,

    /**
     * The PagedEligibleItemCollection model constructor.
     * @property {module:model/PagedEligibleItemCollection}
     */
    PagedEligibleItemCollection,

    /**
     * The SendOfferToInterestedBuyersCollectionResponse model constructor.
     * @property {module:model/SendOfferToInterestedBuyersCollectionResponse}
     */
    SendOfferToInterestedBuyersCollectionResponse,

    /**
     * The TimeDuration model constructor.
     * @property {module:model/TimeDuration}
     */
    TimeDuration,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
    * The OfferApi service constructor.
    * @property {module:api/OfferApi}
    */
    OfferApi
};
