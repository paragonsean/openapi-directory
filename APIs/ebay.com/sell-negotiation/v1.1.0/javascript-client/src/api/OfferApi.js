/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOffersRequest from '../model/CreateOffersRequest';
import PagedEligibleItemCollection from '../model/PagedEligibleItemCollection';
import SendOfferToInterestedBuyersCollectionResponse from '../model/SendOfferToInterestedBuyersCollectionResponse';

/**
* Offer service.
* @module api/OfferApi
* @version v1.1.0
*/
export default class OfferApi {

    /**
    * Constructs a new OfferApi. 
    * @alias module:api/OfferApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findEligibleItems operation.
     * @callback module:api/OfferApi~findEligibleItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedEligibleItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method evaluates a seller's current listings and returns the set of IDs that are eligible for a seller-initiated discount offer to a buyer. A listing ID is returned only when one or more buyers have shown an &quot;interest&quot; in the listing. If any buyers have shown interest in a listing, the seller can initiate a &quot;negotiation&quot; with them by calling sendOfferToInterestedBuyers, which sends all interested buyers a message that offers the listing at a discount. For details about how to create seller offers to buyers, see Sending offers to buyers.
     * @param {String} X_EBAY_C_MARKETPLACE_ID The eBay marketplace on which you want to search for eligible listings. For a complete list of supported marketplaces, see Negotiation API requirements and restrictions.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] This query parameter specifies the maximum number of items to return from the result set on a page in the paginated response. Minimum: 1 &nbsp; &nbsp;Maximum: 200 Default: 10
     * @param {String} [offset] This query parameter specifies the number of results to skip in the result set before returning the first result in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 results from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0
     * @param {module:api/OfferApi~findEligibleItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedEligibleItemCollection}
     */
    findEligibleItems(X_EBAY_C_MARKETPLACE_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'X_EBAY_C_MARKETPLACE_ID' is set
      if (X_EBAY_C_MARKETPLACE_ID === undefined || X_EBAY_C_MARKETPLACE_ID === null) {
        throw new Error("Missing the required parameter 'X_EBAY_C_MARKETPLACE_ID' when calling findEligibleItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'X-EBAY-C-MARKETPLACE-ID': X_EBAY_C_MARKETPLACE_ID
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedEligibleItemCollection;
      return this.apiClient.callApi(
        '/find_eligible_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendOfferToInterestedBuyers operation.
     * @callback module:api/OfferApi~sendOfferToInterestedBuyersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendOfferToInterestedBuyersCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method sends eligible buyers offers to purchase items in a listing at a discount. When a buyer has shown interest in a listing, they become &quot;eligible&quot; to receive a seller-initiated offer to purchase the item(s). Sellers use findEligibleItems to get the set of listings that have interested buyers. If a listing has interested buyers, sellers can use this method (sendOfferToInterestedBuyers) to send an offer to the buyers who are interested in the listing. The offer gives buyers the ability to purchase the associated listings at a discounted price. For details about how to create seller offers to buyers, see Sending offers to buyers.
     * @param {String} X_EBAY_C_MARKETPLACE_ID The eBay marketplace on which your listings with &quot;eligible&quot; buyers appear. For a complete list of supported marketplaces, see Negotiation API requirements and restrictions.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOffersRequest} [createOffersRequest] Send offer to eligible items request.
     * @param {module:api/OfferApi~sendOfferToInterestedBuyersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendOfferToInterestedBuyersCollectionResponse}
     */
    sendOfferToInterestedBuyers(X_EBAY_C_MARKETPLACE_ID, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOffersRequest'];
      // verify the required parameter 'X_EBAY_C_MARKETPLACE_ID' is set
      if (X_EBAY_C_MARKETPLACE_ID === undefined || X_EBAY_C_MARKETPLACE_ID === null) {
        throw new Error("Missing the required parameter 'X_EBAY_C_MARKETPLACE_ID' when calling sendOfferToInterestedBuyers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-EBAY-C-MARKETPLACE-ID': X_EBAY_C_MARKETPLACE_ID
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendOfferToInterestedBuyersCollectionResponse;
      return this.apiClient.callApi(
        '/send_offer_to_interested_buyers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
