/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The OfferedItem model module.
 * @module model/OfferedItem
 * @version v1.1.0
 */
class OfferedItem {
    /**
     * Constructs a new <code>OfferedItem</code>.
     * A complex type that defines the offer being made to an &amp;quot;interested&amp;quot; buyer.
     * @alias module:model/OfferedItem
     */
    constructor() { 
        
        OfferedItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OfferedItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferedItem} obj Optional instance to populate.
     * @return {module:model/OfferedItem} The populated <code>OfferedItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferedItem();

            if (data.hasOwnProperty('discountPercentage')) {
                obj['discountPercentage'] = ApiClient.convertToType(data['discountPercentage'], 'String');
            }
            if (data.hasOwnProperty('listingId')) {
                obj['listingId'] = ApiClient.convertToType(data['listingId'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Amount.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OfferedItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OfferedItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['discountPercentage'] && !(typeof data['discountPercentage'] === 'string' || data['discountPercentage'] instanceof String)) {
            throw new Error("Expected the field `discountPercentage` to be a primitive type in the JSON string but got " + data['discountPercentage']);
        }
        // ensure the json data is a string
        if (data['listingId'] && !(typeof data['listingId'] === 'string' || data['listingId'] instanceof String)) {
            throw new Error("Expected the field `listingId` to be a primitive type in the JSON string but got " + data['listingId']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Amount.validateJSON(data['price']);
        }

        return true;
    }


}



/**
 * This value denotes the percentage that the listing in the offer will be discounted from its original listed price. The seller can specify either the exact price of the discounted items with the price field or they can use this field to specify the percentage that the listing will be discounted, but not both. Minimum: 5 Required if you do not specify a price value.
 * @member {String} discountPercentage
 */
OfferedItem.prototype['discountPercentage'] = undefined;

/**
 * This value is a unique eBay-assigned ID that identifies the listing to which the offer pertains. A listingId value is generated by eBay when you list an item with the Trading API.
 * @member {String} listingId
 */
OfferedItem.prototype['listingId'] = undefined;

/**
 * @member {module:model/Amount} price
 */
OfferedItem.prototype['price'] = undefined;

/**
 * This integer value indicates the number of items in the eBay listing for which the offer is being made. The offer being made by the seller is an &quot;all or nothing&quot; offer, meaning the buyer must purchase the indicated quantity of items in order to receive the discount on the transaction. Default: 1
 * @member {Number} quantity
 */
OfferedItem.prototype['quantity'] = undefined;






export default OfferedItem;

