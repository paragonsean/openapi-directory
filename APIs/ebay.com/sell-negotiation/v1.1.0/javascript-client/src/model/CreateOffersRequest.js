/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferedItem from './OfferedItem';
import TimeDuration from './TimeDuration';

/**
 * The CreateOffersRequest model module.
 * @module model/CreateOffersRequest
 * @version v1.1.0
 */
class CreateOffersRequest {
    /**
     * Constructs a new <code>CreateOffersRequest</code>.
     * This complex type contains the fields needed to create an offer to a buyer that is initiated by the seller.
     * @alias module:model/CreateOffersRequest
     */
    constructor() { 
        
        CreateOffersRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateOffersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateOffersRequest} obj Optional instance to populate.
     * @return {module:model/CreateOffersRequest} The populated <code>CreateOffersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateOffersRequest();

            if (data.hasOwnProperty('allowCounterOffer')) {
                obj['allowCounterOffer'] = ApiClient.convertToType(data['allowCounterOffer'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('offerDuration')) {
                obj['offerDuration'] = TimeDuration.constructFromObject(data['offerDuration']);
            }
            if (data.hasOwnProperty('offeredItems')) {
                obj['offeredItems'] = ApiClient.convertToType(data['offeredItems'], [OfferedItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateOffersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateOffersRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `offerDuration`
        if (data['offerDuration']) { // data not null
          TimeDuration.validateJSON(data['offerDuration']);
        }
        if (data['offeredItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offeredItems'])) {
                throw new Error("Expected the field `offeredItems` to be an array in the JSON data but got " + data['offeredItems']);
            }
            // validate the optional field `offeredItems` (array)
            for (const item of data['offeredItems']) {
                OfferedItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If set to true, the buyer is allowed to make a counter-offer to the seller's offer. Note: Currently, you must set this field to false; counter-offers are not supported in this release. Default: false
 * @member {Boolean} allowCounterOffer
 */
CreateOffersRequest.prototype['allowCounterOffer'] = undefined;

/**
 * A seller-defined message related to the offer being made. This message is sent to the list of &quot;interested&quot; buyers. To increase the conversion rate of the offers a seller makes to buyers, eBay recommends you always add a customized message to your offers. Maximum length: 2,000 characters
 * @member {String} message
 */
CreateOffersRequest.prototype['message'] = undefined;

/**
 * @member {module:model/TimeDuration} offerDuration
 */
CreateOffersRequest.prototype['offerDuration'] = undefined;

/**
 * An array of objects where each object contains the details of an offer and the ID of the listing on which the offer is being made. Note that the service does not currently support the creation of multiple offers with a single call to sendOfferToInterestedBuyer. With this, each request can target only one listing at a time and you must populate this array with a single element that contains the details of one offer.
 * @member {Array.<module:model/OfferedItem>} offeredItems
 */
CreateOffersRequest.prototype['offeredItems'] = undefined;






export default CreateOffersRequest;

