/**
 * Negotiation API
 * The <b>Negotiations API</b> gives sellers the ability to proactively send discount offers to buyers who have shown an \"interest\" in their listings.  <br><br>By sending buyers discount offers on listings where they have shown an interest, sellers can increase the velocity of their sales.  <br><br>There are various ways for a buyer to show <i>interest </i> in a listing. For example, if a buyer adds the listing to their <b>Watch</b> list, or if they add the listing to their shopping cart and later abandon the cart, they are deemed to have shown an interest in the listing.  <br><br>In the offers that sellers send, they can discount their listings by either a percentage off the listing price, or they can set a new discounted price that is lower than the original listing price.  <br><br>For details about how seller offers work, see <a href=\"/api-docs/sell/static/marketing/offers-to-buyers.html\" title=\"Selling Integration Guide\">Sending offers to buyers</a>.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EligibleItem from './EligibleItem';

/**
 * The PagedEligibleItemCollection model module.
 * @module model/PagedEligibleItemCollection
 * @version v1.1.0
 */
class PagedEligibleItemCollection {
    /**
     * Constructs a new <code>PagedEligibleItemCollection</code>.
     * This complex type defines a collection of listings that are eligible for an offer to a buyer.
     * @alias module:model/PagedEligibleItemCollection
     */
    constructor() { 
        
        PagedEligibleItemCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PagedEligibleItemCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PagedEligibleItemCollection} obj Optional instance to populate.
     * @return {module:model/PagedEligibleItemCollection} The populated <code>PagedEligibleItemCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PagedEligibleItemCollection();

            if (data.hasOwnProperty('eligibleItems')) {
                obj['eligibleItems'] = ApiClient.convertToType(data['eligibleItems'], [EligibleItem]);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('prev')) {
                obj['prev'] = ApiClient.convertToType(data['prev'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PagedEligibleItemCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PagedEligibleItemCollection</code>.
     */
    static validateJSON(data) {
        if (data['eligibleItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eligibleItems'])) {
                throw new Error("Expected the field `eligibleItems` to be an array in the JSON data but got " + data['eligibleItems']);
            }
            // validate the optional field `eligibleItems` (array)
            for (const item of data['eligibleItems']) {
                EligibleItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['prev'] && !(typeof data['prev'] === 'string' || data['prev'] instanceof String)) {
            throw new Error("Expected the field `prev` to be a primitive type in the JSON string but got " + data['prev']);
        }

        return true;
    }


}



/**
 * A list of items that are eligible for a seller-initiated offer to a buyer. Each element in the list contains the listing ID of a listed item. These IDs represent the listings for which buyers have shown an interest.
 * @member {Array.<module:model/EligibleItem>} eligibleItems
 */
PagedEligibleItemCollection.prototype['eligibleItems'] = undefined;

/**
 * The URI of the current page of results from the result set.
 * @member {String} href
 */
PagedEligibleItemCollection.prototype['href'] = undefined;

/**
 * The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.
 * @member {Number} limit
 */
PagedEligibleItemCollection.prototype['limit'] = undefined;

/**
 * The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048
 * @member {String} next
 */
PagedEligibleItemCollection.prototype['next'] = undefined;

/**
 * The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.
 * @member {Number} offset
 */
PagedEligibleItemCollection.prototype['offset'] = undefined;

/**
 * The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048
 * @member {String} prev
 */
PagedEligibleItemCollection.prototype['prev'] = undefined;

/**
 * The total number of items retrieved in the result set. If no items match the search criteria, the server returns the HTTP status code 204 No Content.
 * @member {Number} total
 */
PagedEligibleItemCollection.prototype['total'] = undefined;






export default PagedEligibleItemCollection;

