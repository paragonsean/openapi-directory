# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eligible_item import EligibleItem
from openapi_server import util


class PagedEligibleItemCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eligible_items: List[EligibleItem]=None, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """PagedEligibleItemCollection - a model defined in OpenAPI

        :param eligible_items: The eligible_items of this PagedEligibleItemCollection.
        :param href: The href of this PagedEligibleItemCollection.
        :param limit: The limit of this PagedEligibleItemCollection.
        :param next: The next of this PagedEligibleItemCollection.
        :param offset: The offset of this PagedEligibleItemCollection.
        :param prev: The prev of this PagedEligibleItemCollection.
        :param total: The total of this PagedEligibleItemCollection.
        """
        self.openapi_types = {
            'eligible_items': List[EligibleItem],
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'eligible_items': 'eligibleItems',
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._eligible_items = eligible_items
        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagedEligibleItemCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PagedEligibleItemCollection of this PagedEligibleItemCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eligible_items(self):
        """Gets the eligible_items of this PagedEligibleItemCollection.

        A list of items that are eligible for a seller-initiated offer to a buyer. Each element in the list contains the listing ID of a listed item. These IDs represent the listings for which buyers have shown an interest.

        :return: The eligible_items of this PagedEligibleItemCollection.
        :rtype: List[EligibleItem]
        """
        return self._eligible_items

    @eligible_items.setter
    def eligible_items(self, eligible_items):
        """Sets the eligible_items of this PagedEligibleItemCollection.

        A list of items that are eligible for a seller-initiated offer to a buyer. Each element in the list contains the listing ID of a listed item. These IDs represent the listings for which buyers have shown an interest.

        :param eligible_items: The eligible_items of this PagedEligibleItemCollection.
        :type eligible_items: List[EligibleItem]
        """

        self._eligible_items = eligible_items

    @property
    def href(self):
        """Gets the href of this PagedEligibleItemCollection.

        The URI of the current page of results from the result set.

        :return: The href of this PagedEligibleItemCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PagedEligibleItemCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this PagedEligibleItemCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PagedEligibleItemCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.

        :return: The limit of this PagedEligibleItemCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PagedEligibleItemCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.

        :param limit: The limit of this PagedEligibleItemCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this PagedEligibleItemCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048

        :return: The next of this PagedEligibleItemCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PagedEligibleItemCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048

        :param next: The next of this PagedEligibleItemCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PagedEligibleItemCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.

        :return: The offset of this PagedEligibleItemCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PagedEligibleItemCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.

        :param offset: The offset of this PagedEligibleItemCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this PagedEligibleItemCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048

        :return: The prev of this PagedEligibleItemCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PagedEligibleItemCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048

        :param prev: The prev of this PagedEligibleItemCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this PagedEligibleItemCollection.

        The total number of items retrieved in the result set. If no items match the search criteria, the server returns the HTTP status code 204 No Content.

        :return: The total of this PagedEligibleItemCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagedEligibleItemCollection.

        The total number of items retrieved in the result set. If no items match the search criteria, the server returns the HTTP status code 204 No Content.

        :param total: The total of this PagedEligibleItemCollection.
        :type total: int
        """

        self._total = total
