# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offered_item import OfferedItem
from openapi_server.models.time_duration import TimeDuration
from openapi_server.models.user import User
from openapi_server import util


class Offer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_counter_offer: bool=None, buyer: User=None, creation_date: str=None, initiated_by: str=None, last_modified_date: str=None, message: str=None, offer_duration: TimeDuration=None, offer_id: str=None, offer_status: str=None, offer_type: str=None, offered_items: List[OfferedItem]=None, revision: str=None):
        """Offer - a model defined in OpenAPI

        :param allow_counter_offer: The allow_counter_offer of this Offer.
        :param buyer: The buyer of this Offer.
        :param creation_date: The creation_date of this Offer.
        :param initiated_by: The initiated_by of this Offer.
        :param last_modified_date: The last_modified_date of this Offer.
        :param message: The message of this Offer.
        :param offer_duration: The offer_duration of this Offer.
        :param offer_id: The offer_id of this Offer.
        :param offer_status: The offer_status of this Offer.
        :param offer_type: The offer_type of this Offer.
        :param offered_items: The offered_items of this Offer.
        :param revision: The revision of this Offer.
        """
        self.openapi_types = {
            'allow_counter_offer': bool,
            'buyer': User,
            'creation_date': str,
            'initiated_by': str,
            'last_modified_date': str,
            'message': str,
            'offer_duration': TimeDuration,
            'offer_id': str,
            'offer_status': str,
            'offer_type': str,
            'offered_items': List[OfferedItem],
            'revision': str
        }

        self.attribute_map = {
            'allow_counter_offer': 'allowCounterOffer',
            'buyer': 'buyer',
            'creation_date': 'creationDate',
            'initiated_by': 'initiatedBy',
            'last_modified_date': 'lastModifiedDate',
            'message': 'message',
            'offer_duration': 'offerDuration',
            'offer_id': 'offerId',
            'offer_status': 'offerStatus',
            'offer_type': 'offerType',
            'offered_items': 'offeredItems',
            'revision': 'revision'
        }

        self._allow_counter_offer = allow_counter_offer
        self._buyer = buyer
        self._creation_date = creation_date
        self._initiated_by = initiated_by
        self._last_modified_date = last_modified_date
        self._message = message
        self._offer_duration = offer_duration
        self._offer_id = offer_id
        self._offer_status = offer_status
        self._offer_type = offer_type
        self._offered_items = offered_items
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offer of this Offer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_counter_offer(self):
        """Gets the allow_counter_offer of this Offer.

        If set to true, the buyer is allowed to make a counter-offer to the seller's offer.

        :return: The allow_counter_offer of this Offer.
        :rtype: bool
        """
        return self._allow_counter_offer

    @allow_counter_offer.setter
    def allow_counter_offer(self, allow_counter_offer):
        """Sets the allow_counter_offer of this Offer.

        If set to true, the buyer is allowed to make a counter-offer to the seller's offer.

        :param allow_counter_offer: The allow_counter_offer of this Offer.
        :type allow_counter_offer: bool
        """

        self._allow_counter_offer = allow_counter_offer

    @property
    def buyer(self):
        """Gets the buyer of this Offer.


        :return: The buyer of this Offer.
        :rtype: User
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Offer.


        :param buyer: The buyer of this Offer.
        :type buyer: User
        """

        self._buyer = buyer

    @property
    def creation_date(self):
        """Gets the creation_date of this Offer.

        The date and time when the seller's offer was created. The returned timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z

        :return: The creation_date of this Offer.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Offer.

        The date and time when the seller's offer was created. The returned timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z

        :param creation_date: The creation_date of this Offer.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def initiated_by(self):
        """Gets the initiated_by of this Offer.

        The eBay UserName of the user (seller) who initiated the offer.

        :return: The initiated_by of this Offer.
        :rtype: str
        """
        return self._initiated_by

    @initiated_by.setter
    def initiated_by(self, initiated_by):
        """Sets the initiated_by of this Offer.

        The eBay UserName of the user (seller) who initiated the offer.

        :param initiated_by: The initiated_by of this Offer.
        :type initiated_by: str
        """

        self._initiated_by = initiated_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Offer.

        The date and time when the offer was last modified. The returned timestamp is formatted as an ISO 8601 string.

        :return: The last_modified_date of this Offer.
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Offer.

        The date and time when the offer was last modified. The returned timestamp is formatted as an ISO 8601 string.

        :param last_modified_date: The last_modified_date of this Offer.
        :type last_modified_date: str
        """

        self._last_modified_date = last_modified_date

    @property
    def message(self):
        """Gets the message of this Offer.

        A seller-defined message related to the offer being made. This message is sent to the list of &quot;interested&quot; buyers along with the offer message from eBay.

        :return: The message of this Offer.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Offer.

        A seller-defined message related to the offer being made. This message is sent to the list of &quot;interested&quot; buyers along with the offer message from eBay.

        :param message: The message of this Offer.
        :type message: str
        """

        self._message = message

    @property
    def offer_duration(self):
        """Gets the offer_duration of this Offer.


        :return: The offer_duration of this Offer.
        :rtype: TimeDuration
        """
        return self._offer_duration

    @offer_duration.setter
    def offer_duration(self, offer_duration):
        """Sets the offer_duration of this Offer.


        :param offer_duration: The offer_duration of this Offer.
        :type offer_duration: TimeDuration
        """

        self._offer_duration = offer_duration

    @property
    def offer_id(self):
        """Gets the offer_id of this Offer.

        A unique eBay-assigned identifier for the offer.

        :return: The offer_id of this Offer.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Offer.

        A unique eBay-assigned identifier for the offer.

        :param offer_id: The offer_id of this Offer.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def offer_status(self):
        """Gets the offer_status of this Offer.

        The current state, or status, of an offer. Status states include PENDING, COUNTERED, ACCEPTED, and DECLINED. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferStatusEnum'>eBay API documentation</a>

        :return: The offer_status of this Offer.
        :rtype: str
        """
        return self._offer_status

    @offer_status.setter
    def offer_status(self, offer_status):
        """Sets the offer_status of this Offer.

        The current state, or status, of an offer. Status states include PENDING, COUNTERED, ACCEPTED, and DECLINED. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferStatusEnum'>eBay API documentation</a>

        :param offer_status: The offer_status of this Offer.
        :type offer_status: str
        """

        self._offer_status = offer_status

    @property
    def offer_type(self):
        """Gets the offer_type of this Offer.

        The type of offer being made. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferTypeEnum'>eBay API documentation</a>

        :return: The offer_type of this Offer.
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this Offer.

        The type of offer being made. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/negotiation/types/api:OfferTypeEnum'>eBay API documentation</a>

        :param offer_type: The offer_type of this Offer.
        :type offer_type: str
        """

        self._offer_type = offer_type

    @property
    def offered_items(self):
        """Gets the offered_items of this Offer.

        The list of items associated with the offer. Currently, the offer list is restricted to a single offer.

        :return: The offered_items of this Offer.
        :rtype: List[OfferedItem]
        """
        return self._offered_items

    @offered_items.setter
    def offered_items(self, offered_items):
        """Sets the offered_items of this Offer.

        The list of items associated with the offer. Currently, the offer list is restricted to a single offer.

        :param offered_items: The offered_items of this Offer.
        :type offered_items: List[OfferedItem]
        """

        self._offered_items = offered_items

    @property
    def revision(self):
        """Gets the revision of this Offer.

        A unique, eBay-assigned ID for the revision of the offer.

        :return: The revision of this Offer.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Offer.

        A unique, eBay-assigned ID for the revision of the offer.

        :param revision: The revision of this Offer.
        :type revision: str
        """

        self._revision = revision
