# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offer import Offer
from openapi_server import util


class SendOfferToInterestedBuyersCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offers: List[Offer]=None):
        """SendOfferToInterestedBuyersCollectionResponse - a model defined in OpenAPI

        :param offers: The offers of this SendOfferToInterestedBuyersCollectionResponse.
        """
        self.openapi_types = {
            'offers': List[Offer]
        }

        self.attribute_map = {
            'offers': 'offers'
        }

        self._offers = offers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendOfferToInterestedBuyersCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendOfferToInterestedBuyersCollectionResponse of this SendOfferToInterestedBuyersCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offers(self):
        """Gets the offers of this SendOfferToInterestedBuyersCollectionResponse.

        The offers container returns a list of the offers sent to buyers who have shown an interest in listings included in the offer.

        :return: The offers of this SendOfferToInterestedBuyersCollectionResponse.
        :rtype: List[Offer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this SendOfferToInterestedBuyersCollectionResponse.

        The offers container returns a list of the offers sent to buyers who have shown an interest in listings included in the offer.

        :param offers: The offers of this SendOfferToInterestedBuyersCollectionResponse.
        :type offers: List[Offer]
        """

        self._offers = offers
