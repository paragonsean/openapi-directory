# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class OfferedItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_percentage: str=None, listing_id: str=None, price: Amount=None, quantity: int=None):
        """OfferedItem - a model defined in OpenAPI

        :param discount_percentage: The discount_percentage of this OfferedItem.
        :param listing_id: The listing_id of this OfferedItem.
        :param price: The price of this OfferedItem.
        :param quantity: The quantity of this OfferedItem.
        """
        self.openapi_types = {
            'discount_percentage': str,
            'listing_id': str,
            'price': Amount,
            'quantity': int
        }

        self.attribute_map = {
            'discount_percentage': 'discountPercentage',
            'listing_id': 'listingId',
            'price': 'price',
            'quantity': 'quantity'
        }

        self._discount_percentage = discount_percentage
        self._listing_id = listing_id
        self._price = price
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferedItem of this OfferedItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this OfferedItem.

        This value denotes the percentage that the listing in the offer will be discounted from its original listed price. The seller can specify either the exact price of the discounted items with the price field or they can use this field to specify the percentage that the listing will be discounted, but not both. Minimum: 5 Required if you do not specify a price value.

        :return: The discount_percentage of this OfferedItem.
        :rtype: str
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this OfferedItem.

        This value denotes the percentage that the listing in the offer will be discounted from its original listed price. The seller can specify either the exact price of the discounted items with the price field or they can use this field to specify the percentage that the listing will be discounted, but not both. Minimum: 5 Required if you do not specify a price value.

        :param discount_percentage: The discount_percentage of this OfferedItem.
        :type discount_percentage: str
        """

        self._discount_percentage = discount_percentage

    @property
    def listing_id(self):
        """Gets the listing_id of this OfferedItem.

        This value is a unique eBay-assigned ID that identifies the listing to which the offer pertains. A listingId value is generated by eBay when you list an item with the Trading API.

        :return: The listing_id of this OfferedItem.
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this OfferedItem.

        This value is a unique eBay-assigned ID that identifies the listing to which the offer pertains. A listingId value is generated by eBay when you list an item with the Trading API.

        :param listing_id: The listing_id of this OfferedItem.
        :type listing_id: str
        """

        self._listing_id = listing_id

    @property
    def price(self):
        """Gets the price of this OfferedItem.


        :return: The price of this OfferedItem.
        :rtype: Amount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OfferedItem.


        :param price: The price of this OfferedItem.
        :type price: Amount
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this OfferedItem.

        This integer value indicates the number of items in the eBay listing for which the offer is being made. The offer being made by the seller is an &quot;all or nothing&quot; offer, meaning the buyer must purchase the indicated quantity of items in order to receive the discount on the transaction. Default: 1

        :return: The quantity of this OfferedItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OfferedItem.

        This integer value indicates the number of items in the eBay listing for which the offer is being made. The offer being made by the seller is an &quot;all or nothing&quot; offer, meaning the buyer must purchase the indicated quantity of items in order to receive the discount on the transaction. Default: 1

        :param quantity: The quantity of this OfferedItem.
        :type quantity: int
        """

        self._quantity = quantity
