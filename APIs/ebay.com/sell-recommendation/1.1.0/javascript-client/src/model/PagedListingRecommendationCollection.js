/**
 * Recommendation API
 * The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListingRecommendation from './ListingRecommendation';

/**
 * The PagedListingRecommendationCollection model module.
 * @module model/PagedListingRecommendationCollection
 * @version 1.1.0
 */
class PagedListingRecommendationCollection {
    /**
     * Constructs a new <code>PagedListingRecommendationCollection</code>.
     * The high-level object used to return a set of Promoted Listings ad recommendations.
     * @alias module:model/PagedListingRecommendationCollection
     */
    constructor() { 
        
        PagedListingRecommendationCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PagedListingRecommendationCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PagedListingRecommendationCollection} obj Optional instance to populate.
     * @return {module:model/PagedListingRecommendationCollection} The populated <code>PagedListingRecommendationCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PagedListingRecommendationCollection();

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('listingRecommendations')) {
                obj['listingRecommendations'] = ApiClient.convertToType(data['listingRecommendations'], [ListingRecommendation]);
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('prev')) {
                obj['prev'] = ApiClient.convertToType(data['prev'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PagedListingRecommendationCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PagedListingRecommendationCollection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        if (data['listingRecommendations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listingRecommendations'])) {
                throw new Error("Expected the field `listingRecommendations` to be an array in the JSON data but got " + data['listingRecommendations']);
            }
            // validate the optional field `listingRecommendations` (array)
            for (const item of data['listingRecommendations']) {
                ListingRecommendation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['prev'] && !(typeof data['prev'] === 'string' || data['prev'] instanceof String)) {
            throw new Error("Expected the field `prev` to be a primitive type in the JSON string but got " + data['prev']);
        }

        return true;
    }


}



/**
 * The URI of the current page of results from the result set.
 * @member {String} href
 */
PagedListingRecommendationCollection.prototype['href'] = undefined;

/**
 * The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.
 * @member {Number} limit
 */
PagedListingRecommendationCollection.prototype['limit'] = undefined;

/**
 * Returns a list of listingRecommendations, where each element in the list offers recommendations for the associated listingId. Which elements are returned depend on how you structure the request. For example, if you request recommendations for all of a sellers listings (by leaving the request payload empty), ad recommendations are returned only for those listings where promoteWithAd is set to RECOMMENDED.
 * @member {Array.<module:model/ListingRecommendation>} listingRecommendations
 */
PagedListingRecommendationCollection.prototype['listingRecommendations'] = undefined;

/**
 * The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048
 * @member {String} next
 */
PagedListingRecommendationCollection.prototype['next'] = undefined;

/**
 * The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.
 * @member {Number} offset
 */
PagedListingRecommendationCollection.prototype['offset'] = undefined;

/**
 * The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048
 * @member {String} prev
 */
PagedListingRecommendationCollection.prototype['prev'] = undefined;

/**
 * The total number of items retrieved in the result set. If no items are found, this field is returned with a value of 0.
 * @member {Number} total
 */
PagedListingRecommendationCollection.prototype['total'] = undefined;






export default PagedListingRecommendationCollection;

