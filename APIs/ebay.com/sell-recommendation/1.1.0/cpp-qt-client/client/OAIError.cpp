/**
 * Recommendation API
 * The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_input_ref_ids_isSet = false;
    m_input_ref_ids_isValid = false;

    m_long_message_isSet = false;
    m_long_message_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_output_ref_ids_isSet = false;
    m_output_ref_ids_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("errorId")]);
    m_error_id_isSet = !json[QString("errorId")].isNull() && m_error_id_isValid;

    m_input_ref_ids_isValid = ::OpenAPI::fromJsonValue(m_input_ref_ids, json[QString("inputRefIds")]);
    m_input_ref_ids_isSet = !json[QString("inputRefIds")].isNull() && m_input_ref_ids_isValid;

    m_long_message_isValid = ::OpenAPI::fromJsonValue(m_long_message, json[QString("longMessage")]);
    m_long_message_isSet = !json[QString("longMessage")].isNull() && m_long_message_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_output_ref_ids_isValid = ::OpenAPI::fromJsonValue(m_output_ref_ids, json[QString("outputRefIds")]);
    m_output_ref_ids_isSet = !json[QString("outputRefIds")].isNull() && m_output_ref_ids_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("subdomain")]);
    m_subdomain_isSet = !json[QString("subdomain")].isNull() && m_subdomain_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_error_id_isSet) {
        obj.insert(QString("errorId"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_input_ref_ids.size() > 0) {
        obj.insert(QString("inputRefIds"), ::OpenAPI::toJsonValue(m_input_ref_ids));
    }
    if (m_long_message_isSet) {
        obj.insert(QString("longMessage"), ::OpenAPI::toJsonValue(m_long_message));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_output_ref_ids.size() > 0) {
        obj.insert(QString("outputRefIds"), ::OpenAPI::toJsonValue(m_output_ref_ids));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    return obj;
}

QString OAIError::getCategory() const {
    return m_category;
}
void OAIError::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIError::is_category_Set() const{
    return m_category_isSet;
}

bool OAIError::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIError::getDomain() const {
    return m_domain;
}
void OAIError::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIError::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIError::is_domain_Valid() const{
    return m_domain_isValid;
}

qint32 OAIError::getErrorId() const {
    return m_error_id;
}
void OAIError::setErrorId(const qint32 &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAIError::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAIError::is_error_id_Valid() const{
    return m_error_id_isValid;
}

QList<QString> OAIError::getInputRefIds() const {
    return m_input_ref_ids;
}
void OAIError::setInputRefIds(const QList<QString> &input_ref_ids) {
    m_input_ref_ids = input_ref_ids;
    m_input_ref_ids_isSet = true;
}

bool OAIError::is_input_ref_ids_Set() const{
    return m_input_ref_ids_isSet;
}

bool OAIError::is_input_ref_ids_Valid() const{
    return m_input_ref_ids_isValid;
}

QString OAIError::getLongMessage() const {
    return m_long_message;
}
void OAIError::setLongMessage(const QString &long_message) {
    m_long_message = long_message;
    m_long_message_isSet = true;
}

bool OAIError::is_long_message_Set() const{
    return m_long_message_isSet;
}

bool OAIError::is_long_message_Valid() const{
    return m_long_message_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIError::getOutputRefIds() const {
    return m_output_ref_ids;
}
void OAIError::setOutputRefIds(const QList<QString> &output_ref_ids) {
    m_output_ref_ids = output_ref_ids;
    m_output_ref_ids_isSet = true;
}

bool OAIError::is_output_ref_ids_Set() const{
    return m_output_ref_ids_isSet;
}

bool OAIError::is_output_ref_ids_Valid() const{
    return m_output_ref_ids_isValid;
}

QList<OAIErrorParameter> OAIError::getParameters() const {
    return m_parameters;
}
void OAIError::setParameters(const QList<OAIErrorParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIError::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIError::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIError::getSubdomain() const {
    return m_subdomain;
}
void OAIError::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAIError::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAIError::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_ref_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_ref_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
