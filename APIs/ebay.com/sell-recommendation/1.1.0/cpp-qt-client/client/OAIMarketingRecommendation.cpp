/**
 * Recommendation API
 * The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketingRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketingRecommendation::OAIMarketingRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketingRecommendation::OAIMarketingRecommendation() {
    this->initializeModel();
}

OAIMarketingRecommendation::~OAIMarketingRecommendation() {}

void OAIMarketingRecommendation::initializeModel() {

    m_ad_isSet = false;
    m_ad_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIMarketingRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketingRecommendation::fromJsonObject(QJsonObject json) {

    m_ad_isValid = ::OpenAPI::fromJsonValue(m_ad, json[QString("ad")]);
    m_ad_isSet = !json[QString("ad")].isNull() && m_ad_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIMarketingRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketingRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_ad.isSet()) {
        obj.insert(QString("ad"), ::OpenAPI::toJsonValue(m_ad));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIAd OAIMarketingRecommendation::getAd() const {
    return m_ad;
}
void OAIMarketingRecommendation::setAd(const OAIAd &ad) {
    m_ad = ad;
    m_ad_isSet = true;
}

bool OAIMarketingRecommendation::is_ad_Set() const{
    return m_ad_isSet;
}

bool OAIMarketingRecommendation::is_ad_Valid() const{
    return m_ad_isValid;
}

QString OAIMarketingRecommendation::getMessage() const {
    return m_message;
}
void OAIMarketingRecommendation::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMarketingRecommendation::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMarketingRecommendation::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIMarketingRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketingRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
