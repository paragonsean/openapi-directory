/**
 * Recommendation API
 * The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingRecommendation::OAIListingRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingRecommendation::OAIListingRecommendation() {
    this->initializeModel();
}

OAIListingRecommendation::~OAIListingRecommendation() {}

void OAIListingRecommendation::initializeModel() {

    m_listing_id_isSet = false;
    m_listing_id_isValid = false;

    m_marketing_isSet = false;
    m_marketing_isValid = false;
}

void OAIListingRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingRecommendation::fromJsonObject(QJsonObject json) {

    m_listing_id_isValid = ::OpenAPI::fromJsonValue(m_listing_id, json[QString("listingId")]);
    m_listing_id_isSet = !json[QString("listingId")].isNull() && m_listing_id_isValid;

    m_marketing_isValid = ::OpenAPI::fromJsonValue(m_marketing, json[QString("marketing")]);
    m_marketing_isSet = !json[QString("marketing")].isNull() && m_marketing_isValid;
}

QString OAIListingRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_listing_id_isSet) {
        obj.insert(QString("listingId"), ::OpenAPI::toJsonValue(m_listing_id));
    }
    if (m_marketing.isSet()) {
        obj.insert(QString("marketing"), ::OpenAPI::toJsonValue(m_marketing));
    }
    return obj;
}

QString OAIListingRecommendation::getListingId() const {
    return m_listing_id;
}
void OAIListingRecommendation::setListingId(const QString &listing_id) {
    m_listing_id = listing_id;
    m_listing_id_isSet = true;
}

bool OAIListingRecommendation::is_listing_id_Set() const{
    return m_listing_id_isSet;
}

bool OAIListingRecommendation::is_listing_id_Valid() const{
    return m_listing_id_isValid;
}

OAIMarketingRecommendation OAIListingRecommendation::getMarketing() const {
    return m_marketing;
}
void OAIListingRecommendation::setMarketing(const OAIMarketingRecommendation &marketing) {
    m_marketing = marketing;
    m_marketing_isSet = true;
}

bool OAIListingRecommendation::is_marketing_Set() const{
    return m_marketing_isSet;
}

bool OAIListingRecommendation::is_marketing_Valid() const{
    return m_marketing_isValid;
}

bool OAIListingRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_listing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
