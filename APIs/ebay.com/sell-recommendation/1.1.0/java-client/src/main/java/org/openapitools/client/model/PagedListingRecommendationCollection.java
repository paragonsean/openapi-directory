/*
 * Recommendation API
 * The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListingRecommendation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The high-level object used to return a set of Promoted Listings ad recommendations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.926966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PagedListingRecommendationCollection {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_LISTING_RECOMMENDATIONS = "listingRecommendations";
  @SerializedName(SERIALIZED_NAME_LISTING_RECOMMENDATIONS)
  private List<ListingRecommendation> listingRecommendations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public PagedListingRecommendationCollection() {
  }

  public PagedListingRecommendationCollection href(String href) {
    this.href = href;
    return this;
  }

  /**
   * The URI of the current page of results from the result set.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public PagedListingRecommendationCollection limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public PagedListingRecommendationCollection listingRecommendations(List<ListingRecommendation> listingRecommendations) {
    this.listingRecommendations = listingRecommendations;
    return this;
  }

  public PagedListingRecommendationCollection addListingRecommendationsItem(ListingRecommendation listingRecommendationsItem) {
    if (this.listingRecommendations == null) {
      this.listingRecommendations = new ArrayList<>();
    }
    this.listingRecommendations.add(listingRecommendationsItem);
    return this;
  }

  /**
   * Returns a list of listingRecommendations, where each element in the list offers recommendations for the associated listingId. Which elements are returned depend on how you structure the request. For example, if you request recommendations for all of a sellers listings (by leaving the request payload empty), ad recommendations are returned only for those listings where promoteWithAd is set to RECOMMENDED.
   * @return listingRecommendations
   */
  @javax.annotation.Nullable
  public List<ListingRecommendation> getListingRecommendations() {
    return listingRecommendations;
  }

  public void setListingRecommendations(List<ListingRecommendation> listingRecommendations) {
    this.listingRecommendations = listingRecommendations;
  }


  public PagedListingRecommendationCollection next(String next) {
    this.next = next;
    return this;
  }

  /**
   * The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public PagedListingRecommendationCollection offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public PagedListingRecommendationCollection prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public PagedListingRecommendationCollection total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of items retrieved in the result set. If no items are found, this field is returned with a value of 0.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagedListingRecommendationCollection pagedListingRecommendationCollection = (PagedListingRecommendationCollection) o;
    return Objects.equals(this.href, pagedListingRecommendationCollection.href) &&
        Objects.equals(this.limit, pagedListingRecommendationCollection.limit) &&
        Objects.equals(this.listingRecommendations, pagedListingRecommendationCollection.listingRecommendations) &&
        Objects.equals(this.next, pagedListingRecommendationCollection.next) &&
        Objects.equals(this.offset, pagedListingRecommendationCollection.offset) &&
        Objects.equals(this.prev, pagedListingRecommendationCollection.prev) &&
        Objects.equals(this.total, pagedListingRecommendationCollection.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, limit, listingRecommendations, next, offset, prev, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagedListingRecommendationCollection {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    listingRecommendations: ").append(toIndentedString(listingRecommendations)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("limit");
    openapiFields.add("listingRecommendations");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("prev");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PagedListingRecommendationCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagedListingRecommendationCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagedListingRecommendationCollection is not found in the empty JSON string", PagedListingRecommendationCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagedListingRecommendationCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagedListingRecommendationCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (jsonObj.get("listingRecommendations") != null && !jsonObj.get("listingRecommendations").isJsonNull()) {
        JsonArray jsonArraylistingRecommendations = jsonObj.getAsJsonArray("listingRecommendations");
        if (jsonArraylistingRecommendations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listingRecommendations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listingRecommendations` to be an array in the JSON string but got `%s`", jsonObj.get("listingRecommendations").toString()));
          }

          // validate the optional field `listingRecommendations` (array)
          for (int i = 0; i < jsonArraylistingRecommendations.size(); i++) {
            ListingRecommendation.validateJsonElement(jsonArraylistingRecommendations.get(i));
          };
        }
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagedListingRecommendationCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagedListingRecommendationCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagedListingRecommendationCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagedListingRecommendationCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<PagedListingRecommendationCollection>() {
           @Override
           public void write(JsonWriter out, PagedListingRecommendationCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagedListingRecommendationCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PagedListingRecommendationCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PagedListingRecommendationCollection
   * @throws IOException if the JSON string is invalid with respect to PagedListingRecommendationCollection
   */
  public static PagedListingRecommendationCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagedListingRecommendationCollection.class);
  }

  /**
   * Convert an instance of PagedListingRecommendationCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

