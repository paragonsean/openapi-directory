/*
 * Recommendation API
 * The <b>Recommendation API</b> returns information that sellers can use to optimize the configuration of their listings on eBay. <br><br>Currently, the API contains a single method, <b>findListingRecommendations</b>. This method provides information that sellers can use to configure Promoted Listings ad campaigns to maximize the visibility of their items in the eBay marketplace.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BidPercentages;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that contains recommendations and information on how to configure Promoted Listings ad campaigns.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.926966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ad {
  public static final String SERIALIZED_NAME_BID_PERCENTAGES = "bidPercentages";
  @SerializedName(SERIALIZED_NAME_BID_PERCENTAGES)
  private List<BidPercentages> bidPercentages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMOTE_WITH_AD = "promoteWithAd";
  @SerializedName(SERIALIZED_NAME_PROMOTE_WITH_AD)
  private String promoteWithAd;

  public Ad() {
  }

  public Ad bidPercentages(List<BidPercentages> bidPercentages) {
    this.bidPercentages = bidPercentages;
    return this;
  }

  public Ad addBidPercentagesItem(BidPercentages bidPercentagesItem) {
    if (this.bidPercentages == null) {
      this.bidPercentages = new ArrayList<>();
    }
    this.bidPercentages.add(bidPercentagesItem);
    return this;
  }

  /**
   * This field returns information that you can use to configure the bidPercentage field in a Promoted Listings campaign. Note: Currently, ITEM and TRENDING are the only supported bid percentage types. The ITEM suggested bid percentages are tailored to each of your items and are designed to help you stay competitive while finding an optimal balance between performance and cost. The recommendations are calculated based on a variety of factors that may include item attributes, seasonality, past performance, and current competition for each of your listings. The TRENDING suggested bid percentages are calculated by reviewing the category level average ad rates in the marketplace. Setting the bidPercentage of your ad campaign based on these rate recommendations will help the items in the campaign be competitive with other items in the marketplace by improving their chances of being displayed more often in the marketplace.
   * @return bidPercentages
   */
  @javax.annotation.Nullable
  public List<BidPercentages> getBidPercentages() {
    return bidPercentages;
  }

  public void setBidPercentages(List<BidPercentages> bidPercentages) {
    this.bidPercentages = bidPercentages;
  }


  public Ad promoteWithAd(String promoteWithAd) {
    this.promoteWithAd = promoteWithAd;
    return this;
  }

  /**
   * An enum whose values describe whether or not eBay recommends you place the associated listing in a Promoted Listings ad campaign. IDs deemed RECOMMENDED by eBay are the listings with the highest potential of benefiting from being promoted. The recommendation calculation is based on marketplace trends, like buyer demand and the competition in the item&amp;rsquo;s category. Note: A promoteWithAd value cannot be calculated for listings that are part of Promoted Listings campaigns. Because of this, if you call findListingRecommendations with a specific set of listing IDs, the promoteWithAd field is not returned for any of the listings that are involved in a promotion. However, as long as they are eligible, the trending bidPercentage is returned for all specified listings, even if they are part of an ad campaign. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/recommendation/types/api:PromoteWithAd&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return promoteWithAd
   */
  @javax.annotation.Nullable
  public String getPromoteWithAd() {
    return promoteWithAd;
  }

  public void setPromoteWithAd(String promoteWithAd) {
    this.promoteWithAd = promoteWithAd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ad ad = (Ad) o;
    return Objects.equals(this.bidPercentages, ad.bidPercentages) &&
        Objects.equals(this.promoteWithAd, ad.promoteWithAd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bidPercentages, promoteWithAd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ad {\n");
    sb.append("    bidPercentages: ").append(toIndentedString(bidPercentages)).append("\n");
    sb.append("    promoteWithAd: ").append(toIndentedString(promoteWithAd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bidPercentages");
    openapiFields.add("promoteWithAd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ad
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ad.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ad is not found in the empty JSON string", Ad.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ad.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ad` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bidPercentages") != null && !jsonObj.get("bidPercentages").isJsonNull()) {
        JsonArray jsonArraybidPercentages = jsonObj.getAsJsonArray("bidPercentages");
        if (jsonArraybidPercentages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bidPercentages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bidPercentages` to be an array in the JSON string but got `%s`", jsonObj.get("bidPercentages").toString()));
          }

          // validate the optional field `bidPercentages` (array)
          for (int i = 0; i < jsonArraybidPercentages.size(); i++) {
            BidPercentages.validateJsonElement(jsonArraybidPercentages.get(i));
          };
        }
      }
      if ((jsonObj.get("promoteWithAd") != null && !jsonObj.get("promoteWithAd").isJsonNull()) && !jsonObj.get("promoteWithAd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promoteWithAd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promoteWithAd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ad.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ad' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ad> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ad.class));

       return (TypeAdapter<T>) new TypeAdapter<Ad>() {
           @Override
           public void write(JsonWriter out, Ad value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ad read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ad given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ad
   * @throws IOException if the JSON string is invalid with respect to Ad
   */
  public static Ad fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ad.class);
  }

  /**
   * Convert an instance of Ad to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

