# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.listing_recommendation import ListingRecommendation
from openapi_server import util


class PagedListingRecommendationCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, listing_recommendations: List[ListingRecommendation]=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """PagedListingRecommendationCollection - a model defined in OpenAPI

        :param href: The href of this PagedListingRecommendationCollection.
        :param limit: The limit of this PagedListingRecommendationCollection.
        :param listing_recommendations: The listing_recommendations of this PagedListingRecommendationCollection.
        :param next: The next of this PagedListingRecommendationCollection.
        :param offset: The offset of this PagedListingRecommendationCollection.
        :param prev: The prev of this PagedListingRecommendationCollection.
        :param total: The total of this PagedListingRecommendationCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'listing_recommendations': List[ListingRecommendation],
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'listing_recommendations': 'listingRecommendations',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._listing_recommendations = listing_recommendations
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagedListingRecommendationCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PagedListingRecommendationCollection of this PagedListingRecommendationCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PagedListingRecommendationCollection.

        The URI of the current page of results from the result set.

        :return: The href of this PagedListingRecommendationCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PagedListingRecommendationCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this PagedListingRecommendationCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PagedListingRecommendationCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.

        :return: The limit of this PagedListingRecommendationCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PagedListingRecommendationCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the limit query parameter.

        :param limit: The limit of this PagedListingRecommendationCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def listing_recommendations(self):
        """Gets the listing_recommendations of this PagedListingRecommendationCollection.

        Returns a list of listingRecommendations, where each element in the list offers recommendations for the associated listingId. Which elements are returned depend on how you structure the request. For example, if you request recommendations for all of a sellers listings (by leaving the request payload empty), ad recommendations are returned only for those listings where promoteWithAd is set to RECOMMENDED.

        :return: The listing_recommendations of this PagedListingRecommendationCollection.
        :rtype: List[ListingRecommendation]
        """
        return self._listing_recommendations

    @listing_recommendations.setter
    def listing_recommendations(self, listing_recommendations):
        """Sets the listing_recommendations of this PagedListingRecommendationCollection.

        Returns a list of listingRecommendations, where each element in the list offers recommendations for the associated listingId. Which elements are returned depend on how you structure the request. For example, if you request recommendations for all of a sellers listings (by leaving the request payload empty), ad recommendations are returned only for those listings where promoteWithAd is set to RECOMMENDED.

        :param listing_recommendations: The listing_recommendations of this PagedListingRecommendationCollection.
        :type listing_recommendations: List[ListingRecommendation]
        """

        self._listing_recommendations = listing_recommendations

    @property
    def next(self):
        """Gets the next of this PagedListingRecommendationCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048

        :return: The next of this PagedListingRecommendationCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PagedListingRecommendationCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. Max length: 2048

        :param next: The next of this PagedListingRecommendationCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PagedListingRecommendationCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.

        :return: The offset of this PagedListingRecommendationCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PagedListingRecommendationCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the offset query parameter. Note: The items in a paginated result set use a zero-based list where the first item in the list has an offset of 0.

        :param offset: The offset of this PagedListingRecommendationCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this PagedListingRecommendationCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048

        :return: The prev of this PagedListingRecommendationCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PagedListingRecommendationCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. Max length: 2048

        :param prev: The prev of this PagedListingRecommendationCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this PagedListingRecommendationCollection.

        The total number of items retrieved in the result set. If no items are found, this field is returned with a value of 0.

        :return: The total of this PagedListingRecommendationCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagedListingRecommendationCollection.

        The total number of items retrieved in the result set. If no items are found, this field is returned with a value of 0.

        :param total: The total of this PagedListingRecommendationCollection.
        :type total: int
        """

        self._total = total
