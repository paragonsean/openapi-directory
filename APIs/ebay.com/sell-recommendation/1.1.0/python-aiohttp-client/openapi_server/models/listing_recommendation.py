# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marketing_recommendation import MarketingRecommendation
from openapi_server import util


class ListingRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listing_id: str=None, marketing: MarketingRecommendation=None):
        """ListingRecommendation - a model defined in OpenAPI

        :param listing_id: The listing_id of this ListingRecommendation.
        :param marketing: The marketing of this ListingRecommendation.
        """
        self.openapi_types = {
            'listing_id': str,
            'marketing': MarketingRecommendation
        }

        self.attribute_map = {
            'listing_id': 'listingId',
            'marketing': 'marketing'
        }

        self._listing_id = listing_id
        self._marketing = marketing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListingRecommendation of this ListingRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listing_id(self):
        """Gets the listing_id of this ListingRecommendation.

        An ID that identifies the active listing associated with the eBay recommendations.

        :return: The listing_id of this ListingRecommendation.
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this ListingRecommendation.

        An ID that identifies the active listing associated with the eBay recommendations.

        :param listing_id: The listing_id of this ListingRecommendation.
        :type listing_id: str
        """

        self._listing_id = listing_id

    @property
    def marketing(self):
        """Gets the marketing of this ListingRecommendation.


        :return: The marketing of this ListingRecommendation.
        :rtype: MarketingRecommendation
        """
        return self._marketing

    @marketing.setter
    def marketing(self, marketing):
        """Sets the marketing of this ListingRecommendation.


        :param marketing: The marketing of this ListingRecommendation.
        :type marketing: MarketingRecommendation
        """

        self._marketing = marketing
