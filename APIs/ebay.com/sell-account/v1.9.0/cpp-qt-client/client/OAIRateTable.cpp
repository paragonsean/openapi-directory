/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateTable::OAIRateTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateTable::OAIRateTable() {
    this->initializeModel();
}

OAIRateTable::~OAIRateTable() {}

void OAIRateTable::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rate_table_id_isSet = false;
    m_rate_table_id_isValid = false;
}

void OAIRateTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateTable::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("locality")]);
    m_locality_isSet = !json[QString("locality")].isNull() && m_locality_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rate_table_id_isValid = ::OpenAPI::fromJsonValue(m_rate_table_id, json[QString("rateTableId")]);
    m_rate_table_id_isSet = !json[QString("rateTableId")].isNull() && m_rate_table_id_isValid;
}

QString OAIRateTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateTable::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_locality_isSet) {
        obj.insert(QString("locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rate_table_id_isSet) {
        obj.insert(QString("rateTableId"), ::OpenAPI::toJsonValue(m_rate_table_id));
    }
    return obj;
}

QString OAIRateTable::getCountryCode() const {
    return m_country_code;
}
void OAIRateTable::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIRateTable::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIRateTable::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIRateTable::getLocality() const {
    return m_locality;
}
void OAIRateTable::setLocality(const QString &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAIRateTable::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAIRateTable::is_locality_Valid() const{
    return m_locality_isValid;
}

QString OAIRateTable::getName() const {
    return m_name;
}
void OAIRateTable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRateTable::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRateTable::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRateTable::getRateTableId() const {
    return m_rate_table_id;
}
void OAIRateTable::setRateTableId(const QString &rate_table_id) {
    m_rate_table_id = rate_table_id;
    m_rate_table_id_isSet = true;
}

bool OAIRateTable::is_rate_table_id_Set() const{
    return m_rate_table_id_isSet;
}

bool OAIRateTable::is_rate_table_id_Valid() const{
    return m_rate_table_id_isValid;
}

bool OAIRateTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
