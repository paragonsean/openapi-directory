/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentPolicyRequest::OAIPaymentPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentPolicyRequest::OAIPaymentPolicyRequest() {
    this->initializeModel();
}

OAIPaymentPolicyRequest::~OAIPaymentPolicyRequest() {}

void OAIPaymentPolicyRequest::initializeModel() {

    m_category_types_isSet = false;
    m_category_types_isValid = false;

    m_deposit_isSet = false;
    m_deposit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_full_payment_due_in_isSet = false;
    m_full_payment_due_in_isValid = false;

    m_immediate_pay_isSet = false;
    m_immediate_pay_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_instructions_isSet = false;
    m_payment_instructions_isValid = false;

    m_payment_methods_isSet = false;
    m_payment_methods_isValid = false;
}

void OAIPaymentPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentPolicyRequest::fromJsonObject(QJsonObject json) {

    m_category_types_isValid = ::OpenAPI::fromJsonValue(m_category_types, json[QString("categoryTypes")]);
    m_category_types_isSet = !json[QString("categoryTypes")].isNull() && m_category_types_isValid;

    m_deposit_isValid = ::OpenAPI::fromJsonValue(m_deposit, json[QString("deposit")]);
    m_deposit_isSet = !json[QString("deposit")].isNull() && m_deposit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_full_payment_due_in_isValid = ::OpenAPI::fromJsonValue(m_full_payment_due_in, json[QString("fullPaymentDueIn")]);
    m_full_payment_due_in_isSet = !json[QString("fullPaymentDueIn")].isNull() && m_full_payment_due_in_isValid;

    m_immediate_pay_isValid = ::OpenAPI::fromJsonValue(m_immediate_pay, json[QString("immediatePay")]);
    m_immediate_pay_isSet = !json[QString("immediatePay")].isNull() && m_immediate_pay_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payment_instructions_isValid = ::OpenAPI::fromJsonValue(m_payment_instructions, json[QString("paymentInstructions")]);
    m_payment_instructions_isSet = !json[QString("paymentInstructions")].isNull() && m_payment_instructions_isValid;

    m_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_payment_methods, json[QString("paymentMethods")]);
    m_payment_methods_isSet = !json[QString("paymentMethods")].isNull() && m_payment_methods_isValid;
}

QString OAIPaymentPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_types.size() > 0) {
        obj.insert(QString("categoryTypes"), ::OpenAPI::toJsonValue(m_category_types));
    }
    if (m_deposit.isSet()) {
        obj.insert(QString("deposit"), ::OpenAPI::toJsonValue(m_deposit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_full_payment_due_in.isSet()) {
        obj.insert(QString("fullPaymentDueIn"), ::OpenAPI::toJsonValue(m_full_payment_due_in));
    }
    if (m_immediate_pay_isSet) {
        obj.insert(QString("immediatePay"), ::OpenAPI::toJsonValue(m_immediate_pay));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_instructions_isSet) {
        obj.insert(QString("paymentInstructions"), ::OpenAPI::toJsonValue(m_payment_instructions));
    }
    if (m_payment_methods.size() > 0) {
        obj.insert(QString("paymentMethods"), ::OpenAPI::toJsonValue(m_payment_methods));
    }
    return obj;
}

QList<OAICategoryType> OAIPaymentPolicyRequest::getCategoryTypes() const {
    return m_category_types;
}
void OAIPaymentPolicyRequest::setCategoryTypes(const QList<OAICategoryType> &category_types) {
    m_category_types = category_types;
    m_category_types_isSet = true;
}

bool OAIPaymentPolicyRequest::is_category_types_Set() const{
    return m_category_types_isSet;
}

bool OAIPaymentPolicyRequest::is_category_types_Valid() const{
    return m_category_types_isValid;
}

OAIDeposit OAIPaymentPolicyRequest::getDeposit() const {
    return m_deposit;
}
void OAIPaymentPolicyRequest::setDeposit(const OAIDeposit &deposit) {
    m_deposit = deposit;
    m_deposit_isSet = true;
}

bool OAIPaymentPolicyRequest::is_deposit_Set() const{
    return m_deposit_isSet;
}

bool OAIPaymentPolicyRequest::is_deposit_Valid() const{
    return m_deposit_isValid;
}

QString OAIPaymentPolicyRequest::getDescription() const {
    return m_description;
}
void OAIPaymentPolicyRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentPolicyRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentPolicyRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAITimeDuration OAIPaymentPolicyRequest::getFullPaymentDueIn() const {
    return m_full_payment_due_in;
}
void OAIPaymentPolicyRequest::setFullPaymentDueIn(const OAITimeDuration &full_payment_due_in) {
    m_full_payment_due_in = full_payment_due_in;
    m_full_payment_due_in_isSet = true;
}

bool OAIPaymentPolicyRequest::is_full_payment_due_in_Set() const{
    return m_full_payment_due_in_isSet;
}

bool OAIPaymentPolicyRequest::is_full_payment_due_in_Valid() const{
    return m_full_payment_due_in_isValid;
}

bool OAIPaymentPolicyRequest::isImmediatePay() const {
    return m_immediate_pay;
}
void OAIPaymentPolicyRequest::setImmediatePay(const bool &immediate_pay) {
    m_immediate_pay = immediate_pay;
    m_immediate_pay_isSet = true;
}

bool OAIPaymentPolicyRequest::is_immediate_pay_Set() const{
    return m_immediate_pay_isSet;
}

bool OAIPaymentPolicyRequest::is_immediate_pay_Valid() const{
    return m_immediate_pay_isValid;
}

QString OAIPaymentPolicyRequest::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIPaymentPolicyRequest::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIPaymentPolicyRequest::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIPaymentPolicyRequest::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAIPaymentPolicyRequest::getName() const {
    return m_name;
}
void OAIPaymentPolicyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPaymentPolicyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPaymentPolicyRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPaymentPolicyRequest::getPaymentInstructions() const {
    return m_payment_instructions;
}
void OAIPaymentPolicyRequest::setPaymentInstructions(const QString &payment_instructions) {
    m_payment_instructions = payment_instructions;
    m_payment_instructions_isSet = true;
}

bool OAIPaymentPolicyRequest::is_payment_instructions_Set() const{
    return m_payment_instructions_isSet;
}

bool OAIPaymentPolicyRequest::is_payment_instructions_Valid() const{
    return m_payment_instructions_isValid;
}

QList<OAIPaymentMethod> OAIPaymentPolicyRequest::getPaymentMethods() const {
    return m_payment_methods;
}
void OAIPaymentPolicyRequest::setPaymentMethods(const QList<OAIPaymentMethod> &payment_methods) {
    m_payment_methods = payment_methods;
    m_payment_methods_isSet = true;
}

bool OAIPaymentPolicyRequest::is_payment_methods_Set() const{
    return m_payment_methods_isSet;
}

bool OAIPaymentPolicyRequest::is_payment_methods_Valid() const{
    return m_payment_methods_isValid;
}

bool OAIPaymentPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_payment_due_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
