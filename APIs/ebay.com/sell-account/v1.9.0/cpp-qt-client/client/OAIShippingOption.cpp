/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingOption::OAIShippingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingOption::OAIShippingOption() {
    this->initializeModel();
}

OAIShippingOption::~OAIShippingOption() {}

void OAIShippingOption::initializeModel() {

    m_cost_type_isSet = false;
    m_cost_type_isValid = false;

    m_insurance_fee_isSet = false;
    m_insurance_fee_isValid = false;

    m_insurance_offered_isSet = false;
    m_insurance_offered_isValid = false;

    m_option_type_isSet = false;
    m_option_type_isValid = false;

    m_package_handling_cost_isSet = false;
    m_package_handling_cost_isValid = false;

    m_rate_table_id_isSet = false;
    m_rate_table_id_isValid = false;

    m_shipping_discount_profile_id_isSet = false;
    m_shipping_discount_profile_id_isValid = false;

    m_shipping_promotion_offered_isSet = false;
    m_shipping_promotion_offered_isValid = false;

    m_shipping_services_isSet = false;
    m_shipping_services_isValid = false;
}

void OAIShippingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingOption::fromJsonObject(QJsonObject json) {

    m_cost_type_isValid = ::OpenAPI::fromJsonValue(m_cost_type, json[QString("costType")]);
    m_cost_type_isSet = !json[QString("costType")].isNull() && m_cost_type_isValid;

    m_insurance_fee_isValid = ::OpenAPI::fromJsonValue(m_insurance_fee, json[QString("insuranceFee")]);
    m_insurance_fee_isSet = !json[QString("insuranceFee")].isNull() && m_insurance_fee_isValid;

    m_insurance_offered_isValid = ::OpenAPI::fromJsonValue(m_insurance_offered, json[QString("insuranceOffered")]);
    m_insurance_offered_isSet = !json[QString("insuranceOffered")].isNull() && m_insurance_offered_isValid;

    m_option_type_isValid = ::OpenAPI::fromJsonValue(m_option_type, json[QString("optionType")]);
    m_option_type_isSet = !json[QString("optionType")].isNull() && m_option_type_isValid;

    m_package_handling_cost_isValid = ::OpenAPI::fromJsonValue(m_package_handling_cost, json[QString("packageHandlingCost")]);
    m_package_handling_cost_isSet = !json[QString("packageHandlingCost")].isNull() && m_package_handling_cost_isValid;

    m_rate_table_id_isValid = ::OpenAPI::fromJsonValue(m_rate_table_id, json[QString("rateTableId")]);
    m_rate_table_id_isSet = !json[QString("rateTableId")].isNull() && m_rate_table_id_isValid;

    m_shipping_discount_profile_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount_profile_id, json[QString("shippingDiscountProfileId")]);
    m_shipping_discount_profile_id_isSet = !json[QString("shippingDiscountProfileId")].isNull() && m_shipping_discount_profile_id_isValid;

    m_shipping_promotion_offered_isValid = ::OpenAPI::fromJsonValue(m_shipping_promotion_offered, json[QString("shippingPromotionOffered")]);
    m_shipping_promotion_offered_isSet = !json[QString("shippingPromotionOffered")].isNull() && m_shipping_promotion_offered_isValid;

    m_shipping_services_isValid = ::OpenAPI::fromJsonValue(m_shipping_services, json[QString("shippingServices")]);
    m_shipping_services_isSet = !json[QString("shippingServices")].isNull() && m_shipping_services_isValid;
}

QString OAIShippingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_type_isSet) {
        obj.insert(QString("costType"), ::OpenAPI::toJsonValue(m_cost_type));
    }
    if (m_insurance_fee.isSet()) {
        obj.insert(QString("insuranceFee"), ::OpenAPI::toJsonValue(m_insurance_fee));
    }
    if (m_insurance_offered_isSet) {
        obj.insert(QString("insuranceOffered"), ::OpenAPI::toJsonValue(m_insurance_offered));
    }
    if (m_option_type_isSet) {
        obj.insert(QString("optionType"), ::OpenAPI::toJsonValue(m_option_type));
    }
    if (m_package_handling_cost.isSet()) {
        obj.insert(QString("packageHandlingCost"), ::OpenAPI::toJsonValue(m_package_handling_cost));
    }
    if (m_rate_table_id_isSet) {
        obj.insert(QString("rateTableId"), ::OpenAPI::toJsonValue(m_rate_table_id));
    }
    if (m_shipping_discount_profile_id_isSet) {
        obj.insert(QString("shippingDiscountProfileId"), ::OpenAPI::toJsonValue(m_shipping_discount_profile_id));
    }
    if (m_shipping_promotion_offered_isSet) {
        obj.insert(QString("shippingPromotionOffered"), ::OpenAPI::toJsonValue(m_shipping_promotion_offered));
    }
    if (m_shipping_services.size() > 0) {
        obj.insert(QString("shippingServices"), ::OpenAPI::toJsonValue(m_shipping_services));
    }
    return obj;
}

QString OAIShippingOption::getCostType() const {
    return m_cost_type;
}
void OAIShippingOption::setCostType(const QString &cost_type) {
    m_cost_type = cost_type;
    m_cost_type_isSet = true;
}

bool OAIShippingOption::is_cost_type_Set() const{
    return m_cost_type_isSet;
}

bool OAIShippingOption::is_cost_type_Valid() const{
    return m_cost_type_isValid;
}

OAIAmount OAIShippingOption::getInsuranceFee() const {
    return m_insurance_fee;
}
void OAIShippingOption::setInsuranceFee(const OAIAmount &insurance_fee) {
    m_insurance_fee = insurance_fee;
    m_insurance_fee_isSet = true;
}

bool OAIShippingOption::is_insurance_fee_Set() const{
    return m_insurance_fee_isSet;
}

bool OAIShippingOption::is_insurance_fee_Valid() const{
    return m_insurance_fee_isValid;
}

bool OAIShippingOption::isInsuranceOffered() const {
    return m_insurance_offered;
}
void OAIShippingOption::setInsuranceOffered(const bool &insurance_offered) {
    m_insurance_offered = insurance_offered;
    m_insurance_offered_isSet = true;
}

bool OAIShippingOption::is_insurance_offered_Set() const{
    return m_insurance_offered_isSet;
}

bool OAIShippingOption::is_insurance_offered_Valid() const{
    return m_insurance_offered_isValid;
}

QString OAIShippingOption::getOptionType() const {
    return m_option_type;
}
void OAIShippingOption::setOptionType(const QString &option_type) {
    m_option_type = option_type;
    m_option_type_isSet = true;
}

bool OAIShippingOption::is_option_type_Set() const{
    return m_option_type_isSet;
}

bool OAIShippingOption::is_option_type_Valid() const{
    return m_option_type_isValid;
}

OAIAmount OAIShippingOption::getPackageHandlingCost() const {
    return m_package_handling_cost;
}
void OAIShippingOption::setPackageHandlingCost(const OAIAmount &package_handling_cost) {
    m_package_handling_cost = package_handling_cost;
    m_package_handling_cost_isSet = true;
}

bool OAIShippingOption::is_package_handling_cost_Set() const{
    return m_package_handling_cost_isSet;
}

bool OAIShippingOption::is_package_handling_cost_Valid() const{
    return m_package_handling_cost_isValid;
}

QString OAIShippingOption::getRateTableId() const {
    return m_rate_table_id;
}
void OAIShippingOption::setRateTableId(const QString &rate_table_id) {
    m_rate_table_id = rate_table_id;
    m_rate_table_id_isSet = true;
}

bool OAIShippingOption::is_rate_table_id_Set() const{
    return m_rate_table_id_isSet;
}

bool OAIShippingOption::is_rate_table_id_Valid() const{
    return m_rate_table_id_isValid;
}

QString OAIShippingOption::getShippingDiscountProfileId() const {
    return m_shipping_discount_profile_id;
}
void OAIShippingOption::setShippingDiscountProfileId(const QString &shipping_discount_profile_id) {
    m_shipping_discount_profile_id = shipping_discount_profile_id;
    m_shipping_discount_profile_id_isSet = true;
}

bool OAIShippingOption::is_shipping_discount_profile_id_Set() const{
    return m_shipping_discount_profile_id_isSet;
}

bool OAIShippingOption::is_shipping_discount_profile_id_Valid() const{
    return m_shipping_discount_profile_id_isValid;
}

bool OAIShippingOption::isShippingPromotionOffered() const {
    return m_shipping_promotion_offered;
}
void OAIShippingOption::setShippingPromotionOffered(const bool &shipping_promotion_offered) {
    m_shipping_promotion_offered = shipping_promotion_offered;
    m_shipping_promotion_offered_isSet = true;
}

bool OAIShippingOption::is_shipping_promotion_offered_Set() const{
    return m_shipping_promotion_offered_isSet;
}

bool OAIShippingOption::is_shipping_promotion_offered_Valid() const{
    return m_shipping_promotion_offered_isValid;
}

QList<OAIShippingService> OAIShippingOption::getShippingServices() const {
    return m_shipping_services;
}
void OAIShippingOption::setShippingServices(const QList<OAIShippingService> &shipping_services) {
    m_shipping_services = shipping_services;
    m_shipping_services_isSet = true;
}

bool OAIShippingOption::is_shipping_services_Set() const{
    return m_shipping_services_isSet;
}

bool OAIShippingOption::is_shipping_services_Valid() const{
    return m_shipping_services_isValid;
}

bool OAIShippingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_handling_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_promotion_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
