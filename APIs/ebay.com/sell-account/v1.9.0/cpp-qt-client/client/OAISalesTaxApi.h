/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesTaxApi_H
#define OAI_OAISalesTaxApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISalesTax.h"
#include "OAISalesTaxBase.h"
#include "OAISalesTaxes.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesTaxApi : public QObject {
    Q_OBJECT

public:
    OAISalesTaxApi(const int timeOut = 0);
    ~OAISalesTaxApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  jurisdiction_id QString [required]
    * @param[in]  oai_sales_tax_base OAISalesTaxBase [required]
    */
    virtual void createOrReplaceSalesTax(const QString &country_code, const QString &jurisdiction_id, const OAISalesTaxBase &oai_sales_tax_base);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  jurisdiction_id QString [required]
    */
    virtual void deleteSalesTax(const QString &country_code, const QString &jurisdiction_id);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  jurisdiction_id QString [required]
    */
    virtual void getSalesTax(const QString &country_code, const QString &jurisdiction_id);

    /**
    * @param[in]  country_code QString [required]
    */
    virtual void getSalesTaxes(const QString &country_code);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrReplaceSalesTaxCallback(OAIHttpRequestWorker *worker);
    void deleteSalesTaxCallback(OAIHttpRequestWorker *worker);
    void getSalesTaxCallback(OAIHttpRequestWorker *worker);
    void getSalesTaxesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrReplaceSalesTaxSignal();
    void deleteSalesTaxSignal();
    void getSalesTaxSignal(OAISalesTax summary);
    void getSalesTaxesSignal(OAISalesTaxes summary);


    void createOrReplaceSalesTaxSignalFull(OAIHttpRequestWorker *worker);
    void deleteSalesTaxSignalFull(OAIHttpRequestWorker *worker);
    void getSalesTaxSignalFull(OAIHttpRequestWorker *worker, OAISalesTax summary);
    void getSalesTaxesSignalFull(OAIHttpRequestWorker *worker, OAISalesTaxes summary);

    Q_DECL_DEPRECATED_X("Use createOrReplaceSalesTaxSignalError() instead")
    void createOrReplaceSalesTaxSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createOrReplaceSalesTaxSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSalesTaxSignalError() instead")
    void deleteSalesTaxSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSalesTaxSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesTaxSignalError() instead")
    void getSalesTaxSignalE(OAISalesTax summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesTaxSignalError(OAISalesTax summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesTaxesSignalError() instead")
    void getSalesTaxesSignalE(OAISalesTaxes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesTaxesSignalError(OAISalesTaxes summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrReplaceSalesTaxSignalErrorFull() instead")
    void createOrReplaceSalesTaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrReplaceSalesTaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSalesTaxSignalErrorFull() instead")
    void deleteSalesTaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSalesTaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesTaxSignalErrorFull() instead")
    void getSalesTaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesTaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesTaxesSignalErrorFull() instead")
    void getSalesTaxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesTaxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
