/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipientAccountReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipientAccountReference::OAIRecipientAccountReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipientAccountReference::OAIRecipientAccountReference() {
    this->initializeModel();
}

OAIRecipientAccountReference::~OAIRecipientAccountReference() {}

void OAIRecipientAccountReference::initializeModel() {

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_reference_type_isSet = false;
    m_reference_type_isValid = false;
}

void OAIRecipientAccountReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecipientAccountReference::fromJsonObject(QJsonObject json) {

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_reference_type_isValid = ::OpenAPI::fromJsonValue(m_reference_type, json[QString("referenceType")]);
    m_reference_type_isSet = !json[QString("referenceType")].isNull() && m_reference_type_isValid;
}

QString OAIRecipientAccountReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecipientAccountReference::asJsonObject() const {
    QJsonObject obj;
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_reference_type_isSet) {
        obj.insert(QString("referenceType"), ::OpenAPI::toJsonValue(m_reference_type));
    }
    return obj;
}

QString OAIRecipientAccountReference::getReferenceId() const {
    return m_reference_id;
}
void OAIRecipientAccountReference::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIRecipientAccountReference::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIRecipientAccountReference::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIRecipientAccountReference::getReferenceType() const {
    return m_reference_type;
}
void OAIRecipientAccountReference::setReferenceType(const QString &reference_type) {
    m_reference_type = reference_type;
    m_reference_type_isSet = true;
}

bool OAIRecipientAccountReference::is_reference_type_Set() const{
    return m_reference_type_isSet;
}

bool OAIRecipientAccountReference::is_reference_type_Valid() const{
    return m_reference_type_isValid;
}

bool OAIRecipientAccountReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecipientAccountReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
