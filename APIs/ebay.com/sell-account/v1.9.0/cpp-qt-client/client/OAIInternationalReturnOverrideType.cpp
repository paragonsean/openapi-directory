/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternationalReturnOverrideType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternationalReturnOverrideType::OAIInternationalReturnOverrideType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternationalReturnOverrideType::OAIInternationalReturnOverrideType() {
    this->initializeModel();
}

OAIInternationalReturnOverrideType::~OAIInternationalReturnOverrideType() {}

void OAIInternationalReturnOverrideType::initializeModel() {

    m_return_method_isSet = false;
    m_return_method_isValid = false;

    m_return_period_isSet = false;
    m_return_period_isValid = false;

    m_return_shipping_cost_payer_isSet = false;
    m_return_shipping_cost_payer_isValid = false;

    m_returns_accepted_isSet = false;
    m_returns_accepted_isValid = false;
}

void OAIInternationalReturnOverrideType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternationalReturnOverrideType::fromJsonObject(QJsonObject json) {

    m_return_method_isValid = ::OpenAPI::fromJsonValue(m_return_method, json[QString("returnMethod")]);
    m_return_method_isSet = !json[QString("returnMethod")].isNull() && m_return_method_isValid;

    m_return_period_isValid = ::OpenAPI::fromJsonValue(m_return_period, json[QString("returnPeriod")]);
    m_return_period_isSet = !json[QString("returnPeriod")].isNull() && m_return_period_isValid;

    m_return_shipping_cost_payer_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_cost_payer, json[QString("returnShippingCostPayer")]);
    m_return_shipping_cost_payer_isSet = !json[QString("returnShippingCostPayer")].isNull() && m_return_shipping_cost_payer_isValid;

    m_returns_accepted_isValid = ::OpenAPI::fromJsonValue(m_returns_accepted, json[QString("returnsAccepted")]);
    m_returns_accepted_isSet = !json[QString("returnsAccepted")].isNull() && m_returns_accepted_isValid;
}

QString OAIInternationalReturnOverrideType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternationalReturnOverrideType::asJsonObject() const {
    QJsonObject obj;
    if (m_return_method_isSet) {
        obj.insert(QString("returnMethod"), ::OpenAPI::toJsonValue(m_return_method));
    }
    if (m_return_period.isSet()) {
        obj.insert(QString("returnPeriod"), ::OpenAPI::toJsonValue(m_return_period));
    }
    if (m_return_shipping_cost_payer_isSet) {
        obj.insert(QString("returnShippingCostPayer"), ::OpenAPI::toJsonValue(m_return_shipping_cost_payer));
    }
    if (m_returns_accepted_isSet) {
        obj.insert(QString("returnsAccepted"), ::OpenAPI::toJsonValue(m_returns_accepted));
    }
    return obj;
}

QString OAIInternationalReturnOverrideType::getReturnMethod() const {
    return m_return_method;
}
void OAIInternationalReturnOverrideType::setReturnMethod(const QString &return_method) {
    m_return_method = return_method;
    m_return_method_isSet = true;
}

bool OAIInternationalReturnOverrideType::is_return_method_Set() const{
    return m_return_method_isSet;
}

bool OAIInternationalReturnOverrideType::is_return_method_Valid() const{
    return m_return_method_isValid;
}

OAITimeDuration OAIInternationalReturnOverrideType::getReturnPeriod() const {
    return m_return_period;
}
void OAIInternationalReturnOverrideType::setReturnPeriod(const OAITimeDuration &return_period) {
    m_return_period = return_period;
    m_return_period_isSet = true;
}

bool OAIInternationalReturnOverrideType::is_return_period_Set() const{
    return m_return_period_isSet;
}

bool OAIInternationalReturnOverrideType::is_return_period_Valid() const{
    return m_return_period_isValid;
}

QString OAIInternationalReturnOverrideType::getReturnShippingCostPayer() const {
    return m_return_shipping_cost_payer;
}
void OAIInternationalReturnOverrideType::setReturnShippingCostPayer(const QString &return_shipping_cost_payer) {
    m_return_shipping_cost_payer = return_shipping_cost_payer;
    m_return_shipping_cost_payer_isSet = true;
}

bool OAIInternationalReturnOverrideType::is_return_shipping_cost_payer_Set() const{
    return m_return_shipping_cost_payer_isSet;
}

bool OAIInternationalReturnOverrideType::is_return_shipping_cost_payer_Valid() const{
    return m_return_shipping_cost_payer_isValid;
}

bool OAIInternationalReturnOverrideType::isReturnsAccepted() const {
    return m_returns_accepted;
}
void OAIInternationalReturnOverrideType::setReturnsAccepted(const bool &returns_accepted) {
    m_returns_accepted = returns_accepted;
    m_returns_accepted_isSet = true;
}

bool OAIInternationalReturnOverrideType::is_returns_accepted_Set() const{
    return m_returns_accepted_isSet;
}

bool OAIInternationalReturnOverrideType::is_returns_accepted_Valid() const{
    return m_returns_accepted_isValid;
}

bool OAIInternationalReturnOverrideType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_cost_payer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returns_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternationalReturnOverrideType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
