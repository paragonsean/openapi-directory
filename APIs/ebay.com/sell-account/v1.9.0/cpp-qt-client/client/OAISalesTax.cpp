/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesTax::OAISalesTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesTax::OAISalesTax() {
    this->initializeModel();
}

OAISalesTax::~OAISalesTax() {}

void OAISalesTax::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_sales_tax_jurisdiction_id_isSet = false;
    m_sales_tax_jurisdiction_id_isValid = false;

    m_sales_tax_percentage_isSet = false;
    m_sales_tax_percentage_isValid = false;

    m_shipping_and_handling_taxed_isSet = false;
    m_shipping_and_handling_taxed_isValid = false;
}

void OAISalesTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesTax::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_sales_tax_jurisdiction_id_isValid = ::OpenAPI::fromJsonValue(m_sales_tax_jurisdiction_id, json[QString("salesTaxJurisdictionId")]);
    m_sales_tax_jurisdiction_id_isSet = !json[QString("salesTaxJurisdictionId")].isNull() && m_sales_tax_jurisdiction_id_isValid;

    m_sales_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_sales_tax_percentage, json[QString("salesTaxPercentage")]);
    m_sales_tax_percentage_isSet = !json[QString("salesTaxPercentage")].isNull() && m_sales_tax_percentage_isValid;

    m_shipping_and_handling_taxed_isValid = ::OpenAPI::fromJsonValue(m_shipping_and_handling_taxed, json[QString("shippingAndHandlingTaxed")]);
    m_shipping_and_handling_taxed_isSet = !json[QString("shippingAndHandlingTaxed")].isNull() && m_shipping_and_handling_taxed_isValid;
}

QString OAISalesTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesTax::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_sales_tax_jurisdiction_id_isSet) {
        obj.insert(QString("salesTaxJurisdictionId"), ::OpenAPI::toJsonValue(m_sales_tax_jurisdiction_id));
    }
    if (m_sales_tax_percentage_isSet) {
        obj.insert(QString("salesTaxPercentage"), ::OpenAPI::toJsonValue(m_sales_tax_percentage));
    }
    if (m_shipping_and_handling_taxed_isSet) {
        obj.insert(QString("shippingAndHandlingTaxed"), ::OpenAPI::toJsonValue(m_shipping_and_handling_taxed));
    }
    return obj;
}

QString OAISalesTax::getCountryCode() const {
    return m_country_code;
}
void OAISalesTax::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAISalesTax::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAISalesTax::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAISalesTax::getSalesTaxJurisdictionId() const {
    return m_sales_tax_jurisdiction_id;
}
void OAISalesTax::setSalesTaxJurisdictionId(const QString &sales_tax_jurisdiction_id) {
    m_sales_tax_jurisdiction_id = sales_tax_jurisdiction_id;
    m_sales_tax_jurisdiction_id_isSet = true;
}

bool OAISalesTax::is_sales_tax_jurisdiction_id_Set() const{
    return m_sales_tax_jurisdiction_id_isSet;
}

bool OAISalesTax::is_sales_tax_jurisdiction_id_Valid() const{
    return m_sales_tax_jurisdiction_id_isValid;
}

QString OAISalesTax::getSalesTaxPercentage() const {
    return m_sales_tax_percentage;
}
void OAISalesTax::setSalesTaxPercentage(const QString &sales_tax_percentage) {
    m_sales_tax_percentage = sales_tax_percentage;
    m_sales_tax_percentage_isSet = true;
}

bool OAISalesTax::is_sales_tax_percentage_Set() const{
    return m_sales_tax_percentage_isSet;
}

bool OAISalesTax::is_sales_tax_percentage_Valid() const{
    return m_sales_tax_percentage_isValid;
}

bool OAISalesTax::isShippingAndHandlingTaxed() const {
    return m_shipping_and_handling_taxed;
}
void OAISalesTax::setShippingAndHandlingTaxed(const bool &shipping_and_handling_taxed) {
    m_shipping_and_handling_taxed = shipping_and_handling_taxed;
    m_shipping_and_handling_taxed_isSet = true;
}

bool OAISalesTax::is_shipping_and_handling_taxed_Set() const{
    return m_shipping_and_handling_taxed_isSet;
}

bool OAISalesTax::is_shipping_and_handling_taxed_Valid() const{
    return m_shipping_and_handling_taxed_isValid;
}

bool OAISalesTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_tax_jurisdiction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_and_handling_taxed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
