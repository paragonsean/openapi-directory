/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingService::OAIShippingService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingService::OAIShippingService() {
    this->initializeModel();
}

OAIShippingService::~OAIShippingService() {}

void OAIShippingService::initializeModel() {

    m_additional_shipping_cost_isSet = false;
    m_additional_shipping_cost_isValid = false;

    m_buyer_responsible_for_pickup_isSet = false;
    m_buyer_responsible_for_pickup_isValid = false;

    m_buyer_responsible_for_shipping_isSet = false;
    m_buyer_responsible_for_shipping_isValid = false;

    m_cash_on_delivery_fee_isSet = false;
    m_cash_on_delivery_fee_isValid = false;

    m_free_shipping_isSet = false;
    m_free_shipping_isValid = false;

    m_ship_to_locations_isSet = false;
    m_ship_to_locations_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_service_code_isSet = false;
    m_shipping_service_code_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_surcharge_isSet = false;
    m_surcharge_isValid = false;
}

void OAIShippingService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingService::fromJsonObject(QJsonObject json) {

    m_additional_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_additional_shipping_cost, json[QString("additionalShippingCost")]);
    m_additional_shipping_cost_isSet = !json[QString("additionalShippingCost")].isNull() && m_additional_shipping_cost_isValid;

    m_buyer_responsible_for_pickup_isValid = ::OpenAPI::fromJsonValue(m_buyer_responsible_for_pickup, json[QString("buyerResponsibleForPickup")]);
    m_buyer_responsible_for_pickup_isSet = !json[QString("buyerResponsibleForPickup")].isNull() && m_buyer_responsible_for_pickup_isValid;

    m_buyer_responsible_for_shipping_isValid = ::OpenAPI::fromJsonValue(m_buyer_responsible_for_shipping, json[QString("buyerResponsibleForShipping")]);
    m_buyer_responsible_for_shipping_isSet = !json[QString("buyerResponsibleForShipping")].isNull() && m_buyer_responsible_for_shipping_isValid;

    m_cash_on_delivery_fee_isValid = ::OpenAPI::fromJsonValue(m_cash_on_delivery_fee, json[QString("cashOnDeliveryFee")]);
    m_cash_on_delivery_fee_isSet = !json[QString("cashOnDeliveryFee")].isNull() && m_cash_on_delivery_fee_isValid;

    m_free_shipping_isValid = ::OpenAPI::fromJsonValue(m_free_shipping, json[QString("freeShipping")]);
    m_free_shipping_isSet = !json[QString("freeShipping")].isNull() && m_free_shipping_isValid;

    m_ship_to_locations_isValid = ::OpenAPI::fromJsonValue(m_ship_to_locations, json[QString("shipToLocations")]);
    m_ship_to_locations_isSet = !json[QString("shipToLocations")].isNull() && m_ship_to_locations_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_service_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_service_code, json[QString("shippingServiceCode")]);
    m_shipping_service_code_isSet = !json[QString("shippingServiceCode")].isNull() && m_shipping_service_code_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_surcharge_isValid = ::OpenAPI::fromJsonValue(m_surcharge, json[QString("surcharge")]);
    m_surcharge_isSet = !json[QString("surcharge")].isNull() && m_surcharge_isValid;
}

QString OAIShippingService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingService::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_shipping_cost.isSet()) {
        obj.insert(QString("additionalShippingCost"), ::OpenAPI::toJsonValue(m_additional_shipping_cost));
    }
    if (m_buyer_responsible_for_pickup_isSet) {
        obj.insert(QString("buyerResponsibleForPickup"), ::OpenAPI::toJsonValue(m_buyer_responsible_for_pickup));
    }
    if (m_buyer_responsible_for_shipping_isSet) {
        obj.insert(QString("buyerResponsibleForShipping"), ::OpenAPI::toJsonValue(m_buyer_responsible_for_shipping));
    }
    if (m_cash_on_delivery_fee.isSet()) {
        obj.insert(QString("cashOnDeliveryFee"), ::OpenAPI::toJsonValue(m_cash_on_delivery_fee));
    }
    if (m_free_shipping_isSet) {
        obj.insert(QString("freeShipping"), ::OpenAPI::toJsonValue(m_free_shipping));
    }
    if (m_ship_to_locations.isSet()) {
        obj.insert(QString("shipToLocations"), ::OpenAPI::toJsonValue(m_ship_to_locations));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_service_code_isSet) {
        obj.insert(QString("shippingServiceCode"), ::OpenAPI::toJsonValue(m_shipping_service_code));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_surcharge.isSet()) {
        obj.insert(QString("surcharge"), ::OpenAPI::toJsonValue(m_surcharge));
    }
    return obj;
}

OAIAmount OAIShippingService::getAdditionalShippingCost() const {
    return m_additional_shipping_cost;
}
void OAIShippingService::setAdditionalShippingCost(const OAIAmount &additional_shipping_cost) {
    m_additional_shipping_cost = additional_shipping_cost;
    m_additional_shipping_cost_isSet = true;
}

bool OAIShippingService::is_additional_shipping_cost_Set() const{
    return m_additional_shipping_cost_isSet;
}

bool OAIShippingService::is_additional_shipping_cost_Valid() const{
    return m_additional_shipping_cost_isValid;
}

bool OAIShippingService::isBuyerResponsibleForPickup() const {
    return m_buyer_responsible_for_pickup;
}
void OAIShippingService::setBuyerResponsibleForPickup(const bool &buyer_responsible_for_pickup) {
    m_buyer_responsible_for_pickup = buyer_responsible_for_pickup;
    m_buyer_responsible_for_pickup_isSet = true;
}

bool OAIShippingService::is_buyer_responsible_for_pickup_Set() const{
    return m_buyer_responsible_for_pickup_isSet;
}

bool OAIShippingService::is_buyer_responsible_for_pickup_Valid() const{
    return m_buyer_responsible_for_pickup_isValid;
}

bool OAIShippingService::isBuyerResponsibleForShipping() const {
    return m_buyer_responsible_for_shipping;
}
void OAIShippingService::setBuyerResponsibleForShipping(const bool &buyer_responsible_for_shipping) {
    m_buyer_responsible_for_shipping = buyer_responsible_for_shipping;
    m_buyer_responsible_for_shipping_isSet = true;
}

bool OAIShippingService::is_buyer_responsible_for_shipping_Set() const{
    return m_buyer_responsible_for_shipping_isSet;
}

bool OAIShippingService::is_buyer_responsible_for_shipping_Valid() const{
    return m_buyer_responsible_for_shipping_isValid;
}

OAIAmount OAIShippingService::getCashOnDeliveryFee() const {
    return m_cash_on_delivery_fee;
}
void OAIShippingService::setCashOnDeliveryFee(const OAIAmount &cash_on_delivery_fee) {
    m_cash_on_delivery_fee = cash_on_delivery_fee;
    m_cash_on_delivery_fee_isSet = true;
}

bool OAIShippingService::is_cash_on_delivery_fee_Set() const{
    return m_cash_on_delivery_fee_isSet;
}

bool OAIShippingService::is_cash_on_delivery_fee_Valid() const{
    return m_cash_on_delivery_fee_isValid;
}

bool OAIShippingService::isFreeShipping() const {
    return m_free_shipping;
}
void OAIShippingService::setFreeShipping(const bool &free_shipping) {
    m_free_shipping = free_shipping;
    m_free_shipping_isSet = true;
}

bool OAIShippingService::is_free_shipping_Set() const{
    return m_free_shipping_isSet;
}

bool OAIShippingService::is_free_shipping_Valid() const{
    return m_free_shipping_isValid;
}

OAIRegionSet OAIShippingService::getShipToLocations() const {
    return m_ship_to_locations;
}
void OAIShippingService::setShipToLocations(const OAIRegionSet &ship_to_locations) {
    m_ship_to_locations = ship_to_locations;
    m_ship_to_locations_isSet = true;
}

bool OAIShippingService::is_ship_to_locations_Set() const{
    return m_ship_to_locations_isSet;
}

bool OAIShippingService::is_ship_to_locations_Valid() const{
    return m_ship_to_locations_isValid;
}

QString OAIShippingService::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIShippingService::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIShippingService::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIShippingService::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

OAIAmount OAIShippingService::getShippingCost() const {
    return m_shipping_cost;
}
void OAIShippingService::setShippingCost(const OAIAmount &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIShippingService::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIShippingService::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIShippingService::getShippingServiceCode() const {
    return m_shipping_service_code;
}
void OAIShippingService::setShippingServiceCode(const QString &shipping_service_code) {
    m_shipping_service_code = shipping_service_code;
    m_shipping_service_code_isSet = true;
}

bool OAIShippingService::is_shipping_service_code_Set() const{
    return m_shipping_service_code_isSet;
}

bool OAIShippingService::is_shipping_service_code_Valid() const{
    return m_shipping_service_code_isValid;
}

qint32 OAIShippingService::getSortOrder() const {
    return m_sort_order;
}
void OAIShippingService::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIShippingService::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIShippingService::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAIAmount OAIShippingService::getSurcharge() const {
    return m_surcharge;
}
void OAIShippingService::setSurcharge(const OAIAmount &surcharge) {
    m_surcharge = surcharge;
    m_surcharge_isSet = true;
}

bool OAIShippingService::is_surcharge_Set() const{
    return m_surcharge_isSet;
}

bool OAIShippingService::is_surcharge_Valid() const{
    return m_surcharge_isValid;
}

bool OAIShippingService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_responsible_for_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_responsible_for_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_delivery_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
