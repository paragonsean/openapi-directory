/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethod::OAIPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethod::OAIPaymentMethod() {
    this->initializeModel();
}

OAIPaymentMethod::~OAIPaymentMethod() {}

void OAIPaymentMethod::initializeModel() {

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_payment_method_type_isSet = false;
    m_payment_method_type_isValid = false;

    m_recipient_account_reference_isSet = false;
    m_recipient_account_reference_isValid = false;
}

void OAIPaymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethod::fromJsonObject(QJsonObject json) {

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("brands")]);
    m_brands_isSet = !json[QString("brands")].isNull() && m_brands_isValid;

    m_payment_method_type_isValid = ::OpenAPI::fromJsonValue(m_payment_method_type, json[QString("paymentMethodType")]);
    m_payment_method_type_isSet = !json[QString("paymentMethodType")].isNull() && m_payment_method_type_isValid;

    m_recipient_account_reference_isValid = ::OpenAPI::fromJsonValue(m_recipient_account_reference, json[QString("recipientAccountReference")]);
    m_recipient_account_reference_isSet = !json[QString("recipientAccountReference")].isNull() && m_recipient_account_reference_isValid;
}

QString OAIPaymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_brands.size() > 0) {
        obj.insert(QString("brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_payment_method_type_isSet) {
        obj.insert(QString("paymentMethodType"), ::OpenAPI::toJsonValue(m_payment_method_type));
    }
    if (m_recipient_account_reference.isSet()) {
        obj.insert(QString("recipientAccountReference"), ::OpenAPI::toJsonValue(m_recipient_account_reference));
    }
    return obj;
}

QList<QString> OAIPaymentMethod::getBrands() const {
    return m_brands;
}
void OAIPaymentMethod::setBrands(const QList<QString> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIPaymentMethod::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIPaymentMethod::is_brands_Valid() const{
    return m_brands_isValid;
}

QString OAIPaymentMethod::getPaymentMethodType() const {
    return m_payment_method_type;
}
void OAIPaymentMethod::setPaymentMethodType(const QString &payment_method_type) {
    m_payment_method_type = payment_method_type;
    m_payment_method_type_isSet = true;
}

bool OAIPaymentMethod::is_payment_method_type_Set() const{
    return m_payment_method_type_isSet;
}

bool OAIPaymentMethod::is_payment_method_type_Valid() const{
    return m_payment_method_type_isValid;
}

OAIRecipientAccountReference OAIPaymentMethod::getRecipientAccountReference() const {
    return m_recipient_account_reference;
}
void OAIPaymentMethod::setRecipientAccountReference(const OAIRecipientAccountReference &recipient_account_reference) {
    m_recipient_account_reference = recipient_account_reference;
    m_recipient_account_reference_isSet = true;
}

bool OAIPaymentMethod::is_recipient_account_reference_Set() const{
    return m_recipient_account_reference_isSet;
}

bool OAIPaymentMethod::is_recipient_account_reference_Valid() const{
    return m_recipient_account_reference_isValid;
}

bool OAIPaymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_account_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
