/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeposit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeposit::OAIDeposit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeposit::OAIDeposit() {
    this->initializeModel();
}

OAIDeposit::~OAIDeposit() {}

void OAIDeposit::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_due_in_isSet = false;
    m_due_in_isValid = false;

    m_payment_methods_isSet = false;
    m_payment_methods_isValid = false;
}

void OAIDeposit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeposit::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_due_in_isValid = ::OpenAPI::fromJsonValue(m_due_in, json[QString("dueIn")]);
    m_due_in_isSet = !json[QString("dueIn")].isNull() && m_due_in_isValid;

    m_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_payment_methods, json[QString("paymentMethods")]);
    m_payment_methods_isSet = !json[QString("paymentMethods")].isNull() && m_payment_methods_isValid;
}

QString OAIDeposit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeposit::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_due_in.isSet()) {
        obj.insert(QString("dueIn"), ::OpenAPI::toJsonValue(m_due_in));
    }
    if (m_payment_methods.size() > 0) {
        obj.insert(QString("paymentMethods"), ::OpenAPI::toJsonValue(m_payment_methods));
    }
    return obj;
}

OAIAmount OAIDeposit::getAmount() const {
    return m_amount;
}
void OAIDeposit::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDeposit::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDeposit::is_amount_Valid() const{
    return m_amount_isValid;
}

OAITimeDuration OAIDeposit::getDueIn() const {
    return m_due_in;
}
void OAIDeposit::setDueIn(const OAITimeDuration &due_in) {
    m_due_in = due_in;
    m_due_in_isSet = true;
}

bool OAIDeposit::is_due_in_Set() const{
    return m_due_in_isSet;
}

bool OAIDeposit::is_due_in_Valid() const{
    return m_due_in_isValid;
}

QList<OAIPaymentMethod> OAIDeposit::getPaymentMethods() const {
    return m_payment_methods;
}
void OAIDeposit::setPaymentMethods(const QList<OAIPaymentMethod> &payment_methods) {
    m_payment_methods = payment_methods;
    m_payment_methods_isSet = true;
}

bool OAIDeposit::is_payment_methods_Set() const{
    return m_payment_methods_isSet;
}

bool OAIDeposit::is_payment_methods_Valid() const{
    return m_payment_methods_isValid;
}

bool OAIDeposit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeposit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
