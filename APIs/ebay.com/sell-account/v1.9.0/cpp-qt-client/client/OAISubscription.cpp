/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_subscription_level_isSet = false;
    m_subscription_level_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_subscription_level_isValid = ::OpenAPI::fromJsonValue(m_subscription_level, json[QString("subscriptionLevel")]);
    m_subscription_level_isSet = !json[QString("subscriptionLevel")].isNull() && m_subscription_level_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("subscriptionType")]);
    m_subscription_type_isSet = !json[QString("subscriptionType")].isNull() && m_subscription_type_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_subscription_level_isSet) {
        obj.insert(QString("subscriptionLevel"), ::OpenAPI::toJsonValue(m_subscription_level));
    }
    if (m_subscription_type_isSet) {
        obj.insert(QString("subscriptionType"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    if (m_term.isSet()) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

QString OAISubscription::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAISubscription::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAISubscription::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAISubscription::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAISubscription::getSubscriptionId() const {
    return m_subscription_id;
}
void OAISubscription::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAISubscription::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAISubscription::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAISubscription::getSubscriptionLevel() const {
    return m_subscription_level;
}
void OAISubscription::setSubscriptionLevel(const QString &subscription_level) {
    m_subscription_level = subscription_level;
    m_subscription_level_isSet = true;
}

bool OAISubscription::is_subscription_level_Set() const{
    return m_subscription_level_isSet;
}

bool OAISubscription::is_subscription_level_Valid() const{
    return m_subscription_level_isValid;
}

QString OAISubscription::getSubscriptionType() const {
    return m_subscription_type;
}
void OAISubscription::setSubscriptionType(const QString &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAISubscription::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAISubscription::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

OAITimeDuration OAISubscription::getTerm() const {
    return m_term;
}
void OAISubscription::setTerm(const OAITimeDuration &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAISubscription::is_term_Set() const{
    return m_term_isSet;
}

bool OAISubscription::is_term_Valid() const{
    return m_term_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
