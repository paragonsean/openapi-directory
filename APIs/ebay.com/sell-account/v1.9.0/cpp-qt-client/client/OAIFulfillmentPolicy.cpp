/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFulfillmentPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFulfillmentPolicy::OAIFulfillmentPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFulfillmentPolicy::OAIFulfillmentPolicy() {
    this->initializeModel();
}

OAIFulfillmentPolicy::~OAIFulfillmentPolicy() {}

void OAIFulfillmentPolicy::initializeModel() {

    m_category_types_isSet = false;
    m_category_types_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_freight_shipping_isSet = false;
    m_freight_shipping_isValid = false;

    m_fulfillment_policy_id_isSet = false;
    m_fulfillment_policy_id_isValid = false;

    m_global_shipping_isSet = false;
    m_global_shipping_isValid = false;

    m_handling_time_isSet = false;
    m_handling_time_isValid = false;

    m_local_pickup_isSet = false;
    m_local_pickup_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pickup_drop_off_isSet = false;
    m_pickup_drop_off_isValid = false;

    m_ship_to_locations_isSet = false;
    m_ship_to_locations_isValid = false;

    m_shipping_options_isSet = false;
    m_shipping_options_isValid = false;
}

void OAIFulfillmentPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFulfillmentPolicy::fromJsonObject(QJsonObject json) {

    m_category_types_isValid = ::OpenAPI::fromJsonValue(m_category_types, json[QString("categoryTypes")]);
    m_category_types_isSet = !json[QString("categoryTypes")].isNull() && m_category_types_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_freight_shipping_isValid = ::OpenAPI::fromJsonValue(m_freight_shipping, json[QString("freightShipping")]);
    m_freight_shipping_isSet = !json[QString("freightShipping")].isNull() && m_freight_shipping_isValid;

    m_fulfillment_policy_id_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_policy_id, json[QString("fulfillmentPolicyId")]);
    m_fulfillment_policy_id_isSet = !json[QString("fulfillmentPolicyId")].isNull() && m_fulfillment_policy_id_isValid;

    m_global_shipping_isValid = ::OpenAPI::fromJsonValue(m_global_shipping, json[QString("globalShipping")]);
    m_global_shipping_isSet = !json[QString("globalShipping")].isNull() && m_global_shipping_isValid;

    m_handling_time_isValid = ::OpenAPI::fromJsonValue(m_handling_time, json[QString("handlingTime")]);
    m_handling_time_isSet = !json[QString("handlingTime")].isNull() && m_handling_time_isValid;

    m_local_pickup_isValid = ::OpenAPI::fromJsonValue(m_local_pickup, json[QString("localPickup")]);
    m_local_pickup_isSet = !json[QString("localPickup")].isNull() && m_local_pickup_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pickup_drop_off_isValid = ::OpenAPI::fromJsonValue(m_pickup_drop_off, json[QString("pickupDropOff")]);
    m_pickup_drop_off_isSet = !json[QString("pickupDropOff")].isNull() && m_pickup_drop_off_isValid;

    m_ship_to_locations_isValid = ::OpenAPI::fromJsonValue(m_ship_to_locations, json[QString("shipToLocations")]);
    m_ship_to_locations_isSet = !json[QString("shipToLocations")].isNull() && m_ship_to_locations_isValid;

    m_shipping_options_isValid = ::OpenAPI::fromJsonValue(m_shipping_options, json[QString("shippingOptions")]);
    m_shipping_options_isSet = !json[QString("shippingOptions")].isNull() && m_shipping_options_isValid;
}

QString OAIFulfillmentPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFulfillmentPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_category_types.size() > 0) {
        obj.insert(QString("categoryTypes"), ::OpenAPI::toJsonValue(m_category_types));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_freight_shipping_isSet) {
        obj.insert(QString("freightShipping"), ::OpenAPI::toJsonValue(m_freight_shipping));
    }
    if (m_fulfillment_policy_id_isSet) {
        obj.insert(QString("fulfillmentPolicyId"), ::OpenAPI::toJsonValue(m_fulfillment_policy_id));
    }
    if (m_global_shipping_isSet) {
        obj.insert(QString("globalShipping"), ::OpenAPI::toJsonValue(m_global_shipping));
    }
    if (m_handling_time.isSet()) {
        obj.insert(QString("handlingTime"), ::OpenAPI::toJsonValue(m_handling_time));
    }
    if (m_local_pickup_isSet) {
        obj.insert(QString("localPickup"), ::OpenAPI::toJsonValue(m_local_pickup));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pickup_drop_off_isSet) {
        obj.insert(QString("pickupDropOff"), ::OpenAPI::toJsonValue(m_pickup_drop_off));
    }
    if (m_ship_to_locations.isSet()) {
        obj.insert(QString("shipToLocations"), ::OpenAPI::toJsonValue(m_ship_to_locations));
    }
    if (m_shipping_options.size() > 0) {
        obj.insert(QString("shippingOptions"), ::OpenAPI::toJsonValue(m_shipping_options));
    }
    return obj;
}

QList<OAICategoryType> OAIFulfillmentPolicy::getCategoryTypes() const {
    return m_category_types;
}
void OAIFulfillmentPolicy::setCategoryTypes(const QList<OAICategoryType> &category_types) {
    m_category_types = category_types;
    m_category_types_isSet = true;
}

bool OAIFulfillmentPolicy::is_category_types_Set() const{
    return m_category_types_isSet;
}

bool OAIFulfillmentPolicy::is_category_types_Valid() const{
    return m_category_types_isValid;
}

QString OAIFulfillmentPolicy::getDescription() const {
    return m_description;
}
void OAIFulfillmentPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFulfillmentPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFulfillmentPolicy::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIFulfillmentPolicy::isFreightShipping() const {
    return m_freight_shipping;
}
void OAIFulfillmentPolicy::setFreightShipping(const bool &freight_shipping) {
    m_freight_shipping = freight_shipping;
    m_freight_shipping_isSet = true;
}

bool OAIFulfillmentPolicy::is_freight_shipping_Set() const{
    return m_freight_shipping_isSet;
}

bool OAIFulfillmentPolicy::is_freight_shipping_Valid() const{
    return m_freight_shipping_isValid;
}

QString OAIFulfillmentPolicy::getFulfillmentPolicyId() const {
    return m_fulfillment_policy_id;
}
void OAIFulfillmentPolicy::setFulfillmentPolicyId(const QString &fulfillment_policy_id) {
    m_fulfillment_policy_id = fulfillment_policy_id;
    m_fulfillment_policy_id_isSet = true;
}

bool OAIFulfillmentPolicy::is_fulfillment_policy_id_Set() const{
    return m_fulfillment_policy_id_isSet;
}

bool OAIFulfillmentPolicy::is_fulfillment_policy_id_Valid() const{
    return m_fulfillment_policy_id_isValid;
}

bool OAIFulfillmentPolicy::isGlobalShipping() const {
    return m_global_shipping;
}
void OAIFulfillmentPolicy::setGlobalShipping(const bool &global_shipping) {
    m_global_shipping = global_shipping;
    m_global_shipping_isSet = true;
}

bool OAIFulfillmentPolicy::is_global_shipping_Set() const{
    return m_global_shipping_isSet;
}

bool OAIFulfillmentPolicy::is_global_shipping_Valid() const{
    return m_global_shipping_isValid;
}

OAITimeDuration OAIFulfillmentPolicy::getHandlingTime() const {
    return m_handling_time;
}
void OAIFulfillmentPolicy::setHandlingTime(const OAITimeDuration &handling_time) {
    m_handling_time = handling_time;
    m_handling_time_isSet = true;
}

bool OAIFulfillmentPolicy::is_handling_time_Set() const{
    return m_handling_time_isSet;
}

bool OAIFulfillmentPolicy::is_handling_time_Valid() const{
    return m_handling_time_isValid;
}

bool OAIFulfillmentPolicy::isLocalPickup() const {
    return m_local_pickup;
}
void OAIFulfillmentPolicy::setLocalPickup(const bool &local_pickup) {
    m_local_pickup = local_pickup;
    m_local_pickup_isSet = true;
}

bool OAIFulfillmentPolicy::is_local_pickup_Set() const{
    return m_local_pickup_isSet;
}

bool OAIFulfillmentPolicy::is_local_pickup_Valid() const{
    return m_local_pickup_isValid;
}

QString OAIFulfillmentPolicy::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIFulfillmentPolicy::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIFulfillmentPolicy::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIFulfillmentPolicy::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAIFulfillmentPolicy::getName() const {
    return m_name;
}
void OAIFulfillmentPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFulfillmentPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFulfillmentPolicy::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFulfillmentPolicy::isPickupDropOff() const {
    return m_pickup_drop_off;
}
void OAIFulfillmentPolicy::setPickupDropOff(const bool &pickup_drop_off) {
    m_pickup_drop_off = pickup_drop_off;
    m_pickup_drop_off_isSet = true;
}

bool OAIFulfillmentPolicy::is_pickup_drop_off_Set() const{
    return m_pickup_drop_off_isSet;
}

bool OAIFulfillmentPolicy::is_pickup_drop_off_Valid() const{
    return m_pickup_drop_off_isValid;
}

OAIRegionSet OAIFulfillmentPolicy::getShipToLocations() const {
    return m_ship_to_locations;
}
void OAIFulfillmentPolicy::setShipToLocations(const OAIRegionSet &ship_to_locations) {
    m_ship_to_locations = ship_to_locations;
    m_ship_to_locations_isSet = true;
}

bool OAIFulfillmentPolicy::is_ship_to_locations_Set() const{
    return m_ship_to_locations_isSet;
}

bool OAIFulfillmentPolicy::is_ship_to_locations_Valid() const{
    return m_ship_to_locations_isValid;
}

QList<OAIShippingOption> OAIFulfillmentPolicy::getShippingOptions() const {
    return m_shipping_options;
}
void OAIFulfillmentPolicy::setShippingOptions(const QList<OAIShippingOption> &shipping_options) {
    m_shipping_options = shipping_options;
    m_shipping_options_isSet = true;
}

bool OAIFulfillmentPolicy::is_shipping_options_Set() const{
    return m_shipping_options_isSet;
}

bool OAIFulfillmentPolicy::is_shipping_options_Valid() const{
    return m_shipping_options_isValid;
}

bool OAIFulfillmentPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handling_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_drop_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFulfillmentPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
