/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReturnPolicyResponse.h
 *
 * The response payload for the &lt;b&gt;getReturnPolicies&lt;/b&gt; method. &lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: Pagination has not yet been enabled for &lt;b&gt;getReturnPolicies&lt;/b&gt;, so all of the pagination-related fields are for future use.&lt;/span&gt;
 */

#ifndef OAIReturnPolicyResponse_H
#define OAIReturnPolicyResponse_H

#include <QJsonObject>

#include "OAIReturnPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReturnPolicy;

class OAIReturnPolicyResponse : public OAIObject {
public:
    OAIReturnPolicyResponse();
    OAIReturnPolicyResponse(QString json);
    ~OAIReturnPolicyResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    QString getNext() const;
    void setNext(const QString &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QString getPrev() const;
    void setPrev(const QString &prev);
    bool is_prev_Set() const;
    bool is_prev_Valid() const;

    QList<OAIReturnPolicy> getReturnPolicies() const;
    void setReturnPolicies(const QList<OAIReturnPolicy> &return_policies);
    bool is_return_policies_Set() const;
    bool is_return_policies_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    QString m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QString m_prev;
    bool m_prev_isSet;
    bool m_prev_isValid;

    QList<OAIReturnPolicy> m_return_policies;
    bool m_return_policies_isSet;
    bool m_return_policies_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReturnPolicyResponse)

#endif // OAIReturnPolicyResponse_H
