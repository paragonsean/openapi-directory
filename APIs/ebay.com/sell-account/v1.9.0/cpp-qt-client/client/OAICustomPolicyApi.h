/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomPolicyApi_H
#define OAI_OAICustomPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomPolicy.h"
#include "OAICustomPolicyCreateRequest.h"
#include "OAICustomPolicyRequest.h"
#include "OAICustomPolicyResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomPolicyApi : public QObject {
    Q_OBJECT

public:
    OAICustomPolicyApi(const int timeOut = 0);
    ~OAICustomPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    * @param[in]  oai_custom_policy_create_request OAICustomPolicyCreateRequest [required]
    */
    virtual void createCustomPolicy(const QString &x_ebay_c_marketplace_id, const OAICustomPolicyCreateRequest &oai_custom_policy_create_request);

    /**
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    * @param[in]  policy_types QString [optional]
    */
    virtual void getCustomPolicies(const QString &x_ebay_c_marketplace_id, const ::OpenAPI::OptionalParam<QString> &policy_types = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  custom_policy_id QString [required]
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    */
    virtual void getCustomPolicy(const QString &custom_policy_id, const QString &x_ebay_c_marketplace_id);

    /**
    * @param[in]  custom_policy_id QString [required]
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    * @param[in]  oai_custom_policy_request OAICustomPolicyRequest [required]
    */
    virtual void updateCustomPolicy(const QString &custom_policy_id, const QString &x_ebay_c_marketplace_id, const OAICustomPolicyRequest &oai_custom_policy_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomPolicyCallback(OAIHttpRequestWorker *worker);
    void getCustomPoliciesCallback(OAIHttpRequestWorker *worker);
    void getCustomPolicyCallback(OAIHttpRequestWorker *worker);
    void updateCustomPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomPolicySignal(OAIObject summary);
    void getCustomPoliciesSignal(OAICustomPolicyResponse summary);
    void getCustomPolicySignal(OAICustomPolicy summary);
    void updateCustomPolicySignal();


    void createCustomPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getCustomPoliciesSignalFull(OAIHttpRequestWorker *worker, OAICustomPolicyResponse summary);
    void getCustomPolicySignalFull(OAIHttpRequestWorker *worker, OAICustomPolicy summary);
    void updateCustomPolicySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createCustomPolicySignalError() instead")
    void createCustomPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomPoliciesSignalError() instead")
    void getCustomPoliciesSignalE(OAICustomPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomPoliciesSignalError(OAICustomPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomPolicySignalError() instead")
    void getCustomPolicySignalE(OAICustomPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomPolicySignalError(OAICustomPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomPolicySignalError() instead")
    void updateCustomPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomPolicySignalErrorFull() instead")
    void createCustomPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomPoliciesSignalErrorFull() instead")
    void getCustomPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomPolicySignalErrorFull() instead")
    void getCustomPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomPolicySignalErrorFull() instead")
    void updateCustomPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
