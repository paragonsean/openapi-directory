/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetReturnPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetReturnPolicyResponse::OAISetReturnPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetReturnPolicyResponse::OAISetReturnPolicyResponse() {
    this->initializeModel();
}

OAISetReturnPolicyResponse::~OAISetReturnPolicyResponse() {}

void OAISetReturnPolicyResponse::initializeModel() {

    m_category_types_isSet = false;
    m_category_types_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extended_holiday_returns_offered_isSet = false;
    m_extended_holiday_returns_offered_isValid = false;

    m_international_override_isSet = false;
    m_international_override_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_refund_method_isSet = false;
    m_refund_method_isValid = false;

    m_restocking_fee_percentage_isSet = false;
    m_restocking_fee_percentage_isValid = false;

    m_return_instructions_isSet = false;
    m_return_instructions_isValid = false;

    m_return_method_isSet = false;
    m_return_method_isValid = false;

    m_return_period_isSet = false;
    m_return_period_isValid = false;

    m_return_policy_id_isSet = false;
    m_return_policy_id_isValid = false;

    m_return_shipping_cost_payer_isSet = false;
    m_return_shipping_cost_payer_isValid = false;

    m_returns_accepted_isSet = false;
    m_returns_accepted_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAISetReturnPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetReturnPolicyResponse::fromJsonObject(QJsonObject json) {

    m_category_types_isValid = ::OpenAPI::fromJsonValue(m_category_types, json[QString("categoryTypes")]);
    m_category_types_isSet = !json[QString("categoryTypes")].isNull() && m_category_types_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extended_holiday_returns_offered_isValid = ::OpenAPI::fromJsonValue(m_extended_holiday_returns_offered, json[QString("extendedHolidayReturnsOffered")]);
    m_extended_holiday_returns_offered_isSet = !json[QString("extendedHolidayReturnsOffered")].isNull() && m_extended_holiday_returns_offered_isValid;

    m_international_override_isValid = ::OpenAPI::fromJsonValue(m_international_override, json[QString("internationalOverride")]);
    m_international_override_isSet = !json[QString("internationalOverride")].isNull() && m_international_override_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_refund_method_isValid = ::OpenAPI::fromJsonValue(m_refund_method, json[QString("refundMethod")]);
    m_refund_method_isSet = !json[QString("refundMethod")].isNull() && m_refund_method_isValid;

    m_restocking_fee_percentage_isValid = ::OpenAPI::fromJsonValue(m_restocking_fee_percentage, json[QString("restockingFeePercentage")]);
    m_restocking_fee_percentage_isSet = !json[QString("restockingFeePercentage")].isNull() && m_restocking_fee_percentage_isValid;

    m_return_instructions_isValid = ::OpenAPI::fromJsonValue(m_return_instructions, json[QString("returnInstructions")]);
    m_return_instructions_isSet = !json[QString("returnInstructions")].isNull() && m_return_instructions_isValid;

    m_return_method_isValid = ::OpenAPI::fromJsonValue(m_return_method, json[QString("returnMethod")]);
    m_return_method_isSet = !json[QString("returnMethod")].isNull() && m_return_method_isValid;

    m_return_period_isValid = ::OpenAPI::fromJsonValue(m_return_period, json[QString("returnPeriod")]);
    m_return_period_isSet = !json[QString("returnPeriod")].isNull() && m_return_period_isValid;

    m_return_policy_id_isValid = ::OpenAPI::fromJsonValue(m_return_policy_id, json[QString("returnPolicyId")]);
    m_return_policy_id_isSet = !json[QString("returnPolicyId")].isNull() && m_return_policy_id_isValid;

    m_return_shipping_cost_payer_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_cost_payer, json[QString("returnShippingCostPayer")]);
    m_return_shipping_cost_payer_isSet = !json[QString("returnShippingCostPayer")].isNull() && m_return_shipping_cost_payer_isValid;

    m_returns_accepted_isValid = ::OpenAPI::fromJsonValue(m_returns_accepted, json[QString("returnsAccepted")]);
    m_returns_accepted_isSet = !json[QString("returnsAccepted")].isNull() && m_returns_accepted_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAISetReturnPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetReturnPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_category_types.size() > 0) {
        obj.insert(QString("categoryTypes"), ::OpenAPI::toJsonValue(m_category_types));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extended_holiday_returns_offered_isSet) {
        obj.insert(QString("extendedHolidayReturnsOffered"), ::OpenAPI::toJsonValue(m_extended_holiday_returns_offered));
    }
    if (m_international_override.isSet()) {
        obj.insert(QString("internationalOverride"), ::OpenAPI::toJsonValue(m_international_override));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_refund_method_isSet) {
        obj.insert(QString("refundMethod"), ::OpenAPI::toJsonValue(m_refund_method));
    }
    if (m_restocking_fee_percentage_isSet) {
        obj.insert(QString("restockingFeePercentage"), ::OpenAPI::toJsonValue(m_restocking_fee_percentage));
    }
    if (m_return_instructions_isSet) {
        obj.insert(QString("returnInstructions"), ::OpenAPI::toJsonValue(m_return_instructions));
    }
    if (m_return_method_isSet) {
        obj.insert(QString("returnMethod"), ::OpenAPI::toJsonValue(m_return_method));
    }
    if (m_return_period.isSet()) {
        obj.insert(QString("returnPeriod"), ::OpenAPI::toJsonValue(m_return_period));
    }
    if (m_return_policy_id_isSet) {
        obj.insert(QString("returnPolicyId"), ::OpenAPI::toJsonValue(m_return_policy_id));
    }
    if (m_return_shipping_cost_payer_isSet) {
        obj.insert(QString("returnShippingCostPayer"), ::OpenAPI::toJsonValue(m_return_shipping_cost_payer));
    }
    if (m_returns_accepted_isSet) {
        obj.insert(QString("returnsAccepted"), ::OpenAPI::toJsonValue(m_returns_accepted));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAICategoryType> OAISetReturnPolicyResponse::getCategoryTypes() const {
    return m_category_types;
}
void OAISetReturnPolicyResponse::setCategoryTypes(const QList<OAICategoryType> &category_types) {
    m_category_types = category_types;
    m_category_types_isSet = true;
}

bool OAISetReturnPolicyResponse::is_category_types_Set() const{
    return m_category_types_isSet;
}

bool OAISetReturnPolicyResponse::is_category_types_Valid() const{
    return m_category_types_isValid;
}

QString OAISetReturnPolicyResponse::getDescription() const {
    return m_description;
}
void OAISetReturnPolicyResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISetReturnPolicyResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAISetReturnPolicyResponse::is_description_Valid() const{
    return m_description_isValid;
}

bool OAISetReturnPolicyResponse::isExtendedHolidayReturnsOffered() const {
    return m_extended_holiday_returns_offered;
}
void OAISetReturnPolicyResponse::setExtendedHolidayReturnsOffered(const bool &extended_holiday_returns_offered) {
    m_extended_holiday_returns_offered = extended_holiday_returns_offered;
    m_extended_holiday_returns_offered_isSet = true;
}

bool OAISetReturnPolicyResponse::is_extended_holiday_returns_offered_Set() const{
    return m_extended_holiday_returns_offered_isSet;
}

bool OAISetReturnPolicyResponse::is_extended_holiday_returns_offered_Valid() const{
    return m_extended_holiday_returns_offered_isValid;
}

OAIInternationalReturnOverrideType OAISetReturnPolicyResponse::getInternationalOverride() const {
    return m_international_override;
}
void OAISetReturnPolicyResponse::setInternationalOverride(const OAIInternationalReturnOverrideType &international_override) {
    m_international_override = international_override;
    m_international_override_isSet = true;
}

bool OAISetReturnPolicyResponse::is_international_override_Set() const{
    return m_international_override_isSet;
}

bool OAISetReturnPolicyResponse::is_international_override_Valid() const{
    return m_international_override_isValid;
}

QString OAISetReturnPolicyResponse::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAISetReturnPolicyResponse::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAISetReturnPolicyResponse::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAISetReturnPolicyResponse::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAISetReturnPolicyResponse::getName() const {
    return m_name;
}
void OAISetReturnPolicyResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISetReturnPolicyResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAISetReturnPolicyResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISetReturnPolicyResponse::getRefundMethod() const {
    return m_refund_method;
}
void OAISetReturnPolicyResponse::setRefundMethod(const QString &refund_method) {
    m_refund_method = refund_method;
    m_refund_method_isSet = true;
}

bool OAISetReturnPolicyResponse::is_refund_method_Set() const{
    return m_refund_method_isSet;
}

bool OAISetReturnPolicyResponse::is_refund_method_Valid() const{
    return m_refund_method_isValid;
}

QString OAISetReturnPolicyResponse::getRestockingFeePercentage() const {
    return m_restocking_fee_percentage;
}
void OAISetReturnPolicyResponse::setRestockingFeePercentage(const QString &restocking_fee_percentage) {
    m_restocking_fee_percentage = restocking_fee_percentage;
    m_restocking_fee_percentage_isSet = true;
}

bool OAISetReturnPolicyResponse::is_restocking_fee_percentage_Set() const{
    return m_restocking_fee_percentage_isSet;
}

bool OAISetReturnPolicyResponse::is_restocking_fee_percentage_Valid() const{
    return m_restocking_fee_percentage_isValid;
}

QString OAISetReturnPolicyResponse::getReturnInstructions() const {
    return m_return_instructions;
}
void OAISetReturnPolicyResponse::setReturnInstructions(const QString &return_instructions) {
    m_return_instructions = return_instructions;
    m_return_instructions_isSet = true;
}

bool OAISetReturnPolicyResponse::is_return_instructions_Set() const{
    return m_return_instructions_isSet;
}

bool OAISetReturnPolicyResponse::is_return_instructions_Valid() const{
    return m_return_instructions_isValid;
}

QString OAISetReturnPolicyResponse::getReturnMethod() const {
    return m_return_method;
}
void OAISetReturnPolicyResponse::setReturnMethod(const QString &return_method) {
    m_return_method = return_method;
    m_return_method_isSet = true;
}

bool OAISetReturnPolicyResponse::is_return_method_Set() const{
    return m_return_method_isSet;
}

bool OAISetReturnPolicyResponse::is_return_method_Valid() const{
    return m_return_method_isValid;
}

OAITimeDuration OAISetReturnPolicyResponse::getReturnPeriod() const {
    return m_return_period;
}
void OAISetReturnPolicyResponse::setReturnPeriod(const OAITimeDuration &return_period) {
    m_return_period = return_period;
    m_return_period_isSet = true;
}

bool OAISetReturnPolicyResponse::is_return_period_Set() const{
    return m_return_period_isSet;
}

bool OAISetReturnPolicyResponse::is_return_period_Valid() const{
    return m_return_period_isValid;
}

QString OAISetReturnPolicyResponse::getReturnPolicyId() const {
    return m_return_policy_id;
}
void OAISetReturnPolicyResponse::setReturnPolicyId(const QString &return_policy_id) {
    m_return_policy_id = return_policy_id;
    m_return_policy_id_isSet = true;
}

bool OAISetReturnPolicyResponse::is_return_policy_id_Set() const{
    return m_return_policy_id_isSet;
}

bool OAISetReturnPolicyResponse::is_return_policy_id_Valid() const{
    return m_return_policy_id_isValid;
}

QString OAISetReturnPolicyResponse::getReturnShippingCostPayer() const {
    return m_return_shipping_cost_payer;
}
void OAISetReturnPolicyResponse::setReturnShippingCostPayer(const QString &return_shipping_cost_payer) {
    m_return_shipping_cost_payer = return_shipping_cost_payer;
    m_return_shipping_cost_payer_isSet = true;
}

bool OAISetReturnPolicyResponse::is_return_shipping_cost_payer_Set() const{
    return m_return_shipping_cost_payer_isSet;
}

bool OAISetReturnPolicyResponse::is_return_shipping_cost_payer_Valid() const{
    return m_return_shipping_cost_payer_isValid;
}

bool OAISetReturnPolicyResponse::isReturnsAccepted() const {
    return m_returns_accepted;
}
void OAISetReturnPolicyResponse::setReturnsAccepted(const bool &returns_accepted) {
    m_returns_accepted = returns_accepted;
    m_returns_accepted_isSet = true;
}

bool OAISetReturnPolicyResponse::is_returns_accepted_Set() const{
    return m_returns_accepted_isSet;
}

bool OAISetReturnPolicyResponse::is_returns_accepted_Valid() const{
    return m_returns_accepted_isValid;
}

QList<OAIError> OAISetReturnPolicyResponse::getWarnings() const {
    return m_warnings;
}
void OAISetReturnPolicyResponse::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAISetReturnPolicyResponse::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAISetReturnPolicyResponse::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAISetReturnPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_holiday_returns_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restocking_fee_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_cost_payer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returns_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetReturnPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
