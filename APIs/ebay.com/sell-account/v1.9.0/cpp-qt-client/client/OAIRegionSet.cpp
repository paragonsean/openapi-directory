/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionSet::OAIRegionSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionSet::OAIRegionSet() {
    this->initializeModel();
}

OAIRegionSet::~OAIRegionSet() {}

void OAIRegionSet::initializeModel() {

    m_region_excluded_isSet = false;
    m_region_excluded_isValid = false;

    m_region_included_isSet = false;
    m_region_included_isValid = false;
}

void OAIRegionSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionSet::fromJsonObject(QJsonObject json) {

    m_region_excluded_isValid = ::OpenAPI::fromJsonValue(m_region_excluded, json[QString("regionExcluded")]);
    m_region_excluded_isSet = !json[QString("regionExcluded")].isNull() && m_region_excluded_isValid;

    m_region_included_isValid = ::OpenAPI::fromJsonValue(m_region_included, json[QString("regionIncluded")]);
    m_region_included_isSet = !json[QString("regionIncluded")].isNull() && m_region_included_isValid;
}

QString OAIRegionSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionSet::asJsonObject() const {
    QJsonObject obj;
    if (m_region_excluded.size() > 0) {
        obj.insert(QString("regionExcluded"), ::OpenAPI::toJsonValue(m_region_excluded));
    }
    if (m_region_included.size() > 0) {
        obj.insert(QString("regionIncluded"), ::OpenAPI::toJsonValue(m_region_included));
    }
    return obj;
}

QList<OAIRegion> OAIRegionSet::getRegionExcluded() const {
    return m_region_excluded;
}
void OAIRegionSet::setRegionExcluded(const QList<OAIRegion> &region_excluded) {
    m_region_excluded = region_excluded;
    m_region_excluded_isSet = true;
}

bool OAIRegionSet::is_region_excluded_Set() const{
    return m_region_excluded_isSet;
}

bool OAIRegionSet::is_region_excluded_Valid() const{
    return m_region_excluded_isValid;
}

QList<OAIRegion> OAIRegionSet::getRegionIncluded() const {
    return m_region_included;
}
void OAIRegionSet::setRegionIncluded(const QList<OAIRegion> &region_included) {
    m_region_included = region_included;
    m_region_included_isSet = true;
}

bool OAIRegionSet::is_region_included_Set() const{
    return m_region_included_isSet;
}

bool OAIRegionSet::is_region_included_Valid() const{
    return m_region_included_isValid;
}

bool OAIRegionSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_excluded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
