/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKycCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKycCheck::OAIKycCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKycCheck::OAIKycCheck() {
    this->initializeModel();
}

OAIKycCheck::~OAIKycCheck() {}

void OAIKycCheck::initializeModel() {

    m_alert_isSet = false;
    m_alert_isValid = false;

    m_data_required_isSet = false;
    m_data_required_isValid = false;

    m_detail_message_isSet = false;
    m_detail_message_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_remedy_url_isSet = false;
    m_remedy_url_isValid = false;
}

void OAIKycCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKycCheck::fromJsonObject(QJsonObject json) {

    m_alert_isValid = ::OpenAPI::fromJsonValue(m_alert, json[QString("alert")]);
    m_alert_isSet = !json[QString("alert")].isNull() && m_alert_isValid;

    m_data_required_isValid = ::OpenAPI::fromJsonValue(m_data_required, json[QString("dataRequired")]);
    m_data_required_isSet = !json[QString("dataRequired")].isNull() && m_data_required_isValid;

    m_detail_message_isValid = ::OpenAPI::fromJsonValue(m_detail_message, json[QString("detailMessage")]);
    m_detail_message_isSet = !json[QString("detailMessage")].isNull() && m_detail_message_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_remedy_url_isValid = ::OpenAPI::fromJsonValue(m_remedy_url, json[QString("remedyUrl")]);
    m_remedy_url_isSet = !json[QString("remedyUrl")].isNull() && m_remedy_url_isValid;
}

QString OAIKycCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKycCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_isSet) {
        obj.insert(QString("alert"), ::OpenAPI::toJsonValue(m_alert));
    }
    if (m_data_required_isSet) {
        obj.insert(QString("dataRequired"), ::OpenAPI::toJsonValue(m_data_required));
    }
    if (m_detail_message_isSet) {
        obj.insert(QString("detailMessage"), ::OpenAPI::toJsonValue(m_detail_message));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_remedy_url_isSet) {
        obj.insert(QString("remedyUrl"), ::OpenAPI::toJsonValue(m_remedy_url));
    }
    return obj;
}

QString OAIKycCheck::getAlert() const {
    return m_alert;
}
void OAIKycCheck::setAlert(const QString &alert) {
    m_alert = alert;
    m_alert_isSet = true;
}

bool OAIKycCheck::is_alert_Set() const{
    return m_alert_isSet;
}

bool OAIKycCheck::is_alert_Valid() const{
    return m_alert_isValid;
}

QString OAIKycCheck::getDataRequired() const {
    return m_data_required;
}
void OAIKycCheck::setDataRequired(const QString &data_required) {
    m_data_required = data_required;
    m_data_required_isSet = true;
}

bool OAIKycCheck::is_data_required_Set() const{
    return m_data_required_isSet;
}

bool OAIKycCheck::is_data_required_Valid() const{
    return m_data_required_isValid;
}

QString OAIKycCheck::getDetailMessage() const {
    return m_detail_message;
}
void OAIKycCheck::setDetailMessage(const QString &detail_message) {
    m_detail_message = detail_message;
    m_detail_message_isSet = true;
}

bool OAIKycCheck::is_detail_message_Set() const{
    return m_detail_message_isSet;
}

bool OAIKycCheck::is_detail_message_Valid() const{
    return m_detail_message_isValid;
}

QString OAIKycCheck::getDueDate() const {
    return m_due_date;
}
void OAIKycCheck::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIKycCheck::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIKycCheck::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIKycCheck::getRemedyUrl() const {
    return m_remedy_url;
}
void OAIKycCheck::setRemedyUrl(const QString &remedy_url) {
    m_remedy_url = remedy_url;
    m_remedy_url_isSet = true;
}

bool OAIKycCheck::is_remedy_url_Set() const{
    return m_remedy_url_isSet;
}

bool OAIKycCheck::is_remedy_url_Valid() const{
    return m_remedy_url_isValid;
}

bool OAIKycCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remedy_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKycCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
