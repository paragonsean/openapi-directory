/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentPolicyApi_H
#define OAI_OAIPaymentPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPaymentPolicy.h"
#include "OAIPaymentPolicyRequest.h"
#include "OAIPaymentPolicyResponse.h"
#include "OAISetPaymentPolicyResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentPolicyApi(const int timeOut = 0);
    ~OAIPaymentPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_policy_request OAIPaymentPolicyRequest [required]
    */
    virtual void createPaymentPolicy(const OAIPaymentPolicyRequest &oai_payment_policy_request);

    /**
    * @param[in]  payment_policy_id QString [required]
    */
    virtual void deletePaymentPolicy(const QString &payment_policy_id);

    /**
    * @param[in]  marketplace_id QString [required]
    */
    virtual void getPaymentPolicies(const QString &marketplace_id);

    /**
    * @param[in]  payment_policy_id QString [required]
    */
    virtual void getPaymentPolicy(const QString &payment_policy_id);

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void getPaymentPolicyByName(const QString &marketplace_id, const QString &name);

    /**
    * @param[in]  payment_policy_id QString [required]
    * @param[in]  oai_payment_policy_request OAIPaymentPolicyRequest [required]
    */
    virtual void updatePaymentPolicy(const QString &payment_policy_id, const OAIPaymentPolicyRequest &oai_payment_policy_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPaymentPolicyCallback(OAIHttpRequestWorker *worker);
    void deletePaymentPolicyCallback(OAIHttpRequestWorker *worker);
    void getPaymentPoliciesCallback(OAIHttpRequestWorker *worker);
    void getPaymentPolicyCallback(OAIHttpRequestWorker *worker);
    void getPaymentPolicyByNameCallback(OAIHttpRequestWorker *worker);
    void updatePaymentPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPaymentPolicySignal(OAISetPaymentPolicyResponse summary);
    void deletePaymentPolicySignal();
    void getPaymentPoliciesSignal(OAIPaymentPolicyResponse summary);
    void getPaymentPolicySignal(OAIPaymentPolicy summary);
    void getPaymentPolicyByNameSignal(OAIPaymentPolicy summary);
    void updatePaymentPolicySignal(OAISetPaymentPolicyResponse summary);


    void createPaymentPolicySignalFull(OAIHttpRequestWorker *worker, OAISetPaymentPolicyResponse summary);
    void deletePaymentPolicySignalFull(OAIHttpRequestWorker *worker);
    void getPaymentPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentPolicyResponse summary);
    void getPaymentPolicySignalFull(OAIHttpRequestWorker *worker, OAIPaymentPolicy summary);
    void getPaymentPolicyByNameSignalFull(OAIHttpRequestWorker *worker, OAIPaymentPolicy summary);
    void updatePaymentPolicySignalFull(OAIHttpRequestWorker *worker, OAISetPaymentPolicyResponse summary);

    Q_DECL_DEPRECATED_X("Use createPaymentPolicySignalError() instead")
    void createPaymentPolicySignalE(OAISetPaymentPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentPolicySignalError(OAISetPaymentPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePaymentPolicySignalError() instead")
    void deletePaymentPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePaymentPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentPoliciesSignalError() instead")
    void getPaymentPoliciesSignalE(OAIPaymentPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentPoliciesSignalError(OAIPaymentPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentPolicySignalError() instead")
    void getPaymentPolicySignalE(OAIPaymentPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentPolicySignalError(OAIPaymentPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentPolicyByNameSignalError() instead")
    void getPaymentPolicyByNameSignalE(OAIPaymentPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentPolicyByNameSignalError(OAIPaymentPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentPolicySignalError() instead")
    void updatePaymentPolicySignalE(OAISetPaymentPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentPolicySignalError(OAISetPaymentPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPaymentPolicySignalErrorFull() instead")
    void createPaymentPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePaymentPolicySignalErrorFull() instead")
    void deletePaymentPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePaymentPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentPoliciesSignalErrorFull() instead")
    void getPaymentPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentPolicySignalErrorFull() instead")
    void getPaymentPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentPolicyByNameSignalErrorFull() instead")
    void getPaymentPolicyByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentPolicyByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentPolicySignalErrorFull() instead")
    void updatePaymentPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
