/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompactCustomPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompactCustomPolicyResponse::OAICompactCustomPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompactCustomPolicyResponse::OAICompactCustomPolicyResponse() {
    this->initializeModel();
}

OAICompactCustomPolicyResponse::~OAICompactCustomPolicyResponse() {}

void OAICompactCustomPolicyResponse::initializeModel() {

    m_custom_policy_id_isSet = false;
    m_custom_policy_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;
}

void OAICompactCustomPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompactCustomPolicyResponse::fromJsonObject(QJsonObject json) {

    m_custom_policy_id_isValid = ::OpenAPI::fromJsonValue(m_custom_policy_id, json[QString("customPolicyId")]);
    m_custom_policy_id_isSet = !json[QString("customPolicyId")].isNull() && m_custom_policy_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;
}

QString OAICompactCustomPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompactCustomPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_policy_id_isSet) {
        obj.insert(QString("customPolicyId"), ::OpenAPI::toJsonValue(m_custom_policy_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    return obj;
}

QString OAICompactCustomPolicyResponse::getCustomPolicyId() const {
    return m_custom_policy_id;
}
void OAICompactCustomPolicyResponse::setCustomPolicyId(const QString &custom_policy_id) {
    m_custom_policy_id = custom_policy_id;
    m_custom_policy_id_isSet = true;
}

bool OAICompactCustomPolicyResponse::is_custom_policy_id_Set() const{
    return m_custom_policy_id_isSet;
}

bool OAICompactCustomPolicyResponse::is_custom_policy_id_Valid() const{
    return m_custom_policy_id_isValid;
}

QString OAICompactCustomPolicyResponse::getLabel() const {
    return m_label;
}
void OAICompactCustomPolicyResponse::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICompactCustomPolicyResponse::is_label_Set() const{
    return m_label_isSet;
}

bool OAICompactCustomPolicyResponse::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICompactCustomPolicyResponse::getName() const {
    return m_name;
}
void OAICompactCustomPolicyResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompactCustomPolicyResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompactCustomPolicyResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompactCustomPolicyResponse::getPolicyType() const {
    return m_policy_type;
}
void OAICompactCustomPolicyResponse::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAICompactCustomPolicyResponse::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAICompactCustomPolicyResponse::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

bool OAICompactCustomPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompactCustomPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
