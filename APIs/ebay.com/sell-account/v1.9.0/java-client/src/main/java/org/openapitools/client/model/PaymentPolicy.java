/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryType;
import org.openapitools.client.model.Deposit;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;b&gt;paymentPolicy&lt;/b&gt; response container, a container which defines a seller&#39;s payment business policy for a specific marketplace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentPolicy {
  public static final String SERIALIZED_NAME_CATEGORY_TYPES = "categoryTypes";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TYPES)
  private List<CategoryType> categoryTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPOSIT = "deposit";
  @SerializedName(SERIALIZED_NAME_DEPOSIT)
  private Deposit deposit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FULL_PAYMENT_DUE_IN = "fullPaymentDueIn";
  @SerializedName(SERIALIZED_NAME_FULL_PAYMENT_DUE_IN)
  private TimeDuration fullPaymentDueIn;

  public static final String SERIALIZED_NAME_IMMEDIATE_PAY = "immediatePay";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_PAY)
  private Boolean immediatePay;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUCTIONS = "paymentInstructions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUCTIONS)
  private String paymentInstructions;

  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<PaymentMethod> paymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_POLICY_ID = "paymentPolicyId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_POLICY_ID)
  private String paymentPolicyId;

  public PaymentPolicy() {
  }

  public PaymentPolicy categoryTypes(List<CategoryType> categoryTypes) {
    this.categoryTypes = categoryTypes;
    return this;
  }

  public PaymentPolicy addCategoryTypesItem(CategoryType categoryTypesItem) {
    if (this.categoryTypes == null) {
      this.categoryTypes = new ArrayList<>();
    }
    this.categoryTypes.add(categoryTypesItem);
    return this;
  }

  /**
   * This container indicates whether the fulfillment policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
   * @return categoryTypes
   */
  @javax.annotation.Nullable
  public List<CategoryType> getCategoryTypes() {
    return categoryTypes;
  }

  public void setCategoryTypes(List<CategoryType> categoryTypes) {
    this.categoryTypes = categoryTypes;
  }


  public PaymentPolicy deposit(Deposit deposit) {
    this.deposit = deposit;
    return this;
  }

  /**
   * Get deposit
   * @return deposit
   */
  @javax.annotation.Nullable
  public Deposit getDeposit() {
    return deposit;
  }

  public void setDeposit(Deposit deposit) {
    this.deposit = deposit;
  }


  public PaymentPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A seller-defined description of the payment policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages.  &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PaymentPolicy fullPaymentDueIn(TimeDuration fullPaymentDueIn) {
    this.fullPaymentDueIn = fullPaymentDueIn;
    return this;
  }

  /**
   * Get fullPaymentDueIn
   * @return fullPaymentDueIn
   */
  @javax.annotation.Nullable
  public TimeDuration getFullPaymentDueIn() {
    return fullPaymentDueIn;
  }

  public void setFullPaymentDueIn(TimeDuration fullPaymentDueIn) {
    this.fullPaymentDueIn = fullPaymentDueIn;
  }


  public PaymentPolicy immediatePay(Boolean immediatePay) {
    this.immediatePay = immediatePay;
    return this;
  }

  /**
   * If this field is returned as &lt;code&gt;true&lt;/code&gt;, immediate payment is required from the buyer for: &lt;ul&gt;&lt;li&gt;A fixed-price item&lt;/li&gt;&lt;li&gt;An auction item where the buyer uses the &#39;Buy it Now&#39; option&lt;/li&gt;&lt;li&gt;A deposit for a motor vehicle listing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;It is possible for the seller to set this field as &lt;code&gt;true&lt;/code&gt; in the payment business policy, but it will not apply in some scenarios. For example, immediate payment is not applicable for auction listings that have a winning bidder, for buyer purchases that involve the Best Offer feature, or for transactions that happen offline between the buyer and seller.
   * @return immediatePay
   */
  @javax.annotation.Nullable
  public Boolean getImmediatePay() {
    return immediatePay;
  }

  public void setImmediatePay(Boolean immediatePay) {
    this.immediatePay = immediatePay;
  }


  public PaymentPolicy marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The ID of the eBay marketplace to which the payment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public PaymentPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 64
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PaymentPolicy paymentInstructions(String paymentInstructions) {
    this.paymentInstructions = paymentInstructions;
    return this;
  }

  /**
   * Although this field may be returned for some older payment business policies, payment instructions are no longer supported by payment business policies. If this field is returned, it can be ignored and these payment instructions will not appear in any listings that use the corresponding business policy. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 1000
   * @return paymentInstructions
   */
  @javax.annotation.Nullable
  public String getPaymentInstructions() {
    return paymentInstructions;
  }

  public void setPaymentInstructions(String paymentInstructions) {
    this.paymentInstructions = paymentInstructions;
  }


  public PaymentPolicy paymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public PaymentPolicy addPaymentMethodsItem(PaymentMethod paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

  /**
   * This container is returned to show the payment methods that are accepted for the payment business policy.  &lt;br&gt;&lt;br&gt;Sellers do not have to specify any electronic payment methods for listings, so this array will often be returned empty unless the payment business policy is intended for motor vehicle listings or other items in categories where offline payments are required or supported. 
   * @return paymentMethods
   */
  @javax.annotation.Nullable
  public List<PaymentMethod> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  public PaymentPolicy paymentPolicyId(String paymentPolicyId) {
    this.paymentPolicyId = paymentPolicyId;
    return this;
  }

  /**
   * A unique eBay-assigned ID for a payment business policy. This ID is generated when the policy is created.
   * @return paymentPolicyId
   */
  @javax.annotation.Nullable
  public String getPaymentPolicyId() {
    return paymentPolicyId;
  }

  public void setPaymentPolicyId(String paymentPolicyId) {
    this.paymentPolicyId = paymentPolicyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentPolicy paymentPolicy = (PaymentPolicy) o;
    return Objects.equals(this.categoryTypes, paymentPolicy.categoryTypes) &&
        Objects.equals(this.deposit, paymentPolicy.deposit) &&
        Objects.equals(this.description, paymentPolicy.description) &&
        Objects.equals(this.fullPaymentDueIn, paymentPolicy.fullPaymentDueIn) &&
        Objects.equals(this.immediatePay, paymentPolicy.immediatePay) &&
        Objects.equals(this.marketplaceId, paymentPolicy.marketplaceId) &&
        Objects.equals(this.name, paymentPolicy.name) &&
        Objects.equals(this.paymentInstructions, paymentPolicy.paymentInstructions) &&
        Objects.equals(this.paymentMethods, paymentPolicy.paymentMethods) &&
        Objects.equals(this.paymentPolicyId, paymentPolicy.paymentPolicyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryTypes, deposit, description, fullPaymentDueIn, immediatePay, marketplaceId, name, paymentInstructions, paymentMethods, paymentPolicyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentPolicy {\n");
    sb.append("    categoryTypes: ").append(toIndentedString(categoryTypes)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fullPaymentDueIn: ").append(toIndentedString(fullPaymentDueIn)).append("\n");
    sb.append("    immediatePay: ").append(toIndentedString(immediatePay)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentInstructions: ").append(toIndentedString(paymentInstructions)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    paymentPolicyId: ").append(toIndentedString(paymentPolicyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryTypes");
    openapiFields.add("deposit");
    openapiFields.add("description");
    openapiFields.add("fullPaymentDueIn");
    openapiFields.add("immediatePay");
    openapiFields.add("marketplaceId");
    openapiFields.add("name");
    openapiFields.add("paymentInstructions");
    openapiFields.add("paymentMethods");
    openapiFields.add("paymentPolicyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentPolicy is not found in the empty JSON string", PaymentPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categoryTypes") != null && !jsonObj.get("categoryTypes").isJsonNull()) {
        JsonArray jsonArraycategoryTypes = jsonObj.getAsJsonArray("categoryTypes");
        if (jsonArraycategoryTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryTypes` to be an array in the JSON string but got `%s`", jsonObj.get("categoryTypes").toString()));
          }

          // validate the optional field `categoryTypes` (array)
          for (int i = 0; i < jsonArraycategoryTypes.size(); i++) {
            CategoryType.validateJsonElement(jsonArraycategoryTypes.get(i));
          };
        }
      }
      // validate the optional field `deposit`
      if (jsonObj.get("deposit") != null && !jsonObj.get("deposit").isJsonNull()) {
        Deposit.validateJsonElement(jsonObj.get("deposit"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `fullPaymentDueIn`
      if (jsonObj.get("fullPaymentDueIn") != null && !jsonObj.get("fullPaymentDueIn").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("fullPaymentDueIn"));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("paymentInstructions") != null && !jsonObj.get("paymentInstructions").isJsonNull()) && !jsonObj.get("paymentInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentInstructions").toString()));
      }
      if (jsonObj.get("paymentMethods") != null && !jsonObj.get("paymentMethods").isJsonNull()) {
        JsonArray jsonArraypaymentMethods = jsonObj.getAsJsonArray("paymentMethods");
        if (jsonArraypaymentMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
          }

          // validate the optional field `paymentMethods` (array)
          for (int i = 0; i < jsonArraypaymentMethods.size(); i++) {
            PaymentMethod.validateJsonElement(jsonArraypaymentMethods.get(i));
          };
        }
      }
      if ((jsonObj.get("paymentPolicyId") != null && !jsonObj.get("paymentPolicyId").isJsonNull()) && !jsonObj.get("paymentPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPolicyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentPolicy>() {
           @Override
           public void write(JsonWriter out, PaymentPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentPolicy
   * @throws IOException if the JSON string is invalid with respect to PaymentPolicy
   */
  public static PaymentPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentPolicy.class);
  }

  /**
   * Convert an instance of PaymentPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

