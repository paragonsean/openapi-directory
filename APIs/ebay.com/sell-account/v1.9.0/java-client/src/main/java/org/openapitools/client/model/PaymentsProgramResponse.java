/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response object containing the sellers status with regards to the specified payment program.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentsProgramResponse {
  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_PAYMENTS_PROGRAM_TYPE = "paymentsProgramType";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_PROGRAM_TYPE)
  private String paymentsProgramType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_WAS_PREVIOUSLY_OPTED_IN = "wasPreviouslyOptedIn";
  @SerializedName(SERIALIZED_NAME_WAS_PREVIOUSLY_OPTED_IN)
  private Boolean wasPreviouslyOptedIn;

  public PaymentsProgramResponse() {
  }

  public PaymentsProgramResponse marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The ID of the eBay marketplace to which the payment program applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public PaymentsProgramResponse paymentsProgramType(String paymentsProgramType) {
    this.paymentsProgramType = paymentsProgramType;
    return this;
  }

  /**
   * This parameter specifies the payment program whose status is returned by the call.  &lt;br&gt;&lt;br&gt;Currently the only supported payments program is &lt;code&gt;EBAY_PAYMENTS&lt;/code&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:PaymentsProgramType&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return paymentsProgramType
   */
  @javax.annotation.Nullable
  public String getPaymentsProgramType() {
    return paymentsProgramType;
  }

  public void setPaymentsProgramType(String paymentsProgramType) {
    this.paymentsProgramType = paymentsProgramType;
  }


  public PaymentsProgramResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The enumeration value returned in this field indicates whether or not the seller&#39;s account is enabled for the payments program. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:PaymentsProgramStatus&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PaymentsProgramResponse wasPreviouslyOptedIn(Boolean wasPreviouslyOptedIn) {
    this.wasPreviouslyOptedIn = wasPreviouslyOptedIn;
    return this;
  }

  /**
   * If returned as &lt;code&gt;true&lt;/code&gt;, the seller was at one point opted-in to the associated payment program, but they later opted out of the program. A value of &lt;code&gt;false&lt;/code&gt; indicates the seller never opted-in to the program or if they did opt-in to the program, they never opted-out of it.  &lt;br&gt;&lt;br&gt;It&#39;s important to note that the setting of this field does not indicate the seller&#39;s current status regarding the payment program. It is possible for this field to return &lt;code&gt;true&lt;/code&gt; while the &lt;b&gt;status&lt;/b&gt; field returns &lt;code&gt;OPTED_IN&lt;/code&gt;.
   * @return wasPreviouslyOptedIn
   */
  @javax.annotation.Nullable
  public Boolean getWasPreviouslyOptedIn() {
    return wasPreviouslyOptedIn;
  }

  public void setWasPreviouslyOptedIn(Boolean wasPreviouslyOptedIn) {
    this.wasPreviouslyOptedIn = wasPreviouslyOptedIn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsProgramResponse paymentsProgramResponse = (PaymentsProgramResponse) o;
    return Objects.equals(this.marketplaceId, paymentsProgramResponse.marketplaceId) &&
        Objects.equals(this.paymentsProgramType, paymentsProgramResponse.paymentsProgramType) &&
        Objects.equals(this.status, paymentsProgramResponse.status) &&
        Objects.equals(this.wasPreviouslyOptedIn, paymentsProgramResponse.wasPreviouslyOptedIn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketplaceId, paymentsProgramType, status, wasPreviouslyOptedIn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsProgramResponse {\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    paymentsProgramType: ").append(toIndentedString(paymentsProgramType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    wasPreviouslyOptedIn: ").append(toIndentedString(wasPreviouslyOptedIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketplaceId");
    openapiFields.add("paymentsProgramType");
    openapiFields.add("status");
    openapiFields.add("wasPreviouslyOptedIn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentsProgramResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentsProgramResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentsProgramResponse is not found in the empty JSON string", PaymentsProgramResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentsProgramResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentsProgramResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      if ((jsonObj.get("paymentsProgramType") != null && !jsonObj.get("paymentsProgramType").isJsonNull()) && !jsonObj.get("paymentsProgramType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentsProgramType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentsProgramType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentsProgramResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentsProgramResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentsProgramResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentsProgramResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentsProgramResponse>() {
           @Override
           public void write(JsonWriter out, PaymentsProgramResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentsProgramResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentsProgramResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentsProgramResponse
   * @throws IOException if the JSON string is invalid with respect to PaymentsProgramResponse
   */
  public static PaymentsProgramResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentsProgramResponse.class);
  }

  /**
   * Convert an instance of PaymentsProgramResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

