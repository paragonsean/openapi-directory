/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to provide sales tax settings for a specific tax jurisdiction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesTax {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_SALES_TAX_JURISDICTION_ID = "salesTaxJurisdictionId";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_JURISDICTION_ID)
  private String salesTaxJurisdictionId;

  public static final String SERIALIZED_NAME_SALES_TAX_PERCENTAGE = "salesTaxPercentage";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_PERCENTAGE)
  private String salesTaxPercentage;

  public static final String SERIALIZED_NAME_SHIPPING_AND_HANDLING_TAXED = "shippingAndHandlingTaxed";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AND_HANDLING_TAXED)
  private Boolean shippingAndHandlingTaxed;

  public SalesTax() {
  }

  public SalesTax countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country code enumeration value identifies the country to which this sales tax rate applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public SalesTax salesTaxJurisdictionId(String salesTaxJurisdictionId) {
    this.salesTaxJurisdictionId = salesTaxJurisdictionId;
    return this;
  }

  /**
   * A unique ID that identifies the sales tax jurisdiction to which the sales tax rate applies (for example, a state within the United States).
   * @return salesTaxJurisdictionId
   */
  @javax.annotation.Nullable
  public String getSalesTaxJurisdictionId() {
    return salesTaxJurisdictionId;
  }

  public void setSalesTaxJurisdictionId(String salesTaxJurisdictionId) {
    this.salesTaxJurisdictionId = salesTaxJurisdictionId;
  }


  public SalesTax salesTaxPercentage(String salesTaxPercentage) {
    this.salesTaxPercentage = salesTaxPercentage;
    return this;
  }

  /**
   * The sales tax rate that will be applied to sales price. The &lt;b&gt;shippingAndHandlingTaxed&lt;/b&gt; value will indicate whether or not sales tax is also applied to shipping and handling charges&lt;br&gt;&lt;br&gt;Although it is a string, a percentage value is returned here, such as &lt;code&gt;7.75&lt;/code&gt;
   * @return salesTaxPercentage
   */
  @javax.annotation.Nullable
  public String getSalesTaxPercentage() {
    return salesTaxPercentage;
  }

  public void setSalesTaxPercentage(String salesTaxPercentage) {
    this.salesTaxPercentage = salesTaxPercentage;
  }


  public SalesTax shippingAndHandlingTaxed(Boolean shippingAndHandlingTaxed) {
    this.shippingAndHandlingTaxed = shippingAndHandlingTaxed;
    return this;
  }

  /**
   * If returned as &lt;code&gt;true&lt;/code&gt;, sales tax is also applied to shipping and handling charges, and not just the total sales price of the order.
   * @return shippingAndHandlingTaxed
   */
  @javax.annotation.Nullable
  public Boolean getShippingAndHandlingTaxed() {
    return shippingAndHandlingTaxed;
  }

  public void setShippingAndHandlingTaxed(Boolean shippingAndHandlingTaxed) {
    this.shippingAndHandlingTaxed = shippingAndHandlingTaxed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesTax salesTax = (SalesTax) o;
    return Objects.equals(this.countryCode, salesTax.countryCode) &&
        Objects.equals(this.salesTaxJurisdictionId, salesTax.salesTaxJurisdictionId) &&
        Objects.equals(this.salesTaxPercentage, salesTax.salesTaxPercentage) &&
        Objects.equals(this.shippingAndHandlingTaxed, salesTax.shippingAndHandlingTaxed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, salesTaxJurisdictionId, salesTaxPercentage, shippingAndHandlingTaxed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesTax {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    salesTaxJurisdictionId: ").append(toIndentedString(salesTaxJurisdictionId)).append("\n");
    sb.append("    salesTaxPercentage: ").append(toIndentedString(salesTaxPercentage)).append("\n");
    sb.append("    shippingAndHandlingTaxed: ").append(toIndentedString(shippingAndHandlingTaxed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("salesTaxJurisdictionId");
    openapiFields.add("salesTaxPercentage");
    openapiFields.add("shippingAndHandlingTaxed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesTax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesTax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesTax is not found in the empty JSON string", SalesTax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesTax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesTax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("salesTaxJurisdictionId") != null && !jsonObj.get("salesTaxJurisdictionId").isJsonNull()) && !jsonObj.get("salesTaxJurisdictionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesTaxJurisdictionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesTaxJurisdictionId").toString()));
      }
      if ((jsonObj.get("salesTaxPercentage") != null && !jsonObj.get("salesTaxPercentage").isJsonNull()) && !jsonObj.get("salesTaxPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesTaxPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesTaxPercentage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesTax.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesTax>() {
           @Override
           public void write(JsonWriter out, SalesTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesTax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesTax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesTax
   * @throws IOException if the JSON string is invalid with respect to SalesTax
   */
  public static SalesTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesTax.class);
  }

  /**
   * Convert an instance of SalesTax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

