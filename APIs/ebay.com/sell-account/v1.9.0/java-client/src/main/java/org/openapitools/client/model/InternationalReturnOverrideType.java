/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields for a seller&#39;s international return policy. Sellers have the ability to set separate domestic and international return policies, but if an international return policy is not set, the same return policy settings specified for the domestic return policy are also used for returns for international buyers. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InternationalReturnOverrideType {
  public static final String SERIALIZED_NAME_RETURN_METHOD = "returnMethod";
  @SerializedName(SERIALIZED_NAME_RETURN_METHOD)
  private String returnMethod;

  public static final String SERIALIZED_NAME_RETURN_PERIOD = "returnPeriod";
  @SerializedName(SERIALIZED_NAME_RETURN_PERIOD)
  private TimeDuration returnPeriod;

  public static final String SERIALIZED_NAME_RETURN_SHIPPING_COST_PAYER = "returnShippingCostPayer";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING_COST_PAYER)
  private String returnShippingCostPayer;

  public static final String SERIALIZED_NAME_RETURNS_ACCEPTED = "returnsAccepted";
  @SerializedName(SERIALIZED_NAME_RETURNS_ACCEPTED)
  private Boolean returnsAccepted;

  public InternationalReturnOverrideType() {
  }

  public InternationalReturnOverrideType returnMethod(String returnMethod) {
    this.returnMethod = returnMethod;
    return this;
  }

  /**
   * This field sets/indicates if the seller offers replacement items to the buyer in the case of an international return. The buyer must be willing to accept a replacement item; otherwise, the seller will need to issue a refund for a return. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return returnMethod
   */
  @javax.annotation.Nullable
  public String getReturnMethod() {
    return returnMethod;
  }

  public void setReturnMethod(String returnMethod) {
    this.returnMethod = returnMethod;
  }


  public InternationalReturnOverrideType returnPeriod(TimeDuration returnPeriod) {
    this.returnPeriod = returnPeriod;
    return this;
  }

  /**
   * Get returnPeriod
   * @return returnPeriod
   */
  @javax.annotation.Nullable
  public TimeDuration getReturnPeriod() {
    return returnPeriod;
  }

  public void setReturnPeriod(TimeDuration returnPeriod) {
    this.returnPeriod = returnPeriod;
  }


  public InternationalReturnOverrideType returnShippingCostPayer(String returnShippingCostPayer) {
    this.returnShippingCostPayer = returnShippingCostPayer;
    return this;
  }

  /**
   * This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either &lt;code&gt;BUYER&lt;/code&gt; or &lt;code&gt;SELLER&lt;/code&gt;.  &lt;br/&gt;&lt;br/&gt;Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for &#39;significantly not as described&#39; (SNAD) issues.  &lt;br/&gt;&lt;br/&gt;This field is conditionally required if the &lt;b&gt;internationalOverride.returnsAccepted&lt;/b&gt; field is set to &lt;code&gt;true&lt;/code&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return returnShippingCostPayer
   */
  @javax.annotation.Nullable
  public String getReturnShippingCostPayer() {
    return returnShippingCostPayer;
  }

  public void setReturnShippingCostPayer(String returnShippingCostPayer) {
    this.returnShippingCostPayer = returnShippingCostPayer;
  }


  public InternationalReturnOverrideType returnsAccepted(Boolean returnsAccepted) {
    this.returnsAccepted = returnsAccepted;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, the seller accepts international returns. If set to &lt;code&gt;false&lt;/code&gt;, the seller does not accept international returns.  &lt;br/&gt;&lt;br/&gt;This field is conditionally required if the seller chooses to have a separate international return policy.
   * @return returnsAccepted
   */
  @javax.annotation.Nullable
  public Boolean getReturnsAccepted() {
    return returnsAccepted;
  }

  public void setReturnsAccepted(Boolean returnsAccepted) {
    this.returnsAccepted = returnsAccepted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternationalReturnOverrideType internationalReturnOverrideType = (InternationalReturnOverrideType) o;
    return Objects.equals(this.returnMethod, internationalReturnOverrideType.returnMethod) &&
        Objects.equals(this.returnPeriod, internationalReturnOverrideType.returnPeriod) &&
        Objects.equals(this.returnShippingCostPayer, internationalReturnOverrideType.returnShippingCostPayer) &&
        Objects.equals(this.returnsAccepted, internationalReturnOverrideType.returnsAccepted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnMethod, returnPeriod, returnShippingCostPayer, returnsAccepted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternationalReturnOverrideType {\n");
    sb.append("    returnMethod: ").append(toIndentedString(returnMethod)).append("\n");
    sb.append("    returnPeriod: ").append(toIndentedString(returnPeriod)).append("\n");
    sb.append("    returnShippingCostPayer: ").append(toIndentedString(returnShippingCostPayer)).append("\n");
    sb.append("    returnsAccepted: ").append(toIndentedString(returnsAccepted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("returnMethod");
    openapiFields.add("returnPeriod");
    openapiFields.add("returnShippingCostPayer");
    openapiFields.add("returnsAccepted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InternationalReturnOverrideType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InternationalReturnOverrideType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InternationalReturnOverrideType is not found in the empty JSON string", InternationalReturnOverrideType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InternationalReturnOverrideType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InternationalReturnOverrideType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("returnMethod") != null && !jsonObj.get("returnMethod").isJsonNull()) && !jsonObj.get("returnMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnMethod").toString()));
      }
      // validate the optional field `returnPeriod`
      if (jsonObj.get("returnPeriod") != null && !jsonObj.get("returnPeriod").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("returnPeriod"));
      }
      if ((jsonObj.get("returnShippingCostPayer") != null && !jsonObj.get("returnShippingCostPayer").isJsonNull()) && !jsonObj.get("returnShippingCostPayer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnShippingCostPayer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnShippingCostPayer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InternationalReturnOverrideType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InternationalReturnOverrideType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InternationalReturnOverrideType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InternationalReturnOverrideType.class));

       return (TypeAdapter<T>) new TypeAdapter<InternationalReturnOverrideType>() {
           @Override
           public void write(JsonWriter out, InternationalReturnOverrideType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InternationalReturnOverrideType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InternationalReturnOverrideType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InternationalReturnOverrideType
   * @throws IOException if the JSON string is invalid with respect to InternationalReturnOverrideType
   */
  public static InternationalReturnOverrideType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InternationalReturnOverrideType.class);
  }

  /**
   * Convert an instance of InternationalReturnOverrideType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

