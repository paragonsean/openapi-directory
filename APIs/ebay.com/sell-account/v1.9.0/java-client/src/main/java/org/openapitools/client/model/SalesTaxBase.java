/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the base request of the &lt;b&gt;createOrReplaceSalesTax&lt;/b&gt;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesTaxBase {
  public static final String SERIALIZED_NAME_SALES_TAX_PERCENTAGE = "salesTaxPercentage";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_PERCENTAGE)
  private String salesTaxPercentage;

  public static final String SERIALIZED_NAME_SHIPPING_AND_HANDLING_TAXED = "shippingAndHandlingTaxed";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AND_HANDLING_TAXED)
  private Boolean shippingAndHandlingTaxed;

  public SalesTaxBase() {
  }

  public SalesTaxBase salesTaxPercentage(String salesTaxPercentage) {
    this.salesTaxPercentage = salesTaxPercentage;
    return this;
  }

  /**
   * This field is used to set the sales tax rate for the tax jurisdiction set in the call URI. When applicable to an order, this sales tax rate will be applied to sales price. The &lt;b&gt;shippingAndHandlingTaxed&lt;/b&gt; value will indicate whether or not sales tax is also applied to shipping and handling charges&lt;br&gt;&lt;br&gt;Although it is a string, a percentage value is set here, such as &lt;code&gt;7.75&lt;/code&gt;.
   * @return salesTaxPercentage
   */
  @javax.annotation.Nullable
  public String getSalesTaxPercentage() {
    return salesTaxPercentage;
  }

  public void setSalesTaxPercentage(String salesTaxPercentage) {
    this.salesTaxPercentage = salesTaxPercentage;
  }


  public SalesTaxBase shippingAndHandlingTaxed(Boolean shippingAndHandlingTaxed) {
    this.shippingAndHandlingTaxed = shippingAndHandlingTaxed;
    return this;
  }

  /**
   * This field is set to &lt;code&gt;true&lt;/code&gt; if the seller wishes to apply sales tax to shipping and handling charges, and not just the total sales price of the order. Otherwise, this field&#39;s value should be set to &lt;code&gt;false&lt;/code&gt;.
   * @return shippingAndHandlingTaxed
   */
  @javax.annotation.Nullable
  public Boolean getShippingAndHandlingTaxed() {
    return shippingAndHandlingTaxed;
  }

  public void setShippingAndHandlingTaxed(Boolean shippingAndHandlingTaxed) {
    this.shippingAndHandlingTaxed = shippingAndHandlingTaxed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesTaxBase salesTaxBase = (SalesTaxBase) o;
    return Objects.equals(this.salesTaxPercentage, salesTaxBase.salesTaxPercentage) &&
        Objects.equals(this.shippingAndHandlingTaxed, salesTaxBase.shippingAndHandlingTaxed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(salesTaxPercentage, shippingAndHandlingTaxed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesTaxBase {\n");
    sb.append("    salesTaxPercentage: ").append(toIndentedString(salesTaxPercentage)).append("\n");
    sb.append("    shippingAndHandlingTaxed: ").append(toIndentedString(shippingAndHandlingTaxed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("salesTaxPercentage");
    openapiFields.add("shippingAndHandlingTaxed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesTaxBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesTaxBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesTaxBase is not found in the empty JSON string", SalesTaxBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesTaxBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesTaxBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("salesTaxPercentage") != null && !jsonObj.get("salesTaxPercentage").isJsonNull()) && !jsonObj.get("salesTaxPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesTaxPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesTaxPercentage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesTaxBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesTaxBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesTaxBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesTaxBase.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesTaxBase>() {
           @Override
           public void write(JsonWriter out, SalesTaxBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesTaxBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesTaxBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesTaxBase
   * @throws IOException if the JSON string is invalid with respect to SalesTaxBase
   */
  public static SalesTaxBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesTaxBase.class);
  }

  /**
   * Convert an instance of SalesTaxBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

