/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to provide details about any KYC check that is applicable to the managed payments seller.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KycCheck {
  public static final String SERIALIZED_NAME_ALERT = "alert";
  @SerializedName(SERIALIZED_NAME_ALERT)
  private String alert;

  public static final String SERIALIZED_NAME_DATA_REQUIRED = "dataRequired";
  @SerializedName(SERIALIZED_NAME_DATA_REQUIRED)
  private String dataRequired;

  public static final String SERIALIZED_NAME_DETAIL_MESSAGE = "detailMessage";
  @SerializedName(SERIALIZED_NAME_DETAIL_MESSAGE)
  private String detailMessage;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_REMEDY_URL = "remedyUrl";
  @SerializedName(SERIALIZED_NAME_REMEDY_URL)
  private String remedyUrl;

  public KycCheck() {
  }

  public KycCheck alert(String alert) {
    this.alert = alert;
    return this;
  }

  /**
   * This field gives a short summary of what is required from the seller. An example might be, &#39;&lt;code&gt;Upload bank document now.&lt;/code&gt;&#39;. The &lt;b&gt;detailMessage&lt;/b&gt; field will often provide more details on what is required of the seller.
   * @return alert
   */
  @javax.annotation.Nullable
  public String getAlert() {
    return alert;
  }

  public void setAlert(String alert) {
    this.alert = alert;
  }


  public KycCheck dataRequired(String dataRequired) {
    this.dataRequired = dataRequired;
    return this;
  }

  /**
   * The enumeration value returned in this field categorizes the type of details needed for the KYC check. More information about the check is shown in the &lt;b&gt;detailMessage&lt;/b&gt; and other applicable, corresponding fields. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/kyc:DetailsType&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return dataRequired
   */
  @javax.annotation.Nullable
  public String getDataRequired() {
    return dataRequired;
  }

  public void setDataRequired(String dataRequired) {
    this.dataRequired = dataRequired;
  }


  public KycCheck detailMessage(String detailMessage) {
    this.detailMessage = detailMessage;
    return this;
  }

  /**
   * This field gives a detailed message about what is required from the seller. An example might be, &#39;&lt;code&gt;Please upload a bank document by 2020-08-01 to get your account back in good standing.&lt;/code&gt;&#39;.
   * @return detailMessage
   */
  @javax.annotation.Nullable
  public String getDetailMessage() {
    return detailMessage;
  }

  public void setDetailMessage(String detailMessage) {
    this.detailMessage = detailMessage;
  }


  public KycCheck dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The timestamp in this field indicates the date by which the seller should resolve the KYC requirement.&lt;br&gt;&lt;br&gt;The timestamp in this field uses the UTC date and time format described in the &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 Standard&lt;/a&gt;. See below for this format and an example: &lt;br&gt;&lt;br&gt;&lt;i&gt;MM-DD-YYYY HH:MM:SS&lt;/i&gt;&lt;br/&gt;&lt;code&gt;06-05-2020 10:34:18&lt;/code&gt;
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public KycCheck remedyUrl(String remedyUrl) {
    this.remedyUrl = remedyUrl;
    return this;
  }

  /**
   * If applicable and available, a URL will be returned in this field, and the link will take the seller to an eBay page where they can provide the requested information.
   * @return remedyUrl
   */
  @javax.annotation.Nullable
  public String getRemedyUrl() {
    return remedyUrl;
  }

  public void setRemedyUrl(String remedyUrl) {
    this.remedyUrl = remedyUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KycCheck kycCheck = (KycCheck) o;
    return Objects.equals(this.alert, kycCheck.alert) &&
        Objects.equals(this.dataRequired, kycCheck.dataRequired) &&
        Objects.equals(this.detailMessage, kycCheck.detailMessage) &&
        Objects.equals(this.dueDate, kycCheck.dueDate) &&
        Objects.equals(this.remedyUrl, kycCheck.remedyUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, dataRequired, detailMessage, dueDate, remedyUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KycCheck {\n");
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    dataRequired: ").append(toIndentedString(dataRequired)).append("\n");
    sb.append("    detailMessage: ").append(toIndentedString(detailMessage)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    remedyUrl: ").append(toIndentedString(remedyUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert");
    openapiFields.add("dataRequired");
    openapiFields.add("detailMessage");
    openapiFields.add("dueDate");
    openapiFields.add("remedyUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KycCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KycCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KycCheck is not found in the empty JSON string", KycCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KycCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KycCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alert") != null && !jsonObj.get("alert").isJsonNull()) && !jsonObj.get("alert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert").toString()));
      }
      if ((jsonObj.get("dataRequired") != null && !jsonObj.get("dataRequired").isJsonNull()) && !jsonObj.get("dataRequired").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRequired` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRequired").toString()));
      }
      if ((jsonObj.get("detailMessage") != null && !jsonObj.get("detailMessage").isJsonNull()) && !jsonObj.get("detailMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailMessage").toString()));
      }
      if ((jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) && !jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if ((jsonObj.get("remedyUrl") != null && !jsonObj.get("remedyUrl").isJsonNull()) && !jsonObj.get("remedyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remedyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remedyUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KycCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KycCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KycCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KycCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<KycCheck>() {
           @Override
           public void write(JsonWriter out, KycCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KycCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KycCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KycCheck
   * @throws IOException if the JSON string is invalid with respect to KycCheck
   */
  public static KycCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KycCheck.class);
  }

  /**
   * Convert an instance of KycCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

