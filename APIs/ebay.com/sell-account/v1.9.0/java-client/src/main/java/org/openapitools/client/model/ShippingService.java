/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.RegionSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;b&gt;shippingServices&lt;/b&gt; array, an array that provides details about every domestic and international shipping service option that is defined for the policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingService {
  public static final String SERIALIZED_NAME_ADDITIONAL_SHIPPING_COST = "additionalShippingCost";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SHIPPING_COST)
  private Amount additionalShippingCost;

  public static final String SERIALIZED_NAME_BUYER_RESPONSIBLE_FOR_PICKUP = "buyerResponsibleForPickup";
  @SerializedName(SERIALIZED_NAME_BUYER_RESPONSIBLE_FOR_PICKUP)
  private Boolean buyerResponsibleForPickup;

  public static final String SERIALIZED_NAME_BUYER_RESPONSIBLE_FOR_SHIPPING = "buyerResponsibleForShipping";
  @SerializedName(SERIALIZED_NAME_BUYER_RESPONSIBLE_FOR_SHIPPING)
  private Boolean buyerResponsibleForShipping;

  public static final String SERIALIZED_NAME_CASH_ON_DELIVERY_FEE = "cashOnDeliveryFee";
  @SerializedName(SERIALIZED_NAME_CASH_ON_DELIVERY_FEE)
  private Amount cashOnDeliveryFee;

  public static final String SERIALIZED_NAME_FREE_SHIPPING = "freeShipping";
  @SerializedName(SERIALIZED_NAME_FREE_SHIPPING)
  private Boolean freeShipping;

  public static final String SERIALIZED_NAME_SHIP_TO_LOCATIONS = "shipToLocations";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_LOCATIONS)
  private RegionSet shipToLocations;

  public static final String SERIALIZED_NAME_SHIPPING_CARRIER_CODE = "shippingCarrierCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CARRIER_CODE)
  private String shippingCarrierCode;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private Amount shippingCost;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE_CODE = "shippingServiceCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE_CODE)
  private String shippingServiceCode;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Amount surcharge;

  public ShippingService() {
  }

  public ShippingService additionalShippingCost(Amount additionalShippingCost) {
    this.additionalShippingCost = additionalShippingCost;
    return this;
  }

  /**
   * Get additionalShippingCost
   * @return additionalShippingCost
   */
  @javax.annotation.Nullable
  public Amount getAdditionalShippingCost() {
    return additionalShippingCost;
  }

  public void setAdditionalShippingCost(Amount additionalShippingCost) {
    this.additionalShippingCost = additionalShippingCost;
  }


  public ShippingService buyerResponsibleForPickup(Boolean buyerResponsibleForPickup) {
    this.buyerResponsibleForPickup = buyerResponsibleForPickup;
    return this;
  }

  /**
   * This field should be included and set to &lt;code&gt;true&lt;/code&gt; for a motor vehicle listing if it will be the buyer&#39;s responsibility to pick up the purchased motor vehicle after full payment is made. &lt;br /&gt;&lt;br /&gt;This field is only applicable to motor vehicle listings. In the majority of motor vehicle listings, the seller does make the buyer responsible for pickup or shipment of the vehicle. &lt;br/&gt;&lt;br/&gt;This field is returned if set.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Default&lt;/b&gt;: false
   * @return buyerResponsibleForPickup
   */
  @javax.annotation.Nullable
  public Boolean getBuyerResponsibleForPickup() {
    return buyerResponsibleForPickup;
  }

  public void setBuyerResponsibleForPickup(Boolean buyerResponsibleForPickup) {
    this.buyerResponsibleForPickup = buyerResponsibleForPickup;
  }


  public ShippingService buyerResponsibleForShipping(Boolean buyerResponsibleForShipping) {
    this.buyerResponsibleForShipping = buyerResponsibleForShipping;
    return this;
  }

  /**
   * This field should be included and set to &lt;code&gt;true&lt;/code&gt; for a motor vehicle listing if it will be the buyer&#39;s responsibility to arrange for shipment of a purchased motor vehicle after full payment is made. &lt;br /&gt;&lt;br /&gt;This field is only applicable to motor vehicle listings. In the majority of motor vehicle listings, the seller does make the buyer responsible for pickup or shipment of the vehicle. &lt;br/&gt;&lt;br/&gt;This field is returned if set.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Default&lt;/b&gt;: false
   * @return buyerResponsibleForShipping
   */
  @javax.annotation.Nullable
  public Boolean getBuyerResponsibleForShipping() {
    return buyerResponsibleForShipping;
  }

  public void setBuyerResponsibleForShipping(Boolean buyerResponsibleForShipping) {
    this.buyerResponsibleForShipping = buyerResponsibleForShipping;
  }


  public ShippingService cashOnDeliveryFee(Amount cashOnDeliveryFee) {
    this.cashOnDeliveryFee = cashOnDeliveryFee;
    return this;
  }

  /**
   * Get cashOnDeliveryFee
   * @return cashOnDeliveryFee
   */
  @javax.annotation.Nullable
  public Amount getCashOnDeliveryFee() {
    return cashOnDeliveryFee;
  }

  public void setCashOnDeliveryFee(Amount cashOnDeliveryFee) {
    this.cashOnDeliveryFee = cashOnDeliveryFee;
  }


  public ShippingService freeShipping(Boolean freeShipping) {
    this.freeShipping = freeShipping;
    return this;
  }

  /**
   * This field is included and set to &lt;code&gt;true&lt;/code&gt; if the seller offers a free shipping option to the buyer. &lt;br /&gt;&lt;br /&gt;This field can only be included and set to &lt;code&gt;true&lt;/code&gt; for the first domestic shipping service option specified in the &lt;b&gt;shippingServices&lt;/b&gt; container (it is ignored if set for subsequent shipping services or for any international shipping service option). &lt;br /&gt;&lt;br /&gt;The first specified shipping service option has a &lt;b&gt;sortOrder&lt;/b&gt; value of &lt;code&gt;1&lt;/code&gt; or if the &lt;b&gt;sortOrderId&lt;/b&gt; field is not used, it is the shipping service option that&#39;s specified first in the &lt;b&gt;shippingServices&lt;/b&gt; container.&lt;br/&gt;&lt;br/&gt;This container is returned if set.
   * @return freeShipping
   */
  @javax.annotation.Nullable
  public Boolean getFreeShipping() {
    return freeShipping;
  }

  public void setFreeShipping(Boolean freeShipping) {
    this.freeShipping = freeShipping;
  }


  public ShippingService shipToLocations(RegionSet shipToLocations) {
    this.shipToLocations = shipToLocations;
    return this;
  }

  /**
   * Get shipToLocations
   * @return shipToLocations
   */
  @javax.annotation.Nullable
  public RegionSet getShipToLocations() {
    return shipToLocations;
  }

  public void setShipToLocations(RegionSet shipToLocations) {
    this.shipToLocations = shipToLocations;
  }


  public ShippingService shippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
    return this;
  }

  /**
   * This field sets/indicates the shipping carrier, such as &lt;code&gt;USPS&lt;/code&gt;, &lt;code&gt;FedEx&lt;/code&gt;, or &lt;code&gt;UPS&lt;/code&gt;. Although this field uses the &lt;b&gt;string&lt;/b&gt; type, the seller must pass in a pre-defined enumeration value here. &lt;br /&gt;&lt;br /&gt;For a full list of shipping carrier enum values for a specified eBay marketplace, the &lt;b&gt;GeteBayDetails&lt;/b&gt; call of the &lt;b&gt;Trading API&lt;/b&gt; can be used, and the &lt;b&gt;DetailName&lt;/b&gt; field&#39;s value should be set to &lt;code&gt;ShippingCarrierDetails&lt;/code&gt;. The enum values for each shipping carriers can be found in each &lt;b&gt;ShippingCarrierDetails.ShippingCarrier&lt;/b&gt; field in the response payload.&lt;br/&gt;&lt;br/&gt; This field is actually optional, as the shipping carrier is also tied into the &lt;b&gt;shippingServiceCode&lt;/b&gt; enum value, and that field is required for every specified shipping service option.&lt;br/&gt;&lt;br/&gt;This field is returned if set.
   * @return shippingCarrierCode
   */
  @javax.annotation.Nullable
  public String getShippingCarrierCode() {
    return shippingCarrierCode;
  }

  public void setShippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
  }


  public ShippingService shippingCost(Amount shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Get shippingCost
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public Amount getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(Amount shippingCost) {
    this.shippingCost = shippingCost;
  }


  public ShippingService shippingServiceCode(String shippingServiceCode) {
    this.shippingServiceCode = shippingServiceCode;
    return this;
  }

  /**
   * This field sets/indicates the domestic or international shipping service option, such as &lt;code&gt;USPSPriority&lt;/code&gt;, &lt;code&gt;FedEx2Day&lt;/code&gt;, or &lt;code&gt;UPS3rdDay&lt;/code&gt;. Although this field uses the &lt;b&gt;string&lt;/b&gt; type, the seller must pass in a pre-defined enumeration value here. &lt;br /&gt;&lt;br /&gt;For a full list of shipping service option enum values for a specified eBay marketplace, the &lt;b&gt;GeteBayDetails&lt;/b&gt; call of the &lt;b&gt;Trading API&lt;/b&gt; can be used, and the &lt;b&gt;DetailName&lt;/b&gt; field&#39;s value should be set to &lt;code&gt;ShippingServiceDetails&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt;The enum values for each shipping service option can be found in each &lt;b&gt;ShippingServiceDetails.ShippingService&lt;/b&gt; field in the response payload. The seller must make sure that the shipping service option is still valid, which is indicated by a &lt;code&gt;true&lt;/code&gt; value in the corresponding &lt;b&gt;ValidForSellingFlow&lt;/b&gt; boolean field. International shipping service options are typically returned at the top of the response payload, and are indicated by an &lt;b&gt;InternationalService&lt;/b&gt; boolean field that reads &lt;code&gt;true&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt;The &lt;b&gt;InternationalService&lt;/b&gt; boolean field is not returned at all for domestic shipping service options. &lt;br/&gt;&lt;br/&gt; This field is required for every specified shipping service option.&lt;br/&gt;&lt;br/&gt;This field is returned if set.
   * @return shippingServiceCode
   */
  @javax.annotation.Nullable
  public String getShippingServiceCode() {
    return shippingServiceCode;
  }

  public void setShippingServiceCode(String shippingServiceCode) {
    this.shippingServiceCode = shippingServiceCode;
  }


  public ShippingService sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The integer value set in this field controls the order of the corresponding domestic or international shipping service option in the View Item and Checkout pages. &lt;br/&gt;&lt;br/&gt;Sellers can specify up to four domestic shipping services (in four separate &lt;b&gt;shippingService&lt;/b&gt; containers), so valid values are 1, 2, 3, and 4. A shipping service option with a &lt;b&gt;sortOrder&lt;/b&gt; value of &lt;code&gt;1&lt;/code&gt; appears at the top of View Item and Checkout pages. Conversely, a shipping service option with a &lt;b&gt;sortOrder&lt;/b&gt; value of &lt;code&gt;1&lt;/code&gt; appears at the bottom of the list. &lt;br/&gt;&lt;br/&gt;Sellers can specify up to five international shipping services (in five separate &lt;b&gt;shippingService&lt;/b&gt; containers), so valid values for international shipping services are 1, 2, 3, 4, and 5. Similarly to domestic shipping service options, the &lt;b&gt;sortOrder&lt;/b&gt; value of a international shipping service option controls the placement of that shipping service option in the View Item and Checkout pages. &lt;br/&gt;&lt;br/&gt;If the &lt;b&gt;sortOrder&lt;/b&gt; field is not supplied, the order of domestic and international shipping service options is determined by the order in which they are listed in the API call. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Min&lt;/b&gt;: 1. &lt;b&gt;Max&lt;/b&gt;: 4 (for domestic shipping service) or 5 (for international shipping service).
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public ShippingService surcharge(Amount surcharge) {
    this.surcharge = surcharge;
    return this;
  }

  /**
   * Get surcharge
   * @return surcharge
   */
  @javax.annotation.Nullable
  public Amount getSurcharge() {
    return surcharge;
  }

  public void setSurcharge(Amount surcharge) {
    this.surcharge = surcharge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingService shippingService = (ShippingService) o;
    return Objects.equals(this.additionalShippingCost, shippingService.additionalShippingCost) &&
        Objects.equals(this.buyerResponsibleForPickup, shippingService.buyerResponsibleForPickup) &&
        Objects.equals(this.buyerResponsibleForShipping, shippingService.buyerResponsibleForShipping) &&
        Objects.equals(this.cashOnDeliveryFee, shippingService.cashOnDeliveryFee) &&
        Objects.equals(this.freeShipping, shippingService.freeShipping) &&
        Objects.equals(this.shipToLocations, shippingService.shipToLocations) &&
        Objects.equals(this.shippingCarrierCode, shippingService.shippingCarrierCode) &&
        Objects.equals(this.shippingCost, shippingService.shippingCost) &&
        Objects.equals(this.shippingServiceCode, shippingService.shippingServiceCode) &&
        Objects.equals(this.sortOrder, shippingService.sortOrder) &&
        Objects.equals(this.surcharge, shippingService.surcharge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalShippingCost, buyerResponsibleForPickup, buyerResponsibleForShipping, cashOnDeliveryFee, freeShipping, shipToLocations, shippingCarrierCode, shippingCost, shippingServiceCode, sortOrder, surcharge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingService {\n");
    sb.append("    additionalShippingCost: ").append(toIndentedString(additionalShippingCost)).append("\n");
    sb.append("    buyerResponsibleForPickup: ").append(toIndentedString(buyerResponsibleForPickup)).append("\n");
    sb.append("    buyerResponsibleForShipping: ").append(toIndentedString(buyerResponsibleForShipping)).append("\n");
    sb.append("    cashOnDeliveryFee: ").append(toIndentedString(cashOnDeliveryFee)).append("\n");
    sb.append("    freeShipping: ").append(toIndentedString(freeShipping)).append("\n");
    sb.append("    shipToLocations: ").append(toIndentedString(shipToLocations)).append("\n");
    sb.append("    shippingCarrierCode: ").append(toIndentedString(shippingCarrierCode)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingServiceCode: ").append(toIndentedString(shippingServiceCode)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalShippingCost");
    openapiFields.add("buyerResponsibleForPickup");
    openapiFields.add("buyerResponsibleForShipping");
    openapiFields.add("cashOnDeliveryFee");
    openapiFields.add("freeShipping");
    openapiFields.add("shipToLocations");
    openapiFields.add("shippingCarrierCode");
    openapiFields.add("shippingCost");
    openapiFields.add("shippingServiceCode");
    openapiFields.add("sortOrder");
    openapiFields.add("surcharge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingService is not found in the empty JSON string", ShippingService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalShippingCost`
      if (jsonObj.get("additionalShippingCost") != null && !jsonObj.get("additionalShippingCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("additionalShippingCost"));
      }
      // validate the optional field `cashOnDeliveryFee`
      if (jsonObj.get("cashOnDeliveryFee") != null && !jsonObj.get("cashOnDeliveryFee").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("cashOnDeliveryFee"));
      }
      // validate the optional field `shipToLocations`
      if (jsonObj.get("shipToLocations") != null && !jsonObj.get("shipToLocations").isJsonNull()) {
        RegionSet.validateJsonElement(jsonObj.get("shipToLocations"));
      }
      if ((jsonObj.get("shippingCarrierCode") != null && !jsonObj.get("shippingCarrierCode").isJsonNull()) && !jsonObj.get("shippingCarrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCarrierCode").toString()));
      }
      // validate the optional field `shippingCost`
      if (jsonObj.get("shippingCost") != null && !jsonObj.get("shippingCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("shippingCost"));
      }
      if ((jsonObj.get("shippingServiceCode") != null && !jsonObj.get("shippingServiceCode").isJsonNull()) && !jsonObj.get("shippingServiceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingServiceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingServiceCode").toString()));
      }
      // validate the optional field `surcharge`
      if (jsonObj.get("surcharge") != null && !jsonObj.get("surcharge").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("surcharge"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingService.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingService>() {
           @Override
           public void write(JsonWriter out, ShippingService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingService
   * @throws IOException if the JSON string is invalid with respect to ShippingService
   */
  public static ShippingService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingService.class);
  }

  /**
   * Convert an instance of ShippingService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

