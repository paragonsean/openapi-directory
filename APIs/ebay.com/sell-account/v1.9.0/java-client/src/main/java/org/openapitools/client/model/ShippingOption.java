/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ShippingService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;b&gt;shippingOptions&lt;/b&gt; array, which is used to provide detailed information on the domestic and international shipping options available for the policy. A separate &lt;b&gt;ShippingOption&lt;/b&gt; object covers domestic shipping service options and international shipping service options (if the seller ships to international locations).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingOption {
  public static final String SERIALIZED_NAME_COST_TYPE = "costType";
  @SerializedName(SERIALIZED_NAME_COST_TYPE)
  private String costType;

  public static final String SERIALIZED_NAME_INSURANCE_FEE = "insuranceFee";
  @SerializedName(SERIALIZED_NAME_INSURANCE_FEE)
  private Amount insuranceFee;

  public static final String SERIALIZED_NAME_INSURANCE_OFFERED = "insuranceOffered";
  @SerializedName(SERIALIZED_NAME_INSURANCE_OFFERED)
  private Boolean insuranceOffered;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private String optionType;

  public static final String SERIALIZED_NAME_PACKAGE_HANDLING_COST = "packageHandlingCost";
  @SerializedName(SERIALIZED_NAME_PACKAGE_HANDLING_COST)
  private Amount packageHandlingCost;

  public static final String SERIALIZED_NAME_RATE_TABLE_ID = "rateTableId";
  @SerializedName(SERIALIZED_NAME_RATE_TABLE_ID)
  private String rateTableId;

  public static final String SERIALIZED_NAME_SHIPPING_DISCOUNT_PROFILE_ID = "shippingDiscountProfileId";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DISCOUNT_PROFILE_ID)
  private String shippingDiscountProfileId;

  public static final String SERIALIZED_NAME_SHIPPING_PROMOTION_OFFERED = "shippingPromotionOffered";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PROMOTION_OFFERED)
  private Boolean shippingPromotionOffered;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICES = "shippingServices";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICES)
  private List<ShippingService> shippingServices = new ArrayList<>();

  public ShippingOption() {
  }

  public ShippingOption costType(String costType) {
    this.costType = costType;
    return this;
  }

  /**
   * This field defines whether the shipping cost model is &lt;code&gt;FLAT_RATE&lt;/code&gt; (the same rate for all buyers, or buyers within a region if shipping rate tables are used) or &lt;code&gt;CALCULATED&lt;/code&gt; (the shipping rate varies by the ship-to location and size and weight of the package). &lt;br/&gt;&lt;br/&gt;This field is conditionally required if any shipping service options are specified (domestic and/or international). For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ShippingCostTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return costType
   */
  @javax.annotation.Nullable
  public String getCostType() {
    return costType;
  }

  public void setCostType(String costType) {
    this.costType = costType;
  }


  public ShippingOption insuranceFee(Amount insuranceFee) {
    this.insuranceFee = insuranceFee;
    return this;
  }

  /**
   * Get insuranceFee
   * @return insuranceFee
   */
  @javax.annotation.Nullable
  public Amount getInsuranceFee() {
    return insuranceFee;
  }

  public void setInsuranceFee(Amount insuranceFee) {
    this.insuranceFee = insuranceFee;
  }


  public ShippingOption insuranceOffered(Boolean insuranceOffered) {
    this.insuranceOffered = insuranceOffered;
    return this;
  }

  /**
   * This field has been deprecated. &lt;br/&gt;&lt;br/&gt;Shipping insurance is offered only via a shipping carrier&#39;s shipping services and is no longer available via eBay shipping policies.
   * @return insuranceOffered
   */
  @javax.annotation.Nullable
  public Boolean getInsuranceOffered() {
    return insuranceOffered;
  }

  public void setInsuranceOffered(Boolean insuranceOffered) {
    this.insuranceOffered = insuranceOffered;
  }


  public ShippingOption optionType(String optionType) {
    this.optionType = optionType;
    return this;
  }

  /**
   * This field is used to indicate if the corresponding shipping service options (under &lt;b&gt;shippingServices&lt;/b&gt; array) are domestic or international shipping service options. This field is conditionally required if any shipping service options are specified (domestic and/or international). For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ShippingOptionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return optionType
   */
  @javax.annotation.Nullable
  public String getOptionType() {
    return optionType;
  }

  public void setOptionType(String optionType) {
    this.optionType = optionType;
  }


  public ShippingOption packageHandlingCost(Amount packageHandlingCost) {
    this.packageHandlingCost = packageHandlingCost;
    return this;
  }

  /**
   * Get packageHandlingCost
   * @return packageHandlingCost
   */
  @javax.annotation.Nullable
  public Amount getPackageHandlingCost() {
    return packageHandlingCost;
  }

  public void setPackageHandlingCost(Amount packageHandlingCost) {
    this.packageHandlingCost = packageHandlingCost;
  }


  public ShippingOption rateTableId(String rateTableId) {
    this.rateTableId = rateTableId;
    return this;
  }

  /**
   * This field is used if the seller wants to associate a domestic or international shipping rate table to the fulfillment business policy. The &lt;a href&#x3D;\&quot;/api-docs/sell/account/resources/rate_table/methods/getRateTables\&quot;&gt;getRateTables&lt;/a&gt; method can be used to retrieve shipping rate table IDs.&lt;br/&gt;&lt;br/&gt;With domestic and international shipping rate tables, the seller can set different shipping costs based on shipping regions and shipping speed/level of service (one-day, expedited, standard, economy). There are also options to additional per-weight and handling charges.&lt;br/&gt;&lt;br/&gt;Sellers need to be careful that shipping rate tables match the corresponding shipping service options. In other words, a domestic shipping rate table must not be specified in the same container where international shipping service options are being specified, and vice versa, and the shipping speed/level of service of the provided shipping service options should match the shipping speed/level of service options that are defined in the shipping rate tables. &lt;br /&gt;&lt;br /&gt;For example, if the corresponding shipping rate table defines costs for one-day shipping services, there should be at least one one-day shipping service option specified under the &lt;b&gt;shippingServices&lt;/b&gt; array.&lt;br/&gt;&lt;br/&gt;This field is returned if set.
   * @return rateTableId
   */
  @javax.annotation.Nullable
  public String getRateTableId() {
    return rateTableId;
  }

  public void setRateTableId(String rateTableId) {
    this.rateTableId = rateTableId;
  }


  public ShippingOption shippingDiscountProfileId(String shippingDiscountProfileId) {
    this.shippingDiscountProfileId = shippingDiscountProfileId;
    return this;
  }

  /**
   * This field is the unique identifier of a seller&#39;s domestic or international shipping discount profile. If a buyer satisfies the requirements of the discount rule, this buyer will receive a shipping discount for the order. &lt;br /&gt;&lt;br /&gt;The seller can create and manage shipping discount profiles using (Get/Set) &lt;b&gt;ShippingDiscountProfiles&lt;/b&gt; calls in the &lt;b&gt;Trading API&lt;/b&gt; or through the &lt;b&gt;Shipping Preferences&lt;/b&gt; in &lt;b&gt;My eBay&lt;/b&gt;. &lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Initially, shipping discount profiles in the &lt;b&gt;Account API&lt;/b&gt; will &lt;i&gt;not&lt;/i&gt; be available to all sellers.&lt;/span&gt;
   * @return shippingDiscountProfileId
   */
  @javax.annotation.Nullable
  public String getShippingDiscountProfileId() {
    return shippingDiscountProfileId;
  }

  public void setShippingDiscountProfileId(String shippingDiscountProfileId) {
    this.shippingDiscountProfileId = shippingDiscountProfileId;
  }


  public ShippingOption shippingPromotionOffered(Boolean shippingPromotionOffered) {
    this.shippingPromotionOffered = shippingPromotionOffered;
    return this;
  }

  /**
   * This boolean indicates whether or not the seller has set up a promotional shipping discount that will be available to buyers who satisfy the requirements of the shipping discount rule. &lt;br/&gt;&lt;br/&gt;The seller can create and manage shipping promotional discounts using (Get/Set) &lt;b&gt;ShippingDiscountProfiles&lt;/b&gt; calls in the &lt;b&gt;Trading API&lt;/b&gt; or through the &lt;b&gt;Shipping Preferences&lt;/b&gt; in &lt;b&gt;My eBay&lt;/b&gt;. &lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;Initially, shipping discount profiles in the &lt;b&gt;Account API&lt;/b&gt; will &lt;i&gt;not&lt;/i&gt; be available to all sellers.&lt;/span&gt;
   * @return shippingPromotionOffered
   */
  @javax.annotation.Nullable
  public Boolean getShippingPromotionOffered() {
    return shippingPromotionOffered;
  }

  public void setShippingPromotionOffered(Boolean shippingPromotionOffered) {
    this.shippingPromotionOffered = shippingPromotionOffered;
  }


  public ShippingOption shippingServices(List<ShippingService> shippingServices) {
    this.shippingServices = shippingServices;
    return this;
  }

  public ShippingOption addShippingServicesItem(ShippingService shippingServicesItem) {
    if (this.shippingServices == null) {
      this.shippingServices = new ArrayList<>();
    }
    this.shippingServices.add(shippingServicesItem);
    return this;
  }

  /**
   * This array consists of the domestic or international shipping services options that are defined for the policy. The shipping service options defined under this array should match what is set in the corresponding &lt;b&gt;shippingOptions.optionType&lt;/b&gt; field (which controls whether domestic or international shipping service options are being defined). If a shipping rate table is being used, the specified shipping service options should also match the shipping rate table settings (domestic or international, shipping speed/level of service, etc.) &lt;br/&gt;&lt;br/&gt;Sellers can specify up to four domestic shipping services and up to five international shipping service options by using separate &lt;b&gt;shippingService&lt;/b&gt; containers for each. If the seller is using the Global Shipping Program as an international option, only a total of four international shipping service options (including GSP) can be offered. &lt;br/&gt;&lt;br/&gt; See &lt;a href&#x3D;\&quot;/api-docs/sell/static/seller-accounts/ht_shipping-setting-shipping-carrier-and-service-values.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;How to set up shipping carrier and shipping service values&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;To use the eBay standard envelope service (eSE), see &lt;a href&#x3D;\&quot;/api-docs/sell/static/seller-accounts/using-the-ebay-standard-envelope-service.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Using eBay standard envelope (eSE) service&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This array is conditionally required if the seller is offering one or more domestic and/or international shipping service options.
   * @return shippingServices
   */
  @javax.annotation.Nullable
  public List<ShippingService> getShippingServices() {
    return shippingServices;
  }

  public void setShippingServices(List<ShippingService> shippingServices) {
    this.shippingServices = shippingServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingOption shippingOption = (ShippingOption) o;
    return Objects.equals(this.costType, shippingOption.costType) &&
        Objects.equals(this.insuranceFee, shippingOption.insuranceFee) &&
        Objects.equals(this.insuranceOffered, shippingOption.insuranceOffered) &&
        Objects.equals(this.optionType, shippingOption.optionType) &&
        Objects.equals(this.packageHandlingCost, shippingOption.packageHandlingCost) &&
        Objects.equals(this.rateTableId, shippingOption.rateTableId) &&
        Objects.equals(this.shippingDiscountProfileId, shippingOption.shippingDiscountProfileId) &&
        Objects.equals(this.shippingPromotionOffered, shippingOption.shippingPromotionOffered) &&
        Objects.equals(this.shippingServices, shippingOption.shippingServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costType, insuranceFee, insuranceOffered, optionType, packageHandlingCost, rateTableId, shippingDiscountProfileId, shippingPromotionOffered, shippingServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingOption {\n");
    sb.append("    costType: ").append(toIndentedString(costType)).append("\n");
    sb.append("    insuranceFee: ").append(toIndentedString(insuranceFee)).append("\n");
    sb.append("    insuranceOffered: ").append(toIndentedString(insuranceOffered)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    packageHandlingCost: ").append(toIndentedString(packageHandlingCost)).append("\n");
    sb.append("    rateTableId: ").append(toIndentedString(rateTableId)).append("\n");
    sb.append("    shippingDiscountProfileId: ").append(toIndentedString(shippingDiscountProfileId)).append("\n");
    sb.append("    shippingPromotionOffered: ").append(toIndentedString(shippingPromotionOffered)).append("\n");
    sb.append("    shippingServices: ").append(toIndentedString(shippingServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costType");
    openapiFields.add("insuranceFee");
    openapiFields.add("insuranceOffered");
    openapiFields.add("optionType");
    openapiFields.add("packageHandlingCost");
    openapiFields.add("rateTableId");
    openapiFields.add("shippingDiscountProfileId");
    openapiFields.add("shippingPromotionOffered");
    openapiFields.add("shippingServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingOption is not found in the empty JSON string", ShippingOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("costType") != null && !jsonObj.get("costType").isJsonNull()) && !jsonObj.get("costType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costType").toString()));
      }
      // validate the optional field `insuranceFee`
      if (jsonObj.get("insuranceFee") != null && !jsonObj.get("insuranceFee").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("insuranceFee"));
      }
      if ((jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull()) && !jsonObj.get("optionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionType").toString()));
      }
      // validate the optional field `packageHandlingCost`
      if (jsonObj.get("packageHandlingCost") != null && !jsonObj.get("packageHandlingCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("packageHandlingCost"));
      }
      if ((jsonObj.get("rateTableId") != null && !jsonObj.get("rateTableId").isJsonNull()) && !jsonObj.get("rateTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateTableId").toString()));
      }
      if ((jsonObj.get("shippingDiscountProfileId") != null && !jsonObj.get("shippingDiscountProfileId").isJsonNull()) && !jsonObj.get("shippingDiscountProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingDiscountProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingDiscountProfileId").toString()));
      }
      if (jsonObj.get("shippingServices") != null && !jsonObj.get("shippingServices").isJsonNull()) {
        JsonArray jsonArrayshippingServices = jsonObj.getAsJsonArray("shippingServices");
        if (jsonArrayshippingServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingServices` to be an array in the JSON string but got `%s`", jsonObj.get("shippingServices").toString()));
          }

          // validate the optional field `shippingServices` (array)
          for (int i = 0; i < jsonArrayshippingServices.size(); i++) {
            ShippingService.validateJsonElement(jsonArrayshippingServices.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingOption>() {
           @Override
           public void write(JsonWriter out, ShippingOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingOption
   * @throws IOException if the JSON string is invalid with respect to ShippingOption
   */
  public static ShippingOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingOption.class);
  }

  /**
   * Convert an instance of ShippingOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

