/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to specify/indicate that an initial deposit is required for a motor vehicle listing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Deposit {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_DUE_IN = "dueIn";
  @SerializedName(SERIALIZED_NAME_DUE_IN)
  private TimeDuration dueIn;

  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<PaymentMethod> paymentMethods = new ArrayList<>();

  public Deposit() {
  }

  public Deposit amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public Deposit dueIn(TimeDuration dueIn) {
    this.dueIn = dueIn;
    return this;
  }

  /**
   * Get dueIn
   * @return dueIn
   */
  @javax.annotation.Nullable
  public TimeDuration getDueIn() {
    return dueIn;
  }

  public void setDueIn(TimeDuration dueIn) {
    this.dueIn = dueIn;
  }


  public Deposit paymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public Deposit addPaymentMethodsItem(PaymentMethod paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

  /**
   * This array is no longer applicable and should not be used since eBay now manages the electronic payment options available to buyers to pay the deposit.
   * @return paymentMethods
   */
  @javax.annotation.Nullable
  public List<PaymentMethod> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deposit deposit = (Deposit) o;
    return Objects.equals(this.amount, deposit.amount) &&
        Objects.equals(this.dueIn, deposit.dueIn) &&
        Objects.equals(this.paymentMethods, deposit.paymentMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, dueIn, paymentMethods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deposit {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    dueIn: ").append(toIndentedString(dueIn)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("dueIn");
    openapiFields.add("paymentMethods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Deposit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Deposit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deposit is not found in the empty JSON string", Deposit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Deposit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Deposit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amount"));
      }
      // validate the optional field `dueIn`
      if (jsonObj.get("dueIn") != null && !jsonObj.get("dueIn").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("dueIn"));
      }
      if (jsonObj.get("paymentMethods") != null && !jsonObj.get("paymentMethods").isJsonNull()) {
        JsonArray jsonArraypaymentMethods = jsonObj.getAsJsonArray("paymentMethods");
        if (jsonArraypaymentMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
          }

          // validate the optional field `paymentMethods` (array)
          for (int i = 0; i < jsonArraypaymentMethods.size(); i++) {
            PaymentMethod.validateJsonElement(jsonArraypaymentMethods.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deposit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deposit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deposit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deposit.class));

       return (TypeAdapter<T>) new TypeAdapter<Deposit>() {
           @Override
           public void write(JsonWriter out, Deposit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Deposit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Deposit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Deposit
   * @throws IOException if the JSON string is invalid with respect to Deposit
   */
  public static Deposit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deposit.class);
  }

  /**
   * Convert an instance of Deposit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

