/*
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryType;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.RegionSet;
import org.openapitools.client.model.ShippingOption;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Complex type that that gets populated with a response containing a fulfillment policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:42.418888-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetFulfillmentPolicyResponse {
  public static final String SERIALIZED_NAME_CATEGORY_TYPES = "categoryTypes";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TYPES)
  private List<CategoryType> categoryTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FREIGHT_SHIPPING = "freightShipping";
  @SerializedName(SERIALIZED_NAME_FREIGHT_SHIPPING)
  private Boolean freightShipping;

  public static final String SERIALIZED_NAME_FULFILLMENT_POLICY_ID = "fulfillmentPolicyId";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_POLICY_ID)
  private String fulfillmentPolicyId;

  public static final String SERIALIZED_NAME_GLOBAL_SHIPPING = "globalShipping";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SHIPPING)
  private Boolean globalShipping;

  public static final String SERIALIZED_NAME_HANDLING_TIME = "handlingTime";
  @SerializedName(SERIALIZED_NAME_HANDLING_TIME)
  private TimeDuration handlingTime;

  public static final String SERIALIZED_NAME_LOCAL_PICKUP = "localPickup";
  @SerializedName(SERIALIZED_NAME_LOCAL_PICKUP)
  private Boolean localPickup;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICKUP_DROP_OFF = "pickupDropOff";
  @SerializedName(SERIALIZED_NAME_PICKUP_DROP_OFF)
  private Boolean pickupDropOff;

  public static final String SERIALIZED_NAME_SHIP_TO_LOCATIONS = "shipToLocations";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_LOCATIONS)
  private RegionSet shipToLocations;

  public static final String SERIALIZED_NAME_SHIPPING_OPTIONS = "shippingOptions";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTIONS)
  private List<ShippingOption> shippingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public SetFulfillmentPolicyResponse() {
  }

  public SetFulfillmentPolicyResponse categoryTypes(List<CategoryType> categoryTypes) {
    this.categoryTypes = categoryTypes;
    return this;
  }

  public SetFulfillmentPolicyResponse addCategoryTypesItem(CategoryType categoryTypesItem) {
    if (this.categoryTypes == null) {
      this.categoryTypes = new ArrayList<>();
    }
    this.categoryTypes.add(categoryTypesItem);
    return this;
  }

  /**
   * This container indicates whether the fulfillment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
   * @return categoryTypes
   */
  @javax.annotation.Nullable
  public List<CategoryType> getCategoryTypes() {
    return categoryTypes;
  }

  public void setCategoryTypes(List<CategoryType> categoryTypes) {
    this.categoryTypes = categoryTypes;
  }


  public SetFulfillmentPolicyResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A seller-defined description of the fulfillment policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages. This field is returned if set for the policy. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SetFulfillmentPolicyResponse freightShipping(Boolean freightShipping) {
    this.freightShipping = freightShipping;
    return this;
  }

  /**
   * If returned as &lt;code&gt;true&lt;/code&gt;, the seller offers freight shipping. Freight shipping can be used for large items over 150 lbs.
   * @return freightShipping
   */
  @javax.annotation.Nullable
  public Boolean getFreightShipping() {
    return freightShipping;
  }

  public void setFreightShipping(Boolean freightShipping) {
    this.freightShipping = freightShipping;
  }


  public SetFulfillmentPolicyResponse fulfillmentPolicyId(String fulfillmentPolicyId) {
    this.fulfillmentPolicyId = fulfillmentPolicyId;
    return this;
  }

  /**
   * A unique eBay-assigned ID for a fulfillment business policy. This ID is generated when the policy is created.
   * @return fulfillmentPolicyId
   */
  @javax.annotation.Nullable
  public String getFulfillmentPolicyId() {
    return fulfillmentPolicyId;
  }

  public void setFulfillmentPolicyId(String fulfillmentPolicyId) {
    this.fulfillmentPolicyId = fulfillmentPolicyId;
  }


  public SetFulfillmentPolicyResponse globalShipping(Boolean globalShipping) {
    this.globalShipping = globalShipping;
    return this;
  }

  /**
   * If returned as &lt;code&gt;true&lt;/code&gt;, the eBay Global Shipping Program will be used by the seller to ship items to international locations.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: On the US marketplace, the &lt;em&gt;&lt;b&gt;Global Shipping Program&lt;/b&gt;&lt;/em&gt; is scheduled to be replaced by a new intermediated international shipping program called &lt;em&gt;&lt;b&gt;eBay International Shipping&lt;/b&gt;&lt;/em&gt;. US sellers who are opted in to the Global Shipping Program will be automatically opted in to eBay International Shipping when it becomes available to them. All US sellers will be migrated by March 31, 2023. &lt;br /&gt;&lt;br /&gt;eBay International Shipping is an account level setting, and no field needs to be set in a Fulfillment business policy to enable it. As long as the US seller&#39;s account is opted in to eBay International Shipping, this shipping option will be enabled automatically for all listings where international shipping is available. &lt;br /&gt;&lt;br /&gt;A US seller who is opted in to eBay International Shipping can also specify individual international shipping service options for a Fulfillment business policy.&lt;/span&gt;
   * @return globalShipping
   */
  @javax.annotation.Nullable
  public Boolean getGlobalShipping() {
    return globalShipping;
  }

  public void setGlobalShipping(Boolean globalShipping) {
    this.globalShipping = globalShipping;
  }


  public SetFulfillmentPolicyResponse handlingTime(TimeDuration handlingTime) {
    this.handlingTime = handlingTime;
    return this;
  }

  /**
   * Get handlingTime
   * @return handlingTime
   */
  @javax.annotation.Nullable
  public TimeDuration getHandlingTime() {
    return handlingTime;
  }

  public void setHandlingTime(TimeDuration handlingTime) {
    this.handlingTime = handlingTime;
  }


  public SetFulfillmentPolicyResponse localPickup(Boolean localPickup) {
    this.localPickup = localPickup;
    return this;
  }

  /**
   * If returned as &lt;code&gt;true&lt;/code&gt;, local pickup is available for this policy.
   * @return localPickup
   */
  @javax.annotation.Nullable
  public Boolean getLocalPickup() {
    return localPickup;
  }

  public void setLocalPickup(Boolean localPickup) {
    this.localPickup = localPickup;
  }


  public SetFulfillmentPolicyResponse marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The ID of the eBay marketplace to which this fulfillment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public SetFulfillmentPolicyResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A seller-defined name for this fulfillment business policy. Names must be unique for policies assigned to the same marketplace. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 64
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SetFulfillmentPolicyResponse pickupDropOff(Boolean pickupDropOff) {
    this.pickupDropOff = pickupDropOff;
    return this;
  }

  /**
   * If returned as &lt;code&gt;true&lt;/code&gt;, the seller offers the \&quot;Click and Collect\&quot; option. &lt;br/&gt;&lt;br/&gt;Currently, \&quot;Click and Collect\&quot; is available only to large retail merchants the eBay AU and UK marketplaces.
   * @return pickupDropOff
   */
  @javax.annotation.Nullable
  public Boolean getPickupDropOff() {
    return pickupDropOff;
  }

  public void setPickupDropOff(Boolean pickupDropOff) {
    this.pickupDropOff = pickupDropOff;
  }


  public SetFulfillmentPolicyResponse shipToLocations(RegionSet shipToLocations) {
    this.shipToLocations = shipToLocations;
    return this;
  }

  /**
   * Get shipToLocations
   * @return shipToLocations
   */
  @javax.annotation.Nullable
  public RegionSet getShipToLocations() {
    return shipToLocations;
  }

  public void setShipToLocations(RegionSet shipToLocations) {
    this.shipToLocations = shipToLocations;
  }


  public SetFulfillmentPolicyResponse shippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public SetFulfillmentPolicyResponse addShippingOptionsItem(ShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

  /**
   * This array is used to provide detailed information on the domestic and international shipping options available for the policy. A separate &lt;b&gt;ShippingOption&lt;/b&gt; object covers domestic shipping service options and international shipping service options (if the seller ships to international locations). &lt;br /&gt;&lt;br /&gt;The &lt;b&gt;optionType&lt;/b&gt; field indicates whether the &lt;b&gt;ShippingOption&lt;/b&gt; object applies to domestic or international shipping, and the &lt;b&gt;costType&lt;/b&gt; field indicates whether flat-rate shipping or calculated shipping will be used. &lt;p&gt;A separate &lt;b&gt;ShippingServices&lt;/b&gt; object is used to specify cost and other details for every available domestic and international shipping service option. &lt;/p&gt;
   * @return shippingOptions
   */
  @javax.annotation.Nullable
  public List<ShippingOption> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }


  public SetFulfillmentPolicyResponse warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public SetFulfillmentPolicyResponse addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * An array of one or more errors or warnings that were generated during the processing of the request. If there were no issues with the request, this array will return empty.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetFulfillmentPolicyResponse setFulfillmentPolicyResponse = (SetFulfillmentPolicyResponse) o;
    return Objects.equals(this.categoryTypes, setFulfillmentPolicyResponse.categoryTypes) &&
        Objects.equals(this.description, setFulfillmentPolicyResponse.description) &&
        Objects.equals(this.freightShipping, setFulfillmentPolicyResponse.freightShipping) &&
        Objects.equals(this.fulfillmentPolicyId, setFulfillmentPolicyResponse.fulfillmentPolicyId) &&
        Objects.equals(this.globalShipping, setFulfillmentPolicyResponse.globalShipping) &&
        Objects.equals(this.handlingTime, setFulfillmentPolicyResponse.handlingTime) &&
        Objects.equals(this.localPickup, setFulfillmentPolicyResponse.localPickup) &&
        Objects.equals(this.marketplaceId, setFulfillmentPolicyResponse.marketplaceId) &&
        Objects.equals(this.name, setFulfillmentPolicyResponse.name) &&
        Objects.equals(this.pickupDropOff, setFulfillmentPolicyResponse.pickupDropOff) &&
        Objects.equals(this.shipToLocations, setFulfillmentPolicyResponse.shipToLocations) &&
        Objects.equals(this.shippingOptions, setFulfillmentPolicyResponse.shippingOptions) &&
        Objects.equals(this.warnings, setFulfillmentPolicyResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryTypes, description, freightShipping, fulfillmentPolicyId, globalShipping, handlingTime, localPickup, marketplaceId, name, pickupDropOff, shipToLocations, shippingOptions, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetFulfillmentPolicyResponse {\n");
    sb.append("    categoryTypes: ").append(toIndentedString(categoryTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    freightShipping: ").append(toIndentedString(freightShipping)).append("\n");
    sb.append("    fulfillmentPolicyId: ").append(toIndentedString(fulfillmentPolicyId)).append("\n");
    sb.append("    globalShipping: ").append(toIndentedString(globalShipping)).append("\n");
    sb.append("    handlingTime: ").append(toIndentedString(handlingTime)).append("\n");
    sb.append("    localPickup: ").append(toIndentedString(localPickup)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickupDropOff: ").append(toIndentedString(pickupDropOff)).append("\n");
    sb.append("    shipToLocations: ").append(toIndentedString(shipToLocations)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryTypes");
    openapiFields.add("description");
    openapiFields.add("freightShipping");
    openapiFields.add("fulfillmentPolicyId");
    openapiFields.add("globalShipping");
    openapiFields.add("handlingTime");
    openapiFields.add("localPickup");
    openapiFields.add("marketplaceId");
    openapiFields.add("name");
    openapiFields.add("pickupDropOff");
    openapiFields.add("shipToLocations");
    openapiFields.add("shippingOptions");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetFulfillmentPolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetFulfillmentPolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetFulfillmentPolicyResponse is not found in the empty JSON string", SetFulfillmentPolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetFulfillmentPolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetFulfillmentPolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categoryTypes") != null && !jsonObj.get("categoryTypes").isJsonNull()) {
        JsonArray jsonArraycategoryTypes = jsonObj.getAsJsonArray("categoryTypes");
        if (jsonArraycategoryTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryTypes` to be an array in the JSON string but got `%s`", jsonObj.get("categoryTypes").toString()));
          }

          // validate the optional field `categoryTypes` (array)
          for (int i = 0; i < jsonArraycategoryTypes.size(); i++) {
            CategoryType.validateJsonElement(jsonArraycategoryTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fulfillmentPolicyId") != null && !jsonObj.get("fulfillmentPolicyId").isJsonNull()) && !jsonObj.get("fulfillmentPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentPolicyId").toString()));
      }
      // validate the optional field `handlingTime`
      if (jsonObj.get("handlingTime") != null && !jsonObj.get("handlingTime").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("handlingTime"));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `shipToLocations`
      if (jsonObj.get("shipToLocations") != null && !jsonObj.get("shipToLocations").isJsonNull()) {
        RegionSet.validateJsonElement(jsonObj.get("shipToLocations"));
      }
      if (jsonObj.get("shippingOptions") != null && !jsonObj.get("shippingOptions").isJsonNull()) {
        JsonArray jsonArrayshippingOptions = jsonObj.getAsJsonArray("shippingOptions");
        if (jsonArrayshippingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("shippingOptions").toString()));
          }

          // validate the optional field `shippingOptions` (array)
          for (int i = 0; i < jsonArrayshippingOptions.size(); i++) {
            ShippingOption.validateJsonElement(jsonArrayshippingOptions.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetFulfillmentPolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetFulfillmentPolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetFulfillmentPolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetFulfillmentPolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SetFulfillmentPolicyResponse>() {
           @Override
           public void write(JsonWriter out, SetFulfillmentPolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetFulfillmentPolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetFulfillmentPolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetFulfillmentPolicyResponse
   * @throws IOException if the JSON string is invalid with respect to SetFulfillmentPolicyResponse
   */
  public static SetFulfillmentPolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetFulfillmentPolicyResponse.class);
  }

  /**
   * Convert an instance of SetFulfillmentPolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

