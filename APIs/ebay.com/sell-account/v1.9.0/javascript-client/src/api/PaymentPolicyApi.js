/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaymentPolicy from '../model/PaymentPolicy';
import PaymentPolicyRequest from '../model/PaymentPolicyRequest';
import PaymentPolicyResponse from '../model/PaymentPolicyResponse';
import SetPaymentPolicyResponse from '../model/SetPaymentPolicyResponse';

/**
* PaymentPolicy service.
* @module api/PaymentPolicyApi
* @version v1.9.0
*/
export default class PaymentPolicyApi {

    /**
    * Constructs a new PaymentPolicyApi. 
    * @alias module:api/PaymentPolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPaymentPolicy operation.
     * @callback module:api/PaymentPolicyApi~createPaymentPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetPaymentPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new payment policy where the policy encapsulates seller's terms for order payments.  <br/><br/>Each policy targets a specific eBay marketplace and category group, and you can create multiple policies for each combination.  <br/><br/>A successful request returns the <b>getPaymentPolicy</b> URI to the new policy in the <b>Location</b> response header and the ID for the new policy is returned in the response payload.  <p class=\"tablenote\"><b>Tip:</b> For details on creating and using the business policies supported by the Account API, see <a href=\"/api-docs/sell/static/seller-accounts/business-policies.html\">eBay business policies</a>.</p>
     * @param {module:model/PaymentPolicyRequest} paymentPolicyRequest Payment policy request
     * @param {module:api/PaymentPolicyApi~createPaymentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetPaymentPolicyResponse}
     */
    createPaymentPolicy(paymentPolicyRequest, callback) {
      let postBody = paymentPolicyRequest;
      // verify the required parameter 'paymentPolicyRequest' is set
      if (paymentPolicyRequest === undefined || paymentPolicyRequest === null) {
        throw new Error("Missing the required parameter 'paymentPolicyRequest' when calling createPaymentPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetPaymentPolicyResponse;
      return this.apiClient.callApi(
        '/payment_policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentPolicy operation.
     * @callback module:api/PaymentPolicyApi~deletePaymentPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a payment policy. Supply the ID of the policy you want to delete in the <b>paymentPolicyId</b> path parameter. 
     * @param {String} paymentPolicyId This path parameter specifies the ID of the payment policy you want to delete.
     * @param {module:api/PaymentPolicyApi~deletePaymentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePaymentPolicy(paymentPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentPolicyId' is set
      if (paymentPolicyId === undefined || paymentPolicyId === null) {
        throw new Error("Missing the required parameter 'paymentPolicyId' when calling deletePaymentPolicy");
      }

      let pathParams = {
        'payment_policy_id': paymentPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payment_policy/{payment_policy_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentPolicies operation.
     * @callback module:api/PaymentPolicyApi~getPaymentPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all the payment policies configured for the marketplace you specify using the <code>marketplace_id</code> query parameter.  <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policies for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get the policies for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\" target=\"_blank\">HTTP request headers</a>.
     * @param {String} marketplaceId This query parameter specifies the eBay marketplace of the policies you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum
     * @param {module:api/PaymentPolicyApi~getPaymentPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentPolicyResponse}
     */
    getPaymentPolicies(marketplaceId, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getPaymentPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketplace_id': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentPolicyResponse;
      return this.apiClient.callApi(
        '/payment_policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentPolicy operation.
     * @callback module:api/PaymentPolicyApi~getPaymentPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the complete details of a payment policy. Supply the ID of the policy you want to retrieve using the <b>paymentPolicyId</b> path parameter.
     * @param {String} paymentPolicyId This path parameter specifies the ID of the payment policy you want to retrieve.
     * @param {module:api/PaymentPolicyApi~getPaymentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentPolicy}
     */
    getPaymentPolicy(paymentPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentPolicyId' is set
      if (paymentPolicyId === undefined || paymentPolicyId === null) {
        throw new Error("Missing the required parameter 'paymentPolicyId' when calling getPaymentPolicy");
      }

      let pathParams = {
        'payment_policy_id': paymentPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentPolicy;
      return this.apiClient.callApi(
        '/payment_policy/{payment_policy_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentPolicyByName operation.
     * @callback module:api/PaymentPolicyApi~getPaymentPolicyByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the details of a specific payment policy. Supply both the policy <code>name</code> and its associated <code>marketplace_id</code> in the request query parameters.   <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policy for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get a policy for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\">HTTP request headers</a>.
     * @param {String} marketplaceId This query parameter specifies the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum
     * @param {String} name This query parameter specifies the seller-defined name of the payment policy you want to retrieve.
     * @param {module:api/PaymentPolicyApi~getPaymentPolicyByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentPolicy}
     */
    getPaymentPolicyByName(marketplaceId, name, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getPaymentPolicyByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPaymentPolicyByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketplace_id': marketplaceId,
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentPolicy;
      return this.apiClient.callApi(
        '/payment_policy/get_by_policy_name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentPolicy operation.
     * @callback module:api/PaymentPolicyApi~updatePaymentPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetPaymentPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing payment policy. Specify the policy you want to update using the <b>payment_policy_id</b> path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload.
     * @param {String} paymentPolicyId This path parameter specifies the ID of the payment policy you want to update.
     * @param {module:model/PaymentPolicyRequest} paymentPolicyRequest Payment policy request
     * @param {module:api/PaymentPolicyApi~updatePaymentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetPaymentPolicyResponse}
     */
    updatePaymentPolicy(paymentPolicyId, paymentPolicyRequest, callback) {
      let postBody = paymentPolicyRequest;
      // verify the required parameter 'paymentPolicyId' is set
      if (paymentPolicyId === undefined || paymentPolicyId === null) {
        throw new Error("Missing the required parameter 'paymentPolicyId' when calling updatePaymentPolicy");
      }
      // verify the required parameter 'paymentPolicyRequest' is set
      if (paymentPolicyRequest === undefined || paymentPolicyRequest === null) {
        throw new Error("Missing the required parameter 'paymentPolicyRequest' when calling updatePaymentPolicy");
      }

      let pathParams = {
        'payment_policy_id': paymentPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetPaymentPolicyResponse;
      return this.apiClient.callApi(
        '/payment_policy/{payment_policy_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
