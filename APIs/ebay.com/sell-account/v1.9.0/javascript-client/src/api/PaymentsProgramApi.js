/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaymentsProgramResponse from '../model/PaymentsProgramResponse';

/**
* PaymentsProgram service.
* @module api/PaymentsProgramApi
* @version v1.9.0
*/
export default class PaymentsProgramApi {

    /**
    * Constructs a new PaymentsProgramApi. 
    * @alias module:api/PaymentsProgramApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPaymentsProgram operation.
     * @callback module:api/PaymentsProgramApi~getPaymentsProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentsProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is no longer applicable, as all seller accounts globally have been enabled for the new eBay payment and checkout flow.</span><br/><br/>This method returns whether or not the user is opted-in to the specified payments program. Sellers opt-in to payments programs by marketplace and you use the <b>marketplace_id</b> path parameter to specify the marketplace of the status flag you want returned.
     * @param {String} marketplaceId This path parameter specifies the eBay marketplace of the payments program for which you want to retrieve the seller's status.
     * @param {String} paymentsProgramType This path parameter specifies the payments program whose status is returned by the call.
     * @param {module:api/PaymentsProgramApi~getPaymentsProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentsProgramResponse}
     */
    getPaymentsProgram(marketplaceId, paymentsProgramType, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getPaymentsProgram");
      }
      // verify the required parameter 'paymentsProgramType' is set
      if (paymentsProgramType === undefined || paymentsProgramType === null) {
        throw new Error("Missing the required parameter 'paymentsProgramType' when calling getPaymentsProgram");
      }

      let pathParams = {
        'marketplace_id': marketplaceId,
        'payments_program_type': paymentsProgramType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentsProgramResponse;
      return this.apiClient.callApi(
        '/payments_program/{marketplace_id}/{payments_program_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
