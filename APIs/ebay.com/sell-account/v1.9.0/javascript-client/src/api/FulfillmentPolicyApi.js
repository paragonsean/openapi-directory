/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FulfillmentPolicy from '../model/FulfillmentPolicy';
import FulfillmentPolicyRequest from '../model/FulfillmentPolicyRequest';
import FulfillmentPolicyResponse from '../model/FulfillmentPolicyResponse';
import SetFulfillmentPolicyResponse from '../model/SetFulfillmentPolicyResponse';

/**
* FulfillmentPolicy service.
* @module api/FulfillmentPolicyApi
* @version v1.9.0
*/
export default class FulfillmentPolicyApi {

    /**
    * Constructs a new FulfillmentPolicyApi. 
    * @alias module:api/FulfillmentPolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFulfillmentPolicy operation.
     * @callback module:api/FulfillmentPolicyApi~createFulfillmentPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetFulfillmentPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new fulfillment policy where the policy encapsulates seller's terms for fulfilling item purchases. Fulfillment policies include the shipment options that the seller offers to buyers.  <br/><br/>Each policy targets a specific eBay marketplace and a category group type, and you can create multiple policies for each combination. <br/><br/>A successful request returns the <b>getFulfillmentPolicy</b> URI to the new policy in the <b>Location</b> response header and the ID for the new policy is returned in the response payload.  <p class=\"tablenote\"><b>Tip:</b> For details on creating and using the business policies supported by the Account API, see <a href=\"/api-docs/sell/static/seller-accounts/business-policies.html\">eBay business policies</a>.</p>  <p><b>Using the eBay standard envelope service (eSE)</b></p>  <p>The eBay standard envelope service (eSE) is a domestic envelope service with tracking through eBay. This service applies to specific Trading Cards categories (not all categories are supported), and to Coins & Paper Money, Postcards, and Stamps. See <a href=\"/api-docs/sell/static/seller-accounts/using-the-ebay-standard-envelope-service.html\" target=\"_blank\">Using the eBay standard envelope (eSE) service</a>.</p>
     * @param {module:model/FulfillmentPolicyRequest} fulfillmentPolicyRequest Request to create a seller account fulfillment policy.
     * @param {module:api/FulfillmentPolicyApi~createFulfillmentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetFulfillmentPolicyResponse}
     */
    createFulfillmentPolicy(fulfillmentPolicyRequest, callback) {
      let postBody = fulfillmentPolicyRequest;
      // verify the required parameter 'fulfillmentPolicyRequest' is set
      if (fulfillmentPolicyRequest === undefined || fulfillmentPolicyRequest === null) {
        throw new Error("Missing the required parameter 'fulfillmentPolicyRequest' when calling createFulfillmentPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetFulfillmentPolicyResponse;
      return this.apiClient.callApi(
        '/fulfillment_policy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFulfillmentPolicy operation.
     * @callback module:api/FulfillmentPolicyApi~deleteFulfillmentPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a fulfillment policy. Supply the ID of the policy you want to delete in the <b>fulfillmentPolicyId</b> path parameter.
     * @param {String} fulfillmentPolicyId This path parameter specifies the ID of the fulfillment policy to delete.
     * @param {module:api/FulfillmentPolicyApi~deleteFulfillmentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFulfillmentPolicy(fulfillmentPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'fulfillmentPolicyId' is set
      if (fulfillmentPolicyId === undefined || fulfillmentPolicyId === null) {
        throw new Error("Missing the required parameter 'fulfillmentPolicyId' when calling deleteFulfillmentPolicy");
      }

      let pathParams = {
        'fulfillmentPolicyId': fulfillmentPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/fulfillment_policy/{fulfillmentPolicyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentPolicies operation.
     * @callback module:api/FulfillmentPolicyApi~getFulfillmentPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulfillmentPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all the fulfillment policies configured for the marketplace you specify using the <code>marketplace_id</code> query parameter.  <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policies for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get the policies for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\" target=\"_blank\">HTTP request headers</a>.
     * @param {String} marketplaceId This query parameter specifies the eBay marketplace of the policies you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum
     * @param {module:api/FulfillmentPolicyApi~getFulfillmentPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulfillmentPolicyResponse}
     */
    getFulfillmentPolicies(marketplaceId, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getFulfillmentPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketplace_id': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FulfillmentPolicyResponse;
      return this.apiClient.callApi(
        '/fulfillment_policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentPolicy operation.
     * @callback module:api/FulfillmentPolicyApi~getFulfillmentPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulfillmentPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the complete details of a fulfillment policy. Supply the ID of the policy you want to retrieve using the <b>fulfillmentPolicyId</b> path parameter.
     * @param {String} fulfillmentPolicyId This path parameter specifies the ID of the fulfillment policy you want to retrieve.
     * @param {module:api/FulfillmentPolicyApi~getFulfillmentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulfillmentPolicy}
     */
    getFulfillmentPolicy(fulfillmentPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'fulfillmentPolicyId' is set
      if (fulfillmentPolicyId === undefined || fulfillmentPolicyId === null) {
        throw new Error("Missing the required parameter 'fulfillmentPolicyId' when calling getFulfillmentPolicy");
      }

      let pathParams = {
        'fulfillmentPolicyId': fulfillmentPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FulfillmentPolicy;
      return this.apiClient.callApi(
        '/fulfillment_policy/{fulfillmentPolicyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentPolicyByName operation.
     * @callback module:api/FulfillmentPolicyApi~getFulfillmentPolicyByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FulfillmentPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the details for a specific fulfillment policy. In the request, supply both the policy <code>name</code> and its associated <code>marketplace_id</code> as query parameters.   <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policy for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get a policy for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\">HTTP request headers</a>.
     * @param {String} marketplaceId This query parameter specifies the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum
     * @param {String} name This query parameter specifies the seller-defined name of the fulfillment policy you want to retrieve.
     * @param {module:api/FulfillmentPolicyApi~getFulfillmentPolicyByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FulfillmentPolicy}
     */
    getFulfillmentPolicyByName(marketplaceId, name, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getFulfillmentPolicyByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getFulfillmentPolicyByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketplace_id': marketplaceId,
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FulfillmentPolicy;
      return this.apiClient.callApi(
        '/fulfillment_policy/get_by_policy_name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFulfillmentPolicy operation.
     * @callback module:api/FulfillmentPolicyApi~updateFulfillmentPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetFulfillmentPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing fulfillment policy. Specify the policy you want to update using the <b>fulfillment_policy_id</b> path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload.
     * @param {String} fulfillmentPolicyId This path parameter specifies the ID of the fulfillment policy you want to update.
     * @param {module:model/FulfillmentPolicyRequest} fulfillmentPolicyRequest Fulfillment policy request
     * @param {module:api/FulfillmentPolicyApi~updateFulfillmentPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetFulfillmentPolicyResponse}
     */
    updateFulfillmentPolicy(fulfillmentPolicyId, fulfillmentPolicyRequest, callback) {
      let postBody = fulfillmentPolicyRequest;
      // verify the required parameter 'fulfillmentPolicyId' is set
      if (fulfillmentPolicyId === undefined || fulfillmentPolicyId === null) {
        throw new Error("Missing the required parameter 'fulfillmentPolicyId' when calling updateFulfillmentPolicy");
      }
      // verify the required parameter 'fulfillmentPolicyRequest' is set
      if (fulfillmentPolicyRequest === undefined || fulfillmentPolicyRequest === null) {
        throw new Error("Missing the required parameter 'fulfillmentPolicyRequest' when calling updateFulfillmentPolicy");
      }

      let pathParams = {
        'fulfillmentPolicyId': fulfillmentPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetFulfillmentPolicyResponse;
      return this.apiClient.callApi(
        '/fulfillment_policy/{fulfillmentPolicyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
