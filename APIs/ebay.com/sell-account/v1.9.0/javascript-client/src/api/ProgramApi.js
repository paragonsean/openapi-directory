/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Program from '../model/Program';
import Programs from '../model/Programs';

/**
* Program service.
* @module api/ProgramApi
* @version v1.9.0
*/
export default class ProgramApi {

    /**
    * Constructs a new ProgramApi. 
    * @alias module:api/ProgramApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOptedInPrograms operation.
     * @callback module:api/ProgramApi~getOptedInProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Programs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets a list of the seller programs that the seller has opted-in to.
     * @param {module:api/ProgramApi~getOptedInProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Programs}
     */
    getOptedInPrograms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Programs;
      return this.apiClient.callApi(
        '/program/get_opted_in_programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optInToProgram operation.
     * @callback module:api/ProgramApi~optInToProgramCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method opts the seller in to an eBay seller program. Refer to the <a href=\"/api-docs/sell/account/overview.html#opt-in\" target=\"_blank\">Account API overview</a> for information about available eBay seller programs.<br /><br /><span class=\"tablenote\"><b>Note:</b> It can take up to 24-hours for eBay to process your request to opt-in to a Seller Program. Use the <a href=\"/api-docs/sell/account/resources/program/methods/getOptedInPrograms\" target=\"_blank\">getOptedInPrograms</a> call to check the status of your request after the processing period has passed.</span>
     * @param {module:model/Program} program Program being opted-in to.
     * @param {module:api/ProgramApi~optInToProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optInToProgram(program, callback) {
      let postBody = program;
      // verify the required parameter 'program' is set
      if (program === undefined || program === null) {
        throw new Error("Missing the required parameter 'program' when calling optInToProgram");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/program/opt_in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optOutOfProgram operation.
     * @callback module:api/ProgramApi~optOutOfProgramCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method opts the seller out of a seller program to which you have previously opted-in to. Get a list of the seller programs you have opted-in to using the <b>getOptedInPrograms</b> call.
     * @param {module:model/Program} program Program being opted-out of.
     * @param {module:api/ProgramApi~optOutOfProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optOutOfProgram(program, callback) {
      let postBody = program;
      // verify the required parameter 'program' is set
      if (program === undefined || program === null) {
        throw new Error("Missing the required parameter 'program' when calling optOutOfProgram");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/program/opt_out', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
