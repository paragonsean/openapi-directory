/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SalesTax from '../model/SalesTax';
import SalesTaxBase from '../model/SalesTaxBase';
import SalesTaxes from '../model/SalesTaxes';

/**
* SalesTax service.
* @module api/SalesTaxApi
* @version v1.9.0
*/
export default class SalesTaxApi {

    /**
    * Constructs a new SalesTaxApi. 
    * @alias module:api/SalesTaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrReplaceSalesTax operation.
     * @callback module:api/SalesTaxApi~createOrReplaceSalesTaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates or updates a sales tax table entry for a jurisdiction. Specify the tax table entry you want to configure using the two path parameters: <b>countryCode</b> and <b>jurisdictionId</b>.  <br/><br/>A tax table entry for a jurisdiction is comprised of two fields: one for the jurisdiction's sales-tax rate and another that's a boolean value indicating whether or not shipping and handling are taxed in the jurisdiction.  <br/><br/>You can set up <i>tax tables</i> for countries that support different <i>tax jurisdictions</i>. Currently, only Canada, India, and the US support separate tax jurisdictions. If you sell into any of these countries, you can set up tax tables for any of the country's jurisdictions. Retrieve valid jurisdiction IDs using <b>getSalesTaxJurisdictions</b> in the Metadata API.  <br/><br/>For details on using this call, see <a href=\"/api-docs/sell/static/seller-accounts/tax-tables.html\">Establishing sales-tax tables</a>. <br/><br/><span class=\"tablenote\"><b>Important!</b> In the US, eBay now 'collects and remits' sales tax for every US state except for Missouri (and a few US territories), so sellers can no longer configure sales tax rates for any states except Missouri. With eBay 'collect and remit', eBay calculates the sales tax, collects the sales tax from the buyer, and remits the sales tax to the tax authorities at the buyer's location.</span>
     * @param {String} countryCode This path parameter specifies the two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html \" title=\"https://www.iso.org \" target=\"_blank\">ISO 3166</a> code for the country for which you want to create a sales tax table entry.
     * @param {String} jurisdictionId This path parameter specifies the ID of the tax jurisdiction for the table entry you want to create. Retrieve valid jurisdiction IDs using <b>getSalesTaxJurisdictions</b> in the Metadata API.
     * @param {module:model/SalesTaxBase} salesTaxBase A container that describes the how the sales tax is calculated.
     * @param {module:api/SalesTaxApi~createOrReplaceSalesTaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createOrReplaceSalesTax(countryCode, jurisdictionId, salesTaxBase, callback) {
      let postBody = salesTaxBase;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling createOrReplaceSalesTax");
      }
      // verify the required parameter 'jurisdictionId' is set
      if (jurisdictionId === undefined || jurisdictionId === null) {
        throw new Error("Missing the required parameter 'jurisdictionId' when calling createOrReplaceSalesTax");
      }
      // verify the required parameter 'salesTaxBase' is set
      if (salesTaxBase === undefined || salesTaxBase === null) {
        throw new Error("Missing the required parameter 'salesTaxBase' when calling createOrReplaceSalesTax");
      }

      let pathParams = {
        'countryCode': countryCode,
        'jurisdictionId': jurisdictionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales_tax/{countryCode}/{jurisdictionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesTax operation.
     * @callback module:api/SalesTaxApi~deleteSalesTaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This call deletes a sales tax table entry for a jurisdiction. Specify the jurisdiction to delete using the <b>countryCode</b> and <b>jurisdictionId</b> path parameters.
     * @param {String} countryCode This path parameter specifies the two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html \" title=\"https://www.iso.org \" target=\"_blank\">ISO 3166</a> code for the country whose sales tax table entry you want to delete.
     * @param {String} jurisdictionId This path parameter specifies the ID of the sales tax jurisdiction whose table entry you want to delete. Retrieve valid jurisdiction IDs using <b>getSalesTaxJurisdictions</b> in the Metadata API.
     * @param {module:api/SalesTaxApi~deleteSalesTaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSalesTax(countryCode, jurisdictionId, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling deleteSalesTax");
      }
      // verify the required parameter 'jurisdictionId' is set
      if (jurisdictionId === undefined || jurisdictionId === null) {
        throw new Error("Missing the required parameter 'jurisdictionId' when calling deleteSalesTax");
      }

      let pathParams = {
        'countryCode': countryCode,
        'jurisdictionId': jurisdictionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales_tax/{countryCode}/{jurisdictionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesTax operation.
     * @callback module:api/SalesTaxApi~getSalesTaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesTax} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This call gets the current sales tax table entry for a specific tax jurisdiction. Specify the jurisdiction to retrieve using the <b>countryCode</b> and <b>jurisdictionId</b> path parameters. All four response fields will be returned if a sales tax entry exists for the tax jurisdiction. Otherwise, the response will be returned as empty.<br/><br/><span class=\"tablenote\"><b>Important!</b> In most US states and territories, eBay now 'collects and remits' sales tax, so sellers can no longer configure sales tax rates for these states/territories.</span>
     * @param {String} countryCode This path parameter specifies the two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html \" title=\"https://www.iso.org \" target=\"_blank\">ISO 3166</a> code for the country whose sales tax table you want to retrieve.
     * @param {String} jurisdictionId This path parameter specifies the ID of the sales tax jurisdiction for the tax table entry you want to retrieve. Retrieve valid jurisdiction IDs using <b>getSalesTaxJurisdictions</b> in the Metadata API.
     * @param {module:api/SalesTaxApi~getSalesTaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesTax}
     */
    getSalesTax(countryCode, jurisdictionId, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getSalesTax");
      }
      // verify the required parameter 'jurisdictionId' is set
      if (jurisdictionId === undefined || jurisdictionId === null) {
        throw new Error("Missing the required parameter 'jurisdictionId' when calling getSalesTax");
      }

      let pathParams = {
        'countryCode': countryCode,
        'jurisdictionId': jurisdictionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SalesTax;
      return this.apiClient.callApi(
        '/sales_tax/{countryCode}/{jurisdictionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesTaxes operation.
     * @callback module:api/SalesTaxApi~getSalesTaxesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesTaxes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this call to retrieve all sales tax table entries that the seller has defined for a specific country. All four response fields will be returned for each tax jurisdiction that matches the search criteria. <br/><br/><span class=\"tablenote\"><b>Important!</b> In most US states and territories, eBay now 'collects and remits' sales tax, so sellers can no longer configure sales tax rates for these states/territories.</span>
     * @param {String} countryCode This path parameter specifies the two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html \" title=\"https://www.iso.org \" target=\"_blank\">ISO 3166</a> code for the country whose tax table you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum
     * @param {module:api/SalesTaxApi~getSalesTaxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesTaxes}
     */
    getSalesTaxes(countryCode, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getSalesTaxes");
      }

      let pathParams = {
      };
      let queryParams = {
        'country_code': countryCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SalesTaxes;
      return this.apiClient.callApi(
        '/sales_tax', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
