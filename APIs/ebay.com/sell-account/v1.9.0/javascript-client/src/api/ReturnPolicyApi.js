/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReturnPolicy from '../model/ReturnPolicy';
import ReturnPolicyRequest from '../model/ReturnPolicyRequest';
import ReturnPolicyResponse from '../model/ReturnPolicyResponse';
import SetReturnPolicyResponse from '../model/SetReturnPolicyResponse';

/**
* ReturnPolicy service.
* @module api/ReturnPolicyApi
* @version v1.9.0
*/
export default class ReturnPolicyApi {

    /**
    * Constructs a new ReturnPolicyApi. 
    * @alias module:api/ReturnPolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createReturnPolicy operation.
     * @callback module:api/ReturnPolicyApi~createReturnPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetReturnPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new return policy where the policy encapsulates seller's terms for returning items.  <br/><br/>Each policy targets a specific marketplace, and you can create multiple policies for each marketplace. Return policies are not applicable to motor-vehicle listings.<br/><br/>A successful request returns the <b>getReturnPolicy</b> URI to the new policy in the <b>Location</b> response header and the ID for the new policy is returned in the response payload.  <p class=\"tablenote\"><b>Tip:</b> For details on creating and using the business policies supported by the Account API, see <a href=\"/api-docs/sell/static/seller-accounts/business-policies.html\">eBay business policies</a>.</p>
     * @param {module:model/ReturnPolicyRequest} returnPolicyRequest Return policy request
     * @param {module:api/ReturnPolicyApi~createReturnPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetReturnPolicyResponse}
     */
    createReturnPolicy(returnPolicyRequest, callback) {
      let postBody = returnPolicyRequest;
      // verify the required parameter 'returnPolicyRequest' is set
      if (returnPolicyRequest === undefined || returnPolicyRequest === null) {
        throw new Error("Missing the required parameter 'returnPolicyRequest' when calling createReturnPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetReturnPolicyResponse;
      return this.apiClient.callApi(
        '/return_policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReturnPolicy operation.
     * @callback module:api/ReturnPolicyApi~deleteReturnPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a return policy. Supply the ID of the policy you want to delete in the <b>returnPolicyId</b> path parameter.
     * @param {String} returnPolicyId This path parameter specifies the ID of the return policy you want to delete.
     * @param {module:api/ReturnPolicyApi~deleteReturnPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReturnPolicy(returnPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'returnPolicyId' is set
      if (returnPolicyId === undefined || returnPolicyId === null) {
        throw new Error("Missing the required parameter 'returnPolicyId' when calling deleteReturnPolicy");
      }

      let pathParams = {
        'return_policy_id': returnPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/return_policy/{return_policy_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturnPolicies operation.
     * @callback module:api/ReturnPolicyApi~getReturnPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all the return policies configured for the marketplace you specify using the <code>marketplace_id</code> query parameter.  <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policies for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get the policies for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\" target=\"_blank\">HTTP request headers</a>.
     * @param {String} marketplaceId This query parameter specifies the ID of the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum
     * @param {module:api/ReturnPolicyApi~getReturnPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnPolicyResponse}
     */
    getReturnPolicies(marketplaceId, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getReturnPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketplace_id': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnPolicyResponse;
      return this.apiClient.callApi(
        '/return_policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturnPolicy operation.
     * @callback module:api/ReturnPolicyApi~getReturnPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the complete details of the return policy specified by the <b>returnPolicyId</b> path parameter.
     * @param {String} returnPolicyId This path parameter specifies the of the return policy you want to retrieve.
     * @param {module:api/ReturnPolicyApi~getReturnPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnPolicy}
     */
    getReturnPolicy(returnPolicyId, callback) {
      let postBody = null;
      // verify the required parameter 'returnPolicyId' is set
      if (returnPolicyId === undefined || returnPolicyId === null) {
        throw new Error("Missing the required parameter 'returnPolicyId' when calling getReturnPolicy");
      }

      let pathParams = {
        'return_policy_id': returnPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnPolicy;
      return this.apiClient.callApi(
        '/return_policy/{return_policy_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturnPolicyByName operation.
     * @callback module:api/ReturnPolicyApi~getReturnPolicyByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the details of a specific return policy. Supply both the policy <code>name</code> and its associated <code>marketplace_id</code> in the request query parameters.   <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policy for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get a policy for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\">HTTP request headers</a>.
     * @param {String} marketplaceId This query parameter specifies the ID of the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum
     * @param {String} name This query parameter specifies the seller-defined name of the return policy you want to retrieve.
     * @param {module:api/ReturnPolicyApi~getReturnPolicyByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnPolicy}
     */
    getReturnPolicyByName(marketplaceId, name, callback) {
      let postBody = null;
      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getReturnPolicyByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getReturnPolicyByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'marketplace_id': marketplaceId,
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReturnPolicy;
      return this.apiClient.callApi(
        '/return_policy/get_by_policy_name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReturnPolicy operation.
     * @callback module:api/ReturnPolicyApi~updateReturnPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetReturnPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing return policy. Specify the policy you want to update using the <b>return_policy_id</b> path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload.
     * @param {String} returnPolicyId This path parameter specifies the ID of the return policy you want to update.
     * @param {module:model/ReturnPolicyRequest} returnPolicyRequest Container for a return policy request.
     * @param {module:api/ReturnPolicyApi~updateReturnPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetReturnPolicyResponse}
     */
    updateReturnPolicy(returnPolicyId, returnPolicyRequest, callback) {
      let postBody = returnPolicyRequest;
      // verify the required parameter 'returnPolicyId' is set
      if (returnPolicyId === undefined || returnPolicyId === null) {
        throw new Error("Missing the required parameter 'returnPolicyId' when calling updateReturnPolicy");
      }
      // verify the required parameter 'returnPolicyRequest' is set
      if (returnPolicyRequest === undefined || returnPolicyRequest === null) {
        throw new Error("Missing the required parameter 'returnPolicyRequest' when calling updateReturnPolicy");
      }

      let pathParams = {
        'return_policy_id': returnPolicyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetReturnPolicyResponse;
      return this.apiClient.callApi(
        '/return_policy/{return_policy_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
