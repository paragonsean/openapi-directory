/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryType from './CategoryType';
import Deposit from './Deposit';
import PaymentMethod from './PaymentMethod';
import TimeDuration from './TimeDuration';

/**
 * The PaymentPolicyRequest model module.
 * @module model/PaymentPolicyRequest
 * @version v1.9.0
 */
class PaymentPolicyRequest {
    /**
     * Constructs a new <code>PaymentPolicyRequest</code>.
     * This root container defines a seller&#39;s payment business policy for a specific marketplace and category group. This type is used when creating or updating a payment business policy.
     * @alias module:model/PaymentPolicyRequest
     */
    constructor() { 
        
        PaymentPolicyRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentPolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentPolicyRequest} obj Optional instance to populate.
     * @return {module:model/PaymentPolicyRequest} The populated <code>PaymentPolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentPolicyRequest();

            if (data.hasOwnProperty('categoryTypes')) {
                obj['categoryTypes'] = ApiClient.convertToType(data['categoryTypes'], [CategoryType]);
            }
            if (data.hasOwnProperty('deposit')) {
                obj['deposit'] = Deposit.constructFromObject(data['deposit']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fullPaymentDueIn')) {
                obj['fullPaymentDueIn'] = TimeDuration.constructFromObject(data['fullPaymentDueIn']);
            }
            if (data.hasOwnProperty('immediatePay')) {
                obj['immediatePay'] = ApiClient.convertToType(data['immediatePay'], 'Boolean');
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('paymentInstructions')) {
                obj['paymentInstructions'] = ApiClient.convertToType(data['paymentInstructions'], 'String');
            }
            if (data.hasOwnProperty('paymentMethods')) {
                obj['paymentMethods'] = ApiClient.convertToType(data['paymentMethods'], [PaymentMethod]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentPolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentPolicyRequest</code>.
     */
    static validateJSON(data) {
        if (data['categoryTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categoryTypes'])) {
                throw new Error("Expected the field `categoryTypes` to be an array in the JSON data but got " + data['categoryTypes']);
            }
            // validate the optional field `categoryTypes` (array)
            for (const item of data['categoryTypes']) {
                CategoryType.validateJSON(item);
            };
        }
        // validate the optional field `deposit`
        if (data['deposit']) { // data not null
          Deposit.validateJSON(data['deposit']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `fullPaymentDueIn`
        if (data['fullPaymentDueIn']) { // data not null
          TimeDuration.validateJSON(data['fullPaymentDueIn']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['paymentInstructions'] && !(typeof data['paymentInstructions'] === 'string' || data['paymentInstructions'] instanceof String)) {
            throw new Error("Expected the field `paymentInstructions` to be a primitive type in the JSON string but got " + data['paymentInstructions']);
        }
        if (data['paymentMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentMethods'])) {
                throw new Error("Expected the field `paymentMethods` to be an array in the JSON data but got " + data['paymentMethods']);
            }
            // validate the optional field `paymentMethods` (array)
            for (const item of data['paymentMethods']) {
                PaymentMethod.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This container is used to specify whether the payment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
 * @member {Array.<module:model/CategoryType>} categoryTypes
 */
PaymentPolicyRequest.prototype['categoryTypes'] = undefined;

/**
 * @member {module:model/Deposit} deposit
 */
PaymentPolicyRequest.prototype['deposit'] = undefined;

/**
 * A seller-defined description of the payment business policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250
 * @member {String} description
 */
PaymentPolicyRequest.prototype['description'] = undefined;

/**
 * @member {module:model/TimeDuration} fullPaymentDueIn
 */
PaymentPolicyRequest.prototype['fullPaymentDueIn'] = undefined;

/**
 * This field should be included and set to <code>true</code> if the seller wants to require immediate payment from the buyer for: <ul><li>A fixed-price item</li><li>An auction item where the buyer is using the 'Buy it Now' option</li><li>A deposit for a motor vehicle listing</li></ul><br /><b>Default:</b> False
 * @member {Boolean} immediatePay
 */
PaymentPolicyRequest.prototype['immediatePay'] = undefined;

/**
 * The ID of the eBay marketplace to which this payment business policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
PaymentPolicyRequest.prototype['marketplaceId'] = undefined;

/**
 * A seller-defined name for this payment business policy. Names must be unique for policies assigned to the same marketplace.<br /><br /><b>Max length:</b> 64
 * @member {String} name
 */
PaymentPolicyRequest.prototype['name'] = undefined;

/**
 * <p class=\"tablenote\"><b>Note:</b> DO NOT USE THIS FIELD. Payment instructions are no longer supported by payment business policies.</p>A free-form string field that allows sellers to add detailed payment instructions to their listings.
 * @member {String} paymentInstructions
 */
PaymentPolicyRequest.prototype['paymentInstructions'] = undefined;

/**
 * <p class=\"tablenote\"><b>Note:</b> This field applies only when the seller needs to specify one or more offline payment methods. eBay now manages the electronic payment options available to buyers to pay for the item.</p>This array is used to specify one or more offline payment methods that will be accepted for payment that occurs off of eBay's platform.
 * @member {Array.<module:model/PaymentMethod>} paymentMethods
 */
PaymentPolicyRequest.prototype['paymentMethods'] = undefined;






export default PaymentPolicyRequest;

