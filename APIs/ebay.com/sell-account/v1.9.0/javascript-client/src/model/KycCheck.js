/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KycCheck model module.
 * @module model/KycCheck
 * @version v1.9.0
 */
class KycCheck {
    /**
     * Constructs a new <code>KycCheck</code>.
     * This type is used to provide details about any KYC check that is applicable to the managed payments seller.
     * @alias module:model/KycCheck
     */
    constructor() { 
        
        KycCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KycCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KycCheck} obj Optional instance to populate.
     * @return {module:model/KycCheck} The populated <code>KycCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KycCheck();

            if (data.hasOwnProperty('alert')) {
                obj['alert'] = ApiClient.convertToType(data['alert'], 'String');
            }
            if (data.hasOwnProperty('dataRequired')) {
                obj['dataRequired'] = ApiClient.convertToType(data['dataRequired'], 'String');
            }
            if (data.hasOwnProperty('detailMessage')) {
                obj['detailMessage'] = ApiClient.convertToType(data['detailMessage'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('remedyUrl')) {
                obj['remedyUrl'] = ApiClient.convertToType(data['remedyUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KycCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KycCheck</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alert'] && !(typeof data['alert'] === 'string' || data['alert'] instanceof String)) {
            throw new Error("Expected the field `alert` to be a primitive type in the JSON string but got " + data['alert']);
        }
        // ensure the json data is a string
        if (data['dataRequired'] && !(typeof data['dataRequired'] === 'string' || data['dataRequired'] instanceof String)) {
            throw new Error("Expected the field `dataRequired` to be a primitive type in the JSON string but got " + data['dataRequired']);
        }
        // ensure the json data is a string
        if (data['detailMessage'] && !(typeof data['detailMessage'] === 'string' || data['detailMessage'] instanceof String)) {
            throw new Error("Expected the field `detailMessage` to be a primitive type in the JSON string but got " + data['detailMessage']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['remedyUrl'] && !(typeof data['remedyUrl'] === 'string' || data['remedyUrl'] instanceof String)) {
            throw new Error("Expected the field `remedyUrl` to be a primitive type in the JSON string but got " + data['remedyUrl']);
        }

        return true;
    }


}



/**
 * This field gives a short summary of what is required from the seller. An example might be, '<code>Upload bank document now.</code>'. The <b>detailMessage</b> field will often provide more details on what is required of the seller.
 * @member {String} alert
 */
KycCheck.prototype['alert'] = undefined;

/**
 * The enumeration value returned in this field categorizes the type of details needed for the KYC check. More information about the check is shown in the <b>detailMessage</b> and other applicable, corresponding fields. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/kyc:DetailsType'>eBay API documentation</a>
 * @member {String} dataRequired
 */
KycCheck.prototype['dataRequired'] = undefined;

/**
 * This field gives a detailed message about what is required from the seller. An example might be, '<code>Please upload a bank document by 2020-08-01 to get your account back in good standing.</code>'.
 * @member {String} detailMessage
 */
KycCheck.prototype['detailMessage'] = undefined;

/**
 * The timestamp in this field indicates the date by which the seller should resolve the KYC requirement.<br><br>The timestamp in this field uses the UTC date and time format described in the <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" target=\"_blank\">ISO 8601 Standard</a>. See below for this format and an example: <br><br><i>MM-DD-YYYY HH:MM:SS</i><br/><code>06-05-2020 10:34:18</code>
 * @member {String} dueDate
 */
KycCheck.prototype['dueDate'] = undefined;

/**
 * If applicable and available, a URL will be returned in this field, and the link will take the seller to an eBay page where they can provide the requested information.
 * @member {String} remedyUrl
 */
KycCheck.prototype['remedyUrl'] = undefined;






export default KycCheck;

