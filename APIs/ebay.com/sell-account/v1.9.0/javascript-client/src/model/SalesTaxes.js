/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SalesTax from './SalesTax';

/**
 * The SalesTaxes model module.
 * @module model/SalesTaxes
 * @version v1.9.0
 */
class SalesTaxes {
    /**
     * Constructs a new <code>SalesTaxes</code>.
     * This type is used by the root response of the &lt;b&gt;getSalesTaxes&lt;/b&gt; method.
     * @alias module:model/SalesTaxes
     */
    constructor() { 
        
        SalesTaxes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SalesTaxes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SalesTaxes} obj Optional instance to populate.
     * @return {module:model/SalesTaxes} The populated <code>SalesTaxes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SalesTaxes();

            if (data.hasOwnProperty('salesTaxes')) {
                obj['salesTaxes'] = ApiClient.convertToType(data['salesTaxes'], [SalesTax]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SalesTaxes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SalesTaxes</code>.
     */
    static validateJSON(data) {
        if (data['salesTaxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['salesTaxes'])) {
                throw new Error("Expected the field `salesTaxes` to be an array in the JSON data but got " + data['salesTaxes']);
            }
            // validate the optional field `salesTaxes` (array)
            for (const item of data['salesTaxes']) {
                SalesTax.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An array of one or more sales tax rate entries for a specific marketplace (or all applicable marketplaces if the <b>country_code</b> query parameter is not used.<br><br>If no sales tax rate entries are set up, no response payload is returned, but only an HTTP status code of <code>204 No Content</code>.
 * @member {Array.<module:model/SalesTax>} salesTaxes
 */
SalesTaxes.prototype['salesTaxes'] = undefined;






export default SalesTaxes;

