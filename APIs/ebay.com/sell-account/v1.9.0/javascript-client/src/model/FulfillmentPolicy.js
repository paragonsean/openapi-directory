/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryType from './CategoryType';
import RegionSet from './RegionSet';
import ShippingOption from './ShippingOption';
import TimeDuration from './TimeDuration';

/**
 * The FulfillmentPolicy model module.
 * @module model/FulfillmentPolicy
 * @version v1.9.0
 */
class FulfillmentPolicy {
    /**
     * Constructs a new <code>FulfillmentPolicy</code>.
     * This type is used by the &lt;b&gt;fulfillmentPolicy&lt;/b&gt; response container, a container which defines a seller&#39;s fulfillment policy for a specific marketplace.
     * @alias module:model/FulfillmentPolicy
     */
    constructor() { 
        
        FulfillmentPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FulfillmentPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FulfillmentPolicy} obj Optional instance to populate.
     * @return {module:model/FulfillmentPolicy} The populated <code>FulfillmentPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FulfillmentPolicy();

            if (data.hasOwnProperty('categoryTypes')) {
                obj['categoryTypes'] = ApiClient.convertToType(data['categoryTypes'], [CategoryType]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('freightShipping')) {
                obj['freightShipping'] = ApiClient.convertToType(data['freightShipping'], 'Boolean');
            }
            if (data.hasOwnProperty('fulfillmentPolicyId')) {
                obj['fulfillmentPolicyId'] = ApiClient.convertToType(data['fulfillmentPolicyId'], 'String');
            }
            if (data.hasOwnProperty('globalShipping')) {
                obj['globalShipping'] = ApiClient.convertToType(data['globalShipping'], 'Boolean');
            }
            if (data.hasOwnProperty('handlingTime')) {
                obj['handlingTime'] = TimeDuration.constructFromObject(data['handlingTime']);
            }
            if (data.hasOwnProperty('localPickup')) {
                obj['localPickup'] = ApiClient.convertToType(data['localPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pickupDropOff')) {
                obj['pickupDropOff'] = ApiClient.convertToType(data['pickupDropOff'], 'Boolean');
            }
            if (data.hasOwnProperty('shipToLocations')) {
                obj['shipToLocations'] = RegionSet.constructFromObject(data['shipToLocations']);
            }
            if (data.hasOwnProperty('shippingOptions')) {
                obj['shippingOptions'] = ApiClient.convertToType(data['shippingOptions'], [ShippingOption]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FulfillmentPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FulfillmentPolicy</code>.
     */
    static validateJSON(data) {
        if (data['categoryTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categoryTypes'])) {
                throw new Error("Expected the field `categoryTypes` to be an array in the JSON data but got " + data['categoryTypes']);
            }
            // validate the optional field `categoryTypes` (array)
            for (const item of data['categoryTypes']) {
                CategoryType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['fulfillmentPolicyId'] && !(typeof data['fulfillmentPolicyId'] === 'string' || data['fulfillmentPolicyId'] instanceof String)) {
            throw new Error("Expected the field `fulfillmentPolicyId` to be a primitive type in the JSON string but got " + data['fulfillmentPolicyId']);
        }
        // validate the optional field `handlingTime`
        if (data['handlingTime']) { // data not null
          TimeDuration.validateJSON(data['handlingTime']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `shipToLocations`
        if (data['shipToLocations']) { // data not null
          RegionSet.validateJSON(data['shipToLocations']);
        }
        if (data['shippingOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shippingOptions'])) {
                throw new Error("Expected the field `shippingOptions` to be an array in the JSON data but got " + data['shippingOptions']);
            }
            // validate the optional field `shippingOptions` (array)
            for (const item of data['shippingOptions']) {
                ShippingOption.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This container indicates whether the fulfillment policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
 * @member {Array.<module:model/CategoryType>} categoryTypes
 */
FulfillmentPolicy.prototype['categoryTypes'] = undefined;

/**
 * A seller-defined description of the fulfillment policy. This description is only for the seller's use, and is not exposed on any eBay pages. This field is returned if set for the policy. <br/><br/><b>Max length</b>: 250
 * @member {String} description
 */
FulfillmentPolicy.prototype['description'] = undefined;

/**
 * If returned as <code>true</code>, the seller offers freight shipping. Freight shipping can be used for large items over 150 lbs.
 * @member {Boolean} freightShipping
 */
FulfillmentPolicy.prototype['freightShipping'] = undefined;

/**
 * A unique eBay-assigned ID for the fulfillment policy. This ID is generated when the policy is created.
 * @member {String} fulfillmentPolicyId
 */
FulfillmentPolicy.prototype['fulfillmentPolicyId'] = undefined;

/**
 * If returned as <code>true</code>, eBay's Global Shipping Program will be used by the seller to ship items to international locations.<br /><br /><span class=\"tablenote\"><b>Note</b>: On the US marketplace, the <em><b>Global Shipping Program</b></em> is scheduled to be replaced by a new intermediated international shipping program called <em><b>eBay International Shipping</b></em>. US sellers who are opted in to the Global Shipping Program will be automatically opted in to eBay International Shipping when it becomes available to them. All US sellers will be migrated by March 31, 2023. <br /><br />eBay International Shipping is an account level setting, and no field needs to be set in a Fulfillment business policy to enable it. As long as the US seller's account is opted in to eBay International Shipping, this shipping option will be enabled automatically for all listings where international shipping is available. <br /><br />A US seller who is opted in to eBay International Shipping can also specify individual international shipping service options for a Fulfillment business policy.</span>
 * @member {Boolean} globalShipping
 */
FulfillmentPolicy.prototype['globalShipping'] = undefined;

/**
 * @member {module:model/TimeDuration} handlingTime
 */
FulfillmentPolicy.prototype['handlingTime'] = undefined;

/**
 * If returned as <code>true</code>, local pickup is available for this policy.
 * @member {Boolean} localPickup
 */
FulfillmentPolicy.prototype['localPickup'] = undefined;

/**
 * The ID of the eBay marketplace to which this fulfillment policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
FulfillmentPolicy.prototype['marketplaceId'] = undefined;

/**
 * A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. <br/><br/><b>Max length</b>: 64
 * @member {String} name
 */
FulfillmentPolicy.prototype['name'] = undefined;

/**
 * If returned as <code>true</code>, the seller offers the \"Click and Collect\" option. <br/><br/>Currently, \"Click and Collect\" is available only to large retail merchants the eBay AU and UK marketplaces.
 * @member {Boolean} pickupDropOff
 */
FulfillmentPolicy.prototype['pickupDropOff'] = undefined;

/**
 * @member {module:model/RegionSet} shipToLocations
 */
FulfillmentPolicy.prototype['shipToLocations'] = undefined;

/**
 * This array is used to provide detailed information on the domestic and international shipping options available for the policy. A separate <b>ShippingOption</b> object covers domestic shipping service options and international shipping service options (if the seller ships to international locations). <br /><br />The <b>optionType</b> field indicates whether the <b>ShippingOption</b> object applies to domestic or international shipping, and the <b>costType</b> field indicates whether flat-rate shipping or calculated shipping will be used. <p>A separate <b>ShippingServices</b> object is used to specify cost and other details for every available domestic and international shipping service option. </p>
 * @member {Array.<module:model/ShippingOption>} shippingOptions
 */
FulfillmentPolicy.prototype['shippingOptions'] = undefined;






export default FulfillmentPolicy;

