/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecipientAccountReference from './RecipientAccountReference';

/**
 * The PaymentMethod model module.
 * @module model/PaymentMethod
 * @version v1.9.0
 */
class PaymentMethod {
    /**
     * Constructs a new <code>PaymentMethod</code>.
     * This type is used by the &lt;b&gt;paymentMethods&lt;/b&gt; container, which is used by the seller to specify one or more offline payment methods. &lt;br /&gt;&lt;br /&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: eBay now controls all electronic payment methods available for a marketplace, so a seller will no longer use this type to specify any electronic payment methods.&lt;/span&gt;
     * @alias module:model/PaymentMethod
     */
    constructor() { 
        
        PaymentMethod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentMethod} obj Optional instance to populate.
     * @return {module:model/PaymentMethod} The populated <code>PaymentMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentMethod();

            if (data.hasOwnProperty('brands')) {
                obj['brands'] = ApiClient.convertToType(data['brands'], ['String']);
            }
            if (data.hasOwnProperty('paymentMethodType')) {
                obj['paymentMethodType'] = ApiClient.convertToType(data['paymentMethodType'], 'String');
            }
            if (data.hasOwnProperty('recipientAccountReference')) {
                obj['recipientAccountReference'] = RecipientAccountReference.constructFromObject(data['recipientAccountReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentMethod</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['brands'])) {
            throw new Error("Expected the field `brands` to be an array in the JSON data but got " + data['brands']);
        }
        // ensure the json data is a string
        if (data['paymentMethodType'] && !(typeof data['paymentMethodType'] === 'string' || data['paymentMethodType'] instanceof String)) {
            throw new Error("Expected the field `paymentMethodType` to be a primitive type in the JSON string but got " + data['paymentMethodType']);
        }
        // validate the optional field `recipientAccountReference`
        if (data['recipientAccountReference']) { // data not null
          RecipientAccountReference.validateJSON(data['recipientAccountReference']);
        }

        return true;
    }


}



/**
 * <span class=\"tablenote\"><b>Note</b>: This array is no longer applicable and should not be used. eBay now controls all electronic payment methods available for a marketplace, and a seller never has to specify any electronic payment methods, including any credit card brands accepted. </span>
 * @member {Array.<String>} brands
 */
PaymentMethod.prototype['brands'] = undefined;

/**
 * eBay now controls all electronic payment methods available for a marketplace, so only offline payment method enum values may be used in this field, and offline payment methods will only be applicable to listings that require or support offline payments. See the <b>PaymentMethodTypeEnum</b> type for supported offline payment method enum values. </p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:PaymentMethodTypeEnum'>eBay API documentation</a>
 * @member {String} paymentMethodType
 */
PaymentMethod.prototype['paymentMethodType'] = undefined;

/**
 * @member {module:model/RecipientAccountReference} recipientAccountReference
 */
PaymentMethod.prototype['recipientAccountReference'] = undefined;






export default PaymentMethod;

