/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SellingLimit from './SellingLimit';

/**
 * The SellingPrivileges model module.
 * @module model/SellingPrivileges
 * @version v1.9.0
 */
class SellingPrivileges {
    /**
     * Constructs a new <code>SellingPrivileges</code>.
     * This type is used by the base response of the &lt;b&gt;getPrivileges&lt;/b&gt; method.
     * @alias module:model/SellingPrivileges
     */
    constructor() { 
        
        SellingPrivileges.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SellingPrivileges</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SellingPrivileges} obj Optional instance to populate.
     * @return {module:model/SellingPrivileges} The populated <code>SellingPrivileges</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SellingPrivileges();

            if (data.hasOwnProperty('sellerRegistrationCompleted')) {
                obj['sellerRegistrationCompleted'] = ApiClient.convertToType(data['sellerRegistrationCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('sellingLimit')) {
                obj['sellingLimit'] = SellingLimit.constructFromObject(data['sellingLimit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SellingPrivileges</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SellingPrivileges</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sellingLimit`
        if (data['sellingLimit']) { // data not null
          SellingLimit.validateJSON(data['sellingLimit']);
        }

        return true;
    }


}



/**
 * If this field is returned as <code>true</code>, the seller's registration is completed. If this field is returned as <code>false</code>, the registration process is not complete.
 * @member {Boolean} sellerRegistrationCompleted
 */
SellingPrivileges.prototype['sellerRegistrationCompleted'] = undefined;

/**
 * @member {module:model/SellingLimit} sellingLimit
 */
SellingPrivileges.prototype['sellingLimit'] = undefined;






export default SellingPrivileges;

