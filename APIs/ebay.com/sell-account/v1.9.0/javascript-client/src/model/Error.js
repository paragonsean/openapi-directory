/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorParameter from './ErrorParameter';

/**
 * The Error model module.
 * @module model/Error
 * @version v1.9.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * A container that defines the elements of error and warning messages.
     * @alias module:model/Error
     */
    constructor() { 
        
        Error.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('errorId')) {
                obj['errorId'] = ApiClient.convertToType(data['errorId'], 'Number');
            }
            if (data.hasOwnProperty('inputRefIds')) {
                obj['inputRefIds'] = ApiClient.convertToType(data['inputRefIds'], ['String']);
            }
            if (data.hasOwnProperty('longMessage')) {
                obj['longMessage'] = ApiClient.convertToType(data['longMessage'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('outputRefIds')) {
                obj['outputRefIds'] = ApiClient.convertToType(data['outputRefIds'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ErrorParameter]);
            }
            if (data.hasOwnProperty('subdomain')) {
                obj['subdomain'] = ApiClient.convertToType(data['subdomain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputRefIds'])) {
            throw new Error("Expected the field `inputRefIds` to be an array in the JSON data but got " + data['inputRefIds']);
        }
        // ensure the json data is a string
        if (data['longMessage'] && !(typeof data['longMessage'] === 'string' || data['longMessage'] instanceof String)) {
            throw new Error("Expected the field `longMessage` to be a primitive type in the JSON string but got " + data['longMessage']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputRefIds'])) {
            throw new Error("Expected the field `outputRefIds` to be an array in the JSON data but got " + data['outputRefIds']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ErrorParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subdomain'] && !(typeof data['subdomain'] === 'string' || data['subdomain'] instanceof String)) {
            throw new Error("Expected the field `subdomain` to be a primitive type in the JSON string but got " + data['subdomain']);
        }

        return true;
    }


}



/**
 * The category type for this error or warning. It is a string that can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as \"Seller does not ship item to Antarctica\" or \"Buyer ineligible to purchase an alcoholic item\". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul>
 * @member {String} category
 */
Error.prototype['category'] = undefined;

/**
 * Name of the domain ,or primary system, of the service or application where the error occurred.
 * @member {String} domain
 */
Error.prototype['domain'] = undefined;

/**
 * A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
 * @member {Number} errorId
 */
Error.prototype['errorId'] = undefined;

/**
 * Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation.
 * @member {Array.<String>} inputRefIds
 */
Error.prototype['inputRefIds'] = undefined;

/**
 * A more detailed explanation of the error than given in the <code>message</code> error field.
 * @member {String} longMessage
 */
Error.prototype['longMessage'] = undefined;

/**
 * Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>.
 * @member {Array.<String>} outputRefIds
 */
Error.prototype['outputRefIds'] = undefined;

/**
 * This optional list of name/value pairs that contain context-specific <code>ErrorParameter</code> objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>.
 * @member {Array.<module:model/ErrorParameter>} parameters
 */
Error.prototype['parameters'] = undefined;

/**
 * If present, indicates the subsystem in which the error occurred.
 * @member {String} subdomain
 */
Error.prototype['subdomain'] = undefined;






export default Error;

