/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeDuration from './TimeDuration';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version v1.9.0
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * This type is used by the &lt;strong&gt;getSubscription&lt;/strong&gt; response container, which defines the subscription types and levels for the seller account.
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('subscriptionLevel')) {
                obj['subscriptionLevel'] = ApiClient.convertToType(data['subscriptionLevel'], 'String');
            }
            if (data.hasOwnProperty('subscriptionType')) {
                obj['subscriptionType'] = ApiClient.convertToType(data['subscriptionType'], 'String');
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = TimeDuration.constructFromObject(data['term']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['subscriptionLevel'] && !(typeof data['subscriptionLevel'] === 'string' || data['subscriptionLevel'] instanceof String)) {
            throw new Error("Expected the field `subscriptionLevel` to be a primitive type in the JSON string but got " + data['subscriptionLevel']);
        }
        // ensure the json data is a string
        if (data['subscriptionType'] && !(typeof data['subscriptionType'] === 'string' || data['subscriptionType'] instanceof String)) {
            throw new Error("Expected the field `subscriptionType` to be a primitive type in the JSON string but got " + data['subscriptionType']);
        }
        // validate the optional field `term`
        if (data['term']) { // data not null
          TimeDuration.validateJSON(data['term']);
        }

        return true;
    }


}



/**
 * The marketplace with which the subscription is associated. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
Subscription.prototype['marketplaceId'] = undefined;

/**
 * The subscription ID.
 * @member {String} subscriptionId
 */
Subscription.prototype['subscriptionId'] = undefined;

/**
 * The subscription level. For example, subscription levels for an eBay store include Starter, Basic, Featured, Anchor, and Enterprise levels.
 * @member {String} subscriptionLevel
 */
Subscription.prototype['subscriptionLevel'] = undefined;

/**
 * The kind of entity with which the subscription is associated, such as an eBay store. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:SubscriptionTypeEnum'>eBay API documentation</a>
 * @member {String} subscriptionType
 */
Subscription.prototype['subscriptionType'] = undefined;

/**
 * @member {module:model/TimeDuration} term
 */
Subscription.prototype['term'] = undefined;






export default Subscription;

