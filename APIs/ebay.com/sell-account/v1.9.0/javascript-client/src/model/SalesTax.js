/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SalesTax model module.
 * @module model/SalesTax
 * @version v1.9.0
 */
class SalesTax {
    /**
     * Constructs a new <code>SalesTax</code>.
     * This type is used to provide sales tax settings for a specific tax jurisdiction.
     * @alias module:model/SalesTax
     */
    constructor() { 
        
        SalesTax.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SalesTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SalesTax} obj Optional instance to populate.
     * @return {module:model/SalesTax} The populated <code>SalesTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SalesTax();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('salesTaxJurisdictionId')) {
                obj['salesTaxJurisdictionId'] = ApiClient.convertToType(data['salesTaxJurisdictionId'], 'String');
            }
            if (data.hasOwnProperty('salesTaxPercentage')) {
                obj['salesTaxPercentage'] = ApiClient.convertToType(data['salesTaxPercentage'], 'String');
            }
            if (data.hasOwnProperty('shippingAndHandlingTaxed')) {
                obj['shippingAndHandlingTaxed'] = ApiClient.convertToType(data['shippingAndHandlingTaxed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SalesTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SalesTax</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['salesTaxJurisdictionId'] && !(typeof data['salesTaxJurisdictionId'] === 'string' || data['salesTaxJurisdictionId'] instanceof String)) {
            throw new Error("Expected the field `salesTaxJurisdictionId` to be a primitive type in the JSON string but got " + data['salesTaxJurisdictionId']);
        }
        // ensure the json data is a string
        if (data['salesTaxPercentage'] && !(typeof data['salesTaxPercentage'] === 'string' || data['salesTaxPercentage'] instanceof String)) {
            throw new Error("Expected the field `salesTaxPercentage` to be a primitive type in the JSON string but got " + data['salesTaxPercentage']);
        }

        return true;
    }


}



/**
 * The country code enumeration value identifies the country to which this sales tax rate applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum'>eBay API documentation</a>
 * @member {String} countryCode
 */
SalesTax.prototype['countryCode'] = undefined;

/**
 * A unique ID that identifies the sales tax jurisdiction to which the sales tax rate applies (for example, a state within the United States).
 * @member {String} salesTaxJurisdictionId
 */
SalesTax.prototype['salesTaxJurisdictionId'] = undefined;

/**
 * The sales tax rate that will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is returned here, such as <code>7.75</code>
 * @member {String} salesTaxPercentage
 */
SalesTax.prototype['salesTaxPercentage'] = undefined;

/**
 * If returned as <code>true</code>, sales tax is also applied to shipping and handling charges, and not just the total sales price of the order.
 * @member {Boolean} shippingAndHandlingTaxed
 */
SalesTax.prototype['shippingAndHandlingTaxed'] = undefined;






export default SalesTax;

