/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryType from './CategoryType';
import Deposit from './Deposit';
import PaymentMethod from './PaymentMethod';
import TimeDuration from './TimeDuration';

/**
 * The PaymentPolicy model module.
 * @module model/PaymentPolicy
 * @version v1.9.0
 */
class PaymentPolicy {
    /**
     * Constructs a new <code>PaymentPolicy</code>.
     * This type is used by the &lt;b&gt;paymentPolicy&lt;/b&gt; response container, a container which defines a seller&#39;s payment business policy for a specific marketplace.
     * @alias module:model/PaymentPolicy
     */
    constructor() { 
        
        PaymentPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentPolicy} obj Optional instance to populate.
     * @return {module:model/PaymentPolicy} The populated <code>PaymentPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentPolicy();

            if (data.hasOwnProperty('categoryTypes')) {
                obj['categoryTypes'] = ApiClient.convertToType(data['categoryTypes'], [CategoryType]);
            }
            if (data.hasOwnProperty('deposit')) {
                obj['deposit'] = Deposit.constructFromObject(data['deposit']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fullPaymentDueIn')) {
                obj['fullPaymentDueIn'] = TimeDuration.constructFromObject(data['fullPaymentDueIn']);
            }
            if (data.hasOwnProperty('immediatePay')) {
                obj['immediatePay'] = ApiClient.convertToType(data['immediatePay'], 'Boolean');
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('paymentInstructions')) {
                obj['paymentInstructions'] = ApiClient.convertToType(data['paymentInstructions'], 'String');
            }
            if (data.hasOwnProperty('paymentMethods')) {
                obj['paymentMethods'] = ApiClient.convertToType(data['paymentMethods'], [PaymentMethod]);
            }
            if (data.hasOwnProperty('paymentPolicyId')) {
                obj['paymentPolicyId'] = ApiClient.convertToType(data['paymentPolicyId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentPolicy</code>.
     */
    static validateJSON(data) {
        if (data['categoryTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categoryTypes'])) {
                throw new Error("Expected the field `categoryTypes` to be an array in the JSON data but got " + data['categoryTypes']);
            }
            // validate the optional field `categoryTypes` (array)
            for (const item of data['categoryTypes']) {
                CategoryType.validateJSON(item);
            };
        }
        // validate the optional field `deposit`
        if (data['deposit']) { // data not null
          Deposit.validateJSON(data['deposit']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `fullPaymentDueIn`
        if (data['fullPaymentDueIn']) { // data not null
          TimeDuration.validateJSON(data['fullPaymentDueIn']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['paymentInstructions'] && !(typeof data['paymentInstructions'] === 'string' || data['paymentInstructions'] instanceof String)) {
            throw new Error("Expected the field `paymentInstructions` to be a primitive type in the JSON string but got " + data['paymentInstructions']);
        }
        if (data['paymentMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentMethods'])) {
                throw new Error("Expected the field `paymentMethods` to be an array in the JSON data but got " + data['paymentMethods']);
            }
            // validate the optional field `paymentMethods` (array)
            for (const item of data['paymentMethods']) {
                PaymentMethod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paymentPolicyId'] && !(typeof data['paymentPolicyId'] === 'string' || data['paymentPolicyId'] instanceof String)) {
            throw new Error("Expected the field `paymentPolicyId` to be a primitive type in the JSON string but got " + data['paymentPolicyId']);
        }

        return true;
    }


}



/**
 * This container indicates whether the fulfillment policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
 * @member {Array.<module:model/CategoryType>} categoryTypes
 */
PaymentPolicy.prototype['categoryTypes'] = undefined;

/**
 * @member {module:model/Deposit} deposit
 */
PaymentPolicy.prototype['deposit'] = undefined;

/**
 * A seller-defined description of the payment policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250
 * @member {String} description
 */
PaymentPolicy.prototype['description'] = undefined;

/**
 * @member {module:model/TimeDuration} fullPaymentDueIn
 */
PaymentPolicy.prototype['fullPaymentDueIn'] = undefined;

/**
 * If this field is returned as <code>true</code>, immediate payment is required from the buyer for: <ul><li>A fixed-price item</li><li>An auction item where the buyer uses the 'Buy it Now' option</li><li>A deposit for a motor vehicle listing</li></ul><br />It is possible for the seller to set this field as <code>true</code> in the payment business policy, but it will not apply in some scenarios. For example, immediate payment is not applicable for auction listings that have a winning bidder, for buyer purchases that involve the Best Offer feature, or for transactions that happen offline between the buyer and seller.
 * @member {Boolean} immediatePay
 */
PaymentPolicy.prototype['immediatePay'] = undefined;

/**
 * The ID of the eBay marketplace to which the payment business policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
PaymentPolicy.prototype['marketplaceId'] = undefined;

/**
 * A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. <br/><br/><b>Max length</b>: 64
 * @member {String} name
 */
PaymentPolicy.prototype['name'] = undefined;

/**
 * Although this field may be returned for some older payment business policies, payment instructions are no longer supported by payment business policies. If this field is returned, it can be ignored and these payment instructions will not appear in any listings that use the corresponding business policy. <br/><br/><b>Max length</b>: 1000
 * @member {String} paymentInstructions
 */
PaymentPolicy.prototype['paymentInstructions'] = undefined;

/**
 * This container is returned to show the payment methods that are accepted for the payment business policy.  <br><br>Sellers do not have to specify any electronic payment methods for listings, so this array will often be returned empty unless the payment business policy is intended for motor vehicle listings or other items in categories where offline payments are required or supported. 
 * @member {Array.<module:model/PaymentMethod>} paymentMethods
 */
PaymentPolicy.prototype['paymentMethods'] = undefined;

/**
 * A unique eBay-assigned ID for a payment business policy. This ID is generated when the policy is created.
 * @member {String} paymentPolicyId
 */
PaymentPolicy.prototype['paymentPolicyId'] = undefined;






export default PaymentPolicy;

