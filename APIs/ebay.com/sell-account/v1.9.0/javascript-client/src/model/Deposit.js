/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import PaymentMethod from './PaymentMethod';
import TimeDuration from './TimeDuration';

/**
 * The Deposit model module.
 * @module model/Deposit
 * @version v1.9.0
 */
class Deposit {
    /**
     * Constructs a new <code>Deposit</code>.
     * This type is used to specify/indicate that an initial deposit is required for a motor vehicle listing.
     * @alias module:model/Deposit
     */
    constructor() { 
        
        Deposit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Deposit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deposit} obj Optional instance to populate.
     * @return {module:model/Deposit} The populated <code>Deposit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deposit();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('dueIn')) {
                obj['dueIn'] = TimeDuration.constructFromObject(data['dueIn']);
            }
            if (data.hasOwnProperty('paymentMethods')) {
                obj['paymentMethods'] = ApiClient.convertToType(data['paymentMethods'], [PaymentMethod]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deposit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deposit</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `dueIn`
        if (data['dueIn']) { // data not null
          TimeDuration.validateJSON(data['dueIn']);
        }
        if (data['paymentMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentMethods'])) {
                throw new Error("Expected the field `paymentMethods` to be an array in the JSON data but got " + data['paymentMethods']);
            }
            // validate the optional field `paymentMethods` (array)
            for (const item of data['paymentMethods']) {
                PaymentMethod.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amount
 */
Deposit.prototype['amount'] = undefined;

/**
 * @member {module:model/TimeDuration} dueIn
 */
Deposit.prototype['dueIn'] = undefined;

/**
 * This array is no longer applicable and should not be used since eBay now manages the electronic payment options available to buyers to pay the deposit.
 * @member {Array.<module:model/PaymentMethod>} paymentMethods
 */
Deposit.prototype['paymentMethods'] = undefined;






export default Deposit;

