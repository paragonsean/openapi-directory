/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeDuration from './TimeDuration';

/**
 * The InternationalReturnOverrideType model module.
 * @module model/InternationalReturnOverrideType
 * @version v1.9.0
 */
class InternationalReturnOverrideType {
    /**
     * Constructs a new <code>InternationalReturnOverrideType</code>.
     * This type defines the fields for a seller&#39;s international return policy. Sellers have the ability to set separate domestic and international return policies, but if an international return policy is not set, the same return policy settings specified for the domestic return policy are also used for returns for international buyers. 
     * @alias module:model/InternationalReturnOverrideType
     */
    constructor() { 
        
        InternationalReturnOverrideType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InternationalReturnOverrideType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InternationalReturnOverrideType} obj Optional instance to populate.
     * @return {module:model/InternationalReturnOverrideType} The populated <code>InternationalReturnOverrideType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InternationalReturnOverrideType();

            if (data.hasOwnProperty('returnMethod')) {
                obj['returnMethod'] = ApiClient.convertToType(data['returnMethod'], 'String');
            }
            if (data.hasOwnProperty('returnPeriod')) {
                obj['returnPeriod'] = TimeDuration.constructFromObject(data['returnPeriod']);
            }
            if (data.hasOwnProperty('returnShippingCostPayer')) {
                obj['returnShippingCostPayer'] = ApiClient.convertToType(data['returnShippingCostPayer'], 'String');
            }
            if (data.hasOwnProperty('returnsAccepted')) {
                obj['returnsAccepted'] = ApiClient.convertToType(data['returnsAccepted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InternationalReturnOverrideType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InternationalReturnOverrideType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['returnMethod'] && !(typeof data['returnMethod'] === 'string' || data['returnMethod'] instanceof String)) {
            throw new Error("Expected the field `returnMethod` to be a primitive type in the JSON string but got " + data['returnMethod']);
        }
        // validate the optional field `returnPeriod`
        if (data['returnPeriod']) { // data not null
          TimeDuration.validateJSON(data['returnPeriod']);
        }
        // ensure the json data is a string
        if (data['returnShippingCostPayer'] && !(typeof data['returnShippingCostPayer'] === 'string' || data['returnShippingCostPayer'] instanceof String)) {
            throw new Error("Expected the field `returnShippingCostPayer` to be a primitive type in the JSON string but got " + data['returnShippingCostPayer']);
        }

        return true;
    }


}



/**
 * This field sets/indicates if the seller offers replacement items to the buyer in the case of an international return. The buyer must be willing to accept a replacement item; otherwise, the seller will need to issue a refund for a return. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>
 * @member {String} returnMethod
 */
InternationalReturnOverrideType.prototype['returnMethod'] = undefined;

/**
 * @member {module:model/TimeDuration} returnPeriod
 */
InternationalReturnOverrideType.prototype['returnPeriod'] = undefined;

/**
 * This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for 'significantly not as described' (SNAD) issues.  <br/><br/>This field is conditionally required if the <b>internationalOverride.returnsAccepted</b> field is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>
 * @member {String} returnShippingCostPayer
 */
InternationalReturnOverrideType.prototype['returnShippingCostPayer'] = undefined;

/**
 * If set to <code>true</code>, the seller accepts international returns. If set to <code>false</code>, the seller does not accept international returns.  <br/><br/>This field is conditionally required if the seller chooses to have a separate international return policy.
 * @member {Boolean} returnsAccepted
 */
InternationalReturnOverrideType.prototype['returnsAccepted'] = undefined;






export default InternationalReturnOverrideType;

