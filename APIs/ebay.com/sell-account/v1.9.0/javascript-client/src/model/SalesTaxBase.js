/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SalesTaxBase model module.
 * @module model/SalesTaxBase
 * @version v1.9.0
 */
class SalesTaxBase {
    /**
     * Constructs a new <code>SalesTaxBase</code>.
     * This type is used by the base request of the &lt;b&gt;createOrReplaceSalesTax&lt;/b&gt;. 
     * @alias module:model/SalesTaxBase
     */
    constructor() { 
        
        SalesTaxBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SalesTaxBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SalesTaxBase} obj Optional instance to populate.
     * @return {module:model/SalesTaxBase} The populated <code>SalesTaxBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SalesTaxBase();

            if (data.hasOwnProperty('salesTaxPercentage')) {
                obj['salesTaxPercentage'] = ApiClient.convertToType(data['salesTaxPercentage'], 'String');
            }
            if (data.hasOwnProperty('shippingAndHandlingTaxed')) {
                obj['shippingAndHandlingTaxed'] = ApiClient.convertToType(data['shippingAndHandlingTaxed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SalesTaxBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SalesTaxBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['salesTaxPercentage'] && !(typeof data['salesTaxPercentage'] === 'string' || data['salesTaxPercentage'] instanceof String)) {
            throw new Error("Expected the field `salesTaxPercentage` to be a primitive type in the JSON string but got " + data['salesTaxPercentage']);
        }

        return true;
    }


}



/**
 * This field is used to set the sales tax rate for the tax jurisdiction set in the call URI. When applicable to an order, this sales tax rate will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is set here, such as <code>7.75</code>.
 * @member {String} salesTaxPercentage
 */
SalesTaxBase.prototype['salesTaxPercentage'] = undefined;

/**
 * This field is set to <code>true</code> if the seller wishes to apply sales tax to shipping and handling charges, and not just the total sales price of the order. Otherwise, this field's value should be set to <code>false</code>.
 * @member {Boolean} shippingAndHandlingTaxed
 */
SalesTaxBase.prototype['shippingAndHandlingTaxed'] = undefined;






export default SalesTaxBase;

