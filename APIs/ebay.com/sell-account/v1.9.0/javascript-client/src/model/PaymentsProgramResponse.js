/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentsProgramResponse model module.
 * @module model/PaymentsProgramResponse
 * @version v1.9.0
 */
class PaymentsProgramResponse {
    /**
     * Constructs a new <code>PaymentsProgramResponse</code>.
     * The response object containing the sellers status with regards to the specified payment program.
     * @alias module:model/PaymentsProgramResponse
     */
    constructor() { 
        
        PaymentsProgramResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentsProgramResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentsProgramResponse} obj Optional instance to populate.
     * @return {module:model/PaymentsProgramResponse} The populated <code>PaymentsProgramResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentsProgramResponse();

            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('paymentsProgramType')) {
                obj['paymentsProgramType'] = ApiClient.convertToType(data['paymentsProgramType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('wasPreviouslyOptedIn')) {
                obj['wasPreviouslyOptedIn'] = ApiClient.convertToType(data['wasPreviouslyOptedIn'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentsProgramResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentsProgramResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['paymentsProgramType'] && !(typeof data['paymentsProgramType'] === 'string' || data['paymentsProgramType'] instanceof String)) {
            throw new Error("Expected the field `paymentsProgramType` to be a primitive type in the JSON string but got " + data['paymentsProgramType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The ID of the eBay marketplace to which the payment program applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
PaymentsProgramResponse.prototype['marketplaceId'] = undefined;

/**
 * This parameter specifies the payment program whose status is returned by the call.  <br><br>Currently the only supported payments program is <code>EBAY_PAYMENTS</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:PaymentsProgramType'>eBay API documentation</a>
 * @member {String} paymentsProgramType
 */
PaymentsProgramResponse.prototype['paymentsProgramType'] = undefined;

/**
 * The enumeration value returned in this field indicates whether or not the seller's account is enabled for the payments program. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:PaymentsProgramStatus'>eBay API documentation</a>
 * @member {String} status
 */
PaymentsProgramResponse.prototype['status'] = undefined;

/**
 * If returned as <code>true</code>, the seller was at one point opted-in to the associated payment program, but they later opted out of the program. A value of <code>false</code> indicates the seller never opted-in to the program or if they did opt-in to the program, they never opted-out of it.  <br><br>It's important to note that the setting of this field does not indicate the seller's current status regarding the payment program. It is possible for this field to return <code>true</code> while the <b>status</b> field returns <code>OPTED_IN</code>.
 * @member {Boolean} wasPreviouslyOptedIn
 */
PaymentsProgramResponse.prototype['wasPreviouslyOptedIn'] = undefined;






export default PaymentsProgramResponse;

