/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryType from './CategoryType';
import InternationalReturnOverrideType from './InternationalReturnOverrideType';
import TimeDuration from './TimeDuration';

/**
 * The ReturnPolicyRequest model module.
 * @module model/ReturnPolicyRequest
 * @version v1.9.0
 */
class ReturnPolicyRequest {
    /**
     * Constructs a new <code>ReturnPolicyRequest</code>.
     * This root container defines a seller&#39;s return business policy for a specific marketplace and category group. This type is used when creating or updating a return business policy.
     * @alias module:model/ReturnPolicyRequest
     */
    constructor() { 
        
        ReturnPolicyRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnPolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnPolicyRequest} obj Optional instance to populate.
     * @return {module:model/ReturnPolicyRequest} The populated <code>ReturnPolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnPolicyRequest();

            if (data.hasOwnProperty('categoryTypes')) {
                obj['categoryTypes'] = ApiClient.convertToType(data['categoryTypes'], [CategoryType]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('extendedHolidayReturnsOffered')) {
                obj['extendedHolidayReturnsOffered'] = ApiClient.convertToType(data['extendedHolidayReturnsOffered'], 'Boolean');
            }
            if (data.hasOwnProperty('internationalOverride')) {
                obj['internationalOverride'] = InternationalReturnOverrideType.constructFromObject(data['internationalOverride']);
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('refundMethod')) {
                obj['refundMethod'] = ApiClient.convertToType(data['refundMethod'], 'String');
            }
            if (data.hasOwnProperty('restockingFeePercentage')) {
                obj['restockingFeePercentage'] = ApiClient.convertToType(data['restockingFeePercentage'], 'String');
            }
            if (data.hasOwnProperty('returnInstructions')) {
                obj['returnInstructions'] = ApiClient.convertToType(data['returnInstructions'], 'String');
            }
            if (data.hasOwnProperty('returnMethod')) {
                obj['returnMethod'] = ApiClient.convertToType(data['returnMethod'], 'String');
            }
            if (data.hasOwnProperty('returnPeriod')) {
                obj['returnPeriod'] = TimeDuration.constructFromObject(data['returnPeriod']);
            }
            if (data.hasOwnProperty('returnShippingCostPayer')) {
                obj['returnShippingCostPayer'] = ApiClient.convertToType(data['returnShippingCostPayer'], 'String');
            }
            if (data.hasOwnProperty('returnsAccepted')) {
                obj['returnsAccepted'] = ApiClient.convertToType(data['returnsAccepted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnPolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnPolicyRequest</code>.
     */
    static validateJSON(data) {
        if (data['categoryTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categoryTypes'])) {
                throw new Error("Expected the field `categoryTypes` to be an array in the JSON data but got " + data['categoryTypes']);
            }
            // validate the optional field `categoryTypes` (array)
            for (const item of data['categoryTypes']) {
                CategoryType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `internationalOverride`
        if (data['internationalOverride']) { // data not null
          InternationalReturnOverrideType.validateJSON(data['internationalOverride']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['refundMethod'] && !(typeof data['refundMethod'] === 'string' || data['refundMethod'] instanceof String)) {
            throw new Error("Expected the field `refundMethod` to be a primitive type in the JSON string but got " + data['refundMethod']);
        }
        // ensure the json data is a string
        if (data['restockingFeePercentage'] && !(typeof data['restockingFeePercentage'] === 'string' || data['restockingFeePercentage'] instanceof String)) {
            throw new Error("Expected the field `restockingFeePercentage` to be a primitive type in the JSON string but got " + data['restockingFeePercentage']);
        }
        // ensure the json data is a string
        if (data['returnInstructions'] && !(typeof data['returnInstructions'] === 'string' || data['returnInstructions'] instanceof String)) {
            throw new Error("Expected the field `returnInstructions` to be a primitive type in the JSON string but got " + data['returnInstructions']);
        }
        // ensure the json data is a string
        if (data['returnMethod'] && !(typeof data['returnMethod'] === 'string' || data['returnMethod'] instanceof String)) {
            throw new Error("Expected the field `returnMethod` to be a primitive type in the JSON string but got " + data['returnMethod']);
        }
        // validate the optional field `returnPeriod`
        if (data['returnPeriod']) { // data not null
          TimeDuration.validateJSON(data['returnPeriod']);
        }
        // ensure the json data is a string
        if (data['returnShippingCostPayer'] && !(typeof data['returnShippingCostPayer'] === 'string' || data['returnShippingCostPayer'] instanceof String)) {
            throw new Error("Expected the field `returnShippingCostPayer` to be a primitive type in the JSON string but got " + data['returnShippingCostPayer']);
        }

        return true;
    }


}



/**
 * This container indicates which category group that the return policy applies to.<br/><br/><span class=\"tablenote\"><b>Note</b>: Return business policies are not applicable to motor vehicle listings, so the <b>categoryTypes.name</b> value must be set to <code>ALL_EXCLUDING_MOTORS_VEHICLES</code> for return business policies.</span>
 * @member {Array.<module:model/CategoryType>} categoryTypes
 */
ReturnPolicyRequest.prototype['categoryTypes'] = undefined;

/**
 * A seller-defined description of the return business policy. This description is only for the seller's use, and is not exposed on any eBay pages.  <br/><br/><b>Max length</b>: 250
 * @member {String} description
 */
ReturnPolicyRequest.prototype['description'] = undefined;

/**
 * <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer supports extended holiday returns. Any value supplied in this field is neither read nor returned.</p> 
 * @member {Boolean} extendedHolidayReturnsOffered
 */
ReturnPolicyRequest.prototype['extendedHolidayReturnsOffered'] = undefined;

/**
 * @member {module:model/InternationalReturnOverrideType} internationalOverride
 */
ReturnPolicyRequest.prototype['internationalOverride'] = undefined;

/**
 * The ID of the eBay marketplace to which this return business policy applies.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
ReturnPolicyRequest.prototype['marketplaceId'] = undefined;

/**
 * A seller-defined name for this return business policy. Names must be unique for policies assigned to the same marketplace. <br/><br/><b>Max length</b>: 64
 * @member {String} name
 */
ReturnPolicyRequest.prototype['name'] = undefined;

/**
 * This value indicates the refund method that will be used by the seller for buyer returns.<p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> If this field is not included in a return business policy, it will default to MONEY_BACK.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:RefundMethodEnum'>eBay API documentation</a>
 * @member {String} refundMethod
 */
ReturnPolicyRequest.prototype['refundMethod'] = undefined;

/**
 * <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer allows sellers to charge a restocking fee for buyer remorse returns. If this field is included, it is ignored.</p>
 * @member {String} restockingFeePercentage
 */
ReturnPolicyRequest.prototype['restockingFeePercentage'] = undefined;

/**
 * This text-based field provides more details on seller-specified return instructions. <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is no longer supported on many eBay marketplaces. To see if a marketplace and eBay category does support this field, call <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getReturnPolicies\">getReturnPolicies</a> method of the <b>Metadata API</b>. Then you will look for the <b>policyDescriptionEnabled</b> field with a value of <code>true</code> for the eBay category.</span></p><br/><b>Max length</b>: 5000 (8000 for DE)
 * @member {String} returnInstructions
 */
ReturnPolicyRequest.prototype['returnInstructions'] = undefined;

/**
 * This field can be used if the seller is willing and able to offer a replacement item as an alternative to 'Money Back'. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>
 * @member {String} returnMethod
 */
ReturnPolicyRequest.prototype['returnMethod'] = undefined;

/**
 * @member {module:model/TimeDuration} returnPeriod
 */
ReturnPolicyRequest.prototype['returnPeriod'] = undefined;

/**
 * This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues.  <br/><br/>This field is conditionally required if <b>returnsAccepted</b> is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>
 * @member {String} returnShippingCostPayer
 */
ReturnPolicyRequest.prototype['returnShippingCostPayer'] = undefined;

/**
 * If set to <code>true</code>, the seller accepts returns. <p><span class=\"tablenote\"><strong>Note:</strong>Top-Rated sellers must accept item returns and the <b>handlingTime</b> should be set to zero days or one day for a listing to receive a Top-Rated Plus badge on the View Item or search result pages. For more information on eBay's Top-Rated seller program, see <a href=\"http://pages.ebay.com/help/sell/top-rated.html \">Becoming a Top Rated Seller and qualifying for Top Rated Plus benefits</a>.</span></p>
 * @member {Boolean} returnsAccepted
 */
ReturnPolicyRequest.prototype['returnsAccepted'] = undefined;






export default ReturnPolicyRequest;

