/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryType from './CategoryType';
import Error from './Error';
import InternationalReturnOverrideType from './InternationalReturnOverrideType';
import TimeDuration from './TimeDuration';

/**
 * The SetReturnPolicyResponse model module.
 * @module model/SetReturnPolicyResponse
 * @version v1.9.0
 */
class SetReturnPolicyResponse {
    /**
     * Constructs a new <code>SetReturnPolicyResponse</code>.
     * A complex type that is populated with a response containing a return policies.
     * @alias module:model/SetReturnPolicyResponse
     */
    constructor() { 
        
        SetReturnPolicyResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SetReturnPolicyResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetReturnPolicyResponse} obj Optional instance to populate.
     * @return {module:model/SetReturnPolicyResponse} The populated <code>SetReturnPolicyResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetReturnPolicyResponse();

            if (data.hasOwnProperty('categoryTypes')) {
                obj['categoryTypes'] = ApiClient.convertToType(data['categoryTypes'], [CategoryType]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('extendedHolidayReturnsOffered')) {
                obj['extendedHolidayReturnsOffered'] = ApiClient.convertToType(data['extendedHolidayReturnsOffered'], 'Boolean');
            }
            if (data.hasOwnProperty('internationalOverride')) {
                obj['internationalOverride'] = InternationalReturnOverrideType.constructFromObject(data['internationalOverride']);
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('refundMethod')) {
                obj['refundMethod'] = ApiClient.convertToType(data['refundMethod'], 'String');
            }
            if (data.hasOwnProperty('restockingFeePercentage')) {
                obj['restockingFeePercentage'] = ApiClient.convertToType(data['restockingFeePercentage'], 'String');
            }
            if (data.hasOwnProperty('returnInstructions')) {
                obj['returnInstructions'] = ApiClient.convertToType(data['returnInstructions'], 'String');
            }
            if (data.hasOwnProperty('returnMethod')) {
                obj['returnMethod'] = ApiClient.convertToType(data['returnMethod'], 'String');
            }
            if (data.hasOwnProperty('returnPeriod')) {
                obj['returnPeriod'] = TimeDuration.constructFromObject(data['returnPeriod']);
            }
            if (data.hasOwnProperty('returnPolicyId')) {
                obj['returnPolicyId'] = ApiClient.convertToType(data['returnPolicyId'], 'String');
            }
            if (data.hasOwnProperty('returnShippingCostPayer')) {
                obj['returnShippingCostPayer'] = ApiClient.convertToType(data['returnShippingCostPayer'], 'String');
            }
            if (data.hasOwnProperty('returnsAccepted')) {
                obj['returnsAccepted'] = ApiClient.convertToType(data['returnsAccepted'], 'Boolean');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Error]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetReturnPolicyResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetReturnPolicyResponse</code>.
     */
    static validateJSON(data) {
        if (data['categoryTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categoryTypes'])) {
                throw new Error("Expected the field `categoryTypes` to be an array in the JSON data but got " + data['categoryTypes']);
            }
            // validate the optional field `categoryTypes` (array)
            for (const item of data['categoryTypes']) {
                CategoryType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `internationalOverride`
        if (data['internationalOverride']) { // data not null
          InternationalReturnOverrideType.validateJSON(data['internationalOverride']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['refundMethod'] && !(typeof data['refundMethod'] === 'string' || data['refundMethod'] instanceof String)) {
            throw new Error("Expected the field `refundMethod` to be a primitive type in the JSON string but got " + data['refundMethod']);
        }
        // ensure the json data is a string
        if (data['restockingFeePercentage'] && !(typeof data['restockingFeePercentage'] === 'string' || data['restockingFeePercentage'] instanceof String)) {
            throw new Error("Expected the field `restockingFeePercentage` to be a primitive type in the JSON string but got " + data['restockingFeePercentage']);
        }
        // ensure the json data is a string
        if (data['returnInstructions'] && !(typeof data['returnInstructions'] === 'string' || data['returnInstructions'] instanceof String)) {
            throw new Error("Expected the field `returnInstructions` to be a primitive type in the JSON string but got " + data['returnInstructions']);
        }
        // ensure the json data is a string
        if (data['returnMethod'] && !(typeof data['returnMethod'] === 'string' || data['returnMethod'] instanceof String)) {
            throw new Error("Expected the field `returnMethod` to be a primitive type in the JSON string but got " + data['returnMethod']);
        }
        // validate the optional field `returnPeriod`
        if (data['returnPeriod']) { // data not null
          TimeDuration.validateJSON(data['returnPeriod']);
        }
        // ensure the json data is a string
        if (data['returnPolicyId'] && !(typeof data['returnPolicyId'] === 'string' || data['returnPolicyId'] instanceof String)) {
            throw new Error("Expected the field `returnPolicyId` to be a primitive type in the JSON string but got " + data['returnPolicyId']);
        }
        // ensure the json data is a string
        if (data['returnShippingCostPayer'] && !(typeof data['returnShippingCostPayer'] === 'string' || data['returnShippingCostPayer'] instanceof String)) {
            throw new Error("Expected the field `returnShippingCostPayer` to be a primitive type in the JSON string but got " + data['returnShippingCostPayer']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This field always returns <code>ALL_EXCLUDING_MOTORS_VEHICLES</code> for return business policies, since return business policies are not applicable to motor vehicle listings.
 * @member {Array.<module:model/CategoryType>} categoryTypes
 */
SetReturnPolicyResponse.prototype['categoryTypes'] = undefined;

/**
 * A seller-defined description of the return business policy. This description is only for the seller's use, and is not exposed on any eBay pages. This field is returned if set for the policy. <br/><br/><b>Max length</b>: 250
 * @member {String} description
 */
SetReturnPolicyResponse.prototype['description'] = undefined;

/**
 * <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer supports extended holiday returns. This field should no longer be returned.</p> 
 * @member {Boolean} extendedHolidayReturnsOffered
 */
SetReturnPolicyResponse.prototype['extendedHolidayReturnsOffered'] = undefined;

/**
 * @member {module:model/InternationalReturnOverrideType} internationalOverride
 */
SetReturnPolicyResponse.prototype['internationalOverride'] = undefined;

/**
 * The ID of the eBay marketplace to which this return business policy applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
SetReturnPolicyResponse.prototype['marketplaceId'] = undefined;

/**
 * A seller-defined name for this return business policy. Names must be unique for policies assigned to the same marketplace.<br /><br /><b>Max length:</b> 64
 * @member {String} name
 */
SetReturnPolicyResponse.prototype['name'] = undefined;

/**
 * If a seller indicates that they will accept buyer returns, this value will be <code>MONEY_BACK</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:RefundMethodEnum'>eBay API documentation</a>
 * @member {String} refundMethod
 */
SetReturnPolicyResponse.prototype['refundMethod'] = undefined;

/**
 * <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is deprecated, since eBay no longer allows sellers to charge a restocking fee for buyer remorse returns.</p>
 * @member {String} restockingFeePercentage
 */
SetReturnPolicyResponse.prototype['restockingFeePercentage'] = undefined;

/**
 * This text-based field provides more details on seller-specified return instructions. <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is no longer supported on many eBay marketplaces. To see if a marketplace and eBay category does support this field, call <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getReturnPolicies\">getReturnPolicies</a> method of the <b>Metadata API</b>. Then you will look for the <b>policyDescriptionEnabled</b> field with a value of <code>true</code> for the eBay category.</span></p><br/><b>Max length</b>: 5000 (8000 for DE)
 * @member {String} returnInstructions
 */
SetReturnPolicyResponse.prototype['returnInstructions'] = undefined;

/**
 * This field will be returned if the seller is willing and able to offer a replacement item as an alternative to 'Money Back'. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>
 * @member {String} returnMethod
 */
SetReturnPolicyResponse.prototype['returnMethod'] = undefined;

/**
 * @member {module:model/TimeDuration} returnPeriod
 */
SetReturnPolicyResponse.prototype['returnPeriod'] = undefined;

/**
 * A unique eBay-assigned ID for a return business policy. This ID is generated when the policy is created.
 * @member {String} returnPolicyId
 */
SetReturnPolicyResponse.prototype['returnPolicyId'] = undefined;

/**
 * This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Note that the seller is always responsible for return shipping costs for SNAD-related issues.  <br/><br/>This container will be returned unless the business policy states that the seller does not accept returns. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>
 * @member {String} returnShippingCostPayer
 */
SetReturnPolicyResponse.prototype['returnShippingCostPayer'] = undefined;

/**
 * If set to <code>true</code>, the seller accepts returns. If set to <code>false</code>, this field indicates that the seller does not accept returns.
 * @member {Boolean} returnsAccepted
 */
SetReturnPolicyResponse.prototype['returnsAccepted'] = undefined;

/**
 * An array of one or more errors or warnings that were generated during the processing of the request. If there were no issues with the request, this array will return empty.
 * @member {Array.<module:model/Error>} warnings
 */
SetReturnPolicyResponse.prototype['warnings'] = undefined;






export default SetReturnPolicyResponse;

