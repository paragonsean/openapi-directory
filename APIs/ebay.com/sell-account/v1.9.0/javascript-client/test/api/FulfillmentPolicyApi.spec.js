/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AccountApi);
  }
}(this, function(expect, AccountApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AccountApi.FulfillmentPolicyApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FulfillmentPolicyApi', function() {
    describe('createFulfillmentPolicy', function() {
      it('should call createFulfillmentPolicy successfully', function(done) {
        //uncomment below and update the code to test createFulfillmentPolicy
        //instance.createFulfillmentPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFulfillmentPolicy', function() {
      it('should call deleteFulfillmentPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteFulfillmentPolicy
        //instance.deleteFulfillmentPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFulfillmentPolicies', function() {
      it('should call getFulfillmentPolicies successfully', function(done) {
        //uncomment below and update the code to test getFulfillmentPolicies
        //instance.getFulfillmentPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFulfillmentPolicy', function() {
      it('should call getFulfillmentPolicy successfully', function(done) {
        //uncomment below and update the code to test getFulfillmentPolicy
        //instance.getFulfillmentPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFulfillmentPolicyByName', function() {
      it('should call getFulfillmentPolicyByName successfully', function(done) {
        //uncomment below and update the code to test getFulfillmentPolicyByName
        //instance.getFulfillmentPolicyByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFulfillmentPolicy', function() {
      it('should call updateFulfillmentPolicy successfully', function(done) {
        //uncomment below and update the code to test updateFulfillmentPolicy
        //instance.updateFulfillmentPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
