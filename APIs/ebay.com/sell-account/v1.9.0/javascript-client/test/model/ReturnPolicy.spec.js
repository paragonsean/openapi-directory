/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AccountApi);
  }
}(this, function(expect, AccountApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AccountApi.ReturnPolicy();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReturnPolicy', function() {
    it('should create an instance of ReturnPolicy', function() {
      // uncomment below and update the code to test ReturnPolicy
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be.a(AccountApi.ReturnPolicy);
    });

    it('should have the property categoryTypes (base name: "categoryTypes")', function() {
      // uncomment below and update the code to test the property categoryTypes
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property extendedHolidayReturnsOffered (base name: "extendedHolidayReturnsOffered")', function() {
      // uncomment below and update the code to test the property extendedHolidayReturnsOffered
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property internationalOverride (base name: "internationalOverride")', function() {
      // uncomment below and update the code to test the property internationalOverride
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property marketplaceId (base name: "marketplaceId")', function() {
      // uncomment below and update the code to test the property marketplaceId
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property refundMethod (base name: "refundMethod")', function() {
      // uncomment below and update the code to test the property refundMethod
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property restockingFeePercentage (base name: "restockingFeePercentage")', function() {
      // uncomment below and update the code to test the property restockingFeePercentage
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property returnInstructions (base name: "returnInstructions")', function() {
      // uncomment below and update the code to test the property returnInstructions
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property returnMethod (base name: "returnMethod")', function() {
      // uncomment below and update the code to test the property returnMethod
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property returnPeriod (base name: "returnPeriod")', function() {
      // uncomment below and update the code to test the property returnPeriod
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property returnPolicyId (base name: "returnPolicyId")', function() {
      // uncomment below and update the code to test the property returnPolicyId
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property returnShippingCostPayer (base name: "returnShippingCostPayer")', function() {
      // uncomment below and update the code to test the property returnShippingCostPayer
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

    it('should have the property returnsAccepted (base name: "returnsAccepted")', function() {
      // uncomment below and update the code to test the property returnsAccepted
      //var instance = new AccountApi.ReturnPolicy();
      //expect(instance).to.be();
    });

  });

}));
