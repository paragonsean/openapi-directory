/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AccountApi);
  }
}(this, function(expect, AccountApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AccountApi.SetFulfillmentPolicyResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SetFulfillmentPolicyResponse', function() {
    it('should create an instance of SetFulfillmentPolicyResponse', function() {
      // uncomment below and update the code to test SetFulfillmentPolicyResponse
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be.a(AccountApi.SetFulfillmentPolicyResponse);
    });

    it('should have the property categoryTypes (base name: "categoryTypes")', function() {
      // uncomment below and update the code to test the property categoryTypes
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property freightShipping (base name: "freightShipping")', function() {
      // uncomment below and update the code to test the property freightShipping
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentPolicyId (base name: "fulfillmentPolicyId")', function() {
      // uncomment below and update the code to test the property fulfillmentPolicyId
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property globalShipping (base name: "globalShipping")', function() {
      // uncomment below and update the code to test the property globalShipping
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property handlingTime (base name: "handlingTime")', function() {
      // uncomment below and update the code to test the property handlingTime
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property localPickup (base name: "localPickup")', function() {
      // uncomment below and update the code to test the property localPickup
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property marketplaceId (base name: "marketplaceId")', function() {
      // uncomment below and update the code to test the property marketplaceId
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property pickupDropOff (base name: "pickupDropOff")', function() {
      // uncomment below and update the code to test the property pickupDropOff
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property shipToLocations (base name: "shipToLocations")', function() {
      // uncomment below and update the code to test the property shipToLocations
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property shippingOptions (base name: "shippingOptions")', function() {
      // uncomment below and update the code to test the property shippingOptions
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

    it('should have the property warnings (base name: "warnings")', function() {
      // uncomment below and update the code to test the property warnings
      //var instance = new AccountApi.SetFulfillmentPolicyResponse();
      //expect(instance).to.be();
    });

  });

}));
