/**
 * Account API
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AccountApi);
  }
}(this, function(expect, AccountApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AccountApi.ShippingService();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ShippingService', function() {
    it('should create an instance of ShippingService', function() {
      // uncomment below and update the code to test ShippingService
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be.a(AccountApi.ShippingService);
    });

    it('should have the property additionalShippingCost (base name: "additionalShippingCost")', function() {
      // uncomment below and update the code to test the property additionalShippingCost
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property buyerResponsibleForPickup (base name: "buyerResponsibleForPickup")', function() {
      // uncomment below and update the code to test the property buyerResponsibleForPickup
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property buyerResponsibleForShipping (base name: "buyerResponsibleForShipping")', function() {
      // uncomment below and update the code to test the property buyerResponsibleForShipping
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property cashOnDeliveryFee (base name: "cashOnDeliveryFee")', function() {
      // uncomment below and update the code to test the property cashOnDeliveryFee
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property freeShipping (base name: "freeShipping")', function() {
      // uncomment below and update the code to test the property freeShipping
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shipToLocations (base name: "shipToLocations")', function() {
      // uncomment below and update the code to test the property shipToLocations
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shippingCarrierCode (base name: "shippingCarrierCode")', function() {
      // uncomment below and update the code to test the property shippingCarrierCode
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shippingCost (base name: "shippingCost")', function() {
      // uncomment below and update the code to test the property shippingCost
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shippingServiceCode (base name: "shippingServiceCode")', function() {
      // uncomment below and update the code to test the property shippingServiceCode
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sortOrder")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property surcharge (base name: "surcharge")', function() {
      // uncomment below and update the code to test the property surcharge
      //var instance = new AccountApi.ShippingService();
      //expect(instance).to.be();
    });

  });

}));
