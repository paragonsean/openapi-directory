# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_policy import PaymentPolicy
from openapi_server import util


class PaymentPolicyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, payment_policies: List[PaymentPolicy]=None, prev: str=None, total: int=None):
        """PaymentPolicyResponse - a model defined in OpenAPI

        :param href: The href of this PaymentPolicyResponse.
        :param limit: The limit of this PaymentPolicyResponse.
        :param next: The next of this PaymentPolicyResponse.
        :param offset: The offset of this PaymentPolicyResponse.
        :param payment_policies: The payment_policies of this PaymentPolicyResponse.
        :param prev: The prev of this PaymentPolicyResponse.
        :param total: The total of this PaymentPolicyResponse.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'payment_policies': List[PaymentPolicy],
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'payment_policies': 'paymentPolicies',
            'prev': 'prev',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._payment_policies = payment_policies
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentPolicyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentPolicyResponse of this PaymentPolicyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PaymentPolicyResponse.

        This field is for future use.

        :return: The href of this PaymentPolicyResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PaymentPolicyResponse.

        This field is for future use.

        :param href: The href of this PaymentPolicyResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PaymentPolicyResponse.

        This field is for future use.

        :return: The limit of this PaymentPolicyResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaymentPolicyResponse.

        This field is for future use.

        :param limit: The limit of this PaymentPolicyResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this PaymentPolicyResponse.

        This field is for future use.

        :return: The next of this PaymentPolicyResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PaymentPolicyResponse.

        This field is for future use.

        :param next: The next of this PaymentPolicyResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PaymentPolicyResponse.

        This field is for future use.

        :return: The offset of this PaymentPolicyResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaymentPolicyResponse.

        This field is for future use.

        :param offset: The offset of this PaymentPolicyResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def payment_policies(self):
        """Gets the payment_policies of this PaymentPolicyResponse.

        A list of all of the seller's payment business policies defined for the specified marketplace. This array will be returned as empty if no payment business policies are defined for the specified marketplace.

        :return: The payment_policies of this PaymentPolicyResponse.
        :rtype: List[PaymentPolicy]
        """
        return self._payment_policies

    @payment_policies.setter
    def payment_policies(self, payment_policies):
        """Sets the payment_policies of this PaymentPolicyResponse.

        A list of all of the seller's payment business policies defined for the specified marketplace. This array will be returned as empty if no payment business policies are defined for the specified marketplace.

        :param payment_policies: The payment_policies of this PaymentPolicyResponse.
        :type payment_policies: List[PaymentPolicy]
        """

        self._payment_policies = payment_policies

    @property
    def prev(self):
        """Gets the prev of this PaymentPolicyResponse.

        This field is for future use.

        :return: The prev of this PaymentPolicyResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PaymentPolicyResponse.

        This field is for future use.

        :param prev: The prev of this PaymentPolicyResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this PaymentPolicyResponse.

        The total number of payment business policies retrieved in the result set.  <br/><br/>If no payment business policies are defined for the specified marketplace, this field is returned with a value of <code>0</code>.

        :return: The total of this PaymentPolicyResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PaymentPolicyResponse.

        The total number of payment business policies retrieved in the result set.  <br/><br/>If no payment business policies are defined for the specified marketplace, this field is returned with a value of <code>0</code>.

        :param total: The total of this PaymentPolicyResponse.
        :type total: int
        """

        self._total = total
