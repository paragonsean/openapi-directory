# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesTaxBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sales_tax_percentage: str=None, shipping_and_handling_taxed: bool=None):
        """SalesTaxBase - a model defined in OpenAPI

        :param sales_tax_percentage: The sales_tax_percentage of this SalesTaxBase.
        :param shipping_and_handling_taxed: The shipping_and_handling_taxed of this SalesTaxBase.
        """
        self.openapi_types = {
            'sales_tax_percentage': str,
            'shipping_and_handling_taxed': bool
        }

        self.attribute_map = {
            'sales_tax_percentage': 'salesTaxPercentage',
            'shipping_and_handling_taxed': 'shippingAndHandlingTaxed'
        }

        self._sales_tax_percentage = sales_tax_percentage
        self._shipping_and_handling_taxed = shipping_and_handling_taxed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesTaxBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesTaxBase of this SalesTaxBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sales_tax_percentage(self):
        """Gets the sales_tax_percentage of this SalesTaxBase.

        This field is used to set the sales tax rate for the tax jurisdiction set in the call URI. When applicable to an order, this sales tax rate will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is set here, such as <code>7.75</code>.

        :return: The sales_tax_percentage of this SalesTaxBase.
        :rtype: str
        """
        return self._sales_tax_percentage

    @sales_tax_percentage.setter
    def sales_tax_percentage(self, sales_tax_percentage):
        """Sets the sales_tax_percentage of this SalesTaxBase.

        This field is used to set the sales tax rate for the tax jurisdiction set in the call URI. When applicable to an order, this sales tax rate will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is set here, such as <code>7.75</code>.

        :param sales_tax_percentage: The sales_tax_percentage of this SalesTaxBase.
        :type sales_tax_percentage: str
        """

        self._sales_tax_percentage = sales_tax_percentage

    @property
    def shipping_and_handling_taxed(self):
        """Gets the shipping_and_handling_taxed of this SalesTaxBase.

        This field is set to <code>true</code> if the seller wishes to apply sales tax to shipping and handling charges, and not just the total sales price of the order. Otherwise, this field's value should be set to <code>false</code>.

        :return: The shipping_and_handling_taxed of this SalesTaxBase.
        :rtype: bool
        """
        return self._shipping_and_handling_taxed

    @shipping_and_handling_taxed.setter
    def shipping_and_handling_taxed(self, shipping_and_handling_taxed):
        """Sets the shipping_and_handling_taxed of this SalesTaxBase.

        This field is set to <code>true</code> if the seller wishes to apply sales tax to shipping and handling charges, and not just the total sales price of the order. Otherwise, this field's value should be set to <code>false</code>.

        :param shipping_and_handling_taxed: The shipping_and_handling_taxed of this SalesTaxBase.
        :type shipping_and_handling_taxed: bool
        """

        self._shipping_and_handling_taxed = shipping_and_handling_taxed
