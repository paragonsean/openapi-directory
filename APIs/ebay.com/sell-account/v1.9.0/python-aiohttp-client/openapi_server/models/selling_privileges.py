# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.selling_limit import SellingLimit
from openapi_server import util


class SellingPrivileges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, seller_registration_completed: bool=None, selling_limit: SellingLimit=None):
        """SellingPrivileges - a model defined in OpenAPI

        :param seller_registration_completed: The seller_registration_completed of this SellingPrivileges.
        :param selling_limit: The selling_limit of this SellingPrivileges.
        """
        self.openapi_types = {
            'seller_registration_completed': bool,
            'selling_limit': SellingLimit
        }

        self.attribute_map = {
            'seller_registration_completed': 'sellerRegistrationCompleted',
            'selling_limit': 'sellingLimit'
        }

        self._seller_registration_completed = seller_registration_completed
        self._selling_limit = selling_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellingPrivileges':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SellingPrivileges of this SellingPrivileges.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seller_registration_completed(self):
        """Gets the seller_registration_completed of this SellingPrivileges.

        If this field is returned as <code>true</code>, the seller's registration is completed. If this field is returned as <code>false</code>, the registration process is not complete.

        :return: The seller_registration_completed of this SellingPrivileges.
        :rtype: bool
        """
        return self._seller_registration_completed

    @seller_registration_completed.setter
    def seller_registration_completed(self, seller_registration_completed):
        """Sets the seller_registration_completed of this SellingPrivileges.

        If this field is returned as <code>true</code>, the seller's registration is completed. If this field is returned as <code>false</code>, the registration process is not complete.

        :param seller_registration_completed: The seller_registration_completed of this SellingPrivileges.
        :type seller_registration_completed: bool
        """

        self._seller_registration_completed = seller_registration_completed

    @property
    def selling_limit(self):
        """Gets the selling_limit of this SellingPrivileges.


        :return: The selling_limit of this SellingPrivileges.
        :rtype: SellingLimit
        """
        return self._selling_limit

    @selling_limit.setter
    def selling_limit(self, selling_limit):
        """Sets the selling_limit of this SellingPrivileges.


        :param selling_limit: The selling_limit of this SellingPrivileges.
        :type selling_limit: SellingLimit
        """

        self._selling_limit = selling_limit
