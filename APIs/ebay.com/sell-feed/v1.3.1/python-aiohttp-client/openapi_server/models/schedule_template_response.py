# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.supported_configuration import SupportedConfiguration
from openapi_server import util


class ScheduleTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed_type: str=None, frequency: str=None, name: str=None, schedule_template_id: str=None, status: str=None, supported_configurations: List[SupportedConfiguration]=None):
        """ScheduleTemplateResponse - a model defined in OpenAPI

        :param feed_type: The feed_type of this ScheduleTemplateResponse.
        :param frequency: The frequency of this ScheduleTemplateResponse.
        :param name: The name of this ScheduleTemplateResponse.
        :param schedule_template_id: The schedule_template_id of this ScheduleTemplateResponse.
        :param status: The status of this ScheduleTemplateResponse.
        :param supported_configurations: The supported_configurations of this ScheduleTemplateResponse.
        """
        self.openapi_types = {
            'feed_type': str,
            'frequency': str,
            'name': str,
            'schedule_template_id': str,
            'status': str,
            'supported_configurations': List[SupportedConfiguration]
        }

        self.attribute_map = {
            'feed_type': 'feedType',
            'frequency': 'frequency',
            'name': 'name',
            'schedule_template_id': 'scheduleTemplateId',
            'status': 'status',
            'supported_configurations': 'supportedConfigurations'
        }

        self._feed_type = feed_type
        self._frequency = frequency
        self._name = name
        self._schedule_template_id = schedule_template_id
        self._status = status
        self._supported_configurations = supported_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleTemplateResponse of this ScheduleTemplateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed_type(self):
        """Gets the feed_type of this ScheduleTemplateResponse.

        The feed type of the schedule template. <p> <span class=\"tablenote\"><strong>Note:</strong> When calling <strong>createSchedule</strong> and <strong>updateSchedule</strong> methods you must match the feed type specified by the schedule template (this feedType).</span></p>

        :return: The feed_type of this ScheduleTemplateResponse.
        :rtype: str
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this ScheduleTemplateResponse.

        The feed type of the schedule template. <p> <span class=\"tablenote\"><strong>Note:</strong> When calling <strong>createSchedule</strong> and <strong>updateSchedule</strong> methods you must match the feed type specified by the schedule template (this feedType).</span></p>

        :param feed_type: The feed_type of this ScheduleTemplateResponse.
        :type feed_type: str
        """

        self._feed_type = feed_type

    @property
    def frequency(self):
        """Gets the frequency of this ScheduleTemplateResponse.

        This field specifies how often the schedule is generated. If set to <code>HALF_HOUR</code> or <code>ONE_HOUR</code>, you cannot set a <strong>preferredTriggerHour</strong> using <strong>createSchedule</strong> or <strong>updateSchedule</strong>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FrequencyEnum'>eBay API documentation</a>

        :return: The frequency of this ScheduleTemplateResponse.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ScheduleTemplateResponse.

        This field specifies how often the schedule is generated. If set to <code>HALF_HOUR</code> or <code>ONE_HOUR</code>, you cannot set a <strong>preferredTriggerHour</strong> using <strong>createSchedule</strong> or <strong>updateSchedule</strong>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FrequencyEnum'>eBay API documentation</a>

        :param frequency: The frequency of this ScheduleTemplateResponse.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def name(self):
        """Gets the name of this ScheduleTemplateResponse.

        The template name provided by the template.

        :return: The name of this ScheduleTemplateResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleTemplateResponse.

        The template name provided by the template.

        :param name: The name of this ScheduleTemplateResponse.
        :type name: str
        """

        self._name = name

    @property
    def schedule_template_id(self):
        """Gets the schedule_template_id of this ScheduleTemplateResponse.

        The ID of the template. Use this ID to create a schedule based on the properties of this schedule template.

        :return: The schedule_template_id of this ScheduleTemplateResponse.
        :rtype: str
        """
        return self._schedule_template_id

    @schedule_template_id.setter
    def schedule_template_id(self, schedule_template_id):
        """Sets the schedule_template_id of this ScheduleTemplateResponse.

        The ID of the template. Use this ID to create a schedule based on the properties of this schedule template.

        :param schedule_template_id: The schedule_template_id of this ScheduleTemplateResponse.
        :type schedule_template_id: str
        """

        self._schedule_template_id = schedule_template_id

    @property
    def status(self):
        """Gets the status of this ScheduleTemplateResponse.

        The present status of the template. You cannot create or modify a schedule using a template with an <code>INACTIVE</code> status.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>

        :return: The status of this ScheduleTemplateResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScheduleTemplateResponse.

        The present status of the template. You cannot create or modify a schedule using a template with an <code>INACTIVE</code> status.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>

        :param status: The status of this ScheduleTemplateResponse.
        :type status: str
        """

        self._status = status

    @property
    def supported_configurations(self):
        """Gets the supported_configurations of this ScheduleTemplateResponse.

        An array of the configuration supported by this template.

        :return: The supported_configurations of this ScheduleTemplateResponse.
        :rtype: List[SupportedConfiguration]
        """
        return self._supported_configurations

    @supported_configurations.setter
    def supported_configurations(self, supported_configurations):
        """Sets the supported_configurations of this ScheduleTemplateResponse.

        An array of the configuration supported by this template.

        :param supported_configurations: The supported_configurations of this ScheduleTemplateResponse.
        :type supported_configurations: List[SupportedConfiguration]
        """

        self._supported_configurations = supported_configurations
