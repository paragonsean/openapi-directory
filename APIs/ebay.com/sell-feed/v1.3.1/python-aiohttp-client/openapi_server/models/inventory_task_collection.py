# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inventory_task import InventoryTask
from openapi_server import util


class InventoryTaskCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, tasks: List[InventoryTask]=None, total: int=None):
        """InventoryTaskCollection - a model defined in OpenAPI

        :param href: The href of this InventoryTaskCollection.
        :param limit: The limit of this InventoryTaskCollection.
        :param next: The next of this InventoryTaskCollection.
        :param offset: The offset of this InventoryTaskCollection.
        :param prev: The prev of this InventoryTaskCollection.
        :param tasks: The tasks of this InventoryTaskCollection.
        :param total: The total of this InventoryTaskCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'tasks': List[InventoryTask],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'tasks': 'tasks',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._tasks = tasks
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryTaskCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryTaskCollection of this InventoryTaskCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this InventoryTaskCollection.

        The path to the call URI that produced the current page of results.

        :return: The href of this InventoryTaskCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this InventoryTaskCollection.

        The path to the call URI that produced the current page of results.

        :param href: The href of this InventoryTaskCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this InventoryTaskCollection.

        The value of the <strong>limit</strong> parameter submitted in the request, which is the maximum number of inventory tasks to return per page, from the result set. A result set is the complete set of tasks returned by the method.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> Though this parameter is not required to be submitted in the request, the parameter defaults to <code>10</code> if omitted. Additionally, if this is the last or only page of the result set, the page may contain fewer tasks than the <strong>limit</strong> value submitted in the request.</span><br /><br />To determine the number of pages in a result set, divide the total value (total number of tasks matching the input criteria) by this limit value, and then round up to the next integer. For example, if the <strong>total</strong> value was <code>120</code> (120 total tasks) and the <strong>limit</strong> value was <code>50</code> (show 50 tasks per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getInventoryTasks</strong> calls to view all tasks matching the input criteria.

        :return: The limit of this InventoryTaskCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this InventoryTaskCollection.

        The value of the <strong>limit</strong> parameter submitted in the request, which is the maximum number of inventory tasks to return per page, from the result set. A result set is the complete set of tasks returned by the method.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> Though this parameter is not required to be submitted in the request, the parameter defaults to <code>10</code> if omitted. Additionally, if this is the last or only page of the result set, the page may contain fewer tasks than the <strong>limit</strong> value submitted in the request.</span><br /><br />To determine the number of pages in a result set, divide the total value (total number of tasks matching the input criteria) by this limit value, and then round up to the next integer. For example, if the <strong>total</strong> value was <code>120</code> (120 total tasks) and the <strong>limit</strong> value was <code>50</code> (show 50 tasks per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getInventoryTasks</strong> calls to view all tasks matching the input criteria.

        :param limit: The limit of this InventoryTaskCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this InventoryTaskCollection.

        The path to the call URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.

        :return: The next of this InventoryTaskCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this InventoryTaskCollection.

        The path to the call URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.

        :param next: The next of this InventoryTaskCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this InventoryTaskCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be specified in the request with the <strong>offset</strong> query parameter.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :return: The offset of this InventoryTaskCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InventoryTaskCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be specified in the request with the <strong>offset</strong> query parameter.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :param offset: The offset of this InventoryTaskCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this InventoryTaskCollection.

        The path to the call URI for the previous page of results. This is returned if there is a previous page of results from the result set.

        :return: The prev of this InventoryTaskCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this InventoryTaskCollection.

        The path to the call URI for the previous page of results. This is returned if there is a previous page of results from the result set.

        :param prev: The prev of this InventoryTaskCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def tasks(self):
        """Gets the tasks of this InventoryTaskCollection.

        An array of the inventory tasks on this page. The tasks are sorted by creation date.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> An empty array is returned if the filter criteria excludes all tasks.</span>

        :return: The tasks of this InventoryTaskCollection.
        :rtype: List[InventoryTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this InventoryTaskCollection.

        An array of the inventory tasks on this page. The tasks are sorted by creation date.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> An empty array is returned if the filter criteria excludes all tasks.</span>

        :param tasks: The tasks of this InventoryTaskCollection.
        :type tasks: List[InventoryTask]
        """

        self._tasks = tasks

    @property
    def total(self):
        """Gets the total of this InventoryTaskCollection.

        The total number of inventory tasks that match the input criteria.

        :return: The total of this InventoryTaskCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InventoryTaskCollection.

        The total number of inventory tasks that match the input criteria.

        :param total: The total of this InventoryTaskCollection.
        :type total: int
        """

        self._total = total
