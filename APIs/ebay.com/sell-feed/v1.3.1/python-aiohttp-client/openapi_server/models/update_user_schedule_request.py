# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateUserScheduleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preferred_trigger_day_of_month: int=None, preferred_trigger_day_of_week: str=None, preferred_trigger_hour: str=None, schedule_end_date: str=None, schedule_name: str=None, schedule_start_date: str=None, schema_version: str=None):
        """UpdateUserScheduleRequest - a model defined in OpenAPI

        :param preferred_trigger_day_of_month: The preferred_trigger_day_of_month of this UpdateUserScheduleRequest.
        :param preferred_trigger_day_of_week: The preferred_trigger_day_of_week of this UpdateUserScheduleRequest.
        :param preferred_trigger_hour: The preferred_trigger_hour of this UpdateUserScheduleRequest.
        :param schedule_end_date: The schedule_end_date of this UpdateUserScheduleRequest.
        :param schedule_name: The schedule_name of this UpdateUserScheduleRequest.
        :param schedule_start_date: The schedule_start_date of this UpdateUserScheduleRequest.
        :param schema_version: The schema_version of this UpdateUserScheduleRequest.
        """
        self.openapi_types = {
            'preferred_trigger_day_of_month': int,
            'preferred_trigger_day_of_week': str,
            'preferred_trigger_hour': str,
            'schedule_end_date': str,
            'schedule_name': str,
            'schedule_start_date': str,
            'schema_version': str
        }

        self.attribute_map = {
            'preferred_trigger_day_of_month': 'preferredTriggerDayOfMonth',
            'preferred_trigger_day_of_week': 'preferredTriggerDayOfWeek',
            'preferred_trigger_hour': 'preferredTriggerHour',
            'schedule_end_date': 'scheduleEndDate',
            'schedule_name': 'scheduleName',
            'schedule_start_date': 'scheduleStartDate',
            'schema_version': 'schemaVersion'
        }

        self._preferred_trigger_day_of_month = preferred_trigger_day_of_month
        self._preferred_trigger_day_of_week = preferred_trigger_day_of_week
        self._preferred_trigger_hour = preferred_trigger_hour
        self._schedule_end_date = schedule_end_date
        self._schedule_name = schedule_name
        self._schedule_start_date = schedule_start_date
        self._schema_version = schema_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserScheduleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserScheduleRequest of this UpdateUserScheduleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preferred_trigger_day_of_month(self):
        """Gets the preferred_trigger_day_of_month of this UpdateUserScheduleRequest.

        The preferred day of the month to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for monthly schedules. The last day of the month is used for numbers larger than the actual number of days in the month. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. <br /><br /><b>Minimum: </b>1<b><br /><br /><b>Maximum: </b>31

        :return: The preferred_trigger_day_of_month of this UpdateUserScheduleRequest.
        :rtype: int
        """
        return self._preferred_trigger_day_of_month

    @preferred_trigger_day_of_month.setter
    def preferred_trigger_day_of_month(self, preferred_trigger_day_of_month):
        """Sets the preferred_trigger_day_of_month of this UpdateUserScheduleRequest.

        The preferred day of the month to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for monthly schedules. The last day of the month is used for numbers larger than the actual number of days in the month. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. <br /><br /><b>Minimum: </b>1<b><br /><br /><b>Maximum: </b>31

        :param preferred_trigger_day_of_month: The preferred_trigger_day_of_month of this UpdateUserScheduleRequest.
        :type preferred_trigger_day_of_month: int
        """

        self._preferred_trigger_day_of_month = preferred_trigger_day_of_month

    @property
    def preferred_trigger_day_of_week(self):
        """Gets the preferred_trigger_day_of_week of this UpdateUserScheduleRequest.

        The preferred day of the week to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for weekly schedules. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum'>eBay API documentation</a>

        :return: The preferred_trigger_day_of_week of this UpdateUserScheduleRequest.
        :rtype: str
        """
        return self._preferred_trigger_day_of_week

    @preferred_trigger_day_of_week.setter
    def preferred_trigger_day_of_week(self, preferred_trigger_day_of_week):
        """Sets the preferred_trigger_day_of_week of this UpdateUserScheduleRequest.

        The preferred day of the week to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for weekly schedules. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum'>eBay API documentation</a>

        :param preferred_trigger_day_of_week: The preferred_trigger_day_of_week of this UpdateUserScheduleRequest.
        :type preferred_trigger_day_of_week: str
        """

        self._preferred_trigger_day_of_week = preferred_trigger_day_of_week

    @property
    def preferred_trigger_hour(self):
        """Gets the preferred_trigger_hour of this UpdateUserScheduleRequest.

        The preferred two-digit hour of the day to trigger the schedule. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. <br /><br /><b>Format:</b> UTC <code>hhZ</code><br /><br />For example, the following represents 11:00 am UTC:<code> 11Z</code><br /><br /><b>Minimum: </b><code>00Z</code><b><br /><br /><b>Maximum: </b><code>23Z</code>

        :return: The preferred_trigger_hour of this UpdateUserScheduleRequest.
        :rtype: str
        """
        return self._preferred_trigger_hour

    @preferred_trigger_hour.setter
    def preferred_trigger_hour(self, preferred_trigger_hour):
        """Sets the preferred_trigger_hour of this UpdateUserScheduleRequest.

        The preferred two-digit hour of the day to trigger the schedule. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. <br /><br /><b>Format:</b> UTC <code>hhZ</code><br /><br />For example, the following represents 11:00 am UTC:<code> 11Z</code><br /><br /><b>Minimum: </b><code>00Z</code><b><br /><br /><b>Maximum: </b><code>23Z</code>

        :param preferred_trigger_hour: The preferred_trigger_hour of this UpdateUserScheduleRequest.
        :type preferred_trigger_hour: str
        """

        self._preferred_trigger_hour = preferred_trigger_hour

    @property
    def schedule_end_date(self):
        """Gets the schedule_end_date of this UpdateUserScheduleRequest.

        The timestamp on which the schedule (report generation) ends. After this date, the schedule status becomes <code>INACTIVE</code>. <br /><br />Use this field, if available, to end the schedule in the future. This value must be later than <strong>scheduleStartDate</strong> (if supplied). This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>yyyy-MM-dd<strong>T</strong>HH<strong>Z</strong></code><br /><br />For example, the following represents UTC October 10, 2021 at 10:00 AM:<br /><code> 2021-10-10T10Z</code>

        :return: The schedule_end_date of this UpdateUserScheduleRequest.
        :rtype: str
        """
        return self._schedule_end_date

    @schedule_end_date.setter
    def schedule_end_date(self, schedule_end_date):
        """Sets the schedule_end_date of this UpdateUserScheduleRequest.

        The timestamp on which the schedule (report generation) ends. After this date, the schedule status becomes <code>INACTIVE</code>. <br /><br />Use this field, if available, to end the schedule in the future. This value must be later than <strong>scheduleStartDate</strong> (if supplied). This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>yyyy-MM-dd<strong>T</strong>HH<strong>Z</strong></code><br /><br />For example, the following represents UTC October 10, 2021 at 10:00 AM:<br /><code> 2021-10-10T10Z</code>

        :param schedule_end_date: The schedule_end_date of this UpdateUserScheduleRequest.
        :type schedule_end_date: str
        """

        self._schedule_end_date = schedule_end_date

    @property
    def schedule_name(self):
        """Gets the schedule_name of this UpdateUserScheduleRequest.

        The schedule name assigned by the user for the created schedule.

        :return: The schedule_name of this UpdateUserScheduleRequest.
        :rtype: str
        """
        return self._schedule_name

    @schedule_name.setter
    def schedule_name(self, schedule_name):
        """Sets the schedule_name of this UpdateUserScheduleRequest.

        The schedule name assigned by the user for the created schedule.

        :param schedule_name: The schedule_name of this UpdateUserScheduleRequest.
        :type schedule_name: str
        """

        self._schedule_name = schedule_name

    @property
    def schedule_start_date(self):
        """Gets the schedule_start_date of this UpdateUserScheduleRequest.

        The timestamp to start generating the report. After this timestamp, the schedule status becomes active until either the <strong>scheduleEndDate</strong> occurs or the <strong>scheduleTemplateId</strong> becomes inactive. <br /><br />Use this field, if available, to start the schedule in the future but before the <strong>scheduleEndDate</strong> (if supplied). This field is available as specified by the template <strong>(scheduleTemplateId)</strong>.  The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>yyyy-MM-dd<strong>T</strong>HH<strong>Z</strong></code><br /><br />For example, the following represents a schedule start date of UTC October 01, 2020 at 12:00 PM:<br /><code> 2020-01-01T12Z</code>

        :return: The schedule_start_date of this UpdateUserScheduleRequest.
        :rtype: str
        """
        return self._schedule_start_date

    @schedule_start_date.setter
    def schedule_start_date(self, schedule_start_date):
        """Sets the schedule_start_date of this UpdateUserScheduleRequest.

        The timestamp to start generating the report. After this timestamp, the schedule status becomes active until either the <strong>scheduleEndDate</strong> occurs or the <strong>scheduleTemplateId</strong> becomes inactive. <br /><br />Use this field, if available, to start the schedule in the future but before the <strong>scheduleEndDate</strong> (if supplied). This field is available as specified by the template <strong>(scheduleTemplateId)</strong>.  The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>yyyy-MM-dd<strong>T</strong>HH<strong>Z</strong></code><br /><br />For example, the following represents a schedule start date of UTC October 01, 2020 at 12:00 PM:<br /><code> 2020-01-01T12Z</code>

        :param schedule_start_date: The schedule_start_date of this UpdateUserScheduleRequest.
        :type schedule_start_date: str
        """

        self._schedule_start_date = schedule_start_date

    @property
    def schema_version(self):
        """Gets the schema_version of this UpdateUserScheduleRequest.

        The schema version of the feedType for the schedule. This field is required if the <strong>feedType</strong> has a schema version. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.

        :return: The schema_version of this UpdateUserScheduleRequest.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this UpdateUserScheduleRequest.

        The schema version of the feedType for the schedule. This field is required if the <strong>feedType</strong> has a schema version. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.

        :param schema_version: The schema_version of this UpdateUserScheduleRequest.
        :type schema_version: str
        """

        self._schema_version = schema_version
