# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_schedule_response import UserScheduleResponse
from openapi_server import util


class UserScheduleCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, schedules: List[UserScheduleResponse]=None, total: int=None):
        """UserScheduleCollection - a model defined in OpenAPI

        :param href: The href of this UserScheduleCollection.
        :param limit: The limit of this UserScheduleCollection.
        :param next: The next of this UserScheduleCollection.
        :param offset: The offset of this UserScheduleCollection.
        :param prev: The prev of this UserScheduleCollection.
        :param schedules: The schedules of this UserScheduleCollection.
        :param total: The total of this UserScheduleCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'schedules': List[UserScheduleResponse],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'schedules': 'schedules',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._schedules = schedules
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserScheduleCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserScheduleCollection of this UserScheduleCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this UserScheduleCollection.

        The path to the call URI that produced the current page of results.

        :return: The href of this UserScheduleCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UserScheduleCollection.

        The path to the call URI that produced the current page of results.

        :param href: The href of this UserScheduleCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this UserScheduleCollection.

        The value of the <strong>limit</strong> parameter submitted in the request, which is the maximum number of schedules to return per page, from the result set. A result set is the complete set of schedules returned by the method. <p> <span class=\"tablenote\"><strong>Note:</strong> Though this parameter is not required to be submitted in the request, the parameter defaults to 10 if omitted.<p> <span class=\"tablenote\"><strong>Note:</strong> If this is the last or only page of the result set, the page may contain fewer tasks than the <strong>limit</strong> value. To determine the number of pages in a result set, divide the total value (total number of tasks matching input criteria) by this limit value, and then round up to the next integer. For example, if the <strong>total</strong> value was <code>120</code> (120 total tasks) and the <strong>limit</strong> value was <code>50</code> (show 50 tasks per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getSchedules</strong> calls to view all tasks matching the input criteria.</span></p></span></p>

        :return: The limit of this UserScheduleCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this UserScheduleCollection.

        The value of the <strong>limit</strong> parameter submitted in the request, which is the maximum number of schedules to return per page, from the result set. A result set is the complete set of schedules returned by the method. <p> <span class=\"tablenote\"><strong>Note:</strong> Though this parameter is not required to be submitted in the request, the parameter defaults to 10 if omitted.<p> <span class=\"tablenote\"><strong>Note:</strong> If this is the last or only page of the result set, the page may contain fewer tasks than the <strong>limit</strong> value. To determine the number of pages in a result set, divide the total value (total number of tasks matching input criteria) by this limit value, and then round up to the next integer. For example, if the <strong>total</strong> value was <code>120</code> (120 total tasks) and the <strong>limit</strong> value was <code>50</code> (show 50 tasks per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getSchedules</strong> calls to view all tasks matching the input criteria.</span></p></span></p>

        :param limit: The limit of this UserScheduleCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this UserScheduleCollection.

        The path to the call URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.

        :return: The next of this UserScheduleCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this UserScheduleCollection.

        The path to the call URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.

        :param next: The next of this UserScheduleCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this UserScheduleCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this UserScheduleCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this UserScheduleCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this UserScheduleCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this UserScheduleCollection.

        The path to the call URI for the previous page of results. This is returned if there is a previous page of results from the result set.

        :return: The prev of this UserScheduleCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this UserScheduleCollection.

        The path to the call URI for the previous page of results. This is returned if there is a previous page of results from the result set.

        :param prev: The prev of this UserScheduleCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def schedules(self):
        """Gets the schedules of this UserScheduleCollection.

        An array of the schedules on this page. An empty array is returned if the filter criteria excludes all tasks.

        :return: The schedules of this UserScheduleCollection.
        :rtype: List[UserScheduleResponse]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this UserScheduleCollection.

        An array of the schedules on this page. An empty array is returned if the filter criteria excludes all tasks.

        :param schedules: The schedules of this UserScheduleCollection.
        :type schedules: List[UserScheduleResponse]
        """

        self._schedules = schedules

    @property
    def total(self):
        """Gets the total of this UserScheduleCollection.

        The total number of schedules that match the input criteria.

        :return: The total of this UserScheduleCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UserScheduleCollection.

        The total number of schedules that match the input criteria.

        :param total: The total of this UserScheduleCollection.
        :type total: int
        """

        self._total = total
