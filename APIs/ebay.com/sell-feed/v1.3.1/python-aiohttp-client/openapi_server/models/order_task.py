# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_filter_criteria import OrderFilterCriteria
from openapi_server.models.upload_summary import UploadSummary
from openapi_server import util


class OrderTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_date: str=None, creation_date: str=None, detail_href: str=None, feed_type: str=None, filter_criteria: OrderFilterCriteria=None, schema_version: str=None, status: str=None, task_id: str=None, upload_summary: UploadSummary=None):
        """OrderTask - a model defined in OpenAPI

        :param completion_date: The completion_date of this OrderTask.
        :param creation_date: The creation_date of this OrderTask.
        :param detail_href: The detail_href of this OrderTask.
        :param feed_type: The feed_type of this OrderTask.
        :param filter_criteria: The filter_criteria of this OrderTask.
        :param schema_version: The schema_version of this OrderTask.
        :param status: The status of this OrderTask.
        :param task_id: The task_id of this OrderTask.
        :param upload_summary: The upload_summary of this OrderTask.
        """
        self.openapi_types = {
            'completion_date': str,
            'creation_date': str,
            'detail_href': str,
            'feed_type': str,
            'filter_criteria': OrderFilterCriteria,
            'schema_version': str,
            'status': str,
            'task_id': str,
            'upload_summary': UploadSummary
        }

        self.attribute_map = {
            'completion_date': 'completionDate',
            'creation_date': 'creationDate',
            'detail_href': 'detailHref',
            'feed_type': 'feedType',
            'filter_criteria': 'filterCriteria',
            'schema_version': 'schemaVersion',
            'status': 'status',
            'task_id': 'taskId',
            'upload_summary': 'uploadSummary'
        }

        self._completion_date = completion_date
        self._creation_date = creation_date
        self._detail_href = detail_href
        self._feed_type = feed_type
        self._filter_criteria = filter_criteria
        self._schema_version = schema_version
        self._status = status
        self._task_id = task_id
        self._upload_summary = upload_summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderTask of this OrderTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_date(self):
        """Gets the completion_date of this OrderTask.

        The timestamp when the task went into the <code>COMPLETED</code> or <code>COMPLETED_WITH_ERROR</code> state. This state means that eBay has compiled the report for the seller based on the seller’s filter criteria, and the seller can run a <strong>getResultFile</strong> call to download the report.

        :return: The completion_date of this OrderTask.
        :rtype: str
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this OrderTask.

        The timestamp when the task went into the <code>COMPLETED</code> or <code>COMPLETED_WITH_ERROR</code> state. This state means that eBay has compiled the report for the seller based on the seller’s filter criteria, and the seller can run a <strong>getResultFile</strong> call to download the report.

        :param completion_date: The completion_date of this OrderTask.
        :type completion_date: str
        """

        self._completion_date = completion_date

    @property
    def creation_date(self):
        """Gets the creation_date of this OrderTask.

        The date the task was created.

        :return: The creation_date of this OrderTask.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this OrderTask.

        The date the task was created.

        :param creation_date: The creation_date of this OrderTask.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def detail_href(self):
        """Gets the detail_href of this OrderTask.

        The path to the call URI used to retrieve the task.

        :return: The detail_href of this OrderTask.
        :rtype: str
        """
        return self._detail_href

    @detail_href.setter
    def detail_href(self, detail_href):
        """Sets the detail_href of this OrderTask.

        The path to the call URI used to retrieve the task.

        :param detail_href: The detail_href of this OrderTask.
        :type detail_href: str
        """

        self._detail_href = detail_href

    @property
    def feed_type(self):
        """Gets the feed_type of this OrderTask.

        The feed type associated with the task.

        :return: The feed_type of this OrderTask.
        :rtype: str
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this OrderTask.

        The feed type associated with the task.

        :param feed_type: The feed_type of this OrderTask.
        :type feed_type: str
        """

        self._feed_type = feed_type

    @property
    def filter_criteria(self):
        """Gets the filter_criteria of this OrderTask.


        :return: The filter_criteria of this OrderTask.
        :rtype: OrderFilterCriteria
        """
        return self._filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        """Sets the filter_criteria of this OrderTask.


        :param filter_criteria: The filter_criteria of this OrderTask.
        :type filter_criteria: OrderFilterCriteria
        """

        self._filter_criteria = filter_criteria

    @property
    def schema_version(self):
        """Gets the schema_version of this OrderTask.

        The schema version number associated with the create task.

        :return: The schema_version of this OrderTask.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this OrderTask.

        The schema version number associated with the create task.

        :param schema_version: The schema_version of this OrderTask.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def status(self):
        """Gets the status of this OrderTask.

        The enumeration value that indicates the state of the task that was submitted in the request. See <strong>FeedStatusEnum</strong> for information. <p>The values <code>COMPLETED </code>and<code> COMPLETED_WITH_ERROR</code> indicate the Order Report file is ready to download.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>

        :return: The status of this OrderTask.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderTask.

        The enumeration value that indicates the state of the task that was submitted in the request. See <strong>FeedStatusEnum</strong> for information. <p>The values <code>COMPLETED </code>and<code> COMPLETED_WITH_ERROR</code> indicate the Order Report file is ready to download.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>

        :param status: The status of this OrderTask.
        :type status: str
        """

        self._status = status

    @property
    def task_id(self):
        """Gets the task_id of this OrderTask.

        The ID of the task that was submitted in the request.

        :return: The task_id of this OrderTask.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this OrderTask.

        The ID of the task that was submitted in the request.

        :param task_id: The task_id of this OrderTask.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def upload_summary(self):
        """Gets the upload_summary of this OrderTask.


        :return: The upload_summary of this OrderTask.
        :rtype: UploadSummary
        """
        return self._upload_summary

    @upload_summary.setter
    def upload_summary(self, upload_summary):
        """Sets the upload_summary of this OrderTask.


        :param upload_summary: The upload_summary of this OrderTask.
        :type upload_summary: UploadSummary
        """

        self._upload_summary = upload_summary
