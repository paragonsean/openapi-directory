# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_count: int=None, success_count: int=None):
        """UploadSummary - a model defined in OpenAPI

        :param failure_count: The failure_count of this UploadSummary.
        :param success_count: The success_count of this UploadSummary.
        """
        self.openapi_types = {
            'failure_count': int,
            'success_count': int
        }

        self.attribute_map = {
            'failure_count': 'failureCount',
            'success_count': 'successCount'
        }

        self._failure_count = failure_count
        self._success_count = success_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadSummary of this UploadSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_count(self):
        """Gets the failure_count of this UploadSummary.

        The number of records, such as the number of listings created or the number of pictures uploaded to a listing, that failed to process during the upload feed. Check the response file and correct any issues mentioned. If the feed fails before processing, no response file is provided. In this case check the REST output response.

        :return: The failure_count of this UploadSummary.
        :rtype: int
        """
        return self._failure_count

    @failure_count.setter
    def failure_count(self, failure_count):
        """Sets the failure_count of this UploadSummary.

        The number of records, such as the number of listings created or the number of pictures uploaded to a listing, that failed to process during the upload feed. Check the response file and correct any issues mentioned. If the feed fails before processing, no response file is provided. In this case check the REST output response.

        :param failure_count: The failure_count of this UploadSummary.
        :type failure_count: int
        """

        self._failure_count = failure_count

    @property
    def success_count(self):
        """Gets the success_count of this UploadSummary.

        The number of records that were successfully processed during the upload feed.

        :return: The success_count of this UploadSummary.
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this UploadSummary.

        The number of records that were successfully processed during the upload feed.

        :param success_count: The success_count of this UploadSummary.
        :type success_count: int
        """

        self._success_count = success_count
