/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceMetricsTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceMetricsTaskRequest::OAICreateServiceMetricsTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceMetricsTaskRequest::OAICreateServiceMetricsTaskRequest() {
    this->initializeModel();
}

OAICreateServiceMetricsTaskRequest::~OAICreateServiceMetricsTaskRequest() {}

void OAICreateServiceMetricsTaskRequest::initializeModel() {

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_filter_criteria_isSet = false;
    m_filter_criteria_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAICreateServiceMetricsTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceMetricsTaskRequest::fromJsonObject(QJsonObject json) {

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_filter_criteria_isValid = ::OpenAPI::fromJsonValue(m_filter_criteria, json[QString("filterCriteria")]);
    m_filter_criteria_isSet = !json[QString("filterCriteria")].isNull() && m_filter_criteria_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAICreateServiceMetricsTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceMetricsTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_filter_criteria.isSet()) {
        obj.insert(QString("filterCriteria"), ::OpenAPI::toJsonValue(m_filter_criteria));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

QString OAICreateServiceMetricsTaskRequest::getFeedType() const {
    return m_feed_type;
}
void OAICreateServiceMetricsTaskRequest::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAICreateServiceMetricsTaskRequest::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAICreateServiceMetricsTaskRequest::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

OAICustomerServiceMetricsFilterCriteria OAICreateServiceMetricsTaskRequest::getFilterCriteria() const {
    return m_filter_criteria;
}
void OAICreateServiceMetricsTaskRequest::setFilterCriteria(const OAICustomerServiceMetricsFilterCriteria &filter_criteria) {
    m_filter_criteria = filter_criteria;
    m_filter_criteria_isSet = true;
}

bool OAICreateServiceMetricsTaskRequest::is_filter_criteria_Set() const{
    return m_filter_criteria_isSet;
}

bool OAICreateServiceMetricsTaskRequest::is_filter_criteria_Valid() const{
    return m_filter_criteria_isValid;
}

QString OAICreateServiceMetricsTaskRequest::getSchemaVersion() const {
    return m_schema_version;
}
void OAICreateServiceMetricsTaskRequest::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAICreateServiceMetricsTaskRequest::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAICreateServiceMetricsTaskRequest::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAICreateServiceMetricsTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceMetricsTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
