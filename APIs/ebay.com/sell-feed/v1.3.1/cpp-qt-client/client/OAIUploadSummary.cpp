/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadSummary::OAIUploadSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadSummary::OAIUploadSummary() {
    this->initializeModel();
}

OAIUploadSummary::~OAIUploadSummary() {}

void OAIUploadSummary::initializeModel() {

    m_failure_count_isSet = false;
    m_failure_count_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;
}

void OAIUploadSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadSummary::fromJsonObject(QJsonObject json) {

    m_failure_count_isValid = ::OpenAPI::fromJsonValue(m_failure_count, json[QString("failureCount")]);
    m_failure_count_isSet = !json[QString("failureCount")].isNull() && m_failure_count_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("successCount")]);
    m_success_count_isSet = !json[QString("successCount")].isNull() && m_success_count_isValid;
}

QString OAIUploadSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_count_isSet) {
        obj.insert(QString("failureCount"), ::OpenAPI::toJsonValue(m_failure_count));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("successCount"), ::OpenAPI::toJsonValue(m_success_count));
    }
    return obj;
}

qint32 OAIUploadSummary::getFailureCount() const {
    return m_failure_count;
}
void OAIUploadSummary::setFailureCount(const qint32 &failure_count) {
    m_failure_count = failure_count;
    m_failure_count_isSet = true;
}

bool OAIUploadSummary::is_failure_count_Set() const{
    return m_failure_count_isSet;
}

bool OAIUploadSummary::is_failure_count_Valid() const{
    return m_failure_count_isValid;
}

qint32 OAIUploadSummary::getSuccessCount() const {
    return m_success_count;
}
void OAIUploadSummary::setSuccessCount(const qint32 &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIUploadSummary::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIUploadSummary::is_success_count_Valid() const{
    return m_success_count_isValid;
}

bool OAIUploadSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
