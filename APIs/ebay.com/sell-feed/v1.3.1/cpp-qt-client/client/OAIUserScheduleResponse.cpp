/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserScheduleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserScheduleResponse::OAIUserScheduleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserScheduleResponse::OAIUserScheduleResponse() {
    this->initializeModel();
}

OAIUserScheduleResponse::~OAIUserScheduleResponse() {}

void OAIUserScheduleResponse::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_preferred_trigger_day_of_month_isSet = false;
    m_preferred_trigger_day_of_month_isValid = false;

    m_preferred_trigger_day_of_week_isSet = false;
    m_preferred_trigger_day_of_week_isValid = false;

    m_preferred_trigger_hour_isSet = false;
    m_preferred_trigger_hour_isValid = false;

    m_schedule_end_date_isSet = false;
    m_schedule_end_date_isValid = false;

    m_schedule_id_isSet = false;
    m_schedule_id_isValid = false;

    m_schedule_name_isSet = false;
    m_schedule_name_isValid = false;

    m_schedule_start_date_isSet = false;
    m_schedule_start_date_isValid = false;

    m_schedule_template_id_isSet = false;
    m_schedule_template_id_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIUserScheduleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserScheduleResponse::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_preferred_trigger_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_preferred_trigger_day_of_month, json[QString("preferredTriggerDayOfMonth")]);
    m_preferred_trigger_day_of_month_isSet = !json[QString("preferredTriggerDayOfMonth")].isNull() && m_preferred_trigger_day_of_month_isValid;

    m_preferred_trigger_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_preferred_trigger_day_of_week, json[QString("preferredTriggerDayOfWeek")]);
    m_preferred_trigger_day_of_week_isSet = !json[QString("preferredTriggerDayOfWeek")].isNull() && m_preferred_trigger_day_of_week_isValid;

    m_preferred_trigger_hour_isValid = ::OpenAPI::fromJsonValue(m_preferred_trigger_hour, json[QString("preferredTriggerHour")]);
    m_preferred_trigger_hour_isSet = !json[QString("preferredTriggerHour")].isNull() && m_preferred_trigger_hour_isValid;

    m_schedule_end_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_end_date, json[QString("scheduleEndDate")]);
    m_schedule_end_date_isSet = !json[QString("scheduleEndDate")].isNull() && m_schedule_end_date_isValid;

    m_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_schedule_id, json[QString("scheduleId")]);
    m_schedule_id_isSet = !json[QString("scheduleId")].isNull() && m_schedule_id_isValid;

    m_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_schedule_name, json[QString("scheduleName")]);
    m_schedule_name_isSet = !json[QString("scheduleName")].isNull() && m_schedule_name_isValid;

    m_schedule_start_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_start_date, json[QString("scheduleStartDate")]);
    m_schedule_start_date_isSet = !json[QString("scheduleStartDate")].isNull() && m_schedule_start_date_isValid;

    m_schedule_template_id_isValid = ::OpenAPI::fromJsonValue(m_schedule_template_id, json[QString("scheduleTemplateId")]);
    m_schedule_template_id_isSet = !json[QString("scheduleTemplateId")].isNull() && m_schedule_template_id_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIUserScheduleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserScheduleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_preferred_trigger_day_of_month_isSet) {
        obj.insert(QString("preferredTriggerDayOfMonth"), ::OpenAPI::toJsonValue(m_preferred_trigger_day_of_month));
    }
    if (m_preferred_trigger_day_of_week_isSet) {
        obj.insert(QString("preferredTriggerDayOfWeek"), ::OpenAPI::toJsonValue(m_preferred_trigger_day_of_week));
    }
    if (m_preferred_trigger_hour_isSet) {
        obj.insert(QString("preferredTriggerHour"), ::OpenAPI::toJsonValue(m_preferred_trigger_hour));
    }
    if (m_schedule_end_date_isSet) {
        obj.insert(QString("scheduleEndDate"), ::OpenAPI::toJsonValue(m_schedule_end_date));
    }
    if (m_schedule_id_isSet) {
        obj.insert(QString("scheduleId"), ::OpenAPI::toJsonValue(m_schedule_id));
    }
    if (m_schedule_name_isSet) {
        obj.insert(QString("scheduleName"), ::OpenAPI::toJsonValue(m_schedule_name));
    }
    if (m_schedule_start_date_isSet) {
        obj.insert(QString("scheduleStartDate"), ::OpenAPI::toJsonValue(m_schedule_start_date));
    }
    if (m_schedule_template_id_isSet) {
        obj.insert(QString("scheduleTemplateId"), ::OpenAPI::toJsonValue(m_schedule_template_id));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

QString OAIUserScheduleResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIUserScheduleResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUserScheduleResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUserScheduleResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIUserScheduleResponse::getFeedType() const {
    return m_feed_type;
}
void OAIUserScheduleResponse::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAIUserScheduleResponse::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAIUserScheduleResponse::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

QString OAIUserScheduleResponse::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIUserScheduleResponse::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIUserScheduleResponse::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIUserScheduleResponse::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

qint32 OAIUserScheduleResponse::getPreferredTriggerDayOfMonth() const {
    return m_preferred_trigger_day_of_month;
}
void OAIUserScheduleResponse::setPreferredTriggerDayOfMonth(const qint32 &preferred_trigger_day_of_month) {
    m_preferred_trigger_day_of_month = preferred_trigger_day_of_month;
    m_preferred_trigger_day_of_month_isSet = true;
}

bool OAIUserScheduleResponse::is_preferred_trigger_day_of_month_Set() const{
    return m_preferred_trigger_day_of_month_isSet;
}

bool OAIUserScheduleResponse::is_preferred_trigger_day_of_month_Valid() const{
    return m_preferred_trigger_day_of_month_isValid;
}

QString OAIUserScheduleResponse::getPreferredTriggerDayOfWeek() const {
    return m_preferred_trigger_day_of_week;
}
void OAIUserScheduleResponse::setPreferredTriggerDayOfWeek(const QString &preferred_trigger_day_of_week) {
    m_preferred_trigger_day_of_week = preferred_trigger_day_of_week;
    m_preferred_trigger_day_of_week_isSet = true;
}

bool OAIUserScheduleResponse::is_preferred_trigger_day_of_week_Set() const{
    return m_preferred_trigger_day_of_week_isSet;
}

bool OAIUserScheduleResponse::is_preferred_trigger_day_of_week_Valid() const{
    return m_preferred_trigger_day_of_week_isValid;
}

QString OAIUserScheduleResponse::getPreferredTriggerHour() const {
    return m_preferred_trigger_hour;
}
void OAIUserScheduleResponse::setPreferredTriggerHour(const QString &preferred_trigger_hour) {
    m_preferred_trigger_hour = preferred_trigger_hour;
    m_preferred_trigger_hour_isSet = true;
}

bool OAIUserScheduleResponse::is_preferred_trigger_hour_Set() const{
    return m_preferred_trigger_hour_isSet;
}

bool OAIUserScheduleResponse::is_preferred_trigger_hour_Valid() const{
    return m_preferred_trigger_hour_isValid;
}

QString OAIUserScheduleResponse::getScheduleEndDate() const {
    return m_schedule_end_date;
}
void OAIUserScheduleResponse::setScheduleEndDate(const QString &schedule_end_date) {
    m_schedule_end_date = schedule_end_date;
    m_schedule_end_date_isSet = true;
}

bool OAIUserScheduleResponse::is_schedule_end_date_Set() const{
    return m_schedule_end_date_isSet;
}

bool OAIUserScheduleResponse::is_schedule_end_date_Valid() const{
    return m_schedule_end_date_isValid;
}

QString OAIUserScheduleResponse::getScheduleId() const {
    return m_schedule_id;
}
void OAIUserScheduleResponse::setScheduleId(const QString &schedule_id) {
    m_schedule_id = schedule_id;
    m_schedule_id_isSet = true;
}

bool OAIUserScheduleResponse::is_schedule_id_Set() const{
    return m_schedule_id_isSet;
}

bool OAIUserScheduleResponse::is_schedule_id_Valid() const{
    return m_schedule_id_isValid;
}

QString OAIUserScheduleResponse::getScheduleName() const {
    return m_schedule_name;
}
void OAIUserScheduleResponse::setScheduleName(const QString &schedule_name) {
    m_schedule_name = schedule_name;
    m_schedule_name_isSet = true;
}

bool OAIUserScheduleResponse::is_schedule_name_Set() const{
    return m_schedule_name_isSet;
}

bool OAIUserScheduleResponse::is_schedule_name_Valid() const{
    return m_schedule_name_isValid;
}

QString OAIUserScheduleResponse::getScheduleStartDate() const {
    return m_schedule_start_date;
}
void OAIUserScheduleResponse::setScheduleStartDate(const QString &schedule_start_date) {
    m_schedule_start_date = schedule_start_date;
    m_schedule_start_date_isSet = true;
}

bool OAIUserScheduleResponse::is_schedule_start_date_Set() const{
    return m_schedule_start_date_isSet;
}

bool OAIUserScheduleResponse::is_schedule_start_date_Valid() const{
    return m_schedule_start_date_isValid;
}

QString OAIUserScheduleResponse::getScheduleTemplateId() const {
    return m_schedule_template_id;
}
void OAIUserScheduleResponse::setScheduleTemplateId(const QString &schedule_template_id) {
    m_schedule_template_id = schedule_template_id;
    m_schedule_template_id_isSet = true;
}

bool OAIUserScheduleResponse::is_schedule_template_id_Set() const{
    return m_schedule_template_id_isSet;
}

bool OAIUserScheduleResponse::is_schedule_template_id_Valid() const{
    return m_schedule_template_id_isValid;
}

QString OAIUserScheduleResponse::getSchemaVersion() const {
    return m_schema_version;
}
void OAIUserScheduleResponse::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIUserScheduleResponse::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIUserScheduleResponse::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIUserScheduleResponse::getStatus() const {
    return m_status;
}
void OAIUserScheduleResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserScheduleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserScheduleResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUserScheduleResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIUserScheduleResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIUserScheduleResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIUserScheduleResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIUserScheduleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_trigger_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_trigger_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_trigger_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserScheduleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
