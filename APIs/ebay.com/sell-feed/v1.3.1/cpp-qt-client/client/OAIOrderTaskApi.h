/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderTaskApi_H
#define OAI_OAIOrderTaskApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrderTaskRequest.h"
#include "OAIOrderTask.h"
#include "OAIOrderTaskCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderTaskApi : public QObject {
    Q_OBJECT

public:
    OAIOrderTaskApi(const int timeOut = 0);
    ~OAIOrderTaskApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_order_task_request OAICreateOrderTaskRequest [required]
    */
    virtual void createOrderTask(const OAICreateOrderTaskRequest &oai_create_order_task_request);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getOrderTask(const QString &task_id);

    /**
    * @param[in]  date_range QString [optional]
    * @param[in]  feed_type QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  look_back_days QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  schedule_id QString [optional]
    */
    virtual void getOrderTasks(const ::OpenAPI::OptionalParam<QString> &date_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feed_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &look_back_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schedule_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrderTaskCallback(OAIHttpRequestWorker *worker);
    void getOrderTaskCallback(OAIHttpRequestWorker *worker);
    void getOrderTasksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrderTaskSignal();
    void getOrderTaskSignal(OAIOrderTask summary);
    void getOrderTasksSignal(OAIOrderTaskCollection summary);


    void createOrderTaskSignalFull(OAIHttpRequestWorker *worker);
    void getOrderTaskSignalFull(OAIHttpRequestWorker *worker, OAIOrderTask summary);
    void getOrderTasksSignalFull(OAIHttpRequestWorker *worker, OAIOrderTaskCollection summary);

    Q_DECL_DEPRECATED_X("Use createOrderTaskSignalError() instead")
    void createOrderTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderTaskSignalError() instead")
    void getOrderTaskSignalE(OAIOrderTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderTaskSignalError(OAIOrderTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderTasksSignalError() instead")
    void getOrderTasksSignalE(OAIOrderTaskCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderTasksSignalError(OAIOrderTaskCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrderTaskSignalErrorFull() instead")
    void createOrderTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderTaskSignalErrorFull() instead")
    void getOrderTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderTasksSignalErrorFull() instead")
    void getOrderTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
