/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserScheduleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserScheduleRequest::OAIUpdateUserScheduleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserScheduleRequest::OAIUpdateUserScheduleRequest() {
    this->initializeModel();
}

OAIUpdateUserScheduleRequest::~OAIUpdateUserScheduleRequest() {}

void OAIUpdateUserScheduleRequest::initializeModel() {

    m_preferred_trigger_day_of_month_isSet = false;
    m_preferred_trigger_day_of_month_isValid = false;

    m_preferred_trigger_day_of_week_isSet = false;
    m_preferred_trigger_day_of_week_isValid = false;

    m_preferred_trigger_hour_isSet = false;
    m_preferred_trigger_hour_isValid = false;

    m_schedule_end_date_isSet = false;
    m_schedule_end_date_isValid = false;

    m_schedule_name_isSet = false;
    m_schedule_name_isValid = false;

    m_schedule_start_date_isSet = false;
    m_schedule_start_date_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAIUpdateUserScheduleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserScheduleRequest::fromJsonObject(QJsonObject json) {

    m_preferred_trigger_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_preferred_trigger_day_of_month, json[QString("preferredTriggerDayOfMonth")]);
    m_preferred_trigger_day_of_month_isSet = !json[QString("preferredTriggerDayOfMonth")].isNull() && m_preferred_trigger_day_of_month_isValid;

    m_preferred_trigger_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_preferred_trigger_day_of_week, json[QString("preferredTriggerDayOfWeek")]);
    m_preferred_trigger_day_of_week_isSet = !json[QString("preferredTriggerDayOfWeek")].isNull() && m_preferred_trigger_day_of_week_isValid;

    m_preferred_trigger_hour_isValid = ::OpenAPI::fromJsonValue(m_preferred_trigger_hour, json[QString("preferredTriggerHour")]);
    m_preferred_trigger_hour_isSet = !json[QString("preferredTriggerHour")].isNull() && m_preferred_trigger_hour_isValid;

    m_schedule_end_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_end_date, json[QString("scheduleEndDate")]);
    m_schedule_end_date_isSet = !json[QString("scheduleEndDate")].isNull() && m_schedule_end_date_isValid;

    m_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_schedule_name, json[QString("scheduleName")]);
    m_schedule_name_isSet = !json[QString("scheduleName")].isNull() && m_schedule_name_isValid;

    m_schedule_start_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_start_date, json[QString("scheduleStartDate")]);
    m_schedule_start_date_isSet = !json[QString("scheduleStartDate")].isNull() && m_schedule_start_date_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAIUpdateUserScheduleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserScheduleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_preferred_trigger_day_of_month_isSet) {
        obj.insert(QString("preferredTriggerDayOfMonth"), ::OpenAPI::toJsonValue(m_preferred_trigger_day_of_month));
    }
    if (m_preferred_trigger_day_of_week_isSet) {
        obj.insert(QString("preferredTriggerDayOfWeek"), ::OpenAPI::toJsonValue(m_preferred_trigger_day_of_week));
    }
    if (m_preferred_trigger_hour_isSet) {
        obj.insert(QString("preferredTriggerHour"), ::OpenAPI::toJsonValue(m_preferred_trigger_hour));
    }
    if (m_schedule_end_date_isSet) {
        obj.insert(QString("scheduleEndDate"), ::OpenAPI::toJsonValue(m_schedule_end_date));
    }
    if (m_schedule_name_isSet) {
        obj.insert(QString("scheduleName"), ::OpenAPI::toJsonValue(m_schedule_name));
    }
    if (m_schedule_start_date_isSet) {
        obj.insert(QString("scheduleStartDate"), ::OpenAPI::toJsonValue(m_schedule_start_date));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

qint32 OAIUpdateUserScheduleRequest::getPreferredTriggerDayOfMonth() const {
    return m_preferred_trigger_day_of_month;
}
void OAIUpdateUserScheduleRequest::setPreferredTriggerDayOfMonth(const qint32 &preferred_trigger_day_of_month) {
    m_preferred_trigger_day_of_month = preferred_trigger_day_of_month;
    m_preferred_trigger_day_of_month_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_preferred_trigger_day_of_month_Set() const{
    return m_preferred_trigger_day_of_month_isSet;
}

bool OAIUpdateUserScheduleRequest::is_preferred_trigger_day_of_month_Valid() const{
    return m_preferred_trigger_day_of_month_isValid;
}

QString OAIUpdateUserScheduleRequest::getPreferredTriggerDayOfWeek() const {
    return m_preferred_trigger_day_of_week;
}
void OAIUpdateUserScheduleRequest::setPreferredTriggerDayOfWeek(const QString &preferred_trigger_day_of_week) {
    m_preferred_trigger_day_of_week = preferred_trigger_day_of_week;
    m_preferred_trigger_day_of_week_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_preferred_trigger_day_of_week_Set() const{
    return m_preferred_trigger_day_of_week_isSet;
}

bool OAIUpdateUserScheduleRequest::is_preferred_trigger_day_of_week_Valid() const{
    return m_preferred_trigger_day_of_week_isValid;
}

QString OAIUpdateUserScheduleRequest::getPreferredTriggerHour() const {
    return m_preferred_trigger_hour;
}
void OAIUpdateUserScheduleRequest::setPreferredTriggerHour(const QString &preferred_trigger_hour) {
    m_preferred_trigger_hour = preferred_trigger_hour;
    m_preferred_trigger_hour_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_preferred_trigger_hour_Set() const{
    return m_preferred_trigger_hour_isSet;
}

bool OAIUpdateUserScheduleRequest::is_preferred_trigger_hour_Valid() const{
    return m_preferred_trigger_hour_isValid;
}

QString OAIUpdateUserScheduleRequest::getScheduleEndDate() const {
    return m_schedule_end_date;
}
void OAIUpdateUserScheduleRequest::setScheduleEndDate(const QString &schedule_end_date) {
    m_schedule_end_date = schedule_end_date;
    m_schedule_end_date_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_schedule_end_date_Set() const{
    return m_schedule_end_date_isSet;
}

bool OAIUpdateUserScheduleRequest::is_schedule_end_date_Valid() const{
    return m_schedule_end_date_isValid;
}

QString OAIUpdateUserScheduleRequest::getScheduleName() const {
    return m_schedule_name;
}
void OAIUpdateUserScheduleRequest::setScheduleName(const QString &schedule_name) {
    m_schedule_name = schedule_name;
    m_schedule_name_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_schedule_name_Set() const{
    return m_schedule_name_isSet;
}

bool OAIUpdateUserScheduleRequest::is_schedule_name_Valid() const{
    return m_schedule_name_isValid;
}

QString OAIUpdateUserScheduleRequest::getScheduleStartDate() const {
    return m_schedule_start_date;
}
void OAIUpdateUserScheduleRequest::setScheduleStartDate(const QString &schedule_start_date) {
    m_schedule_start_date = schedule_start_date;
    m_schedule_start_date_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_schedule_start_date_Set() const{
    return m_schedule_start_date_isSet;
}

bool OAIUpdateUserScheduleRequest::is_schedule_start_date_Valid() const{
    return m_schedule_start_date_isValid;
}

QString OAIUpdateUserScheduleRequest::getSchemaVersion() const {
    return m_schema_version;
}
void OAIUpdateUserScheduleRequest::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIUpdateUserScheduleRequest::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIUpdateUserScheduleRequest::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAIUpdateUserScheduleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preferred_trigger_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_trigger_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_trigger_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserScheduleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
