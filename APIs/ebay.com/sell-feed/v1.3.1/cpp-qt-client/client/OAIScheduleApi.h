/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduleApi_H
#define OAI_OAIScheduleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUserScheduleRequest.h"
#include "OAIObject.h"
#include "OAIScheduleTemplateCollection.h"
#include "OAIScheduleTemplateResponse.h"
#include "OAIUpdateUserScheduleRequest.h"
#include "OAIUserScheduleCollection.h"
#include "OAIUserScheduleResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduleApi : public QObject {
    Q_OBJECT

public:
    OAIScheduleApi(const int timeOut = 0);
    ~OAIScheduleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_user_schedule_request OAICreateUserScheduleRequest [required]
    */
    virtual void createSchedule(const OAICreateUserScheduleRequest &oai_create_user_schedule_request);

    /**
    * @param[in]  schedule_id QString [required]
    */
    virtual void deleteSchedule(const QString &schedule_id);

    /**
    * @param[in]  schedule_id QString [required]
    */
    virtual void getLatestResultFile(const QString &schedule_id);

    /**
    * @param[in]  schedule_id QString [required]
    */
    virtual void getSchedule(const QString &schedule_id);

    /**
    * @param[in]  schedule_template_id QString [required]
    */
    virtual void getScheduleTemplate(const QString &schedule_template_id);

    /**
    * @param[in]  feed_type QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getScheduleTemplates(const QString &feed_type, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feed_type QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getSchedules(const QString &feed_type, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  schedule_id QString [required]
    * @param[in]  oai_update_user_schedule_request OAIUpdateUserScheduleRequest [required]
    */
    virtual void updateSchedule(const QString &schedule_id, const OAIUpdateUserScheduleRequest &oai_update_user_schedule_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteScheduleCallback(OAIHttpRequestWorker *worker);
    void getLatestResultFileCallback(OAIHttpRequestWorker *worker);
    void getScheduleCallback(OAIHttpRequestWorker *worker);
    void getScheduleTemplateCallback(OAIHttpRequestWorker *worker);
    void getScheduleTemplatesCallback(OAIHttpRequestWorker *worker);
    void getSchedulesCallback(OAIHttpRequestWorker *worker);
    void updateScheduleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createScheduleSignal(OAIObject summary);
    void deleteScheduleSignal();
    void getLatestResultFileSignal(OAIObject summary);
    void getScheduleSignal(OAIUserScheduleResponse summary);
    void getScheduleTemplateSignal(OAIScheduleTemplateResponse summary);
    void getScheduleTemplatesSignal(OAIScheduleTemplateCollection summary);
    void getSchedulesSignal(OAIUserScheduleCollection summary);
    void updateScheduleSignal();


    void createScheduleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteScheduleSignalFull(OAIHttpRequestWorker *worker);
    void getLatestResultFileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getScheduleSignalFull(OAIHttpRequestWorker *worker, OAIUserScheduleResponse summary);
    void getScheduleTemplateSignalFull(OAIHttpRequestWorker *worker, OAIScheduleTemplateResponse summary);
    void getScheduleTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIScheduleTemplateCollection summary);
    void getSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIUserScheduleCollection summary);
    void updateScheduleSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createScheduleSignalError() instead")
    void createScheduleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScheduleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScheduleSignalError() instead")
    void deleteScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestResultFileSignalError() instead")
    void getLatestResultFileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestResultFileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduleSignalError() instead")
    void getScheduleSignalE(OAIUserScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduleSignalError(OAIUserScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduleTemplateSignalError() instead")
    void getScheduleTemplateSignalE(OAIScheduleTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduleTemplateSignalError(OAIScheduleTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduleTemplatesSignalError() instead")
    void getScheduleTemplatesSignalE(OAIScheduleTemplateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduleTemplatesSignalError(OAIScheduleTemplateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchedulesSignalError() instead")
    void getSchedulesSignalE(OAIUserScheduleCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchedulesSignalError(OAIUserScheduleCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScheduleSignalError() instead")
    void updateScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createScheduleSignalErrorFull() instead")
    void createScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScheduleSignalErrorFull() instead")
    void deleteScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestResultFileSignalErrorFull() instead")
    void getLatestResultFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestResultFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduleSignalErrorFull() instead")
    void getScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduleTemplateSignalErrorFull() instead")
    void getScheduleTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduleTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduleTemplatesSignalErrorFull() instead")
    void getScheduleTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduleTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchedulesSignalErrorFull() instead")
    void getSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScheduleSignalErrorFull() instead")
    void updateScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
