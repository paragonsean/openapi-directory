/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleTemplateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleTemplateResponse::OAIScheduleTemplateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleTemplateResponse::OAIScheduleTemplateResponse() {
    this->initializeModel();
}

OAIScheduleTemplateResponse::~OAIScheduleTemplateResponse() {}

void OAIScheduleTemplateResponse::initializeModel() {

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_template_id_isSet = false;
    m_schedule_template_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_configurations_isSet = false;
    m_supported_configurations_isValid = false;
}

void OAIScheduleTemplateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleTemplateResponse::fromJsonObject(QJsonObject json) {

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schedule_template_id_isValid = ::OpenAPI::fromJsonValue(m_schedule_template_id, json[QString("scheduleTemplateId")]);
    m_schedule_template_id_isSet = !json[QString("scheduleTemplateId")].isNull() && m_schedule_template_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_configurations_isValid = ::OpenAPI::fromJsonValue(m_supported_configurations, json[QString("supportedConfigurations")]);
    m_supported_configurations_isSet = !json[QString("supportedConfigurations")].isNull() && m_supported_configurations_isValid;
}

QString OAIScheduleTemplateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleTemplateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule_template_id_isSet) {
        obj.insert(QString("scheduleTemplateId"), ::OpenAPI::toJsonValue(m_schedule_template_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_configurations.size() > 0) {
        obj.insert(QString("supportedConfigurations"), ::OpenAPI::toJsonValue(m_supported_configurations));
    }
    return obj;
}

QString OAIScheduleTemplateResponse::getFeedType() const {
    return m_feed_type;
}
void OAIScheduleTemplateResponse::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAIScheduleTemplateResponse::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAIScheduleTemplateResponse::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

QString OAIScheduleTemplateResponse::getFrequency() const {
    return m_frequency;
}
void OAIScheduleTemplateResponse::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIScheduleTemplateResponse::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIScheduleTemplateResponse::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIScheduleTemplateResponse::getName() const {
    return m_name;
}
void OAIScheduleTemplateResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScheduleTemplateResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScheduleTemplateResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScheduleTemplateResponse::getScheduleTemplateId() const {
    return m_schedule_template_id;
}
void OAIScheduleTemplateResponse::setScheduleTemplateId(const QString &schedule_template_id) {
    m_schedule_template_id = schedule_template_id;
    m_schedule_template_id_isSet = true;
}

bool OAIScheduleTemplateResponse::is_schedule_template_id_Set() const{
    return m_schedule_template_id_isSet;
}

bool OAIScheduleTemplateResponse::is_schedule_template_id_Valid() const{
    return m_schedule_template_id_isValid;
}

QString OAIScheduleTemplateResponse::getStatus() const {
    return m_status;
}
void OAIScheduleTemplateResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScheduleTemplateResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScheduleTemplateResponse::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAISupportedConfiguration> OAIScheduleTemplateResponse::getSupportedConfigurations() const {
    return m_supported_configurations;
}
void OAIScheduleTemplateResponse::setSupportedConfigurations(const QList<OAISupportedConfiguration> &supported_configurations) {
    m_supported_configurations = supported_configurations;
    m_supported_configurations_isSet = true;
}

bool OAIScheduleTemplateResponse::is_supported_configurations_Set() const{
    return m_supported_configurations_isSet;
}

bool OAIScheduleTemplateResponse::is_supported_configurations_Valid() const{
    return m_supported_configurations_isValid;
}

bool OAIScheduleTemplateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleTemplateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
