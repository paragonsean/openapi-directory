/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryTaskApi_H
#define OAI_OAIInventoryTaskApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateInventoryTaskRequest.h"
#include "OAIInventoryTask.h"
#include "OAIInventoryTaskCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryTaskApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryTaskApi(const int timeOut = 0);
    ~OAIInventoryTaskApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_inventory_task_request OAICreateInventoryTaskRequest [required]
    */
    virtual void createInventoryTask(const OAICreateInventoryTaskRequest &oai_create_inventory_task_request);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getInventoryTask(const QString &task_id);

    /**
    * @param[in]  feed_type QString [optional]
    * @param[in]  schedule_id QString [optional]
    * @param[in]  look_back_days QString [optional]
    * @param[in]  date_range QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getInventoryTasks(const ::OpenAPI::OptionalParam<QString> &feed_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schedule_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &look_back_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createInventoryTaskCallback(OAIHttpRequestWorker *worker);
    void getInventoryTaskCallback(OAIHttpRequestWorker *worker);
    void getInventoryTasksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createInventoryTaskSignal();
    void getInventoryTaskSignal(OAIInventoryTask summary);
    void getInventoryTasksSignal(OAIInventoryTaskCollection summary);


    void createInventoryTaskSignalFull(OAIHttpRequestWorker *worker);
    void getInventoryTaskSignalFull(OAIHttpRequestWorker *worker, OAIInventoryTask summary);
    void getInventoryTasksSignalFull(OAIHttpRequestWorker *worker, OAIInventoryTaskCollection summary);

    Q_DECL_DEPRECATED_X("Use createInventoryTaskSignalError() instead")
    void createInventoryTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createInventoryTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInventoryTaskSignalError() instead")
    void getInventoryTaskSignalE(OAIInventoryTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInventoryTaskSignalError(OAIInventoryTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInventoryTasksSignalError() instead")
    void getInventoryTasksSignalE(OAIInventoryTaskCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInventoryTasksSignalError(OAIInventoryTaskCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createInventoryTaskSignalErrorFull() instead")
    void createInventoryTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInventoryTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInventoryTaskSignalErrorFull() instead")
    void getInventoryTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInventoryTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInventoryTasksSignalErrorFull() instead")
    void getInventoryTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInventoryTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
