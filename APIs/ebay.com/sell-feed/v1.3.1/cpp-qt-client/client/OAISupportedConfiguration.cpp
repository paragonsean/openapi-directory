/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedConfiguration::OAISupportedConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedConfiguration::OAISupportedConfiguration() {
    this->initializeModel();
}

OAISupportedConfiguration::~OAISupportedConfiguration() {}

void OAISupportedConfiguration::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAISupportedConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedConfiguration::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAISupportedConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAISupportedConfiguration::getDefaultValue() const {
    return m_default_value;
}
void OAISupportedConfiguration::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAISupportedConfiguration::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAISupportedConfiguration::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAISupportedConfiguration::getProperty() const {
    return m_property;
}
void OAISupportedConfiguration::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAISupportedConfiguration::is_property_Set() const{
    return m_property_isSet;
}

bool OAISupportedConfiguration::is_property_Valid() const{
    return m_property_isValid;
}

QString OAISupportedConfiguration::getUsage() const {
    return m_usage;
}
void OAISupportedConfiguration::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAISupportedConfiguration::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAISupportedConfiguration::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAISupportedConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
