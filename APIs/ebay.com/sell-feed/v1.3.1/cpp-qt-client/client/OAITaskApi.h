/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskApi_H
#define OAI_OAITaskApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTaskRequest.h"
#include "OAIObject.h"
#include "OAITask.h"
#include "OAITaskCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskApi : public QObject {
    Q_OBJECT

public:
    OAITaskApi(const int timeOut = 0);
    ~OAITaskApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_task_request OAICreateTaskRequest [required]
    * @param[in]  x_ebay_c_marketplace_id QString [optional]
    */
    virtual void createTask(const OAICreateTaskRequest &oai_create_task_request, const ::OpenAPI::OptionalParam<QString> &x_ebay_c_marketplace_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getInputFile(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getResultFile(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getTask(const QString &task_id);

    /**
    * @param[in]  date_range QString [optional]
    * @param[in]  feed_type QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  look_back_days QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  schedule_id QString [optional]
    */
    virtual void getTasks(const ::OpenAPI::OptionalParam<QString> &date_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feed_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &look_back_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schedule_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  creation_date QString [optional]
    * @param[in]  file_name QString [optional]
    * @param[in]  modification_date QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  parameters QMap<QString, QString> [optional]
    * @param[in]  read_date QString [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  type QString [optional]
    */
    virtual void uploadFile(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &creation_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modification_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &parameters = ::OpenAPI::OptionalParam<QMap<QString, QString>>(), const ::OpenAPI::OptionalParam<QString> &read_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTaskCallback(OAIHttpRequestWorker *worker);
    void getInputFileCallback(OAIHttpRequestWorker *worker);
    void getResultFileCallback(OAIHttpRequestWorker *worker);
    void getTaskCallback(OAIHttpRequestWorker *worker);
    void getTasksCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTaskSignal();
    void getInputFileSignal(OAIObject summary);
    void getResultFileSignal(OAIObject summary);
    void getTaskSignal(OAITask summary);
    void getTasksSignal(OAITaskCollection summary);
    void uploadFileSignal(OAIObject summary);


    void createTaskSignalFull(OAIHttpRequestWorker *worker);
    void getInputFileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getResultFileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getTaskSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void getTasksSignalFull(OAIHttpRequestWorker *worker, OAITaskCollection summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createTaskSignalError() instead")
    void createTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInputFileSignalError() instead")
    void getInputFileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInputFileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResultFileSignalError() instead")
    void getResultFileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResultFileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskSignalError() instead")
    void getTaskSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalError() instead")
    void getTasksSignalE(OAITaskCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalError(OAITaskCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTaskSignalErrorFull() instead")
    void createTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInputFileSignalErrorFull() instead")
    void getInputFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInputFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResultFileSignalErrorFull() instead")
    void getResultFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResultFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskSignalErrorFull() instead")
    void getTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalErrorFull() instead")
    void getTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
