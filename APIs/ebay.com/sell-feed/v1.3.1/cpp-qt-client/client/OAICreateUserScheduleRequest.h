/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateUserScheduleRequest.h
 *
 * The type that defines the fields for the &lt;strong&gt;createSchedule&lt;/strong&gt; method.
 */

#ifndef OAICreateUserScheduleRequest_H
#define OAICreateUserScheduleRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateUserScheduleRequest : public OAIObject {
public:
    OAICreateUserScheduleRequest();
    OAICreateUserScheduleRequest(QString json);
    ~OAICreateUserScheduleRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFeedType() const;
    void setFeedType(const QString &feed_type);
    bool is_feed_type_Set() const;
    bool is_feed_type_Valid() const;

    qint32 getPreferredTriggerDayOfMonth() const;
    void setPreferredTriggerDayOfMonth(const qint32 &preferred_trigger_day_of_month);
    bool is_preferred_trigger_day_of_month_Set() const;
    bool is_preferred_trigger_day_of_month_Valid() const;

    QString getPreferredTriggerDayOfWeek() const;
    void setPreferredTriggerDayOfWeek(const QString &preferred_trigger_day_of_week);
    bool is_preferred_trigger_day_of_week_Set() const;
    bool is_preferred_trigger_day_of_week_Valid() const;

    QString getPreferredTriggerHour() const;
    void setPreferredTriggerHour(const QString &preferred_trigger_hour);
    bool is_preferred_trigger_hour_Set() const;
    bool is_preferred_trigger_hour_Valid() const;

    QString getScheduleEndDate() const;
    void setScheduleEndDate(const QString &schedule_end_date);
    bool is_schedule_end_date_Set() const;
    bool is_schedule_end_date_Valid() const;

    QString getScheduleName() const;
    void setScheduleName(const QString &schedule_name);
    bool is_schedule_name_Set() const;
    bool is_schedule_name_Valid() const;

    QString getScheduleStartDate() const;
    void setScheduleStartDate(const QString &schedule_start_date);
    bool is_schedule_start_date_Set() const;
    bool is_schedule_start_date_Valid() const;

    QString getScheduleTemplateId() const;
    void setScheduleTemplateId(const QString &schedule_template_id);
    bool is_schedule_template_id_Set() const;
    bool is_schedule_template_id_Valid() const;

    QString getSchemaVersion() const;
    void setSchemaVersion(const QString &schema_version);
    bool is_schema_version_Set() const;
    bool is_schema_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_feed_type;
    bool m_feed_type_isSet;
    bool m_feed_type_isValid;

    qint32 m_preferred_trigger_day_of_month;
    bool m_preferred_trigger_day_of_month_isSet;
    bool m_preferred_trigger_day_of_month_isValid;

    QString m_preferred_trigger_day_of_week;
    bool m_preferred_trigger_day_of_week_isSet;
    bool m_preferred_trigger_day_of_week_isValid;

    QString m_preferred_trigger_hour;
    bool m_preferred_trigger_hour_isSet;
    bool m_preferred_trigger_hour_isValid;

    QString m_schedule_end_date;
    bool m_schedule_end_date_isSet;
    bool m_schedule_end_date_isValid;

    QString m_schedule_name;
    bool m_schedule_name_isSet;
    bool m_schedule_name_isValid;

    QString m_schedule_start_date;
    bool m_schedule_start_date_isSet;
    bool m_schedule_start_date_isValid;

    QString m_schedule_template_id;
    bool m_schedule_template_id_isSet;
    bool m_schedule_template_id_isValid;

    QString m_schema_version;
    bool m_schema_version_isSet;
    bool m_schema_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateUserScheduleRequest)

#endif // OAICreateUserScheduleRequest_H
