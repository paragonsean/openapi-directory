/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_detail_href_isSet = false;
    m_detail_href_isValid = false;

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_upload_summary_isSet = false;
    m_upload_summary_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("completionDate")]);
    m_completion_date_isSet = !json[QString("completionDate")].isNull() && m_completion_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_detail_href_isValid = ::OpenAPI::fromJsonValue(m_detail_href, json[QString("detailHref")]);
    m_detail_href_isSet = !json[QString("detailHref")].isNull() && m_detail_href_isValid;

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_upload_summary_isValid = ::OpenAPI::fromJsonValue(m_upload_summary, json[QString("uploadSummary")]);
    m_upload_summary_isSet = !json[QString("uploadSummary")].isNull() && m_upload_summary_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_date_isSet) {
        obj.insert(QString("completionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_detail_href_isSet) {
        obj.insert(QString("detailHref"), ::OpenAPI::toJsonValue(m_detail_href));
    }
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_upload_summary.isSet()) {
        obj.insert(QString("uploadSummary"), ::OpenAPI::toJsonValue(m_upload_summary));
    }
    return obj;
}

QString OAITask::getCompletionDate() const {
    return m_completion_date;
}
void OAITask::setCompletionDate(const QString &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAITask::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAITask::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

QString OAITask::getCreationDate() const {
    return m_creation_date;
}
void OAITask::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITask::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITask::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITask::getDetailHref() const {
    return m_detail_href;
}
void OAITask::setDetailHref(const QString &detail_href) {
    m_detail_href = detail_href;
    m_detail_href_isSet = true;
}

bool OAITask::is_detail_href_Set() const{
    return m_detail_href_isSet;
}

bool OAITask::is_detail_href_Valid() const{
    return m_detail_href_isValid;
}

QString OAITask::getFeedType() const {
    return m_feed_type;
}
void OAITask::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAITask::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAITask::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

QString OAITask::getSchemaVersion() const {
    return m_schema_version;
}
void OAITask::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAITask::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAITask::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAITask::getStatus() const {
    return m_status;
}
void OAITask::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITask::is_status_Set() const{
    return m_status_isSet;
}

bool OAITask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITask::getTaskId() const {
    return m_task_id;
}
void OAITask::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITask::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITask::is_task_id_Valid() const{
    return m_task_id_isValid;
}

OAIUploadSummary OAITask::getUploadSummary() const {
    return m_upload_summary;
}
void OAITask::setUploadSummary(const OAIUploadSummary &upload_summary) {
    m_upload_summary = upload_summary;
    m_upload_summary_isSet = true;
}

bool OAITask::is_upload_summary_Set() const{
    return m_upload_summary_isSet;
}

bool OAITask::is_upload_summary_Valid() const{
    return m_upload_summary_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
