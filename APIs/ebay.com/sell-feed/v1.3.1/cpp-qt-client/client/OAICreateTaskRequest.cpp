/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTaskRequest::OAICreateTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTaskRequest::OAICreateTaskRequest() {
    this->initializeModel();
}

OAICreateTaskRequest::~OAICreateTaskRequest() {}

void OAICreateTaskRequest::initializeModel() {

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAICreateTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTaskRequest::fromJsonObject(QJsonObject json) {

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAICreateTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

QString OAICreateTaskRequest::getFeedType() const {
    return m_feed_type;
}
void OAICreateTaskRequest::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAICreateTaskRequest::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAICreateTaskRequest::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

QString OAICreateTaskRequest::getSchemaVersion() const {
    return m_schema_version;
}
void OAICreateTaskRequest::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAICreateTaskRequest::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAICreateTaskRequest::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAICreateTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
