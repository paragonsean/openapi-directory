/*
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex data type that filters data for report creation. See &lt;strong&gt;CustomerServiceMetricsFilterCriteria&lt;/strong&gt; for fields and descriptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:52.405208-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerServiceMetricsFilterCriteria {
  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE_METRIC_TYPE = "customerServiceMetricType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE_METRIC_TYPE)
  private String customerServiceMetricType;

  public static final String SERIALIZED_NAME_EVALUATION_MARKETPLACE_ID = "evaluationMarketplaceId";
  @SerializedName(SERIALIZED_NAME_EVALUATION_MARKETPLACE_ID)
  private String evaluationMarketplaceId;

  public static final String SERIALIZED_NAME_LISTING_CATEGORIES = "listingCategories";
  @SerializedName(SERIALIZED_NAME_LISTING_CATEGORIES)
  private List<String> listingCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_REGIONS = "shippingRegions";
  @SerializedName(SERIALIZED_NAME_SHIPPING_REGIONS)
  private List<String> shippingRegions = new ArrayList<>();

  public CustomerServiceMetricsFilterCriteria() {
  }

  public CustomerServiceMetricsFilterCriteria customerServiceMetricType(String customerServiceMetricType) {
    this.customerServiceMetricType = customerServiceMetricType;
    return this;
  }

  /**
   * An enumeration value that specifies the customer service metric that eBay tracks to measure seller performance. See &lt;strong&gt;CustomerServiceMetricTypeEnum&lt;/strong&gt; for values. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/api:CustomerServiceMetricTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return customerServiceMetricType
   */
  @javax.annotation.Nullable
  public String getCustomerServiceMetricType() {
    return customerServiceMetricType;
  }

  public void setCustomerServiceMetricType(String customerServiceMetricType) {
    this.customerServiceMetricType = customerServiceMetricType;
  }


  public CustomerServiceMetricsFilterCriteria evaluationMarketplaceId(String evaluationMarketplaceId) {
    this.evaluationMarketplaceId = evaluationMarketplaceId;
    return this;
  }

  /**
   * An enumeration value that specifies the eBay marketplace where the evaluation occurs. See &lt;strong&gt;MarketplaceIdEnum&lt;/strong&gt; for values. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/bas:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return evaluationMarketplaceId
   */
  @javax.annotation.Nullable
  public String getEvaluationMarketplaceId() {
    return evaluationMarketplaceId;
  }

  public void setEvaluationMarketplaceId(String evaluationMarketplaceId) {
    this.evaluationMarketplaceId = evaluationMarketplaceId;
  }


  public CustomerServiceMetricsFilterCriteria listingCategories(List<String> listingCategories) {
    this.listingCategories = listingCategories;
    return this;
  }

  public CustomerServiceMetricsFilterCriteria addListingCategoriesItem(String listingCategoriesItem) {
    if (this.listingCategories == null) {
      this.listingCategories = new ArrayList<>();
    }
    this.listingCategories.add(listingCategoriesItem);
    return this;
  }

  /**
   * A list of listing category IDs on which the service metric is measured. A seller can use one or more L1 (top-level) eBay categories to get metrics specific to those L1 categories. The Category IDs for each L1 category are required. Category ID values for L1 categories can be retrieved using the Taxonomy API.&lt;p&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;Pass this attribute to narrow down your filter results for the &lt;code&gt;ITEM_NOT_AS_DESCRIBED&lt;/code&gt; customerServiceMetricType.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Supported categories include:&lt;/p&gt;&lt;p&gt;&lt;code&gt;primary(L1) category Id&lt;/code&gt;&lt;/p&gt;
   * @return listingCategories
   */
  @javax.annotation.Nullable
  public List<String> getListingCategories() {
    return listingCategories;
  }

  public void setListingCategories(List<String> listingCategories) {
    this.listingCategories = listingCategories;
  }


  public CustomerServiceMetricsFilterCriteria shippingRegions(List<String> shippingRegions) {
    this.shippingRegions = shippingRegions;
    return this;
  }

  public CustomerServiceMetricsFilterCriteria addShippingRegionsItem(String shippingRegionsItem) {
    if (this.shippingRegions == null) {
      this.shippingRegions = new ArrayList<>();
    }
    this.shippingRegions.add(shippingRegionsItem);
    return this;
  }

  /**
   * A list of shipping region enumeration values on which the service metric is measured. This comma delimited array allows the seller to customize the report to focus on domestic or international shipping. &lt;p&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;Pass this attribute to narrow down your filter results for the &lt;code&gt;ITEM_NOT_RECEIVED&lt;/code&gt; customerServiceMetricType.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Supported categories include:&lt;/p&gt;&lt;p&gt;&lt;code&gt;primary(L1) category Id&lt;/code&gt;&lt;/p&gt;See &lt;strong&gt;ShippingRegionTypeEnum&lt;/strong&gt; for values
   * @return shippingRegions
   */
  @javax.annotation.Nullable
  public List<String> getShippingRegions() {
    return shippingRegions;
  }

  public void setShippingRegions(List<String> shippingRegions) {
    this.shippingRegions = shippingRegions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerServiceMetricsFilterCriteria customerServiceMetricsFilterCriteria = (CustomerServiceMetricsFilterCriteria) o;
    return Objects.equals(this.customerServiceMetricType, customerServiceMetricsFilterCriteria.customerServiceMetricType) &&
        Objects.equals(this.evaluationMarketplaceId, customerServiceMetricsFilterCriteria.evaluationMarketplaceId) &&
        Objects.equals(this.listingCategories, customerServiceMetricsFilterCriteria.listingCategories) &&
        Objects.equals(this.shippingRegions, customerServiceMetricsFilterCriteria.shippingRegions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerServiceMetricType, evaluationMarketplaceId, listingCategories, shippingRegions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerServiceMetricsFilterCriteria {\n");
    sb.append("    customerServiceMetricType: ").append(toIndentedString(customerServiceMetricType)).append("\n");
    sb.append("    evaluationMarketplaceId: ").append(toIndentedString(evaluationMarketplaceId)).append("\n");
    sb.append("    listingCategories: ").append(toIndentedString(listingCategories)).append("\n");
    sb.append("    shippingRegions: ").append(toIndentedString(shippingRegions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerServiceMetricType");
    openapiFields.add("evaluationMarketplaceId");
    openapiFields.add("listingCategories");
    openapiFields.add("shippingRegions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerServiceMetricsFilterCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerServiceMetricsFilterCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerServiceMetricsFilterCriteria is not found in the empty JSON string", CustomerServiceMetricsFilterCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerServiceMetricsFilterCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerServiceMetricsFilterCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerServiceMetricType") != null && !jsonObj.get("customerServiceMetricType").isJsonNull()) && !jsonObj.get("customerServiceMetricType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerServiceMetricType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerServiceMetricType").toString()));
      }
      if ((jsonObj.get("evaluationMarketplaceId") != null && !jsonObj.get("evaluationMarketplaceId").isJsonNull()) && !jsonObj.get("evaluationMarketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMarketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMarketplaceId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listingCategories") != null && !jsonObj.get("listingCategories").isJsonNull() && !jsonObj.get("listingCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingCategories` to be an array in the JSON string but got `%s`", jsonObj.get("listingCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shippingRegions") != null && !jsonObj.get("shippingRegions").isJsonNull() && !jsonObj.get("shippingRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingRegions` to be an array in the JSON string but got `%s`", jsonObj.get("shippingRegions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerServiceMetricsFilterCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerServiceMetricsFilterCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerServiceMetricsFilterCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerServiceMetricsFilterCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerServiceMetricsFilterCriteria>() {
           @Override
           public void write(JsonWriter out, CustomerServiceMetricsFilterCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerServiceMetricsFilterCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerServiceMetricsFilterCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerServiceMetricsFilterCriteria
   * @throws IOException if the JSON string is invalid with respect to CustomerServiceMetricsFilterCriteria
   */
  public static CustomerServiceMetricsFilterCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerServiceMetricsFilterCriteria.class);
  }

  /**
   * Convert an instance of CustomerServiceMetricsFilterCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

