/*
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomerServiceMetricsFilterCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceMetricsTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:52.405208-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceMetricsTask {
  public static final String SERIALIZED_NAME_COMPLETION_DATE = "completionDate";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private String completionDate;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DETAIL_HREF = "detailHref";
  @SerializedName(SERIALIZED_NAME_DETAIL_HREF)
  private String detailHref;

  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private String feedType;

  public static final String SERIALIZED_NAME_FILTER_CRITERIA = "filterCriteria";
  @SerializedName(SERIALIZED_NAME_FILTER_CRITERIA)
  private CustomerServiceMetricsFilterCriteria filterCriteria;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public ServiceMetricsTask() {
  }

  public ServiceMetricsTask completionDate(String completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * The timestamp when the customer service metrics task went into the &lt;code&gt;COMPLETED&lt;/code&gt; or &lt;code&gt;COMPLETED_WITH_ERROR&lt;/code&gt; state. This field is only returned if the status is one of the two completed values. This state means that eBay has compiled the report for the seller based on the sellerâ€™s filter criteria, and the seller can run a &lt;strong&gt;getResultFile&lt;/strong&gt; call to download the report.
   * @return completionDate
   */
  @javax.annotation.Nullable
  public String getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(String completionDate) {
    this.completionDate = completionDate;
  }


  public ServiceMetricsTask creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date the customer service metrics task was created.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public ServiceMetricsTask detailHref(String detailHref) {
    this.detailHref = detailHref;
    return this;
  }

  /**
   * The relative &lt;strong&gt;getCustomerServiceMetricTask&lt;/strong&gt; call URI path to retrieve the corresponding task.
   * @return detailHref
   */
  @javax.annotation.Nullable
  public String getDetailHref() {
    return detailHref;
  }

  public void setDetailHref(String detailHref) {
    this.detailHref = detailHref;
  }


  public ServiceMetricsTask feedType(String feedType) {
    this.feedType = feedType;
    return this;
  }

  /**
   * The feed type associated with the task.
   * @return feedType
   */
  @javax.annotation.Nullable
  public String getFeedType() {
    return feedType;
  }

  public void setFeedType(String feedType) {
    this.feedType = feedType;
  }


  public ServiceMetricsTask filterCriteria(CustomerServiceMetricsFilterCriteria filterCriteria) {
    this.filterCriteria = filterCriteria;
    return this;
  }

  /**
   * Get filterCriteria
   * @return filterCriteria
   */
  @javax.annotation.Nullable
  public CustomerServiceMetricsFilterCriteria getFilterCriteria() {
    return filterCriteria;
  }

  public void setFilterCriteria(CustomerServiceMetricsFilterCriteria filterCriteria) {
    this.filterCriteria = filterCriteria;
  }


  public ServiceMetricsTask schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The schema version number of the file format. If omitted, the default value is used. &lt;p&gt;&lt;b&gt;Default value: &lt;/b&gt;&lt;code&gt;1.0&lt;/code&gt;&lt;p&gt;
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public ServiceMetricsTask status(String status) {
    this.status = status;
    return this;
  }

  /**
   * An enumeration value that indicates the state of the task. See &lt;strong&gt;FeedStatusEnum&lt;/strong&gt; for values. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ServiceMetricsTask taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * The unique eBay-assigned ID of the task.
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceMetricsTask serviceMetricsTask = (ServiceMetricsTask) o;
    return Objects.equals(this.completionDate, serviceMetricsTask.completionDate) &&
        Objects.equals(this.creationDate, serviceMetricsTask.creationDate) &&
        Objects.equals(this.detailHref, serviceMetricsTask.detailHref) &&
        Objects.equals(this.feedType, serviceMetricsTask.feedType) &&
        Objects.equals(this.filterCriteria, serviceMetricsTask.filterCriteria) &&
        Objects.equals(this.schemaVersion, serviceMetricsTask.schemaVersion) &&
        Objects.equals(this.status, serviceMetricsTask.status) &&
        Objects.equals(this.taskId, serviceMetricsTask.taskId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionDate, creationDate, detailHref, feedType, filterCriteria, schemaVersion, status, taskId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceMetricsTask {\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    detailHref: ").append(toIndentedString(detailHref)).append("\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("    filterCriteria: ").append(toIndentedString(filterCriteria)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionDate");
    openapiFields.add("creationDate");
    openapiFields.add("detailHref");
    openapiFields.add("feedType");
    openapiFields.add("filterCriteria");
    openapiFields.add("schemaVersion");
    openapiFields.add("status");
    openapiFields.add("taskId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceMetricsTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceMetricsTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceMetricsTask is not found in the empty JSON string", ServiceMetricsTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceMetricsTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceMetricsTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completionDate") != null && !jsonObj.get("completionDate").isJsonNull()) && !jsonObj.get("completionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionDate").toString()));
      }
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("detailHref") != null && !jsonObj.get("detailHref").isJsonNull()) && !jsonObj.get("detailHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailHref").toString()));
      }
      if ((jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) && !jsonObj.get("feedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedType").toString()));
      }
      // validate the optional field `filterCriteria`
      if (jsonObj.get("filterCriteria") != null && !jsonObj.get("filterCriteria").isJsonNull()) {
        CustomerServiceMetricsFilterCriteria.validateJsonElement(jsonObj.get("filterCriteria"));
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceMetricsTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceMetricsTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceMetricsTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceMetricsTask.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceMetricsTask>() {
           @Override
           public void write(JsonWriter out, ServiceMetricsTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceMetricsTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceMetricsTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceMetricsTask
   * @throws IOException if the JSON string is invalid with respect to ServiceMetricsTask
   */
  public static ServiceMetricsTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceMetricsTask.class);
  }

  /**
   * Convert an instance of ServiceMetricsTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

