/*
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the order filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:52.405208-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderFilterCriteria {
  public static final String SERIALIZED_NAME_CREATION_DATE_RANGE = "creationDateRange";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_RANGE)
  private DateRange creationDateRange;

  public static final String SERIALIZED_NAME_MODIFIED_DATE_RANGE = "modifiedDateRange";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE_RANGE)
  private DateRange modifiedDateRange;

  public static final String SERIALIZED_NAME_ORDER_STATUS = "orderStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
  private String orderStatus;

  public OrderFilterCriteria() {
  }

  public OrderFilterCriteria creationDateRange(DateRange creationDateRange) {
    this.creationDateRange = creationDateRange;
    return this;
  }

  /**
   * Get creationDateRange
   * @return creationDateRange
   */
  @javax.annotation.Nullable
  public DateRange getCreationDateRange() {
    return creationDateRange;
  }

  public void setCreationDateRange(DateRange creationDateRange) {
    this.creationDateRange = creationDateRange;
  }


  public OrderFilterCriteria modifiedDateRange(DateRange modifiedDateRange) {
    this.modifiedDateRange = modifiedDateRange;
    return this;
  }

  /**
   * Get modifiedDateRange
   * @return modifiedDateRange
   */
  @javax.annotation.Nullable
  public DateRange getModifiedDateRange() {
    return modifiedDateRange;
  }

  public void setModifiedDateRange(DateRange modifiedDateRange) {
    this.modifiedDateRange = modifiedDateRange;
  }


  public OrderFilterCriteria orderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  /**
   * The order status of the orders returned. If the filter is omitted from createOrderTask call, orders that are in both &lt;code&gt;ACTIVE &lt;/code&gt;and&lt;code&gt; COMPLETED&lt;/code&gt; states are returned. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/api:OrderStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return orderStatus
   */
  @javax.annotation.Nullable
  public String getOrderStatus() {
    return orderStatus;
  }

  public void setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderFilterCriteria orderFilterCriteria = (OrderFilterCriteria) o;
    return Objects.equals(this.creationDateRange, orderFilterCriteria.creationDateRange) &&
        Objects.equals(this.modifiedDateRange, orderFilterCriteria.modifiedDateRange) &&
        Objects.equals(this.orderStatus, orderFilterCriteria.orderStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDateRange, modifiedDateRange, orderStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderFilterCriteria {\n");
    sb.append("    creationDateRange: ").append(toIndentedString(creationDateRange)).append("\n");
    sb.append("    modifiedDateRange: ").append(toIndentedString(modifiedDateRange)).append("\n");
    sb.append("    orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDateRange");
    openapiFields.add("modifiedDateRange");
    openapiFields.add("orderStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderFilterCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderFilterCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderFilterCriteria is not found in the empty JSON string", OrderFilterCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderFilterCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderFilterCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `creationDateRange`
      if (jsonObj.get("creationDateRange") != null && !jsonObj.get("creationDateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("creationDateRange"));
      }
      // validate the optional field `modifiedDateRange`
      if (jsonObj.get("modifiedDateRange") != null && !jsonObj.get("modifiedDateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("modifiedDateRange"));
      }
      if ((jsonObj.get("orderStatus") != null && !jsonObj.get("orderStatus").isJsonNull()) && !jsonObj.get("orderStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderFilterCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderFilterCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderFilterCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderFilterCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderFilterCriteria>() {
           @Override
           public void write(JsonWriter out, OrderFilterCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderFilterCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderFilterCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderFilterCriteria
   * @throws IOException if the JSON string is invalid with respect to OrderFilterCriteria
   */
  public static OrderFilterCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderFilterCriteria.class);
  }

  /**
   * Convert an instance of OrderFilterCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

