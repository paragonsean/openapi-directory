/*
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for a schedule update to a schedule generated with the Feed API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:52.405208-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateUserScheduleRequest {
  public static final String SERIALIZED_NAME_PREFERRED_TRIGGER_DAY_OF_MONTH = "preferredTriggerDayOfMonth";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TRIGGER_DAY_OF_MONTH)
  private Integer preferredTriggerDayOfMonth;

  public static final String SERIALIZED_NAME_PREFERRED_TRIGGER_DAY_OF_WEEK = "preferredTriggerDayOfWeek";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TRIGGER_DAY_OF_WEEK)
  private String preferredTriggerDayOfWeek;

  public static final String SERIALIZED_NAME_PREFERRED_TRIGGER_HOUR = "preferredTriggerHour";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TRIGGER_HOUR)
  private String preferredTriggerHour;

  public static final String SERIALIZED_NAME_SCHEDULE_END_DATE = "scheduleEndDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_END_DATE)
  private String scheduleEndDate;

  public static final String SERIALIZED_NAME_SCHEDULE_NAME = "scheduleName";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_NAME)
  private String scheduleName;

  public static final String SERIALIZED_NAME_SCHEDULE_START_DATE = "scheduleStartDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_START_DATE)
  private String scheduleStartDate;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public UpdateUserScheduleRequest() {
  }

  public UpdateUserScheduleRequest preferredTriggerDayOfMonth(Integer preferredTriggerDayOfMonth) {
    this.preferredTriggerDayOfMonth = preferredTriggerDayOfMonth;
    return this;
  }

  /**
   * The preferred day of the month to trigger the schedule. This field can be used with &lt;strong&gt;preferredTriggerHour&lt;/strong&gt; for monthly schedules. The last day of the month is used for numbers larger than the actual number of days in the month. &lt;br /&gt;&lt;br /&gt;This field is available as specified by the template (&lt;strong&gt;scheduleTemplateId&lt;/strong&gt;). The template can specify this field as optional or required, and optionally provides a default value. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Minimum: &lt;/b&gt;1&lt;b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Maximum: &lt;/b&gt;31
   * @return preferredTriggerDayOfMonth
   */
  @javax.annotation.Nullable
  public Integer getPreferredTriggerDayOfMonth() {
    return preferredTriggerDayOfMonth;
  }

  public void setPreferredTriggerDayOfMonth(Integer preferredTriggerDayOfMonth) {
    this.preferredTriggerDayOfMonth = preferredTriggerDayOfMonth;
  }


  public UpdateUserScheduleRequest preferredTriggerDayOfWeek(String preferredTriggerDayOfWeek) {
    this.preferredTriggerDayOfWeek = preferredTriggerDayOfWeek;
    return this;
  }

  /**
   * The preferred day of the week to trigger the schedule. This field can be used with &lt;strong&gt;preferredTriggerHour&lt;/strong&gt; for weekly schedules. &lt;br /&gt;&lt;br /&gt;This field is available as specified by the template (&lt;strong&gt;scheduleTemplateId&lt;/strong&gt;). The template can specify this field as optional or required, and optionally provides a default value. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return preferredTriggerDayOfWeek
   */
  @javax.annotation.Nullable
  public String getPreferredTriggerDayOfWeek() {
    return preferredTriggerDayOfWeek;
  }

  public void setPreferredTriggerDayOfWeek(String preferredTriggerDayOfWeek) {
    this.preferredTriggerDayOfWeek = preferredTriggerDayOfWeek;
  }


  public UpdateUserScheduleRequest preferredTriggerHour(String preferredTriggerHour) {
    this.preferredTriggerHour = preferredTriggerHour;
    return this;
  }

  /**
   * The preferred two-digit hour of the day to trigger the schedule. &lt;br /&gt;&lt;br /&gt;This field is available as specified by the template (&lt;strong&gt;scheduleTemplateId&lt;/strong&gt;). The template can specify this field as optional or required, and optionally provides a default value. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Format:&lt;/b&gt; UTC &lt;code&gt;hhZ&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;For example, the following represents 11:00 am UTC:&lt;code&gt; 11Z&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Minimum: &lt;/b&gt;&lt;code&gt;00Z&lt;/code&gt;&lt;b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Maximum: &lt;/b&gt;&lt;code&gt;23Z&lt;/code&gt;
   * @return preferredTriggerHour
   */
  @javax.annotation.Nullable
  public String getPreferredTriggerHour() {
    return preferredTriggerHour;
  }

  public void setPreferredTriggerHour(String preferredTriggerHour) {
    this.preferredTriggerHour = preferredTriggerHour;
  }


  public UpdateUserScheduleRequest scheduleEndDate(String scheduleEndDate) {
    this.scheduleEndDate = scheduleEndDate;
    return this;
  }

  /**
   * The timestamp on which the schedule (report generation) ends. After this date, the schedule status becomes &lt;code&gt;INACTIVE&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt;Use this field, if available, to end the schedule in the future. This value must be later than &lt;strong&gt;scheduleStartDate&lt;/strong&gt; (if supplied). This field is available as specified by the template (&lt;strong&gt;scheduleTemplateId&lt;/strong&gt;). The template can specify this field as optional or required, and optionally provides a default value.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Format:&lt;/b&gt; UTC &lt;code&gt;yyyy-MM-dd&lt;strong&gt;T&lt;/strong&gt;HH&lt;strong&gt;Z&lt;/strong&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;For example, the following represents UTC October 10, 2021 at 10:00 AM:&lt;br /&gt;&lt;code&gt; 2021-10-10T10Z&lt;/code&gt;
   * @return scheduleEndDate
   */
  @javax.annotation.Nullable
  public String getScheduleEndDate() {
    return scheduleEndDate;
  }

  public void setScheduleEndDate(String scheduleEndDate) {
    this.scheduleEndDate = scheduleEndDate;
  }


  public UpdateUserScheduleRequest scheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
    return this;
  }

  /**
   * The schedule name assigned by the user for the created schedule.
   * @return scheduleName
   */
  @javax.annotation.Nullable
  public String getScheduleName() {
    return scheduleName;
  }

  public void setScheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
  }


  public UpdateUserScheduleRequest scheduleStartDate(String scheduleStartDate) {
    this.scheduleStartDate = scheduleStartDate;
    return this;
  }

  /**
   * The timestamp to start generating the report. After this timestamp, the schedule status becomes active until either the &lt;strong&gt;scheduleEndDate&lt;/strong&gt; occurs or the &lt;strong&gt;scheduleTemplateId&lt;/strong&gt; becomes inactive. &lt;br /&gt;&lt;br /&gt;Use this field, if available, to start the schedule in the future but before the &lt;strong&gt;scheduleEndDate&lt;/strong&gt; (if supplied). This field is available as specified by the template &lt;strong&gt;(scheduleTemplateId)&lt;/strong&gt;.  The template can specify this field as optional or required, and optionally provides a default value.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Format:&lt;/b&gt; UTC &lt;code&gt;yyyy-MM-dd&lt;strong&gt;T&lt;/strong&gt;HH&lt;strong&gt;Z&lt;/strong&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;For example, the following represents a schedule start date of UTC October 01, 2020 at 12:00 PM:&lt;br /&gt;&lt;code&gt; 2020-01-01T12Z&lt;/code&gt;
   * @return scheduleStartDate
   */
  @javax.annotation.Nullable
  public String getScheduleStartDate() {
    return scheduleStartDate;
  }

  public void setScheduleStartDate(String scheduleStartDate) {
    this.scheduleStartDate = scheduleStartDate;
  }


  public UpdateUserScheduleRequest schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The schema version of the feedType for the schedule. This field is required if the &lt;strong&gt;feedType&lt;/strong&gt; has a schema version. &lt;br /&gt;&lt;br /&gt;This field is available as specified by the template (&lt;strong&gt;scheduleTemplateId&lt;/strong&gt;). The template can specify this field as optional or required, and optionally provides a default value.
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateUserScheduleRequest updateUserScheduleRequest = (UpdateUserScheduleRequest) o;
    return Objects.equals(this.preferredTriggerDayOfMonth, updateUserScheduleRequest.preferredTriggerDayOfMonth) &&
        Objects.equals(this.preferredTriggerDayOfWeek, updateUserScheduleRequest.preferredTriggerDayOfWeek) &&
        Objects.equals(this.preferredTriggerHour, updateUserScheduleRequest.preferredTriggerHour) &&
        Objects.equals(this.scheduleEndDate, updateUserScheduleRequest.scheduleEndDate) &&
        Objects.equals(this.scheduleName, updateUserScheduleRequest.scheduleName) &&
        Objects.equals(this.scheduleStartDate, updateUserScheduleRequest.scheduleStartDate) &&
        Objects.equals(this.schemaVersion, updateUserScheduleRequest.schemaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preferredTriggerDayOfMonth, preferredTriggerDayOfWeek, preferredTriggerHour, scheduleEndDate, scheduleName, scheduleStartDate, schemaVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateUserScheduleRequest {\n");
    sb.append("    preferredTriggerDayOfMonth: ").append(toIndentedString(preferredTriggerDayOfMonth)).append("\n");
    sb.append("    preferredTriggerDayOfWeek: ").append(toIndentedString(preferredTriggerDayOfWeek)).append("\n");
    sb.append("    preferredTriggerHour: ").append(toIndentedString(preferredTriggerHour)).append("\n");
    sb.append("    scheduleEndDate: ").append(toIndentedString(scheduleEndDate)).append("\n");
    sb.append("    scheduleName: ").append(toIndentedString(scheduleName)).append("\n");
    sb.append("    scheduleStartDate: ").append(toIndentedString(scheduleStartDate)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("preferredTriggerDayOfMonth");
    openapiFields.add("preferredTriggerDayOfWeek");
    openapiFields.add("preferredTriggerHour");
    openapiFields.add("scheduleEndDate");
    openapiFields.add("scheduleName");
    openapiFields.add("scheduleStartDate");
    openapiFields.add("schemaVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateUserScheduleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateUserScheduleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateUserScheduleRequest is not found in the empty JSON string", UpdateUserScheduleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateUserScheduleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateUserScheduleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("preferredTriggerDayOfWeek") != null && !jsonObj.get("preferredTriggerDayOfWeek").isJsonNull()) && !jsonObj.get("preferredTriggerDayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTriggerDayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTriggerDayOfWeek").toString()));
      }
      if ((jsonObj.get("preferredTriggerHour") != null && !jsonObj.get("preferredTriggerHour").isJsonNull()) && !jsonObj.get("preferredTriggerHour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTriggerHour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTriggerHour").toString()));
      }
      if ((jsonObj.get("scheduleEndDate") != null && !jsonObj.get("scheduleEndDate").isJsonNull()) && !jsonObj.get("scheduleEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleEndDate").toString()));
      }
      if ((jsonObj.get("scheduleName") != null && !jsonObj.get("scheduleName").isJsonNull()) && !jsonObj.get("scheduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleName").toString()));
      }
      if ((jsonObj.get("scheduleStartDate") != null && !jsonObj.get("scheduleStartDate").isJsonNull()) && !jsonObj.get("scheduleStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleStartDate").toString()));
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateUserScheduleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateUserScheduleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateUserScheduleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateUserScheduleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateUserScheduleRequest>() {
           @Override
           public void write(JsonWriter out, UpdateUserScheduleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateUserScheduleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateUserScheduleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateUserScheduleRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateUserScheduleRequest
   */
  public static UpdateUserScheduleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateUserScheduleRequest.class);
  }

  /**
   * Convert an instance of UpdateUserScheduleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

