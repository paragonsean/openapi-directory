/*
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SupportedConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for a paginated result set of available schedule templates. The response consists of 0 or more sequenced &lt;em&gt; pages&lt;/em&gt; where each page has 0 or more items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:52.405208-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleTemplateResponse {
  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private String feedType;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULE_TEMPLATE_ID = "scheduleTemplateId";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TEMPLATE_ID)
  private String scheduleTemplateId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUPPORTED_CONFIGURATIONS = "supportedConfigurations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CONFIGURATIONS)
  private List<SupportedConfiguration> supportedConfigurations = new ArrayList<>();

  public ScheduleTemplateResponse() {
  }

  public ScheduleTemplateResponse feedType(String feedType) {
    this.feedType = feedType;
    return this;
  }

  /**
   * The feed type of the schedule template. &lt;p&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; When calling &lt;strong&gt;createSchedule&lt;/strong&gt; and &lt;strong&gt;updateSchedule&lt;/strong&gt; methods you must match the feed type specified by the schedule template (this feedType).&lt;/span&gt;&lt;/p&gt;
   * @return feedType
   */
  @javax.annotation.Nullable
  public String getFeedType() {
    return feedType;
  }

  public void setFeedType(String feedType) {
    this.feedType = feedType;
  }


  public ScheduleTemplateResponse frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * This field specifies how often the schedule is generated. If set to &lt;code&gt;HALF_HOUR&lt;/code&gt; or &lt;code&gt;ONE_HOUR&lt;/code&gt;, you cannot set a &lt;strong&gt;preferredTriggerHour&lt;/strong&gt; using &lt;strong&gt;createSchedule&lt;/strong&gt; or &lt;strong&gt;updateSchedule&lt;/strong&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/api:FrequencyEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public ScheduleTemplateResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The template name provided by the template.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScheduleTemplateResponse scheduleTemplateId(String scheduleTemplateId) {
    this.scheduleTemplateId = scheduleTemplateId;
    return this;
  }

  /**
   * The ID of the template. Use this ID to create a schedule based on the properties of this schedule template.
   * @return scheduleTemplateId
   */
  @javax.annotation.Nullable
  public String getScheduleTemplateId() {
    return scheduleTemplateId;
  }

  public void setScheduleTemplateId(String scheduleTemplateId) {
    this.scheduleTemplateId = scheduleTemplateId;
  }


  public ScheduleTemplateResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The present status of the template. You cannot create or modify a schedule using a template with an &lt;code&gt;INACTIVE&lt;/code&gt; status.  For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ScheduleTemplateResponse supportedConfigurations(List<SupportedConfiguration> supportedConfigurations) {
    this.supportedConfigurations = supportedConfigurations;
    return this;
  }

  public ScheduleTemplateResponse addSupportedConfigurationsItem(SupportedConfiguration supportedConfigurationsItem) {
    if (this.supportedConfigurations == null) {
      this.supportedConfigurations = new ArrayList<>();
    }
    this.supportedConfigurations.add(supportedConfigurationsItem);
    return this;
  }

  /**
   * An array of the configuration supported by this template.
   * @return supportedConfigurations
   */
  @javax.annotation.Nullable
  public List<SupportedConfiguration> getSupportedConfigurations() {
    return supportedConfigurations;
  }

  public void setSupportedConfigurations(List<SupportedConfiguration> supportedConfigurations) {
    this.supportedConfigurations = supportedConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleTemplateResponse scheduleTemplateResponse = (ScheduleTemplateResponse) o;
    return Objects.equals(this.feedType, scheduleTemplateResponse.feedType) &&
        Objects.equals(this.frequency, scheduleTemplateResponse.frequency) &&
        Objects.equals(this.name, scheduleTemplateResponse.name) &&
        Objects.equals(this.scheduleTemplateId, scheduleTemplateResponse.scheduleTemplateId) &&
        Objects.equals(this.status, scheduleTemplateResponse.status) &&
        Objects.equals(this.supportedConfigurations, scheduleTemplateResponse.supportedConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedType, frequency, name, scheduleTemplateId, status, supportedConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleTemplateResponse {\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scheduleTemplateId: ").append(toIndentedString(scheduleTemplateId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportedConfigurations: ").append(toIndentedString(supportedConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feedType");
    openapiFields.add("frequency");
    openapiFields.add("name");
    openapiFields.add("scheduleTemplateId");
    openapiFields.add("status");
    openapiFields.add("supportedConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleTemplateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleTemplateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleTemplateResponse is not found in the empty JSON string", ScheduleTemplateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleTemplateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleTemplateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) && !jsonObj.get("feedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedType").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("scheduleTemplateId") != null && !jsonObj.get("scheduleTemplateId").isJsonNull()) && !jsonObj.get("scheduleTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleTemplateId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("supportedConfigurations") != null && !jsonObj.get("supportedConfigurations").isJsonNull()) {
        JsonArray jsonArraysupportedConfigurations = jsonObj.getAsJsonArray("supportedConfigurations");
        if (jsonArraysupportedConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("supportedConfigurations").toString()));
          }

          // validate the optional field `supportedConfigurations` (array)
          for (int i = 0; i < jsonArraysupportedConfigurations.size(); i++) {
            SupportedConfiguration.validateJsonElement(jsonArraysupportedConfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleTemplateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleTemplateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleTemplateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleTemplateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleTemplateResponse>() {
           @Override
           public void write(JsonWriter out, ScheduleTemplateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleTemplateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleTemplateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleTemplateResponse
   * @throws IOException if the JSON string is invalid with respect to ScheduleTemplateResponse
   */
  public static ScheduleTemplateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleTemplateResponse.class);
  }

  /**
   * Convert an instance of ScheduleTemplateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

