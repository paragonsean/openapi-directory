/*
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateTaskRequest;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskApi
 */
@Disabled
public class TaskApiTest {

    private final TaskApi api = new TaskApi();

    /**
     * This method creates an upload task or a download task without filter criteria. When using this method, specify the &lt;b&gt; feedType&lt;/b&gt; and the feed file &lt;b&gt; schemaVersion&lt;/b&gt;. The feed type specified sets the task as a download or an upload task.  &lt;p&gt;For details about the upload and download flows, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/orders/generating-and-retrieving-order-reports.html\&quot;&gt;Working with Order Feeds&lt;/a&gt; in the Selling Integration Guide.&lt;/p&gt;&lt;p&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; The scope depends on the feed type. An error message results when an unsupported scope or feed type is specified.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The following list contains this method&#39;s authorization scopes and their corresponding feed types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;https://api.ebay.com/oauth/api_scope/sell.inventory: See &lt;a href&#x3D;\&quot;/api-docs/sell/static/feed/lms-feeds-quick-reference.html#Availabl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;LMS FeedTypes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;https://api.ebay.com/oauth/api_scope/sell.fulfillment: LMS_ORDER_ACK (specify for upload tasks). Also see &lt;a href&#x3D;\&quot;/api-docs/sell/static/feed/lms-feeds-quick-reference.html#Availabl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;LMS FeedTypes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;https://api.ebay.com/oauth/api_scope/sell.marketing: None*&lt;/li&gt;&lt;li&gt;https://api.ebay.com/oauth/api_scope/commerce.catalog.readonly: None*&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;* Reserved for future release&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        CreateTaskRequest createTaskRequest = null;
        String X_EBAY_C_MARKETPLACE_ID = null;
        api.createTask(createTaskRequest, X_EBAY_C_MARKETPLACE_ID);
        // TODO: test validations
    }

    /**
     * This method downloads the file previously uploaded using &lt;strong&gt;uploadFile&lt;/strong&gt;. Specify the task_id from the &lt;strong&gt;uploadFile&lt;/strong&gt; call. &lt;p&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; With respect to LMS, this method applies to all feed types except &lt;code&gt;LMS_ORDER_REPORT&lt;/code&gt; and &lt;code&gt;LMS_ACTIVE_INVENTORY_REPORT&lt;/code&gt;. See &lt;a href&#x3D;\&quot;/api-docs/sell/static/feed/lms-feeds.html\&quot;&gt;LMS API Feeds&lt;/a&gt; in the Selling Integration Guide.&lt;/span&gt;&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInputFileTest() throws ApiException {
        String taskId = null;
        Object response = api.getInputFile(taskId);
        // TODO: test validations
    }

    /**
     * This method retrieves the generated file that is associated with the specified task ID. The response of this call is a compressed or uncompressed CSV, XML, or JSON file, with the applicable file extension (for example: csv.gz). &lt;p&gt;For details about how this method is used, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/orders/generating-and-retrieving-order-reports.html\&quot;&gt;Working with Order Feeds&lt;/a&gt; in the Selling Integration Guide. &lt;/p&gt;&lt;p&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; The status of the task to retrieve must be in the COMPLETED or COMPLETED_WITH_ERROR state before this method can retrieve the file. You can use the getTask or getTasks method to retrieve the status of the task.&lt;/span&gt;&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResultFileTest() throws ApiException {
        String taskId = null;
        Object response = api.getResultFile(taskId);
        // TODO: test validations
    }

    /**
     * This method retrieves the details and status of the specified task. The input is &lt;strong&gt;task_id&lt;/strong&gt;. &lt;br /&gt;&lt;br /&gt;For details of how this method is used, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/orders/generating-and-retrieving-order-reports.html\&quot;&gt;Working with Order Feeds&lt;/a&gt; in the Selling Integration Guide. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTest() throws ApiException {
        String taskId = null;
        Task response = api.getTask(taskId);
        // TODO: test validations
    }

    /**
     * This method returns the details and status for an array of tasks based on a specified &lt;strong&gt;feed_type&lt;/strong&gt; or &lt;strong&gt;scheduledId&lt;/strong&gt;. Specifying both &lt;strong&gt;feed_type&lt;/strong&gt; and &lt;strong&gt;scheduledId&lt;/strong&gt; results in an error. Since schedules are based on feed types, you can specify a schedule (&lt;strong&gt;schedule_id&lt;/strong&gt;) that returns the needed &lt;strong&gt;feed_type&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;If specifying the &lt;strong&gt;feed_type&lt;/strong&gt;, limit which tasks are returned by specifying filters, such as the creation date range or period of time using &lt;strong&gt;look_back_days&lt;/strong&gt;. Also, by specifying the &lt;strong&gt;feed_type&lt;/strong&gt;, both on-demand and scheduled reports are returned.&lt;br /&gt;&lt;br /&gt;If specifying a &lt;strong&gt;scheduledId&lt;/strong&gt;, the schedule template (that the schedule ID is based on) determines which tasks are returned (see &lt;strong&gt;schedule_id&lt;/strong&gt; for additional information). Each &lt;strong&gt;scheduledId&lt;/strong&gt; applies to one &lt;strong&gt;feed_type&lt;/strong&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksTest() throws ApiException {
        String dateRange = null;
        String feedType = null;
        String limit = null;
        String lookBackDays = null;
        String offset = null;
        String scheduleId = null;
        TaskCollection response = api.getTasks(dateRange, feedType, limit, lookBackDays, offset, scheduleId);
        // TODO: test validations
    }

    /**
     * This method associates the specified file with the specified task ID and uploads the input file. After the file has been uploaded, the processing of the file begins. &lt;br /&gt;&lt;br /&gt;Reports often take time to generate and it&#39;s common for this method to return an HTTP status of 202, which indicates the report is being generated. Use the &lt;b&gt; getTask&lt;/b&gt; with the task ID or &lt;b&gt; getTasks&lt;/b&gt; to determine the status of a report. &lt;br /&gt;&lt;br /&gt;The status flow is &lt;code&gt;QUEUED&lt;/code&gt; &amp;gt; &lt;code&gt;IN_PROCESS&lt;/code&gt; &amp;gt; &lt;code&gt;COMPLETED&lt;/code&gt; or &lt;code&gt;COMPLETED_WITH_ERROR&lt;/code&gt;. When the status is &lt;code&gt;COMPLETED&lt;/code&gt; or &lt;code&gt;COMPLETED_WITH_ERROR&lt;/code&gt;, this indicates the file has been processed and the order report can be downloaded. If there are errors, they will be indicated in the report file. &lt;br /&gt;&lt;br /&gt;For details of how this method is used in the upload flow, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/orders/generating-and-retrieving-order-reports.html\&quot;&gt;Working with Order Feeds&lt;/a&gt; in the Selling Integration Guide. &lt;p&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method applies to all Seller Hub feed types and LMS feed types except &lt;code&gt;LMS_ORDER_REPORT&lt;/code&gt; and &lt;code&gt;LMS_ACTIVE_INVENTORY_REPORT&lt;/code&gt;. See &lt;a href&#x3D;\&quot;/api-docs/sell/static/feed/lms-feeds-quick-reference.html#Availabl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;LMS feed types&lt;/a&gt; and &lt;a href&#x3D;\&quot;/api-docs/sell/static/feed/fx-feeds-quick-reference.html#availabl\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Seller Hub feed types&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; You must use a &lt;strong&gt;Content-Type&lt;/strong&gt; header with its value set to \&quot;&lt;strong&gt;multipart/form-data&lt;/strong&gt;\&quot;. See &lt;a href&#x3D;\&quot;/api-docs/sell/feed/resources/task/methods/uploadFile#h2-samples\&quot;&gt;Samples&lt;/a&gt; for information.&lt;/span&gt;&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String taskId = null;
        String creationDate = null;
        String fileName = null;
        String modificationDate = null;
        String name = null;
        Map<String, String> parameters = null;
        String readDate = null;
        Integer size = null;
        String type = null;
        Object response = api.uploadFile(taskId, creationDate, fileName, modificationDate, name, parameters, readDate, size, type);
        // TODO: test validations
    }

}
