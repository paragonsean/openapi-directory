/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SupportedConfiguration from './SupportedConfiguration';

/**
 * The ScheduleTemplateResponse model module.
 * @module model/ScheduleTemplateResponse
 * @version v1.3.1
 */
class ScheduleTemplateResponse {
    /**
     * Constructs a new <code>ScheduleTemplateResponse</code>.
     * The type that defines the fields for a paginated result set of available schedule templates. The response consists of 0 or more sequenced &lt;em&gt; pages&lt;/em&gt; where each page has 0 or more items.
     * @alias module:model/ScheduleTemplateResponse
     */
    constructor() { 
        
        ScheduleTemplateResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduleTemplateResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleTemplateResponse} obj Optional instance to populate.
     * @return {module:model/ScheduleTemplateResponse} The populated <code>ScheduleTemplateResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleTemplateResponse();

            if (data.hasOwnProperty('feedType')) {
                obj['feedType'] = ApiClient.convertToType(data['feedType'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('scheduleTemplateId')) {
                obj['scheduleTemplateId'] = ApiClient.convertToType(data['scheduleTemplateId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('supportedConfigurations')) {
                obj['supportedConfigurations'] = ApiClient.convertToType(data['supportedConfigurations'], [SupportedConfiguration]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleTemplateResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleTemplateResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['feedType'] && !(typeof data['feedType'] === 'string' || data['feedType'] instanceof String)) {
            throw new Error("Expected the field `feedType` to be a primitive type in the JSON string but got " + data['feedType']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['scheduleTemplateId'] && !(typeof data['scheduleTemplateId'] === 'string' || data['scheduleTemplateId'] instanceof String)) {
            throw new Error("Expected the field `scheduleTemplateId` to be a primitive type in the JSON string but got " + data['scheduleTemplateId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['supportedConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedConfigurations'])) {
                throw new Error("Expected the field `supportedConfigurations` to be an array in the JSON data but got " + data['supportedConfigurations']);
            }
            // validate the optional field `supportedConfigurations` (array)
            for (const item of data['supportedConfigurations']) {
                SupportedConfiguration.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The feed type of the schedule template. <p> <span class=\"tablenote\"><strong>Note:</strong> When calling <strong>createSchedule</strong> and <strong>updateSchedule</strong> methods you must match the feed type specified by the schedule template (this feedType).</span></p>
 * @member {String} feedType
 */
ScheduleTemplateResponse.prototype['feedType'] = undefined;

/**
 * This field specifies how often the schedule is generated. If set to <code>HALF_HOUR</code> or <code>ONE_HOUR</code>, you cannot set a <strong>preferredTriggerHour</strong> using <strong>createSchedule</strong> or <strong>updateSchedule</strong>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FrequencyEnum'>eBay API documentation</a>
 * @member {String} frequency
 */
ScheduleTemplateResponse.prototype['frequency'] = undefined;

/**
 * The template name provided by the template.
 * @member {String} name
 */
ScheduleTemplateResponse.prototype['name'] = undefined;

/**
 * The ID of the template. Use this ID to create a schedule based on the properties of this schedule template.
 * @member {String} scheduleTemplateId
 */
ScheduleTemplateResponse.prototype['scheduleTemplateId'] = undefined;

/**
 * The present status of the template. You cannot create or modify a schedule using a template with an <code>INACTIVE</code> status.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>
 * @member {String} status
 */
ScheduleTemplateResponse.prototype['status'] = undefined;

/**
 * An array of the configuration supported by this template.
 * @member {Array.<module:model/SupportedConfiguration>} supportedConfigurations
 */
ScheduleTemplateResponse.prototype['supportedConfigurations'] = undefined;






export default ScheduleTemplateResponse;

