/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InventoryTask from './InventoryTask';

/**
 * The InventoryTaskCollection model module.
 * @module model/InventoryTaskCollection
 * @version v1.3.1
 */
class InventoryTaskCollection {
    /**
     * Constructs a new <code>InventoryTaskCollection</code>.
     * @alias module:model/InventoryTaskCollection
     */
    constructor() { 
        
        InventoryTaskCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryTaskCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryTaskCollection} obj Optional instance to populate.
     * @return {module:model/InventoryTaskCollection} The populated <code>InventoryTaskCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryTaskCollection();

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('prev')) {
                obj['prev'] = ApiClient.convertToType(data['prev'], 'String');
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [InventoryTask]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InventoryTaskCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InventoryTaskCollection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['prev'] && !(typeof data['prev'] === 'string' || data['prev'] instanceof String)) {
            throw new Error("Expected the field `prev` to be a primitive type in the JSON string but got " + data['prev']);
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                InventoryTask.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The path to the call URI that produced the current page of results.
 * @member {String} href
 */
InventoryTaskCollection.prototype['href'] = undefined;

/**
 * The value of the <strong>limit</strong> parameter submitted in the request, which is the maximum number of inventory tasks to return per page, from the result set. A result set is the complete set of tasks returned by the method.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> Though this parameter is not required to be submitted in the request, the parameter defaults to <code>10</code> if omitted. Additionally, if this is the last or only page of the result set, the page may contain fewer tasks than the <strong>limit</strong> value submitted in the request.</span><br /><br />To determine the number of pages in a result set, divide the total value (total number of tasks matching the input criteria) by this limit value, and then round up to the next integer. For example, if the <strong>total</strong> value was <code>120</code> (120 total tasks) and the <strong>limit</strong> value was <code>50</code> (show 50 tasks per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getInventoryTasks</strong> calls to view all tasks matching the input criteria.
 * @member {Number} limit
 */
InventoryTaskCollection.prototype['limit'] = undefined;

/**
 * The path to the call URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.
 * @member {String} next
 */
InventoryTaskCollection.prototype['next'] = undefined;

/**
 * The number of results skipped in the result set before listing the first returned result. This value can be specified in the request with the <strong>offset</strong> query parameter.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>
 * @member {Number} offset
 */
InventoryTaskCollection.prototype['offset'] = undefined;

/**
 * The path to the call URI for the previous page of results. This is returned if there is a previous page of results from the result set.
 * @member {String} prev
 */
InventoryTaskCollection.prototype['prev'] = undefined;

/**
 * An array of the inventory tasks on this page. The tasks are sorted by creation date.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> An empty array is returned if the filter criteria excludes all tasks.</span>
 * @member {Array.<module:model/InventoryTask>} tasks
 */
InventoryTaskCollection.prototype['tasks'] = undefined;

/**
 * The total number of inventory tasks that match the input criteria.
 * @member {Number} total
 */
InventoryTaskCollection.prototype['total'] = undefined;






export default InventoryTaskCollection;

