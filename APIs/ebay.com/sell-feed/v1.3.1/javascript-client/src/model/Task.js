/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadSummary from './UploadSummary';

/**
 * The Task model module.
 * @module model/Task
 * @version v1.3.1
 */
class Task {
    /**
     * Constructs a new <code>Task</code>.
     * The type that defines the fields for the task details.
     * @alias module:model/Task
     */
    constructor() { 
        
        Task.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Task</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Task} obj Optional instance to populate.
     * @return {module:model/Task} The populated <code>Task</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Task();

            if (data.hasOwnProperty('completionDate')) {
                obj['completionDate'] = ApiClient.convertToType(data['completionDate'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('detailHref')) {
                obj['detailHref'] = ApiClient.convertToType(data['detailHref'], 'String');
            }
            if (data.hasOwnProperty('feedType')) {
                obj['feedType'] = ApiClient.convertToType(data['feedType'], 'String');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('uploadSummary')) {
                obj['uploadSummary'] = UploadSummary.constructFromObject(data['uploadSummary']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Task</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Task</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completionDate'] && !(typeof data['completionDate'] === 'string' || data['completionDate'] instanceof String)) {
            throw new Error("Expected the field `completionDate` to be a primitive type in the JSON string but got " + data['completionDate']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['detailHref'] && !(typeof data['detailHref'] === 'string' || data['detailHref'] instanceof String)) {
            throw new Error("Expected the field `detailHref` to be a primitive type in the JSON string but got " + data['detailHref']);
        }
        // ensure the json data is a string
        if (data['feedType'] && !(typeof data['feedType'] === 'string' || data['feedType'] instanceof String)) {
            throw new Error("Expected the field `feedType` to be a primitive type in the JSON string but got " + data['feedType']);
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // validate the optional field `uploadSummary`
        if (data['uploadSummary']) { // data not null
          UploadSummary.validateJSON(data['uploadSummary']);
        }

        return true;
    }


}



/**
 * The timestamp when the task went into the <code>COMPLETED</code> or <code>COMPLETED_WITH_ERROR</code> state. This state means that eBay has compiled the report for the seller based on the sellerâ€™s filter criteria, and the seller can run a <strong>getResultFile</strong> call to download the report.
 * @member {String} completionDate
 */
Task.prototype['completionDate'] = undefined;

/**
 * The date the task was created.
 * @member {String} creationDate
 */
Task.prototype['creationDate'] = undefined;

/**
 * The path to the call URI used to retrieve the task. This field points to the GetOrderTask URI if the task is for <code>LMS_ORDER_REPORT</code> or will be null if this task is for <code>LMS_ORDER_ACK</code>.
 * @member {String} detailHref
 */
Task.prototype['detailHref'] = undefined;

/**
 * The feed type associated with the task.
 * @member {String} feedType
 */
Task.prototype['feedType'] = undefined;

/**
 * The schema version number associated with the task.
 * @member {String} schemaVersion
 */
Task.prototype['schemaVersion'] = undefined;

/**
 * The enumeration value that indicates the state of the task that was submitted in the request. See <strong>FeedStatusEnum</strong> for information. <p>The values <code>COMPLETED </code>and<code> COMPLETED_WITH_ERROR</code> indicate the Order Report file is ready to download.</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>
 * @member {String} status
 */
Task.prototype['status'] = undefined;

/**
 * The ID of the task that was submitted in the request.
 * @member {String} taskId
 */
Task.prototype['taskId'] = undefined;

/**
 * @member {module:model/UploadSummary} uploadSummary
 */
Task.prototype['uploadSummary'] = undefined;






export default Task;

