/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerServiceMetricsFilterCriteria from './CustomerServiceMetricsFilterCriteria';

/**
 * The ServiceMetricsTask model module.
 * @module model/ServiceMetricsTask
 * @version v1.3.1
 */
class ServiceMetricsTask {
    /**
     * Constructs a new <code>ServiceMetricsTask</code>.
     * @alias module:model/ServiceMetricsTask
     */
    constructor() { 
        
        ServiceMetricsTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceMetricsTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceMetricsTask} obj Optional instance to populate.
     * @return {module:model/ServiceMetricsTask} The populated <code>ServiceMetricsTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceMetricsTask();

            if (data.hasOwnProperty('completionDate')) {
                obj['completionDate'] = ApiClient.convertToType(data['completionDate'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('detailHref')) {
                obj['detailHref'] = ApiClient.convertToType(data['detailHref'], 'String');
            }
            if (data.hasOwnProperty('feedType')) {
                obj['feedType'] = ApiClient.convertToType(data['feedType'], 'String');
            }
            if (data.hasOwnProperty('filterCriteria')) {
                obj['filterCriteria'] = CustomerServiceMetricsFilterCriteria.constructFromObject(data['filterCriteria']);
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceMetricsTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceMetricsTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completionDate'] && !(typeof data['completionDate'] === 'string' || data['completionDate'] instanceof String)) {
            throw new Error("Expected the field `completionDate` to be a primitive type in the JSON string but got " + data['completionDate']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['detailHref'] && !(typeof data['detailHref'] === 'string' || data['detailHref'] instanceof String)) {
            throw new Error("Expected the field `detailHref` to be a primitive type in the JSON string but got " + data['detailHref']);
        }
        // ensure the json data is a string
        if (data['feedType'] && !(typeof data['feedType'] === 'string' || data['feedType'] instanceof String)) {
            throw new Error("Expected the field `feedType` to be a primitive type in the JSON string but got " + data['feedType']);
        }
        // validate the optional field `filterCriteria`
        if (data['filterCriteria']) { // data not null
          CustomerServiceMetricsFilterCriteria.validateJSON(data['filterCriteria']);
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }

        return true;
    }


}



/**
 * The timestamp when the customer service metrics task went into the <code>COMPLETED</code> or <code>COMPLETED_WITH_ERROR</code> state. This field is only returned if the status is one of the two completed values. This state means that eBay has compiled the report for the seller based on the sellerâ€™s filter criteria, and the seller can run a <strong>getResultFile</strong> call to download the report.
 * @member {String} completionDate
 */
ServiceMetricsTask.prototype['completionDate'] = undefined;

/**
 * The date the customer service metrics task was created.
 * @member {String} creationDate
 */
ServiceMetricsTask.prototype['creationDate'] = undefined;

/**
 * The relative <strong>getCustomerServiceMetricTask</strong> call URI path to retrieve the corresponding task.
 * @member {String} detailHref
 */
ServiceMetricsTask.prototype['detailHref'] = undefined;

/**
 * The feed type associated with the task.
 * @member {String} feedType
 */
ServiceMetricsTask.prototype['feedType'] = undefined;

/**
 * @member {module:model/CustomerServiceMetricsFilterCriteria} filterCriteria
 */
ServiceMetricsTask.prototype['filterCriteria'] = undefined;

/**
 * The schema version number of the file format. If omitted, the default value is used. <p><b>Default value: </b><code>1.0</code><p>
 * @member {String} schemaVersion
 */
ServiceMetricsTask.prototype['schemaVersion'] = undefined;

/**
 * An enumeration value that indicates the state of the task. See <strong>FeedStatusEnum</strong> for values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>
 * @member {String} status
 */
ServiceMetricsTask.prototype['status'] = undefined;

/**
 * The unique eBay-assigned ID of the task.
 * @member {String} taskId
 */
ServiceMetricsTask.prototype['taskId'] = undefined;






export default ServiceMetricsTask;

