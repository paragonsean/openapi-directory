/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateUserScheduleRequest model module.
 * @module model/CreateUserScheduleRequest
 * @version v1.3.1
 */
class CreateUserScheduleRequest {
    /**
     * Constructs a new <code>CreateUserScheduleRequest</code>.
     * The type that defines the fields for the &lt;strong&gt;createSchedule&lt;/strong&gt; method.
     * @alias module:model/CreateUserScheduleRequest
     */
    constructor() { 
        
        CreateUserScheduleRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateUserScheduleRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUserScheduleRequest} obj Optional instance to populate.
     * @return {module:model/CreateUserScheduleRequest} The populated <code>CreateUserScheduleRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUserScheduleRequest();

            if (data.hasOwnProperty('feedType')) {
                obj['feedType'] = ApiClient.convertToType(data['feedType'], 'String');
            }
            if (data.hasOwnProperty('preferredTriggerDayOfMonth')) {
                obj['preferredTriggerDayOfMonth'] = ApiClient.convertToType(data['preferredTriggerDayOfMonth'], 'Number');
            }
            if (data.hasOwnProperty('preferredTriggerDayOfWeek')) {
                obj['preferredTriggerDayOfWeek'] = ApiClient.convertToType(data['preferredTriggerDayOfWeek'], 'String');
            }
            if (data.hasOwnProperty('preferredTriggerHour')) {
                obj['preferredTriggerHour'] = ApiClient.convertToType(data['preferredTriggerHour'], 'String');
            }
            if (data.hasOwnProperty('scheduleEndDate')) {
                obj['scheduleEndDate'] = ApiClient.convertToType(data['scheduleEndDate'], 'String');
            }
            if (data.hasOwnProperty('scheduleName')) {
                obj['scheduleName'] = ApiClient.convertToType(data['scheduleName'], 'String');
            }
            if (data.hasOwnProperty('scheduleStartDate')) {
                obj['scheduleStartDate'] = ApiClient.convertToType(data['scheduleStartDate'], 'String');
            }
            if (data.hasOwnProperty('scheduleTemplateId')) {
                obj['scheduleTemplateId'] = ApiClient.convertToType(data['scheduleTemplateId'], 'String');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateUserScheduleRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateUserScheduleRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['feedType'] && !(typeof data['feedType'] === 'string' || data['feedType'] instanceof String)) {
            throw new Error("Expected the field `feedType` to be a primitive type in the JSON string but got " + data['feedType']);
        }
        // ensure the json data is a string
        if (data['preferredTriggerDayOfWeek'] && !(typeof data['preferredTriggerDayOfWeek'] === 'string' || data['preferredTriggerDayOfWeek'] instanceof String)) {
            throw new Error("Expected the field `preferredTriggerDayOfWeek` to be a primitive type in the JSON string but got " + data['preferredTriggerDayOfWeek']);
        }
        // ensure the json data is a string
        if (data['preferredTriggerHour'] && !(typeof data['preferredTriggerHour'] === 'string' || data['preferredTriggerHour'] instanceof String)) {
            throw new Error("Expected the field `preferredTriggerHour` to be a primitive type in the JSON string but got " + data['preferredTriggerHour']);
        }
        // ensure the json data is a string
        if (data['scheduleEndDate'] && !(typeof data['scheduleEndDate'] === 'string' || data['scheduleEndDate'] instanceof String)) {
            throw new Error("Expected the field `scheduleEndDate` to be a primitive type in the JSON string but got " + data['scheduleEndDate']);
        }
        // ensure the json data is a string
        if (data['scheduleName'] && !(typeof data['scheduleName'] === 'string' || data['scheduleName'] instanceof String)) {
            throw new Error("Expected the field `scheduleName` to be a primitive type in the JSON string but got " + data['scheduleName']);
        }
        // ensure the json data is a string
        if (data['scheduleStartDate'] && !(typeof data['scheduleStartDate'] === 'string' || data['scheduleStartDate'] instanceof String)) {
            throw new Error("Expected the field `scheduleStartDate` to be a primitive type in the JSON string but got " + data['scheduleStartDate']);
        }
        // ensure the json data is a string
        if (data['scheduleTemplateId'] && !(typeof data['scheduleTemplateId'] === 'string' || data['scheduleTemplateId'] instanceof String)) {
            throw new Error("Expected the field `scheduleTemplateId` to be a primitive type in the JSON string but got " + data['scheduleTemplateId']);
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }

        return true;
    }


}



/**
 * The name of the feed type for the created schedule. Match the <strong>feed_type</strong> from the schedule template associated with this schedule.
 * @member {String} feedType
 */
CreateUserScheduleRequest.prototype['feedType'] = undefined;

/**
 * The preferred day of the month to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for monthly schedules. The last day of the month is used for numbers larger than the actual number of days in the month. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Minimum: </b>1<br /><br /><b>Maximum: </b>31
 * @member {Number} preferredTriggerDayOfMonth
 */
CreateUserScheduleRequest.prototype['preferredTriggerDayOfMonth'] = undefined;

/**
 * The preferred day of the week to trigger the schedule. This field can be used with <strong>preferredTriggerHour</strong> for weekly schedules. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:DayOfWeekEnum'>eBay API documentation</a>
 * @member {String} preferredTriggerDayOfWeek
 */
CreateUserScheduleRequest.prototype['preferredTriggerDayOfWeek'] = undefined;

/**
 * The preferred two-digit hour of the day to trigger the schedule. <br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>hhZ</code><br /><br />For example, the following represents 11:00 am UTC:<code> 11Z</code>
 * @member {String} preferredTriggerHour
 */
CreateUserScheduleRequest.prototype['preferredTriggerHour'] = undefined;

/**
 * The timestamp on which the report generation (subscription) ends. After this date, the schedule status becomes <code>INACTIVE</code>. <br /><br />Use this field, if available, to end the schedule in the future. This value must be later than <strong>scheduleStartDate</strong> (if supplied). This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>yyyy-MM-dd<strong>T</strong>HH<strong>Z</strong></code><br /><br />For example, the following represents UTC October 10, 2021 at 10:00 AM:<br /><code>2021-10-10T10Z</code>
 * @member {String} scheduleEndDate
 */
CreateUserScheduleRequest.prototype['scheduleEndDate'] = undefined;

/**
 * The schedule name assigned by the user for the created schedule.
 * @member {String} scheduleName
 */
CreateUserScheduleRequest.prototype['scheduleName'] = undefined;

/**
 * The timestamp to start generating the report. After this timestamp, the schedule status becomes active until either the <strong>scheduleEndDate</strong> occurs or the <strong>scheduleTemplateId</strong> becomes inactive. <br /><br />Use this field, if available, to start the schedule in the future but before the <strong>scheduleEndDate</strong> (if supplied). This field is available as specified by the template <strong>(scheduleTemplateId)</strong>.  The template can specify this field as optional or required, and optionally provides a default value.<br /><br /><b>Format:</b> UTC <code>yyyy-MM-dd<strong>T</strong>HH<strong>Z</strong></code><br /><br />For example, the following represents a schedule start date of UTC October 01, 2020 at 12:00 PM:<br /><code> 2020-01-01T12Z</code>
 * @member {String} scheduleStartDate
 */
CreateUserScheduleRequest.prototype['scheduleStartDate'] = undefined;

/**
 * The ID of the template associated with the schedule ID. You can get this ID from the documentation or by calling the <strong>getScheduleTemplates</strong> method. This method requires a schedule template ID that is <code>ACTIVE</code>.
 * @member {String} scheduleTemplateId
 */
CreateUserScheduleRequest.prototype['scheduleTemplateId'] = undefined;

/**
 * The schema version of the schedule feedType. This field is required if the <strong>feedType</strong> has a schema version.<br /><br />This field is available as specified by the template (<strong>scheduleTemplateId</strong>). The template can specify this field as optional or required, and optionally provides a default value.
 * @member {String} schemaVersion
 */
CreateUserScheduleRequest.prototype['schemaVersion'] = undefined;






export default CreateUserScheduleRequest;

