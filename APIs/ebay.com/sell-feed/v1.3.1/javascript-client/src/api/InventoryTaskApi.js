/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateInventoryTaskRequest from '../model/CreateInventoryTaskRequest';
import InventoryTask from '../model/InventoryTask';
import InventoryTaskCollection from '../model/InventoryTaskCollection';

/**
* InventoryTask service.
* @module api/InventoryTaskApi
* @version v1.3.1
*/
export default class InventoryTaskApi {

    /**
    * Constructs a new InventoryTaskApi. 
    * @alias module:api/InventoryTaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInventoryTask operation.
     * @callback module:api/InventoryTaskApi~createInventoryTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates an inventory-related download task for a specified feed type with optional filter criteria. When using this method, specify the <strong>feedType</strong>. <br/><br/>This method returns the location response header containing the <strong>getInventoryTask</strong> call URI to retrieve the inventory task you just created. The URL includes the eBay-assigned task ID, which you can use to reference the inventory task.<br/><br/>To retrieve the status of the task, use the <strong>getInventoryTask</strong> method to retrieve a single task ID or the <strong>getInventoryTasks</strong> method to retrieve multiple task IDs.<p> <span class=\"tablenote\"><strong>Note:</strong> The scope depends on the feed type. An error message results when an unsupported scope or feed type is specified.</span></p>Presently, this method supports Active Inventory Report. The <strong>ActiveInventoryReport</strong> returns a report that contains price and quantity information for all of the active listings for a specific seller. A seller can use this information to maintain their inventory on eBay.
     * @param {module:model/CreateInventoryTaskRequest} createInventoryTaskRequest The request payload containing the version, feedType, and optional filterCriteria.
     * @param {module:api/InventoryTaskApi~createInventoryTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createInventoryTask(createInventoryTaskRequest, callback) {
      let postBody = createInventoryTaskRequest;
      // verify the required parameter 'createInventoryTaskRequest' is set
      if (createInventoryTaskRequest === undefined || createInventoryTaskRequest === null) {
        throw new Error("Missing the required parameter 'createInventoryTaskRequest' when calling createInventoryTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inventory_task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryTask operation.
     * @callback module:api/InventoryTaskApi~getInventoryTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the task details and status of the specified inventory-related task. The input is <strong>task_id</strong>.
     * @param {String} taskId The ID of the task. This ID was generated when the task was created by the <strong>createInventoryTask</strong> method
     * @param {module:api/InventoryTaskApi~getInventoryTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryTask}
     */
    getInventoryTask(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getInventoryTask");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InventoryTask;
      return this.apiClient.callApi(
        '/inventory_task/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInventoryTasks operation.
     * @callback module:api/InventoryTaskApi~getInventoryTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryTaskCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method searches for multiple tasks of a specific feed type, and includes date filters and pagination.
     * @param {Object} opts Optional parameters
     * @param {String} [feedType] The feed type associated with the inventory task. Either <strong>feed_type</strong> or <strong>schedule_id</strong> is required. Do not use with the <strong>schedule_id</strong> parameter. Presently, only one feed type is available:<ul><li><code>LMS_ACTIVE_INVENTORY_REPORT</code></li></ul>
     * @param {String} [scheduleId] The ID of the schedule for which to retrieve the latest result file. This ID is generated when the schedule was created by the <strong>createSchedule</strong> method. Schedules apply to downloaded reports (<code>LMS_ACTIVE_INVENTORY_REPORT</code>). Either <strong>schedule_id</strong> or <strong>feed_type</strong> is  required. Do not use with the <strong>feed_type</strong> parameter.
     * @param {String} [lookBackDays] The number of previous days in which to search for tasks. Do not use with the <code>date_range</code> parameter. If both <code>date_range</code> and <code>look_back_days</code> are omitted, this parameter's default value is used.  <br /><br /><b>Default: </b> 7 <br /><br /><b>Range: </b> 1-90 (inclusive)
     * @param {String} [dateRange] Specifies the range of task creation dates used to filter the results. The results are filtered to include only tasks with a creation date that is equal to this date or is within specified range. <p> <span class=\"tablenote\"><strong>Note:</strong> Maximum date range window size is 90 days.</span></p><br /><b>Valid Format (UTC): </b><code>yyyy-MM-ddThh:mm:ss.SSSZ..yyyy-MM-ddThh:mm:ss.SSSZ</code><br /><br />For example: Tasks created on March 31, 2021<br /> <code>2021-03-31T00:00:00.000Z..2021-03-31T00:00:00.000Z</code><br /><br />
     * @param {String} [limit] The maximum number of tasks that can be returned on each page of the paginated response. Use this parameter in conjunction with the <strong>offset</strong> parameter to control the pagination of the output. <p> <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first item in the list has an offset of <code>0</code>.</span></p><p>For example, if <strong>offset</strong> is set to 10 and <strong>limit</strong> is set to 10, the call retrieves tasks 11 thru 20 from the result set.</p><p>If this parameter is omitted, the default value is used. <br /><br /><b>Default: </b> 10 <br /><br /><b>Maximum: </b>500
     * @param {String} [offset] The number of tasks to skip in the result set before returning the first task in the paginated response. <p>Combine <strong>offset</strong> with the <strong>limit</strong> query parameter to control the items returned in the response. For example, if you supply an <strong>offset</strong> of <code>0</code> and a <strong>limit</strong> of <code>10</code>, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If <strong>offset</strong> is <code>10</code> and <strong>limit</strong> is <code>20</code>, the first page of the response contains items 11-30 from the complete result set. If this query parameter is not set, the default value is used and the first page of records is returned. <br /><br /><b>Default: </b>0
     * @param {module:api/InventoryTaskApi~getInventoryTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryTaskCollection}
     */
    getInventoryTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'feed_type': opts['feedType'],
        'schedule_id': opts['scheduleId'],
        'look_back_days': opts['lookBackDays'],
        'date_range': opts['dateRange'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InventoryTaskCollection;
      return this.apiClient.callApi(
        '/inventory_task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
