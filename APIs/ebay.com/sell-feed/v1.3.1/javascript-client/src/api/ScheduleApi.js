/**
 * Feed API
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUserScheduleRequest from '../model/CreateUserScheduleRequest';
import ScheduleTemplateCollection from '../model/ScheduleTemplateCollection';
import ScheduleTemplateResponse from '../model/ScheduleTemplateResponse';
import UpdateUserScheduleRequest from '../model/UpdateUserScheduleRequest';
import UserScheduleCollection from '../model/UserScheduleCollection';
import UserScheduleResponse from '../model/UserScheduleResponse';

/**
* Schedule service.
* @module api/ScheduleApi
* @version v1.3.1
*/
export default class ScheduleApi {

    /**
    * Constructs a new ScheduleApi. 
    * @alias module:api/ScheduleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSchedule operation.
     * @callback module:api/ScheduleApi~createScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a schedule, which is a subscription to the specified schedule template. A schedule periodically generates a report for the <strong>feedType</strong> specified by the template. Specify the same <strong>feedType</strong> as the <strong>feedType</strong> of the associated schedule template. When creating the schedule, if available from the template, you can specify a preferred trigger hour, day of the week, or day of the month. These and other fields are conditionally available as specified by the template.<p> <span class=\"tablenote\"><strong>Note:</strong> Make sure to include all fields required by the schedule template (<strong>scheduleTemplateId</strong>). Call the <strong>getScheduleTemplate</strong> method (or the <strong>getScheduleTemplates</strong> method), to find out which fields are required or optional. If a field is optional and a default value is provided by the template, the default value will be used if omitted from the payload.</span></p>A successful call returns the location response header containing the <strong>getSchedule</strong> call URI to retrieve the schedule you just created. The URL includes the eBay-assigned schedule ID, which you can use to reference the schedule task. <br /><br />To retrieve the details of the create schedule task, use the <strong>getSchedule</strong> method for a single schedule ID or the <strong>getSchedules</strong> method to retrieve all schedule details for the specified <strong>feed_type</strong>. The number of schedules for each feedType is limited. Error code 160031 is returned when you have reached this maximum.<p> <span class=\"tablenote\"><strong>Note:</strong> Except for schedules with a HALF-HOUR frequency, all schedules will ideally run at the start of each hour ('00' minutes). Actual start time may vary time may vary due to load and other factors.</span></p>
     * @param {module:model/CreateUserScheduleRequest} createUserScheduleRequest In the request payload: <strong>feedType</strong> and <strong>scheduleTemplateId</strong> are required; <strong>scheduleName</strong> is optional; <strong>preferredTriggerHour</strong>, <strong>preferredTriggerDayOfWeek</strong>, <strong>preferredTriggerDayOfMonth</strong>, <strong>scheduleStartDate</strong>, <strong>scheduleEndDate</strong>, and <strong>schemaVersion</strong> are conditional.
     * @param {module:api/ScheduleApi~createScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createSchedule(createUserScheduleRequest, callback) {
      let postBody = createUserScheduleRequest;
      // verify the required parameter 'createUserScheduleRequest' is set
      if (createUserScheduleRequest === undefined || createUserScheduleRequest === null) {
        throw new Error("Missing the required parameter 'createUserScheduleRequest' when calling createSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSchedule operation.
     * @callback module:api/ScheduleApi~deleteScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes an existing schedule. Specify the schedule to delete using the <strong>schedule_id</strong> path parameter.
     * @param {String} scheduleId The <strong>schedule_id</strong> of the schedule to delete. This ID was generated when the task was created. If you do not know the schedule_id, use the <strong>getSchedules</strong> method to return all schedules based on a specified feed_type and find the schedule_id of the schedule to delete.
     * @param {module:api/ScheduleApi~deleteScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSchedule(scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling deleteSchedule");
      }

      let pathParams = {
        'schedule_id': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/{schedule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestResultFile operation.
     * @callback module:api/ScheduleApi~getLatestResultFileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method downloads the latest result file generated by the schedule. The response of this call is a compressed or uncompressed CSV, XML, or JSON file, with the applicable file extension (for example: csv.gz). Specify the <strong>schedule_id</strong> path parameter to download its last generated file.
     * @param {String} scheduleId The ID of the schedule for which to retrieve the latest result file. This ID is generated when the schedule was created by the <strong>createSchedule</strong> method.
     * @param {module:api/ScheduleApi~getLatestResultFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getLatestResultFile(scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling getLatestResultFile");
      }

      let pathParams = {
        'schedule_id': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/schedule/{schedule_id}/download_result_file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchedule operation.
     * @callback module:api/ScheduleApi~getScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves schedule details and status of the specified schedule. Specify the schedule to retrieve using the <strong>schedule_id</strong>. Use the <strong>getSchedules</strong> method to find a schedule if you do not know the <strong>schedule_id</strong>.
     * @param {String} scheduleId The ID of the schedule for which to retrieve the details. This ID is generated when the schedule was created by the <strong>createSchedule</strong> method.
     * @param {module:api/ScheduleApi~getScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserScheduleResponse}
     */
    getSchedule(scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling getSchedule");
      }

      let pathParams = {
        'schedule_id': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserScheduleResponse;
      return this.apiClient.callApi(
        '/schedule/{schedule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScheduleTemplate operation.
     * @callback module:api/ScheduleApi~getScheduleTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves the details of the specified template. Specify the template to retrieve using the <strong>schedule_template_id</strong> path parameter. Use the <strong>getScheduleTemplates</strong> method to find a schedule template if you do not know the <strong>schedule_template_id</strong>.
     * @param {String} scheduleTemplateId The ID of the template to retrieve. If you do not know the <strong>schedule_template_id</strong>, refer to the documentation or use the <strong>getScheduleTemplates</strong> method to find the available schedule templates.
     * @param {module:api/ScheduleApi~getScheduleTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleTemplateResponse}
     */
    getScheduleTemplate(scheduleTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'scheduleTemplateId' is set
      if (scheduleTemplateId === undefined || scheduleTemplateId === null) {
        throw new Error("Missing the required parameter 'scheduleTemplateId' when calling getScheduleTemplate");
      }

      let pathParams = {
        'schedule_template_id': scheduleTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleTemplateResponse;
      return this.apiClient.callApi(
        '/schedule_template/{schedule_template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScheduleTemplates operation.
     * @callback module:api/ScheduleApi~getScheduleTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleTemplateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an array containing the details and status of all schedule templates based on the specified <strong>feed_type</strong>. Use this method to find a schedule template if you do not know the <strong>schedule_template_id</strong>.
     * @param {String} feedType The feed type of the schedule templates to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] The maximum number of schedule templates that can be returned on each page of the paginated response. Use this parameter in conjunction with the <strong>offset</strong> parameter to control the pagination of the output. <p> <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first item in the list has an offset of <code>0</code>.</span></p><p>For example, if <strong>offset</strong> is set to 10 and <strong>limit</strong> is set to 10, the call retrieves schedule templates 11 thru 20 from the result set.</p><p>If this parameter is omitted, the default value is used. <br /><br /><b>Default: </b> 10 <br /><br /><b>Maximum: </b>500
     * @param {String} [offset] The number of schedule templates to skip in the result set before returning the first template in the paginated response. <p>Combine <strong>offset</strong> with the <strong>limit</strong> query parameter to control the items returned in the response. For example, if you supply an <strong>offset</strong> of <code>0</code> and a <strong>limit</strong> of <code>10</code>, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If <strong>offset</strong> is <code>10</code> and <strong>limit</strong> is <code>20</code>, the first page of the response contains items 11-30 from the complete result set. If this query parameter is not set, the default value is used and the first page of records is returned.<br /><br /><b>Default: </b>0
     * @param {module:api/ScheduleApi~getScheduleTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleTemplateCollection}
     */
    getScheduleTemplates(feedType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedType' is set
      if (feedType === undefined || feedType === null) {
        throw new Error("Missing the required parameter 'feedType' when calling getScheduleTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'feed_type': feedType,
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleTemplateCollection;
      return this.apiClient.callApi(
        '/schedule_template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchedules operation.
     * @callback module:api/ScheduleApi~getSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserScheduleCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an array containing the details and status of all schedules based on the specified <strong>feed_type</strong>. Use this method to find a schedule if you do not know the <strong>schedule_id</strong>.
     * @param {String} feedType The <strong>feedType</strong> associated with the schedule.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] The maximum number of schedules that can be returned on each page of the paginated response. Use this parameter in conjunction with the <strong>offset</strong> parameter to control the pagination of the output. <p> <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first item in the list has an offset of <code>0</code>.</span></p><p>For example, if <strong>offset</strong> is set to 10 and <strong>limit</strong> is set to 10, the call retrieves schedules 11 thru 20 from the result set.</p><p>If this parameter is omitted, the default value is used. <br /><br /><b>Default: </b> 10 <br /><br /><b>Maximum: </b>500
     * @param {String} [offset] The number of schedules to skip in the result set before returning the first schedule in the paginated response. <p>Combine <strong>offset</strong> with the <strong>limit</strong> query parameter to control the items returned in the response. For example, if you supply an <strong>offset</strong> of <code>0</code> and a <strong>limit</strong> of <code>10</code>, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If <strong>offset</strong> is <code>10</code> and <strong>limit</strong> is <code>20</code>, the first page of the response contains items 11-30 from the complete result set. If this query parameter is not set, the default value is used and the first page of records is returned.<br /><br /><b>Default: </b>0
     * @param {module:api/ScheduleApi~getSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserScheduleCollection}
     */
    getSchedules(feedType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedType' is set
      if (feedType === undefined || feedType === null) {
        throw new Error("Missing the required parameter 'feedType' when calling getSchedules");
      }

      let pathParams = {
      };
      let queryParams = {
        'feed_type': feedType,
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserScheduleCollection;
      return this.apiClient.callApi(
        '/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchedule operation.
     * @callback module:api/ScheduleApi~updateScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing schedule. Specify the schedule to update using the <strong>schedule_id</strong> path parameter. If the schedule template has changed after the schedule was created or updated, the input will be validated using the changed template.<p> <span class=\"tablenote\"><strong>Note:</strong> Make sure to include all fields required by the schedule template (<strong>scheduleTemplateId</strong>). Call the <strong>getScheduleTemplate</strong> method (or the <strong>getScheduleTemplates</strong> method), to find out which fields are required or optional. If you do not know the <strong>scheduleTemplateId</strong>, call the <strong>getSchedule</strong> method to find out.</span></p>
     * @param {String} scheduleId The ID of the schedule to update. This ID is generated when the schedule was created by the <strong>createSchedule</strong> method.
     * @param {module:model/UpdateUserScheduleRequest} updateUserScheduleRequest In the request payload: <strong>scheduleName</strong> is optional; <strong>preferredTriggerHour</strong>, <strong>preferredTriggerDayOfWeek</strong>, <strong>preferredTriggerDayOfMonth</strong>, <strong>scheduleStartDate</strong>, <strong>scheduleEndDate</strong>, and <strong>schemaVersion</strong> are conditional.
     * @param {module:api/ScheduleApi~updateScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSchedule(scheduleId, updateUserScheduleRequest, callback) {
      let postBody = updateUserScheduleRequest;
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling updateSchedule");
      }
      // verify the required parameter 'updateUserScheduleRequest' is set
      if (updateUserScheduleRequest === undefined || updateUserScheduleRequest === null) {
        throw new Error("Missing the required parameter 'updateUserScheduleRequest' when calling updateSchedule");
      }

      let pathParams = {
        'schedule_id': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schedule/{schedule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
