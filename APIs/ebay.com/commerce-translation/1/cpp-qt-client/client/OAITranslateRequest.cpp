/**
 * Translation API
 * This API allows 3rd party developers to translate item title, description, search query.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranslateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranslateRequest::OAITranslateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranslateRequest::OAITranslateRequest() {
    this->initializeModel();
}

OAITranslateRequest::~OAITranslateRequest() {}

void OAITranslateRequest::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_translation_context_isSet = false;
    m_translation_context_isValid = false;
}

void OAITranslateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranslateRequest::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_translation_context_isValid = ::OpenAPI::fromJsonValue(m_translation_context, json[QString("translationContext")]);
    m_translation_context_isSet = !json[QString("translationContext")].isNull() && m_translation_context_isValid;
}

QString OAITranslateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranslateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_text.size() > 0) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_translation_context_isSet) {
        obj.insert(QString("translationContext"), ::OpenAPI::toJsonValue(m_translation_context));
    }
    return obj;
}

QString OAITranslateRequest::getFrom() const {
    return m_from;
}
void OAITranslateRequest::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITranslateRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAITranslateRequest::is_from_Valid() const{
    return m_from_isValid;
}

QList<QString> OAITranslateRequest::getText() const {
    return m_text;
}
void OAITranslateRequest::setText(const QList<QString> &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITranslateRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAITranslateRequest::is_text_Valid() const{
    return m_text_isValid;
}

QString OAITranslateRequest::getTo() const {
    return m_to;
}
void OAITranslateRequest::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITranslateRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAITranslateRequest::is_to_Valid() const{
    return m_to_isValid;
}

QString OAITranslateRequest::getTranslationContext() const {
    return m_translation_context;
}
void OAITranslateRequest::setTranslationContext(const QString &translation_context) {
    m_translation_context = translation_context;
    m_translation_context_isSet = true;
}

bool OAITranslateRequest::is_translation_context_Set() const{
    return m_translation_context_isSet;
}

bool OAITranslateRequest::is_translation_context_Valid() const{
    return m_translation_context_isValid;
}

bool OAITranslateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_context_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranslateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
