/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AspectConstraint model module.
 * @module model/AspectConstraint
 * @version v1.0.0
 */
class AspectConstraint {
    /**
     * Constructs a new <code>AspectConstraint</code>.
     * This type contains information about the formatting, occurrence, and support of an aspect.
     * @alias module:model/AspectConstraint
     */
    constructor() { 
        
        AspectConstraint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AspectConstraint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AspectConstraint} obj Optional instance to populate.
     * @return {module:model/AspectConstraint} The populated <code>AspectConstraint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AspectConstraint();

            if (data.hasOwnProperty('aspectApplicableTo')) {
                obj['aspectApplicableTo'] = ApiClient.convertToType(data['aspectApplicableTo'], ['String']);
            }
            if (data.hasOwnProperty('aspectDataType')) {
                obj['aspectDataType'] = ApiClient.convertToType(data['aspectDataType'], 'String');
            }
            if (data.hasOwnProperty('aspectEnabledForVariations')) {
                obj['aspectEnabledForVariations'] = ApiClient.convertToType(data['aspectEnabledForVariations'], 'Boolean');
            }
            if (data.hasOwnProperty('aspectFormat')) {
                obj['aspectFormat'] = ApiClient.convertToType(data['aspectFormat'], 'String');
            }
            if (data.hasOwnProperty('aspectMaxLength')) {
                obj['aspectMaxLength'] = ApiClient.convertToType(data['aspectMaxLength'], 'Number');
            }
            if (data.hasOwnProperty('aspectMode')) {
                obj['aspectMode'] = ApiClient.convertToType(data['aspectMode'], 'String');
            }
            if (data.hasOwnProperty('aspectRequired')) {
                obj['aspectRequired'] = ApiClient.convertToType(data['aspectRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('aspectUsage')) {
                obj['aspectUsage'] = ApiClient.convertToType(data['aspectUsage'], 'String');
            }
            if (data.hasOwnProperty('expectedRequiredByDate')) {
                obj['expectedRequiredByDate'] = ApiClient.convertToType(data['expectedRequiredByDate'], 'String');
            }
            if (data.hasOwnProperty('itemToAspectCardinality')) {
                obj['itemToAspectCardinality'] = ApiClient.convertToType(data['itemToAspectCardinality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AspectConstraint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AspectConstraint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['aspectApplicableTo'])) {
            throw new Error("Expected the field `aspectApplicableTo` to be an array in the JSON data but got " + data['aspectApplicableTo']);
        }
        // ensure the json data is a string
        if (data['aspectDataType'] && !(typeof data['aspectDataType'] === 'string' || data['aspectDataType'] instanceof String)) {
            throw new Error("Expected the field `aspectDataType` to be a primitive type in the JSON string but got " + data['aspectDataType']);
        }
        // ensure the json data is a string
        if (data['aspectFormat'] && !(typeof data['aspectFormat'] === 'string' || data['aspectFormat'] instanceof String)) {
            throw new Error("Expected the field `aspectFormat` to be a primitive type in the JSON string but got " + data['aspectFormat']);
        }
        // ensure the json data is a string
        if (data['aspectMode'] && !(typeof data['aspectMode'] === 'string' || data['aspectMode'] instanceof String)) {
            throw new Error("Expected the field `aspectMode` to be a primitive type in the JSON string but got " + data['aspectMode']);
        }
        // ensure the json data is a string
        if (data['aspectUsage'] && !(typeof data['aspectUsage'] === 'string' || data['aspectUsage'] instanceof String)) {
            throw new Error("Expected the field `aspectUsage` to be a primitive type in the JSON string but got " + data['aspectUsage']);
        }
        // ensure the json data is a string
        if (data['expectedRequiredByDate'] && !(typeof data['expectedRequiredByDate'] === 'string' || data['expectedRequiredByDate'] instanceof String)) {
            throw new Error("Expected the field `expectedRequiredByDate` to be a primitive type in the JSON string but got " + data['expectedRequiredByDate']);
        }
        // ensure the json data is a string
        if (data['itemToAspectCardinality'] && !(typeof data['itemToAspectCardinality'] === 'string' || data['itemToAspectCardinality'] instanceof String)) {
            throw new Error("Expected the field `itemToAspectCardinality` to be a primitive type in the JSON string but got " + data['itemToAspectCardinality']);
        }

        return true;
    }


}



/**
 * This value indicate if the aspect identified by the aspects.localizedAspectName field is a product aspect (relevant to catalog products in the category) or an item/instance aspect, which is an aspect whose value will vary based on a particular instance of the product.
 * @member {Array.<String>} aspectApplicableTo
 */
AspectConstraint.prototype['aspectApplicableTo'] = undefined;

/**
 * The data type of this aspect. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectDataTypeEnum'>eBay API documentation</a>
 * @member {String} aspectDataType
 */
AspectConstraint.prototype['aspectDataType'] = undefined;

/**
 * A value of true indicates that this aspect can be used to help identify item variations.
 * @member {Boolean} aspectEnabledForVariations
 */
AspectConstraint.prototype['aspectEnabledForVariations'] = undefined;

/**
 * Returned only if the value of aspectDataType identifies a data type that requires specific formatting. Currently, this field provides formatting hints as follows: DATE: YYYY, YYYYMM, YYYYMMDD NUMBER: int32, double
 * @member {String} aspectFormat
 */
AspectConstraint.prototype['aspectFormat'] = undefined;

/**
 * The maximum length of the item/instance aspect's value. The seller must make sure not to exceed this length when specifying the instance aspect's value for a product. This field is only returned for instance aspects.
 * @member {Number} aspectMaxLength
 */
AspectConstraint.prototype['aspectMaxLength'] = undefined;

/**
 * The manner in which values of this aspect must be specified by the seller (as free text or by selecting from available options). For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectModeEnum'>eBay API documentation</a>
 * @member {String} aspectMode
 */
AspectConstraint.prototype['aspectMode'] = undefined;

/**
 * A value of true indicates that this aspect is required when offering items in the specified category.
 * @member {Boolean} aspectRequired
 */
AspectConstraint.prototype['aspectRequired'] = undefined;

/**
 * The enumeration value returned in this field will indicate if the corresponding aspect is recommended or optional. Note: This field is always returned, even for hard-mandated/required aspects (where aspectRequired: true). The value returned for required aspects will be RECOMMENDED, but they are actually required and a seller will be blocked from listing or revising an item without these aspects. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:AspectUsageEnum'>eBay API documentation</a>
 * @member {String} aspectUsage
 */
AspectConstraint.prototype['aspectUsage'] = undefined;

/**
 * The expected date after which the aspect will be required. Note: The value returned in this field specifies only an approximate date, which may not reflect the actual date after which the aspect is required.
 * @member {String} expectedRequiredByDate
 */
AspectConstraint.prototype['expectedRequiredByDate'] = undefined;

/**
 * Indicates whether this aspect can accept single or multiple values for items in the specified category. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ItemToAspectCardinalityEnum'>eBay API documentation</a>
 * @member {String} itemToAspectCardinality
 */
AspectConstraint.prototype['itemToAspectCardinality'] = undefined;






export default AspectConstraint;

