/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValueConstraint model module.
 * @module model/ValueConstraint
 * @version v1.0.0
 */
class ValueConstraint {
    /**
     * Constructs a new <code>ValueConstraint</code>.
     * This type contains a list of the dependencies that identify when a particular value is available for a given aspect of a given category. Each dependency specifies the values of another aspect of the same category (the &lt;i&gt;control&lt;/i&gt; aspect), for which the given value of the given aspect can also be selected by the seller. This container consists of constraint information for the corresponding product aspect value.
     * @alias module:model/ValueConstraint
     */
    constructor() { 
        
        ValueConstraint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueConstraint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueConstraint} obj Optional instance to populate.
     * @return {module:model/ValueConstraint} The populated <code>ValueConstraint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueConstraint();

            if (data.hasOwnProperty('applicableForLocalizedAspectName')) {
                obj['applicableForLocalizedAspectName'] = ApiClient.convertToType(data['applicableForLocalizedAspectName'], 'String');
            }
            if (data.hasOwnProperty('applicableForLocalizedAspectValues')) {
                obj['applicableForLocalizedAspectValues'] = ApiClient.convertToType(data['applicableForLocalizedAspectValues'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueConstraint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueConstraint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicableForLocalizedAspectName'] && !(typeof data['applicableForLocalizedAspectName'] === 'string' || data['applicableForLocalizedAspectName'] instanceof String)) {
            throw new Error("Expected the field `applicableForLocalizedAspectName` to be a primitive type in the JSON string but got " + data['applicableForLocalizedAspectName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applicableForLocalizedAspectValues'])) {
            throw new Error("Expected the field `applicableForLocalizedAspectValues` to be an array in the JSON data but got " + data['applicableForLocalizedAspectValues']);
        }

        return true;
    }


}



/**
 * The name of the control aspect on which the current aspect value depends.
 * @member {String} applicableForLocalizedAspectName
 */
ValueConstraint.prototype['applicableForLocalizedAspectName'] = undefined;

/**
 * Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.
 * @member {Array.<String>} applicableForLocalizedAspectValues
 */
ValueConstraint.prototype['applicableForLocalizedAspectValues'] = undefined;






export default ValueConstraint;

