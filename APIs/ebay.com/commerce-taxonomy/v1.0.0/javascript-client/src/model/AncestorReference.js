/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AncestorReference model module.
 * @module model/AncestorReference
 * @version v1.0.0
 */
class AncestorReference {
    /**
     * Constructs a new <code>AncestorReference</code>.
     * This type contains information about one of the ancestors of a suggested category. An ordered list of these references describes the path from the suggested category to the root of the category tree it belongs to.
     * @alias module:model/AncestorReference
     */
    constructor() { 
        
        AncestorReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AncestorReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AncestorReference} obj Optional instance to populate.
     * @return {module:model/AncestorReference} The populated <code>AncestorReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AncestorReference();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('categoryName')) {
                obj['categoryName'] = ApiClient.convertToType(data['categoryName'], 'String');
            }
            if (data.hasOwnProperty('categorySubtreeNodeHref')) {
                obj['categorySubtreeNodeHref'] = ApiClient.convertToType(data['categorySubtreeNodeHref'], 'String');
            }
            if (data.hasOwnProperty('categoryTreeNodeLevel')) {
                obj['categoryTreeNodeLevel'] = ApiClient.convertToType(data['categoryTreeNodeLevel'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AncestorReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AncestorReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['categoryName'] && !(typeof data['categoryName'] === 'string' || data['categoryName'] instanceof String)) {
            throw new Error("Expected the field `categoryName` to be a primitive type in the JSON string but got " + data['categoryName']);
        }
        // ensure the json data is a string
        if (data['categorySubtreeNodeHref'] && !(typeof data['categorySubtreeNodeHref'] === 'string' || data['categorySubtreeNodeHref'] instanceof String)) {
            throw new Error("Expected the field `categorySubtreeNodeHref` to be a primitive type in the JSON string but got " + data['categorySubtreeNodeHref']);
        }

        return true;
    }


}



/**
 * The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.
 * @member {String} categoryId
 */
AncestorReference.prototype['categoryId'] = undefined;

/**
 * The name of the ancestor category identified by categoryId.
 * @member {String} categoryName
 */
AncestorReference.prototype['categoryName'] = undefined;

/**
 * The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.
 * @member {String} categorySubtreeNodeHref
 */
AncestorReference.prototype['categorySubtreeNodeHref'] = undefined;

/**
 * The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
 * @member {Number} categoryTreeNodeLevel
 */
AncestorReference.prototype['categoryTreeNodeLevel'] = undefined;






export default AncestorReference;

