/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValueConstraint from './ValueConstraint';

/**
 * The AspectValue model module.
 * @module model/AspectValue
 * @version v1.0.0
 */
class AspectValue {
    /**
     * Constructs a new <code>AspectValue</code>.
     * This type contains a valid value for an aspect, along with any constraints on the occurrence of that value.
     * @alias module:model/AspectValue
     */
    constructor() { 
        
        AspectValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AspectValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AspectValue} obj Optional instance to populate.
     * @return {module:model/AspectValue} The populated <code>AspectValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AspectValue();

            if (data.hasOwnProperty('localizedValue')) {
                obj['localizedValue'] = ApiClient.convertToType(data['localizedValue'], 'String');
            }
            if (data.hasOwnProperty('valueConstraints')) {
                obj['valueConstraints'] = ApiClient.convertToType(data['valueConstraints'], [ValueConstraint]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AspectValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AspectValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['localizedValue'] && !(typeof data['localizedValue'] === 'string' || data['localizedValue'] instanceof String)) {
            throw new Error("Expected the field `localizedValue` to be a primitive type in the JSON string but got " + data['localizedValue']);
        }
        if (data['valueConstraints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueConstraints'])) {
                throw new Error("Expected the field `valueConstraints` to be an array in the JSON data but got " + data['valueConstraints']);
            }
            // validate the optional field `valueConstraints` (array)
            for (const item of data['valueConstraints']) {
                ValueConstraint.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The localized value of this aspect. Note: This value is always localized for the specified marketplace.
 * @member {String} localizedValue
 */
AspectValue.prototype['localizedValue'] = undefined;

/**
 * Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
 * @member {Array.<module:model/ValueConstraint>} valueConstraints
 */
AspectValue.prototype['valueConstraints'] = undefined;






export default AspectValue;

