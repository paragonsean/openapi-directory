/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';

/**
 * The CategoryTreeNode model module.
 * @module model/CategoryTreeNode
 * @version v1.0.0
 */
class CategoryTreeNode {
    /**
     * Constructs a new <code>CategoryTreeNode</code>.
     * This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified &lt;b&gt;Category&lt;/b&gt;, down to the leaf nodes. It is a recursive structure.
     * @alias module:model/CategoryTreeNode
     */
    constructor() { 
        
        CategoryTreeNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CategoryTreeNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryTreeNode} obj Optional instance to populate.
     * @return {module:model/CategoryTreeNode} The populated <code>CategoryTreeNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryTreeNode();

            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('categoryTreeNodeLevel')) {
                obj['categoryTreeNodeLevel'] = ApiClient.convertToType(data['categoryTreeNodeLevel'], 'Number');
            }
            if (data.hasOwnProperty('childCategoryTreeNodes')) {
                obj['childCategoryTreeNodes'] = ApiClient.convertToType(data['childCategoryTreeNodes'], [CategoryTreeNode]);
            }
            if (data.hasOwnProperty('leafCategoryTreeNode')) {
                obj['leafCategoryTreeNode'] = ApiClient.convertToType(data['leafCategoryTreeNode'], 'Boolean');
            }
            if (data.hasOwnProperty('parentCategoryTreeNodeHref')) {
                obj['parentCategoryTreeNodeHref'] = ApiClient.convertToType(data['parentCategoryTreeNodeHref'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryTreeNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryTreeNode</code>.
     */
    static validateJSON(data) {
        // validate the optional field `category`
        if (data['category']) { // data not null
          Category.validateJSON(data['category']);
        }
        if (data['childCategoryTreeNodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childCategoryTreeNodes'])) {
                throw new Error("Expected the field `childCategoryTreeNodes` to be an array in the JSON data but got " + data['childCategoryTreeNodes']);
            }
            // validate the optional field `childCategoryTreeNodes` (array)
            for (const item of data['childCategoryTreeNodes']) {
                CategoryTreeNode.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentCategoryTreeNodeHref'] && !(typeof data['parentCategoryTreeNodeHref'] === 'string' || data['parentCategoryTreeNodeHref'] instanceof String)) {
            throw new Error("Expected the field `parentCategoryTreeNodeHref` to be a primitive type in the JSON string but got " + data['parentCategoryTreeNodeHref']);
        }

        return true;
    }


}



/**
 * @member {module:model/Category} category
 */
CategoryTreeNode.prototype['category'] = undefined;

/**
 * The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
 * @member {Number} categoryTreeNodeLevel
 */
CategoryTreeNode.prototype['categoryTreeNodeLevel'] = undefined;

/**
 * An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).
 * @member {Array.<module:model/CategoryTreeNode>} childCategoryTreeNodes
 */
CategoryTreeNode.prototype['childCategoryTreeNodes'] = undefined;

/**
 * A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.
 * @member {Boolean} leafCategoryTreeNode
 */
CategoryTreeNode.prototype['leafCategoryTreeNode'] = undefined;

/**
 * The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.
 * @member {String} parentCategoryTreeNodeHref
 */
CategoryTreeNode.prototype['parentCategoryTreeNodeHref'] = undefined;






export default CategoryTreeNode;

