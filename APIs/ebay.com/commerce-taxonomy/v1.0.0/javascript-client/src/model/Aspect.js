/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AspectConstraint from './AspectConstraint';
import AspectValue from './AspectValue';
import RelevanceIndicator from './RelevanceIndicator';

/**
 * The Aspect model module.
 * @module model/Aspect
 * @version v1.0.0
 */
class Aspect {
    /**
     * Constructs a new <code>Aspect</code>.
     * This type contains information about an item attribute (for example, color) that is appropriate or necessary for accurately describing items in a particular leaf category. Sellers are required or encouraged to provide one or more values of this aspect when offering an item in that category on eBay.
     * @alias module:model/Aspect
     */
    constructor() { 
        
        Aspect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aspect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aspect} obj Optional instance to populate.
     * @return {module:model/Aspect} The populated <code>Aspect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aspect();

            if (data.hasOwnProperty('aspectConstraint')) {
                obj['aspectConstraint'] = AspectConstraint.constructFromObject(data['aspectConstraint']);
            }
            if (data.hasOwnProperty('aspectValues')) {
                obj['aspectValues'] = ApiClient.convertToType(data['aspectValues'], [AspectValue]);
            }
            if (data.hasOwnProperty('localizedAspectName')) {
                obj['localizedAspectName'] = ApiClient.convertToType(data['localizedAspectName'], 'String');
            }
            if (data.hasOwnProperty('relevanceIndicator')) {
                obj['relevanceIndicator'] = RelevanceIndicator.constructFromObject(data['relevanceIndicator']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aspect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aspect</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aspectConstraint`
        if (data['aspectConstraint']) { // data not null
          AspectConstraint.validateJSON(data['aspectConstraint']);
        }
        if (data['aspectValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aspectValues'])) {
                throw new Error("Expected the field `aspectValues` to be an array in the JSON data but got " + data['aspectValues']);
            }
            // validate the optional field `aspectValues` (array)
            for (const item of data['aspectValues']) {
                AspectValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['localizedAspectName'] && !(typeof data['localizedAspectName'] === 'string' || data['localizedAspectName'] instanceof String)) {
            throw new Error("Expected the field `localizedAspectName` to be a primitive type in the JSON string but got " + data['localizedAspectName']);
        }
        // validate the optional field `relevanceIndicator`
        if (data['relevanceIndicator']) { // data not null
          RelevanceIndicator.validateJSON(data['relevanceIndicator']);
        }

        return true;
    }


}



/**
 * @member {module:model/AspectConstraint} aspectConstraint
 */
Aspect.prototype['aspectConstraint'] = undefined;

/**
 * A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.
 * @member {Array.<module:model/AspectValue>} aspectValues
 */
Aspect.prototype['aspectValues'] = undefined;

/**
 * The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.
 * @member {String} localizedAspectName
 */
Aspect.prototype['localizedAspectName'] = undefined;

/**
 * @member {module:model/RelevanceIndicator} relevanceIndicator
 */
Aspect.prototype['relevanceIndicator'] = undefined;






export default Aspect;

