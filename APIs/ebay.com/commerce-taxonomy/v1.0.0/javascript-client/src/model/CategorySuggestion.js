/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AncestorReference from './AncestorReference';
import Category from './Category';

/**
 * The CategorySuggestion model module.
 * @module model/CategorySuggestion
 * @version v1.0.0
 */
class CategorySuggestion {
    /**
     * Constructs a new <code>CategorySuggestion</code>.
     * This type contains information about a suggested category tree leaf node that corresponds to keywords provided in the request. It includes details about each of the category&#39;s ancestor nodes extending up to the root of the category tree.
     * @alias module:model/CategorySuggestion
     */
    constructor() { 
        
        CategorySuggestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CategorySuggestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategorySuggestion} obj Optional instance to populate.
     * @return {module:model/CategorySuggestion} The populated <code>CategorySuggestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategorySuggestion();

            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('categoryTreeNodeAncestors')) {
                obj['categoryTreeNodeAncestors'] = ApiClient.convertToType(data['categoryTreeNodeAncestors'], [AncestorReference]);
            }
            if (data.hasOwnProperty('categoryTreeNodeLevel')) {
                obj['categoryTreeNodeLevel'] = ApiClient.convertToType(data['categoryTreeNodeLevel'], 'Number');
            }
            if (data.hasOwnProperty('relevancy')) {
                obj['relevancy'] = ApiClient.convertToType(data['relevancy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategorySuggestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategorySuggestion</code>.
     */
    static validateJSON(data) {
        // validate the optional field `category`
        if (data['category']) { // data not null
          Category.validateJSON(data['category']);
        }
        if (data['categoryTreeNodeAncestors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categoryTreeNodeAncestors'])) {
                throw new Error("Expected the field `categoryTreeNodeAncestors` to be an array in the JSON data but got " + data['categoryTreeNodeAncestors']);
            }
            // validate the optional field `categoryTreeNodeAncestors` (array)
            for (const item of data['categoryTreeNodeAncestors']) {
                AncestorReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['relevancy'] && !(typeof data['relevancy'] === 'string' || data['relevancy'] instanceof String)) {
            throw new Error("Expected the field `relevancy` to be a primitive type in the JSON string but got " + data['relevancy']);
        }

        return true;
    }


}



/**
 * @member {module:model/Category} category
 */
CategorySuggestion.prototype['category'] = undefined;

/**
 * An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category's ancestry as a sequence of parent nodes, from the current node's immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.
 * @member {Array.<module:model/AncestorReference>} categoryTreeNodeAncestors
 */
CategorySuggestion.prototype['categoryTreeNodeAncestors'] = undefined;

/**
 * The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
 * @member {Number} categoryTreeNodeLevel
 */
CategorySuggestion.prototype['categoryTreeNodeLevel'] = undefined;

/**
 * This field is reserved for internal or future use.
 * @member {String} relevancy
 */
CategorySuggestion.prototype['relevancy'] = undefined;






export default CategorySuggestion;

