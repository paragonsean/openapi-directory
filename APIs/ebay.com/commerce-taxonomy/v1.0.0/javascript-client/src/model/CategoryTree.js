/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryTreeNode from './CategoryTreeNode';

/**
 * The CategoryTree model module.
 * @module model/CategoryTree
 * @version v1.0.0
 */
class CategoryTree {
    /**
     * Constructs a new <code>CategoryTree</code>.
     * This type contains information about all nodes of a specified eBay category tree.
     * @alias module:model/CategoryTree
     */
    constructor() { 
        
        CategoryTree.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CategoryTree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryTree} obj Optional instance to populate.
     * @return {module:model/CategoryTree} The populated <code>CategoryTree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryTree();

            if (data.hasOwnProperty('applicableMarketplaceIds')) {
                obj['applicableMarketplaceIds'] = ApiClient.convertToType(data['applicableMarketplaceIds'], ['String']);
            }
            if (data.hasOwnProperty('categoryTreeId')) {
                obj['categoryTreeId'] = ApiClient.convertToType(data['categoryTreeId'], 'String');
            }
            if (data.hasOwnProperty('categoryTreeVersion')) {
                obj['categoryTreeVersion'] = ApiClient.convertToType(data['categoryTreeVersion'], 'String');
            }
            if (data.hasOwnProperty('rootCategoryNode')) {
                obj['rootCategoryNode'] = CategoryTreeNode.constructFromObject(data['rootCategoryNode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryTree</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryTree</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['applicableMarketplaceIds'])) {
            throw new Error("Expected the field `applicableMarketplaceIds` to be an array in the JSON data but got " + data['applicableMarketplaceIds']);
        }
        // ensure the json data is a string
        if (data['categoryTreeId'] && !(typeof data['categoryTreeId'] === 'string' || data['categoryTreeId'] instanceof String)) {
            throw new Error("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got " + data['categoryTreeId']);
        }
        // ensure the json data is a string
        if (data['categoryTreeVersion'] && !(typeof data['categoryTreeVersion'] === 'string' || data['categoryTreeVersion'] instanceof String)) {
            throw new Error("Expected the field `categoryTreeVersion` to be a primitive type in the JSON string but got " + data['categoryTreeVersion']);
        }
        // validate the optional field `rootCategoryNode`
        if (data['rootCategoryNode']) { // data not null
          CategoryTreeNode.validateJSON(data['rootCategoryNode']);
        }

        return true;
    }


}



/**
 * A list of one or more identifiers of the eBay marketplaces that use this category tree.
 * @member {Array.<String>} applicableMarketplaceIds
 */
CategoryTree.prototype['applicableMarketplaceIds'] = undefined;

/**
 * The unique identifier of this eBay category tree.
 * @member {String} categoryTreeId
 */
CategoryTree.prototype['categoryTreeId'] = undefined;

/**
 * The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
 * @member {String} categoryTreeVersion
 */
CategoryTree.prototype['categoryTreeVersion'] = undefined;

/**
 * @member {module:model/CategoryTreeNode} rootCategoryNode
 */
CategoryTree.prototype['rootCategoryNode'] = undefined;






export default CategoryTree;

