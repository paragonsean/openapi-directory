/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TaxonomyApi);
  }
}(this, function(expect, TaxonomyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TaxonomyApi.Aspect();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Aspect', function() {
    it('should create an instance of Aspect', function() {
      // uncomment below and update the code to test Aspect
      //var instance = new TaxonomyApi.Aspect();
      //expect(instance).to.be.a(TaxonomyApi.Aspect);
    });

    it('should have the property aspectConstraint (base name: "aspectConstraint")', function() {
      // uncomment below and update the code to test the property aspectConstraint
      //var instance = new TaxonomyApi.Aspect();
      //expect(instance).to.be();
    });

    it('should have the property aspectValues (base name: "aspectValues")', function() {
      // uncomment below and update the code to test the property aspectValues
      //var instance = new TaxonomyApi.Aspect();
      //expect(instance).to.be();
    });

    it('should have the property localizedAspectName (base name: "localizedAspectName")', function() {
      // uncomment below and update the code to test the property localizedAspectName
      //var instance = new TaxonomyApi.Aspect();
      //expect(instance).to.be();
    });

    it('should have the property relevanceIndicator (base name: "relevanceIndicator")', function() {
      // uncomment below and update the code to test the property relevanceIndicator
      //var instance = new TaxonomyApi.Aspect();
      //expect(instance).to.be();
    });

  });

}));
