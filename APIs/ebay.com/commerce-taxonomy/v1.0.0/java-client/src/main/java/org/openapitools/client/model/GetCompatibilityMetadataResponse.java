/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompatibilityProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the base response of the &lt;strong&gt;getCompatibilityProperties&lt;/strong&gt; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCompatibilityMetadataResponse {
  public static final String SERIALIZED_NAME_COMPATIBILITY_PROPERTIES = "compatibilityProperties";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_PROPERTIES)
  private List<CompatibilityProperty> compatibilityProperties = new ArrayList<>();

  public GetCompatibilityMetadataResponse() {
  }

  public GetCompatibilityMetadataResponse compatibilityProperties(List<CompatibilityProperty> compatibilityProperties) {
    this.compatibilityProperties = compatibilityProperties;
    return this;
  }

  public GetCompatibilityMetadataResponse addCompatibilityPropertiesItem(CompatibilityProperty compatibilityPropertiesItem) {
    if (this.compatibilityProperties == null) {
      this.compatibilityProperties = new ArrayList<>();
    }
    this.compatibilityProperties.add(compatibilityPropertiesItem);
    return this;
  }

  /**
   * This container consists of an array of all compatible vehicle properties applicable to the specified eBay marketplace and eBay category ID.
   * @return compatibilityProperties
   */
  @javax.annotation.Nullable
  public List<CompatibilityProperty> getCompatibilityProperties() {
    return compatibilityProperties;
  }

  public void setCompatibilityProperties(List<CompatibilityProperty> compatibilityProperties) {
    this.compatibilityProperties = compatibilityProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCompatibilityMetadataResponse getCompatibilityMetadataResponse = (GetCompatibilityMetadataResponse) o;
    return Objects.equals(this.compatibilityProperties, getCompatibilityMetadataResponse.compatibilityProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibilityProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCompatibilityMetadataResponse {\n");
    sb.append("    compatibilityProperties: ").append(toIndentedString(compatibilityProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compatibilityProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCompatibilityMetadataResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCompatibilityMetadataResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCompatibilityMetadataResponse is not found in the empty JSON string", GetCompatibilityMetadataResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCompatibilityMetadataResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCompatibilityMetadataResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("compatibilityProperties") != null && !jsonObj.get("compatibilityProperties").isJsonNull()) {
        JsonArray jsonArraycompatibilityProperties = jsonObj.getAsJsonArray("compatibilityProperties");
        if (jsonArraycompatibilityProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compatibilityProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compatibilityProperties` to be an array in the JSON string but got `%s`", jsonObj.get("compatibilityProperties").toString()));
          }

          // validate the optional field `compatibilityProperties` (array)
          for (int i = 0; i < jsonArraycompatibilityProperties.size(); i++) {
            CompatibilityProperty.validateJsonElement(jsonArraycompatibilityProperties.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCompatibilityMetadataResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCompatibilityMetadataResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCompatibilityMetadataResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCompatibilityMetadataResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCompatibilityMetadataResponse>() {
           @Override
           public void write(JsonWriter out, GetCompatibilityMetadataResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCompatibilityMetadataResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCompatibilityMetadataResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCompatibilityMetadataResponse
   * @throws IOException if the JSON string is invalid with respect to GetCompatibilityMetadataResponse
   */
  public static GetCompatibilityMetadataResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCompatibilityMetadataResponse.class);
  }

  /**
   * Convert an instance of GetCompatibilityMetadataResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

