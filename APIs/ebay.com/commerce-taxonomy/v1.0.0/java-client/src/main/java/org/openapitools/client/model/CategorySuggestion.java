/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AncestorReference;
import org.openapitools.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about a suggested category tree leaf node that corresponds to keywords provided in the request. It includes details about each of the category&#39;s ancestor nodes extending up to the root of the category tree.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategorySuggestion {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_NODE_ANCESTORS = "categoryTreeNodeAncestors";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_NODE_ANCESTORS)
  private List<AncestorReference> categoryTreeNodeAncestors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_TREE_NODE_LEVEL = "categoryTreeNodeLevel";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_NODE_LEVEL)
  private Integer categoryTreeNodeLevel;

  public static final String SERIALIZED_NAME_RELEVANCY = "relevancy";
  @SerializedName(SERIALIZED_NAME_RELEVANCY)
  private String relevancy;

  public CategorySuggestion() {
  }

  public CategorySuggestion category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public CategorySuggestion categoryTreeNodeAncestors(List<AncestorReference> categoryTreeNodeAncestors) {
    this.categoryTreeNodeAncestors = categoryTreeNodeAncestors;
    return this;
  }

  public CategorySuggestion addCategoryTreeNodeAncestorsItem(AncestorReference categoryTreeNodeAncestorsItem) {
    if (this.categoryTreeNodeAncestors == null) {
      this.categoryTreeNodeAncestors = new ArrayList<>();
    }
    this.categoryTreeNodeAncestors.add(categoryTreeNodeAncestorsItem);
    return this;
  }

  /**
   * An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category&#39;s ancestry as a sequence of parent nodes, from the current node&#39;s immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.
   * @return categoryTreeNodeAncestors
   */
  @javax.annotation.Nullable
  public List<AncestorReference> getCategoryTreeNodeAncestors() {
    return categoryTreeNodeAncestors;
  }

  public void setCategoryTreeNodeAncestors(List<AncestorReference> categoryTreeNodeAncestors) {
    this.categoryTreeNodeAncestors = categoryTreeNodeAncestors;
  }


  public CategorySuggestion categoryTreeNodeLevel(Integer categoryTreeNodeLevel) {
    this.categoryTreeNodeLevel = categoryTreeNodeLevel;
    return this;
  }

  /**
   * The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
   * @return categoryTreeNodeLevel
   */
  @javax.annotation.Nullable
  public Integer getCategoryTreeNodeLevel() {
    return categoryTreeNodeLevel;
  }

  public void setCategoryTreeNodeLevel(Integer categoryTreeNodeLevel) {
    this.categoryTreeNodeLevel = categoryTreeNodeLevel;
  }


  public CategorySuggestion relevancy(String relevancy) {
    this.relevancy = relevancy;
    return this;
  }

  /**
   * This field is reserved for internal or future use.
   * @return relevancy
   */
  @javax.annotation.Nullable
  public String getRelevancy() {
    return relevancy;
  }

  public void setRelevancy(String relevancy) {
    this.relevancy = relevancy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategorySuggestion categorySuggestion = (CategorySuggestion) o;
    return Objects.equals(this.category, categorySuggestion.category) &&
        Objects.equals(this.categoryTreeNodeAncestors, categorySuggestion.categoryTreeNodeAncestors) &&
        Objects.equals(this.categoryTreeNodeLevel, categorySuggestion.categoryTreeNodeLevel) &&
        Objects.equals(this.relevancy, categorySuggestion.relevancy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, categoryTreeNodeAncestors, categoryTreeNodeLevel, relevancy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategorySuggestion {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryTreeNodeAncestors: ").append(toIndentedString(categoryTreeNodeAncestors)).append("\n");
    sb.append("    categoryTreeNodeLevel: ").append(toIndentedString(categoryTreeNodeLevel)).append("\n");
    sb.append("    relevancy: ").append(toIndentedString(relevancy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("categoryTreeNodeAncestors");
    openapiFields.add("categoryTreeNodeLevel");
    openapiFields.add("relevancy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategorySuggestion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategorySuggestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategorySuggestion is not found in the empty JSON string", CategorySuggestion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategorySuggestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategorySuggestion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      if (jsonObj.get("categoryTreeNodeAncestors") != null && !jsonObj.get("categoryTreeNodeAncestors").isJsonNull()) {
        JsonArray jsonArraycategoryTreeNodeAncestors = jsonObj.getAsJsonArray("categoryTreeNodeAncestors");
        if (jsonArraycategoryTreeNodeAncestors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryTreeNodeAncestors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryTreeNodeAncestors` to be an array in the JSON string but got `%s`", jsonObj.get("categoryTreeNodeAncestors").toString()));
          }

          // validate the optional field `categoryTreeNodeAncestors` (array)
          for (int i = 0; i < jsonArraycategoryTreeNodeAncestors.size(); i++) {
            AncestorReference.validateJsonElement(jsonArraycategoryTreeNodeAncestors.get(i));
          };
        }
      }
      if ((jsonObj.get("relevancy") != null && !jsonObj.get("relevancy").isJsonNull()) && !jsonObj.get("relevancy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relevancy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relevancy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategorySuggestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategorySuggestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategorySuggestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategorySuggestion.class));

       return (TypeAdapter<T>) new TypeAdapter<CategorySuggestion>() {
           @Override
           public void write(JsonWriter out, CategorySuggestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategorySuggestion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategorySuggestion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategorySuggestion
   * @throws IOException if the JSON string is invalid with respect to CategorySuggestion
   */
  public static CategorySuggestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategorySuggestion.class);
  }

  /**
   * Convert an instance of CategorySuggestion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

