/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about one of the ancestors of a suggested category. An ordered list of these references describes the path from the suggested category to the root of the category tree it belongs to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AncestorReference {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "categoryName";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_CATEGORY_SUBTREE_NODE_HREF = "categorySubtreeNodeHref";
  @SerializedName(SERIALIZED_NAME_CATEGORY_SUBTREE_NODE_HREF)
  private String categorySubtreeNodeHref;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_NODE_LEVEL = "categoryTreeNodeLevel";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_NODE_LEVEL)
  private Integer categoryTreeNodeLevel;

  public AncestorReference() {
  }

  public AncestorReference categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public AncestorReference categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  /**
   * The name of the ancestor category identified by categoryId.
   * @return categoryName
   */
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  public AncestorReference categorySubtreeNodeHref(String categorySubtreeNodeHref) {
    this.categorySubtreeNodeHref = categorySubtreeNodeHref;
    return this;
  }

  /**
   * The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.
   * @return categorySubtreeNodeHref
   */
  @javax.annotation.Nullable
  public String getCategorySubtreeNodeHref() {
    return categorySubtreeNodeHref;
  }

  public void setCategorySubtreeNodeHref(String categorySubtreeNodeHref) {
    this.categorySubtreeNodeHref = categorySubtreeNodeHref;
  }


  public AncestorReference categoryTreeNodeLevel(Integer categoryTreeNodeLevel) {
    this.categoryTreeNodeLevel = categoryTreeNodeLevel;
    return this;
  }

  /**
   * The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
   * @return categoryTreeNodeLevel
   */
  @javax.annotation.Nullable
  public Integer getCategoryTreeNodeLevel() {
    return categoryTreeNodeLevel;
  }

  public void setCategoryTreeNodeLevel(Integer categoryTreeNodeLevel) {
    this.categoryTreeNodeLevel = categoryTreeNodeLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AncestorReference ancestorReference = (AncestorReference) o;
    return Objects.equals(this.categoryId, ancestorReference.categoryId) &&
        Objects.equals(this.categoryName, ancestorReference.categoryName) &&
        Objects.equals(this.categorySubtreeNodeHref, ancestorReference.categorySubtreeNodeHref) &&
        Objects.equals(this.categoryTreeNodeLevel, ancestorReference.categoryTreeNodeLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, categoryName, categorySubtreeNodeHref, categoryTreeNodeLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AncestorReference {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    categorySubtreeNodeHref: ").append(toIndentedString(categorySubtreeNodeHref)).append("\n");
    sb.append("    categoryTreeNodeLevel: ").append(toIndentedString(categoryTreeNodeLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("categoryName");
    openapiFields.add("categorySubtreeNodeHref");
    openapiFields.add("categoryTreeNodeLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AncestorReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AncestorReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AncestorReference is not found in the empty JSON string", AncestorReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AncestorReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AncestorReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryName") != null && !jsonObj.get("categoryName").isJsonNull()) && !jsonObj.get("categoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryName").toString()));
      }
      if ((jsonObj.get("categorySubtreeNodeHref") != null && !jsonObj.get("categorySubtreeNodeHref").isJsonNull()) && !jsonObj.get("categorySubtreeNodeHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categorySubtreeNodeHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categorySubtreeNodeHref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AncestorReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AncestorReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AncestorReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AncestorReference.class));

       return (TypeAdapter<T>) new TypeAdapter<AncestorReference>() {
           @Override
           public void write(JsonWriter out, AncestorReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AncestorReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AncestorReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AncestorReference
   * @throws IOException if the JSON string is invalid with respect to AncestorReference
   */
  public static AncestorReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AncestorReference.class);
  }

  /**
   * Convert an instance of AncestorReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

