/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ValueConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains a valid value for an aspect, along with any constraints on the occurrence of that value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AspectValue {
  public static final String SERIALIZED_NAME_LOCALIZED_VALUE = "localizedValue";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_VALUE)
  private String localizedValue;

  public static final String SERIALIZED_NAME_VALUE_CONSTRAINTS = "valueConstraints";
  @SerializedName(SERIALIZED_NAME_VALUE_CONSTRAINTS)
  private List<ValueConstraint> valueConstraints = new ArrayList<>();

  public AspectValue() {
  }

  public AspectValue localizedValue(String localizedValue) {
    this.localizedValue = localizedValue;
    return this;
  }

  /**
   * The localized value of this aspect. Note: This value is always localized for the specified marketplace.
   * @return localizedValue
   */
  @javax.annotation.Nullable
  public String getLocalizedValue() {
    return localizedValue;
  }

  public void setLocalizedValue(String localizedValue) {
    this.localizedValue = localizedValue;
  }


  public AspectValue valueConstraints(List<ValueConstraint> valueConstraints) {
    this.valueConstraints = valueConstraints;
    return this;
  }

  public AspectValue addValueConstraintsItem(ValueConstraint valueConstraintsItem) {
    if (this.valueConstraints == null) {
      this.valueConstraints = new ArrayList<>();
    }
    this.valueConstraints.add(valueConstraintsItem);
    return this;
  }

  /**
   * Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
   * @return valueConstraints
   */
  @javax.annotation.Nullable
  public List<ValueConstraint> getValueConstraints() {
    return valueConstraints;
  }

  public void setValueConstraints(List<ValueConstraint> valueConstraints) {
    this.valueConstraints = valueConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AspectValue aspectValue = (AspectValue) o;
    return Objects.equals(this.localizedValue, aspectValue.localizedValue) &&
        Objects.equals(this.valueConstraints, aspectValue.valueConstraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localizedValue, valueConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AspectValue {\n");
    sb.append("    localizedValue: ").append(toIndentedString(localizedValue)).append("\n");
    sb.append("    valueConstraints: ").append(toIndentedString(valueConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localizedValue");
    openapiFields.add("valueConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AspectValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AspectValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AspectValue is not found in the empty JSON string", AspectValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AspectValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AspectValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("localizedValue") != null && !jsonObj.get("localizedValue").isJsonNull()) && !jsonObj.get("localizedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedValue").toString()));
      }
      if (jsonObj.get("valueConstraints") != null && !jsonObj.get("valueConstraints").isJsonNull()) {
        JsonArray jsonArrayvalueConstraints = jsonObj.getAsJsonArray("valueConstraints");
        if (jsonArrayvalueConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("valueConstraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `valueConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("valueConstraints").toString()));
          }

          // validate the optional field `valueConstraints` (array)
          for (int i = 0; i < jsonArrayvalueConstraints.size(); i++) {
            ValueConstraint.validateJsonElement(jsonArrayvalueConstraints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AspectValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AspectValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AspectValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AspectValue.class));

       return (TypeAdapter<T>) new TypeAdapter<AspectValue>() {
           @Override
           public void write(JsonWriter out, AspectValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AspectValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AspectValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AspectValue
   * @throws IOException if the JSON string is invalid with respect to AspectValue
   */
  public static AspectValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AspectValue.class);
  }

  /**
   * Convert an instance of AspectValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

