/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains a list of the dependencies that identify when a particular value is available for a given aspect of a given category. Each dependency specifies the values of another aspect of the same category (the &lt;i&gt;control&lt;/i&gt; aspect), for which the given value of the given aspect can also be selected by the seller. This container consists of constraint information for the corresponding product aspect value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValueConstraint {
  public static final String SERIALIZED_NAME_APPLICABLE_FOR_LOCALIZED_ASPECT_NAME = "applicableForLocalizedAspectName";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_FOR_LOCALIZED_ASPECT_NAME)
  private String applicableForLocalizedAspectName;

  public static final String SERIALIZED_NAME_APPLICABLE_FOR_LOCALIZED_ASPECT_VALUES = "applicableForLocalizedAspectValues";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_FOR_LOCALIZED_ASPECT_VALUES)
  private List<String> applicableForLocalizedAspectValues = new ArrayList<>();

  public ValueConstraint() {
  }

  public ValueConstraint applicableForLocalizedAspectName(String applicableForLocalizedAspectName) {
    this.applicableForLocalizedAspectName = applicableForLocalizedAspectName;
    return this;
  }

  /**
   * The name of the control aspect on which the current aspect value depends.
   * @return applicableForLocalizedAspectName
   */
  @javax.annotation.Nullable
  public String getApplicableForLocalizedAspectName() {
    return applicableForLocalizedAspectName;
  }

  public void setApplicableForLocalizedAspectName(String applicableForLocalizedAspectName) {
    this.applicableForLocalizedAspectName = applicableForLocalizedAspectName;
  }


  public ValueConstraint applicableForLocalizedAspectValues(List<String> applicableForLocalizedAspectValues) {
    this.applicableForLocalizedAspectValues = applicableForLocalizedAspectValues;
    return this;
  }

  public ValueConstraint addApplicableForLocalizedAspectValuesItem(String applicableForLocalizedAspectValuesItem) {
    if (this.applicableForLocalizedAspectValues == null) {
      this.applicableForLocalizedAspectValues = new ArrayList<>();
    }
    this.applicableForLocalizedAspectValues.add(applicableForLocalizedAspectValuesItem);
    return this;
  }

  /**
   * Contains a list of the values of the control aspect on which this aspect&#39;s value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.
   * @return applicableForLocalizedAspectValues
   */
  @javax.annotation.Nullable
  public List<String> getApplicableForLocalizedAspectValues() {
    return applicableForLocalizedAspectValues;
  }

  public void setApplicableForLocalizedAspectValues(List<String> applicableForLocalizedAspectValues) {
    this.applicableForLocalizedAspectValues = applicableForLocalizedAspectValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueConstraint valueConstraint = (ValueConstraint) o;
    return Objects.equals(this.applicableForLocalizedAspectName, valueConstraint.applicableForLocalizedAspectName) &&
        Objects.equals(this.applicableForLocalizedAspectValues, valueConstraint.applicableForLocalizedAspectValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableForLocalizedAspectName, applicableForLocalizedAspectValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueConstraint {\n");
    sb.append("    applicableForLocalizedAspectName: ").append(toIndentedString(applicableForLocalizedAspectName)).append("\n");
    sb.append("    applicableForLocalizedAspectValues: ").append(toIndentedString(applicableForLocalizedAspectValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableForLocalizedAspectName");
    openapiFields.add("applicableForLocalizedAspectValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValueConstraint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValueConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValueConstraint is not found in the empty JSON string", ValueConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValueConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValueConstraint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicableForLocalizedAspectName") != null && !jsonObj.get("applicableForLocalizedAspectName").isJsonNull()) && !jsonObj.get("applicableForLocalizedAspectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableForLocalizedAspectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicableForLocalizedAspectName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableForLocalizedAspectValues") != null && !jsonObj.get("applicableForLocalizedAspectValues").isJsonNull() && !jsonObj.get("applicableForLocalizedAspectValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableForLocalizedAspectValues` to be an array in the JSON string but got `%s`", jsonObj.get("applicableForLocalizedAspectValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValueConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValueConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValueConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValueConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<ValueConstraint>() {
           @Override
           public void write(JsonWriter out, ValueConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValueConstraint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValueConstraint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValueConstraint
   * @throws IOException if the JSON string is invalid with respect to ValueConstraint
   */
  public static ValueConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValueConstraint.class);
  }

  /**
   * Convert an instance of ValueConstraint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

