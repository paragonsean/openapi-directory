/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified &lt;b&gt;Category&lt;/b&gt;, down to the leaf nodes. It is a recursive structure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategoryTreeNode {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_NODE_LEVEL = "categoryTreeNodeLevel";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_NODE_LEVEL)
  private Integer categoryTreeNodeLevel;

  public static final String SERIALIZED_NAME_CHILD_CATEGORY_TREE_NODES = "childCategoryTreeNodes";
  @SerializedName(SERIALIZED_NAME_CHILD_CATEGORY_TREE_NODES)
  private List<CategoryTreeNode> childCategoryTreeNodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAF_CATEGORY_TREE_NODE = "leafCategoryTreeNode";
  @SerializedName(SERIALIZED_NAME_LEAF_CATEGORY_TREE_NODE)
  private Boolean leafCategoryTreeNode;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY_TREE_NODE_HREF = "parentCategoryTreeNodeHref";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY_TREE_NODE_HREF)
  private String parentCategoryTreeNodeHref;

  public CategoryTreeNode() {
  }

  public CategoryTreeNode category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public CategoryTreeNode categoryTreeNodeLevel(Integer categoryTreeNodeLevel) {
    this.categoryTreeNodeLevel = categoryTreeNodeLevel;
    return this;
  }

  /**
   * The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
   * @return categoryTreeNodeLevel
   */
  @javax.annotation.Nullable
  public Integer getCategoryTreeNodeLevel() {
    return categoryTreeNodeLevel;
  }

  public void setCategoryTreeNodeLevel(Integer categoryTreeNodeLevel) {
    this.categoryTreeNodeLevel = categoryTreeNodeLevel;
  }


  public CategoryTreeNode childCategoryTreeNodes(List<CategoryTreeNode> childCategoryTreeNodes) {
    this.childCategoryTreeNodes = childCategoryTreeNodes;
    return this;
  }

  public CategoryTreeNode addChildCategoryTreeNodesItem(CategoryTreeNode childCategoryTreeNodesItem) {
    if (this.childCategoryTreeNodes == null) {
      this.childCategoryTreeNodes = new ArrayList<>();
    }
    this.childCategoryTreeNodes.add(childCategoryTreeNodesItem);
    return this;
  }

  /**
   * An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).
   * @return childCategoryTreeNodes
   */
  @javax.annotation.Nullable
  public List<CategoryTreeNode> getChildCategoryTreeNodes() {
    return childCategoryTreeNodes;
  }

  public void setChildCategoryTreeNodes(List<CategoryTreeNode> childCategoryTreeNodes) {
    this.childCategoryTreeNodes = childCategoryTreeNodes;
  }


  public CategoryTreeNode leafCategoryTreeNode(Boolean leafCategoryTreeNode) {
    this.leafCategoryTreeNode = leafCategoryTreeNode;
    return this;
  }

  /**
   * A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.
   * @return leafCategoryTreeNode
   */
  @javax.annotation.Nullable
  public Boolean getLeafCategoryTreeNode() {
    return leafCategoryTreeNode;
  }

  public void setLeafCategoryTreeNode(Boolean leafCategoryTreeNode) {
    this.leafCategoryTreeNode = leafCategoryTreeNode;
  }


  public CategoryTreeNode parentCategoryTreeNodeHref(String parentCategoryTreeNodeHref) {
    this.parentCategoryTreeNodeHref = parentCategoryTreeNodeHref;
    return this;
  }

  /**
   * The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.
   * @return parentCategoryTreeNodeHref
   */
  @javax.annotation.Nullable
  public String getParentCategoryTreeNodeHref() {
    return parentCategoryTreeNodeHref;
  }

  public void setParentCategoryTreeNodeHref(String parentCategoryTreeNodeHref) {
    this.parentCategoryTreeNodeHref = parentCategoryTreeNodeHref;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryTreeNode categoryTreeNode = (CategoryTreeNode) o;
    return Objects.equals(this.category, categoryTreeNode.category) &&
        Objects.equals(this.categoryTreeNodeLevel, categoryTreeNode.categoryTreeNodeLevel) &&
        Objects.equals(this.childCategoryTreeNodes, categoryTreeNode.childCategoryTreeNodes) &&
        Objects.equals(this.leafCategoryTreeNode, categoryTreeNode.leafCategoryTreeNode) &&
        Objects.equals(this.parentCategoryTreeNodeHref, categoryTreeNode.parentCategoryTreeNodeHref);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, categoryTreeNodeLevel, childCategoryTreeNodes, leafCategoryTreeNode, parentCategoryTreeNodeHref);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryTreeNode {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryTreeNodeLevel: ").append(toIndentedString(categoryTreeNodeLevel)).append("\n");
    sb.append("    childCategoryTreeNodes: ").append(toIndentedString(childCategoryTreeNodes)).append("\n");
    sb.append("    leafCategoryTreeNode: ").append(toIndentedString(leafCategoryTreeNode)).append("\n");
    sb.append("    parentCategoryTreeNodeHref: ").append(toIndentedString(parentCategoryTreeNodeHref)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("categoryTreeNodeLevel");
    openapiFields.add("childCategoryTreeNodes");
    openapiFields.add("leafCategoryTreeNode");
    openapiFields.add("parentCategoryTreeNodeHref");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryTreeNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryTreeNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryTreeNode is not found in the empty JSON string", CategoryTreeNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryTreeNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryTreeNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      if (jsonObj.get("childCategoryTreeNodes") != null && !jsonObj.get("childCategoryTreeNodes").isJsonNull()) {
        JsonArray jsonArraychildCategoryTreeNodes = jsonObj.getAsJsonArray("childCategoryTreeNodes");
        if (jsonArraychildCategoryTreeNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childCategoryTreeNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childCategoryTreeNodes` to be an array in the JSON string but got `%s`", jsonObj.get("childCategoryTreeNodes").toString()));
          }

          // validate the optional field `childCategoryTreeNodes` (array)
          for (int i = 0; i < jsonArraychildCategoryTreeNodes.size(); i++) {
            CategoryTreeNode.validateJsonElement(jsonArraychildCategoryTreeNodes.get(i));
          };
        }
      }
      if ((jsonObj.get("parentCategoryTreeNodeHref") != null && !jsonObj.get("parentCategoryTreeNodeHref").isJsonNull()) && !jsonObj.get("parentCategoryTreeNodeHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCategoryTreeNodeHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentCategoryTreeNodeHref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryTreeNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryTreeNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryTreeNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryTreeNode.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryTreeNode>() {
           @Override
           public void write(JsonWriter out, CategoryTreeNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryTreeNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryTreeNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryTreeNode
   * @throws IOException if the JSON string is invalid with respect to CategoryTreeNode
   */
  public static CategoryTreeNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryTreeNode.class);
  }

  /**
   * Convert an instance of CategoryTreeNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

