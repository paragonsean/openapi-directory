/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AspectConstraint;
import org.openapitools.client.model.AspectValue;
import org.openapitools.client.model.RelevanceIndicator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about an item attribute (for example, color) that is appropriate or necessary for accurately describing items in a particular leaf category. Sellers are required or encouraged to provide one or more values of this aspect when offering an item in that category on eBay.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Aspect {
  public static final String SERIALIZED_NAME_ASPECT_CONSTRAINT = "aspectConstraint";
  @SerializedName(SERIALIZED_NAME_ASPECT_CONSTRAINT)
  private AspectConstraint aspectConstraint;

  public static final String SERIALIZED_NAME_ASPECT_VALUES = "aspectValues";
  @SerializedName(SERIALIZED_NAME_ASPECT_VALUES)
  private List<AspectValue> aspectValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALIZED_ASPECT_NAME = "localizedAspectName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ASPECT_NAME)
  private String localizedAspectName;

  public static final String SERIALIZED_NAME_RELEVANCE_INDICATOR = "relevanceIndicator";
  @SerializedName(SERIALIZED_NAME_RELEVANCE_INDICATOR)
  private RelevanceIndicator relevanceIndicator;

  public Aspect() {
  }

  public Aspect aspectConstraint(AspectConstraint aspectConstraint) {
    this.aspectConstraint = aspectConstraint;
    return this;
  }

  /**
   * Get aspectConstraint
   * @return aspectConstraint
   */
  @javax.annotation.Nullable
  public AspectConstraint getAspectConstraint() {
    return aspectConstraint;
  }

  public void setAspectConstraint(AspectConstraint aspectConstraint) {
    this.aspectConstraint = aspectConstraint;
  }


  public Aspect aspectValues(List<AspectValue> aspectValues) {
    this.aspectValues = aspectValues;
    return this;
  }

  public Aspect addAspectValuesItem(AspectValue aspectValuesItem) {
    if (this.aspectValues == null) {
      this.aspectValues = new ArrayList<>();
    }
    this.aspectValues.add(aspectValuesItem);
    return this;
  }

  /**
   * A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.
   * @return aspectValues
   */
  @javax.annotation.Nullable
  public List<AspectValue> getAspectValues() {
    return aspectValues;
  }

  public void setAspectValues(List<AspectValue> aspectValues) {
    this.aspectValues = aspectValues;
  }


  public Aspect localizedAspectName(String localizedAspectName) {
    this.localizedAspectName = localizedAspectName;
    return this;
  }

  /**
   * The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.
   * @return localizedAspectName
   */
  @javax.annotation.Nullable
  public String getLocalizedAspectName() {
    return localizedAspectName;
  }

  public void setLocalizedAspectName(String localizedAspectName) {
    this.localizedAspectName = localizedAspectName;
  }


  public Aspect relevanceIndicator(RelevanceIndicator relevanceIndicator) {
    this.relevanceIndicator = relevanceIndicator;
    return this;
  }

  /**
   * Get relevanceIndicator
   * @return relevanceIndicator
   */
  @javax.annotation.Nullable
  public RelevanceIndicator getRelevanceIndicator() {
    return relevanceIndicator;
  }

  public void setRelevanceIndicator(RelevanceIndicator relevanceIndicator) {
    this.relevanceIndicator = relevanceIndicator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Aspect aspect = (Aspect) o;
    return Objects.equals(this.aspectConstraint, aspect.aspectConstraint) &&
        Objects.equals(this.aspectValues, aspect.aspectValues) &&
        Objects.equals(this.localizedAspectName, aspect.localizedAspectName) &&
        Objects.equals(this.relevanceIndicator, aspect.relevanceIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectConstraint, aspectValues, localizedAspectName, relevanceIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Aspect {\n");
    sb.append("    aspectConstraint: ").append(toIndentedString(aspectConstraint)).append("\n");
    sb.append("    aspectValues: ").append(toIndentedString(aspectValues)).append("\n");
    sb.append("    localizedAspectName: ").append(toIndentedString(localizedAspectName)).append("\n");
    sb.append("    relevanceIndicator: ").append(toIndentedString(relevanceIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspectConstraint");
    openapiFields.add("aspectValues");
    openapiFields.add("localizedAspectName");
    openapiFields.add("relevanceIndicator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Aspect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Aspect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Aspect is not found in the empty JSON string", Aspect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Aspect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Aspect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aspectConstraint`
      if (jsonObj.get("aspectConstraint") != null && !jsonObj.get("aspectConstraint").isJsonNull()) {
        AspectConstraint.validateJsonElement(jsonObj.get("aspectConstraint"));
      }
      if (jsonObj.get("aspectValues") != null && !jsonObj.get("aspectValues").isJsonNull()) {
        JsonArray jsonArrayaspectValues = jsonObj.getAsJsonArray("aspectValues");
        if (jsonArrayaspectValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aspectValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aspectValues` to be an array in the JSON string but got `%s`", jsonObj.get("aspectValues").toString()));
          }

          // validate the optional field `aspectValues` (array)
          for (int i = 0; i < jsonArrayaspectValues.size(); i++) {
            AspectValue.validateJsonElement(jsonArrayaspectValues.get(i));
          };
        }
      }
      if ((jsonObj.get("localizedAspectName") != null && !jsonObj.get("localizedAspectName").isJsonNull()) && !jsonObj.get("localizedAspectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedAspectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedAspectName").toString()));
      }
      // validate the optional field `relevanceIndicator`
      if (jsonObj.get("relevanceIndicator") != null && !jsonObj.get("relevanceIndicator").isJsonNull()) {
        RelevanceIndicator.validateJsonElement(jsonObj.get("relevanceIndicator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Aspect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Aspect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Aspect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Aspect.class));

       return (TypeAdapter<T>) new TypeAdapter<Aspect>() {
           @Override
           public void write(JsonWriter out, Aspect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Aspect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Aspect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Aspect
   * @throws IOException if the JSON string is invalid with respect to Aspect
   */
  public static Aspect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Aspect.class);
  }

  /**
   * Convert an instance of Aspect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

