/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompatibilityPropertyValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base response type of the &lt;strong&gt;getCompatibilityPropertyValues&lt;/strong&gt; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCompatibilityPropertyValuesResponse {
  public static final String SERIALIZED_NAME_COMPATIBILITY_PROPERTY_VALUES = "compatibilityPropertyValues";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_PROPERTY_VALUES)
  private List<CompatibilityPropertyValue> compatibilityPropertyValues = new ArrayList<>();

  public GetCompatibilityPropertyValuesResponse() {
  }

  public GetCompatibilityPropertyValuesResponse compatibilityPropertyValues(List<CompatibilityPropertyValue> compatibilityPropertyValues) {
    this.compatibilityPropertyValues = compatibilityPropertyValues;
    return this;
  }

  public GetCompatibilityPropertyValuesResponse addCompatibilityPropertyValuesItem(CompatibilityPropertyValue compatibilityPropertyValuesItem) {
    if (this.compatibilityPropertyValues == null) {
      this.compatibilityPropertyValues = new ArrayList<>();
    }
    this.compatibilityPropertyValues.add(compatibilityPropertyValuesItem);
    return this;
  }

  /**
   * This array contains all compatible vehicle property values that match the specified eBay marketplace, specified eBay category, and filters in the request. If the compatibility_property parameter value in the request is &#39;Trim&#39;, each value returned in each value field will be a different vehicle trim, applicable to any filters that are set in the filter query parameter of the request, and also based on the eBay marketplace and category specified in the call request.
   * @return compatibilityPropertyValues
   */
  @javax.annotation.Nullable
  public List<CompatibilityPropertyValue> getCompatibilityPropertyValues() {
    return compatibilityPropertyValues;
  }

  public void setCompatibilityPropertyValues(List<CompatibilityPropertyValue> compatibilityPropertyValues) {
    this.compatibilityPropertyValues = compatibilityPropertyValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCompatibilityPropertyValuesResponse getCompatibilityPropertyValuesResponse = (GetCompatibilityPropertyValuesResponse) o;
    return Objects.equals(this.compatibilityPropertyValues, getCompatibilityPropertyValuesResponse.compatibilityPropertyValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibilityPropertyValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCompatibilityPropertyValuesResponse {\n");
    sb.append("    compatibilityPropertyValues: ").append(toIndentedString(compatibilityPropertyValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compatibilityPropertyValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCompatibilityPropertyValuesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCompatibilityPropertyValuesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCompatibilityPropertyValuesResponse is not found in the empty JSON string", GetCompatibilityPropertyValuesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCompatibilityPropertyValuesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCompatibilityPropertyValuesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("compatibilityPropertyValues") != null && !jsonObj.get("compatibilityPropertyValues").isJsonNull()) {
        JsonArray jsonArraycompatibilityPropertyValues = jsonObj.getAsJsonArray("compatibilityPropertyValues");
        if (jsonArraycompatibilityPropertyValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compatibilityPropertyValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compatibilityPropertyValues` to be an array in the JSON string but got `%s`", jsonObj.get("compatibilityPropertyValues").toString()));
          }

          // validate the optional field `compatibilityPropertyValues` (array)
          for (int i = 0; i < jsonArraycompatibilityPropertyValues.size(); i++) {
            CompatibilityPropertyValue.validateJsonElement(jsonArraycompatibilityPropertyValues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCompatibilityPropertyValuesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCompatibilityPropertyValuesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCompatibilityPropertyValuesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCompatibilityPropertyValuesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCompatibilityPropertyValuesResponse>() {
           @Override
           public void write(JsonWriter out, GetCompatibilityPropertyValuesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCompatibilityPropertyValuesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCompatibilityPropertyValuesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCompatibilityPropertyValuesResponse
   * @throws IOException if the JSON string is invalid with respect to GetCompatibilityPropertyValuesResponse
   */
  public static GetCompatibilityPropertyValuesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCompatibilityPropertyValuesResponse.class);
  }

  /**
   * Convert an instance of GetCompatibilityPropertyValuesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

