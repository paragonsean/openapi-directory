/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryAspect;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetCategoriesAspectResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCategoriesAspectResponse {
  public static final String SERIALIZED_NAME_CATEGORY_ASPECTS = "categoryAspects";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ASPECTS)
  private List<CategoryAspect> categoryAspects = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_VERSION = "categoryTreeVersion";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_VERSION)
  private String categoryTreeVersion;

  public GetCategoriesAspectResponse() {
  }

  public GetCategoriesAspectResponse categoryAspects(List<CategoryAspect> categoryAspects) {
    this.categoryAspects = categoryAspects;
    return this;
  }

  public GetCategoriesAspectResponse addCategoryAspectsItem(CategoryAspect categoryAspectsItem) {
    if (this.categoryAspects == null) {
      this.categoryAspects = new ArrayList<>();
    }
    this.categoryAspects.add(categoryAspectsItem);
    return this;
  }

  /**
   * An array of aspects that are appropriate or necessary for accurately describing items in a particular leaf category.
   * @return categoryAspects
   */
  @javax.annotation.Nullable
  public List<CategoryAspect> getCategoryAspects() {
    return categoryAspects;
  }

  public void setCategoryAspects(List<CategoryAspect> categoryAspects) {
    this.categoryAspects = categoryAspects;
  }


  public GetCategoriesAspectResponse categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * The unique identifier of the eBay category tree being requested.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }


  public GetCategoriesAspectResponse categoryTreeVersion(String categoryTreeVersion) {
    this.categoryTreeVersion = categoryTreeVersion;
    return this;
  }

  /**
   * The version of the category tree that is returned in the categoryTreeId field.
   * @return categoryTreeVersion
   */
  @javax.annotation.Nullable
  public String getCategoryTreeVersion() {
    return categoryTreeVersion;
  }

  public void setCategoryTreeVersion(String categoryTreeVersion) {
    this.categoryTreeVersion = categoryTreeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCategoriesAspectResponse getCategoriesAspectResponse = (GetCategoriesAspectResponse) o;
    return Objects.equals(this.categoryAspects, getCategoriesAspectResponse.categoryAspects) &&
        Objects.equals(this.categoryTreeId, getCategoriesAspectResponse.categoryTreeId) &&
        Objects.equals(this.categoryTreeVersion, getCategoriesAspectResponse.categoryTreeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryAspects, categoryTreeId, categoryTreeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCategoriesAspectResponse {\n");
    sb.append("    categoryAspects: ").append(toIndentedString(categoryAspects)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("    categoryTreeVersion: ").append(toIndentedString(categoryTreeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryAspects");
    openapiFields.add("categoryTreeId");
    openapiFields.add("categoryTreeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCategoriesAspectResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCategoriesAspectResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCategoriesAspectResponse is not found in the empty JSON string", GetCategoriesAspectResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCategoriesAspectResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCategoriesAspectResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categoryAspects") != null && !jsonObj.get("categoryAspects").isJsonNull()) {
        JsonArray jsonArraycategoryAspects = jsonObj.getAsJsonArray("categoryAspects");
        if (jsonArraycategoryAspects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryAspects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryAspects` to be an array in the JSON string but got `%s`", jsonObj.get("categoryAspects").toString()));
          }

          // validate the optional field `categoryAspects` (array)
          for (int i = 0; i < jsonArraycategoryAspects.size(); i++) {
            CategoryAspect.validateJsonElement(jsonArraycategoryAspects.get(i));
          };
        }
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
      if ((jsonObj.get("categoryTreeVersion") != null && !jsonObj.get("categoryTreeVersion").isJsonNull()) && !jsonObj.get("categoryTreeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCategoriesAspectResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCategoriesAspectResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCategoriesAspectResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCategoriesAspectResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCategoriesAspectResponse>() {
           @Override
           public void write(JsonWriter out, GetCategoriesAspectResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCategoriesAspectResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCategoriesAspectResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCategoriesAspectResponse
   * @throws IOException if the JSON string is invalid with respect to GetCategoriesAspectResponse
   */
  public static GetCategoriesAspectResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCategoriesAspectResponse.class);
  }

  /**
   * Convert an instance of GetCategoriesAspectResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

