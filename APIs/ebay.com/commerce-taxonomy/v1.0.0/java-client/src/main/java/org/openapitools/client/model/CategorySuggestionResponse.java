/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategorySuggestion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains an array of suggested category tree nodes that are considered by eBay to most closely correspond to the keywords provided in a query string, from a specified category tree.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategorySuggestionResponse {
  public static final String SERIALIZED_NAME_CATEGORY_SUGGESTIONS = "categorySuggestions";
  @SerializedName(SERIALIZED_NAME_CATEGORY_SUGGESTIONS)
  private List<CategorySuggestion> categorySuggestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_VERSION = "categoryTreeVersion";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_VERSION)
  private String categoryTreeVersion;

  public CategorySuggestionResponse() {
  }

  public CategorySuggestionResponse categorySuggestions(List<CategorySuggestion> categorySuggestions) {
    this.categorySuggestions = categorySuggestions;
    return this;
  }

  public CategorySuggestionResponse addCategorySuggestionsItem(CategorySuggestion categorySuggestionsItem) {
    if (this.categorySuggestions == null) {
      this.categorySuggestions = new ArrayList<>();
    }
    this.categorySuggestions.add(categorySuggestionsItem);
    return this;
  }

  /**
   * Contains details about one or more suggested categories that correspond to the provided keywords. The array of suggested categories is sorted in order of eBay&#39;s confidence of the relevance of each category (the first category is the most relevant). Important: This call is not supported in the Sandbox environment. It will return a response payload in which the categoryName fields contain random or boilerplate text regardless of the query submitted.
   * @return categorySuggestions
   */
  @javax.annotation.Nullable
  public List<CategorySuggestion> getCategorySuggestions() {
    return categorySuggestions;
  }

  public void setCategorySuggestions(List<CategorySuggestion> categorySuggestions) {
    this.categorySuggestions = categorySuggestions;
  }


  public CategorySuggestionResponse categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * The unique identifier of the eBay category tree from which suggestions are returned.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }


  public CategorySuggestionResponse categoryTreeVersion(String categoryTreeVersion) {
    this.categoryTreeVersion = categoryTreeVersion;
    return this;
  }

  /**
   * The version of the category tree identified by categoryTreeId. It&#39;s a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
   * @return categoryTreeVersion
   */
  @javax.annotation.Nullable
  public String getCategoryTreeVersion() {
    return categoryTreeVersion;
  }

  public void setCategoryTreeVersion(String categoryTreeVersion) {
    this.categoryTreeVersion = categoryTreeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategorySuggestionResponse categorySuggestionResponse = (CategorySuggestionResponse) o;
    return Objects.equals(this.categorySuggestions, categorySuggestionResponse.categorySuggestions) &&
        Objects.equals(this.categoryTreeId, categorySuggestionResponse.categoryTreeId) &&
        Objects.equals(this.categoryTreeVersion, categorySuggestionResponse.categoryTreeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categorySuggestions, categoryTreeId, categoryTreeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategorySuggestionResponse {\n");
    sb.append("    categorySuggestions: ").append(toIndentedString(categorySuggestions)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("    categoryTreeVersion: ").append(toIndentedString(categoryTreeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categorySuggestions");
    openapiFields.add("categoryTreeId");
    openapiFields.add("categoryTreeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategorySuggestionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategorySuggestionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategorySuggestionResponse is not found in the empty JSON string", CategorySuggestionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategorySuggestionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategorySuggestionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categorySuggestions") != null && !jsonObj.get("categorySuggestions").isJsonNull()) {
        JsonArray jsonArraycategorySuggestions = jsonObj.getAsJsonArray("categorySuggestions");
        if (jsonArraycategorySuggestions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categorySuggestions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categorySuggestions` to be an array in the JSON string but got `%s`", jsonObj.get("categorySuggestions").toString()));
          }

          // validate the optional field `categorySuggestions` (array)
          for (int i = 0; i < jsonArraycategorySuggestions.size(); i++) {
            CategorySuggestion.validateJsonElement(jsonArraycategorySuggestions.get(i));
          };
        }
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
      if ((jsonObj.get("categoryTreeVersion") != null && !jsonObj.get("categoryTreeVersion").isJsonNull()) && !jsonObj.get("categoryTreeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategorySuggestionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategorySuggestionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategorySuggestionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategorySuggestionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CategorySuggestionResponse>() {
           @Override
           public void write(JsonWriter out, CategorySuggestionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategorySuggestionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategorySuggestionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategorySuggestionResponse
   * @throws IOException if the JSON string is invalid with respect to CategorySuggestionResponse
   */
  public static CategorySuggestionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategorySuggestionResponse.class);
  }

  /**
   * Convert an instance of CategorySuggestionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

