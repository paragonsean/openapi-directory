/*
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryTreeNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about all nodes of a specified eBay category tree.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.978907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategoryTree {
  public static final String SERIALIZED_NAME_APPLICABLE_MARKETPLACE_IDS = "applicableMarketplaceIds";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_MARKETPLACE_IDS)
  private List<String> applicableMarketplaceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_VERSION = "categoryTreeVersion";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_VERSION)
  private String categoryTreeVersion;

  public static final String SERIALIZED_NAME_ROOT_CATEGORY_NODE = "rootCategoryNode";
  @SerializedName(SERIALIZED_NAME_ROOT_CATEGORY_NODE)
  private CategoryTreeNode rootCategoryNode;

  public CategoryTree() {
  }

  public CategoryTree applicableMarketplaceIds(List<String> applicableMarketplaceIds) {
    this.applicableMarketplaceIds = applicableMarketplaceIds;
    return this;
  }

  public CategoryTree addApplicableMarketplaceIdsItem(String applicableMarketplaceIdsItem) {
    if (this.applicableMarketplaceIds == null) {
      this.applicableMarketplaceIds = new ArrayList<>();
    }
    this.applicableMarketplaceIds.add(applicableMarketplaceIdsItem);
    return this;
  }

  /**
   * A list of one or more identifiers of the eBay marketplaces that use this category tree.
   * @return applicableMarketplaceIds
   */
  @javax.annotation.Nullable
  public List<String> getApplicableMarketplaceIds() {
    return applicableMarketplaceIds;
  }

  public void setApplicableMarketplaceIds(List<String> applicableMarketplaceIds) {
    this.applicableMarketplaceIds = applicableMarketplaceIds;
  }


  public CategoryTree categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * The unique identifier of this eBay category tree.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }


  public CategoryTree categoryTreeVersion(String categoryTreeVersion) {
    this.categoryTreeVersion = categoryTreeVersion;
    return this;
  }

  /**
   * The version of this category tree. It&#39;s a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
   * @return categoryTreeVersion
   */
  @javax.annotation.Nullable
  public String getCategoryTreeVersion() {
    return categoryTreeVersion;
  }

  public void setCategoryTreeVersion(String categoryTreeVersion) {
    this.categoryTreeVersion = categoryTreeVersion;
  }


  public CategoryTree rootCategoryNode(CategoryTreeNode rootCategoryNode) {
    this.rootCategoryNode = rootCategoryNode;
    return this;
  }

  /**
   * Get rootCategoryNode
   * @return rootCategoryNode
   */
  @javax.annotation.Nullable
  public CategoryTreeNode getRootCategoryNode() {
    return rootCategoryNode;
  }

  public void setRootCategoryNode(CategoryTreeNode rootCategoryNode) {
    this.rootCategoryNode = rootCategoryNode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryTree categoryTree = (CategoryTree) o;
    return Objects.equals(this.applicableMarketplaceIds, categoryTree.applicableMarketplaceIds) &&
        Objects.equals(this.categoryTreeId, categoryTree.categoryTreeId) &&
        Objects.equals(this.categoryTreeVersion, categoryTree.categoryTreeVersion) &&
        Objects.equals(this.rootCategoryNode, categoryTree.rootCategoryNode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableMarketplaceIds, categoryTreeId, categoryTreeVersion, rootCategoryNode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryTree {\n");
    sb.append("    applicableMarketplaceIds: ").append(toIndentedString(applicableMarketplaceIds)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("    categoryTreeVersion: ").append(toIndentedString(categoryTreeVersion)).append("\n");
    sb.append("    rootCategoryNode: ").append(toIndentedString(rootCategoryNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableMarketplaceIds");
    openapiFields.add("categoryTreeId");
    openapiFields.add("categoryTreeVersion");
    openapiFields.add("rootCategoryNode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryTree
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryTree.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryTree is not found in the empty JSON string", CategoryTree.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryTree.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryTree` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableMarketplaceIds") != null && !jsonObj.get("applicableMarketplaceIds").isJsonNull() && !jsonObj.get("applicableMarketplaceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableMarketplaceIds` to be an array in the JSON string but got `%s`", jsonObj.get("applicableMarketplaceIds").toString()));
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
      if ((jsonObj.get("categoryTreeVersion") != null && !jsonObj.get("categoryTreeVersion").isJsonNull()) && !jsonObj.get("categoryTreeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeVersion").toString()));
      }
      // validate the optional field `rootCategoryNode`
      if (jsonObj.get("rootCategoryNode") != null && !jsonObj.get("rootCategoryNode").isJsonNull()) {
        CategoryTreeNode.validateJsonElement(jsonObj.get("rootCategoryNode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryTree.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryTree' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryTree> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryTree.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryTree>() {
           @Override
           public void write(JsonWriter out, CategoryTree value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryTree read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryTree given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryTree
   * @throws IOException if the JSON string is invalid with respect to CategoryTree
   */
  public static CategoryTree fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryTree.class);
  }

  /**
   * Convert an instance of CategoryTree to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

