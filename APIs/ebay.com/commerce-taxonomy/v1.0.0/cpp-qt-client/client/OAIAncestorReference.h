/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAncestorReference.h
 *
 * This type contains information about one of the ancestors of a suggested category. An ordered list of these references describes the path from the suggested category to the root of the category tree it belongs to.
 */

#ifndef OAIAncestorReference_H
#define OAIAncestorReference_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAncestorReference : public OAIObject {
public:
    OAIAncestorReference();
    OAIAncestorReference(QString json);
    ~OAIAncestorReference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategoryId() const;
    void setCategoryId(const QString &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    QString getCategoryName() const;
    void setCategoryName(const QString &category_name);
    bool is_category_name_Set() const;
    bool is_category_name_Valid() const;

    QString getCategorySubtreeNodeHref() const;
    void setCategorySubtreeNodeHref(const QString &category_subtree_node_href);
    bool is_category_subtree_node_href_Set() const;
    bool is_category_subtree_node_href_Valid() const;

    qint32 getCategoryTreeNodeLevel() const;
    void setCategoryTreeNodeLevel(const qint32 &category_tree_node_level);
    bool is_category_tree_node_level_Set() const;
    bool is_category_tree_node_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    QString m_category_name;
    bool m_category_name_isSet;
    bool m_category_name_isValid;

    QString m_category_subtree_node_href;
    bool m_category_subtree_node_href_isSet;
    bool m_category_subtree_node_href_isValid;

    qint32 m_category_tree_node_level;
    bool m_category_tree_node_level_isSet;
    bool m_category_tree_node_level_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAncestorReference)

#endif // OAIAncestorReference_H
