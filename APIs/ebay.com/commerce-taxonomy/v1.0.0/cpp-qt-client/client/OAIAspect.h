/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAspect.h
 *
 * This type contains information about an item attribute (for example, color) that is appropriate or necessary for accurately describing items in a particular leaf category. Sellers are required or encouraged to provide one or more values of this aspect when offering an item in that category on eBay.
 */

#ifndef OAIAspect_H
#define OAIAspect_H

#include <QJsonObject>

#include "OAIAspectConstraint.h"
#include "OAIAspectValue.h"
#include "OAIRelevanceIndicator.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAspectConstraint;
class OAIAspectValue;
class OAIRelevanceIndicator;

class OAIAspect : public OAIObject {
public:
    OAIAspect();
    OAIAspect(QString json);
    ~OAIAspect() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAspectConstraint getAspectConstraint() const;
    void setAspectConstraint(const OAIAspectConstraint &aspect_constraint);
    bool is_aspect_constraint_Set() const;
    bool is_aspect_constraint_Valid() const;

    QList<OAIAspectValue> getAspectValues() const;
    void setAspectValues(const QList<OAIAspectValue> &aspect_values);
    bool is_aspect_values_Set() const;
    bool is_aspect_values_Valid() const;

    QString getLocalizedAspectName() const;
    void setLocalizedAspectName(const QString &localized_aspect_name);
    bool is_localized_aspect_name_Set() const;
    bool is_localized_aspect_name_Valid() const;

    OAIRelevanceIndicator getRelevanceIndicator() const;
    void setRelevanceIndicator(const OAIRelevanceIndicator &relevance_indicator);
    bool is_relevance_indicator_Set() const;
    bool is_relevance_indicator_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAspectConstraint m_aspect_constraint;
    bool m_aspect_constraint_isSet;
    bool m_aspect_constraint_isValid;

    QList<OAIAspectValue> m_aspect_values;
    bool m_aspect_values_isSet;
    bool m_aspect_values_isValid;

    QString m_localized_aspect_name;
    bool m_localized_aspect_name_isSet;
    bool m_localized_aspect_name_isValid;

    OAIRelevanceIndicator m_relevance_indicator;
    bool m_relevance_indicator_isSet;
    bool m_relevance_indicator_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAspect)

#endif // OAIAspect_H
