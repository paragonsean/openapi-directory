/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAspectValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAspectValue::OAIAspectValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAspectValue::OAIAspectValue() {
    this->initializeModel();
}

OAIAspectValue::~OAIAspectValue() {}

void OAIAspectValue::initializeModel() {

    m_localized_value_isSet = false;
    m_localized_value_isValid = false;

    m_value_constraints_isSet = false;
    m_value_constraints_isValid = false;
}

void OAIAspectValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAspectValue::fromJsonObject(QJsonObject json) {

    m_localized_value_isValid = ::OpenAPI::fromJsonValue(m_localized_value, json[QString("localizedValue")]);
    m_localized_value_isSet = !json[QString("localizedValue")].isNull() && m_localized_value_isValid;

    m_value_constraints_isValid = ::OpenAPI::fromJsonValue(m_value_constraints, json[QString("valueConstraints")]);
    m_value_constraints_isSet = !json[QString("valueConstraints")].isNull() && m_value_constraints_isValid;
}

QString OAIAspectValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAspectValue::asJsonObject() const {
    QJsonObject obj;
    if (m_localized_value_isSet) {
        obj.insert(QString("localizedValue"), ::OpenAPI::toJsonValue(m_localized_value));
    }
    if (m_value_constraints.size() > 0) {
        obj.insert(QString("valueConstraints"), ::OpenAPI::toJsonValue(m_value_constraints));
    }
    return obj;
}

QString OAIAspectValue::getLocalizedValue() const {
    return m_localized_value;
}
void OAIAspectValue::setLocalizedValue(const QString &localized_value) {
    m_localized_value = localized_value;
    m_localized_value_isSet = true;
}

bool OAIAspectValue::is_localized_value_Set() const{
    return m_localized_value_isSet;
}

bool OAIAspectValue::is_localized_value_Valid() const{
    return m_localized_value_isValid;
}

QList<OAIValueConstraint> OAIAspectValue::getValueConstraints() const {
    return m_value_constraints;
}
void OAIAspectValue::setValueConstraints(const QList<OAIValueConstraint> &value_constraints) {
    m_value_constraints = value_constraints;
    m_value_constraints_isSet = true;
}

bool OAIAspectValue::is_value_constraints_Set() const{
    return m_value_constraints_isSet;
}

bool OAIAspectValue::is_value_constraints_Valid() const{
    return m_value_constraints_isValid;
}

bool OAIAspectValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_localized_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAspectValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
