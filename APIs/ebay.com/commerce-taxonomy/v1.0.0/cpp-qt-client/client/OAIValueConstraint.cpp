/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueConstraint::OAIValueConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueConstraint::OAIValueConstraint() {
    this->initializeModel();
}

OAIValueConstraint::~OAIValueConstraint() {}

void OAIValueConstraint::initializeModel() {

    m_applicable_for_localized_aspect_name_isSet = false;
    m_applicable_for_localized_aspect_name_isValid = false;

    m_applicable_for_localized_aspect_values_isSet = false;
    m_applicable_for_localized_aspect_values_isValid = false;
}

void OAIValueConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueConstraint::fromJsonObject(QJsonObject json) {

    m_applicable_for_localized_aspect_name_isValid = ::OpenAPI::fromJsonValue(m_applicable_for_localized_aspect_name, json[QString("applicableForLocalizedAspectName")]);
    m_applicable_for_localized_aspect_name_isSet = !json[QString("applicableForLocalizedAspectName")].isNull() && m_applicable_for_localized_aspect_name_isValid;

    m_applicable_for_localized_aspect_values_isValid = ::OpenAPI::fromJsonValue(m_applicable_for_localized_aspect_values, json[QString("applicableForLocalizedAspectValues")]);
    m_applicable_for_localized_aspect_values_isSet = !json[QString("applicableForLocalizedAspectValues")].isNull() && m_applicable_for_localized_aspect_values_isValid;
}

QString OAIValueConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_for_localized_aspect_name_isSet) {
        obj.insert(QString("applicableForLocalizedAspectName"), ::OpenAPI::toJsonValue(m_applicable_for_localized_aspect_name));
    }
    if (m_applicable_for_localized_aspect_values.size() > 0) {
        obj.insert(QString("applicableForLocalizedAspectValues"), ::OpenAPI::toJsonValue(m_applicable_for_localized_aspect_values));
    }
    return obj;
}

QString OAIValueConstraint::getApplicableForLocalizedAspectName() const {
    return m_applicable_for_localized_aspect_name;
}
void OAIValueConstraint::setApplicableForLocalizedAspectName(const QString &applicable_for_localized_aspect_name) {
    m_applicable_for_localized_aspect_name = applicable_for_localized_aspect_name;
    m_applicable_for_localized_aspect_name_isSet = true;
}

bool OAIValueConstraint::is_applicable_for_localized_aspect_name_Set() const{
    return m_applicable_for_localized_aspect_name_isSet;
}

bool OAIValueConstraint::is_applicable_for_localized_aspect_name_Valid() const{
    return m_applicable_for_localized_aspect_name_isValid;
}

QList<QString> OAIValueConstraint::getApplicableForLocalizedAspectValues() const {
    return m_applicable_for_localized_aspect_values;
}
void OAIValueConstraint::setApplicableForLocalizedAspectValues(const QList<QString> &applicable_for_localized_aspect_values) {
    m_applicable_for_localized_aspect_values = applicable_for_localized_aspect_values;
    m_applicable_for_localized_aspect_values_isSet = true;
}

bool OAIValueConstraint::is_applicable_for_localized_aspect_values_Set() const{
    return m_applicable_for_localized_aspect_values_isSet;
}

bool OAIValueConstraint::is_applicable_for_localized_aspect_values_Valid() const{
    return m_applicable_for_localized_aspect_values_isValid;
}

bool OAIValueConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_for_localized_aspect_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applicable_for_localized_aspect_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
