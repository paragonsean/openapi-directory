/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategorySuggestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategorySuggestion::OAICategorySuggestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategorySuggestion::OAICategorySuggestion() {
    this->initializeModel();
}

OAICategorySuggestion::~OAICategorySuggestion() {}

void OAICategorySuggestion::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_tree_node_ancestors_isSet = false;
    m_category_tree_node_ancestors_isValid = false;

    m_category_tree_node_level_isSet = false;
    m_category_tree_node_level_isValid = false;

    m_relevancy_isSet = false;
    m_relevancy_isValid = false;
}

void OAICategorySuggestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategorySuggestion::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_tree_node_ancestors_isValid = ::OpenAPI::fromJsonValue(m_category_tree_node_ancestors, json[QString("categoryTreeNodeAncestors")]);
    m_category_tree_node_ancestors_isSet = !json[QString("categoryTreeNodeAncestors")].isNull() && m_category_tree_node_ancestors_isValid;

    m_category_tree_node_level_isValid = ::OpenAPI::fromJsonValue(m_category_tree_node_level, json[QString("categoryTreeNodeLevel")]);
    m_category_tree_node_level_isSet = !json[QString("categoryTreeNodeLevel")].isNull() && m_category_tree_node_level_isValid;

    m_relevancy_isValid = ::OpenAPI::fromJsonValue(m_relevancy, json[QString("relevancy")]);
    m_relevancy_isSet = !json[QString("relevancy")].isNull() && m_relevancy_isValid;
}

QString OAICategorySuggestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategorySuggestion::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_tree_node_ancestors.size() > 0) {
        obj.insert(QString("categoryTreeNodeAncestors"), ::OpenAPI::toJsonValue(m_category_tree_node_ancestors));
    }
    if (m_category_tree_node_level_isSet) {
        obj.insert(QString("categoryTreeNodeLevel"), ::OpenAPI::toJsonValue(m_category_tree_node_level));
    }
    if (m_relevancy_isSet) {
        obj.insert(QString("relevancy"), ::OpenAPI::toJsonValue(m_relevancy));
    }
    return obj;
}

OAICategory OAICategorySuggestion::getCategory() const {
    return m_category;
}
void OAICategorySuggestion::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICategorySuggestion::is_category_Set() const{
    return m_category_isSet;
}

bool OAICategorySuggestion::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIAncestorReference> OAICategorySuggestion::getCategoryTreeNodeAncestors() const {
    return m_category_tree_node_ancestors;
}
void OAICategorySuggestion::setCategoryTreeNodeAncestors(const QList<OAIAncestorReference> &category_tree_node_ancestors) {
    m_category_tree_node_ancestors = category_tree_node_ancestors;
    m_category_tree_node_ancestors_isSet = true;
}

bool OAICategorySuggestion::is_category_tree_node_ancestors_Set() const{
    return m_category_tree_node_ancestors_isSet;
}

bool OAICategorySuggestion::is_category_tree_node_ancestors_Valid() const{
    return m_category_tree_node_ancestors_isValid;
}

qint32 OAICategorySuggestion::getCategoryTreeNodeLevel() const {
    return m_category_tree_node_level;
}
void OAICategorySuggestion::setCategoryTreeNodeLevel(const qint32 &category_tree_node_level) {
    m_category_tree_node_level = category_tree_node_level;
    m_category_tree_node_level_isSet = true;
}

bool OAICategorySuggestion::is_category_tree_node_level_Set() const{
    return m_category_tree_node_level_isSet;
}

bool OAICategorySuggestion::is_category_tree_node_level_Valid() const{
    return m_category_tree_node_level_isValid;
}

QString OAICategorySuggestion::getRelevancy() const {
    return m_relevancy;
}
void OAICategorySuggestion::setRelevancy(const QString &relevancy) {
    m_relevancy = relevancy;
    m_relevancy_isSet = true;
}

bool OAICategorySuggestion::is_relevancy_Set() const{
    return m_relevancy_isSet;
}

bool OAICategorySuggestion::is_relevancy_Valid() const{
    return m_relevancy_isValid;
}

bool OAICategorySuggestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_node_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_node_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevancy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategorySuggestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
