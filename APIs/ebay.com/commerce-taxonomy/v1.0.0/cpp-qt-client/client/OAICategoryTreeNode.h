/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICategoryTreeNode.h
 *
 * This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified &lt;b&gt;Category&lt;/b&gt;, down to the leaf nodes. It is a recursive structure.
 */

#ifndef OAICategoryTreeNode_H
#define OAICategoryTreeNode_H

#include <QJsonObject>

#include "OAICategory.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategory;

class OAICategoryTreeNode : public OAIObject {
public:
    OAICategoryTreeNode();
    OAICategoryTreeNode(QString json);
    ~OAICategoryTreeNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICategory getCategory() const;
    void setCategory(const OAICategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    qint32 getCategoryTreeNodeLevel() const;
    void setCategoryTreeNodeLevel(const qint32 &category_tree_node_level);
    bool is_category_tree_node_level_Set() const;
    bool is_category_tree_node_level_Valid() const;

    QList<OAICategoryTreeNode> getChildCategoryTreeNodes() const;
    void setChildCategoryTreeNodes(const QList<OAICategoryTreeNode> &child_category_tree_nodes);
    bool is_child_category_tree_nodes_Set() const;
    bool is_child_category_tree_nodes_Valid() const;

    bool isLeafCategoryTreeNode() const;
    void setLeafCategoryTreeNode(const bool &leaf_category_tree_node);
    bool is_leaf_category_tree_node_Set() const;
    bool is_leaf_category_tree_node_Valid() const;

    QString getParentCategoryTreeNodeHref() const;
    void setParentCategoryTreeNodeHref(const QString &parent_category_tree_node_href);
    bool is_parent_category_tree_node_href_Set() const;
    bool is_parent_category_tree_node_href_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    qint32 m_category_tree_node_level;
    bool m_category_tree_node_level_isSet;
    bool m_category_tree_node_level_isValid;

    QList<OAICategoryTreeNode> m_child_category_tree_nodes;
    bool m_child_category_tree_nodes_isSet;
    bool m_child_category_tree_nodes_isValid;

    bool m_leaf_category_tree_node;
    bool m_leaf_category_tree_node_isSet;
    bool m_leaf_category_tree_node_isValid;

    QString m_parent_category_tree_node_href;
    bool m_parent_category_tree_node_href_isSet;
    bool m_parent_category_tree_node_href_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICategoryTreeNode)

#endif // OAICategoryTreeNode_H
