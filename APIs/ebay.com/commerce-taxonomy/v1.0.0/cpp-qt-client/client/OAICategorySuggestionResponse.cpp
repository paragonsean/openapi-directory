/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategorySuggestionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategorySuggestionResponse::OAICategorySuggestionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategorySuggestionResponse::OAICategorySuggestionResponse() {
    this->initializeModel();
}

OAICategorySuggestionResponse::~OAICategorySuggestionResponse() {}

void OAICategorySuggestionResponse::initializeModel() {

    m_category_suggestions_isSet = false;
    m_category_suggestions_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_category_tree_version_isSet = false;
    m_category_tree_version_isValid = false;
}

void OAICategorySuggestionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategorySuggestionResponse::fromJsonObject(QJsonObject json) {

    m_category_suggestions_isValid = ::OpenAPI::fromJsonValue(m_category_suggestions, json[QString("categorySuggestions")]);
    m_category_suggestions_isSet = !json[QString("categorySuggestions")].isNull() && m_category_suggestions_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_category_tree_version_isValid = ::OpenAPI::fromJsonValue(m_category_tree_version, json[QString("categoryTreeVersion")]);
    m_category_tree_version_isSet = !json[QString("categoryTreeVersion")].isNull() && m_category_tree_version_isValid;
}

QString OAICategorySuggestionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategorySuggestionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_category_suggestions.size() > 0) {
        obj.insert(QString("categorySuggestions"), ::OpenAPI::toJsonValue(m_category_suggestions));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_category_tree_version_isSet) {
        obj.insert(QString("categoryTreeVersion"), ::OpenAPI::toJsonValue(m_category_tree_version));
    }
    return obj;
}

QList<OAICategorySuggestion> OAICategorySuggestionResponse::getCategorySuggestions() const {
    return m_category_suggestions;
}
void OAICategorySuggestionResponse::setCategorySuggestions(const QList<OAICategorySuggestion> &category_suggestions) {
    m_category_suggestions = category_suggestions;
    m_category_suggestions_isSet = true;
}

bool OAICategorySuggestionResponse::is_category_suggestions_Set() const{
    return m_category_suggestions_isSet;
}

bool OAICategorySuggestionResponse::is_category_suggestions_Valid() const{
    return m_category_suggestions_isValid;
}

QString OAICategorySuggestionResponse::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAICategorySuggestionResponse::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAICategorySuggestionResponse::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAICategorySuggestionResponse::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

QString OAICategorySuggestionResponse::getCategoryTreeVersion() const {
    return m_category_tree_version;
}
void OAICategorySuggestionResponse::setCategoryTreeVersion(const QString &category_tree_version) {
    m_category_tree_version = category_tree_version;
    m_category_tree_version_isSet = true;
}

bool OAICategorySuggestionResponse::is_category_tree_version_Set() const{
    return m_category_tree_version_isSet;
}

bool OAICategorySuggestionResponse::is_category_tree_version_Valid() const{
    return m_category_tree_version_isValid;
}

bool OAICategorySuggestionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategorySuggestionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
