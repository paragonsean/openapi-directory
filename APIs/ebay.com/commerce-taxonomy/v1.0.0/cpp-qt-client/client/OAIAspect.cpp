/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAspect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAspect::OAIAspect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAspect::OAIAspect() {
    this->initializeModel();
}

OAIAspect::~OAIAspect() {}

void OAIAspect::initializeModel() {

    m_aspect_constraint_isSet = false;
    m_aspect_constraint_isValid = false;

    m_aspect_values_isSet = false;
    m_aspect_values_isValid = false;

    m_localized_aspect_name_isSet = false;
    m_localized_aspect_name_isValid = false;

    m_relevance_indicator_isSet = false;
    m_relevance_indicator_isValid = false;
}

void OAIAspect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAspect::fromJsonObject(QJsonObject json) {

    m_aspect_constraint_isValid = ::OpenAPI::fromJsonValue(m_aspect_constraint, json[QString("aspectConstraint")]);
    m_aspect_constraint_isSet = !json[QString("aspectConstraint")].isNull() && m_aspect_constraint_isValid;

    m_aspect_values_isValid = ::OpenAPI::fromJsonValue(m_aspect_values, json[QString("aspectValues")]);
    m_aspect_values_isSet = !json[QString("aspectValues")].isNull() && m_aspect_values_isValid;

    m_localized_aspect_name_isValid = ::OpenAPI::fromJsonValue(m_localized_aspect_name, json[QString("localizedAspectName")]);
    m_localized_aspect_name_isSet = !json[QString("localizedAspectName")].isNull() && m_localized_aspect_name_isValid;

    m_relevance_indicator_isValid = ::OpenAPI::fromJsonValue(m_relevance_indicator, json[QString("relevanceIndicator")]);
    m_relevance_indicator_isSet = !json[QString("relevanceIndicator")].isNull() && m_relevance_indicator_isValid;
}

QString OAIAspect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAspect::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_constraint.isSet()) {
        obj.insert(QString("aspectConstraint"), ::OpenAPI::toJsonValue(m_aspect_constraint));
    }
    if (m_aspect_values.size() > 0) {
        obj.insert(QString("aspectValues"), ::OpenAPI::toJsonValue(m_aspect_values));
    }
    if (m_localized_aspect_name_isSet) {
        obj.insert(QString("localizedAspectName"), ::OpenAPI::toJsonValue(m_localized_aspect_name));
    }
    if (m_relevance_indicator.isSet()) {
        obj.insert(QString("relevanceIndicator"), ::OpenAPI::toJsonValue(m_relevance_indicator));
    }
    return obj;
}

OAIAspectConstraint OAIAspect::getAspectConstraint() const {
    return m_aspect_constraint;
}
void OAIAspect::setAspectConstraint(const OAIAspectConstraint &aspect_constraint) {
    m_aspect_constraint = aspect_constraint;
    m_aspect_constraint_isSet = true;
}

bool OAIAspect::is_aspect_constraint_Set() const{
    return m_aspect_constraint_isSet;
}

bool OAIAspect::is_aspect_constraint_Valid() const{
    return m_aspect_constraint_isValid;
}

QList<OAIAspectValue> OAIAspect::getAspectValues() const {
    return m_aspect_values;
}
void OAIAspect::setAspectValues(const QList<OAIAspectValue> &aspect_values) {
    m_aspect_values = aspect_values;
    m_aspect_values_isSet = true;
}

bool OAIAspect::is_aspect_values_Set() const{
    return m_aspect_values_isSet;
}

bool OAIAspect::is_aspect_values_Valid() const{
    return m_aspect_values_isValid;
}

QString OAIAspect::getLocalizedAspectName() const {
    return m_localized_aspect_name;
}
void OAIAspect::setLocalizedAspectName(const QString &localized_aspect_name) {
    m_localized_aspect_name = localized_aspect_name;
    m_localized_aspect_name_isSet = true;
}

bool OAIAspect::is_localized_aspect_name_Set() const{
    return m_localized_aspect_name_isSet;
}

bool OAIAspect::is_localized_aspect_name_Valid() const{
    return m_localized_aspect_name_isValid;
}

OAIRelevanceIndicator OAIAspect::getRelevanceIndicator() const {
    return m_relevance_indicator;
}
void OAIAspect::setRelevanceIndicator(const OAIRelevanceIndicator &relevance_indicator) {
    m_relevance_indicator = relevance_indicator;
    m_relevance_indicator_isSet = true;
}

bool OAIAspect::is_relevance_indicator_Set() const{
    return m_relevance_indicator_isSet;
}

bool OAIAspect::is_relevance_indicator_Valid() const{
    return m_relevance_indicator_isValid;
}

bool OAIAspect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_aspect_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAspect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
