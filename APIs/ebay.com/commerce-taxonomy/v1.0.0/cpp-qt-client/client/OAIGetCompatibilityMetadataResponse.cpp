/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCompatibilityMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCompatibilityMetadataResponse::OAIGetCompatibilityMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCompatibilityMetadataResponse::OAIGetCompatibilityMetadataResponse() {
    this->initializeModel();
}

OAIGetCompatibilityMetadataResponse::~OAIGetCompatibilityMetadataResponse() {}

void OAIGetCompatibilityMetadataResponse::initializeModel() {

    m_compatibility_properties_isSet = false;
    m_compatibility_properties_isValid = false;
}

void OAIGetCompatibilityMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCompatibilityMetadataResponse::fromJsonObject(QJsonObject json) {

    m_compatibility_properties_isValid = ::OpenAPI::fromJsonValue(m_compatibility_properties, json[QString("compatibilityProperties")]);
    m_compatibility_properties_isSet = !json[QString("compatibilityProperties")].isNull() && m_compatibility_properties_isValid;
}

QString OAIGetCompatibilityMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCompatibilityMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_properties.size() > 0) {
        obj.insert(QString("compatibilityProperties"), ::OpenAPI::toJsonValue(m_compatibility_properties));
    }
    return obj;
}

QList<OAICompatibilityProperty> OAIGetCompatibilityMetadataResponse::getCompatibilityProperties() const {
    return m_compatibility_properties;
}
void OAIGetCompatibilityMetadataResponse::setCompatibilityProperties(const QList<OAICompatibilityProperty> &compatibility_properties) {
    m_compatibility_properties = compatibility_properties;
    m_compatibility_properties_isSet = true;
}

bool OAIGetCompatibilityMetadataResponse::is_compatibility_properties_Set() const{
    return m_compatibility_properties_isSet;
}

bool OAIGetCompatibilityMetadataResponse::is_compatibility_properties_Valid() const{
    return m_compatibility_properties_isValid;
}

bool OAIGetCompatibilityMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCompatibilityMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
