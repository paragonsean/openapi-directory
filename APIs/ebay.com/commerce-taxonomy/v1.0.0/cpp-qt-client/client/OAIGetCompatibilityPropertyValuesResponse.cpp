/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCompatibilityPropertyValuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCompatibilityPropertyValuesResponse::OAIGetCompatibilityPropertyValuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCompatibilityPropertyValuesResponse::OAIGetCompatibilityPropertyValuesResponse() {
    this->initializeModel();
}

OAIGetCompatibilityPropertyValuesResponse::~OAIGetCompatibilityPropertyValuesResponse() {}

void OAIGetCompatibilityPropertyValuesResponse::initializeModel() {

    m_compatibility_property_values_isSet = false;
    m_compatibility_property_values_isValid = false;
}

void OAIGetCompatibilityPropertyValuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCompatibilityPropertyValuesResponse::fromJsonObject(QJsonObject json) {

    m_compatibility_property_values_isValid = ::OpenAPI::fromJsonValue(m_compatibility_property_values, json[QString("compatibilityPropertyValues")]);
    m_compatibility_property_values_isSet = !json[QString("compatibilityPropertyValues")].isNull() && m_compatibility_property_values_isValid;
}

QString OAIGetCompatibilityPropertyValuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCompatibilityPropertyValuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_property_values.size() > 0) {
        obj.insert(QString("compatibilityPropertyValues"), ::OpenAPI::toJsonValue(m_compatibility_property_values));
    }
    return obj;
}

QList<OAICompatibilityPropertyValue> OAIGetCompatibilityPropertyValuesResponse::getCompatibilityPropertyValues() const {
    return m_compatibility_property_values;
}
void OAIGetCompatibilityPropertyValuesResponse::setCompatibilityPropertyValues(const QList<OAICompatibilityPropertyValue> &compatibility_property_values) {
    m_compatibility_property_values = compatibility_property_values;
    m_compatibility_property_values_isSet = true;
}

bool OAIGetCompatibilityPropertyValuesResponse::is_compatibility_property_values_Set() const{
    return m_compatibility_property_values_isSet;
}

bool OAIGetCompatibilityPropertyValuesResponse::is_compatibility_property_values_Valid() const{
    return m_compatibility_property_values_isValid;
}

bool OAIGetCompatibilityPropertyValuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_property_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCompatibilityPropertyValuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
