/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAspectConstraint.h
 *
 * This type contains information about the formatting, occurrence, and support of an aspect.
 */

#ifndef OAIAspectConstraint_H
#define OAIAspectConstraint_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAspectConstraint : public OAIObject {
public:
    OAIAspectConstraint();
    OAIAspectConstraint(QString json);
    ~OAIAspectConstraint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAspectApplicableTo() const;
    void setAspectApplicableTo(const QList<QString> &aspect_applicable_to);
    bool is_aspect_applicable_to_Set() const;
    bool is_aspect_applicable_to_Valid() const;

    QString getAspectDataType() const;
    void setAspectDataType(const QString &aspect_data_type);
    bool is_aspect_data_type_Set() const;
    bool is_aspect_data_type_Valid() const;

    bool isAspectEnabledForVariations() const;
    void setAspectEnabledForVariations(const bool &aspect_enabled_for_variations);
    bool is_aspect_enabled_for_variations_Set() const;
    bool is_aspect_enabled_for_variations_Valid() const;

    QString getAspectFormat() const;
    void setAspectFormat(const QString &aspect_format);
    bool is_aspect_format_Set() const;
    bool is_aspect_format_Valid() const;

    qint32 getAspectMaxLength() const;
    void setAspectMaxLength(const qint32 &aspect_max_length);
    bool is_aspect_max_length_Set() const;
    bool is_aspect_max_length_Valid() const;

    QString getAspectMode() const;
    void setAspectMode(const QString &aspect_mode);
    bool is_aspect_mode_Set() const;
    bool is_aspect_mode_Valid() const;

    bool isAspectRequired() const;
    void setAspectRequired(const bool &aspect_required);
    bool is_aspect_required_Set() const;
    bool is_aspect_required_Valid() const;

    QString getAspectUsage() const;
    void setAspectUsage(const QString &aspect_usage);
    bool is_aspect_usage_Set() const;
    bool is_aspect_usage_Valid() const;

    QString getExpectedRequiredByDate() const;
    void setExpectedRequiredByDate(const QString &expected_required_by_date);
    bool is_expected_required_by_date_Set() const;
    bool is_expected_required_by_date_Valid() const;

    QString getItemToAspectCardinality() const;
    void setItemToAspectCardinality(const QString &item_to_aspect_cardinality);
    bool is_item_to_aspect_cardinality_Set() const;
    bool is_item_to_aspect_cardinality_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_aspect_applicable_to;
    bool m_aspect_applicable_to_isSet;
    bool m_aspect_applicable_to_isValid;

    QString m_aspect_data_type;
    bool m_aspect_data_type_isSet;
    bool m_aspect_data_type_isValid;

    bool m_aspect_enabled_for_variations;
    bool m_aspect_enabled_for_variations_isSet;
    bool m_aspect_enabled_for_variations_isValid;

    QString m_aspect_format;
    bool m_aspect_format_isSet;
    bool m_aspect_format_isValid;

    qint32 m_aspect_max_length;
    bool m_aspect_max_length_isSet;
    bool m_aspect_max_length_isValid;

    QString m_aspect_mode;
    bool m_aspect_mode_isSet;
    bool m_aspect_mode_isValid;

    bool m_aspect_required;
    bool m_aspect_required_isSet;
    bool m_aspect_required_isValid;

    QString m_aspect_usage;
    bool m_aspect_usage_isSet;
    bool m_aspect_usage_isValid;

    QString m_expected_required_by_date;
    bool m_expected_required_by_date_isSet;
    bool m_expected_required_by_date_isValid;

    QString m_item_to_aspect_cardinality;
    bool m_item_to_aspect_cardinality_isSet;
    bool m_item_to_aspect_cardinality_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAspectConstraint)

#endif // OAIAspectConstraint_H
