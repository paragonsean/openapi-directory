/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompatibilityProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompatibilityProperty::OAICompatibilityProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompatibilityProperty::OAICompatibilityProperty() {
    this->initializeModel();
}

OAICompatibilityProperty::~OAICompatibilityProperty() {}

void OAICompatibilityProperty::initializeModel() {

    m_localized_name_isSet = false;
    m_localized_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICompatibilityProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompatibilityProperty::fromJsonObject(QJsonObject json) {

    m_localized_name_isValid = ::OpenAPI::fromJsonValue(m_localized_name, json[QString("localizedName")]);
    m_localized_name_isSet = !json[QString("localizedName")].isNull() && m_localized_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICompatibilityProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompatibilityProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_localized_name_isSet) {
        obj.insert(QString("localizedName"), ::OpenAPI::toJsonValue(m_localized_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICompatibilityProperty::getLocalizedName() const {
    return m_localized_name;
}
void OAICompatibilityProperty::setLocalizedName(const QString &localized_name) {
    m_localized_name = localized_name;
    m_localized_name_isSet = true;
}

bool OAICompatibilityProperty::is_localized_name_Set() const{
    return m_localized_name_isSet;
}

bool OAICompatibilityProperty::is_localized_name_Valid() const{
    return m_localized_name_isValid;
}

QString OAICompatibilityProperty::getName() const {
    return m_name;
}
void OAICompatibilityProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompatibilityProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompatibilityProperty::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICompatibilityProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_localized_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompatibilityProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
