/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAncestorReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAncestorReference::OAIAncestorReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAncestorReference::OAIAncestorReference() {
    this->initializeModel();
}

OAIAncestorReference::~OAIAncestorReference() {}

void OAIAncestorReference::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_category_subtree_node_href_isSet = false;
    m_category_subtree_node_href_isValid = false;

    m_category_tree_node_level_isSet = false;
    m_category_tree_node_level_isValid = false;
}

void OAIAncestorReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAncestorReference::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_category_subtree_node_href_isValid = ::OpenAPI::fromJsonValue(m_category_subtree_node_href, json[QString("categorySubtreeNodeHref")]);
    m_category_subtree_node_href_isSet = !json[QString("categorySubtreeNodeHref")].isNull() && m_category_subtree_node_href_isValid;

    m_category_tree_node_level_isValid = ::OpenAPI::fromJsonValue(m_category_tree_node_level, json[QString("categoryTreeNodeLevel")]);
    m_category_tree_node_level_isSet = !json[QString("categoryTreeNodeLevel")].isNull() && m_category_tree_node_level_isValid;
}

QString OAIAncestorReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAncestorReference::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_category_subtree_node_href_isSet) {
        obj.insert(QString("categorySubtreeNodeHref"), ::OpenAPI::toJsonValue(m_category_subtree_node_href));
    }
    if (m_category_tree_node_level_isSet) {
        obj.insert(QString("categoryTreeNodeLevel"), ::OpenAPI::toJsonValue(m_category_tree_node_level));
    }
    return obj;
}

QString OAIAncestorReference::getCategoryId() const {
    return m_category_id;
}
void OAIAncestorReference::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIAncestorReference::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIAncestorReference::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIAncestorReference::getCategoryName() const {
    return m_category_name;
}
void OAIAncestorReference::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIAncestorReference::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIAncestorReference::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAIAncestorReference::getCategorySubtreeNodeHref() const {
    return m_category_subtree_node_href;
}
void OAIAncestorReference::setCategorySubtreeNodeHref(const QString &category_subtree_node_href) {
    m_category_subtree_node_href = category_subtree_node_href;
    m_category_subtree_node_href_isSet = true;
}

bool OAIAncestorReference::is_category_subtree_node_href_Set() const{
    return m_category_subtree_node_href_isSet;
}

bool OAIAncestorReference::is_category_subtree_node_href_Valid() const{
    return m_category_subtree_node_href_isValid;
}

qint32 OAIAncestorReference::getCategoryTreeNodeLevel() const {
    return m_category_tree_node_level;
}
void OAIAncestorReference::setCategoryTreeNodeLevel(const qint32 &category_tree_node_level) {
    m_category_tree_node_level = category_tree_node_level;
    m_category_tree_node_level_isSet = true;
}

bool OAIAncestorReference::is_category_tree_node_level_Set() const{
    return m_category_tree_node_level_isSet;
}

bool OAIAncestorReference::is_category_tree_node_level_Valid() const{
    return m_category_tree_node_level_isValid;
}

bool OAIAncestorReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_subtree_node_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_node_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAncestorReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
