/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelevanceIndicator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelevanceIndicator::OAIRelevanceIndicator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelevanceIndicator::OAIRelevanceIndicator() {
    this->initializeModel();
}

OAIRelevanceIndicator::~OAIRelevanceIndicator() {}

void OAIRelevanceIndicator::initializeModel() {

    m_search_count_isSet = false;
    m_search_count_isValid = false;
}

void OAIRelevanceIndicator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelevanceIndicator::fromJsonObject(QJsonObject json) {

    m_search_count_isValid = ::OpenAPI::fromJsonValue(m_search_count, json[QString("searchCount")]);
    m_search_count_isSet = !json[QString("searchCount")].isNull() && m_search_count_isValid;
}

QString OAIRelevanceIndicator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelevanceIndicator::asJsonObject() const {
    QJsonObject obj;
    if (m_search_count_isSet) {
        obj.insert(QString("searchCount"), ::OpenAPI::toJsonValue(m_search_count));
    }
    return obj;
}

qint32 OAIRelevanceIndicator::getSearchCount() const {
    return m_search_count;
}
void OAIRelevanceIndicator::setSearchCount(const qint32 &search_count) {
    m_search_count = search_count;
    m_search_count_isSet = true;
}

bool OAIRelevanceIndicator::is_search_count_Set() const{
    return m_search_count_isSet;
}

bool OAIRelevanceIndicator::is_search_count_Valid() const{
    return m_search_count_isValid;
}

bool OAIRelevanceIndicator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelevanceIndicator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
