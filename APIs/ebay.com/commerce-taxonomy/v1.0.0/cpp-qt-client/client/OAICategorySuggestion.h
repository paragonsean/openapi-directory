/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICategorySuggestion.h
 *
 * This type contains information about a suggested category tree leaf node that corresponds to keywords provided in the request. It includes details about each of the category&#39;s ancestor nodes extending up to the root of the category tree.
 */

#ifndef OAICategorySuggestion_H
#define OAICategorySuggestion_H

#include <QJsonObject>

#include "OAIAncestorReference.h"
#include "OAICategory.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategory;
class OAIAncestorReference;

class OAICategorySuggestion : public OAIObject {
public:
    OAICategorySuggestion();
    OAICategorySuggestion(QString json);
    ~OAICategorySuggestion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICategory getCategory() const;
    void setCategory(const OAICategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QList<OAIAncestorReference> getCategoryTreeNodeAncestors() const;
    void setCategoryTreeNodeAncestors(const QList<OAIAncestorReference> &category_tree_node_ancestors);
    bool is_category_tree_node_ancestors_Set() const;
    bool is_category_tree_node_ancestors_Valid() const;

    qint32 getCategoryTreeNodeLevel() const;
    void setCategoryTreeNodeLevel(const qint32 &category_tree_node_level);
    bool is_category_tree_node_level_Set() const;
    bool is_category_tree_node_level_Valid() const;

    QString getRelevancy() const;
    void setRelevancy(const QString &relevancy);
    bool is_relevancy_Set() const;
    bool is_relevancy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QList<OAIAncestorReference> m_category_tree_node_ancestors;
    bool m_category_tree_node_ancestors_isSet;
    bool m_category_tree_node_ancestors_isValid;

    qint32 m_category_tree_node_level;
    bool m_category_tree_node_level_isSet;
    bool m_category_tree_node_level_isValid;

    QString m_relevancy;
    bool m_relevancy_isSet;
    bool m_relevancy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICategorySuggestion)

#endif // OAICategorySuggestion_H
