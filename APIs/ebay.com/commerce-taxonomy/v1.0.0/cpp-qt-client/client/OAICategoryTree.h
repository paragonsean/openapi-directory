/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICategoryTree.h
 *
 * This type contains information about all nodes of a specified eBay category tree.
 */

#ifndef OAICategoryTree_H
#define OAICategoryTree_H

#include <QJsonObject>

#include "OAICategoryTreeNode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategoryTreeNode;

class OAICategoryTree : public OAIObject {
public:
    OAICategoryTree();
    OAICategoryTree(QString json);
    ~OAICategoryTree() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getApplicableMarketplaceIds() const;
    void setApplicableMarketplaceIds(const QList<QString> &applicable_marketplace_ids);
    bool is_applicable_marketplace_ids_Set() const;
    bool is_applicable_marketplace_ids_Valid() const;

    QString getCategoryTreeId() const;
    void setCategoryTreeId(const QString &category_tree_id);
    bool is_category_tree_id_Set() const;
    bool is_category_tree_id_Valid() const;

    QString getCategoryTreeVersion() const;
    void setCategoryTreeVersion(const QString &category_tree_version);
    bool is_category_tree_version_Set() const;
    bool is_category_tree_version_Valid() const;

    OAICategoryTreeNode getRootCategoryNode() const;
    void setRootCategoryNode(const OAICategoryTreeNode &root_category_node);
    bool is_root_category_node_Set() const;
    bool is_root_category_node_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_applicable_marketplace_ids;
    bool m_applicable_marketplace_ids_isSet;
    bool m_applicable_marketplace_ids_isValid;

    QString m_category_tree_id;
    bool m_category_tree_id_isSet;
    bool m_category_tree_id_isValid;

    QString m_category_tree_version;
    bool m_category_tree_version_isSet;
    bool m_category_tree_version_isValid;

    OAICategoryTreeNode m_root_category_node;
    bool m_root_category_node_isSet;
    bool m_root_category_node_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICategoryTree)

#endif // OAICategoryTree_H
