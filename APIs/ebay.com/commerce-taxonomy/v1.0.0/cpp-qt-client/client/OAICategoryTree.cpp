/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryTree.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryTree::OAICategoryTree(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryTree::OAICategoryTree() {
    this->initializeModel();
}

OAICategoryTree::~OAICategoryTree() {}

void OAICategoryTree::initializeModel() {

    m_applicable_marketplace_ids_isSet = false;
    m_applicable_marketplace_ids_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_category_tree_version_isSet = false;
    m_category_tree_version_isValid = false;

    m_root_category_node_isSet = false;
    m_root_category_node_isValid = false;
}

void OAICategoryTree::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryTree::fromJsonObject(QJsonObject json) {

    m_applicable_marketplace_ids_isValid = ::OpenAPI::fromJsonValue(m_applicable_marketplace_ids, json[QString("applicableMarketplaceIds")]);
    m_applicable_marketplace_ids_isSet = !json[QString("applicableMarketplaceIds")].isNull() && m_applicable_marketplace_ids_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_category_tree_version_isValid = ::OpenAPI::fromJsonValue(m_category_tree_version, json[QString("categoryTreeVersion")]);
    m_category_tree_version_isSet = !json[QString("categoryTreeVersion")].isNull() && m_category_tree_version_isValid;

    m_root_category_node_isValid = ::OpenAPI::fromJsonValue(m_root_category_node, json[QString("rootCategoryNode")]);
    m_root_category_node_isSet = !json[QString("rootCategoryNode")].isNull() && m_root_category_node_isValid;
}

QString OAICategoryTree::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryTree::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_marketplace_ids.size() > 0) {
        obj.insert(QString("applicableMarketplaceIds"), ::OpenAPI::toJsonValue(m_applicable_marketplace_ids));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_category_tree_version_isSet) {
        obj.insert(QString("categoryTreeVersion"), ::OpenAPI::toJsonValue(m_category_tree_version));
    }
    if (m_root_category_node.isSet()) {
        obj.insert(QString("rootCategoryNode"), ::OpenAPI::toJsonValue(m_root_category_node));
    }
    return obj;
}

QList<QString> OAICategoryTree::getApplicableMarketplaceIds() const {
    return m_applicable_marketplace_ids;
}
void OAICategoryTree::setApplicableMarketplaceIds(const QList<QString> &applicable_marketplace_ids) {
    m_applicable_marketplace_ids = applicable_marketplace_ids;
    m_applicable_marketplace_ids_isSet = true;
}

bool OAICategoryTree::is_applicable_marketplace_ids_Set() const{
    return m_applicable_marketplace_ids_isSet;
}

bool OAICategoryTree::is_applicable_marketplace_ids_Valid() const{
    return m_applicable_marketplace_ids_isValid;
}

QString OAICategoryTree::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAICategoryTree::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAICategoryTree::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAICategoryTree::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

QString OAICategoryTree::getCategoryTreeVersion() const {
    return m_category_tree_version;
}
void OAICategoryTree::setCategoryTreeVersion(const QString &category_tree_version) {
    m_category_tree_version = category_tree_version;
    m_category_tree_version_isSet = true;
}

bool OAICategoryTree::is_category_tree_version_Set() const{
    return m_category_tree_version_isSet;
}

bool OAICategoryTree::is_category_tree_version_Valid() const{
    return m_category_tree_version_isValid;
}

OAICategoryTreeNode OAICategoryTree::getRootCategoryNode() const {
    return m_root_category_node;
}
void OAICategoryTree::setRootCategoryNode(const OAICategoryTreeNode &root_category_node) {
    m_root_category_node = root_category_node;
    m_root_category_node_isSet = true;
}

bool OAICategoryTree::is_root_category_node_Set() const{
    return m_root_category_node_isSet;
}

bool OAICategoryTree::is_root_category_node_Valid() const{
    return m_root_category_node_isValid;
}

bool OAICategoryTree::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_marketplace_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_category_node.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryTree::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
