/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryTreeNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryTreeNode::OAICategoryTreeNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryTreeNode::OAICategoryTreeNode() {
    this->initializeModel();
}

OAICategoryTreeNode::~OAICategoryTreeNode() {}

void OAICategoryTreeNode::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_tree_node_level_isSet = false;
    m_category_tree_node_level_isValid = false;

    m_child_category_tree_nodes_isSet = false;
    m_child_category_tree_nodes_isValid = false;

    m_leaf_category_tree_node_isSet = false;
    m_leaf_category_tree_node_isValid = false;

    m_parent_category_tree_node_href_isSet = false;
    m_parent_category_tree_node_href_isValid = false;
}

void OAICategoryTreeNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryTreeNode::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_tree_node_level_isValid = ::OpenAPI::fromJsonValue(m_category_tree_node_level, json[QString("categoryTreeNodeLevel")]);
    m_category_tree_node_level_isSet = !json[QString("categoryTreeNodeLevel")].isNull() && m_category_tree_node_level_isValid;

    m_child_category_tree_nodes_isValid = ::OpenAPI::fromJsonValue(m_child_category_tree_nodes, json[QString("childCategoryTreeNodes")]);
    m_child_category_tree_nodes_isSet = !json[QString("childCategoryTreeNodes")].isNull() && m_child_category_tree_nodes_isValid;

    m_leaf_category_tree_node_isValid = ::OpenAPI::fromJsonValue(m_leaf_category_tree_node, json[QString("leafCategoryTreeNode")]);
    m_leaf_category_tree_node_isSet = !json[QString("leafCategoryTreeNode")].isNull() && m_leaf_category_tree_node_isValid;

    m_parent_category_tree_node_href_isValid = ::OpenAPI::fromJsonValue(m_parent_category_tree_node_href, json[QString("parentCategoryTreeNodeHref")]);
    m_parent_category_tree_node_href_isSet = !json[QString("parentCategoryTreeNodeHref")].isNull() && m_parent_category_tree_node_href_isValid;
}

QString OAICategoryTreeNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryTreeNode::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_tree_node_level_isSet) {
        obj.insert(QString("categoryTreeNodeLevel"), ::OpenAPI::toJsonValue(m_category_tree_node_level));
    }
    if (m_child_category_tree_nodes.size() > 0) {
        obj.insert(QString("childCategoryTreeNodes"), ::OpenAPI::toJsonValue(m_child_category_tree_nodes));
    }
    if (m_leaf_category_tree_node_isSet) {
        obj.insert(QString("leafCategoryTreeNode"), ::OpenAPI::toJsonValue(m_leaf_category_tree_node));
    }
    if (m_parent_category_tree_node_href_isSet) {
        obj.insert(QString("parentCategoryTreeNodeHref"), ::OpenAPI::toJsonValue(m_parent_category_tree_node_href));
    }
    return obj;
}

OAICategory OAICategoryTreeNode::getCategory() const {
    return m_category;
}
void OAICategoryTreeNode::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICategoryTreeNode::is_category_Set() const{
    return m_category_isSet;
}

bool OAICategoryTreeNode::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAICategoryTreeNode::getCategoryTreeNodeLevel() const {
    return m_category_tree_node_level;
}
void OAICategoryTreeNode::setCategoryTreeNodeLevel(const qint32 &category_tree_node_level) {
    m_category_tree_node_level = category_tree_node_level;
    m_category_tree_node_level_isSet = true;
}

bool OAICategoryTreeNode::is_category_tree_node_level_Set() const{
    return m_category_tree_node_level_isSet;
}

bool OAICategoryTreeNode::is_category_tree_node_level_Valid() const{
    return m_category_tree_node_level_isValid;
}

QList<OAICategoryTreeNode> OAICategoryTreeNode::getChildCategoryTreeNodes() const {
    return m_child_category_tree_nodes;
}
void OAICategoryTreeNode::setChildCategoryTreeNodes(const QList<OAICategoryTreeNode> &child_category_tree_nodes) {
    m_child_category_tree_nodes = child_category_tree_nodes;
    m_child_category_tree_nodes_isSet = true;
}

bool OAICategoryTreeNode::is_child_category_tree_nodes_Set() const{
    return m_child_category_tree_nodes_isSet;
}

bool OAICategoryTreeNode::is_child_category_tree_nodes_Valid() const{
    return m_child_category_tree_nodes_isValid;
}

bool OAICategoryTreeNode::isLeafCategoryTreeNode() const {
    return m_leaf_category_tree_node;
}
void OAICategoryTreeNode::setLeafCategoryTreeNode(const bool &leaf_category_tree_node) {
    m_leaf_category_tree_node = leaf_category_tree_node;
    m_leaf_category_tree_node_isSet = true;
}

bool OAICategoryTreeNode::is_leaf_category_tree_node_Set() const{
    return m_leaf_category_tree_node_isSet;
}

bool OAICategoryTreeNode::is_leaf_category_tree_node_Valid() const{
    return m_leaf_category_tree_node_isValid;
}

QString OAICategoryTreeNode::getParentCategoryTreeNodeHref() const {
    return m_parent_category_tree_node_href;
}
void OAICategoryTreeNode::setParentCategoryTreeNodeHref(const QString &parent_category_tree_node_href) {
    m_parent_category_tree_node_href = parent_category_tree_node_href;
    m_parent_category_tree_node_href_isSet = true;
}

bool OAICategoryTreeNode::is_parent_category_tree_node_href_Set() const{
    return m_parent_category_tree_node_href_isSet;
}

bool OAICategoryTreeNode::is_parent_category_tree_node_href_Valid() const{
    return m_parent_category_tree_node_href_isValid;
}

bool OAICategoryTreeNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_node_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_category_tree_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaf_category_tree_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category_tree_node_href_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryTreeNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
