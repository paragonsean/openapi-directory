/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoryTreeApi_H
#define OAI_OAICategoryTreeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAspectMetadata.h"
#include "OAIBaseCategoryTree.h"
#include "OAICategorySubtree.h"
#include "OAICategorySuggestionResponse.h"
#include "OAICategoryTree.h"
#include "OAIGetCategoriesAspectResponse.h"
#include "OAIGetCompatibilityMetadataResponse.h"
#include "OAIGetCompatibilityPropertyValuesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoryTreeApi : public QObject {
    Q_OBJECT

public:
    OAICategoryTreeApi(const int timeOut = 0);
    ~OAICategoryTreeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category_tree_id QString [required]
    */
    virtual void fetchItemAspects(const QString &category_tree_id);

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  category_tree_id QString [required]
    */
    virtual void getCategorySubtree(const QString &category_id, const QString &category_tree_id);

    /**
    * @param[in]  category_tree_id QString [required]
    * @param[in]  q QString [required]
    */
    virtual void getCategorySuggestions(const QString &category_tree_id, const QString &q);

    /**
    * @param[in]  category_tree_id QString [required]
    */
    virtual void getCategoryTree(const QString &category_tree_id);

    /**
    * @param[in]  category_tree_id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void getCompatibilityProperties(const QString &category_tree_id, const QString &category_id);

    /**
    * @param[in]  category_tree_id QString [required]
    * @param[in]  compatibility_property QString [required]
    * @param[in]  category_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getCompatibilityPropertyValues(const QString &category_tree_id, const QString &compatibility_property, const QString &category_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void getDefaultCategoryTreeId(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  category_tree_id QString [required]
    */
    virtual void getItemAspectsForCategory(const QString &category_id, const QString &category_tree_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchItemAspectsCallback(OAIHttpRequestWorker *worker);
    void getCategorySubtreeCallback(OAIHttpRequestWorker *worker);
    void getCategorySuggestionsCallback(OAIHttpRequestWorker *worker);
    void getCategoryTreeCallback(OAIHttpRequestWorker *worker);
    void getCompatibilityPropertiesCallback(OAIHttpRequestWorker *worker);
    void getCompatibilityPropertyValuesCallback(OAIHttpRequestWorker *worker);
    void getDefaultCategoryTreeIdCallback(OAIHttpRequestWorker *worker);
    void getItemAspectsForCategoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchItemAspectsSignal(OAIGetCategoriesAspectResponse summary);
    void getCategorySubtreeSignal(OAICategorySubtree summary);
    void getCategorySuggestionsSignal(OAICategorySuggestionResponse summary);
    void getCategoryTreeSignal(OAICategoryTree summary);
    void getCompatibilityPropertiesSignal(OAIGetCompatibilityMetadataResponse summary);
    void getCompatibilityPropertyValuesSignal(OAIGetCompatibilityPropertyValuesResponse summary);
    void getDefaultCategoryTreeIdSignal(OAIBaseCategoryTree summary);
    void getItemAspectsForCategorySignal(OAIAspectMetadata summary);


    void fetchItemAspectsSignalFull(OAIHttpRequestWorker *worker, OAIGetCategoriesAspectResponse summary);
    void getCategorySubtreeSignalFull(OAIHttpRequestWorker *worker, OAICategorySubtree summary);
    void getCategorySuggestionsSignalFull(OAIHttpRequestWorker *worker, OAICategorySuggestionResponse summary);
    void getCategoryTreeSignalFull(OAIHttpRequestWorker *worker, OAICategoryTree summary);
    void getCompatibilityPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIGetCompatibilityMetadataResponse summary);
    void getCompatibilityPropertyValuesSignalFull(OAIHttpRequestWorker *worker, OAIGetCompatibilityPropertyValuesResponse summary);
    void getDefaultCategoryTreeIdSignalFull(OAIHttpRequestWorker *worker, OAIBaseCategoryTree summary);
    void getItemAspectsForCategorySignalFull(OAIHttpRequestWorker *worker, OAIAspectMetadata summary);

    Q_DECL_DEPRECATED_X("Use fetchItemAspectsSignalError() instead")
    void fetchItemAspectsSignalE(OAIGetCategoriesAspectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchItemAspectsSignalError(OAIGetCategoriesAspectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySubtreeSignalError() instead")
    void getCategorySubtreeSignalE(OAICategorySubtree summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySubtreeSignalError(OAICategorySubtree summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySuggestionsSignalError() instead")
    void getCategorySuggestionsSignalE(OAICategorySuggestionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySuggestionsSignalError(OAICategorySuggestionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryTreeSignalError() instead")
    void getCategoryTreeSignalE(OAICategoryTree summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryTreeSignalError(OAICategoryTree summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompatibilityPropertiesSignalError() instead")
    void getCompatibilityPropertiesSignalE(OAIGetCompatibilityMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompatibilityPropertiesSignalError(OAIGetCompatibilityMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompatibilityPropertyValuesSignalError() instead")
    void getCompatibilityPropertyValuesSignalE(OAIGetCompatibilityPropertyValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompatibilityPropertyValuesSignalError(OAIGetCompatibilityPropertyValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultCategoryTreeIdSignalError() instead")
    void getDefaultCategoryTreeIdSignalE(OAIBaseCategoryTree summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultCategoryTreeIdSignalError(OAIBaseCategoryTree summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemAspectsForCategorySignalError() instead")
    void getItemAspectsForCategorySignalE(OAIAspectMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemAspectsForCategorySignalError(OAIAspectMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchItemAspectsSignalErrorFull() instead")
    void fetchItemAspectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchItemAspectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySubtreeSignalErrorFull() instead")
    void getCategorySubtreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySubtreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySuggestionsSignalErrorFull() instead")
    void getCategorySuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryTreeSignalErrorFull() instead")
    void getCategoryTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompatibilityPropertiesSignalErrorFull() instead")
    void getCompatibilityPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompatibilityPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompatibilityPropertyValuesSignalErrorFull() instead")
    void getCompatibilityPropertyValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompatibilityPropertyValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultCategoryTreeIdSignalErrorFull() instead")
    void getDefaultCategoryTreeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultCategoryTreeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemAspectsForCategorySignalErrorFull() instead")
    void getItemAspectsForCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemAspectsForCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
