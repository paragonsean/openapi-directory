/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBaseCategoryTree.h
 *
 * This type contains identifying information for the category tree associated with a particular eBay marketplace.
 */

#ifndef OAIBaseCategoryTree_H
#define OAIBaseCategoryTree_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBaseCategoryTree : public OAIObject {
public:
    OAIBaseCategoryTree();
    OAIBaseCategoryTree(QString json);
    ~OAIBaseCategoryTree() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategoryTreeId() const;
    void setCategoryTreeId(const QString &category_tree_id);
    bool is_category_tree_id_Set() const;
    bool is_category_tree_id_Valid() const;

    QString getCategoryTreeVersion() const;
    void setCategoryTreeVersion(const QString &category_tree_version);
    bool is_category_tree_version_Set() const;
    bool is_category_tree_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category_tree_id;
    bool m_category_tree_id_isSet;
    bool m_category_tree_id_isValid;

    QString m_category_tree_version;
    bool m_category_tree_version_isSet;
    bool m_category_tree_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBaseCategoryTree)

#endif // OAIBaseCategoryTree_H
