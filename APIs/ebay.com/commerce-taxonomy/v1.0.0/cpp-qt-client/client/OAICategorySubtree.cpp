/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategorySubtree.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategorySubtree::OAICategorySubtree(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategorySubtree::OAICategorySubtree() {
    this->initializeModel();
}

OAICategorySubtree::~OAICategorySubtree() {}

void OAICategorySubtree::initializeModel() {

    m_category_subtree_node_isSet = false;
    m_category_subtree_node_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_category_tree_version_isSet = false;
    m_category_tree_version_isValid = false;
}

void OAICategorySubtree::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategorySubtree::fromJsonObject(QJsonObject json) {

    m_category_subtree_node_isValid = ::OpenAPI::fromJsonValue(m_category_subtree_node, json[QString("categorySubtreeNode")]);
    m_category_subtree_node_isSet = !json[QString("categorySubtreeNode")].isNull() && m_category_subtree_node_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_category_tree_version_isValid = ::OpenAPI::fromJsonValue(m_category_tree_version, json[QString("categoryTreeVersion")]);
    m_category_tree_version_isSet = !json[QString("categoryTreeVersion")].isNull() && m_category_tree_version_isValid;
}

QString OAICategorySubtree::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategorySubtree::asJsonObject() const {
    QJsonObject obj;
    if (m_category_subtree_node.isSet()) {
        obj.insert(QString("categorySubtreeNode"), ::OpenAPI::toJsonValue(m_category_subtree_node));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_category_tree_version_isSet) {
        obj.insert(QString("categoryTreeVersion"), ::OpenAPI::toJsonValue(m_category_tree_version));
    }
    return obj;
}

OAICategoryTreeNode OAICategorySubtree::getCategorySubtreeNode() const {
    return m_category_subtree_node;
}
void OAICategorySubtree::setCategorySubtreeNode(const OAICategoryTreeNode &category_subtree_node) {
    m_category_subtree_node = category_subtree_node;
    m_category_subtree_node_isSet = true;
}

bool OAICategorySubtree::is_category_subtree_node_Set() const{
    return m_category_subtree_node_isSet;
}

bool OAICategorySubtree::is_category_subtree_node_Valid() const{
    return m_category_subtree_node_isValid;
}

QString OAICategorySubtree::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAICategorySubtree::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAICategorySubtree::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAICategorySubtree::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

QString OAICategorySubtree::getCategoryTreeVersion() const {
    return m_category_tree_version;
}
void OAICategorySubtree::setCategoryTreeVersion(const QString &category_tree_version) {
    m_category_tree_version = category_tree_version;
    m_category_tree_version_isSet = true;
}

bool OAICategorySubtree::is_category_tree_version_Set() const{
    return m_category_tree_version_isSet;
}

bool OAICategorySubtree::is_category_tree_version_Valid() const{
    return m_category_tree_version_isValid;
}

bool OAICategorySubtree::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_subtree_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategorySubtree::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
