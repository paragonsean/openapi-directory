/**
 * Taxonomy API
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryAspect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryAspect::OAICategoryAspect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryAspect::OAICategoryAspect() {
    this->initializeModel();
}

OAICategoryAspect::~OAICategoryAspect() {}

void OAICategoryAspect::initializeModel() {

    m_aspects_isSet = false;
    m_aspects_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;
}

void OAICategoryAspect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryAspect::fromJsonObject(QJsonObject json) {

    m_aspects_isValid = ::OpenAPI::fromJsonValue(m_aspects, json[QString("aspects")]);
    m_aspects_isSet = !json[QString("aspects")].isNull() && m_aspects_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;
}

QString OAICategoryAspect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryAspect::asJsonObject() const {
    QJsonObject obj;
    if (m_aspects.size() > 0) {
        obj.insert(QString("aspects"), ::OpenAPI::toJsonValue(m_aspects));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    return obj;
}

QList<OAIAspect> OAICategoryAspect::getAspects() const {
    return m_aspects;
}
void OAICategoryAspect::setAspects(const QList<OAIAspect> &aspects) {
    m_aspects = aspects;
    m_aspects_isSet = true;
}

bool OAICategoryAspect::is_aspects_Set() const{
    return m_aspects_isSet;
}

bool OAICategoryAspect::is_aspects_Valid() const{
    return m_aspects_isValid;
}

OAICategory OAICategoryAspect::getCategory() const {
    return m_category;
}
void OAICategoryAspect::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICategoryAspect::is_category_Set() const{
    return m_category_isSet;
}

bool OAICategoryAspect::is_category_Valid() const{
    return m_category_isValid;
}

bool OAICategoryAspect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryAspect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
