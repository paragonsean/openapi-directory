# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect import Aspect
from openapi_server.models.category import Category
from openapi_server import util


class CategoryAspect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspects: List[Aspect]=None, category: Category=None):
        """CategoryAspect - a model defined in OpenAPI

        :param aspects: The aspects of this CategoryAspect.
        :param category: The category of this CategoryAspect.
        """
        self.openapi_types = {
            'aspects': List[Aspect],
            'category': Category
        }

        self.attribute_map = {
            'aspects': 'aspects',
            'category': 'category'
        }

        self._aspects = aspects
        self._category = category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryAspect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryAspect of this CategoryAspect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspects(self):
        """Gets the aspects of this CategoryAspect.

        A list of aspect metadata that is used to describe the items in a particular leaf category.

        :return: The aspects of this CategoryAspect.
        :rtype: List[Aspect]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this CategoryAspect.

        A list of aspect metadata that is used to describe the items in a particular leaf category.

        :param aspects: The aspects of this CategoryAspect.
        :type aspects: List[Aspect]
        """

        self._aspects = aspects

    @property
    def category(self):
        """Gets the category of this CategoryAspect.


        :return: The category of this CategoryAspect.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CategoryAspect.


        :param category: The category of this CategoryAspect.
        :type category: Category
        """

        self._category = category
