# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor_reference import AncestorReference
from openapi_server.models.category import Category
from openapi_server import util


class CategorySuggestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: Category=None, category_tree_node_ancestors: List[AncestorReference]=None, category_tree_node_level: int=None, relevancy: str=None):
        """CategorySuggestion - a model defined in OpenAPI

        :param category: The category of this CategorySuggestion.
        :param category_tree_node_ancestors: The category_tree_node_ancestors of this CategorySuggestion.
        :param category_tree_node_level: The category_tree_node_level of this CategorySuggestion.
        :param relevancy: The relevancy of this CategorySuggestion.
        """
        self.openapi_types = {
            'category': Category,
            'category_tree_node_ancestors': List[AncestorReference],
            'category_tree_node_level': int,
            'relevancy': str
        }

        self.attribute_map = {
            'category': 'category',
            'category_tree_node_ancestors': 'categoryTreeNodeAncestors',
            'category_tree_node_level': 'categoryTreeNodeLevel',
            'relevancy': 'relevancy'
        }

        self._category = category
        self._category_tree_node_ancestors = category_tree_node_ancestors
        self._category_tree_node_level = category_tree_node_level
        self._relevancy = relevancy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategorySuggestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategorySuggestion of this CategorySuggestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CategorySuggestion.


        :return: The category of this CategorySuggestion.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CategorySuggestion.


        :param category: The category of this CategorySuggestion.
        :type category: Category
        """

        self._category = category

    @property
    def category_tree_node_ancestors(self):
        """Gets the category_tree_node_ancestors of this CategorySuggestion.

        An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category's ancestry as a sequence of parent nodes, from the current node's immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.

        :return: The category_tree_node_ancestors of this CategorySuggestion.
        :rtype: List[AncestorReference]
        """
        return self._category_tree_node_ancestors

    @category_tree_node_ancestors.setter
    def category_tree_node_ancestors(self, category_tree_node_ancestors):
        """Sets the category_tree_node_ancestors of this CategorySuggestion.

        An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category's ancestry as a sequence of parent nodes, from the current node's immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.

        :param category_tree_node_ancestors: The category_tree_node_ancestors of this CategorySuggestion.
        :type category_tree_node_ancestors: List[AncestorReference]
        """

        self._category_tree_node_ancestors = category_tree_node_ancestors

    @property
    def category_tree_node_level(self):
        """Gets the category_tree_node_level of this CategorySuggestion.

        The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :return: The category_tree_node_level of this CategorySuggestion.
        :rtype: int
        """
        return self._category_tree_node_level

    @category_tree_node_level.setter
    def category_tree_node_level(self, category_tree_node_level):
        """Sets the category_tree_node_level of this CategorySuggestion.

        The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :param category_tree_node_level: The category_tree_node_level of this CategorySuggestion.
        :type category_tree_node_level: int
        """

        self._category_tree_node_level = category_tree_node_level

    @property
    def relevancy(self):
        """Gets the relevancy of this CategorySuggestion.

        This field is reserved for internal or future use.

        :return: The relevancy of this CategorySuggestion.
        :rtype: str
        """
        return self._relevancy

    @relevancy.setter
    def relevancy(self, relevancy):
        """Sets the relevancy of this CategorySuggestion.

        This field is reserved for internal or future use.

        :param relevancy: The relevancy of this CategorySuggestion.
        :type relevancy: str
        """

        self._relevancy = relevancy
