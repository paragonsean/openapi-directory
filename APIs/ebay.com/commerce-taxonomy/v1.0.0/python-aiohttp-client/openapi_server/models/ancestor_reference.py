# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AncestorReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_name: str=None, category_subtree_node_href: str=None, category_tree_node_level: int=None):
        """AncestorReference - a model defined in OpenAPI

        :param category_id: The category_id of this AncestorReference.
        :param category_name: The category_name of this AncestorReference.
        :param category_subtree_node_href: The category_subtree_node_href of this AncestorReference.
        :param category_tree_node_level: The category_tree_node_level of this AncestorReference.
        """
        self.openapi_types = {
            'category_id': str,
            'category_name': str,
            'category_subtree_node_href': str,
            'category_tree_node_level': int
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_name': 'categoryName',
            'category_subtree_node_href': 'categorySubtreeNodeHref',
            'category_tree_node_level': 'categoryTreeNodeLevel'
        }

        self._category_id = category_id
        self._category_name = category_name
        self._category_subtree_node_href = category_subtree_node_href
        self._category_tree_node_level = category_tree_node_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AncestorReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AncestorReference of this AncestorReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this AncestorReference.

        The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.

        :return: The category_id of this AncestorReference.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AncestorReference.

        The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.

        :param category_id: The category_id of this AncestorReference.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this AncestorReference.

        The name of the ancestor category identified by categoryId.

        :return: The category_name of this AncestorReference.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this AncestorReference.

        The name of the ancestor category identified by categoryId.

        :param category_name: The category_name of this AncestorReference.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def category_subtree_node_href(self):
        """Gets the category_subtree_node_href of this AncestorReference.

        The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.

        :return: The category_subtree_node_href of this AncestorReference.
        :rtype: str
        """
        return self._category_subtree_node_href

    @category_subtree_node_href.setter
    def category_subtree_node_href(self, category_subtree_node_href):
        """Sets the category_subtree_node_href of this AncestorReference.

        The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.

        :param category_subtree_node_href: The category_subtree_node_href of this AncestorReference.
        :type category_subtree_node_href: str
        """

        self._category_subtree_node_href = category_subtree_node_href

    @property
    def category_tree_node_level(self):
        """Gets the category_tree_node_level of this AncestorReference.

        The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :return: The category_tree_node_level of this AncestorReference.
        :rtype: int
        """
        return self._category_tree_node_level

    @category_tree_node_level.setter
    def category_tree_node_level(self, category_tree_node_level):
        """Sets the category_tree_node_level of this AncestorReference.

        The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :param category_tree_node_level: The category_tree_node_level of this AncestorReference.
        :type category_tree_node_level: int
        """

        self._category_tree_node_level = category_tree_node_level
