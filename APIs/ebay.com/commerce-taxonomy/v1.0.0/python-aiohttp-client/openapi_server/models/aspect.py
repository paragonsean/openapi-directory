# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect_constraint import AspectConstraint
from openapi_server.models.aspect_value import AspectValue
from openapi_server.models.relevance_indicator import RelevanceIndicator
from openapi_server import util


class Aspect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_constraint: AspectConstraint=None, aspect_values: List[AspectValue]=None, localized_aspect_name: str=None, relevance_indicator: RelevanceIndicator=None):
        """Aspect - a model defined in OpenAPI

        :param aspect_constraint: The aspect_constraint of this Aspect.
        :param aspect_values: The aspect_values of this Aspect.
        :param localized_aspect_name: The localized_aspect_name of this Aspect.
        :param relevance_indicator: The relevance_indicator of this Aspect.
        """
        self.openapi_types = {
            'aspect_constraint': AspectConstraint,
            'aspect_values': List[AspectValue],
            'localized_aspect_name': str,
            'relevance_indicator': RelevanceIndicator
        }

        self.attribute_map = {
            'aspect_constraint': 'aspectConstraint',
            'aspect_values': 'aspectValues',
            'localized_aspect_name': 'localizedAspectName',
            'relevance_indicator': 'relevanceIndicator'
        }

        self._aspect_constraint = aspect_constraint
        self._aspect_values = aspect_values
        self._localized_aspect_name = localized_aspect_name
        self._relevance_indicator = relevance_indicator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Aspect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Aspect of this Aspect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_constraint(self):
        """Gets the aspect_constraint of this Aspect.


        :return: The aspect_constraint of this Aspect.
        :rtype: AspectConstraint
        """
        return self._aspect_constraint

    @aspect_constraint.setter
    def aspect_constraint(self, aspect_constraint):
        """Sets the aspect_constraint of this Aspect.


        :param aspect_constraint: The aspect_constraint of this Aspect.
        :type aspect_constraint: AspectConstraint
        """

        self._aspect_constraint = aspect_constraint

    @property
    def aspect_values(self):
        """Gets the aspect_values of this Aspect.

        A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.

        :return: The aspect_values of this Aspect.
        :rtype: List[AspectValue]
        """
        return self._aspect_values

    @aspect_values.setter
    def aspect_values(self, aspect_values):
        """Sets the aspect_values of this Aspect.

        A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.

        :param aspect_values: The aspect_values of this Aspect.
        :type aspect_values: List[AspectValue]
        """

        self._aspect_values = aspect_values

    @property
    def localized_aspect_name(self):
        """Gets the localized_aspect_name of this Aspect.

        The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.

        :return: The localized_aspect_name of this Aspect.
        :rtype: str
        """
        return self._localized_aspect_name

    @localized_aspect_name.setter
    def localized_aspect_name(self, localized_aspect_name):
        """Sets the localized_aspect_name of this Aspect.

        The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.

        :param localized_aspect_name: The localized_aspect_name of this Aspect.
        :type localized_aspect_name: str
        """

        self._localized_aspect_name = localized_aspect_name

    @property
    def relevance_indicator(self):
        """Gets the relevance_indicator of this Aspect.


        :return: The relevance_indicator of this Aspect.
        :rtype: RelevanceIndicator
        """
        return self._relevance_indicator

    @relevance_indicator.setter
    def relevance_indicator(self, relevance_indicator):
        """Sets the relevance_indicator of this Aspect.


        :param relevance_indicator: The relevance_indicator of this Aspect.
        :type relevance_indicator: RelevanceIndicator
        """

        self._relevance_indicator = relevance_indicator
