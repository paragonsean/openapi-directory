# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server import util


class CategoryTreeNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: Category=None, category_tree_node_level: int=None, child_category_tree_nodes: List[CategoryTreeNode]=None, leaf_category_tree_node: bool=None, parent_category_tree_node_href: str=None):
        """CategoryTreeNode - a model defined in OpenAPI

        :param category: The category of this CategoryTreeNode.
        :param category_tree_node_level: The category_tree_node_level of this CategoryTreeNode.
        :param child_category_tree_nodes: The child_category_tree_nodes of this CategoryTreeNode.
        :param leaf_category_tree_node: The leaf_category_tree_node of this CategoryTreeNode.
        :param parent_category_tree_node_href: The parent_category_tree_node_href of this CategoryTreeNode.
        """
        self.openapi_types = {
            'category': Category,
            'category_tree_node_level': int,
            'child_category_tree_nodes': List[CategoryTreeNode],
            'leaf_category_tree_node': bool,
            'parent_category_tree_node_href': str
        }

        self.attribute_map = {
            'category': 'category',
            'category_tree_node_level': 'categoryTreeNodeLevel',
            'child_category_tree_nodes': 'childCategoryTreeNodes',
            'leaf_category_tree_node': 'leafCategoryTreeNode',
            'parent_category_tree_node_href': 'parentCategoryTreeNodeHref'
        }

        self._category = category
        self._category_tree_node_level = category_tree_node_level
        self._child_category_tree_nodes = child_category_tree_nodes
        self._leaf_category_tree_node = leaf_category_tree_node
        self._parent_category_tree_node_href = parent_category_tree_node_href

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryTreeNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryTreeNode of this CategoryTreeNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CategoryTreeNode.


        :return: The category of this CategoryTreeNode.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CategoryTreeNode.


        :param category: The category of this CategoryTreeNode.
        :type category: Category
        """

        self._category = category

    @property
    def category_tree_node_level(self):
        """Gets the category_tree_node_level of this CategoryTreeNode.

        The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :return: The category_tree_node_level of this CategoryTreeNode.
        :rtype: int
        """
        return self._category_tree_node_level

    @category_tree_node_level.setter
    def category_tree_node_level(self, category_tree_node_level):
        """Sets the category_tree_node_level of this CategoryTreeNode.

        The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.

        :param category_tree_node_level: The category_tree_node_level of this CategoryTreeNode.
        :type category_tree_node_level: int
        """

        self._category_tree_node_level = category_tree_node_level

    @property
    def child_category_tree_nodes(self):
        """Gets the child_category_tree_nodes of this CategoryTreeNode.

        An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).

        :return: The child_category_tree_nodes of this CategoryTreeNode.
        :rtype: List[CategoryTreeNode]
        """
        return self._child_category_tree_nodes

    @child_category_tree_nodes.setter
    def child_category_tree_nodes(self, child_category_tree_nodes):
        """Sets the child_category_tree_nodes of this CategoryTreeNode.

        An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).

        :param child_category_tree_nodes: The child_category_tree_nodes of this CategoryTreeNode.
        :type child_category_tree_nodes: List[CategoryTreeNode]
        """

        self._child_category_tree_nodes = child_category_tree_nodes

    @property
    def leaf_category_tree_node(self):
        """Gets the leaf_category_tree_node of this CategoryTreeNode.

        A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.

        :return: The leaf_category_tree_node of this CategoryTreeNode.
        :rtype: bool
        """
        return self._leaf_category_tree_node

    @leaf_category_tree_node.setter
    def leaf_category_tree_node(self, leaf_category_tree_node):
        """Sets the leaf_category_tree_node of this CategoryTreeNode.

        A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.

        :param leaf_category_tree_node: The leaf_category_tree_node of this CategoryTreeNode.
        :type leaf_category_tree_node: bool
        """

        self._leaf_category_tree_node = leaf_category_tree_node

    @property
    def parent_category_tree_node_href(self):
        """Gets the parent_category_tree_node_href of this CategoryTreeNode.

        The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.

        :return: The parent_category_tree_node_href of this CategoryTreeNode.
        :rtype: str
        """
        return self._parent_category_tree_node_href

    @parent_category_tree_node_href.setter
    def parent_category_tree_node_href(self, parent_category_tree_node_href):
        """Sets the parent_category_tree_node_href of this CategoryTreeNode.

        The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.

        :param parent_category_tree_node_href: The parent_category_tree_node_href of this CategoryTreeNode.
        :type parent_category_tree_node_href: str
        """

        self._parent_category_tree_node_href = parent_category_tree_node_href
