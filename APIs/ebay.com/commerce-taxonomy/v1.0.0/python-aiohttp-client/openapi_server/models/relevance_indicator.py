# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelevanceIndicator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_count: int=None):
        """RelevanceIndicator - a model defined in OpenAPI

        :param search_count: The search_count of this RelevanceIndicator.
        """
        self.openapi_types = {
            'search_count': int
        }

        self.attribute_map = {
            'search_count': 'searchCount'
        }

        self._search_count = search_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelevanceIndicator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelevanceIndicator of this RelevanceIndicator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_count(self):
        """Gets the search_count of this RelevanceIndicator.

        The number of recent searches (based on 30 days of data) for the aspect.

        :return: The search_count of this RelevanceIndicator.
        :rtype: int
        """
        return self._search_count

    @search_count.setter
    def search_count(self, search_count):
        """Sets the search_count of this RelevanceIndicator.

        The number of recent searches (based on 30 days of data) for the aspect.

        :param search_count: The search_count of this RelevanceIndicator.
        :type search_count: int
        """

        self._search_count = search_count
