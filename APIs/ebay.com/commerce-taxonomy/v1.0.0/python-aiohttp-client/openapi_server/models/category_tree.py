# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_tree_node import CategoryTreeNode
from openapi_server import util


class CategoryTree(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_marketplace_ids: List[str]=None, category_tree_id: str=None, category_tree_version: str=None, root_category_node: CategoryTreeNode=None):
        """CategoryTree - a model defined in OpenAPI

        :param applicable_marketplace_ids: The applicable_marketplace_ids of this CategoryTree.
        :param category_tree_id: The category_tree_id of this CategoryTree.
        :param category_tree_version: The category_tree_version of this CategoryTree.
        :param root_category_node: The root_category_node of this CategoryTree.
        """
        self.openapi_types = {
            'applicable_marketplace_ids': List[str],
            'category_tree_id': str,
            'category_tree_version': str,
            'root_category_node': CategoryTreeNode
        }

        self.attribute_map = {
            'applicable_marketplace_ids': 'applicableMarketplaceIds',
            'category_tree_id': 'categoryTreeId',
            'category_tree_version': 'categoryTreeVersion',
            'root_category_node': 'rootCategoryNode'
        }

        self._applicable_marketplace_ids = applicable_marketplace_ids
        self._category_tree_id = category_tree_id
        self._category_tree_version = category_tree_version
        self._root_category_node = root_category_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryTree':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryTree of this CategoryTree.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_marketplace_ids(self):
        """Gets the applicable_marketplace_ids of this CategoryTree.

        A list of one or more identifiers of the eBay marketplaces that use this category tree.

        :return: The applicable_marketplace_ids of this CategoryTree.
        :rtype: List[str]
        """
        return self._applicable_marketplace_ids

    @applicable_marketplace_ids.setter
    def applicable_marketplace_ids(self, applicable_marketplace_ids):
        """Sets the applicable_marketplace_ids of this CategoryTree.

        A list of one or more identifiers of the eBay marketplaces that use this category tree.

        :param applicable_marketplace_ids: The applicable_marketplace_ids of this CategoryTree.
        :type applicable_marketplace_ids: List[str]
        """

        self._applicable_marketplace_ids = applicable_marketplace_ids

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this CategoryTree.

        The unique identifier of this eBay category tree.

        :return: The category_tree_id of this CategoryTree.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this CategoryTree.

        The unique identifier of this eBay category tree.

        :param category_tree_id: The category_tree_id of this CategoryTree.
        :type category_tree_id: str
        """

        self._category_tree_id = category_tree_id

    @property
    def category_tree_version(self):
        """Gets the category_tree_version of this CategoryTree.

        The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.

        :return: The category_tree_version of this CategoryTree.
        :rtype: str
        """
        return self._category_tree_version

    @category_tree_version.setter
    def category_tree_version(self, category_tree_version):
        """Sets the category_tree_version of this CategoryTree.

        The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.

        :param category_tree_version: The category_tree_version of this CategoryTree.
        :type category_tree_version: str
        """

        self._category_tree_version = category_tree_version

    @property
    def root_category_node(self):
        """Gets the root_category_node of this CategoryTree.


        :return: The root_category_node of this CategoryTree.
        :rtype: CategoryTreeNode
        """
        return self._root_category_node

    @root_category_node.setter
    def root_category_node(self, root_category_node):
        """Sets the root_category_node of this CategoryTree.


        :param root_category_node: The root_category_node of this CategoryTree.
        :type root_category_node: CategoryTreeNode
        """

        self._root_category_node = root_category_node
