# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect import Aspect
from openapi_server import util


class AspectMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspects: List[Aspect]=None):
        """AspectMetadata - a model defined in OpenAPI

        :param aspects: The aspects of this AspectMetadata.
        """
        self.openapi_types = {
            'aspects': List[Aspect]
        }

        self.attribute_map = {
            'aspects': 'aspects'
        }

        self._aspects = aspects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AspectMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AspectMetadata of this AspectMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspects(self):
        """Gets the aspects of this AspectMetadata.

        A list of item aspects (for example, color) that are appropriate or necessary for accurately describing items in a particular leaf category. Each category has a different set of aspects and different requirements for aspect values. Sellers are required or encouraged to provide one or more acceptable values for each aspect when offering an item in that category on eBay.

        :return: The aspects of this AspectMetadata.
        :rtype: List[Aspect]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this AspectMetadata.

        A list of item aspects (for example, color) that are appropriate or necessary for accurately describing items in a particular leaf category. Each category has a different set of aspects and different requirements for aspect values. Sellers are required or encouraged to provide one or more acceptable values for each aspect when offering an item in that category on eBay.

        :param aspects: The aspects of this AspectMetadata.
        :type aspects: List[Aspect]
        """

        self._aspects = aspects
