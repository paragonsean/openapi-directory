# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_constraint import ValueConstraint
from openapi_server import util


class AspectValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, localized_value: str=None, value_constraints: List[ValueConstraint]=None):
        """AspectValue - a model defined in OpenAPI

        :param localized_value: The localized_value of this AspectValue.
        :param value_constraints: The value_constraints of this AspectValue.
        """
        self.openapi_types = {
            'localized_value': str,
            'value_constraints': List[ValueConstraint]
        }

        self.attribute_map = {
            'localized_value': 'localizedValue',
            'value_constraints': 'valueConstraints'
        }

        self._localized_value = localized_value
        self._value_constraints = value_constraints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AspectValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AspectValue of this AspectValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def localized_value(self):
        """Gets the localized_value of this AspectValue.

        The localized value of this aspect. Note: This value is always localized for the specified marketplace.

        :return: The localized_value of this AspectValue.
        :rtype: str
        """
        return self._localized_value

    @localized_value.setter
    def localized_value(self, localized_value):
        """Sets the localized_value of this AspectValue.

        The localized value of this aspect. Note: This value is always localized for the specified marketplace.

        :param localized_value: The localized_value of this AspectValue.
        :type localized_value: str
        """

        self._localized_value = localized_value

    @property
    def value_constraints(self):
        """Gets the value_constraints of this AspectValue.

        Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.

        :return: The value_constraints of this AspectValue.
        :rtype: List[ValueConstraint]
        """
        return self._value_constraints

    @value_constraints.setter
    def value_constraints(self, value_constraints):
        """Sets the value_constraints of this AspectValue.

        Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.

        :param value_constraints: The value_constraints of this AspectValue.
        :type value_constraints: List[ValueConstraint]
        """

        self._value_constraints = value_constraints
