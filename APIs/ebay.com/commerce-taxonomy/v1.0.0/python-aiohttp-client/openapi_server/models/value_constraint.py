# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValueConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_for_localized_aspect_name: str=None, applicable_for_localized_aspect_values: List[str]=None):
        """ValueConstraint - a model defined in OpenAPI

        :param applicable_for_localized_aspect_name: The applicable_for_localized_aspect_name of this ValueConstraint.
        :param applicable_for_localized_aspect_values: The applicable_for_localized_aspect_values of this ValueConstraint.
        """
        self.openapi_types = {
            'applicable_for_localized_aspect_name': str,
            'applicable_for_localized_aspect_values': List[str]
        }

        self.attribute_map = {
            'applicable_for_localized_aspect_name': 'applicableForLocalizedAspectName',
            'applicable_for_localized_aspect_values': 'applicableForLocalizedAspectValues'
        }

        self._applicable_for_localized_aspect_name = applicable_for_localized_aspect_name
        self._applicable_for_localized_aspect_values = applicable_for_localized_aspect_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueConstraint of this ValueConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_for_localized_aspect_name(self):
        """Gets the applicable_for_localized_aspect_name of this ValueConstraint.

        The name of the control aspect on which the current aspect value depends.

        :return: The applicable_for_localized_aspect_name of this ValueConstraint.
        :rtype: str
        """
        return self._applicable_for_localized_aspect_name

    @applicable_for_localized_aspect_name.setter
    def applicable_for_localized_aspect_name(self, applicable_for_localized_aspect_name):
        """Sets the applicable_for_localized_aspect_name of this ValueConstraint.

        The name of the control aspect on which the current aspect value depends.

        :param applicable_for_localized_aspect_name: The applicable_for_localized_aspect_name of this ValueConstraint.
        :type applicable_for_localized_aspect_name: str
        """

        self._applicable_for_localized_aspect_name = applicable_for_localized_aspect_name

    @property
    def applicable_for_localized_aspect_values(self):
        """Gets the applicable_for_localized_aspect_values of this ValueConstraint.

        Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.

        :return: The applicable_for_localized_aspect_values of this ValueConstraint.
        :rtype: List[str]
        """
        return self._applicable_for_localized_aspect_values

    @applicable_for_localized_aspect_values.setter
    def applicable_for_localized_aspect_values(self, applicable_for_localized_aspect_values):
        """Sets the applicable_for_localized_aspect_values of this ValueConstraint.

        Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.

        :param applicable_for_localized_aspect_values: The applicable_for_localized_aspect_values of this ValueConstraint.
        :type applicable_for_localized_aspect_values: List[str]
        """

        self._applicable_for_localized_aspect_values = applicable_for_localized_aspect_values
