/*
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to identify the charitable organization that will receive a percentage of sale proceeds for each sale generated by the listing. This container also includes the donation percentage, which is the percentage of the sale proceeds that the charitable organization will get. In order to receive a percentage of the sales proceeds, the non-profit organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:04.411804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Charity {
  public static final String SERIALIZED_NAME_CHARITY_ID = "charityId";
  @SerializedName(SERIALIZED_NAME_CHARITY_ID)
  private String charityId;

  public static final String SERIALIZED_NAME_DONATION_PERCENTAGE = "donationPercentage";
  @SerializedName(SERIALIZED_NAME_DONATION_PERCENTAGE)
  private String donationPercentage;

  public Charity() {
  }

  public Charity charityId(String charityId) {
    this.charityId = charityId;
    return this;
  }

  /**
   * The eBay-assigned unique identifier of the charitable organization that will receive a percentage of the sales proceeds. The charitable organization must be reqistered with the PayPal Giving Fund in order to receive sales proceeds through eBay listings. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. The eBay-assigned unique identifier of a charitable organization can be found using the GetCharities call of the Trading API. In the GetCharities call response, this unique identifier is shown in the id attribute of the Charity container.
   * @return charityId
   */
  @javax.annotation.Nullable
  public String getCharityId() {
    return charityId;
  }

  public void setCharityId(String charityId) {
    this.charityId = charityId;
  }


  public Charity donationPercentage(String donationPercentage) {
    this.donationPercentage = donationPercentage;
    return this;
  }

  /**
   * This field sets the percentage of the purchase price that the charitable organization (identified in the charityId field) will receive for each sale that the listing generates. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. This numeric value can range from 10 to 100, and in any 5 (percent) increments in between this range (e.g. 10, 15, 20...95,... 100). The seller would pass in 10 for 10 percent, 15 for 15 percent, 20 for 20 percent, and so on, all the way to 100 for 100 percent. Note: For this field, createItemDraft will only validate that a positive integer value is supplied, so the listing draft will still be successfully created (with no error or warning message) if a non-supported value is specified. However, if the seller attempted to publish this listing draft with an unsupported value, the charity information would just be dropped from the listing.
   * @return donationPercentage
   */
  @javax.annotation.Nullable
  public String getDonationPercentage() {
    return donationPercentage;
  }

  public void setDonationPercentage(String donationPercentage) {
    this.donationPercentage = donationPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Charity charity = (Charity) o;
    return Objects.equals(this.charityId, charity.charityId) &&
        Objects.equals(this.donationPercentage, charity.donationPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charityId, donationPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Charity {\n");
    sb.append("    charityId: ").append(toIndentedString(charityId)).append("\n");
    sb.append("    donationPercentage: ").append(toIndentedString(donationPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charityId");
    openapiFields.add("donationPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Charity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Charity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Charity is not found in the empty JSON string", Charity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Charity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Charity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("charityId") != null && !jsonObj.get("charityId").isJsonNull()) && !jsonObj.get("charityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charityId").toString()));
      }
      if ((jsonObj.get("donationPercentage") != null && !jsonObj.get("donationPercentage").isJsonNull()) && !jsonObj.get("donationPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `donationPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("donationPercentage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Charity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Charity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Charity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Charity.class));

       return (TypeAdapter<T>) new TypeAdapter<Charity>() {
           @Override
           public void write(JsonWriter out, Charity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Charity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Charity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Charity
   * @throws IOException if the JSON string is invalid with respect to Charity
   */
  public static Charity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Charity.class);
  }

  /**
   * Convert an instance of Charity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

