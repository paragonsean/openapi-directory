/*
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Charity;
import org.openapitools.client.model.PricingSummary;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the listing details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:04.411804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemDraft {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CHARITY = "charity";
  @SerializedName(SERIALIZED_NAME_CHARITY)
  private Charity charity;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_PRICING_SUMMARY = "pricingSummary";
  @SerializedName(SERIALIZED_NAME_PRICING_SUMMARY)
  private PricingSummary pricingSummary;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private Product product;

  public ItemDraft() {
  }

  public ItemDraft categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The ID of the leaf category associated with this item. A leaf category is the lowest level in that category and has no children. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ItemDraft charity(Charity charity) {
    this.charity = charity;
    return this;
  }

  /**
   * Get charity
   * @return charity
   */
  @javax.annotation.Nullable
  public Charity getCharity() {
    return charity;
  }

  public void setCharity(Charity charity) {
    this.charity = charity;
  }


  public ItemDraft condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * The enumeration value passed in here sets the condition of the item, such as NEW or USED_EXCELLENT. See ConditionEnum for the full list of supported values. Supported item conditions can vary by eBay category. To see which item conditions are supported for a category, you can use the getItemConditionPolicies method of the Metadata API. Note: The &#39;Manufacturer Refurbished&#39; item condition is no longer a valid item condition in any eBay marketplace, and to reflect this change, the pre-existing MANUFACTURER_REFURBISHED enumeration value has been replaced by the CERTIFIED_REFURBISHED enumeration value. CR-eligible sellers should make a note to start using CERTIFIED_REFURBISHED from this point forward. To list an item as &#39;Certified Refurbished&#39;, a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition. Any seller that is interested in eligibility requirements to list with &#39;Certified Refurbished&#39; should see the Certified refurbished program page in Seller Center. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/listing/types/api:ConditionEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public ItemDraft format(String format) {
    this.format = format;
    return this;
  }

  /**
   * The format of the listing. Valid Values: FIXED_PRICE and AUCTION For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/listing/types/api:ListingFormatEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public ItemDraft pricingSummary(PricingSummary pricingSummary) {
    this.pricingSummary = pricingSummary;
    return this;
  }

  /**
   * Get pricingSummary
   * @return pricingSummary
   */
  @javax.annotation.Nullable
  public PricingSummary getPricingSummary() {
    return pricingSummary;
  }

  public void setPricingSummary(PricingSummary pricingSummary) {
    this.pricingSummary = pricingSummary;
  }


  public ItemDraft product(Product product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDraft itemDraft = (ItemDraft) o;
    return Objects.equals(this.categoryId, itemDraft.categoryId) &&
        Objects.equals(this.charity, itemDraft.charity) &&
        Objects.equals(this.condition, itemDraft.condition) &&
        Objects.equals(this.format, itemDraft.format) &&
        Objects.equals(this.pricingSummary, itemDraft.pricingSummary) &&
        Objects.equals(this.product, itemDraft.product);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, charity, condition, format, pricingSummary, product);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDraft {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    charity: ").append(toIndentedString(charity)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    pricingSummary: ").append(toIndentedString(pricingSummary)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("charity");
    openapiFields.add("condition");
    openapiFields.add("format");
    openapiFields.add("pricingSummary");
    openapiFields.add("product");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemDraft
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemDraft.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemDraft is not found in the empty JSON string", ItemDraft.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemDraft.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemDraft` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      // validate the optional field `charity`
      if (jsonObj.get("charity") != null && !jsonObj.get("charity").isJsonNull()) {
        Charity.validateJsonElement(jsonObj.get("charity"));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `pricingSummary`
      if (jsonObj.get("pricingSummary") != null && !jsonObj.get("pricingSummary").isJsonNull()) {
        PricingSummary.validateJsonElement(jsonObj.get("pricingSummary"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        Product.validateJsonElement(jsonObj.get("product"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemDraft.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemDraft' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemDraft> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemDraft.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemDraft>() {
           @Override
           public void write(JsonWriter out, ItemDraft value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemDraft read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemDraft given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemDraft
   * @throws IOException if the JSON string is invalid with respect to ItemDraft
   */
  public static ItemDraft fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemDraft.class);
  }

  /**
   * Convert an instance of ItemDraft to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

