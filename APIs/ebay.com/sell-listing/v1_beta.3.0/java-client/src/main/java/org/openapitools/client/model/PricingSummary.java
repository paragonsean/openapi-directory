/*
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the price details for an item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:04.411804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingSummary {
  public static final String SERIALIZED_NAME_AUCTION_RESERVE_PRICE = "auctionReservePrice";
  @SerializedName(SERIALIZED_NAME_AUCTION_RESERVE_PRICE)
  private Amount auctionReservePrice;

  public static final String SERIALIZED_NAME_AUCTION_START_PRICE = "auctionStartPrice";
  @SerializedName(SERIALIZED_NAME_AUCTION_START_PRICE)
  private Amount auctionStartPrice;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Amount price;

  public PricingSummary() {
  }

  public PricingSummary auctionReservePrice(Amount auctionReservePrice) {
    this.auctionReservePrice = auctionReservePrice;
    return this;
  }

  /**
   * Get auctionReservePrice
   * @return auctionReservePrice
   */
  @javax.annotation.Nullable
  public Amount getAuctionReservePrice() {
    return auctionReservePrice;
  }

  public void setAuctionReservePrice(Amount auctionReservePrice) {
    this.auctionReservePrice = auctionReservePrice;
  }


  public PricingSummary auctionStartPrice(Amount auctionStartPrice) {
    this.auctionStartPrice = auctionStartPrice;
    return this;
  }

  /**
   * Get auctionStartPrice
   * @return auctionStartPrice
   */
  @javax.annotation.Nullable
  public Amount getAuctionStartPrice() {
    return auctionStartPrice;
  }

  public void setAuctionStartPrice(Amount auctionStartPrice) {
    this.auctionStartPrice = auctionStartPrice;
  }


  public PricingSummary price(Amount price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Amount getPrice() {
    return price;
  }

  public void setPrice(Amount price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingSummary pricingSummary = (PricingSummary) o;
    return Objects.equals(this.auctionReservePrice, pricingSummary.auctionReservePrice) &&
        Objects.equals(this.auctionStartPrice, pricingSummary.auctionStartPrice) &&
        Objects.equals(this.price, pricingSummary.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auctionReservePrice, auctionStartPrice, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingSummary {\n");
    sb.append("    auctionReservePrice: ").append(toIndentedString(auctionReservePrice)).append("\n");
    sb.append("    auctionStartPrice: ").append(toIndentedString(auctionStartPrice)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auctionReservePrice");
    openapiFields.add("auctionStartPrice");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingSummary is not found in the empty JSON string", PricingSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auctionReservePrice`
      if (jsonObj.get("auctionReservePrice") != null && !jsonObj.get("auctionReservePrice").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("auctionReservePrice"));
      }
      // validate the optional field `auctionStartPrice`
      if (jsonObj.get("auctionStartPrice") != null && !jsonObj.get("auctionStartPrice").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("auctionStartPrice"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("price"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingSummary>() {
           @Override
           public void write(JsonWriter out, PricingSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingSummary
   * @throws IOException if the JSON string is invalid with respect to PricingSummary
   */
  public static PricingSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingSummary.class);
  }

  /**
   * Convert an instance of PricingSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

