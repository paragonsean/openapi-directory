/*
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the field for the createItemDraft response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:04.411804-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemDraftResponse {
  public static final String SERIALIZED_NAME_ITEM_DRAFT_ID = "itemDraftId";
  @SerializedName(SERIALIZED_NAME_ITEM_DRAFT_ID)
  private String itemDraftId;

  public static final String SERIALIZED_NAME_SELL_FLOW_NATIVE_URI = "sellFlowNativeUri";
  @SerializedName(SERIALIZED_NAME_SELL_FLOW_NATIVE_URI)
  private String sellFlowNativeUri;

  public static final String SERIALIZED_NAME_SELL_FLOW_URL = "sellFlowUrl";
  @SerializedName(SERIALIZED_NAME_SELL_FLOW_URL)
  private String sellFlowUrl;

  public ItemDraftResponse() {
  }

  public ItemDraftResponse itemDraftId(String itemDraftId) {
    this.itemDraftId = itemDraftId;
    return this;
  }

  /**
   * The eBay generated ID of the listing draft.
   * @return itemDraftId
   */
  @javax.annotation.Nullable
  public String getItemDraftId() {
    return itemDraftId;
  }

  public void setItemDraftId(String itemDraftId) {
    this.itemDraftId = itemDraftId;
  }


  public ItemDraftResponse sellFlowNativeUri(String sellFlowNativeUri) {
    this.sellFlowNativeUri = sellFlowNativeUri;
    return this;
  }

  /**
   * The URI the Partner uses to send the seller to their listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. This is returned when the seller is using a mobile app.
   * @return sellFlowNativeUri
   */
  @javax.annotation.Nullable
  public String getSellFlowNativeUri() {
    return sellFlowNativeUri;
  }

  public void setSellFlowNativeUri(String sellFlowNativeUri) {
    this.sellFlowNativeUri = sellFlowNativeUri;
  }


  public ItemDraftResponse sellFlowUrl(String sellFlowUrl) {
    this.sellFlowUrl = sellFlowUrl;
    return this;
  }

  /**
   * The web URL the Partner uses to send the seller to the listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. This is returned when the seller is using mobile web (mweb) or the desktop web. Note: You must construct the URL using the URL returned in this field and a session token. For example: sellFlowUrl?id_token&#x3D;session_token
   * @return sellFlowUrl
   */
  @javax.annotation.Nullable
  public String getSellFlowUrl() {
    return sellFlowUrl;
  }

  public void setSellFlowUrl(String sellFlowUrl) {
    this.sellFlowUrl = sellFlowUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDraftResponse itemDraftResponse = (ItemDraftResponse) o;
    return Objects.equals(this.itemDraftId, itemDraftResponse.itemDraftId) &&
        Objects.equals(this.sellFlowNativeUri, itemDraftResponse.sellFlowNativeUri) &&
        Objects.equals(this.sellFlowUrl, itemDraftResponse.sellFlowUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemDraftId, sellFlowNativeUri, sellFlowUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDraftResponse {\n");
    sb.append("    itemDraftId: ").append(toIndentedString(itemDraftId)).append("\n");
    sb.append("    sellFlowNativeUri: ").append(toIndentedString(sellFlowNativeUri)).append("\n");
    sb.append("    sellFlowUrl: ").append(toIndentedString(sellFlowUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemDraftId");
    openapiFields.add("sellFlowNativeUri");
    openapiFields.add("sellFlowUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemDraftResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemDraftResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemDraftResponse is not found in the empty JSON string", ItemDraftResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemDraftResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemDraftResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("itemDraftId") != null && !jsonObj.get("itemDraftId").isJsonNull()) && !jsonObj.get("itemDraftId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemDraftId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemDraftId").toString()));
      }
      if ((jsonObj.get("sellFlowNativeUri") != null && !jsonObj.get("sellFlowNativeUri").isJsonNull()) && !jsonObj.get("sellFlowNativeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellFlowNativeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellFlowNativeUri").toString()));
      }
      if ((jsonObj.get("sellFlowUrl") != null && !jsonObj.get("sellFlowUrl").isJsonNull()) && !jsonObj.get("sellFlowUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellFlowUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellFlowUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemDraftResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemDraftResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemDraftResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemDraftResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemDraftResponse>() {
           @Override
           public void write(JsonWriter out, ItemDraftResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemDraftResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemDraftResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemDraftResponse
   * @throws IOException if the JSON string is invalid with respect to ItemDraftResponse
   */
  public static ItemDraftResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemDraftResponse.class);
  }

  /**
   * Convert an instance of ItemDraftResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

