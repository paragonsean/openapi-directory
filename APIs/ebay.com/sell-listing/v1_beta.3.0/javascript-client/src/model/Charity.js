/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Charity model module.
 * @module model/Charity
 * @version v1_beta.3.0
 */
class Charity {
    /**
     * Constructs a new <code>Charity</code>.
     * This type is used to identify the charitable organization that will receive a percentage of sale proceeds for each sale generated by the listing. This container also includes the donation percentage, which is the percentage of the sale proceeds that the charitable organization will get. In order to receive a percentage of the sales proceeds, the non-profit organization must be registered with the PayPal Giving Fund, which is a partner of eBay for Charity.
     * @alias module:model/Charity
     */
    constructor() { 
        
        Charity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Charity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Charity} obj Optional instance to populate.
     * @return {module:model/Charity} The populated <code>Charity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Charity();

            if (data.hasOwnProperty('charityId')) {
                obj['charityId'] = ApiClient.convertToType(data['charityId'], 'String');
            }
            if (data.hasOwnProperty('donationPercentage')) {
                obj['donationPercentage'] = ApiClient.convertToType(data['donationPercentage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Charity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Charity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['charityId'] && !(typeof data['charityId'] === 'string' || data['charityId'] instanceof String)) {
            throw new Error("Expected the field `charityId` to be a primitive type in the JSON string but got " + data['charityId']);
        }
        // ensure the json data is a string
        if (data['donationPercentage'] && !(typeof data['donationPercentage'] === 'string' || data['donationPercentage'] instanceof String)) {
            throw new Error("Expected the field `donationPercentage` to be a primitive type in the JSON string but got " + data['donationPercentage']);
        }

        return true;
    }


}



/**
 * The eBay-assigned unique identifier of the charitable organization that will receive a percentage of the sales proceeds. The charitable organization must be reqistered with the PayPal Giving Fund in order to receive sales proceeds through eBay listings. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. The eBay-assigned unique identifier of a charitable organization can be found using the GetCharities call of the Trading API. In the GetCharities call response, this unique identifier is shown in the id attribute of the Charity container.
 * @member {String} charityId
 */
Charity.prototype['charityId'] = undefined;

/**
 * This field sets the percentage of the purchase price that the charitable organization (identified in the charityId field) will receive for each sale that the listing generates. This field is conditionally required if a seller is planning on donating a percentage of the sale proceeds to a charitable organization. This numeric value can range from 10 to 100, and in any 5 (percent) increments in between this range (e.g. 10, 15, 20...95,... 100). The seller would pass in 10 for 10 percent, 15 for 15 percent, 20 for 20 percent, and so on, all the way to 100 for 100 percent. Note: For this field, createItemDraft will only validate that a positive integer value is supplied, so the listing draft will still be successfully created (with no error or warning message) if a non-supported value is specified. However, if the seller attempted to publish this listing draft with an unsupported value, the charity information would just be dropped from the listing.
 * @member {String} donationPercentage
 */
Charity.prototype['donationPercentage'] = undefined;






export default Charity;

