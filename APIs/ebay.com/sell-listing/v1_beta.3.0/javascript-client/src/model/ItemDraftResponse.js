/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemDraftResponse model module.
 * @module model/ItemDraftResponse
 * @version v1_beta.3.0
 */
class ItemDraftResponse {
    /**
     * Constructs a new <code>ItemDraftResponse</code>.
     * The type that defines the field for the createItemDraft response.
     * @alias module:model/ItemDraftResponse
     */
    constructor() { 
        
        ItemDraftResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemDraftResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemDraftResponse} obj Optional instance to populate.
     * @return {module:model/ItemDraftResponse} The populated <code>ItemDraftResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemDraftResponse();

            if (data.hasOwnProperty('itemDraftId')) {
                obj['itemDraftId'] = ApiClient.convertToType(data['itemDraftId'], 'String');
            }
            if (data.hasOwnProperty('sellFlowNativeUri')) {
                obj['sellFlowNativeUri'] = ApiClient.convertToType(data['sellFlowNativeUri'], 'String');
            }
            if (data.hasOwnProperty('sellFlowUrl')) {
                obj['sellFlowUrl'] = ApiClient.convertToType(data['sellFlowUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemDraftResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemDraftResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['itemDraftId'] && !(typeof data['itemDraftId'] === 'string' || data['itemDraftId'] instanceof String)) {
            throw new Error("Expected the field `itemDraftId` to be a primitive type in the JSON string but got " + data['itemDraftId']);
        }
        // ensure the json data is a string
        if (data['sellFlowNativeUri'] && !(typeof data['sellFlowNativeUri'] === 'string' || data['sellFlowNativeUri'] instanceof String)) {
            throw new Error("Expected the field `sellFlowNativeUri` to be a primitive type in the JSON string but got " + data['sellFlowNativeUri']);
        }
        // ensure the json data is a string
        if (data['sellFlowUrl'] && !(typeof data['sellFlowUrl'] === 'string' || data['sellFlowUrl'] instanceof String)) {
            throw new Error("Expected the field `sellFlowUrl` to be a primitive type in the JSON string but got " + data['sellFlowUrl']);
        }

        return true;
    }


}



/**
 * The eBay generated ID of the listing draft.
 * @member {String} itemDraftId
 */
ItemDraftResponse.prototype['itemDraftId'] = undefined;

/**
 * The URI the Partner uses to send the seller to their listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. This is returned when the seller is using a mobile app.
 * @member {String} sellFlowNativeUri
 */
ItemDraftResponse.prototype['sellFlowNativeUri'] = undefined;

/**
 * The web URL the Partner uses to send the seller to the listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. This is returned when the seller is using mobile web (mweb) or the desktop web. Note: You must construct the URL using the URL returned in this field and a session token. For example: sellFlowUrl?id_token=session_token
 * @member {String} sellFlowUrl
 */
ItemDraftResponse.prototype['sellFlowUrl'] = undefined;






export default ItemDraftResponse;

