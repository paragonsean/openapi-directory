/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Charity from './Charity';
import PricingSummary from './PricingSummary';
import Product from './Product';

/**
 * The ItemDraft model module.
 * @module model/ItemDraft
 * @version v1_beta.3.0
 */
class ItemDraft {
    /**
     * Constructs a new <code>ItemDraft</code>.
     * The type that defines the fields for the listing details.
     * @alias module:model/ItemDraft
     */
    constructor() { 
        
        ItemDraft.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemDraft</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemDraft} obj Optional instance to populate.
     * @return {module:model/ItemDraft} The populated <code>ItemDraft</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemDraft();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('charity')) {
                obj['charity'] = Charity.constructFromObject(data['charity']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('pricingSummary')) {
                obj['pricingSummary'] = PricingSummary.constructFromObject(data['pricingSummary']);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = Product.constructFromObject(data['product']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemDraft</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemDraft</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // validate the optional field `charity`
        if (data['charity']) { // data not null
          Charity.validateJSON(data['charity']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `pricingSummary`
        if (data['pricingSummary']) { // data not null
          PricingSummary.validateJSON(data['pricingSummary']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          Product.validateJSON(data['product']);
        }

        return true;
    }


}



/**
 * The ID of the leaf category associated with this item. A leaf category is the lowest level in that category and has no children. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored.
 * @member {String} categoryId
 */
ItemDraft.prototype['categoryId'] = undefined;

/**
 * @member {module:model/Charity} charity
 */
ItemDraft.prototype['charity'] = undefined;

/**
 * The enumeration value passed in here sets the condition of the item, such as NEW or USED_EXCELLENT. See ConditionEnum for the full list of supported values. Supported item conditions can vary by eBay category. To see which item conditions are supported for a category, you can use the getItemConditionPolicies method of the Metadata API. Note: The 'Manufacturer Refurbished' item condition is no longer a valid item condition in any eBay marketplace, and to reflect this change, the pre-existing MANUFACTURER_REFURBISHED enumeration value has been replaced by the CERTIFIED_REFURBISHED enumeration value. CR-eligible sellers should make a note to start using CERTIFIED_REFURBISHED from this point forward. To list an item as 'Certified Refurbished', a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition. Any seller that is interested in eligibility requirements to list with 'Certified Refurbished' should see the Certified refurbished program page in Seller Center. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/listing/types/api:ConditionEnum'>eBay API documentation</a>
 * @member {String} condition
 */
ItemDraft.prototype['condition'] = undefined;

/**
 * The format of the listing. Valid Values: FIXED_PRICE and AUCTION For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/listing/types/api:ListingFormatEnum'>eBay API documentation</a>
 * @member {String} format
 */
ItemDraft.prototype['format'] = undefined;

/**
 * @member {module:model/PricingSummary} pricingSummary
 */
ItemDraft.prototype['pricingSummary'] = undefined;

/**
 * @member {module:model/Product} product
 */
ItemDraft.prototype['product'] = undefined;






export default ItemDraft;

