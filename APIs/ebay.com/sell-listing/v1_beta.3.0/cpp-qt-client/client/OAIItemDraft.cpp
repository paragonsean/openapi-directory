/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemDraft.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemDraft::OAIItemDraft(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemDraft::OAIItemDraft() {
    this->initializeModel();
}

OAIItemDraft::~OAIItemDraft() {}

void OAIItemDraft::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_charity_isSet = false;
    m_charity_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_pricing_summary_isSet = false;
    m_pricing_summary_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;
}

void OAIItemDraft::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemDraft::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_charity_isValid = ::OpenAPI::fromJsonValue(m_charity, json[QString("charity")]);
    m_charity_isSet = !json[QString("charity")].isNull() && m_charity_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_pricing_summary_isValid = ::OpenAPI::fromJsonValue(m_pricing_summary, json[QString("pricingSummary")]);
    m_pricing_summary_isSet = !json[QString("pricingSummary")].isNull() && m_pricing_summary_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;
}

QString OAIItemDraft::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemDraft::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_charity.isSet()) {
        obj.insert(QString("charity"), ::OpenAPI::toJsonValue(m_charity));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_pricing_summary.isSet()) {
        obj.insert(QString("pricingSummary"), ::OpenAPI::toJsonValue(m_pricing_summary));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    return obj;
}

QString OAIItemDraft::getCategoryId() const {
    return m_category_id;
}
void OAIItemDraft::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIItemDraft::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIItemDraft::is_category_id_Valid() const{
    return m_category_id_isValid;
}

OAICharity OAIItemDraft::getCharity() const {
    return m_charity;
}
void OAIItemDraft::setCharity(const OAICharity &charity) {
    m_charity = charity;
    m_charity_isSet = true;
}

bool OAIItemDraft::is_charity_Set() const{
    return m_charity_isSet;
}

bool OAIItemDraft::is_charity_Valid() const{
    return m_charity_isValid;
}

QString OAIItemDraft::getCondition() const {
    return m_condition;
}
void OAIItemDraft::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIItemDraft::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIItemDraft::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIItemDraft::getFormat() const {
    return m_format;
}
void OAIItemDraft::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIItemDraft::is_format_Set() const{
    return m_format_isSet;
}

bool OAIItemDraft::is_format_Valid() const{
    return m_format_isValid;
}

OAIPricingSummary OAIItemDraft::getPricingSummary() const {
    return m_pricing_summary;
}
void OAIItemDraft::setPricingSummary(const OAIPricingSummary &pricing_summary) {
    m_pricing_summary = pricing_summary;
    m_pricing_summary_isSet = true;
}

bool OAIItemDraft::is_pricing_summary_Set() const{
    return m_pricing_summary_isSet;
}

bool OAIItemDraft::is_pricing_summary_Valid() const{
    return m_pricing_summary_isValid;
}

OAIProduct OAIItemDraft::getProduct() const {
    return m_product;
}
void OAIItemDraft::setProduct(const OAIProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIItemDraft::is_product_Set() const{
    return m_product_isSet;
}

bool OAIItemDraft::is_product_Valid() const{
    return m_product_isValid;
}

bool OAIItemDraft::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemDraft::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
