/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingSummary::OAIPricingSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingSummary::OAIPricingSummary() {
    this->initializeModel();
}

OAIPricingSummary::~OAIPricingSummary() {}

void OAIPricingSummary::initializeModel() {

    m_auction_reserve_price_isSet = false;
    m_auction_reserve_price_isValid = false;

    m_auction_start_price_isSet = false;
    m_auction_start_price_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIPricingSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingSummary::fromJsonObject(QJsonObject json) {

    m_auction_reserve_price_isValid = ::OpenAPI::fromJsonValue(m_auction_reserve_price, json[QString("auctionReservePrice")]);
    m_auction_reserve_price_isSet = !json[QString("auctionReservePrice")].isNull() && m_auction_reserve_price_isValid;

    m_auction_start_price_isValid = ::OpenAPI::fromJsonValue(m_auction_start_price, json[QString("auctionStartPrice")]);
    m_auction_start_price_isSet = !json[QString("auctionStartPrice")].isNull() && m_auction_start_price_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIPricingSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_auction_reserve_price.isSet()) {
        obj.insert(QString("auctionReservePrice"), ::OpenAPI::toJsonValue(m_auction_reserve_price));
    }
    if (m_auction_start_price.isSet()) {
        obj.insert(QString("auctionStartPrice"), ::OpenAPI::toJsonValue(m_auction_start_price));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

OAIAmount OAIPricingSummary::getAuctionReservePrice() const {
    return m_auction_reserve_price;
}
void OAIPricingSummary::setAuctionReservePrice(const OAIAmount &auction_reserve_price) {
    m_auction_reserve_price = auction_reserve_price;
    m_auction_reserve_price_isSet = true;
}

bool OAIPricingSummary::is_auction_reserve_price_Set() const{
    return m_auction_reserve_price_isSet;
}

bool OAIPricingSummary::is_auction_reserve_price_Valid() const{
    return m_auction_reserve_price_isValid;
}

OAIAmount OAIPricingSummary::getAuctionStartPrice() const {
    return m_auction_start_price;
}
void OAIPricingSummary::setAuctionStartPrice(const OAIAmount &auction_start_price) {
    m_auction_start_price = auction_start_price;
    m_auction_start_price_isSet = true;
}

bool OAIPricingSummary::is_auction_start_price_Set() const{
    return m_auction_start_price_isSet;
}

bool OAIPricingSummary::is_auction_start_price_Valid() const{
    return m_auction_start_price_isValid;
}

OAIAmount OAIPricingSummary::getPrice() const {
    return m_price;
}
void OAIPricingSummary::setPrice(const OAIAmount &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPricingSummary::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPricingSummary::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIPricingSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auction_reserve_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auction_start_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
