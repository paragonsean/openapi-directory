/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICharity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICharity::OAICharity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICharity::OAICharity() {
    this->initializeModel();
}

OAICharity::~OAICharity() {}

void OAICharity::initializeModel() {

    m_charity_id_isSet = false;
    m_charity_id_isValid = false;

    m_donation_percentage_isSet = false;
    m_donation_percentage_isValid = false;
}

void OAICharity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICharity::fromJsonObject(QJsonObject json) {

    m_charity_id_isValid = ::OpenAPI::fromJsonValue(m_charity_id, json[QString("charityId")]);
    m_charity_id_isSet = !json[QString("charityId")].isNull() && m_charity_id_isValid;

    m_donation_percentage_isValid = ::OpenAPI::fromJsonValue(m_donation_percentage, json[QString("donationPercentage")]);
    m_donation_percentage_isSet = !json[QString("donationPercentage")].isNull() && m_donation_percentage_isValid;
}

QString OAICharity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICharity::asJsonObject() const {
    QJsonObject obj;
    if (m_charity_id_isSet) {
        obj.insert(QString("charityId"), ::OpenAPI::toJsonValue(m_charity_id));
    }
    if (m_donation_percentage_isSet) {
        obj.insert(QString("donationPercentage"), ::OpenAPI::toJsonValue(m_donation_percentage));
    }
    return obj;
}

QString OAICharity::getCharityId() const {
    return m_charity_id;
}
void OAICharity::setCharityId(const QString &charity_id) {
    m_charity_id = charity_id;
    m_charity_id_isSet = true;
}

bool OAICharity::is_charity_id_Set() const{
    return m_charity_id_isSet;
}

bool OAICharity::is_charity_id_Valid() const{
    return m_charity_id_isValid;
}

QString OAICharity::getDonationPercentage() const {
    return m_donation_percentage;
}
void OAICharity::setDonationPercentage(const QString &donation_percentage) {
    m_donation_percentage = donation_percentage;
    m_donation_percentage_isSet = true;
}

bool OAICharity::is_donation_percentage_Set() const{
    return m_donation_percentage_isSet;
}

bool OAICharity::is_donation_percentage_Valid() const{
    return m_donation_percentage_isValid;
}

bool OAICharity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICharity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
