/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_aspects_isSet = false;
    m_aspects_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_image_urls_isSet = false;
    m_image_urls_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_aspects_isValid = ::OpenAPI::fromJsonValue(m_aspects, json[QString("aspects")]);
    m_aspects_isSet = !json[QString("aspects")].isNull() && m_aspects_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_image_urls_isValid = ::OpenAPI::fromJsonValue(m_image_urls, json[QString("imageUrls")]);
    m_image_urls_isSet = !json[QString("imageUrls")].isNull() && m_image_urls_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_aspects.size() > 0) {
        obj.insert(QString("aspects"), ::OpenAPI::toJsonValue(m_aspects));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_image_urls.size() > 0) {
        obj.insert(QString("imageUrls"), ::OpenAPI::toJsonValue(m_image_urls));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIAspect> OAIProduct::getAspects() const {
    return m_aspects;
}
void OAIProduct::setAspects(const QList<OAIAspect> &aspects) {
    m_aspects = aspects;
    m_aspects_isSet = true;
}

bool OAIProduct::is_aspects_Set() const{
    return m_aspects_isSet;
}

bool OAIProduct::is_aspects_Valid() const{
    return m_aspects_isValid;
}

QString OAIProduct::getBrand() const {
    return m_brand;
}
void OAIProduct::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProduct::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProduct::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProduct::getEpid() const {
    return m_epid;
}
void OAIProduct::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIProduct::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIProduct::is_epid_Valid() const{
    return m_epid_isValid;
}

QList<QString> OAIProduct::getImageUrls() const {
    return m_image_urls;
}
void OAIProduct::setImageUrls(const QList<QString> &image_urls) {
    m_image_urls = image_urls;
    m_image_urls_isSet = true;
}

bool OAIProduct::is_image_urls_Set() const{
    return m_image_urls_isSet;
}

bool OAIProduct::is_image_urls_Valid() const{
    return m_image_urls_isValid;
}

QString OAIProduct::getTitle() const {
    return m_title;
}
void OAIProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProduct::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
