/**
 * Listing API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.
 *
 * The version of the OpenAPI document: v1_beta.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemDraftResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemDraftResponse::OAIItemDraftResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemDraftResponse::OAIItemDraftResponse() {
    this->initializeModel();
}

OAIItemDraftResponse::~OAIItemDraftResponse() {}

void OAIItemDraftResponse::initializeModel() {

    m_item_draft_id_isSet = false;
    m_item_draft_id_isValid = false;

    m_sell_flow_native_uri_isSet = false;
    m_sell_flow_native_uri_isValid = false;

    m_sell_flow_url_isSet = false;
    m_sell_flow_url_isValid = false;
}

void OAIItemDraftResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemDraftResponse::fromJsonObject(QJsonObject json) {

    m_item_draft_id_isValid = ::OpenAPI::fromJsonValue(m_item_draft_id, json[QString("itemDraftId")]);
    m_item_draft_id_isSet = !json[QString("itemDraftId")].isNull() && m_item_draft_id_isValid;

    m_sell_flow_native_uri_isValid = ::OpenAPI::fromJsonValue(m_sell_flow_native_uri, json[QString("sellFlowNativeUri")]);
    m_sell_flow_native_uri_isSet = !json[QString("sellFlowNativeUri")].isNull() && m_sell_flow_native_uri_isValid;

    m_sell_flow_url_isValid = ::OpenAPI::fromJsonValue(m_sell_flow_url, json[QString("sellFlowUrl")]);
    m_sell_flow_url_isSet = !json[QString("sellFlowUrl")].isNull() && m_sell_flow_url_isValid;
}

QString OAIItemDraftResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemDraftResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_item_draft_id_isSet) {
        obj.insert(QString("itemDraftId"), ::OpenAPI::toJsonValue(m_item_draft_id));
    }
    if (m_sell_flow_native_uri_isSet) {
        obj.insert(QString("sellFlowNativeUri"), ::OpenAPI::toJsonValue(m_sell_flow_native_uri));
    }
    if (m_sell_flow_url_isSet) {
        obj.insert(QString("sellFlowUrl"), ::OpenAPI::toJsonValue(m_sell_flow_url));
    }
    return obj;
}

QString OAIItemDraftResponse::getItemDraftId() const {
    return m_item_draft_id;
}
void OAIItemDraftResponse::setItemDraftId(const QString &item_draft_id) {
    m_item_draft_id = item_draft_id;
    m_item_draft_id_isSet = true;
}

bool OAIItemDraftResponse::is_item_draft_id_Set() const{
    return m_item_draft_id_isSet;
}

bool OAIItemDraftResponse::is_item_draft_id_Valid() const{
    return m_item_draft_id_isValid;
}

QString OAIItemDraftResponse::getSellFlowNativeUri() const {
    return m_sell_flow_native_uri;
}
void OAIItemDraftResponse::setSellFlowNativeUri(const QString &sell_flow_native_uri) {
    m_sell_flow_native_uri = sell_flow_native_uri;
    m_sell_flow_native_uri_isSet = true;
}

bool OAIItemDraftResponse::is_sell_flow_native_uri_Set() const{
    return m_sell_flow_native_uri_isSet;
}

bool OAIItemDraftResponse::is_sell_flow_native_uri_Valid() const{
    return m_sell_flow_native_uri_isValid;
}

QString OAIItemDraftResponse::getSellFlowUrl() const {
    return m_sell_flow_url;
}
void OAIItemDraftResponse::setSellFlowUrl(const QString &sell_flow_url) {
    m_sell_flow_url = sell_flow_url;
    m_sell_flow_url_isSet = true;
}

bool OAIItemDraftResponse::is_sell_flow_url_Set() const{
    return m_sell_flow_url_isSet;
}

bool OAIItemDraftResponse::is_sell_flow_url_Valid() const{
    return m_sell_flow_url_isValid;
}

bool OAIItemDraftResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_draft_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_flow_native_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_flow_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemDraftResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
