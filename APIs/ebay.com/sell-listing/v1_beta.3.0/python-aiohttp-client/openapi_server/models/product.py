# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect import Aspect
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspects: List[Aspect]=None, brand: str=None, description: str=None, epid: str=None, image_urls: List[str]=None, title: str=None):
        """Product - a model defined in OpenAPI

        :param aspects: The aspects of this Product.
        :param brand: The brand of this Product.
        :param description: The description of this Product.
        :param epid: The epid of this Product.
        :param image_urls: The image_urls of this Product.
        :param title: The title of this Product.
        """
        self.openapi_types = {
            'aspects': List[Aspect],
            'brand': str,
            'description': str,
            'epid': str,
            'image_urls': List[str],
            'title': str
        }

        self.attribute_map = {
            'aspects': 'aspects',
            'brand': 'brand',
            'description': 'description',
            'epid': 'epid',
            'image_urls': 'imageUrls',
            'title': 'title'
        }

        self._aspects = aspects
        self._brand = brand
        self._description = description
        self._epid = epid
        self._image_urls = image_urls
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspects(self):
        """Gets the aspects of this Product.

        The list of item aspects that describe the item (such as size, color, capacity, model, brand, etc.)

        :return: The aspects of this Product.
        :rtype: List[Aspect]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this Product.

        The list of item aspects that describe the item (such as size, color, capacity, model, brand, etc.)

        :param aspects: The aspects of this Product.
        :type aspects: List[Aspect]
        """

        self._aspects = aspects

    @property
    def brand(self):
        """Gets the brand of this Product.

        The name brand of the item, such as Nike, Apple, etc.

        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.

        The name brand of the item, such as Nike, Apple, etc.

        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def description(self):
        """Gets the description of this Product.

        The description of the item that was created by the seller. This field supports plain text or rich content within HTML tags. Note: Active content is not supported. Active content includes animation or video via JavaScript, Flash, plug-ins, or form actions. Max Length: 500,000

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        The description of the item that was created by the seller. This field supports plain text or rich content within HTML tags. Note: Active content is not supported. Active content includes animation or video via JavaScript, Flash, plug-ins, or form actions. Max Length: 500,000

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def epid(self):
        """Gets the epid of this Product.

        An EPID is the eBay product identifier of a product from the eBay product catalog. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored.

        :return: The epid of this Product.
        :rtype: str
        """
        return self._epid

    @epid.setter
    def epid(self, epid):
        """Sets the epid of this Product.

        An EPID is the eBay product identifier of a product from the eBay product catalog. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored.

        :param epid: The epid of this Product.
        :type epid: str
        """

        self._epid = epid

    @property
    def image_urls(self):
        """Gets the image_urls of this Product.

        The image URLs of the item. The first URL will be the primary image, which appears on the View Item page in the eBay listing. The URL can be from the following: The eBay Picture Services (images previously uploaded). A server outside of eBay (self-hosted). For more details, see PictureURL and Introduction to Pictures in Listings. Maximum: 12 URLs (for most categories and marketplaces) Restrictions: You cannot mix self-hosted and EPS-hosted URLs in the same listing. All image URLs must be 'https'.

        :return: The image_urls of this Product.
        :rtype: List[str]
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls):
        """Sets the image_urls of this Product.

        The image URLs of the item. The first URL will be the primary image, which appears on the View Item page in the eBay listing. The URL can be from the following: The eBay Picture Services (images previously uploaded). A server outside of eBay (self-hosted). For more details, see PictureURL and Introduction to Pictures in Listings. Maximum: 12 URLs (for most categories and marketplaces) Restrictions: You cannot mix self-hosted and EPS-hosted URLs in the same listing. All image URLs must be 'https'.

        :param image_urls: The image_urls of this Product.
        :type image_urls: List[str]
        """

        self._image_urls = image_urls

    @property
    def title(self):
        """Gets the title of this Product.

        The seller-created title of the item. This should include unique characteristics of the item, such as brand, model, color, size, capacity, etc. For example: Levi's 501 size 10 black jeans

        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product.

        The seller-created title of the item. This should include unique characteristics of the item, such as brand, model, color, size, capacity, etc. For example: Levi's 501 size 10 black jeans

        :param title: The title of this Product.
        :type title: str
        """

        self._title = title
