# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.charity import Charity
from openapi_server.models.pricing_summary import PricingSummary
from openapi_server.models.product import Product
from openapi_server import util


class ItemDraft(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, charity: Charity=None, condition: str=None, format: str=None, pricing_summary: PricingSummary=None, product: Product=None):
        """ItemDraft - a model defined in OpenAPI

        :param category_id: The category_id of this ItemDraft.
        :param charity: The charity of this ItemDraft.
        :param condition: The condition of this ItemDraft.
        :param format: The format of this ItemDraft.
        :param pricing_summary: The pricing_summary of this ItemDraft.
        :param product: The product of this ItemDraft.
        """
        self.openapi_types = {
            'category_id': str,
            'charity': Charity,
            'condition': str,
            'format': str,
            'pricing_summary': PricingSummary,
            'product': Product
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'charity': 'charity',
            'condition': 'condition',
            'format': 'format',
            'pricing_summary': 'pricingSummary',
            'product': 'product'
        }

        self._category_id = category_id
        self._charity = charity
        self._condition = condition
        self._format = format
        self._pricing_summary = pricing_summary
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemDraft':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemDraft of this ItemDraft.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this ItemDraft.

        The ID of the leaf category associated with this item. A leaf category is the lowest level in that category and has no children. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored.

        :return: The category_id of this ItemDraft.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ItemDraft.

        The ID of the leaf category associated with this item. A leaf category is the lowest level in that category and has no children. Note: If you submit both a category ID and an EPID, eBay determines the best category based on the EPID and uses that. The category ID will be ignored.

        :param category_id: The category_id of this ItemDraft.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def charity(self):
        """Gets the charity of this ItemDraft.


        :return: The charity of this ItemDraft.
        :rtype: Charity
        """
        return self._charity

    @charity.setter
    def charity(self, charity):
        """Sets the charity of this ItemDraft.


        :param charity: The charity of this ItemDraft.
        :type charity: Charity
        """

        self._charity = charity

    @property
    def condition(self):
        """Gets the condition of this ItemDraft.

        The enumeration value passed in here sets the condition of the item, such as NEW or USED_EXCELLENT. See ConditionEnum for the full list of supported values. Supported item conditions can vary by eBay category. To see which item conditions are supported for a category, you can use the getItemConditionPolicies method of the Metadata API. Note: The 'Manufacturer Refurbished' item condition is no longer a valid item condition in any eBay marketplace, and to reflect this change, the pre-existing MANUFACTURER_REFURBISHED enumeration value has been replaced by the CERTIFIED_REFURBISHED enumeration value. CR-eligible sellers should make a note to start using CERTIFIED_REFURBISHED from this point forward. To list an item as 'Certified Refurbished', a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition. Any seller that is interested in eligibility requirements to list with 'Certified Refurbished' should see the Certified refurbished program page in Seller Center. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/listing/types/api:ConditionEnum'>eBay API documentation</a>

        :return: The condition of this ItemDraft.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ItemDraft.

        The enumeration value passed in here sets the condition of the item, such as NEW or USED_EXCELLENT. See ConditionEnum for the full list of supported values. Supported item conditions can vary by eBay category. To see which item conditions are supported for a category, you can use the getItemConditionPolicies method of the Metadata API. Note: The 'Manufacturer Refurbished' item condition is no longer a valid item condition in any eBay marketplace, and to reflect this change, the pre-existing MANUFACTURER_REFURBISHED enumeration value has been replaced by the CERTIFIED_REFURBISHED enumeration value. CR-eligible sellers should make a note to start using CERTIFIED_REFURBISHED from this point forward. To list an item as 'Certified Refurbished', a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition. Any seller that is interested in eligibility requirements to list with 'Certified Refurbished' should see the Certified refurbished program page in Seller Center. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/listing/types/api:ConditionEnum'>eBay API documentation</a>

        :param condition: The condition of this ItemDraft.
        :type condition: str
        """

        self._condition = condition

    @property
    def format(self):
        """Gets the format of this ItemDraft.

        The format of the listing. Valid Values: FIXED_PRICE and AUCTION For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/listing/types/api:ListingFormatEnum'>eBay API documentation</a>

        :return: The format of this ItemDraft.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ItemDraft.

        The format of the listing. Valid Values: FIXED_PRICE and AUCTION For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/listing/types/api:ListingFormatEnum'>eBay API documentation</a>

        :param format: The format of this ItemDraft.
        :type format: str
        """

        self._format = format

    @property
    def pricing_summary(self):
        """Gets the pricing_summary of this ItemDraft.


        :return: The pricing_summary of this ItemDraft.
        :rtype: PricingSummary
        """
        return self._pricing_summary

    @pricing_summary.setter
    def pricing_summary(self, pricing_summary):
        """Sets the pricing_summary of this ItemDraft.


        :param pricing_summary: The pricing_summary of this ItemDraft.
        :type pricing_summary: PricingSummary
        """

        self._pricing_summary = pricing_summary

    @property
    def product(self):
        """Gets the product of this ItemDraft.


        :return: The product of this ItemDraft.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ItemDraft.


        :param product: The product of this ItemDraft.
        :type product: Product
        """

        self._product = product
