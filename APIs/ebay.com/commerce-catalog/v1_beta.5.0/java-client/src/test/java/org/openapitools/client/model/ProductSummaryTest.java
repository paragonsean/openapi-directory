/*
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Aspect;
import org.openapitools.client.model.Image;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ProductSummary
 */
public class ProductSummaryTest {
    private final ProductSummary model = new ProductSummary();

    /**
     * Model tests for ProductSummary
     */
    @Test
    public void testProductSummary() {
        // TODO: test ProductSummary
    }

    /**
     * Test the property 'additionalImages'
     */
    @Test
    public void additionalImagesTest() {
        // TODO: test additionalImages
    }

    /**
     * Test the property 'aspects'
     */
    @Test
    public void aspectsTest() {
        // TODO: test aspects
    }

    /**
     * Test the property 'brand'
     */
    @Test
    public void brandTest() {
        // TODO: test brand
    }

    /**
     * Test the property 'ean'
     */
    @Test
    public void eanTest() {
        // TODO: test ean
    }

    /**
     * Test the property 'epid'
     */
    @Test
    public void epidTest() {
        // TODO: test epid
    }

    /**
     * Test the property 'gtin'
     */
    @Test
    public void gtinTest() {
        // TODO: test gtin
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'isbn'
     */
    @Test
    public void isbnTest() {
        // TODO: test isbn
    }

    /**
     * Test the property 'mpn'
     */
    @Test
    public void mpnTest() {
        // TODO: test mpn
    }

    /**
     * Test the property 'productHref'
     */
    @Test
    public void productHrefTest() {
        // TODO: test productHref
    }

    /**
     * Test the property 'productWebUrl'
     */
    @Test
    public void productWebUrlTest() {
        // TODO: test productWebUrl
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'upc'
     */
    @Test
    public void upcTest() {
        // TODO: test upc
    }

}
