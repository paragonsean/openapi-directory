/*
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AspectDistribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type identifies a product category and the aspects associated with that category. Each aspect distribution container returns the distribution of values that have been used for the aspect.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:03.856757-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Refinement {
  public static final String SERIALIZED_NAME_ASPECT_DISTRIBUTIONS = "aspectDistributions";
  @SerializedName(SERIALIZED_NAME_ASPECT_DISTRIBUTIONS)
  private List<AspectDistribution> aspectDistributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOMINANT_CATEGORY_ID = "dominantCategoryId";
  @SerializedName(SERIALIZED_NAME_DOMINANT_CATEGORY_ID)
  private String dominantCategoryId;

  public Refinement() {
  }

  public Refinement aspectDistributions(List<AspectDistribution> aspectDistributions) {
    this.aspectDistributions = aspectDistributions;
    return this;
  }

  public Refinement addAspectDistributionsItem(AspectDistribution aspectDistributionsItem) {
    if (this.aspectDistributions == null) {
      this.aspectDistributions = new ArrayList<>();
    }
    this.aspectDistributions.add(aspectDistributionsItem);
    return this;
  }

  /**
   * Contains information about one or more aspects that are associated with the category identified by &lt;b&gt;dominantCategoryId&lt;/b&gt;.
   * @return aspectDistributions
   */
  @javax.annotation.Nullable
  public List<AspectDistribution> getAspectDistributions() {
    return aspectDistributions;
  }

  public void setAspectDistributions(List<AspectDistribution> aspectDistributions) {
    this.aspectDistributions = aspectDistributions;
  }


  public Refinement dominantCategoryId(String dominantCategoryId) {
    this.dominantCategoryId = dominantCategoryId;
    return this;
  }

  /**
   * The ID of the category that eBay determines is most likely to cover the products matching the search criteria.
   * @return dominantCategoryId
   */
  @javax.annotation.Nullable
  public String getDominantCategoryId() {
    return dominantCategoryId;
  }

  public void setDominantCategoryId(String dominantCategoryId) {
    this.dominantCategoryId = dominantCategoryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refinement refinement = (Refinement) o;
    return Objects.equals(this.aspectDistributions, refinement.aspectDistributions) &&
        Objects.equals(this.dominantCategoryId, refinement.dominantCategoryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectDistributions, dominantCategoryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refinement {\n");
    sb.append("    aspectDistributions: ").append(toIndentedString(aspectDistributions)).append("\n");
    sb.append("    dominantCategoryId: ").append(toIndentedString(dominantCategoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspectDistributions");
    openapiFields.add("dominantCategoryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Refinement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Refinement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Refinement is not found in the empty JSON string", Refinement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Refinement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Refinement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aspectDistributions") != null && !jsonObj.get("aspectDistributions").isJsonNull()) {
        JsonArray jsonArrayaspectDistributions = jsonObj.getAsJsonArray("aspectDistributions");
        if (jsonArrayaspectDistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aspectDistributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aspectDistributions` to be an array in the JSON string but got `%s`", jsonObj.get("aspectDistributions").toString()));
          }

          // validate the optional field `aspectDistributions` (array)
          for (int i = 0; i < jsonArrayaspectDistributions.size(); i++) {
            AspectDistribution.validateJsonElement(jsonArrayaspectDistributions.get(i));
          };
        }
      }
      if ((jsonObj.get("dominantCategoryId") != null && !jsonObj.get("dominantCategoryId").isJsonNull()) && !jsonObj.get("dominantCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominantCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dominantCategoryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Refinement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Refinement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Refinement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Refinement.class));

       return (TypeAdapter<T>) new TypeAdapter<Refinement>() {
           @Override
           public void write(JsonWriter out, Refinement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Refinement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Refinement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Refinement
   * @throws IOException if the JSON string is invalid with respect to Refinement
   */
  public static Refinement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Refinement.class);
  }

  /**
   * Convert an instance of Refinement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

