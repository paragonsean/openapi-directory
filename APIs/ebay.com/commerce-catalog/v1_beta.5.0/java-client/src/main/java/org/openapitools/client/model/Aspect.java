/*
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains the name and values of a category aspect.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:03.856757-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Aspect {
  public static final String SERIALIZED_NAME_LOCALIZED_NAME = "localizedName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_NAME)
  private String localizedName;

  public static final String SERIALIZED_NAME_LOCALIZED_VALUES = "localizedValues";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_VALUES)
  private List<String> localizedValues = new ArrayList<>();

  public Aspect() {
  }

  public Aspect localizedName(String localizedName) {
    this.localizedName = localizedName;
    return this;
  }

  /**
   * The localized name of this category aspect.
   * @return localizedName
   */
  @javax.annotation.Nullable
  public String getLocalizedName() {
    return localizedName;
  }

  public void setLocalizedName(String localizedName) {
    this.localizedName = localizedName;
  }


  public Aspect localizedValues(List<String> localizedValues) {
    this.localizedValues = localizedValues;
    return this;
  }

  public Aspect addLocalizedValuesItem(String localizedValuesItem) {
    if (this.localizedValues == null) {
      this.localizedValues = new ArrayList<>();
    }
    this.localizedValues.add(localizedValuesItem);
    return this;
  }

  /**
   * A list of the localized values of this category aspect.
   * @return localizedValues
   */
  @javax.annotation.Nullable
  public List<String> getLocalizedValues() {
    return localizedValues;
  }

  public void setLocalizedValues(List<String> localizedValues) {
    this.localizedValues = localizedValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Aspect aspect = (Aspect) o;
    return Objects.equals(this.localizedName, aspect.localizedName) &&
        Objects.equals(this.localizedValues, aspect.localizedValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localizedName, localizedValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Aspect {\n");
    sb.append("    localizedName: ").append(toIndentedString(localizedName)).append("\n");
    sb.append("    localizedValues: ").append(toIndentedString(localizedValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localizedName");
    openapiFields.add("localizedValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Aspect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Aspect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Aspect is not found in the empty JSON string", Aspect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Aspect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Aspect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("localizedName") != null && !jsonObj.get("localizedName").isJsonNull()) && !jsonObj.get("localizedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("localizedValues") != null && !jsonObj.get("localizedValues").isJsonNull() && !jsonObj.get("localizedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedValues` to be an array in the JSON string but got `%s`", jsonObj.get("localizedValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Aspect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Aspect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Aspect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Aspect.class));

       return (TypeAdapter<T>) new TypeAdapter<Aspect>() {
           @Override
           public void write(JsonWriter out, Aspect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Aspect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Aspect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Aspect
   * @throws IOException if the JSON string is invalid with respect to Aspect
   */
  public static Aspect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Aspect.class);
  }

  /**
   * Convert an instance of Aspect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

