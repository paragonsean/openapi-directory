/*
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductSummary;
import org.openapitools.client.model.Refinement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains the specifications for the collection of products that match the search or filter criteria of a &lt;b&gt;search&lt;/b&gt; call. A maximum of 200 product summaries is returned (the result set), fewer if you include the &lt;b&gt;limit&lt;/b&gt; query parameter in the request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:03.856757-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSearchResponse {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_PRODUCT_SUMMARIES = "productSummaries";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SUMMARIES)
  private List<ProductSummary> productSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFINEMENT = "refinement";
  @SerializedName(SERIALIZED_NAME_REFINEMENT)
  private Refinement refinement;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public ProductSearchResponse() {
  }

  public ProductSearchResponse href(String href) {
    this.href = href;
    return this;
  }

  /**
   * This field is reserved for internal or future use. &lt;!-- The URI of the &lt;b&gt;search&lt;/b&gt; method request that produced this result set. --&gt;
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public ProductSearchResponse limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of product summaries returned in the response. This is the &lt;i&gt;result set&lt;/i&gt;, a subset of the full collection of products that match the search or filter criteria of this call. If the &lt;b&gt;limit&lt;/b&gt; query parameter was included in the request, this field will have the same value. &lt;br /&gt;&lt;br /&gt; &lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;50&lt;/code&gt;
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ProductSearchResponse next(String next) {
    this.next = next;
    return this;
  }

  /**
   * This field is reserved for internal or future use. &lt;!-- &lt;i&gt;Returned only if&lt;/i&gt; there are more product records to retrieve from the current collection of matching products, this field contains the &lt;b&gt;search&lt;/b&gt; call URI for the next result set. For example, the following URI returns records 41 thru 50 from the collection of matched products: &lt;br /&gt;&lt;br /&gt; &lt;code&gt;&lt;i&gt;path&lt;/i&gt;/product_summary/search?limit&#x3D;10&amp;offset&#x3D;40&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;  &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This feature employs a zero-based list, where the first product in the list has an offset of &lt;code&gt;0&lt;/code&gt;.&lt;/span&gt; --&gt;
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public ProductSearchResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * This field is reserved for internal or future use. &lt;!-- The distance (number of records) from the first product in the collection to the first product in this result set. If the &lt;b&gt;offset&lt;/b&gt; query parameter was included in the request, this field will have the same value. The &lt;b&gt;offset&lt;/b&gt; value is used in conjunction with the &lt;b&gt;limit&lt;/b&gt; value to control the pagination of the output. For example, if &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;30&lt;/code&gt; and &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the call retrieves products 31 thru 40 from the resulting collection of products. &lt;br /&gt;&lt;br /&gt;  &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This feature employs a zero-based list, where the first item in the list has an offset of &lt;code&gt;0&lt;/code&gt;.&lt;/span&gt; &lt;br /&gt;&lt;br /&gt; &lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;0&lt;/code&gt; (zero) --&gt;
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public ProductSearchResponse prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * This field is reserved for internal or future use.  !-- &lt;i&gt;Not returned if&lt;/i&gt; the currently returned result set is the first set of product records from the current collection of matching products. This field contains the &lt;b&gt;search&lt;/b&gt; call URI for the previous result set. For example, the following URI returns products 21 thru 30 from the collection of products: &lt;br /&gt;&lt;br /&gt; &lt;code&gt;&lt;i&gt;path&lt;/i&gt;/product_summary/search?limit&#x3D;10&amp;offset&#x3D;20&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;  &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This feature employs a zero-based list, where the first product in the list has an offset of &lt;code&gt;0&lt;/code&gt;.&lt;/span&gt; &gt;
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public ProductSearchResponse productSummaries(List<ProductSummary> productSummaries) {
    this.productSummaries = productSummaries;
    return this;
  }

  public ProductSearchResponse addProductSummariesItem(ProductSummary productSummariesItem) {
    if (this.productSummaries == null) {
      this.productSummaries = new ArrayList<>();
    }
    this.productSummaries.add(productSummariesItem);
    return this;
  }

  /**
   * &lt;i&gt;Returned if&lt;/i&gt; the &lt;b&gt;fieldGroups&lt;/b&gt; query parameter was omitted from the request, or if it was included with a value of &lt;code&gt;MATCHING_PRODUCTS&lt;/code&gt; or &lt;code&gt;FULL&lt;/code&gt;. This container provides an array of product summaries in the current result set for products that match the combination of the &lt;b&gt;q&lt;/b&gt;, &lt;b&gt;category_ids&lt;/b&gt;, and &lt;b&gt;aspect_filter&lt;/b&gt; parameters that were provided in the request. Each product summary includes information about the product&#39;s identifiers, product images, aspects, the product page URL, and the &lt;b&gt;getProduct&lt;/b&gt; URL for retrieving the product details.
   * @return productSummaries
   */
  @javax.annotation.Nullable
  public List<ProductSummary> getProductSummaries() {
    return productSummaries;
  }

  public void setProductSummaries(List<ProductSummary> productSummaries) {
    this.productSummaries = productSummaries;
  }


  public ProductSearchResponse refinement(Refinement refinement) {
    this.refinement = refinement;
    return this;
  }

  /**
   * Get refinement
   * @return refinement
   */
  @javax.annotation.Nullable
  public Refinement getRefinement() {
    return refinement;
  }

  public void setRefinement(Refinement refinement) {
    this.refinement = refinement;
  }


  public ProductSearchResponse total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * This field is reserved for internal or future use. &lt;!-- The total number of product records in the returned collection of matched products. &gt;
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSearchResponse productSearchResponse = (ProductSearchResponse) o;
    return Objects.equals(this.href, productSearchResponse.href) &&
        Objects.equals(this.limit, productSearchResponse.limit) &&
        Objects.equals(this.next, productSearchResponse.next) &&
        Objects.equals(this.offset, productSearchResponse.offset) &&
        Objects.equals(this.prev, productSearchResponse.prev) &&
        Objects.equals(this.productSummaries, productSearchResponse.productSummaries) &&
        Objects.equals(this.refinement, productSearchResponse.refinement) &&
        Objects.equals(this.total, productSearchResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, limit, next, offset, prev, productSummaries, refinement, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSearchResponse {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    productSummaries: ").append(toIndentedString(productSummaries)).append("\n");
    sb.append("    refinement: ").append(toIndentedString(refinement)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("limit");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("prev");
    openapiFields.add("productSummaries");
    openapiFields.add("refinement");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSearchResponse is not found in the empty JSON string", ProductSearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
      if (jsonObj.get("productSummaries") != null && !jsonObj.get("productSummaries").isJsonNull()) {
        JsonArray jsonArrayproductSummaries = jsonObj.getAsJsonArray("productSummaries");
        if (jsonArrayproductSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("productSummaries").toString()));
          }

          // validate the optional field `productSummaries` (array)
          for (int i = 0; i < jsonArrayproductSummaries.size(); i++) {
            ProductSummary.validateJsonElement(jsonArrayproductSummaries.get(i));
          };
        }
      }
      // validate the optional field `refinement`
      if (jsonObj.get("refinement") != null && !jsonObj.get("refinement").isJsonNull()) {
        Refinement.validateJsonElement(jsonObj.get("refinement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSearchResponse>() {
           @Override
           public void write(JsonWriter out, ProductSearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSearchResponse
   * @throws IOException if the JSON string is invalid with respect to ProductSearchResponse
   */
  public static ProductSearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSearchResponse.class);
  }

  /**
   * Convert an instance of ProductSearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

