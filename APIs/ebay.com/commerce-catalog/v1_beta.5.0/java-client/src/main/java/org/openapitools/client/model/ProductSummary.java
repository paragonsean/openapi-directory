/*
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Aspect;
import org.openapitools.client.model.Image;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains a summary of a specified product. The product summary includes information about the product&#39;s identifiers, product images, aspects, and the &lt;b&gt;getProduct&lt;/b&gt; URL for retrieving the product details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:03.856757-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSummary {
  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGES = "additionalImages";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGES)
  private List<Image> additionalImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASPECTS = "aspects";
  @SerializedName(SERIALIZED_NAME_ASPECTS)
  private List<Aspect> aspects = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private List<String> ean = new ArrayList<>();

  public static final String SERIALIZED_NAME_EPID = "epid";
  @SerializedName(SERIALIZED_NAME_EPID)
  private String epid;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private List<String> gtin = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_ISBN = "isbn";
  @SerializedName(SERIALIZED_NAME_ISBN)
  private List<String> isbn = new ArrayList<>();

  public static final String SERIALIZED_NAME_MPN = "mpn";
  @SerializedName(SERIALIZED_NAME_MPN)
  private List<String> mpn = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_HREF = "productHref";
  @SerializedName(SERIALIZED_NAME_PRODUCT_HREF)
  private String productHref;

  public static final String SERIALIZED_NAME_PRODUCT_WEB_URL = "productWebUrl";
  @SerializedName(SERIALIZED_NAME_PRODUCT_WEB_URL)
  private String productWebUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private List<String> upc = new ArrayList<>();

  public ProductSummary() {
  }

  public ProductSummary additionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
    return this;
  }

  public ProductSummary addAdditionalImagesItem(Image additionalImagesItem) {
    if (this.additionalImages == null) {
      this.additionalImages = new ArrayList<>();
    }
    this.additionalImages.add(additionalImagesItem);
    return this;
  }

  /**
   * Contains information about additional images associated with this product. For the primary image, see the &lt;b&gt;image&lt;/b&gt; container.
   * @return additionalImages
   */
  @javax.annotation.Nullable
  public List<Image> getAdditionalImages() {
    return additionalImages;
  }

  public void setAdditionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
  }


  public ProductSummary aspects(List<Aspect> aspects) {
    this.aspects = aspects;
    return this;
  }

  public ProductSummary addAspectsItem(Aspect aspectsItem) {
    if (this.aspects == null) {
      this.aspects = new ArrayList<>();
    }
    this.aspects.add(aspectsItem);
    return this;
  }

  /**
   * Contains an array of the category aspects and their values that are associated with this product.
   * @return aspects
   */
  @javax.annotation.Nullable
  public List<Aspect> getAspects() {
    return aspects;
  }

  public void setAspects(List<Aspect> aspects) {
    this.aspects = aspects;
  }


  public ProductSummary brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * The manufacturer&#39;s brand name for this product.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public ProductSummary ean(List<String> ean) {
    this.ean = ean;
    return this;
  }

  public ProductSummary addEanItem(String eanItem) {
    if (this.ean == null) {
      this.ean = new ArrayList<>();
    }
    this.ean.add(eanItem);
    return this;
  }

  /**
   * A list of all European Article Numbers (EANs) that identify this product.
   * @return ean
   */
  @javax.annotation.Nullable
  public List<String> getEan() {
    return ean;
  }

  public void setEan(List<String> ean) {
    this.ean = ean;
  }


  public ProductSummary epid(String epid) {
    this.epid = epid;
    return this;
  }

  /**
   * The eBay product ID of this product.
   * @return epid
   */
  @javax.annotation.Nullable
  public String getEpid() {
    return epid;
  }

  public void setEpid(String epid) {
    this.epid = epid;
  }


  public ProductSummary gtin(List<String> gtin) {
    this.gtin = gtin;
    return this;
  }

  public ProductSummary addGtinItem(String gtinItem) {
    if (this.gtin == null) {
      this.gtin = new ArrayList<>();
    }
    this.gtin.add(gtinItem);
    return this;
  }

  /**
   * A list of all GTINs that identify this product. This includes all of the values returned in the &lt;b&gt;ean&lt;/b&gt;, &lt;b&gt;isbn&lt;/b&gt;, and &lt;b&gt;upc&lt;/b&gt; fields.
   * @return gtin
   */
  @javax.annotation.Nullable
  public List<String> getGtin() {
    return gtin;
  }

  public void setGtin(List<String> gtin) {
    this.gtin = gtin;
  }


  public ProductSummary image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public ProductSummary isbn(List<String> isbn) {
    this.isbn = isbn;
    return this;
  }

  public ProductSummary addIsbnItem(String isbnItem) {
    if (this.isbn == null) {
      this.isbn = new ArrayList<>();
    }
    this.isbn.add(isbnItem);
    return this;
  }

  /**
   * A list of all International Standard Book Numbers (ISBNs) that identify this product.
   * @return isbn
   */
  @javax.annotation.Nullable
  public List<String> getIsbn() {
    return isbn;
  }

  public void setIsbn(List<String> isbn) {
    this.isbn = isbn;
  }


  public ProductSummary mpn(List<String> mpn) {
    this.mpn = mpn;
    return this;
  }

  public ProductSummary addMpnItem(String mpnItem) {
    if (this.mpn == null) {
      this.mpn = new ArrayList<>();
    }
    this.mpn.add(mpnItem);
    return this;
  }

  /**
   * A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify this product.
   * @return mpn
   */
  @javax.annotation.Nullable
  public List<String> getMpn() {
    return mpn;
  }

  public void setMpn(List<String> mpn) {
    this.mpn = mpn;
  }


  public ProductSummary productHref(String productHref) {
    this.productHref = productHref;
    return this;
  }

  /**
   * The URI of the &lt;b&gt;getProduct&lt;/b&gt; call request that retrieves this product&#39;s details.
   * @return productHref
   */
  @javax.annotation.Nullable
  public String getProductHref() {
    return productHref;
  }

  public void setProductHref(String productHref) {
    this.productHref = productHref;
  }


  public ProductSummary productWebUrl(String productWebUrl) {
    this.productWebUrl = productWebUrl;
    return this;
  }

  /**
   * The URL for this product&#39;s eBay product page.
   * @return productWebUrl
   */
  @javax.annotation.Nullable
  public String getProductWebUrl() {
    return productWebUrl;
  }

  public void setProductWebUrl(String productWebUrl) {
    this.productWebUrl = productWebUrl;
  }


  public ProductSummary title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this product on eBay.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProductSummary upc(List<String> upc) {
    this.upc = upc;
    return this;
  }

  public ProductSummary addUpcItem(String upcItem) {
    if (this.upc == null) {
      this.upc = new ArrayList<>();
    }
    this.upc.add(upcItem);
    return this;
  }

  /**
   * A list of Universal Product Codes (UPCs) that identify this product.
   * @return upc
   */
  @javax.annotation.Nullable
  public List<String> getUpc() {
    return upc;
  }

  public void setUpc(List<String> upc) {
    this.upc = upc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSummary productSummary = (ProductSummary) o;
    return Objects.equals(this.additionalImages, productSummary.additionalImages) &&
        Objects.equals(this.aspects, productSummary.aspects) &&
        Objects.equals(this.brand, productSummary.brand) &&
        Objects.equals(this.ean, productSummary.ean) &&
        Objects.equals(this.epid, productSummary.epid) &&
        Objects.equals(this.gtin, productSummary.gtin) &&
        Objects.equals(this.image, productSummary.image) &&
        Objects.equals(this.isbn, productSummary.isbn) &&
        Objects.equals(this.mpn, productSummary.mpn) &&
        Objects.equals(this.productHref, productSummary.productHref) &&
        Objects.equals(this.productWebUrl, productSummary.productWebUrl) &&
        Objects.equals(this.title, productSummary.title) &&
        Objects.equals(this.upc, productSummary.upc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalImages, aspects, brand, ean, epid, gtin, image, isbn, mpn, productHref, productWebUrl, title, upc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSummary {\n");
    sb.append("    additionalImages: ").append(toIndentedString(additionalImages)).append("\n");
    sb.append("    aspects: ").append(toIndentedString(aspects)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    epid: ").append(toIndentedString(epid)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isbn: ").append(toIndentedString(isbn)).append("\n");
    sb.append("    mpn: ").append(toIndentedString(mpn)).append("\n");
    sb.append("    productHref: ").append(toIndentedString(productHref)).append("\n");
    sb.append("    productWebUrl: ").append(toIndentedString(productWebUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalImages");
    openapiFields.add("aspects");
    openapiFields.add("brand");
    openapiFields.add("ean");
    openapiFields.add("epid");
    openapiFields.add("gtin");
    openapiFields.add("image");
    openapiFields.add("isbn");
    openapiFields.add("mpn");
    openapiFields.add("productHref");
    openapiFields.add("productWebUrl");
    openapiFields.add("title");
    openapiFields.add("upc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSummary is not found in the empty JSON string", ProductSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalImages") != null && !jsonObj.get("additionalImages").isJsonNull()) {
        JsonArray jsonArrayadditionalImages = jsonObj.getAsJsonArray("additionalImages");
        if (jsonArrayadditionalImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalImages` to be an array in the JSON string but got `%s`", jsonObj.get("additionalImages").toString()));
          }

          // validate the optional field `additionalImages` (array)
          for (int i = 0; i < jsonArrayadditionalImages.size(); i++) {
            Image.validateJsonElement(jsonArrayadditionalImages.get(i));
          };
        }
      }
      if (jsonObj.get("aspects") != null && !jsonObj.get("aspects").isJsonNull()) {
        JsonArray jsonArrayaspects = jsonObj.getAsJsonArray("aspects");
        if (jsonArrayaspects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aspects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aspects` to be an array in the JSON string but got `%s`", jsonObj.get("aspects").toString()));
          }

          // validate the optional field `aspects` (array)
          for (int i = 0; i < jsonArrayaspects.size(); i++) {
            Aspect.validateJsonElement(jsonArrayaspects.get(i));
          };
        }
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull() && !jsonObj.get("ean").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be an array in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("epid") != null && !jsonObj.get("epid").isJsonNull()) && !jsonObj.get("epid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull() && !jsonObj.get("gtin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be an array in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("isbn") != null && !jsonObj.get("isbn").isJsonNull() && !jsonObj.get("isbn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbn` to be an array in the JSON string but got `%s`", jsonObj.get("isbn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mpn") != null && !jsonObj.get("mpn").isJsonNull() && !jsonObj.get("mpn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpn` to be an array in the JSON string but got `%s`", jsonObj.get("mpn").toString()));
      }
      if ((jsonObj.get("productHref") != null && !jsonObj.get("productHref").isJsonNull()) && !jsonObj.get("productHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productHref").toString()));
      }
      if ((jsonObj.get("productWebUrl") != null && !jsonObj.get("productWebUrl").isJsonNull()) && !jsonObj.get("productWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productWebUrl").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull() && !jsonObj.get("upc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be an array in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSummary>() {
           @Override
           public void write(JsonWriter out, ProductSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSummary
   * @throws IOException if the JSON string is invalid with respect to ProductSummary
   */
  public static ProductSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSummary.class);
  }

  /**
   * Convert an instance of ProductSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

