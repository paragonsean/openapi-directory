# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_summary import ProductSummary
from openapi_server.models.refinement import Refinement
from openapi_server import util


class ProductSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, product_summaries: List[ProductSummary]=None, refinement: Refinement=None, total: int=None):
        """ProductSearchResponse - a model defined in OpenAPI

        :param href: The href of this ProductSearchResponse.
        :param limit: The limit of this ProductSearchResponse.
        :param next: The next of this ProductSearchResponse.
        :param offset: The offset of this ProductSearchResponse.
        :param prev: The prev of this ProductSearchResponse.
        :param product_summaries: The product_summaries of this ProductSearchResponse.
        :param refinement: The refinement of this ProductSearchResponse.
        :param total: The total of this ProductSearchResponse.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'product_summaries': List[ProductSummary],
            'refinement': Refinement,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'product_summaries': 'productSummaries',
            'refinement': 'refinement',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._product_summaries = product_summaries
        self._refinement = refinement
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSearchResponse of this ProductSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- The URI of the <b>search</b> method request that produced this result set. -->

        :return: The href of this ProductSearchResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- The URI of the <b>search</b> method request that produced this result set. -->

        :param href: The href of this ProductSearchResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this ProductSearchResponse.

        The number of product summaries returned in the response. This is the <i>result set</i>, a subset of the full collection of products that match the search or filter criteria of this call. If the <b>limit</b> query parameter was included in the request, this field will have the same value. <br /><br /> <b>Default:</b> <code>50</code>

        :return: The limit of this ProductSearchResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ProductSearchResponse.

        The number of product summaries returned in the response. This is the <i>result set</i>, a subset of the full collection of products that match the search or filter criteria of this call. If the <b>limit</b> query parameter was included in the request, this field will have the same value. <br /><br /> <b>Default:</b> <code>50</code>

        :param limit: The limit of this ProductSearchResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- <i>Returned only if</i> there are more product records to retrieve from the current collection of matching products, this field contains the <b>search</b> call URI for the next result set. For example, the following URI returns records 41 thru 50 from the collection of matched products: <br /><br /> <code><i>path</i>/product_summary/search?limit=10&offset=40</code> <br /><br />  <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first product in the list has an offset of <code>0</code>.</span> -->

        :return: The next of this ProductSearchResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- <i>Returned only if</i> there are more product records to retrieve from the current collection of matching products, this field contains the <b>search</b> call URI for the next result set. For example, the following URI returns records 41 thru 50 from the collection of matched products: <br /><br /> <code><i>path</i>/product_summary/search?limit=10&offset=40</code> <br /><br />  <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first product in the list has an offset of <code>0</code>.</span> -->

        :param next: The next of this ProductSearchResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- The distance (number of records) from the first product in the collection to the first product in this result set. If the <b>offset</b> query parameter was included in the request, this field will have the same value. The <b>offset</b> value is used in conjunction with the <b>limit</b> value to control the pagination of the output. For example, if <b>offset</b> is set to <code>30</code> and <b>limit</b> is set to <code>10</code>, the call retrieves products 31 thru 40 from the resulting collection of products. <br /><br />  <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first item in the list has an offset of <code>0</code>.</span> <br /><br /> <b>Default:</b> <code>0</code> (zero) -->

        :return: The offset of this ProductSearchResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- The distance (number of records) from the first product in the collection to the first product in this result set. If the <b>offset</b> query parameter was included in the request, this field will have the same value. The <b>offset</b> value is used in conjunction with the <b>limit</b> value to control the pagination of the output. For example, if <b>offset</b> is set to <code>30</code> and <b>limit</b> is set to <code>10</code>, the call retrieves products 31 thru 40 from the resulting collection of products. <br /><br />  <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first item in the list has an offset of <code>0</code>.</span> <br /><br /> <b>Default:</b> <code>0</code> (zero) -->

        :param offset: The offset of this ProductSearchResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this ProductSearchResponse.

        This field is reserved for internal or future use.  !-- <i>Not returned if</i> the currently returned result set is the first set of product records from the current collection of matching products. This field contains the <b>search</b> call URI for the previous result set. For example, the following URI returns products 21 thru 30 from the collection of products: <br /><br /> <code><i>path</i>/product_summary/search?limit=10&offset=20</code> <br /><br />  <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first product in the list has an offset of <code>0</code>.</span> >

        :return: The prev of this ProductSearchResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this ProductSearchResponse.

        This field is reserved for internal or future use.  !-- <i>Not returned if</i> the currently returned result set is the first set of product records from the current collection of matching products. This field contains the <b>search</b> call URI for the previous result set. For example, the following URI returns products 21 thru 30 from the collection of products: <br /><br /> <code><i>path</i>/product_summary/search?limit=10&offset=20</code> <br /><br />  <span class=\"tablenote\"><strong>Note:</strong> This feature employs a zero-based list, where the first product in the list has an offset of <code>0</code>.</span> >

        :param prev: The prev of this ProductSearchResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def product_summaries(self):
        """Gets the product_summaries of this ProductSearchResponse.

        <i>Returned if</i> the <b>fieldGroups</b> query parameter was omitted from the request, or if it was included with a value of <code>MATCHING_PRODUCTS</code> or <code>FULL</code>. This container provides an array of product summaries in the current result set for products that match the combination of the <b>q</b>, <b>category_ids</b>, and <b>aspect_filter</b> parameters that were provided in the request. Each product summary includes information about the product's identifiers, product images, aspects, the product page URL, and the <b>getProduct</b> URL for retrieving the product details.

        :return: The product_summaries of this ProductSearchResponse.
        :rtype: List[ProductSummary]
        """
        return self._product_summaries

    @product_summaries.setter
    def product_summaries(self, product_summaries):
        """Sets the product_summaries of this ProductSearchResponse.

        <i>Returned if</i> the <b>fieldGroups</b> query parameter was omitted from the request, or if it was included with a value of <code>MATCHING_PRODUCTS</code> or <code>FULL</code>. This container provides an array of product summaries in the current result set for products that match the combination of the <b>q</b>, <b>category_ids</b>, and <b>aspect_filter</b> parameters that were provided in the request. Each product summary includes information about the product's identifiers, product images, aspects, the product page URL, and the <b>getProduct</b> URL for retrieving the product details.

        :param product_summaries: The product_summaries of this ProductSearchResponse.
        :type product_summaries: List[ProductSummary]
        """

        self._product_summaries = product_summaries

    @property
    def refinement(self):
        """Gets the refinement of this ProductSearchResponse.


        :return: The refinement of this ProductSearchResponse.
        :rtype: Refinement
        """
        return self._refinement

    @refinement.setter
    def refinement(self, refinement):
        """Sets the refinement of this ProductSearchResponse.


        :param refinement: The refinement of this ProductSearchResponse.
        :type refinement: Refinement
        """

        self._refinement = refinement

    @property
    def total(self):
        """Gets the total of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- The total number of product records in the returned collection of matched products. >

        :return: The total of this ProductSearchResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProductSearchResponse.

        This field is reserved for internal or future use. <!-- The total number of product records in the returned collection of matched products. >

        :param total: The total of this ProductSearchResponse.
        :type total: int
        """

        self._total = total
