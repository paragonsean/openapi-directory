# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect import Aspect
from openapi_server.models.image import Image
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_images: List[Image]=None, aspects: List[Aspect]=None, brand: str=None, description: str=None, ean: List[str]=None, epid: str=None, gtin: List[str]=None, image: Image=None, isbn: List[str]=None, mpn: List[str]=None, other_applicable_category_ids: List[str]=None, primary_category_id: str=None, product_web_url: str=None, title: str=None, upc: List[str]=None, version: str=None):
        """Product - a model defined in OpenAPI

        :param additional_images: The additional_images of this Product.
        :param aspects: The aspects of this Product.
        :param brand: The brand of this Product.
        :param description: The description of this Product.
        :param ean: The ean of this Product.
        :param epid: The epid of this Product.
        :param gtin: The gtin of this Product.
        :param image: The image of this Product.
        :param isbn: The isbn of this Product.
        :param mpn: The mpn of this Product.
        :param other_applicable_category_ids: The other_applicable_category_ids of this Product.
        :param primary_category_id: The primary_category_id of this Product.
        :param product_web_url: The product_web_url of this Product.
        :param title: The title of this Product.
        :param upc: The upc of this Product.
        :param version: The version of this Product.
        """
        self.openapi_types = {
            'additional_images': List[Image],
            'aspects': List[Aspect],
            'brand': str,
            'description': str,
            'ean': List[str],
            'epid': str,
            'gtin': List[str],
            'image': Image,
            'isbn': List[str],
            'mpn': List[str],
            'other_applicable_category_ids': List[str],
            'primary_category_id': str,
            'product_web_url': str,
            'title': str,
            'upc': List[str],
            'version': str
        }

        self.attribute_map = {
            'additional_images': 'additionalImages',
            'aspects': 'aspects',
            'brand': 'brand',
            'description': 'description',
            'ean': 'ean',
            'epid': 'epid',
            'gtin': 'gtin',
            'image': 'image',
            'isbn': 'isbn',
            'mpn': 'mpn',
            'other_applicable_category_ids': 'otherApplicableCategoryIds',
            'primary_category_id': 'primaryCategoryId',
            'product_web_url': 'productWebUrl',
            'title': 'title',
            'upc': 'upc',
            'version': 'version'
        }

        self._additional_images = additional_images
        self._aspects = aspects
        self._brand = brand
        self._description = description
        self._ean = ean
        self._epid = epid
        self._gtin = gtin
        self._image = image
        self._isbn = isbn
        self._mpn = mpn
        self._other_applicable_category_ids = other_applicable_category_ids
        self._primary_category_id = primary_category_id
        self._product_web_url = product_web_url
        self._title = title
        self._upc = upc
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_images(self):
        """Gets the additional_images of this Product.

        Contains information about  additional images associated with this product. For the primary image, see the <b>image</b> container.

        :return: The additional_images of this Product.
        :rtype: List[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this Product.

        Contains information about  additional images associated with this product. For the primary image, see the <b>image</b> container.

        :param additional_images: The additional_images of this Product.
        :type additional_images: List[Image]
        """

        self._additional_images = additional_images

    @property
    def aspects(self):
        """Gets the aspects of this Product.

        Contains an array of the category aspects and their values that are associated with this product.

        :return: The aspects of this Product.
        :rtype: List[Aspect]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this Product.

        Contains an array of the category aspects and their values that are associated with this product.

        :param aspects: The aspects of this Product.
        :type aspects: List[Aspect]
        """

        self._aspects = aspects

    @property
    def brand(self):
        """Gets the brand of this Product.

        The manufacturer's brand name for this product.

        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.

        The manufacturer's brand name for this product.

        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def description(self):
        """Gets the description of this Product.

        The rich description of this product, which might contain HTML.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        The rich description of this product, which might contain HTML.

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def ean(self):
        """Gets the ean of this Product.

        A list of all European Article Numbers (EANs) that identify this product.

        :return: The ean of this Product.
        :rtype: List[str]
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Product.

        A list of all European Article Numbers (EANs) that identify this product.

        :param ean: The ean of this Product.
        :type ean: List[str]
        """

        self._ean = ean

    @property
    def epid(self):
        """Gets the epid of this Product.

        The eBay product ID of this product.

        :return: The epid of this Product.
        :rtype: str
        """
        return self._epid

    @epid.setter
    def epid(self, epid):
        """Sets the epid of this Product.

        The eBay product ID of this product.

        :param epid: The epid of this Product.
        :type epid: str
        """

        self._epid = epid

    @property
    def gtin(self):
        """Gets the gtin of this Product.

        A list of all GTINs that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.

        :return: The gtin of this Product.
        :rtype: List[str]
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Product.

        A list of all GTINs that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.

        :param gtin: The gtin of this Product.
        :type gtin: List[str]
        """

        self._gtin = gtin

    @property
    def image(self):
        """Gets the image of this Product.


        :return: The image of this Product.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Product.


        :param image: The image of this Product.
        :type image: Image
        """

        self._image = image

    @property
    def isbn(self):
        """Gets the isbn of this Product.

        A list of all International Standard Book Numbers (ISBNs) that identify this product. 

        :return: The isbn of this Product.
        :rtype: List[str]
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this Product.

        A list of all International Standard Book Numbers (ISBNs) that identify this product. 

        :param isbn: The isbn of this Product.
        :type isbn: List[str]
        """

        self._isbn = isbn

    @property
    def mpn(self):
        """Gets the mpn of this Product.

        A list of all MPN values that the manufacturer uses to identify this product.

        :return: The mpn of this Product.
        :rtype: List[str]
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Product.

        A list of all MPN values that the manufacturer uses to identify this product.

        :param mpn: The mpn of this Product.
        :type mpn: List[str]
        """

        self._mpn = mpn

    @property
    def other_applicable_category_ids(self):
        """Gets the other_applicable_category_ids of this Product.

        A list of category IDs (other than the value of <b>primaryCategoryId</b>) for all the leaf categories to which this product might belong.

        :return: The other_applicable_category_ids of this Product.
        :rtype: List[str]
        """
        return self._other_applicable_category_ids

    @other_applicable_category_ids.setter
    def other_applicable_category_ids(self, other_applicable_category_ids):
        """Sets the other_applicable_category_ids of this Product.

        A list of category IDs (other than the value of <b>primaryCategoryId</b>) for all the leaf categories to which this product might belong.

        :param other_applicable_category_ids: The other_applicable_category_ids of this Product.
        :type other_applicable_category_ids: List[str]
        """

        self._other_applicable_category_ids = other_applicable_category_ids

    @property
    def primary_category_id(self):
        """Gets the primary_category_id of this Product.

        The identifier of the leaf category that eBay recommends using to list this product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see <b>otherApplicableCategoryIds</b>.

        :return: The primary_category_id of this Product.
        :rtype: str
        """
        return self._primary_category_id

    @primary_category_id.setter
    def primary_category_id(self, primary_category_id):
        """Sets the primary_category_id of this Product.

        The identifier of the leaf category that eBay recommends using to list this product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see <b>otherApplicableCategoryIds</b>.

        :param primary_category_id: The primary_category_id of this Product.
        :type primary_category_id: str
        """

        self._primary_category_id = primary_category_id

    @property
    def product_web_url(self):
        """Gets the product_web_url of this Product.

        The URL for this product's eBay product page.

        :return: The product_web_url of this Product.
        :rtype: str
        """
        return self._product_web_url

    @product_web_url.setter
    def product_web_url(self, product_web_url):
        """Sets the product_web_url of this Product.

        The URL for this product's eBay product page.

        :param product_web_url: The product_web_url of this Product.
        :type product_web_url: str
        """

        self._product_web_url = product_web_url

    @property
    def title(self):
        """Gets the title of this Product.

        The title of this product on eBay.

        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product.

        The title of this product on eBay.

        :param title: The title of this Product.
        :type title: str
        """

        self._title = title

    @property
    def upc(self):
        """Gets the upc of this Product.

        A list of Universal Product Codes (UPCs) that identify this product.

        :return: The upc of this Product.
        :rtype: List[str]
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this Product.

        A list of Universal Product Codes (UPCs) that identify this product.

        :param upc: The upc of this Product.
        :type upc: List[str]
        """

        self._upc = upc

    @property
    def version(self):
        """Gets the version of this Product.

        The current version number of this product record in the catalog.

        :return: The version of this Product.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Product.

        The current version number of this product record in the catalog.

        :param version: The version of this Product.
        :type version: str
        """

        self._version = version
