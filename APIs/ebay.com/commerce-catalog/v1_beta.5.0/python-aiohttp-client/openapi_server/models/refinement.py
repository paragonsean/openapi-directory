# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect_distribution import AspectDistribution
from openapi_server import util


class Refinement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_distributions: List[AspectDistribution]=None, dominant_category_id: str=None):
        """Refinement - a model defined in OpenAPI

        :param aspect_distributions: The aspect_distributions of this Refinement.
        :param dominant_category_id: The dominant_category_id of this Refinement.
        """
        self.openapi_types = {
            'aspect_distributions': List[AspectDistribution],
            'dominant_category_id': str
        }

        self.attribute_map = {
            'aspect_distributions': 'aspectDistributions',
            'dominant_category_id': 'dominantCategoryId'
        }

        self._aspect_distributions = aspect_distributions
        self._dominant_category_id = dominant_category_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Refinement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Refinement of this Refinement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_distributions(self):
        """Gets the aspect_distributions of this Refinement.

        Contains information about one or more aspects that are associated with the category identified by <b>dominantCategoryId</b>.

        :return: The aspect_distributions of this Refinement.
        :rtype: List[AspectDistribution]
        """
        return self._aspect_distributions

    @aspect_distributions.setter
    def aspect_distributions(self, aspect_distributions):
        """Sets the aspect_distributions of this Refinement.

        Contains information about one or more aspects that are associated with the category identified by <b>dominantCategoryId</b>.

        :param aspect_distributions: The aspect_distributions of this Refinement.
        :type aspect_distributions: List[AspectDistribution]
        """

        self._aspect_distributions = aspect_distributions

    @property
    def dominant_category_id(self):
        """Gets the dominant_category_id of this Refinement.

        The ID of the category that eBay determines is most likely to cover the products matching the search criteria.

        :return: The dominant_category_id of this Refinement.
        :rtype: str
        """
        return self._dominant_category_id

    @dominant_category_id.setter
    def dominant_category_id(self, dominant_category_id):
        """Sets the dominant_category_id of this Refinement.

        The ID of the category that eBay determines is most likely to cover the products matching the search criteria.

        :param dominant_category_id: The dominant_category_id of this Refinement.
        :type dominant_category_id: str
        """

        self._dominant_category_id = dominant_category_id
