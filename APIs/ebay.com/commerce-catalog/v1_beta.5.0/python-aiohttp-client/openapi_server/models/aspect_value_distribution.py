# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AspectValueDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, localized_aspect_value: str=None, match_count: int=None, refinement_href: str=None):
        """AspectValueDistribution - a model defined in OpenAPI

        :param localized_aspect_value: The localized_aspect_value of this AspectValueDistribution.
        :param match_count: The match_count of this AspectValueDistribution.
        :param refinement_href: The refinement_href of this AspectValueDistribution.
        """
        self.openapi_types = {
            'localized_aspect_value': str,
            'match_count': int,
            'refinement_href': str
        }

        self.attribute_map = {
            'localized_aspect_value': 'localizedAspectValue',
            'match_count': 'matchCount',
            'refinement_href': 'refinementHref'
        }

        self._localized_aspect_value = localized_aspect_value
        self._match_count = match_count
        self._refinement_href = refinement_href

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AspectValueDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AspectValueDistribution of this AspectValueDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def localized_aspect_value(self):
        """Gets the localized_aspect_value of this AspectValueDistribution.

        The localized value of the category aspect identified by <b>refinement.aspectDistributions.localizedAspectName</b>.

        :return: The localized_aspect_value of this AspectValueDistribution.
        :rtype: str
        """
        return self._localized_aspect_value

    @localized_aspect_value.setter
    def localized_aspect_value(self, localized_aspect_value):
        """Sets the localized_aspect_value of this AspectValueDistribution.

        The localized value of the category aspect identified by <b>refinement.aspectDistributions.localizedAspectName</b>.

        :param localized_aspect_value: The localized_aspect_value of this AspectValueDistribution.
        :type localized_aspect_value: str
        """

        self._localized_aspect_value = localized_aspect_value

    @property
    def match_count(self):
        """Gets the match_count of this AspectValueDistribution.

        The number of times the value of <b>localizedAspectValue</b> has been used for eBay product listings. By comparing this quantity to the <b>matchCount</b> for other values of the same aspect, you can present a histogram of the values to sellers, who can use that information to select which aspect value is most appropriate for their product. You can then include the user-selected value in the the <b>search</b> call's <b>aspect_filter</b> parameter to refine your search.

        :return: The match_count of this AspectValueDistribution.
        :rtype: int
        """
        return self._match_count

    @match_count.setter
    def match_count(self, match_count):
        """Sets the match_count of this AspectValueDistribution.

        The number of times the value of <b>localizedAspectValue</b> has been used for eBay product listings. By comparing this quantity to the <b>matchCount</b> for other values of the same aspect, you can present a histogram of the values to sellers, who can use that information to select which aspect value is most appropriate for their product. You can then include the user-selected value in the the <b>search</b> call's <b>aspect_filter</b> parameter to refine your search.

        :param match_count: The match_count of this AspectValueDistribution.
        :type match_count: int
        """

        self._match_count = match_count

    @property
    def refinement_href(self):
        """Gets the refinement_href of this AspectValueDistribution.

        A HATEOAS reference that further refines the search with this particular <b>localizedAspectValue</b>.

        :return: The refinement_href of this AspectValueDistribution.
        :rtype: str
        """
        return self._refinement_href

    @refinement_href.setter
    def refinement_href(self, refinement_href):
        """Sets the refinement_href of this AspectValueDistribution.

        A HATEOAS reference that further refines the search with this particular <b>localizedAspectValue</b>.

        :param refinement_href: The refinement_href of this AspectValueDistribution.
        :type refinement_href: str
        """

        self._refinement_href = refinement_href
