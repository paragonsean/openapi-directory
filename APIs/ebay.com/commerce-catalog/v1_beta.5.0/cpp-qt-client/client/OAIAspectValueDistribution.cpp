/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAspectValueDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAspectValueDistribution::OAIAspectValueDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAspectValueDistribution::OAIAspectValueDistribution() {
    this->initializeModel();
}

OAIAspectValueDistribution::~OAIAspectValueDistribution() {}

void OAIAspectValueDistribution::initializeModel() {

    m_localized_aspect_value_isSet = false;
    m_localized_aspect_value_isValid = false;

    m_match_count_isSet = false;
    m_match_count_isValid = false;

    m_refinement_href_isSet = false;
    m_refinement_href_isValid = false;
}

void OAIAspectValueDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAspectValueDistribution::fromJsonObject(QJsonObject json) {

    m_localized_aspect_value_isValid = ::OpenAPI::fromJsonValue(m_localized_aspect_value, json[QString("localizedAspectValue")]);
    m_localized_aspect_value_isSet = !json[QString("localizedAspectValue")].isNull() && m_localized_aspect_value_isValid;

    m_match_count_isValid = ::OpenAPI::fromJsonValue(m_match_count, json[QString("matchCount")]);
    m_match_count_isSet = !json[QString("matchCount")].isNull() && m_match_count_isValid;

    m_refinement_href_isValid = ::OpenAPI::fromJsonValue(m_refinement_href, json[QString("refinementHref")]);
    m_refinement_href_isSet = !json[QString("refinementHref")].isNull() && m_refinement_href_isValid;
}

QString OAIAspectValueDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAspectValueDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_localized_aspect_value_isSet) {
        obj.insert(QString("localizedAspectValue"), ::OpenAPI::toJsonValue(m_localized_aspect_value));
    }
    if (m_match_count_isSet) {
        obj.insert(QString("matchCount"), ::OpenAPI::toJsonValue(m_match_count));
    }
    if (m_refinement_href_isSet) {
        obj.insert(QString("refinementHref"), ::OpenAPI::toJsonValue(m_refinement_href));
    }
    return obj;
}

QString OAIAspectValueDistribution::getLocalizedAspectValue() const {
    return m_localized_aspect_value;
}
void OAIAspectValueDistribution::setLocalizedAspectValue(const QString &localized_aspect_value) {
    m_localized_aspect_value = localized_aspect_value;
    m_localized_aspect_value_isSet = true;
}

bool OAIAspectValueDistribution::is_localized_aspect_value_Set() const{
    return m_localized_aspect_value_isSet;
}

bool OAIAspectValueDistribution::is_localized_aspect_value_Valid() const{
    return m_localized_aspect_value_isValid;
}

qint32 OAIAspectValueDistribution::getMatchCount() const {
    return m_match_count;
}
void OAIAspectValueDistribution::setMatchCount(const qint32 &match_count) {
    m_match_count = match_count;
    m_match_count_isSet = true;
}

bool OAIAspectValueDistribution::is_match_count_Set() const{
    return m_match_count_isSet;
}

bool OAIAspectValueDistribution::is_match_count_Valid() const{
    return m_match_count_isValid;
}

QString OAIAspectValueDistribution::getRefinementHref() const {
    return m_refinement_href;
}
void OAIAspectValueDistribution::setRefinementHref(const QString &refinement_href) {
    m_refinement_href = refinement_href;
    m_refinement_href_isSet = true;
}

bool OAIAspectValueDistribution::is_refinement_href_Set() const{
    return m_refinement_href_isSet;
}

bool OAIAspectValueDistribution::is_refinement_href_Valid() const{
    return m_refinement_href_isValid;
}

bool OAIAspectValueDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_localized_aspect_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refinement_href_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAspectValueDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
