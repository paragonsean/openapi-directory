/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProductSummary.h
 *
 * This type contains a summary of a specified product. The product summary includes information about the product&#39;s identifiers, product images, aspects, and the &lt;b&gt;getProduct&lt;/b&gt; URL for retrieving the product details.
 */

#ifndef OAIProductSummary_H
#define OAIProductSummary_H

#include <QJsonObject>

#include "OAIAspect.h"
#include "OAIImage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage;
class OAIAspect;

class OAIProductSummary : public OAIObject {
public:
    OAIProductSummary();
    OAIProductSummary(QString json);
    ~OAIProductSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIImage> getAdditionalImages() const;
    void setAdditionalImages(const QList<OAIImage> &additional_images);
    bool is_additional_images_Set() const;
    bool is_additional_images_Valid() const;

    QList<OAIAspect> getAspects() const;
    void setAspects(const QList<OAIAspect> &aspects);
    bool is_aspects_Set() const;
    bool is_aspects_Valid() const;

    QString getBrand() const;
    void setBrand(const QString &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    QList<QString> getEan() const;
    void setEan(const QList<QString> &ean);
    bool is_ean_Set() const;
    bool is_ean_Valid() const;

    QString getEpid() const;
    void setEpid(const QString &epid);
    bool is_epid_Set() const;
    bool is_epid_Valid() const;

    QList<QString> getGtin() const;
    void setGtin(const QList<QString> &gtin);
    bool is_gtin_Set() const;
    bool is_gtin_Valid() const;

    OAIImage getImage() const;
    void setImage(const OAIImage &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QList<QString> getIsbn() const;
    void setIsbn(const QList<QString> &isbn);
    bool is_isbn_Set() const;
    bool is_isbn_Valid() const;

    QList<QString> getMpn() const;
    void setMpn(const QList<QString> &mpn);
    bool is_mpn_Set() const;
    bool is_mpn_Valid() const;

    QString getProductHref() const;
    void setProductHref(const QString &product_href);
    bool is_product_href_Set() const;
    bool is_product_href_Valid() const;

    QString getProductWebUrl() const;
    void setProductWebUrl(const QString &product_web_url);
    bool is_product_web_url_Set() const;
    bool is_product_web_url_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QList<QString> getUpc() const;
    void setUpc(const QList<QString> &upc);
    bool is_upc_Set() const;
    bool is_upc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIImage> m_additional_images;
    bool m_additional_images_isSet;
    bool m_additional_images_isValid;

    QList<OAIAspect> m_aspects;
    bool m_aspects_isSet;
    bool m_aspects_isValid;

    QString m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    QList<QString> m_ean;
    bool m_ean_isSet;
    bool m_ean_isValid;

    QString m_epid;
    bool m_epid_isSet;
    bool m_epid_isValid;

    QList<QString> m_gtin;
    bool m_gtin_isSet;
    bool m_gtin_isValid;

    OAIImage m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QList<QString> m_isbn;
    bool m_isbn_isSet;
    bool m_isbn_isValid;

    QList<QString> m_mpn;
    bool m_mpn_isSet;
    bool m_mpn_isValid;

    QString m_product_href;
    bool m_product_href_isSet;
    bool m_product_href_isValid;

    QString m_product_web_url;
    bool m_product_web_url_isSet;
    bool m_product_web_url_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QList<QString> m_upc;
    bool m_upc_isSet;
    bool m_upc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProductSummary)

#endif // OAIProductSummary_H
