/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefinement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefinement::OAIRefinement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefinement::OAIRefinement() {
    this->initializeModel();
}

OAIRefinement::~OAIRefinement() {}

void OAIRefinement::initializeModel() {

    m_aspect_distributions_isSet = false;
    m_aspect_distributions_isValid = false;

    m_dominant_category_id_isSet = false;
    m_dominant_category_id_isValid = false;
}

void OAIRefinement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefinement::fromJsonObject(QJsonObject json) {

    m_aspect_distributions_isValid = ::OpenAPI::fromJsonValue(m_aspect_distributions, json[QString("aspectDistributions")]);
    m_aspect_distributions_isSet = !json[QString("aspectDistributions")].isNull() && m_aspect_distributions_isValid;

    m_dominant_category_id_isValid = ::OpenAPI::fromJsonValue(m_dominant_category_id, json[QString("dominantCategoryId")]);
    m_dominant_category_id_isSet = !json[QString("dominantCategoryId")].isNull() && m_dominant_category_id_isValid;
}

QString OAIRefinement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefinement::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_distributions.size() > 0) {
        obj.insert(QString("aspectDistributions"), ::OpenAPI::toJsonValue(m_aspect_distributions));
    }
    if (m_dominant_category_id_isSet) {
        obj.insert(QString("dominantCategoryId"), ::OpenAPI::toJsonValue(m_dominant_category_id));
    }
    return obj;
}

QList<OAIAspectDistribution> OAIRefinement::getAspectDistributions() const {
    return m_aspect_distributions;
}
void OAIRefinement::setAspectDistributions(const QList<OAIAspectDistribution> &aspect_distributions) {
    m_aspect_distributions = aspect_distributions;
    m_aspect_distributions_isSet = true;
}

bool OAIRefinement::is_aspect_distributions_Set() const{
    return m_aspect_distributions_isSet;
}

bool OAIRefinement::is_aspect_distributions_Valid() const{
    return m_aspect_distributions_isValid;
}

QString OAIRefinement::getDominantCategoryId() const {
    return m_dominant_category_id;
}
void OAIRefinement::setDominantCategoryId(const QString &dominant_category_id) {
    m_dominant_category_id = dominant_category_id;
    m_dominant_category_id_isSet = true;
}

bool OAIRefinement::is_dominant_category_id_Set() const{
    return m_dominant_category_id_isSet;
}

bool OAIRefinement::is_dominant_category_id_Valid() const{
    return m_dominant_category_id_isValid;
}

bool OAIRefinement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dominant_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefinement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
