/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAspectValueDistribution.h
 *
 * This type contains information about one value of a specified aspect. This value serves as a product refinement.
 */

#ifndef OAIAspectValueDistribution_H
#define OAIAspectValueDistribution_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAspectValueDistribution : public OAIObject {
public:
    OAIAspectValueDistribution();
    OAIAspectValueDistribution(QString json);
    ~OAIAspectValueDistribution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLocalizedAspectValue() const;
    void setLocalizedAspectValue(const QString &localized_aspect_value);
    bool is_localized_aspect_value_Set() const;
    bool is_localized_aspect_value_Valid() const;

    qint32 getMatchCount() const;
    void setMatchCount(const qint32 &match_count);
    bool is_match_count_Set() const;
    bool is_match_count_Valid() const;

    QString getRefinementHref() const;
    void setRefinementHref(const QString &refinement_href);
    bool is_refinement_href_Set() const;
    bool is_refinement_href_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_localized_aspect_value;
    bool m_localized_aspect_value_isSet;
    bool m_localized_aspect_value_isValid;

    qint32 m_match_count;
    bool m_match_count_isSet;
    bool m_match_count_isValid;

    QString m_refinement_href;
    bool m_refinement_href_isSet;
    bool m_refinement_href_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAspectValueDistribution)

#endif // OAIAspectValueDistribution_H
