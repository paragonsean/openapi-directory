/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSearchResponse::OAIProductSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSearchResponse::OAIProductSearchResponse() {
    this->initializeModel();
}

OAIProductSearchResponse::~OAIProductSearchResponse() {}

void OAIProductSearchResponse::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_product_summaries_isSet = false;
    m_product_summaries_isValid = false;

    m_refinement_isSet = false;
    m_refinement_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIProductSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSearchResponse::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_product_summaries_isValid = ::OpenAPI::fromJsonValue(m_product_summaries, json[QString("productSummaries")]);
    m_product_summaries_isSet = !json[QString("productSummaries")].isNull() && m_product_summaries_isValid;

    m_refinement_isValid = ::OpenAPI::fromJsonValue(m_refinement, json[QString("refinement")]);
    m_refinement_isSet = !json[QString("refinement")].isNull() && m_refinement_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIProductSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_product_summaries.size() > 0) {
        obj.insert(QString("productSummaries"), ::OpenAPI::toJsonValue(m_product_summaries));
    }
    if (m_refinement.isSet()) {
        obj.insert(QString("refinement"), ::OpenAPI::toJsonValue(m_refinement));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAIProductSearchResponse::getHref() const {
    return m_href;
}
void OAIProductSearchResponse::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIProductSearchResponse::is_href_Set() const{
    return m_href_isSet;
}

bool OAIProductSearchResponse::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAIProductSearchResponse::getLimit() const {
    return m_limit;
}
void OAIProductSearchResponse::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIProductSearchResponse::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIProductSearchResponse::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIProductSearchResponse::getNext() const {
    return m_next;
}
void OAIProductSearchResponse::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIProductSearchResponse::is_next_Set() const{
    return m_next_isSet;
}

bool OAIProductSearchResponse::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAIProductSearchResponse::getOffset() const {
    return m_offset;
}
void OAIProductSearchResponse::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIProductSearchResponse::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIProductSearchResponse::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIProductSearchResponse::getPrev() const {
    return m_prev;
}
void OAIProductSearchResponse::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAIProductSearchResponse::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAIProductSearchResponse::is_prev_Valid() const{
    return m_prev_isValid;
}

QList<OAIProductSummary> OAIProductSearchResponse::getProductSummaries() const {
    return m_product_summaries;
}
void OAIProductSearchResponse::setProductSummaries(const QList<OAIProductSummary> &product_summaries) {
    m_product_summaries = product_summaries;
    m_product_summaries_isSet = true;
}

bool OAIProductSearchResponse::is_product_summaries_Set() const{
    return m_product_summaries_isSet;
}

bool OAIProductSearchResponse::is_product_summaries_Valid() const{
    return m_product_summaries_isValid;
}

OAIRefinement OAIProductSearchResponse::getRefinement() const {
    return m_refinement;
}
void OAIProductSearchResponse::setRefinement(const OAIRefinement &refinement) {
    m_refinement = refinement;
    m_refinement_isSet = true;
}

bool OAIProductSearchResponse::is_refinement_Set() const{
    return m_refinement_isSet;
}

bool OAIProductSearchResponse::is_refinement_Valid() const{
    return m_refinement_isValid;
}

qint32 OAIProductSearchResponse::getTotal() const {
    return m_total;
}
void OAIProductSearchResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIProductSearchResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIProductSearchResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIProductSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refinement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
