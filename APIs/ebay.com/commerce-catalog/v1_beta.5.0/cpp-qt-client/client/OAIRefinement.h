/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRefinement.h
 *
 * This type identifies a product category and the aspects associated with that category. Each aspect distribution container returns the distribution of values that have been used for the aspect.
 */

#ifndef OAIRefinement_H
#define OAIRefinement_H

#include <QJsonObject>

#include "OAIAspectDistribution.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAspectDistribution;

class OAIRefinement : public OAIObject {
public:
    OAIRefinement();
    OAIRefinement(QString json);
    ~OAIRefinement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAspectDistribution> getAspectDistributions() const;
    void setAspectDistributions(const QList<OAIAspectDistribution> &aspect_distributions);
    bool is_aspect_distributions_Set() const;
    bool is_aspect_distributions_Valid() const;

    QString getDominantCategoryId() const;
    void setDominantCategoryId(const QString &dominant_category_id);
    bool is_dominant_category_id_Set() const;
    bool is_dominant_category_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAspectDistribution> m_aspect_distributions;
    bool m_aspect_distributions_isSet;
    bool m_aspect_distributions_isValid;

    QString m_dominant_category_id;
    bool m_dominant_category_id_isSet;
    bool m_dominant_category_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRefinement)

#endif // OAIRefinement_H
