/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_additional_images_isSet = false;
    m_additional_images_isValid = false;

    m_aspects_isSet = false;
    m_aspects_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_isbn_isSet = false;
    m_isbn_isValid = false;

    m_mpn_isSet = false;
    m_mpn_isValid = false;

    m_other_applicable_category_ids_isSet = false;
    m_other_applicable_category_ids_isValid = false;

    m_primary_category_id_isSet = false;
    m_primary_category_id_isValid = false;

    m_product_web_url_isSet = false;
    m_product_web_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_upc_isSet = false;
    m_upc_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_additional_images_isValid = ::OpenAPI::fromJsonValue(m_additional_images, json[QString("additionalImages")]);
    m_additional_images_isSet = !json[QString("additionalImages")].isNull() && m_additional_images_isValid;

    m_aspects_isValid = ::OpenAPI::fromJsonValue(m_aspects, json[QString("aspects")]);
    m_aspects_isSet = !json[QString("aspects")].isNull() && m_aspects_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_isbn_isValid = ::OpenAPI::fromJsonValue(m_isbn, json[QString("isbn")]);
    m_isbn_isSet = !json[QString("isbn")].isNull() && m_isbn_isValid;

    m_mpn_isValid = ::OpenAPI::fromJsonValue(m_mpn, json[QString("mpn")]);
    m_mpn_isSet = !json[QString("mpn")].isNull() && m_mpn_isValid;

    m_other_applicable_category_ids_isValid = ::OpenAPI::fromJsonValue(m_other_applicable_category_ids, json[QString("otherApplicableCategoryIds")]);
    m_other_applicable_category_ids_isSet = !json[QString("otherApplicableCategoryIds")].isNull() && m_other_applicable_category_ids_isValid;

    m_primary_category_id_isValid = ::OpenAPI::fromJsonValue(m_primary_category_id, json[QString("primaryCategoryId")]);
    m_primary_category_id_isSet = !json[QString("primaryCategoryId")].isNull() && m_primary_category_id_isValid;

    m_product_web_url_isValid = ::OpenAPI::fromJsonValue(m_product_web_url, json[QString("productWebUrl")]);
    m_product_web_url_isSet = !json[QString("productWebUrl")].isNull() && m_product_web_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_upc_isValid = ::OpenAPI::fromJsonValue(m_upc, json[QString("upc")]);
    m_upc_isSet = !json[QString("upc")].isNull() && m_upc_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_images.size() > 0) {
        obj.insert(QString("additionalImages"), ::OpenAPI::toJsonValue(m_additional_images));
    }
    if (m_aspects.size() > 0) {
        obj.insert(QString("aspects"), ::OpenAPI::toJsonValue(m_aspects));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ean.size() > 0) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_gtin.size() > 0) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_isbn.size() > 0) {
        obj.insert(QString("isbn"), ::OpenAPI::toJsonValue(m_isbn));
    }
    if (m_mpn.size() > 0) {
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(m_mpn));
    }
    if (m_other_applicable_category_ids.size() > 0) {
        obj.insert(QString("otherApplicableCategoryIds"), ::OpenAPI::toJsonValue(m_other_applicable_category_ids));
    }
    if (m_primary_category_id_isSet) {
        obj.insert(QString("primaryCategoryId"), ::OpenAPI::toJsonValue(m_primary_category_id));
    }
    if (m_product_web_url_isSet) {
        obj.insert(QString("productWebUrl"), ::OpenAPI::toJsonValue(m_product_web_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_upc.size() > 0) {
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(m_upc));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIImage> OAIProduct::getAdditionalImages() const {
    return m_additional_images;
}
void OAIProduct::setAdditionalImages(const QList<OAIImage> &additional_images) {
    m_additional_images = additional_images;
    m_additional_images_isSet = true;
}

bool OAIProduct::is_additional_images_Set() const{
    return m_additional_images_isSet;
}

bool OAIProduct::is_additional_images_Valid() const{
    return m_additional_images_isValid;
}

QList<OAIAspect> OAIProduct::getAspects() const {
    return m_aspects;
}
void OAIProduct::setAspects(const QList<OAIAspect> &aspects) {
    m_aspects = aspects;
    m_aspects_isSet = true;
}

bool OAIProduct::is_aspects_Set() const{
    return m_aspects_isSet;
}

bool OAIProduct::is_aspects_Valid() const{
    return m_aspects_isValid;
}

QString OAIProduct::getBrand() const {
    return m_brand;
}
void OAIProduct::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProduct::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProduct::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIProduct::getEan() const {
    return m_ean;
}
void OAIProduct::setEan(const QList<QString> &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIProduct::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIProduct::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIProduct::getEpid() const {
    return m_epid;
}
void OAIProduct::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIProduct::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIProduct::is_epid_Valid() const{
    return m_epid_isValid;
}

QList<QString> OAIProduct::getGtin() const {
    return m_gtin;
}
void OAIProduct::setGtin(const QList<QString> &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIProduct::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIProduct::is_gtin_Valid() const{
    return m_gtin_isValid;
}

OAIImage OAIProduct::getImage() const {
    return m_image;
}
void OAIProduct::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIProduct::is_image_Set() const{
    return m_image_isSet;
}

bool OAIProduct::is_image_Valid() const{
    return m_image_isValid;
}

QList<QString> OAIProduct::getIsbn() const {
    return m_isbn;
}
void OAIProduct::setIsbn(const QList<QString> &isbn) {
    m_isbn = isbn;
    m_isbn_isSet = true;
}

bool OAIProduct::is_isbn_Set() const{
    return m_isbn_isSet;
}

bool OAIProduct::is_isbn_Valid() const{
    return m_isbn_isValid;
}

QList<QString> OAIProduct::getMpn() const {
    return m_mpn;
}
void OAIProduct::setMpn(const QList<QString> &mpn) {
    m_mpn = mpn;
    m_mpn_isSet = true;
}

bool OAIProduct::is_mpn_Set() const{
    return m_mpn_isSet;
}

bool OAIProduct::is_mpn_Valid() const{
    return m_mpn_isValid;
}

QList<QString> OAIProduct::getOtherApplicableCategoryIds() const {
    return m_other_applicable_category_ids;
}
void OAIProduct::setOtherApplicableCategoryIds(const QList<QString> &other_applicable_category_ids) {
    m_other_applicable_category_ids = other_applicable_category_ids;
    m_other_applicable_category_ids_isSet = true;
}

bool OAIProduct::is_other_applicable_category_ids_Set() const{
    return m_other_applicable_category_ids_isSet;
}

bool OAIProduct::is_other_applicable_category_ids_Valid() const{
    return m_other_applicable_category_ids_isValid;
}

QString OAIProduct::getPrimaryCategoryId() const {
    return m_primary_category_id;
}
void OAIProduct::setPrimaryCategoryId(const QString &primary_category_id) {
    m_primary_category_id = primary_category_id;
    m_primary_category_id_isSet = true;
}

bool OAIProduct::is_primary_category_id_Set() const{
    return m_primary_category_id_isSet;
}

bool OAIProduct::is_primary_category_id_Valid() const{
    return m_primary_category_id_isValid;
}

QString OAIProduct::getProductWebUrl() const {
    return m_product_web_url;
}
void OAIProduct::setProductWebUrl(const QString &product_web_url) {
    m_product_web_url = product_web_url;
    m_product_web_url_isSet = true;
}

bool OAIProduct::is_product_web_url_Set() const{
    return m_product_web_url_isSet;
}

bool OAIProduct::is_product_web_url_Valid() const{
    return m_product_web_url_isValid;
}

QString OAIProduct::getTitle() const {
    return m_title;
}
void OAIProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProduct::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIProduct::getUpc() const {
    return m_upc;
}
void OAIProduct::setUpc(const QList<QString> &upc) {
    m_upc = upc;
    m_upc_isSet = true;
}

bool OAIProduct::is_upc_Set() const{
    return m_upc_isSet;
}

bool OAIProduct::is_upc_Valid() const{
    return m_upc_isValid;
}

QString OAIProduct::getVersion() const {
    return m_version;
}
void OAIProduct::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIProduct::is_version_Set() const{
    return m_version_isSet;
}

bool OAIProduct::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_isbn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_applicable_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
