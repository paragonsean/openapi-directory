/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSummary::OAIProductSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSummary::OAIProductSummary() {
    this->initializeModel();
}

OAIProductSummary::~OAIProductSummary() {}

void OAIProductSummary::initializeModel() {

    m_additional_images_isSet = false;
    m_additional_images_isValid = false;

    m_aspects_isSet = false;
    m_aspects_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_isbn_isSet = false;
    m_isbn_isValid = false;

    m_mpn_isSet = false;
    m_mpn_isValid = false;

    m_product_href_isSet = false;
    m_product_href_isValid = false;

    m_product_web_url_isSet = false;
    m_product_web_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_upc_isSet = false;
    m_upc_isValid = false;
}

void OAIProductSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSummary::fromJsonObject(QJsonObject json) {

    m_additional_images_isValid = ::OpenAPI::fromJsonValue(m_additional_images, json[QString("additionalImages")]);
    m_additional_images_isSet = !json[QString("additionalImages")].isNull() && m_additional_images_isValid;

    m_aspects_isValid = ::OpenAPI::fromJsonValue(m_aspects, json[QString("aspects")]);
    m_aspects_isSet = !json[QString("aspects")].isNull() && m_aspects_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_isbn_isValid = ::OpenAPI::fromJsonValue(m_isbn, json[QString("isbn")]);
    m_isbn_isSet = !json[QString("isbn")].isNull() && m_isbn_isValid;

    m_mpn_isValid = ::OpenAPI::fromJsonValue(m_mpn, json[QString("mpn")]);
    m_mpn_isSet = !json[QString("mpn")].isNull() && m_mpn_isValid;

    m_product_href_isValid = ::OpenAPI::fromJsonValue(m_product_href, json[QString("productHref")]);
    m_product_href_isSet = !json[QString("productHref")].isNull() && m_product_href_isValid;

    m_product_web_url_isValid = ::OpenAPI::fromJsonValue(m_product_web_url, json[QString("productWebUrl")]);
    m_product_web_url_isSet = !json[QString("productWebUrl")].isNull() && m_product_web_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_upc_isValid = ::OpenAPI::fromJsonValue(m_upc, json[QString("upc")]);
    m_upc_isSet = !json[QString("upc")].isNull() && m_upc_isValid;
}

QString OAIProductSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_images.size() > 0) {
        obj.insert(QString("additionalImages"), ::OpenAPI::toJsonValue(m_additional_images));
    }
    if (m_aspects.size() > 0) {
        obj.insert(QString("aspects"), ::OpenAPI::toJsonValue(m_aspects));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_ean.size() > 0) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_gtin.size() > 0) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_isbn.size() > 0) {
        obj.insert(QString("isbn"), ::OpenAPI::toJsonValue(m_isbn));
    }
    if (m_mpn.size() > 0) {
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(m_mpn));
    }
    if (m_product_href_isSet) {
        obj.insert(QString("productHref"), ::OpenAPI::toJsonValue(m_product_href));
    }
    if (m_product_web_url_isSet) {
        obj.insert(QString("productWebUrl"), ::OpenAPI::toJsonValue(m_product_web_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_upc.size() > 0) {
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(m_upc));
    }
    return obj;
}

QList<OAIImage> OAIProductSummary::getAdditionalImages() const {
    return m_additional_images;
}
void OAIProductSummary::setAdditionalImages(const QList<OAIImage> &additional_images) {
    m_additional_images = additional_images;
    m_additional_images_isSet = true;
}

bool OAIProductSummary::is_additional_images_Set() const{
    return m_additional_images_isSet;
}

bool OAIProductSummary::is_additional_images_Valid() const{
    return m_additional_images_isValid;
}

QList<OAIAspect> OAIProductSummary::getAspects() const {
    return m_aspects;
}
void OAIProductSummary::setAspects(const QList<OAIAspect> &aspects) {
    m_aspects = aspects;
    m_aspects_isSet = true;
}

bool OAIProductSummary::is_aspects_Set() const{
    return m_aspects_isSet;
}

bool OAIProductSummary::is_aspects_Valid() const{
    return m_aspects_isValid;
}

QString OAIProductSummary::getBrand() const {
    return m_brand;
}
void OAIProductSummary::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProductSummary::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProductSummary::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIProductSummary::getEan() const {
    return m_ean;
}
void OAIProductSummary::setEan(const QList<QString> &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIProductSummary::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIProductSummary::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIProductSummary::getEpid() const {
    return m_epid;
}
void OAIProductSummary::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIProductSummary::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIProductSummary::is_epid_Valid() const{
    return m_epid_isValid;
}

QList<QString> OAIProductSummary::getGtin() const {
    return m_gtin;
}
void OAIProductSummary::setGtin(const QList<QString> &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIProductSummary::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIProductSummary::is_gtin_Valid() const{
    return m_gtin_isValid;
}

OAIImage OAIProductSummary::getImage() const {
    return m_image;
}
void OAIProductSummary::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIProductSummary::is_image_Set() const{
    return m_image_isSet;
}

bool OAIProductSummary::is_image_Valid() const{
    return m_image_isValid;
}

QList<QString> OAIProductSummary::getIsbn() const {
    return m_isbn;
}
void OAIProductSummary::setIsbn(const QList<QString> &isbn) {
    m_isbn = isbn;
    m_isbn_isSet = true;
}

bool OAIProductSummary::is_isbn_Set() const{
    return m_isbn_isSet;
}

bool OAIProductSummary::is_isbn_Valid() const{
    return m_isbn_isValid;
}

QList<QString> OAIProductSummary::getMpn() const {
    return m_mpn;
}
void OAIProductSummary::setMpn(const QList<QString> &mpn) {
    m_mpn = mpn;
    m_mpn_isSet = true;
}

bool OAIProductSummary::is_mpn_Set() const{
    return m_mpn_isSet;
}

bool OAIProductSummary::is_mpn_Valid() const{
    return m_mpn_isValid;
}

QString OAIProductSummary::getProductHref() const {
    return m_product_href;
}
void OAIProductSummary::setProductHref(const QString &product_href) {
    m_product_href = product_href;
    m_product_href_isSet = true;
}

bool OAIProductSummary::is_product_href_Set() const{
    return m_product_href_isSet;
}

bool OAIProductSummary::is_product_href_Valid() const{
    return m_product_href_isValid;
}

QString OAIProductSummary::getProductWebUrl() const {
    return m_product_web_url;
}
void OAIProductSummary::setProductWebUrl(const QString &product_web_url) {
    m_product_web_url = product_web_url;
    m_product_web_url_isSet = true;
}

bool OAIProductSummary::is_product_web_url_Set() const{
    return m_product_web_url_isSet;
}

bool OAIProductSummary::is_product_web_url_Valid() const{
    return m_product_web_url_isValid;
}

QString OAIProductSummary::getTitle() const {
    return m_title;
}
void OAIProductSummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProductSummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProductSummary::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIProductSummary::getUpc() const {
    return m_upc;
}
void OAIProductSummary::setUpc(const QList<QString> &upc) {
    m_upc = upc;
    m_upc_isSet = true;
}

bool OAIProductSummary::is_upc_Set() const{
    return m_upc_isSet;
}

bool OAIProductSummary::is_upc_Valid() const{
    return m_upc_isValid;
}

bool OAIProductSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_isbn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
