/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CatalogApi);
  }
}(this, function(expect, CatalogApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CatalogApi.Product();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Product', function() {
    it('should create an instance of Product', function() {
      // uncomment below and update the code to test Product
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be.a(CatalogApi.Product);
    });

    it('should have the property additionalImages (base name: "additionalImages")', function() {
      // uncomment below and update the code to test the property additionalImages
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property aspects (base name: "aspects")', function() {
      // uncomment below and update the code to test the property aspects
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property ean (base name: "ean")', function() {
      // uncomment below and update the code to test the property ean
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property epid (base name: "epid")', function() {
      // uncomment below and update the code to test the property epid
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property gtin (base name: "gtin")', function() {
      // uncomment below and update the code to test the property gtin
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property isbn (base name: "isbn")', function() {
      // uncomment below and update the code to test the property isbn
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property mpn (base name: "mpn")', function() {
      // uncomment below and update the code to test the property mpn
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property otherApplicableCategoryIds (base name: "otherApplicableCategoryIds")', function() {
      // uncomment below and update the code to test the property otherApplicableCategoryIds
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property primaryCategoryId (base name: "primaryCategoryId")', function() {
      // uncomment below and update the code to test the property primaryCategoryId
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property productWebUrl (base name: "productWebUrl")', function() {
      // uncomment below and update the code to test the property productWebUrl
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property upc (base name: "upc")', function() {
      // uncomment below and update the code to test the property upc
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new CatalogApi.Product();
      //expect(instance).to.be();
    });

  });

}));
