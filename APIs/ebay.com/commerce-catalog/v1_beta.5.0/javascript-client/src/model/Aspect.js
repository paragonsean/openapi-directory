/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Aspect model module.
 * @module model/Aspect
 * @version v1_beta.5.0
 */
class Aspect {
    /**
     * Constructs a new <code>Aspect</code>.
     * This type contains the name and values of a category aspect.
     * @alias module:model/Aspect
     */
    constructor() { 
        
        Aspect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aspect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aspect} obj Optional instance to populate.
     * @return {module:model/Aspect} The populated <code>Aspect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aspect();

            if (data.hasOwnProperty('localizedName')) {
                obj['localizedName'] = ApiClient.convertToType(data['localizedName'], 'String');
            }
            if (data.hasOwnProperty('localizedValues')) {
                obj['localizedValues'] = ApiClient.convertToType(data['localizedValues'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aspect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aspect</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['localizedName'] && !(typeof data['localizedName'] === 'string' || data['localizedName'] instanceof String)) {
            throw new Error("Expected the field `localizedName` to be a primitive type in the JSON string but got " + data['localizedName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['localizedValues'])) {
            throw new Error("Expected the field `localizedValues` to be an array in the JSON data but got " + data['localizedValues']);
        }

        return true;
    }


}



/**
 * The localized name of this category aspect.
 * @member {String} localizedName
 */
Aspect.prototype['localizedName'] = undefined;

/**
 * A list of the localized values of this category aspect.
 * @member {Array.<String>} localizedValues
 */
Aspect.prototype['localizedValues'] = undefined;






export default Aspect;

