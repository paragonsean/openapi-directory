/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AspectValueDistribution model module.
 * @module model/AspectValueDistribution
 * @version v1_beta.5.0
 */
class AspectValueDistribution {
    /**
     * Constructs a new <code>AspectValueDistribution</code>.
     * This type contains information about one value of a specified aspect. This value serves as a product refinement.
     * @alias module:model/AspectValueDistribution
     */
    constructor() { 
        
        AspectValueDistribution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AspectValueDistribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AspectValueDistribution} obj Optional instance to populate.
     * @return {module:model/AspectValueDistribution} The populated <code>AspectValueDistribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AspectValueDistribution();

            if (data.hasOwnProperty('localizedAspectValue')) {
                obj['localizedAspectValue'] = ApiClient.convertToType(data['localizedAspectValue'], 'String');
            }
            if (data.hasOwnProperty('matchCount')) {
                obj['matchCount'] = ApiClient.convertToType(data['matchCount'], 'Number');
            }
            if (data.hasOwnProperty('refinementHref')) {
                obj['refinementHref'] = ApiClient.convertToType(data['refinementHref'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AspectValueDistribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AspectValueDistribution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['localizedAspectValue'] && !(typeof data['localizedAspectValue'] === 'string' || data['localizedAspectValue'] instanceof String)) {
            throw new Error("Expected the field `localizedAspectValue` to be a primitive type in the JSON string but got " + data['localizedAspectValue']);
        }
        // ensure the json data is a string
        if (data['refinementHref'] && !(typeof data['refinementHref'] === 'string' || data['refinementHref'] instanceof String)) {
            throw new Error("Expected the field `refinementHref` to be a primitive type in the JSON string but got " + data['refinementHref']);
        }

        return true;
    }


}



/**
 * The localized value of the category aspect identified by <b>refinement.aspectDistributions.localizedAspectName</b>.
 * @member {String} localizedAspectValue
 */
AspectValueDistribution.prototype['localizedAspectValue'] = undefined;

/**
 * The number of times the value of <b>localizedAspectValue</b> has been used for eBay product listings. By comparing this quantity to the <b>matchCount</b> for other values of the same aspect, you can present a histogram of the values to sellers, who can use that information to select which aspect value is most appropriate for their product. You can then include the user-selected value in the the <b>search</b> call's <b>aspect_filter</b> parameter to refine your search.
 * @member {Number} matchCount
 */
AspectValueDistribution.prototype['matchCount'] = undefined;

/**
 * A HATEOAS reference that further refines the search with this particular <b>localizedAspectValue</b>.
 * @member {String} refinementHref
 */
AspectValueDistribution.prototype['refinementHref'] = undefined;






export default AspectValueDistribution;

