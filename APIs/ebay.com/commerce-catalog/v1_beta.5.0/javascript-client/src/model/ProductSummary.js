/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aspect from './Aspect';
import Image from './Image';

/**
 * The ProductSummary model module.
 * @module model/ProductSummary
 * @version v1_beta.5.0
 */
class ProductSummary {
    /**
     * Constructs a new <code>ProductSummary</code>.
     * This type contains a summary of a specified product. The product summary includes information about the product&#39;s identifiers, product images, aspects, and the &lt;b&gt;getProduct&lt;/b&gt; URL for retrieving the product details.
     * @alias module:model/ProductSummary
     */
    constructor() { 
        
        ProductSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductSummary} obj Optional instance to populate.
     * @return {module:model/ProductSummary} The populated <code>ProductSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductSummary();

            if (data.hasOwnProperty('additionalImages')) {
                obj['additionalImages'] = ApiClient.convertToType(data['additionalImages'], [Image]);
            }
            if (data.hasOwnProperty('aspects')) {
                obj['aspects'] = ApiClient.convertToType(data['aspects'], [Aspect]);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('ean')) {
                obj['ean'] = ApiClient.convertToType(data['ean'], ['String']);
            }
            if (data.hasOwnProperty('epid')) {
                obj['epid'] = ApiClient.convertToType(data['epid'], 'String');
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], ['String']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('isbn')) {
                obj['isbn'] = ApiClient.convertToType(data['isbn'], ['String']);
            }
            if (data.hasOwnProperty('mpn')) {
                obj['mpn'] = ApiClient.convertToType(data['mpn'], ['String']);
            }
            if (data.hasOwnProperty('productHref')) {
                obj['productHref'] = ApiClient.convertToType(data['productHref'], 'String');
            }
            if (data.hasOwnProperty('productWebUrl')) {
                obj['productWebUrl'] = ApiClient.convertToType(data['productWebUrl'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductSummary</code>.
     */
    static validateJSON(data) {
        if (data['additionalImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalImages'])) {
                throw new Error("Expected the field `additionalImages` to be an array in the JSON data but got " + data['additionalImages']);
            }
            // validate the optional field `additionalImages` (array)
            for (const item of data['additionalImages']) {
                Image.validateJSON(item);
            };
        }
        if (data['aspects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aspects'])) {
                throw new Error("Expected the field `aspects` to be an array in the JSON data but got " + data['aspects']);
            }
            // validate the optional field `aspects` (array)
            for (const item of data['aspects']) {
                Aspect.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ean'])) {
            throw new Error("Expected the field `ean` to be an array in the JSON data but got " + data['ean']);
        }
        // ensure the json data is a string
        if (data['epid'] && !(typeof data['epid'] === 'string' || data['epid'] instanceof String)) {
            throw new Error("Expected the field `epid` to be a primitive type in the JSON string but got " + data['epid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gtin'])) {
            throw new Error("Expected the field `gtin` to be an array in the JSON data but got " + data['gtin']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['isbn'])) {
            throw new Error("Expected the field `isbn` to be an array in the JSON data but got " + data['isbn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mpn'])) {
            throw new Error("Expected the field `mpn` to be an array in the JSON data but got " + data['mpn']);
        }
        // ensure the json data is a string
        if (data['productHref'] && !(typeof data['productHref'] === 'string' || data['productHref'] instanceof String)) {
            throw new Error("Expected the field `productHref` to be a primitive type in the JSON string but got " + data['productHref']);
        }
        // ensure the json data is a string
        if (data['productWebUrl'] && !(typeof data['productWebUrl'] === 'string' || data['productWebUrl'] instanceof String)) {
            throw new Error("Expected the field `productWebUrl` to be a primitive type in the JSON string but got " + data['productWebUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['upc'])) {
            throw new Error("Expected the field `upc` to be an array in the JSON data but got " + data['upc']);
        }

        return true;
    }


}



/**
 * Contains information about additional images associated with this product. For the primary image, see the <b>image</b> container.
 * @member {Array.<module:model/Image>} additionalImages
 */
ProductSummary.prototype['additionalImages'] = undefined;

/**
 * Contains an array of the category aspects and their values that are associated with this product.
 * @member {Array.<module:model/Aspect>} aspects
 */
ProductSummary.prototype['aspects'] = undefined;

/**
 * The manufacturer's brand name for this product.
 * @member {String} brand
 */
ProductSummary.prototype['brand'] = undefined;

/**
 * A list of all European Article Numbers (EANs) that identify this product.
 * @member {Array.<String>} ean
 */
ProductSummary.prototype['ean'] = undefined;

/**
 * The eBay product ID of this product.
 * @member {String} epid
 */
ProductSummary.prototype['epid'] = undefined;

/**
 * A list of all GTINs that identify this product. This includes all of the values returned in the <b>ean</b>, <b>isbn</b>, and <b>upc</b> fields.
 * @member {Array.<String>} gtin
 */
ProductSummary.prototype['gtin'] = undefined;

/**
 * @member {module:model/Image} image
 */
ProductSummary.prototype['image'] = undefined;

/**
 * A list of all International Standard Book Numbers (ISBNs) that identify this product.
 * @member {Array.<String>} isbn
 */
ProductSummary.prototype['isbn'] = undefined;

/**
 * A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify this product.
 * @member {Array.<String>} mpn
 */
ProductSummary.prototype['mpn'] = undefined;

/**
 * The URI of the <b>getProduct</b> call request that retrieves this product's details.
 * @member {String} productHref
 */
ProductSummary.prototype['productHref'] = undefined;

/**
 * The URL for this product's eBay product page.
 * @member {String} productWebUrl
 */
ProductSummary.prototype['productWebUrl'] = undefined;

/**
 * The title of this product on eBay.
 * @member {String} title
 */
ProductSummary.prototype['title'] = undefined;

/**
 * A list of Universal Product Codes (UPCs) that identify this product.
 * @member {Array.<String>} upc
 */
ProductSummary.prototype['upc'] = undefined;






export default ProductSummary;

