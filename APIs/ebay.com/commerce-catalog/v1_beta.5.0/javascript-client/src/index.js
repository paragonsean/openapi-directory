/**
 * Catalog API
 * The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier.
 *
 * The version of the OpenAPI document: v1_beta.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Aspect from './model/Aspect';
import AspectDistribution from './model/AspectDistribution';
import AspectValueDistribution from './model/AspectValueDistribution';
import Error from './model/Error';
import ErrorParameter from './model/ErrorParameter';
import Image from './model/Image';
import Product from './model/Product';
import ProductSearchResponse from './model/ProductSearchResponse';
import ProductSummary from './model/ProductSummary';
import Refinement from './model/Refinement';
import ProductApi from './api/ProductApi';
import ProductSummaryApi from './api/ProductSummaryApi';


/**
* The Catalog API allows users to search for and locate an eBay catalog product that is a direct match for the product that they wish to sell. Listing against an eBay catalog product helps insure that all listings (based off of that catalog product) have complete and accurate information. In addition to helping to create high-quality listings, another benefit to the seller of using catalog information to create listings is that much of the details of the listing will be prefilled, including the listing title, the listing description, the item specifics, and a stock image for the product (if available). Sellers will not have to enter item specifics themselves, and the overall listing process is a lot faster and easier..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CatalogApi = require('index'); // See note below*.
* var xxxSvc = new CatalogApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CatalogApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CatalogApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CatalogApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1_beta.5.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Aspect model constructor.
     * @property {module:model/Aspect}
     */
    Aspect,

    /**
     * The AspectDistribution model constructor.
     * @property {module:model/AspectDistribution}
     */
    AspectDistribution,

    /**
     * The AspectValueDistribution model constructor.
     * @property {module:model/AspectValueDistribution}
     */
    AspectValueDistribution,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorParameter model constructor.
     * @property {module:model/ErrorParameter}
     */
    ErrorParameter,

    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image,

    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product,

    /**
     * The ProductSearchResponse model constructor.
     * @property {module:model/ProductSearchResponse}
     */
    ProductSearchResponse,

    /**
     * The ProductSummary model constructor.
     * @property {module:model/ProductSummary}
     */
    ProductSummary,

    /**
     * The Refinement model constructor.
     * @property {module:model/Refinement}
     */
    Refinement,

    /**
    * The ProductApi service constructor.
    * @property {module:api/ProductApi}
    */
    ProductApi,

    /**
    * The ProductSummaryApi service constructor.
    * @property {module:api/ProductSummaryApi}
    */
    ProductSummaryApi
};
