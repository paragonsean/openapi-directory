/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Amount from './model/Amount';
import BestSellingProductResponse from './model/BestSellingProductResponse';
import Error from './model/Error';
import ErrorParameter from './model/ErrorParameter';
import Image from './model/Image';
import MarketPriceDetail from './model/MarketPriceDetail';
import MerchandisedProduct from './model/MerchandisedProduct';
import RatingAspect from './model/RatingAspect';
import RatingAspectDistribution from './model/RatingAspectDistribution';
import MerchandisedProductApi from './api/MerchandisedProductApi';


/**
* The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BuyMarketingApi = require('index'); // See note below*.
* var xxxSvc = new BuyMarketingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BuyMarketingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BuyMarketingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BuyMarketingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1_beta.2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Amount model constructor.
     * @property {module:model/Amount}
     */
    Amount,

    /**
     * The BestSellingProductResponse model constructor.
     * @property {module:model/BestSellingProductResponse}
     */
    BestSellingProductResponse,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorParameter model constructor.
     * @property {module:model/ErrorParameter}
     */
    ErrorParameter,

    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image,

    /**
     * The MarketPriceDetail model constructor.
     * @property {module:model/MarketPriceDetail}
     */
    MarketPriceDetail,

    /**
     * The MerchandisedProduct model constructor.
     * @property {module:model/MerchandisedProduct}
     */
    MerchandisedProduct,

    /**
     * The RatingAspect model constructor.
     * @property {module:model/RatingAspect}
     */
    RatingAspect,

    /**
     * The RatingAspectDistribution model constructor.
     * @property {module:model/RatingAspectDistribution}
     */
    RatingAspectDistribution,

    /**
    * The MerchandisedProductApi service constructor.
    * @property {module:api/MerchandisedProductApi}
    */
    MerchandisedProductApi
};
