/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RatingAspectDistribution from './RatingAspectDistribution';

/**
 * The RatingAspect model module.
 * @module model/RatingAspect
 * @version v1_beta.2.0
 */
class RatingAspect {
    /**
     * Constructs a new <code>RatingAspect</code>.
     * The type that defines the fields for the product aspect ratings.
     * @alias module:model/RatingAspect
     */
    constructor() { 
        
        RatingAspect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RatingAspect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RatingAspect} obj Optional instance to populate.
     * @return {module:model/RatingAspect} The populated <code>RatingAspect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RatingAspect();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ratingAspectDistributions')) {
                obj['ratingAspectDistributions'] = ApiClient.convertToType(data['ratingAspectDistributions'], [RatingAspectDistribution]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RatingAspect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RatingAspect</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['ratingAspectDistributions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ratingAspectDistributions'])) {
                throw new Error("Expected the field `ratingAspectDistributions` to be an array in the JSON data but got " + data['ratingAspectDistributions']);
            }
            // validate the optional field `ratingAspectDistributions` (array)
            for (const item of data['ratingAspectDistributions']) {
                RatingAspectDistribution.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The number of eBay users that rated the product on this aspect.
 * @member {Number} count
 */
RatingAspect.prototype['count'] = undefined;

/**
 * The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?
 * @member {String} description
 */
RatingAspect.prototype['description'] = undefined;

/**
 * The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up
 * @member {String} name
 */
RatingAspect.prototype['name'] = undefined;

/**
 * The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.
 * @member {Array.<module:model/RatingAspectDistribution>} ratingAspectDistributions
 */
RatingAspect.prototype['ratingAspectDistributions'] = undefined;






export default RatingAspect;

