/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The MarketPriceDetail model module.
 * @module model/MarketPriceDetail
 * @version v1_beta.2.0
 */
class MarketPriceDetail {
    /**
     * Constructs a new <code>MarketPriceDetail</code>.
     * The type that defines the fields for details about the product, such as condition and estimated start price.
     * @alias module:model/MarketPriceDetail
     */
    constructor() { 
        
        MarketPriceDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MarketPriceDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MarketPriceDetail} obj Optional instance to populate.
     * @return {module:model/MarketPriceDetail} The populated <code>MarketPriceDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MarketPriceDetail();

            if (data.hasOwnProperty('conditionGroup')) {
                obj['conditionGroup'] = ApiClient.convertToType(data['conditionGroup'], 'String');
            }
            if (data.hasOwnProperty('conditionIds')) {
                obj['conditionIds'] = ApiClient.convertToType(data['conditionIds'], ['String']);
            }
            if (data.hasOwnProperty('estimatedStartPrice')) {
                obj['estimatedStartPrice'] = Amount.constructFromObject(data['estimatedStartPrice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MarketPriceDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MarketPriceDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conditionGroup'] && !(typeof data['conditionGroup'] === 'string' || data['conditionGroup'] instanceof String)) {
            throw new Error("Expected the field `conditionGroup` to be a primitive type in the JSON string but got " + data['conditionGroup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditionIds'])) {
            throw new Error("Expected the field `conditionIds` to be an array in the JSON data but got " + data['conditionIds']);
        }
        // validate the optional field `estimatedStartPrice`
        if (data['estimatedStartPrice']) { // data not null
          Amount.validateJSON(data['estimatedStartPrice']);
        }

        return true;
    }


}



/**
 * The name for the condition of the product. For example: NEW
 * @member {String} conditionGroup
 */
MarketPriceDetail.prototype['conditionGroup'] = undefined;

/**
 * An array of condition identifiers for the product.
 * @member {Array.<String>} conditionIds
 */
MarketPriceDetail.prototype['conditionIds'] = undefined;

/**
 * @member {module:model/Amount} estimatedStartPrice
 */
MarketPriceDetail.prototype['estimatedStartPrice'] = undefined;






export default MarketPriceDetail;

