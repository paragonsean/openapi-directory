/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import MarketPriceDetail from './MarketPriceDetail';
import RatingAspect from './RatingAspect';

/**
 * The MerchandisedProduct model module.
 * @module model/MerchandisedProduct
 * @version v1_beta.2.0
 */
class MerchandisedProduct {
    /**
     * Constructs a new <code>MerchandisedProduct</code>.
     * The type that defines the fields for product information, including price, condition, ratings, etc.
     * @alias module:model/MerchandisedProduct
     */
    constructor() { 
        
        MerchandisedProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MerchandisedProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchandisedProduct} obj Optional instance to populate.
     * @return {module:model/MerchandisedProduct} The populated <code>MerchandisedProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchandisedProduct();

            if (data.hasOwnProperty('averageRating')) {
                obj['averageRating'] = ApiClient.convertToType(data['averageRating'], 'String');
            }
            if (data.hasOwnProperty('epid')) {
                obj['epid'] = ApiClient.convertToType(data['epid'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('marketPriceDetails')) {
                obj['marketPriceDetails'] = ApiClient.convertToType(data['marketPriceDetails'], [MarketPriceDetail]);
            }
            if (data.hasOwnProperty('ratingAspects')) {
                obj['ratingAspects'] = ApiClient.convertToType(data['ratingAspects'], [RatingAspect]);
            }
            if (data.hasOwnProperty('ratingCount')) {
                obj['ratingCount'] = ApiClient.convertToType(data['ratingCount'], 'Number');
            }
            if (data.hasOwnProperty('reviewCount')) {
                obj['reviewCount'] = ApiClient.convertToType(data['reviewCount'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchandisedProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchandisedProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['averageRating'] && !(typeof data['averageRating'] === 'string' || data['averageRating'] instanceof String)) {
            throw new Error("Expected the field `averageRating` to be a primitive type in the JSON string but got " + data['averageRating']);
        }
        // ensure the json data is a string
        if (data['epid'] && !(typeof data['epid'] === 'string' || data['epid'] instanceof String)) {
            throw new Error("Expected the field `epid` to be a primitive type in the JSON string but got " + data['epid']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        if (data['marketPriceDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['marketPriceDetails'])) {
                throw new Error("Expected the field `marketPriceDetails` to be an array in the JSON data but got " + data['marketPriceDetails']);
            }
            // validate the optional field `marketPriceDetails` (array)
            for (const item of data['marketPriceDetails']) {
                MarketPriceDetail.validateJSON(item);
            };
        }
        if (data['ratingAspects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ratingAspects'])) {
                throw new Error("Expected the field `ratingAspects` to be an array in the JSON data but got " + data['ratingAspects']);
            }
            // validate the optional field `ratingAspects` (array)
            for (const item of data['ratingAspects']) {
                RatingAspect.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The average rating for the product based on eBay user ratings.
 * @member {String} averageRating
 */
MerchandisedProduct.prototype['averageRating'] = undefined;

/**
 * The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API <b>search</b> method to retrieve items for this product.
 * @member {String} epid
 */
MerchandisedProduct.prototype['epid'] = undefined;

/**
 * @member {module:model/Image} image
 */
MerchandisedProduct.prototype['image'] = undefined;

/**
 * An array of containers for the product market price details, such as condition and market price.
 * @member {Array.<module:model/MarketPriceDetail>} marketPriceDetails
 */
MerchandisedProduct.prototype['marketPriceDetails'] = undefined;

/**
 * An array of containers for ratings of the product aspects, such as \"Is it a good value\".
 * @member {Array.<module:model/RatingAspect>} ratingAspects
 */
MerchandisedProduct.prototype['ratingAspects'] = undefined;

/**
 * The total number of eBay users that rated the product.
 * @member {Number} ratingCount
 */
MerchandisedProduct.prototype['ratingCount'] = undefined;

/**
 * The total number of eBay users that wrote a review for the product. 
 * @member {Number} reviewCount
 */
MerchandisedProduct.prototype['reviewCount'] = undefined;

/**
 * The title of the product.
 * @member {String} title
 */
MerchandisedProduct.prototype['title'] = undefined;






export default MerchandisedProduct;

