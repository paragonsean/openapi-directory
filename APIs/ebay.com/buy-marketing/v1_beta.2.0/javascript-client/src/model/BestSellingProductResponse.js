/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import MerchandisedProduct from './MerchandisedProduct';

/**
 * The BestSellingProductResponse model module.
 * @module model/BestSellingProductResponse
 * @version v1_beta.2.0
 */
class BestSellingProductResponse {
    /**
     * Constructs a new <code>BestSellingProductResponse</code>.
     * The type that defines the fields for the best selling product information.
     * @alias module:model/BestSellingProductResponse
     */
    constructor() { 
        
        BestSellingProductResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BestSellingProductResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BestSellingProductResponse} obj Optional instance to populate.
     * @return {module:model/BestSellingProductResponse} The populated <code>BestSellingProductResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BestSellingProductResponse();

            if (data.hasOwnProperty('merchandisedProducts')) {
                obj['merchandisedProducts'] = ApiClient.convertToType(data['merchandisedProducts'], [MerchandisedProduct]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Error]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BestSellingProductResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BestSellingProductResponse</code>.
     */
    static validateJSON(data) {
        if (data['merchandisedProducts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['merchandisedProducts'])) {
                throw new Error("Expected the field `merchandisedProducts` to be an array in the JSON data but got " + data['merchandisedProducts']);
            }
            // validate the optional field `merchandisedProducts` (array)
            for (const item of data['merchandisedProducts']) {
                MerchandisedProduct.validateJSON(item);
            };
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An array of containers for the products.
 * @member {Array.<module:model/MerchandisedProduct>} merchandisedProducts
 */
BestSellingProductResponse.prototype['merchandisedProducts'] = undefined;

/**
 * The container with all the warnings for the input request.
 * @member {Array.<module:model/Error>} warnings
 */
BestSellingProductResponse.prototype['warnings'] = undefined;






export default BestSellingProductResponse;

