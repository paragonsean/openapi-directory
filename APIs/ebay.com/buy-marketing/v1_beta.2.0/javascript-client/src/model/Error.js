/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorParameter from './ErrorParameter';

/**
 * The Error model module.
 * @module model/Error
 * @version v1_beta.2.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * The type that defines the fields that can be returned in an error.
     * @alias module:model/Error
     */
    constructor() { 
        
        Error.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('errorId')) {
                obj['errorId'] = ApiClient.convertToType(data['errorId'], 'Number');
            }
            if (data.hasOwnProperty('inputRefIds')) {
                obj['inputRefIds'] = ApiClient.convertToType(data['inputRefIds'], ['String']);
            }
            if (data.hasOwnProperty('longMessage')) {
                obj['longMessage'] = ApiClient.convertToType(data['longMessage'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('outputRefIds')) {
                obj['outputRefIds'] = ApiClient.convertToType(data['outputRefIds'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ErrorParameter]);
            }
            if (data.hasOwnProperty('subdomain')) {
                obj['subdomain'] = ApiClient.convertToType(data['subdomain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputRefIds'])) {
            throw new Error("Expected the field `inputRefIds` to be an array in the JSON data but got " + data['inputRefIds']);
        }
        // ensure the json data is a string
        if (data['longMessage'] && !(typeof data['longMessage'] === 'string' || data['longMessage'] instanceof String)) {
            throw new Error("Expected the field `longMessage` to be a primitive type in the JSON string but got " + data['longMessage']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputRefIds'])) {
            throw new Error("Expected the field `outputRefIds` to be an array in the JSON data but got " + data['outputRefIds']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ErrorParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subdomain'] && !(typeof data['subdomain'] === 'string' || data['subdomain'] instanceof String)) {
            throw new Error("Expected the field `subdomain` to be a primitive type in the JSON string but got " + data['subdomain']);
        }

        return true;
    }


}



/**
 * This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors. 
 * @member {String} category
 */
Error.prototype['category'] = undefined;

/**
 * The name of the primary system where the error occurred. This is relevant for application errors.
 * @member {String} domain
 */
Error.prototype['domain'] = undefined;

/**
 * A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
 * @member {Number} errorId
 */
Error.prototype['errorId'] = undefined;

/**
 * An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.
 * @member {Array.<String>} inputRefIds
 */
Error.prototype['inputRefIds'] = undefined;

/**
 * A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.
 * @member {String} longMessage
 */
Error.prototype['longMessage'] = undefined;

/**
 * A description of the condition that caused the error or warning.
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.
 * @member {Array.<String>} outputRefIds
 */
Error.prototype['outputRefIds'] = undefined;

/**
 * An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.
 * @member {Array.<module:model/ErrorParameter>} parameters
 */
Error.prototype['parameters'] = undefined;

/**
 * The name of the subdomain in which the error or warning occurred.
 * @member {String} subdomain
 */
Error.prototype['subdomain'] = undefined;






export default Error;

