/*
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.MarketPriceDetail;
import org.openapitools.client.model.RatingAspect;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for product information, including price, condition, ratings, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:40.275818-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchandisedProduct {
  public static final String SERIALIZED_NAME_AVERAGE_RATING = "averageRating";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RATING)
  private String averageRating;

  public static final String SERIALIZED_NAME_EPID = "epid";
  @SerializedName(SERIALIZED_NAME_EPID)
  private String epid;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_MARKET_PRICE_DETAILS = "marketPriceDetails";
  @SerializedName(SERIALIZED_NAME_MARKET_PRICE_DETAILS)
  private List<MarketPriceDetail> marketPriceDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATING_ASPECTS = "ratingAspects";
  @SerializedName(SERIALIZED_NAME_RATING_ASPECTS)
  private List<RatingAspect> ratingAspects = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATING_COUNT = "ratingCount";
  @SerializedName(SERIALIZED_NAME_RATING_COUNT)
  private Integer ratingCount;

  public static final String SERIALIZED_NAME_REVIEW_COUNT = "reviewCount";
  @SerializedName(SERIALIZED_NAME_REVIEW_COUNT)
  private Integer reviewCount;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public MerchandisedProduct() {
  }

  public MerchandisedProduct averageRating(String averageRating) {
    this.averageRating = averageRating;
    return this;
  }

  /**
   * The average rating for the product based on eBay user ratings.
   * @return averageRating
   */
  @javax.annotation.Nullable
  public String getAverageRating() {
    return averageRating;
  }

  public void setAverageRating(String averageRating) {
    this.averageRating = averageRating;
  }


  public MerchandisedProduct epid(String epid) {
    this.epid = epid;
    return this;
  }

  /**
   * The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API &lt;b&gt;search&lt;/b&gt; method to retrieve items for this product.
   * @return epid
   */
  @javax.annotation.Nullable
  public String getEpid() {
    return epid;
  }

  public void setEpid(String epid) {
    this.epid = epid;
  }


  public MerchandisedProduct image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public MerchandisedProduct marketPriceDetails(List<MarketPriceDetail> marketPriceDetails) {
    this.marketPriceDetails = marketPriceDetails;
    return this;
  }

  public MerchandisedProduct addMarketPriceDetailsItem(MarketPriceDetail marketPriceDetailsItem) {
    if (this.marketPriceDetails == null) {
      this.marketPriceDetails = new ArrayList<>();
    }
    this.marketPriceDetails.add(marketPriceDetailsItem);
    return this;
  }

  /**
   * An array of containers for the product market price details, such as condition and market price.
   * @return marketPriceDetails
   */
  @javax.annotation.Nullable
  public List<MarketPriceDetail> getMarketPriceDetails() {
    return marketPriceDetails;
  }

  public void setMarketPriceDetails(List<MarketPriceDetail> marketPriceDetails) {
    this.marketPriceDetails = marketPriceDetails;
  }


  public MerchandisedProduct ratingAspects(List<RatingAspect> ratingAspects) {
    this.ratingAspects = ratingAspects;
    return this;
  }

  public MerchandisedProduct addRatingAspectsItem(RatingAspect ratingAspectsItem) {
    if (this.ratingAspects == null) {
      this.ratingAspects = new ArrayList<>();
    }
    this.ratingAspects.add(ratingAspectsItem);
    return this;
  }

  /**
   * An array of containers for ratings of the product aspects, such as \&quot;Is it a good value\&quot;.
   * @return ratingAspects
   */
  @javax.annotation.Nullable
  public List<RatingAspect> getRatingAspects() {
    return ratingAspects;
  }

  public void setRatingAspects(List<RatingAspect> ratingAspects) {
    this.ratingAspects = ratingAspects;
  }


  public MerchandisedProduct ratingCount(Integer ratingCount) {
    this.ratingCount = ratingCount;
    return this;
  }

  /**
   * The total number of eBay users that rated the product.
   * @return ratingCount
   */
  @javax.annotation.Nullable
  public Integer getRatingCount() {
    return ratingCount;
  }

  public void setRatingCount(Integer ratingCount) {
    this.ratingCount = ratingCount;
  }


  public MerchandisedProduct reviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
    return this;
  }

  /**
   * The total number of eBay users that wrote a review for the product. 
   * @return reviewCount
   */
  @javax.annotation.Nullable
  public Integer getReviewCount() {
    return reviewCount;
  }

  public void setReviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
  }


  public MerchandisedProduct title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the product.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchandisedProduct merchandisedProduct = (MerchandisedProduct) o;
    return Objects.equals(this.averageRating, merchandisedProduct.averageRating) &&
        Objects.equals(this.epid, merchandisedProduct.epid) &&
        Objects.equals(this.image, merchandisedProduct.image) &&
        Objects.equals(this.marketPriceDetails, merchandisedProduct.marketPriceDetails) &&
        Objects.equals(this.ratingAspects, merchandisedProduct.ratingAspects) &&
        Objects.equals(this.ratingCount, merchandisedProduct.ratingCount) &&
        Objects.equals(this.reviewCount, merchandisedProduct.reviewCount) &&
        Objects.equals(this.title, merchandisedProduct.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageRating, epid, image, marketPriceDetails, ratingAspects, ratingCount, reviewCount, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchandisedProduct {\n");
    sb.append("    averageRating: ").append(toIndentedString(averageRating)).append("\n");
    sb.append("    epid: ").append(toIndentedString(epid)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    marketPriceDetails: ").append(toIndentedString(marketPriceDetails)).append("\n");
    sb.append("    ratingAspects: ").append(toIndentedString(ratingAspects)).append("\n");
    sb.append("    ratingCount: ").append(toIndentedString(ratingCount)).append("\n");
    sb.append("    reviewCount: ").append(toIndentedString(reviewCount)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageRating");
    openapiFields.add("epid");
    openapiFields.add("image");
    openapiFields.add("marketPriceDetails");
    openapiFields.add("ratingAspects");
    openapiFields.add("ratingCount");
    openapiFields.add("reviewCount");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchandisedProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchandisedProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchandisedProduct is not found in the empty JSON string", MerchandisedProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchandisedProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchandisedProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("averageRating") != null && !jsonObj.get("averageRating").isJsonNull()) && !jsonObj.get("averageRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averageRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averageRating").toString()));
      }
      if ((jsonObj.get("epid") != null && !jsonObj.get("epid").isJsonNull()) && !jsonObj.get("epid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epid").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      if (jsonObj.get("marketPriceDetails") != null && !jsonObj.get("marketPriceDetails").isJsonNull()) {
        JsonArray jsonArraymarketPriceDetails = jsonObj.getAsJsonArray("marketPriceDetails");
        if (jsonArraymarketPriceDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("marketPriceDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `marketPriceDetails` to be an array in the JSON string but got `%s`", jsonObj.get("marketPriceDetails").toString()));
          }

          // validate the optional field `marketPriceDetails` (array)
          for (int i = 0; i < jsonArraymarketPriceDetails.size(); i++) {
            MarketPriceDetail.validateJsonElement(jsonArraymarketPriceDetails.get(i));
          };
        }
      }
      if (jsonObj.get("ratingAspects") != null && !jsonObj.get("ratingAspects").isJsonNull()) {
        JsonArray jsonArrayratingAspects = jsonObj.getAsJsonArray("ratingAspects");
        if (jsonArrayratingAspects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ratingAspects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ratingAspects` to be an array in the JSON string but got `%s`", jsonObj.get("ratingAspects").toString()));
          }

          // validate the optional field `ratingAspects` (array)
          for (int i = 0; i < jsonArrayratingAspects.size(); i++) {
            RatingAspect.validateJsonElement(jsonArrayratingAspects.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchandisedProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchandisedProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchandisedProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchandisedProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchandisedProduct>() {
           @Override
           public void write(JsonWriter out, MerchandisedProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchandisedProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchandisedProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchandisedProduct
   * @throws IOException if the JSON string is invalid with respect to MerchandisedProduct
   */
  public static MerchandisedProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchandisedProduct.class);
  }

  /**
   * Convert an instance of MerchandisedProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

