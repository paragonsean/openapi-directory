/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBestSellingProductResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBestSellingProductResponse::OAIBestSellingProductResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBestSellingProductResponse::OAIBestSellingProductResponse() {
    this->initializeModel();
}

OAIBestSellingProductResponse::~OAIBestSellingProductResponse() {}

void OAIBestSellingProductResponse::initializeModel() {

    m_merchandised_products_isSet = false;
    m_merchandised_products_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIBestSellingProductResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBestSellingProductResponse::fromJsonObject(QJsonObject json) {

    m_merchandised_products_isValid = ::OpenAPI::fromJsonValue(m_merchandised_products, json[QString("merchandisedProducts")]);
    m_merchandised_products_isSet = !json[QString("merchandisedProducts")].isNull() && m_merchandised_products_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIBestSellingProductResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBestSellingProductResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_merchandised_products.size() > 0) {
        obj.insert(QString("merchandisedProducts"), ::OpenAPI::toJsonValue(m_merchandised_products));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIMerchandisedProduct> OAIBestSellingProductResponse::getMerchandisedProducts() const {
    return m_merchandised_products;
}
void OAIBestSellingProductResponse::setMerchandisedProducts(const QList<OAIMerchandisedProduct> &merchandised_products) {
    m_merchandised_products = merchandised_products;
    m_merchandised_products_isSet = true;
}

bool OAIBestSellingProductResponse::is_merchandised_products_Set() const{
    return m_merchandised_products_isSet;
}

bool OAIBestSellingProductResponse::is_merchandised_products_Valid() const{
    return m_merchandised_products_isValid;
}

QList<OAIError> OAIBestSellingProductResponse::getWarnings() const {
    return m_warnings;
}
void OAIBestSellingProductResponse::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIBestSellingProductResponse::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIBestSellingProductResponse::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIBestSellingProductResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merchandised_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBestSellingProductResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
