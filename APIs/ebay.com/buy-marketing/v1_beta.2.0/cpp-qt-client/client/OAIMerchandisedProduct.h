/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMerchandisedProduct.h
 *
 * The type that defines the fields for product information, including price, condition, ratings, etc.
 */

#ifndef OAIMerchandisedProduct_H
#define OAIMerchandisedProduct_H

#include <QJsonObject>

#include "OAIImage.h"
#include "OAIMarketPriceDetail.h"
#include "OAIRatingAspect.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage;
class OAIMarketPriceDetail;
class OAIRatingAspect;

class OAIMerchandisedProduct : public OAIObject {
public:
    OAIMerchandisedProduct();
    OAIMerchandisedProduct(QString json);
    ~OAIMerchandisedProduct() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAverageRating() const;
    void setAverageRating(const QString &average_rating);
    bool is_average_rating_Set() const;
    bool is_average_rating_Valid() const;

    QString getEpid() const;
    void setEpid(const QString &epid);
    bool is_epid_Set() const;
    bool is_epid_Valid() const;

    OAIImage getImage() const;
    void setImage(const OAIImage &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QList<OAIMarketPriceDetail> getMarketPriceDetails() const;
    void setMarketPriceDetails(const QList<OAIMarketPriceDetail> &market_price_details);
    bool is_market_price_details_Set() const;
    bool is_market_price_details_Valid() const;

    QList<OAIRatingAspect> getRatingAspects() const;
    void setRatingAspects(const QList<OAIRatingAspect> &rating_aspects);
    bool is_rating_aspects_Set() const;
    bool is_rating_aspects_Valid() const;

    qint32 getRatingCount() const;
    void setRatingCount(const qint32 &rating_count);
    bool is_rating_count_Set() const;
    bool is_rating_count_Valid() const;

    qint32 getReviewCount() const;
    void setReviewCount(const qint32 &review_count);
    bool is_review_count_Set() const;
    bool is_review_count_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_average_rating;
    bool m_average_rating_isSet;
    bool m_average_rating_isValid;

    QString m_epid;
    bool m_epid_isSet;
    bool m_epid_isValid;

    OAIImage m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QList<OAIMarketPriceDetail> m_market_price_details;
    bool m_market_price_details_isSet;
    bool m_market_price_details_isValid;

    QList<OAIRatingAspect> m_rating_aspects;
    bool m_rating_aspects_isSet;
    bool m_rating_aspects_isValid;

    qint32 m_rating_count;
    bool m_rating_count_isSet;
    bool m_rating_count_isValid;

    qint32 m_review_count;
    bool m_review_count_isSet;
    bool m_review_count_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMerchandisedProduct)

#endif // OAIMerchandisedProduct_H
