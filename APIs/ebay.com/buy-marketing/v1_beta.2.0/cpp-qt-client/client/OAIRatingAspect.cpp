/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatingAspect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatingAspect::OAIRatingAspect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatingAspect::OAIRatingAspect() {
    this->initializeModel();
}

OAIRatingAspect::~OAIRatingAspect() {}

void OAIRatingAspect::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rating_aspect_distributions_isSet = false;
    m_rating_aspect_distributions_isValid = false;
}

void OAIRatingAspect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatingAspect::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rating_aspect_distributions_isValid = ::OpenAPI::fromJsonValue(m_rating_aspect_distributions, json[QString("ratingAspectDistributions")]);
    m_rating_aspect_distributions_isSet = !json[QString("ratingAspectDistributions")].isNull() && m_rating_aspect_distributions_isValid;
}

QString OAIRatingAspect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatingAspect::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rating_aspect_distributions.size() > 0) {
        obj.insert(QString("ratingAspectDistributions"), ::OpenAPI::toJsonValue(m_rating_aspect_distributions));
    }
    return obj;
}

qint32 OAIRatingAspect::getCount() const {
    return m_count;
}
void OAIRatingAspect::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIRatingAspect::is_count_Set() const{
    return m_count_isSet;
}

bool OAIRatingAspect::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIRatingAspect::getDescription() const {
    return m_description;
}
void OAIRatingAspect::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRatingAspect::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRatingAspect::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRatingAspect::getName() const {
    return m_name;
}
void OAIRatingAspect::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRatingAspect::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRatingAspect::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRatingAspectDistribution> OAIRatingAspect::getRatingAspectDistributions() const {
    return m_rating_aspect_distributions;
}
void OAIRatingAspect::setRatingAspectDistributions(const QList<OAIRatingAspectDistribution> &rating_aspect_distributions) {
    m_rating_aspect_distributions = rating_aspect_distributions;
    m_rating_aspect_distributions_isSet = true;
}

bool OAIRatingAspect::is_rating_aspect_distributions_Set() const{
    return m_rating_aspect_distributions_isSet;
}

bool OAIRatingAspect::is_rating_aspect_distributions_Valid() const{
    return m_rating_aspect_distributions_isValid;
}

bool OAIRatingAspect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_aspect_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatingAspect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
