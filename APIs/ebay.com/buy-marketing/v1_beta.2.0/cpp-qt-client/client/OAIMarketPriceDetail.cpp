/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketPriceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketPriceDetail::OAIMarketPriceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketPriceDetail::OAIMarketPriceDetail() {
    this->initializeModel();
}

OAIMarketPriceDetail::~OAIMarketPriceDetail() {}

void OAIMarketPriceDetail::initializeModel() {

    m_condition_group_isSet = false;
    m_condition_group_isValid = false;

    m_condition_ids_isSet = false;
    m_condition_ids_isValid = false;

    m_estimated_start_price_isSet = false;
    m_estimated_start_price_isValid = false;
}

void OAIMarketPriceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketPriceDetail::fromJsonObject(QJsonObject json) {

    m_condition_group_isValid = ::OpenAPI::fromJsonValue(m_condition_group, json[QString("conditionGroup")]);
    m_condition_group_isSet = !json[QString("conditionGroup")].isNull() && m_condition_group_isValid;

    m_condition_ids_isValid = ::OpenAPI::fromJsonValue(m_condition_ids, json[QString("conditionIds")]);
    m_condition_ids_isSet = !json[QString("conditionIds")].isNull() && m_condition_ids_isValid;

    m_estimated_start_price_isValid = ::OpenAPI::fromJsonValue(m_estimated_start_price, json[QString("estimatedStartPrice")]);
    m_estimated_start_price_isSet = !json[QString("estimatedStartPrice")].isNull() && m_estimated_start_price_isValid;
}

QString OAIMarketPriceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketPriceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_group_isSet) {
        obj.insert(QString("conditionGroup"), ::OpenAPI::toJsonValue(m_condition_group));
    }
    if (m_condition_ids.size() > 0) {
        obj.insert(QString("conditionIds"), ::OpenAPI::toJsonValue(m_condition_ids));
    }
    if (m_estimated_start_price.isSet()) {
        obj.insert(QString("estimatedStartPrice"), ::OpenAPI::toJsonValue(m_estimated_start_price));
    }
    return obj;
}

QString OAIMarketPriceDetail::getConditionGroup() const {
    return m_condition_group;
}
void OAIMarketPriceDetail::setConditionGroup(const QString &condition_group) {
    m_condition_group = condition_group;
    m_condition_group_isSet = true;
}

bool OAIMarketPriceDetail::is_condition_group_Set() const{
    return m_condition_group_isSet;
}

bool OAIMarketPriceDetail::is_condition_group_Valid() const{
    return m_condition_group_isValid;
}

QList<QString> OAIMarketPriceDetail::getConditionIds() const {
    return m_condition_ids;
}
void OAIMarketPriceDetail::setConditionIds(const QList<QString> &condition_ids) {
    m_condition_ids = condition_ids;
    m_condition_ids_isSet = true;
}

bool OAIMarketPriceDetail::is_condition_ids_Set() const{
    return m_condition_ids_isSet;
}

bool OAIMarketPriceDetail::is_condition_ids_Valid() const{
    return m_condition_ids_isValid;
}

OAIAmount OAIMarketPriceDetail::getEstimatedStartPrice() const {
    return m_estimated_start_price;
}
void OAIMarketPriceDetail::setEstimatedStartPrice(const OAIAmount &estimated_start_price) {
    m_estimated_start_price = estimated_start_price;
    m_estimated_start_price_isSet = true;
}

bool OAIMarketPriceDetail::is_estimated_start_price_Set() const{
    return m_estimated_start_price_isSet;
}

bool OAIMarketPriceDetail::is_estimated_start_price_Valid() const{
    return m_estimated_start_price_isValid;
}

bool OAIMarketPriceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_start_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketPriceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
