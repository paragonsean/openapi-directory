/**
 * Buy Marketing API
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * The version of the OpenAPI document: v1_beta.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchandisedProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchandisedProduct::OAIMerchandisedProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchandisedProduct::OAIMerchandisedProduct() {
    this->initializeModel();
}

OAIMerchandisedProduct::~OAIMerchandisedProduct() {}

void OAIMerchandisedProduct::initializeModel() {

    m_average_rating_isSet = false;
    m_average_rating_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_market_price_details_isSet = false;
    m_market_price_details_isValid = false;

    m_rating_aspects_isSet = false;
    m_rating_aspects_isValid = false;

    m_rating_count_isSet = false;
    m_rating_count_isValid = false;

    m_review_count_isSet = false;
    m_review_count_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIMerchandisedProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchandisedProduct::fromJsonObject(QJsonObject json) {

    m_average_rating_isValid = ::OpenAPI::fromJsonValue(m_average_rating, json[QString("averageRating")]);
    m_average_rating_isSet = !json[QString("averageRating")].isNull() && m_average_rating_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_market_price_details_isValid = ::OpenAPI::fromJsonValue(m_market_price_details, json[QString("marketPriceDetails")]);
    m_market_price_details_isSet = !json[QString("marketPriceDetails")].isNull() && m_market_price_details_isValid;

    m_rating_aspects_isValid = ::OpenAPI::fromJsonValue(m_rating_aspects, json[QString("ratingAspects")]);
    m_rating_aspects_isSet = !json[QString("ratingAspects")].isNull() && m_rating_aspects_isValid;

    m_rating_count_isValid = ::OpenAPI::fromJsonValue(m_rating_count, json[QString("ratingCount")]);
    m_rating_count_isSet = !json[QString("ratingCount")].isNull() && m_rating_count_isValid;

    m_review_count_isValid = ::OpenAPI::fromJsonValue(m_review_count, json[QString("reviewCount")]);
    m_review_count_isSet = !json[QString("reviewCount")].isNull() && m_review_count_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIMerchandisedProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchandisedProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_average_rating_isSet) {
        obj.insert(QString("averageRating"), ::OpenAPI::toJsonValue(m_average_rating));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_market_price_details.size() > 0) {
        obj.insert(QString("marketPriceDetails"), ::OpenAPI::toJsonValue(m_market_price_details));
    }
    if (m_rating_aspects.size() > 0) {
        obj.insert(QString("ratingAspects"), ::OpenAPI::toJsonValue(m_rating_aspects));
    }
    if (m_rating_count_isSet) {
        obj.insert(QString("ratingCount"), ::OpenAPI::toJsonValue(m_rating_count));
    }
    if (m_review_count_isSet) {
        obj.insert(QString("reviewCount"), ::OpenAPI::toJsonValue(m_review_count));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIMerchandisedProduct::getAverageRating() const {
    return m_average_rating;
}
void OAIMerchandisedProduct::setAverageRating(const QString &average_rating) {
    m_average_rating = average_rating;
    m_average_rating_isSet = true;
}

bool OAIMerchandisedProduct::is_average_rating_Set() const{
    return m_average_rating_isSet;
}

bool OAIMerchandisedProduct::is_average_rating_Valid() const{
    return m_average_rating_isValid;
}

QString OAIMerchandisedProduct::getEpid() const {
    return m_epid;
}
void OAIMerchandisedProduct::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIMerchandisedProduct::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIMerchandisedProduct::is_epid_Valid() const{
    return m_epid_isValid;
}

OAIImage OAIMerchandisedProduct::getImage() const {
    return m_image;
}
void OAIMerchandisedProduct::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIMerchandisedProduct::is_image_Set() const{
    return m_image_isSet;
}

bool OAIMerchandisedProduct::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIMarketPriceDetail> OAIMerchandisedProduct::getMarketPriceDetails() const {
    return m_market_price_details;
}
void OAIMerchandisedProduct::setMarketPriceDetails(const QList<OAIMarketPriceDetail> &market_price_details) {
    m_market_price_details = market_price_details;
    m_market_price_details_isSet = true;
}

bool OAIMerchandisedProduct::is_market_price_details_Set() const{
    return m_market_price_details_isSet;
}

bool OAIMerchandisedProduct::is_market_price_details_Valid() const{
    return m_market_price_details_isValid;
}

QList<OAIRatingAspect> OAIMerchandisedProduct::getRatingAspects() const {
    return m_rating_aspects;
}
void OAIMerchandisedProduct::setRatingAspects(const QList<OAIRatingAspect> &rating_aspects) {
    m_rating_aspects = rating_aspects;
    m_rating_aspects_isSet = true;
}

bool OAIMerchandisedProduct::is_rating_aspects_Set() const{
    return m_rating_aspects_isSet;
}

bool OAIMerchandisedProduct::is_rating_aspects_Valid() const{
    return m_rating_aspects_isValid;
}

qint32 OAIMerchandisedProduct::getRatingCount() const {
    return m_rating_count;
}
void OAIMerchandisedProduct::setRatingCount(const qint32 &rating_count) {
    m_rating_count = rating_count;
    m_rating_count_isSet = true;
}

bool OAIMerchandisedProduct::is_rating_count_Set() const{
    return m_rating_count_isSet;
}

bool OAIMerchandisedProduct::is_rating_count_Valid() const{
    return m_rating_count_isValid;
}

qint32 OAIMerchandisedProduct::getReviewCount() const {
    return m_review_count;
}
void OAIMerchandisedProduct::setReviewCount(const qint32 &review_count) {
    m_review_count = review_count;
    m_review_count_isSet = true;
}

bool OAIMerchandisedProduct::is_review_count_Set() const{
    return m_review_count_isSet;
}

bool OAIMerchandisedProduct::is_review_count_Valid() const{
    return m_review_count_isValid;
}

QString OAIMerchandisedProduct::getTitle() const {
    return m_title;
}
void OAIMerchandisedProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMerchandisedProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMerchandisedProduct::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIMerchandisedProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_price_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchandisedProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
