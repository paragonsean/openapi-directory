# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server.models.market_price_detail import MarketPriceDetail
from openapi_server.models.rating_aspect import RatingAspect
from openapi_server import util


class MerchandisedProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_rating: str=None, epid: str=None, image: Image=None, market_price_details: List[MarketPriceDetail]=None, rating_aspects: List[RatingAspect]=None, rating_count: int=None, review_count: int=None, title: str=None):
        """MerchandisedProduct - a model defined in OpenAPI

        :param average_rating: The average_rating of this MerchandisedProduct.
        :param epid: The epid of this MerchandisedProduct.
        :param image: The image of this MerchandisedProduct.
        :param market_price_details: The market_price_details of this MerchandisedProduct.
        :param rating_aspects: The rating_aspects of this MerchandisedProduct.
        :param rating_count: The rating_count of this MerchandisedProduct.
        :param review_count: The review_count of this MerchandisedProduct.
        :param title: The title of this MerchandisedProduct.
        """
        self.openapi_types = {
            'average_rating': str,
            'epid': str,
            'image': Image,
            'market_price_details': List[MarketPriceDetail],
            'rating_aspects': List[RatingAspect],
            'rating_count': int,
            'review_count': int,
            'title': str
        }

        self.attribute_map = {
            'average_rating': 'averageRating',
            'epid': 'epid',
            'image': 'image',
            'market_price_details': 'marketPriceDetails',
            'rating_aspects': 'ratingAspects',
            'rating_count': 'ratingCount',
            'review_count': 'reviewCount',
            'title': 'title'
        }

        self._average_rating = average_rating
        self._epid = epid
        self._image = image
        self._market_price_details = market_price_details
        self._rating_aspects = rating_aspects
        self._rating_count = rating_count
        self._review_count = review_count
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchandisedProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchandisedProduct of this MerchandisedProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_rating(self):
        """Gets the average_rating of this MerchandisedProduct.

        The average rating for the product based on eBay user ratings.

        :return: The average_rating of this MerchandisedProduct.
        :rtype: str
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this MerchandisedProduct.

        The average rating for the product based on eBay user ratings.

        :param average_rating: The average_rating of this MerchandisedProduct.
        :type average_rating: str
        """

        self._average_rating = average_rating

    @property
    def epid(self):
        """Gets the epid of this MerchandisedProduct.

        The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API <b>search</b> method to retrieve items for this product.

        :return: The epid of this MerchandisedProduct.
        :rtype: str
        """
        return self._epid

    @epid.setter
    def epid(self, epid):
        """Sets the epid of this MerchandisedProduct.

        The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API <b>search</b> method to retrieve items for this product.

        :param epid: The epid of this MerchandisedProduct.
        :type epid: str
        """

        self._epid = epid

    @property
    def image(self):
        """Gets the image of this MerchandisedProduct.


        :return: The image of this MerchandisedProduct.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MerchandisedProduct.


        :param image: The image of this MerchandisedProduct.
        :type image: Image
        """

        self._image = image

    @property
    def market_price_details(self):
        """Gets the market_price_details of this MerchandisedProduct.

        An array of containers for the product market price details, such as condition and market price.

        :return: The market_price_details of this MerchandisedProduct.
        :rtype: List[MarketPriceDetail]
        """
        return self._market_price_details

    @market_price_details.setter
    def market_price_details(self, market_price_details):
        """Sets the market_price_details of this MerchandisedProduct.

        An array of containers for the product market price details, such as condition and market price.

        :param market_price_details: The market_price_details of this MerchandisedProduct.
        :type market_price_details: List[MarketPriceDetail]
        """

        self._market_price_details = market_price_details

    @property
    def rating_aspects(self):
        """Gets the rating_aspects of this MerchandisedProduct.

        An array of containers for ratings of the product aspects, such as \"Is it a good value\".

        :return: The rating_aspects of this MerchandisedProduct.
        :rtype: List[RatingAspect]
        """
        return self._rating_aspects

    @rating_aspects.setter
    def rating_aspects(self, rating_aspects):
        """Sets the rating_aspects of this MerchandisedProduct.

        An array of containers for ratings of the product aspects, such as \"Is it a good value\".

        :param rating_aspects: The rating_aspects of this MerchandisedProduct.
        :type rating_aspects: List[RatingAspect]
        """

        self._rating_aspects = rating_aspects

    @property
    def rating_count(self):
        """Gets the rating_count of this MerchandisedProduct.

        The total number of eBay users that rated the product.

        :return: The rating_count of this MerchandisedProduct.
        :rtype: int
        """
        return self._rating_count

    @rating_count.setter
    def rating_count(self, rating_count):
        """Sets the rating_count of this MerchandisedProduct.

        The total number of eBay users that rated the product.

        :param rating_count: The rating_count of this MerchandisedProduct.
        :type rating_count: int
        """

        self._rating_count = rating_count

    @property
    def review_count(self):
        """Gets the review_count of this MerchandisedProduct.

        The total number of eBay users that wrote a review for the product. 

        :return: The review_count of this MerchandisedProduct.
        :rtype: int
        """
        return self._review_count

    @review_count.setter
    def review_count(self, review_count):
        """Sets the review_count of this MerchandisedProduct.

        The total number of eBay users that wrote a review for the product. 

        :param review_count: The review_count of this MerchandisedProduct.
        :type review_count: int
        """

        self._review_count = review_count

    @property
    def title(self):
        """Gets the title of this MerchandisedProduct.

        The title of the product.

        :return: The title of this MerchandisedProduct.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MerchandisedProduct.

        The title of the product.

        :param title: The title of this MerchandisedProduct.
        :type title: str
        """

        self._title = title
