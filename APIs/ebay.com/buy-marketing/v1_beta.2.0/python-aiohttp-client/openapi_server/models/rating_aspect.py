# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rating_aspect_distribution import RatingAspectDistribution
from openapi_server import util


class RatingAspect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, description: str=None, name: str=None, rating_aspect_distributions: List[RatingAspectDistribution]=None):
        """RatingAspect - a model defined in OpenAPI

        :param count: The count of this RatingAspect.
        :param description: The description of this RatingAspect.
        :param name: The name of this RatingAspect.
        :param rating_aspect_distributions: The rating_aspect_distributions of this RatingAspect.
        """
        self.openapi_types = {
            'count': int,
            'description': str,
            'name': str,
            'rating_aspect_distributions': List[RatingAspectDistribution]
        }

        self.attribute_map = {
            'count': 'count',
            'description': 'description',
            'name': 'name',
            'rating_aspect_distributions': 'ratingAspectDistributions'
        }

        self._count = count
        self._description = description
        self._name = name
        self._rating_aspect_distributions = rating_aspect_distributions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatingAspect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatingAspect of this RatingAspect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this RatingAspect.

        The number of eBay users that rated the product on this aspect.

        :return: The count of this RatingAspect.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RatingAspect.

        The number of eBay users that rated the product on this aspect.

        :param count: The count of this RatingAspect.
        :type count: int
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this RatingAspect.

        The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?

        :return: The description of this RatingAspect.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RatingAspect.

        The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?

        :param description: The description of this RatingAspect.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this RatingAspect.

        The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up

        :return: The name of this RatingAspect.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RatingAspect.

        The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up

        :param name: The name of this RatingAspect.
        :type name: str
        """

        self._name = name

    @property
    def rating_aspect_distributions(self):
        """Gets the rating_aspect_distributions of this RatingAspect.

        The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.

        :return: The rating_aspect_distributions of this RatingAspect.
        :rtype: List[RatingAspectDistribution]
        """
        return self._rating_aspect_distributions

    @rating_aspect_distributions.setter
    def rating_aspect_distributions(self, rating_aspect_distributions):
        """Sets the rating_aspect_distributions of this RatingAspect.

        The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.

        :param rating_aspect_distributions: The rating_aspect_distributions of this RatingAspect.
        :type rating_aspect_distributions: List[RatingAspectDistribution]
        """

        self._rating_aspect_distributions = rating_aspect_distributions
