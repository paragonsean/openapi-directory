# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RatingAspectDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, percentage: str=None, value: str=None):
        """RatingAspectDistribution - a model defined in OpenAPI

        :param count: The count of this RatingAspectDistribution.
        :param percentage: The percentage of this RatingAspectDistribution.
        :param value: The value of this RatingAspectDistribution.
        """
        self.openapi_types = {
            'count': int,
            'percentage': str,
            'value': str
        }

        self.attribute_map = {
            'count': 'count',
            'percentage': 'percentage',
            'value': 'value'
        }

        self._count = count
        self._percentage = percentage
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatingAspectDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatingAspectDistribution of this RatingAspectDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this RatingAspectDistribution.

        The number of eBay users that choose this rating aspect value.

        :return: The count of this RatingAspectDistribution.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RatingAspectDistribution.

        The number of eBay users that choose this rating aspect value.

        :param count: The count of this RatingAspectDistribution.
        :type count: int
        """

        self._count = count

    @property
    def percentage(self):
        """Gets the percentage of this RatingAspectDistribution.

        The percentage of the aspect rating value. <br /><br /> <b> ratingAspectDistributions.percentage</b> =  <b> ratingAspectDistributions.count</b> /  <b>ratingAspects.count</b>

        :return: The percentage of this RatingAspectDistribution.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this RatingAspectDistribution.

        The percentage of the aspect rating value. <br /><br /> <b> ratingAspectDistributions.percentage</b> =  <b> ratingAspectDistributions.count</b> /  <b>ratingAspects.count</b>

        :param percentage: The percentage of this RatingAspectDistribution.
        :type percentage: str
        """

        self._percentage = percentage

    @property
    def value(self):
        """Gets the value of this RatingAspectDistribution.

        The rating aspect. For example: TRUE or FALSE

        :return: The value of this RatingAspectDistribution.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RatingAspectDistribution.

        The rating aspect. For example: TRUE or FALSE

        :param value: The value of this RatingAspectDistribution.
        :type value: str
        """

        self._value = value
