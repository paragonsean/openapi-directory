/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetric.h
 *
 * This complex data type defines the details of the customer service metric and benchmark data related to the associated dimension.
 */

#ifndef OAIMetric_H
#define OAIMetric_H

#include <QJsonObject>

#include "OAIMetricBenchmark.h"
#include "OAIMetricDistribution.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricBenchmark;
class OAIMetricDistribution;

class OAIMetric : public OAIObject {
public:
    OAIMetric();
    OAIMetric(QString json);
    ~OAIMetric() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMetricBenchmark getBenchmark() const;
    void setBenchmark(const OAIMetricBenchmark &benchmark);
    bool is_benchmark_Set() const;
    bool is_benchmark_Valid() const;

    QList<OAIMetricDistribution> getDistributions() const;
    void setDistributions(const QList<OAIMetricDistribution> &distributions);
    bool is_distributions_Set() const;
    bool is_distributions_Valid() const;

    QString getMetricKey() const;
    void setMetricKey(const QString &metric_key);
    bool is_metric_key_Set() const;
    bool is_metric_key_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMetricBenchmark m_benchmark;
    bool m_benchmark_isSet;
    bool m_benchmark_isValid;

    QList<OAIMetricDistribution> m_distributions;
    bool m_distributions_isSet;
    bool m_distributions_isValid;

    QString m_metric_key;
    bool m_metric_key_isSet;
    bool m_metric_key_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetric)

#endif // OAIMetric_H
