/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_benchmark_isSet = false;
    m_benchmark_isValid = false;

    m_distributions_isSet = false;
    m_distributions_isValid = false;

    m_metric_key_isSet = false;
    m_metric_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_benchmark_isValid = ::OpenAPI::fromJsonValue(m_benchmark, json[QString("benchmark")]);
    m_benchmark_isSet = !json[QString("benchmark")].isNull() && m_benchmark_isValid;

    m_distributions_isValid = ::OpenAPI::fromJsonValue(m_distributions, json[QString("distributions")]);
    m_distributions_isSet = !json[QString("distributions")].isNull() && m_distributions_isValid;

    m_metric_key_isValid = ::OpenAPI::fromJsonValue(m_metric_key, json[QString("metricKey")]);
    m_metric_key_isSet = !json[QString("metricKey")].isNull() && m_metric_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_benchmark.isSet()) {
        obj.insert(QString("benchmark"), ::OpenAPI::toJsonValue(m_benchmark));
    }
    if (m_distributions.size() > 0) {
        obj.insert(QString("distributions"), ::OpenAPI::toJsonValue(m_distributions));
    }
    if (m_metric_key_isSet) {
        obj.insert(QString("metricKey"), ::OpenAPI::toJsonValue(m_metric_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIMetricBenchmark OAIMetric::getBenchmark() const {
    return m_benchmark;
}
void OAIMetric::setBenchmark(const OAIMetricBenchmark &benchmark) {
    m_benchmark = benchmark;
    m_benchmark_isSet = true;
}

bool OAIMetric::is_benchmark_Set() const{
    return m_benchmark_isSet;
}

bool OAIMetric::is_benchmark_Valid() const{
    return m_benchmark_isValid;
}

QList<OAIMetricDistribution> OAIMetric::getDistributions() const {
    return m_distributions;
}
void OAIMetric::setDistributions(const QList<OAIMetricDistribution> &distributions) {
    m_distributions = distributions;
    m_distributions_isSet = true;
}

bool OAIMetric::is_distributions_Set() const{
    return m_distributions_isSet;
}

bool OAIMetric::is_distributions_Valid() const{
    return m_distributions_isValid;
}

QString OAIMetric::getMetricKey() const {
    return m_metric_key;
}
void OAIMetric::setMetricKey(const QString &metric_key) {
    m_metric_key = metric_key;
    m_metric_key_isSet = true;
}

bool OAIMetric::is_metric_key_Set() const{
    return m_metric_key_isSet;
}

bool OAIMetric::is_metric_key_Valid() const{
    return m_metric_key_isValid;
}

QString OAIMetric::getValue() const {
    return m_value;
}
void OAIMetric::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMetric::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMetric::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benchmark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
