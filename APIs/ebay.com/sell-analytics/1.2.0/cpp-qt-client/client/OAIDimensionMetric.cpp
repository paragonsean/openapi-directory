/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionMetric::OAIDimensionMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionMetric::OAIDimensionMetric() {
    this->initializeModel();
}

OAIDimensionMetric::~OAIDimensionMetric() {}

void OAIDimensionMetric::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIDimensionMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionMetric::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIDimensionMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

OAIDimension OAIDimensionMetric::getDimension() const {
    return m_dimension;
}
void OAIDimensionMetric::setDimension(const OAIDimension &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIDimensionMetric::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIDimensionMetric::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QList<OAIMetric> OAIDimensionMetric::getMetrics() const {
    return m_metrics;
}
void OAIDimensionMetric::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDimensionMetric::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDimensionMetric::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIDimensionMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
