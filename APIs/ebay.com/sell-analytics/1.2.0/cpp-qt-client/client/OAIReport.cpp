/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_dimension_metadata_isSet = false;
    m_dimension_metadata_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_dimension_metadata_isValid = ::OpenAPI::fromJsonValue(m_dimension_metadata, json[QString("dimensionMetadata")]);
    m_dimension_metadata_isSet = !json[QString("dimensionMetadata")].isNull() && m_dimension_metadata_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_metadata.size() > 0) {
        obj.insert(QString("dimensionMetadata"), ::OpenAPI::toJsonValue(m_dimension_metadata));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_header.isSet()) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIMetadata> OAIReport::getDimensionMetadata() const {
    return m_dimension_metadata;
}
void OAIReport::setDimensionMetadata(const QList<OAIMetadata> &dimension_metadata) {
    m_dimension_metadata = dimension_metadata;
    m_dimension_metadata_isSet = true;
}

bool OAIReport::is_dimension_metadata_Set() const{
    return m_dimension_metadata_isSet;
}

bool OAIReport::is_dimension_metadata_Valid() const{
    return m_dimension_metadata_isValid;
}

QString OAIReport::getEndDate() const {
    return m_end_date;
}
void OAIReport::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIReport::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIReport::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIHeader OAIReport::getHeader() const {
    return m_header;
}
void OAIReport::setHeader(const OAIHeader &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIReport::is_header_Set() const{
    return m_header_isSet;
}

bool OAIReport::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIReport::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIReport::setLastUpdatedDate(const QString &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIReport::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIReport::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

QList<OAIRecord> OAIReport::getRecords() const {
    return m_records;
}
void OAIReport::setRecords(const QList<OAIRecord> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIReport::is_records_Set() const{
    return m_records_isSet;
}

bool OAIReport::is_records_Valid() const{
    return m_records_isValid;
}

QString OAIReport::getStartDate() const {
    return m_start_date;
}
void OAIReport::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIReport::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIReport::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<OAIError> OAIReport::getWarnings() const {
    return m_warnings;
}
void OAIReport::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIReport::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIReport::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
