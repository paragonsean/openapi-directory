/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardsProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardsProfile::OAIStandardsProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardsProfile::OAIStandardsProfile() {
    this->initializeModel();
}

OAIStandardsProfile::~OAIStandardsProfile() {}

void OAIStandardsProfile::initializeModel() {

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_default_program_isSet = false;
    m_default_program_isValid = false;

    m_evaluation_reason_isSet = false;
    m_evaluation_reason_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_program_isSet = false;
    m_program_isValid = false;

    m_standards_level_isSet = false;
    m_standards_level_isValid = false;
}

void OAIStandardsProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardsProfile::fromJsonObject(QJsonObject json) {

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_default_program_isValid = ::OpenAPI::fromJsonValue(m_default_program, json[QString("defaultProgram")]);
    m_default_program_isSet = !json[QString("defaultProgram")].isNull() && m_default_program_isValid;

    m_evaluation_reason_isValid = ::OpenAPI::fromJsonValue(m_evaluation_reason, json[QString("evaluationReason")]);
    m_evaluation_reason_isSet = !json[QString("evaluationReason")].isNull() && m_evaluation_reason_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_program_isValid = ::OpenAPI::fromJsonValue(m_program, json[QString("program")]);
    m_program_isSet = !json[QString("program")].isNull() && m_program_isValid;

    m_standards_level_isValid = ::OpenAPI::fromJsonValue(m_standards_level, json[QString("standardsLevel")]);
    m_standards_level_isSet = !json[QString("standardsLevel")].isNull() && m_standards_level_isValid;
}

QString OAIStandardsProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardsProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_cycle.isSet()) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_default_program_isSet) {
        obj.insert(QString("defaultProgram"), ::OpenAPI::toJsonValue(m_default_program));
    }
    if (m_evaluation_reason_isSet) {
        obj.insert(QString("evaluationReason"), ::OpenAPI::toJsonValue(m_evaluation_reason));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_program_isSet) {
        obj.insert(QString("program"), ::OpenAPI::toJsonValue(m_program));
    }
    if (m_standards_level_isSet) {
        obj.insert(QString("standardsLevel"), ::OpenAPI::toJsonValue(m_standards_level));
    }
    return obj;
}

OAICycle OAIStandardsProfile::getCycle() const {
    return m_cycle;
}
void OAIStandardsProfile::setCycle(const OAICycle &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAIStandardsProfile::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAIStandardsProfile::is_cycle_Valid() const{
    return m_cycle_isValid;
}

bool OAIStandardsProfile::isDefaultProgram() const {
    return m_default_program;
}
void OAIStandardsProfile::setDefaultProgram(const bool &default_program) {
    m_default_program = default_program;
    m_default_program_isSet = true;
}

bool OAIStandardsProfile::is_default_program_Set() const{
    return m_default_program_isSet;
}

bool OAIStandardsProfile::is_default_program_Valid() const{
    return m_default_program_isValid;
}

QString OAIStandardsProfile::getEvaluationReason() const {
    return m_evaluation_reason;
}
void OAIStandardsProfile::setEvaluationReason(const QString &evaluation_reason) {
    m_evaluation_reason = evaluation_reason;
    m_evaluation_reason_isSet = true;
}

bool OAIStandardsProfile::is_evaluation_reason_Set() const{
    return m_evaluation_reason_isSet;
}

bool OAIStandardsProfile::is_evaluation_reason_Valid() const{
    return m_evaluation_reason_isValid;
}

QList<OAIMetric> OAIStandardsProfile::getMetrics() const {
    return m_metrics;
}
void OAIStandardsProfile::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIStandardsProfile::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIStandardsProfile::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIStandardsProfile::getProgram() const {
    return m_program;
}
void OAIStandardsProfile::setProgram(const QString &program) {
    m_program = program;
    m_program_isSet = true;
}

bool OAIStandardsProfile::is_program_Set() const{
    return m_program_isSet;
}

bool OAIStandardsProfile::is_program_Valid() const{
    return m_program_isValid;
}

QString OAIStandardsProfile::getStandardsLevel() const {
    return m_standards_level;
}
void OAIStandardsProfile::setStandardsLevel(const QString &standards_level) {
    m_standards_level = standards_level;
    m_standards_level_isSet = true;
}

bool OAIStandardsProfile::is_standards_level_Set() const{
    return m_standards_level_isSet;
}

bool OAIStandardsProfile::is_standards_level_Valid() const{
    return m_standards_level_isValid;
}

bool OAIStandardsProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standards_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardsProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
