/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReport.h
 *
 * The complex type that defines that defines the report.
 */

#ifndef OAIReport_H
#define OAIReport_H

#include <QJsonObject>

#include "OAIError.h"
#include "OAIHeader.h"
#include "OAIMetadata.h"
#include "OAIRecord.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetadata;
class OAIHeader;
class OAIRecord;
class OAIError;

class OAIReport : public OAIObject {
public:
    OAIReport();
    OAIReport(QString json);
    ~OAIReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIMetadata> getDimensionMetadata() const;
    void setDimensionMetadata(const QList<OAIMetadata> &dimension_metadata);
    bool is_dimension_metadata_Set() const;
    bool is_dimension_metadata_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    OAIHeader getHeader() const;
    void setHeader(const OAIHeader &header);
    bool is_header_Set() const;
    bool is_header_Valid() const;

    QString getLastUpdatedDate() const;
    void setLastUpdatedDate(const QString &last_updated_date);
    bool is_last_updated_date_Set() const;
    bool is_last_updated_date_Valid() const;

    QList<OAIRecord> getRecords() const;
    void setRecords(const QList<OAIRecord> &records);
    bool is_records_Set() const;
    bool is_records_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QList<OAIError> getWarnings() const;
    void setWarnings(const QList<OAIError> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIMetadata> m_dimension_metadata;
    bool m_dimension_metadata_isSet;
    bool m_dimension_metadata_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    OAIHeader m_header;
    bool m_header_isSet;
    bool m_header_isValid;

    QString m_last_updated_date;
    bool m_last_updated_date_isSet;
    bool m_last_updated_date_isValid;

    QList<OAIRecord> m_records;
    bool m_records_isSet;
    bool m_records_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QList<OAIError> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReport)

#endif // OAIReport_H
