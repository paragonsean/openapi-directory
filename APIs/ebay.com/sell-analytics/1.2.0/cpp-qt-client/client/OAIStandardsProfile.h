/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStandardsProfile.h
 *
 * A complex type that defines a seller profile.
 */

#ifndef OAIStandardsProfile_H
#define OAIStandardsProfile_H

#include <QJsonObject>

#include "OAICycle.h"
#include "OAIMetric.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICycle;
class OAIMetric;

class OAIStandardsProfile : public OAIObject {
public:
    OAIStandardsProfile();
    OAIStandardsProfile(QString json);
    ~OAIStandardsProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICycle getCycle() const;
    void setCycle(const OAICycle &cycle);
    bool is_cycle_Set() const;
    bool is_cycle_Valid() const;

    bool isDefaultProgram() const;
    void setDefaultProgram(const bool &default_program);
    bool is_default_program_Set() const;
    bool is_default_program_Valid() const;

    QString getEvaluationReason() const;
    void setEvaluationReason(const QString &evaluation_reason);
    bool is_evaluation_reason_Set() const;
    bool is_evaluation_reason_Valid() const;

    QList<OAIMetric> getMetrics() const;
    void setMetrics(const QList<OAIMetric> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QString getProgram() const;
    void setProgram(const QString &program);
    bool is_program_Set() const;
    bool is_program_Valid() const;

    QString getStandardsLevel() const;
    void setStandardsLevel(const QString &standards_level);
    bool is_standards_level_Set() const;
    bool is_standards_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICycle m_cycle;
    bool m_cycle_isSet;
    bool m_cycle_isValid;

    bool m_default_program;
    bool m_default_program_isSet;
    bool m_default_program_isValid;

    QString m_evaluation_reason;
    bool m_evaluation_reason_isSet;
    bool m_evaluation_reason_isValid;

    QList<OAIMetric> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QString m_program;
    bool m_program_isSet;
    bool m_program_isValid;

    QString m_standards_level;
    bool m_standards_level_isSet;
    bool m_standards_level_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStandardsProfile)

#endif // OAIStandardsProfile_H
