/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationCycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationCycle::OAIEvaluationCycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationCycle::OAIEvaluationCycle() {
    this->initializeModel();
}

OAIEvaluationCycle::~OAIEvaluationCycle() {}

void OAIEvaluationCycle::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_evaluation_date_isSet = false;
    m_evaluation_date_isValid = false;

    m_evaluation_type_isSet = false;
    m_evaluation_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIEvaluationCycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationCycle::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_evaluation_date_isValid = ::OpenAPI::fromJsonValue(m_evaluation_date, json[QString("evaluationDate")]);
    m_evaluation_date_isSet = !json[QString("evaluationDate")].isNull() && m_evaluation_date_isValid;

    m_evaluation_type_isValid = ::OpenAPI::fromJsonValue(m_evaluation_type, json[QString("evaluationType")]);
    m_evaluation_type_isSet = !json[QString("evaluationType")].isNull() && m_evaluation_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIEvaluationCycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationCycle::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_evaluation_date_isSet) {
        obj.insert(QString("evaluationDate"), ::OpenAPI::toJsonValue(m_evaluation_date));
    }
    if (m_evaluation_type_isSet) {
        obj.insert(QString("evaluationType"), ::OpenAPI::toJsonValue(m_evaluation_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIEvaluationCycle::getEndDate() const {
    return m_end_date;
}
void OAIEvaluationCycle::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEvaluationCycle::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEvaluationCycle::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEvaluationCycle::getEvaluationDate() const {
    return m_evaluation_date;
}
void OAIEvaluationCycle::setEvaluationDate(const QString &evaluation_date) {
    m_evaluation_date = evaluation_date;
    m_evaluation_date_isSet = true;
}

bool OAIEvaluationCycle::is_evaluation_date_Set() const{
    return m_evaluation_date_isSet;
}

bool OAIEvaluationCycle::is_evaluation_date_Valid() const{
    return m_evaluation_date_isValid;
}

QString OAIEvaluationCycle::getEvaluationType() const {
    return m_evaluation_type;
}
void OAIEvaluationCycle::setEvaluationType(const QString &evaluation_type) {
    m_evaluation_type = evaluation_type;
    m_evaluation_type_isSet = true;
}

bool OAIEvaluationCycle::is_evaluation_type_Set() const{
    return m_evaluation_type_isSet;
}

bool OAIEvaluationCycle::is_evaluation_type_Valid() const{
    return m_evaluation_type_isValid;
}

QString OAIEvaluationCycle::getStartDate() const {
    return m_start_date;
}
void OAIEvaluationCycle::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEvaluationCycle::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEvaluationCycle::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIEvaluationCycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationCycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
