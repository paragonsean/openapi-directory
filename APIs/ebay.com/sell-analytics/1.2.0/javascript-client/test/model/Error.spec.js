/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellerServiceMetricsApi);
  }
}(this, function(expect, SellerServiceMetricsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellerServiceMetricsApi.Error();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Error', function() {
    it('should create an instance of Error', function() {
      // uncomment below and update the code to test Error
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be.a(SellerServiceMetricsApi.Error);
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property errorId (base name: "errorId")', function() {
      // uncomment below and update the code to test the property errorId
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property inputRefIds (base name: "inputRefIds")', function() {
      // uncomment below and update the code to test the property inputRefIds
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property longMessage (base name: "longMessage")', function() {
      // uncomment below and update the code to test the property longMessage
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property outputRefIds (base name: "outputRefIds")', function() {
      // uncomment below and update the code to test the property outputRefIds
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

    it('should have the property subdomain (base name: "subdomain")', function() {
      // uncomment below and update the code to test the property subdomain
      //var instance = new SellerServiceMetricsApi.Error();
      //expect(instance).to.be();
    });

  });

}));
