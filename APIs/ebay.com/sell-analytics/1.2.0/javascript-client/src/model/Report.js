/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import Header from './Header';
import Metadata from './Metadata';
import Record from './Record';

/**
 * The Report model module.
 * @module model/Report
 * @version 1.2.0
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * The complex type that defines that defines the report.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('dimensionMetadata')) {
                obj['dimensionMetadata'] = ApiClient.convertToType(data['dimensionMetadata'], [Metadata]);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = Header.constructFromObject(data['header']);
            }
            if (data.hasOwnProperty('lastUpdatedDate')) {
                obj['lastUpdatedDate'] = ApiClient.convertToType(data['lastUpdatedDate'], 'String');
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], [Record]);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Error]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        if (data['dimensionMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionMetadata'])) {
                throw new Error("Expected the field `dimensionMetadata` to be an array in the JSON data but got " + data['dimensionMetadata']);
            }
            // validate the optional field `dimensionMetadata` (array)
            for (const item of data['dimensionMetadata']) {
                Metadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // validate the optional field `header`
        if (data['header']) { // data not null
          Header.validateJSON(data['header']);
        }
        // ensure the json data is a string
        if (data['lastUpdatedDate'] && !(typeof data['lastUpdatedDate'] === 'string' || data['lastUpdatedDate'] instanceof String)) {
            throw new Error("Expected the field `lastUpdatedDate` to be a primitive type in the JSON string but got " + data['lastUpdatedDate']);
        }
        if (data['records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['records'])) {
                throw new Error("Expected the field `records` to be an array in the JSON data but got " + data['records']);
            }
            // validate the optional field `records` (array)
            for (const item of data['records']) {
                Record.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A complex type containing the header of the report and the type of data containted in the rows of the report.
 * @member {Array.<module:model/Metadata>} dimensionMetadata
 */
Report.prototype['dimensionMetadata'] = undefined;

/**
 * The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z
 * @member {String} endDate
 */
Report.prototype['endDate'] = undefined;

/**
 * @member {module:model/Header} header
 */
Report.prototype['header'] = undefined;

/**
 * The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.
 * @member {String} lastUpdatedDate
 */
Report.prototype['lastUpdatedDate'] = undefined;

/**
 * A complex type containing the individual data records for the traffic report.
 * @member {Array.<module:model/Record>} records
 */
Report.prototype['records'] = undefined;

/**
 * The start date of the date range used to calculate the report, in ISO 8601 format.
 * @member {String} startDate
 */
Report.prototype['startDate'] = undefined;

/**
 * An array of any process errors or warnings that were generated during the processing of the call processing.
 * @member {Array.<module:model/Error>} warnings
 */
Report.prototype['warnings'] = undefined;






export default Report;

