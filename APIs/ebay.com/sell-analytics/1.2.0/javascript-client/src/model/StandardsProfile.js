/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cycle from './Cycle';
import Metric from './Metric';

/**
 * The StandardsProfile model module.
 * @module model/StandardsProfile
 * @version 1.2.0
 */
class StandardsProfile {
    /**
     * Constructs a new <code>StandardsProfile</code>.
     * A complex type that defines a seller profile.
     * @alias module:model/StandardsProfile
     */
    constructor() { 
        
        StandardsProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StandardsProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardsProfile} obj Optional instance to populate.
     * @return {module:model/StandardsProfile} The populated <code>StandardsProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardsProfile();

            if (data.hasOwnProperty('cycle')) {
                obj['cycle'] = Cycle.constructFromObject(data['cycle']);
            }
            if (data.hasOwnProperty('defaultProgram')) {
                obj['defaultProgram'] = ApiClient.convertToType(data['defaultProgram'], 'Boolean');
            }
            if (data.hasOwnProperty('evaluationReason')) {
                obj['evaluationReason'] = ApiClient.convertToType(data['evaluationReason'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('program')) {
                obj['program'] = ApiClient.convertToType(data['program'], 'String');
            }
            if (data.hasOwnProperty('standardsLevel')) {
                obj['standardsLevel'] = ApiClient.convertToType(data['standardsLevel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardsProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardsProfile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cycle`
        if (data['cycle']) { // data not null
          Cycle.validateJSON(data['cycle']);
        }
        // ensure the json data is a string
        if (data['evaluationReason'] && !(typeof data['evaluationReason'] === 'string' || data['evaluationReason'] instanceof String)) {
            throw new Error("Expected the field `evaluationReason` to be a primitive type in the JSON string but got " + data['evaluationReason']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['program'] && !(typeof data['program'] === 'string' || data['program'] instanceof String)) {
            throw new Error("Expected the field `program` to be a primitive type in the JSON string but got " + data['program']);
        }
        // ensure the json data is a string
        if (data['standardsLevel'] && !(typeof data['standardsLevel'] === 'string' || data['standardsLevel'] instanceof String)) {
            throw new Error("Expected the field `standardsLevel` to be a primitive type in the JSON string but got " + data['standardsLevel']);
        }

        return true;
    }


}



/**
 * @member {module:model/Cycle} cycle
 */
StandardsProfile.prototype['cycle'] = undefined;

/**
 * If set to true, this flag indicates this is the default program for the seller. Except for sellers in China, a seller's default program is the marketplace where they registered with eBay. Seller's in China select their default program when they register.
 * @member {Boolean} defaultProgram
 */
StandardsProfile.prototype['defaultProgram'] = undefined;

/**
 * Specifies how the overall seller level was calculated. In the event of special circumstances (as determined by eBay), eBay may override the calculated seller level. In general, such overrides protect a seller's level. The usual value for both cycle types is &quot;Seller level generated by standards monthly evaluation cycle.&quot;
 * @member {String} evaluationReason
 */
StandardsProfile.prototype['evaluationReason'] = undefined;

/**
 * A list of the metrics upon which a seller's profile is evaluated. Each program's applicable metrics and requirements are listed at eBay Top Rated seller program standards.
 * @member {Array.<module:model/Metric>} metrics
 */
StandardsProfile.prototype['metrics'] = undefined;

/**
 * Indicates the program used to generate the profile data. Values can be PROGRAM_DE, PROGRAM_UK, PROGRAM_US, or PROGRAM_GLOBAL. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/ProgramEnum.html'>eBay API documentation</a>
 * @member {String} program
 */
StandardsProfile.prototype['program'] = undefined;

/**
 * The overall standards level of the seller, one of TOP_RATED, ABOVE_STANDARD, or BELOW_STANDARD. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/StandardsLevelEnum.html'>eBay API documentation</a>
 * @member {String} standardsLevel
 */
StandardsProfile.prototype['standardsLevel'] = undefined;






export default StandardsProfile;

