/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EvaluationCycle model module.
 * @module model/EvaluationCycle
 * @version 1.2.0
 */
class EvaluationCycle {
    /**
     * Constructs a new <code>EvaluationCycle</code>.
     * This complex type describes the start and end dates of the of the time period over which the associated benchmark is computed. All timestamps are based on Mountain Standard Time (MST). The timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.
     * @alias module:model/EvaluationCycle
     */
    constructor() { 
        
        EvaluationCycle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EvaluationCycle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EvaluationCycle} obj Optional instance to populate.
     * @return {module:model/EvaluationCycle} The populated <code>EvaluationCycle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EvaluationCycle();

            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('evaluationDate')) {
                obj['evaluationDate'] = ApiClient.convertToType(data['evaluationDate'], 'String');
            }
            if (data.hasOwnProperty('evaluationType')) {
                obj['evaluationType'] = ApiClient.convertToType(data['evaluationType'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EvaluationCycle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EvaluationCycle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['evaluationDate'] && !(typeof data['evaluationDate'] === 'string' || data['evaluationDate'] instanceof String)) {
            throw new Error("Expected the field `evaluationDate` to be a primitive type in the JSON string but got " + data['evaluationDate']);
        }
        // ensure the json data is a string
        if (data['evaluationType'] && !(typeof data['evaluationType'] === 'string' || data['evaluationType'] instanceof String)) {
            throw new Error("Expected the field `evaluationType` to be a primitive type in the JSON string but got " + data['evaluationType']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }

        return true;
    }


}



/**
 * End date and time of the transaction lookback range. All timestamps are based on Mountain Standard Time (MST). The timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.
 * @member {String} endDate
 */
EvaluationCycle.prototype['endDate'] = undefined;

/**
 * The ISO-8601 date and time at which the seller was evaluated for this customer service metric rating.
 * @member {String} evaluationDate
 */
EvaluationCycle.prototype['evaluationDate'] = undefined;

/**
 * This field specifies the transaction lookback period used for the evaluation. The evaluation_type value specified in the request is returned in this field. There are two possible values: CURRENT &ndash; A monthly evaluation that occurs on the 20th of every month. PROJECTED &ndash; A daily evaluation that provides a projection of how the seller is currently performing with regards to the upcoming evaluation period. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/EvaluationTypeEnum.html'>eBay API documentation</a>
 * @member {String} evaluationType
 */
EvaluationCycle.prototype['evaluationType'] = undefined;

/**
 * The start date and time of the transaction lookback range. All timestamps are based on Mountain Standard Time (MST). The timestamp is formatted as an ISO 8601 string, which is based on the 24-hour Coordinated Universal Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-04T07:09:00.000Z
 * @member {String} startDate
 */
EvaluationCycle.prototype['startDate'] = undefined;






export default EvaluationCycle;

