/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricBenchmark from './MetricBenchmark';
import MetricDistribution from './MetricDistribution';

/**
 * The Metric model module.
 * @module model/Metric
 * @version 1.2.0
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * This complex data type defines the details of the customer service metric and benchmark data related to the associated dimension.
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('benchmark')) {
                obj['benchmark'] = MetricBenchmark.constructFromObject(data['benchmark']);
            }
            if (data.hasOwnProperty('distributions')) {
                obj['distributions'] = ApiClient.convertToType(data['distributions'], [MetricDistribution]);
            }
            if (data.hasOwnProperty('metricKey')) {
                obj['metricKey'] = ApiClient.convertToType(data['metricKey'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // validate the optional field `benchmark`
        if (data['benchmark']) { // data not null
          MetricBenchmark.validateJSON(data['benchmark']);
        }
        if (data['distributions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['distributions'])) {
                throw new Error("Expected the field `distributions` to be an array in the JSON data but got " + data['distributions']);
            }
            // validate the optional field `distributions` (array)
            for (const item of data['distributions']) {
                MetricDistribution.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metricKey'] && !(typeof data['metricKey'] === 'string' || data['metricKey'] instanceof String)) {
            throw new Error("Expected the field `metricKey` to be a primitive type in the JSON string but got " + data['metricKey']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/MetricBenchmark} benchmark
 */
Metric.prototype['benchmark'] = undefined;

/**
 * Returned when metricKey equals COUNT, this field returns an array of seller data where each set of data is grouped according by an overarching basis. When the seller distribution is returned, the numeric value of the associated value container equals the sum of the transactions where the seller meets the criteria of the customer service metric type for the given dimension during the evaluationCycle.
 * @member {Array.<module:model/MetricDistribution>} distributions
 */
Metric.prototype['distributions'] = undefined;

/**
 * This field indicates the customer service metric being returned in the associated metrics container. The field is set as follows: TRANSACTION_COUNT &ndash; When set to this value, the associated value field equals the total number of transactions completed in the seller group for the metric in the given dimension during the associated evaluationCycle. COUNT &ndash; When set to this value, the associated value field is set to the total number of transactions the seller completed that meet the criteria of the customer service metric type for the given dimension that occurred during the evaluationCycle. RATE &ndash; When set to this value, the value of the associated value field is the rate of the customer service metric type in the given dimension during the associated evaluationCycle. Specifically, when metricKey is set to RATE, the associated value field is set to the value of metricKey TRANSACTION_COUNT divided by the value of metricKey COUNT. The returned benchmark.rating for the seller is based on this calculated value.
 * @member {String} metricKey
 */
Metric.prototype['metricKey'] = undefined;

/**
 * This field is set to the seller's numeric rating for the associated metricKey for the given dimension during the evaluationCycle. To determine the seller's rating for this metric, the value of this field is compared to the average metric value of the group.
 * @member {String} value
 */
Metric.prototype['value'] = undefined;






export default Metric;

