/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorParameter from './ErrorParameter';

/**
 * The Error model module.
 * @module model/Error
 * @version 1.2.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * Type that defines the fields that can be returned in an error.
     * @alias module:model/Error
     */
    constructor() { 
        
        Error.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('errorId')) {
                obj['errorId'] = ApiClient.convertToType(data['errorId'], 'Number');
            }
            if (data.hasOwnProperty('inputRefIds')) {
                obj['inputRefIds'] = ApiClient.convertToType(data['inputRefIds'], ['String']);
            }
            if (data.hasOwnProperty('longMessage')) {
                obj['longMessage'] = ApiClient.convertToType(data['longMessage'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('outputRefIds')) {
                obj['outputRefIds'] = ApiClient.convertToType(data['outputRefIds'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ErrorParameter]);
            }
            if (data.hasOwnProperty('subdomain')) {
                obj['subdomain'] = ApiClient.convertToType(data['subdomain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputRefIds'])) {
            throw new Error("Expected the field `inputRefIds` to be an array in the JSON data but got " + data['inputRefIds']);
        }
        // ensure the json data is a string
        if (data['longMessage'] && !(typeof data['longMessage'] === 'string' || data['longMessage'] instanceof String)) {
            throw new Error("Expected the field `longMessage` to be a primitive type in the JSON string but got " + data['longMessage']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['outputRefIds'])) {
            throw new Error("Expected the field `outputRefIds` to be an array in the JSON data but got " + data['outputRefIds']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ErrorParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subdomain'] && !(typeof data['subdomain'] === 'string' || data['subdomain'] instanceof String)) {
            throw new Error("Expected the field `subdomain` to be a primitive type in the JSON string but got " + data['subdomain']);
        }

        return true;
    }


}



/**
 * Identifies whether the error was in the REQUEST or happened when running the APPLICATION.
 * @member {String} category
 */
Error.prototype['category'] = undefined;

/**
 * The primary system where the error occurred. This is relevant for application errors. For Analytics errors, it always has the value API_ANALYTICS.
 * @member {String} domain
 */
Error.prototype['domain'] = undefined;

/**
 * A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms. Traffic report error IDs range from 50001 to 50500.
 * @member {Number} errorId
 */
Error.prototype['errorId'] = undefined;

/**
 * Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use JSONPath notation.
 * @member {Array.<String>} inputRefIds
 */
Error.prototype['inputRefIds'] = undefined;

/**
 * A more detailed explanation of the error than given in the message error field.
 * @member {String} longMessage
 */
Error.prototype['longMessage'] = undefined;

/**
 * Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * Identifies specific response elements associated with the error, if any. Path format is the same as inputRefId.
 * @member {Array.<String>} outputRefIds
 */
Error.prototype['outputRefIds'] = undefined;

/**
 * This optional list of name/value pairs that contain context-specific ErrorParameter objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each ErrorParameter object consists of two fields, a name and a value.
 * @member {Array.<module:model/ErrorParameter>} parameters
 */
Error.prototype['parameters'] = undefined;

/**
 * If present, indicates which subsystem in which the error occurred.
 * @member {String} subdomain
 */
Error.prototype['subdomain'] = undefined;






export default Error;

