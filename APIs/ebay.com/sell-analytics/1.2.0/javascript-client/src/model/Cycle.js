/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cycle model module.
 * @module model/Cycle
 * @version 1.2.0
 */
class Cycle {
    /**
     * Constructs a new <code>Cycle</code>.
     * A complex type that describes a program cycle.
     * @alias module:model/Cycle
     */
    constructor() { 
        
        Cycle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cycle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cycle} obj Optional instance to populate.
     * @return {module:model/Cycle} The populated <code>Cycle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cycle();

            if (data.hasOwnProperty('cycleType')) {
                obj['cycleType'] = ApiClient.convertToType(data['cycleType'], 'String');
            }
            if (data.hasOwnProperty('evaluationDate')) {
                obj['evaluationDate'] = ApiClient.convertToType(data['evaluationDate'], 'String');
            }
            if (data.hasOwnProperty('evaluationMonth')) {
                obj['evaluationMonth'] = ApiClient.convertToType(data['evaluationMonth'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cycle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cycle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cycleType'] && !(typeof data['cycleType'] === 'string' || data['cycleType'] instanceof String)) {
            throw new Error("Expected the field `cycleType` to be a primitive type in the JSON string but got " + data['cycleType']);
        }
        // ensure the json data is a string
        if (data['evaluationDate'] && !(typeof data['evaluationDate'] === 'string' || data['evaluationDate'] instanceof String)) {
            throw new Error("Expected the field `evaluationDate` to be a primitive type in the JSON string but got " + data['evaluationDate']);
        }
        // ensure the json data is a string
        if (data['evaluationMonth'] && !(typeof data['evaluationMonth'] === 'string' || data['evaluationMonth'] instanceof String)) {
            throw new Error("Expected the field `evaluationMonth` to be a primitive type in the JSON string but got " + data['evaluationMonth']);
        }

        return true;
    }


}



/**
 * The cycle type, either CURRENT or PROJECTED. CURRENT means the profile's metrics values are from the most recent official eBay monthly standards evaluation. PROJECTED means the profile values were determined when the profile was requested. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/CycleTypeEnum.html'>eBay API documentation</a>
 * @member {String} cycleType
 */
Cycle.prototype['cycleType'] = undefined;

/**
 * The date and time at which the standard compliance values were determined for the profile. The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-04T07:09:00.000Z
 * @member {String} evaluationDate
 */
Cycle.prototype['evaluationDate'] = undefined;

/**
 * The month in which the currently effective seller level was computed. The value is always formatted as YYYY-MM. If the cycle is CURRENT, this value is the month and year the of the last eBay compliance evaluation. If this is for a PROJECTED cycle, the value is the month and year of the next scheduled evaluation. Because eBay does official evaluations around the 20th of each month, a PROJECTED value may indicate either the current or the next month.
 * @member {String} evaluationMonth
 */
Cycle.prototype['evaluationMonth'] = undefined;






export default Cycle;

