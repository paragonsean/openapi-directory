/**
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BenchmarkMetadata from './BenchmarkMetadata';

/**
 * The MetricBenchmark model module.
 * @module model/MetricBenchmark
 * @version 1.2.0
 */
class MetricBenchmark {
    /**
     * Constructs a new <code>MetricBenchmark</code>.
     * This complex type defines the benchmark data, which includes the average value of the metric for the group (the benchmark) and the seller&#39;s overall rating when compared to the benchmark.
     * @alias module:model/MetricBenchmark
     */
    constructor() { 
        
        MetricBenchmark.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricBenchmark</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricBenchmark} obj Optional instance to populate.
     * @return {module:model/MetricBenchmark} The populated <code>MetricBenchmark</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricBenchmark();

            if (data.hasOwnProperty('adjustment')) {
                obj['adjustment'] = ApiClient.convertToType(data['adjustment'], 'String');
            }
            if (data.hasOwnProperty('basis')) {
                obj['basis'] = ApiClient.convertToType(data['basis'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = BenchmarkMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricBenchmark</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricBenchmark</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adjustment'] && !(typeof data['adjustment'] === 'string' || data['adjustment'] instanceof String)) {
            throw new Error("Expected the field `adjustment` to be a primitive type in the JSON string but got " + data['adjustment']);
        }
        // ensure the json data is a string
        if (data['basis'] && !(typeof data['basis'] === 'string' || data['basis'] instanceof String)) {
            throw new Error("Expected the field `basis` to be a primitive type in the JSON string but got " + data['basis']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          BenchmarkMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }

        return true;
    }


}



/**
 * If this field is present, it indicates that the rating given to the seller was &quot;adjusted&quot; for one reason or another. If eBay determines that the normal rating of a seller is impacted by circumstances beyond their control, they can issue an override to adjust the rating given to the seller. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/RatingAdjustmentTypeEnum.html'>eBay API documentation</a>
 * @member {String} adjustment
 */
MetricBenchmark.prototype['adjustment'] = undefined;

/**
 * This field returns the &quot;basis&quot; by which the benchmark is calculated for the customer service metric type. Currently, the only supported basis is PEER_BENCHMARK. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/BenchmarkTypeEnum.html'>eBay API documentation</a>
 * @member {String} basis
 */
MetricBenchmark.prototype['basis'] = undefined;

/**
 * @member {module:model/BenchmarkMetadata} metadata
 */
MetricBenchmark.prototype['metadata'] = undefined;

/**
 * This field returns seller's rating for the customer service metric. The rating is set to a value that equals the relative deviation between the seller's metric value and the benchmark value for the customer service metric. Deviation values range from LOW to VERY HIGH, and the lower the deviation, the better the seller rating. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/RatingTypeEnum.html'>eBay API documentation</a>
 * @member {String} rating
 */
MetricBenchmark.prototype['rating'] = undefined;






export default MetricBenchmark;

