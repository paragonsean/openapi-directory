# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cycle import Cycle
from openapi_server.models.metric import Metric
from openapi_server import util


class StandardsProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cycle: Cycle=None, default_program: bool=None, evaluation_reason: str=None, metrics: List[Metric]=None, program: str=None, standards_level: str=None):
        """StandardsProfile - a model defined in OpenAPI

        :param cycle: The cycle of this StandardsProfile.
        :param default_program: The default_program of this StandardsProfile.
        :param evaluation_reason: The evaluation_reason of this StandardsProfile.
        :param metrics: The metrics of this StandardsProfile.
        :param program: The program of this StandardsProfile.
        :param standards_level: The standards_level of this StandardsProfile.
        """
        self.openapi_types = {
            'cycle': Cycle,
            'default_program': bool,
            'evaluation_reason': str,
            'metrics': List[Metric],
            'program': str,
            'standards_level': str
        }

        self.attribute_map = {
            'cycle': 'cycle',
            'default_program': 'defaultProgram',
            'evaluation_reason': 'evaluationReason',
            'metrics': 'metrics',
            'program': 'program',
            'standards_level': 'standardsLevel'
        }

        self._cycle = cycle
        self._default_program = default_program
        self._evaluation_reason = evaluation_reason
        self._metrics = metrics
        self._program = program
        self._standards_level = standards_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardsProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardsProfile of this StandardsProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cycle(self):
        """Gets the cycle of this StandardsProfile.


        :return: The cycle of this StandardsProfile.
        :rtype: Cycle
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this StandardsProfile.


        :param cycle: The cycle of this StandardsProfile.
        :type cycle: Cycle
        """

        self._cycle = cycle

    @property
    def default_program(self):
        """Gets the default_program of this StandardsProfile.

        If set to true, this flag indicates this is the default program for the seller. Except for sellers in China, a seller's default program is the marketplace where they registered with eBay. Seller's in China select their default program when they register.

        :return: The default_program of this StandardsProfile.
        :rtype: bool
        """
        return self._default_program

    @default_program.setter
    def default_program(self, default_program):
        """Sets the default_program of this StandardsProfile.

        If set to true, this flag indicates this is the default program for the seller. Except for sellers in China, a seller's default program is the marketplace where they registered with eBay. Seller's in China select their default program when they register.

        :param default_program: The default_program of this StandardsProfile.
        :type default_program: bool
        """

        self._default_program = default_program

    @property
    def evaluation_reason(self):
        """Gets the evaluation_reason of this StandardsProfile.

        Specifies how the overall seller level was calculated. In the event of special circumstances (as determined by eBay), eBay may override the calculated seller level. In general, such overrides protect a seller's level. The usual value for both cycle types is &quot;Seller level generated by standards monthly evaluation cycle.&quot;

        :return: The evaluation_reason of this StandardsProfile.
        :rtype: str
        """
        return self._evaluation_reason

    @evaluation_reason.setter
    def evaluation_reason(self, evaluation_reason):
        """Sets the evaluation_reason of this StandardsProfile.

        Specifies how the overall seller level was calculated. In the event of special circumstances (as determined by eBay), eBay may override the calculated seller level. In general, such overrides protect a seller's level. The usual value for both cycle types is &quot;Seller level generated by standards monthly evaluation cycle.&quot;

        :param evaluation_reason: The evaluation_reason of this StandardsProfile.
        :type evaluation_reason: str
        """

        self._evaluation_reason = evaluation_reason

    @property
    def metrics(self):
        """Gets the metrics of this StandardsProfile.

        A list of the metrics upon which a seller's profile is evaluated. Each program's applicable metrics and requirements are listed at eBay Top Rated seller program standards.

        :return: The metrics of this StandardsProfile.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this StandardsProfile.

        A list of the metrics upon which a seller's profile is evaluated. Each program's applicable metrics and requirements are listed at eBay Top Rated seller program standards.

        :param metrics: The metrics of this StandardsProfile.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def program(self):
        """Gets the program of this StandardsProfile.

        Indicates the program used to generate the profile data. Values can be PROGRAM_DE, PROGRAM_UK, PROGRAM_US, or PROGRAM_GLOBAL. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/ProgramEnum.html'>eBay API documentation</a>

        :return: The program of this StandardsProfile.
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this StandardsProfile.

        Indicates the program used to generate the profile data. Values can be PROGRAM_DE, PROGRAM_UK, PROGRAM_US, or PROGRAM_GLOBAL. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/ProgramEnum.html'>eBay API documentation</a>

        :param program: The program of this StandardsProfile.
        :type program: str
        """

        self._program = program

    @property
    def standards_level(self):
        """Gets the standards_level of this StandardsProfile.

        The overall standards level of the seller, one of TOP_RATED, ABOVE_STANDARD, or BELOW_STANDARD. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/StandardsLevelEnum.html'>eBay API documentation</a>

        :return: The standards_level of this StandardsProfile.
        :rtype: str
        """
        return self._standards_level

    @standards_level.setter
    def standards_level(self, standards_level):
        """Sets the standards_level of this StandardsProfile.

        The overall standards level of the seller, one of TOP_RATED, ABOVE_STANDARD, or BELOW_STANDARD. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/StandardsLevelEnum.html'>eBay API documentation</a>

        :param standards_level: The standards_level of this StandardsProfile.
        :type standards_level: str
        """

        self._standards_level = standards_level
