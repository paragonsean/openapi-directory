# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.header import Header
from openapi_server.models.metadata import Metadata
from openapi_server.models.record import Record
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_metadata: List[Metadata]=None, end_date: str=None, header: Header=None, last_updated_date: str=None, records: List[Record]=None, start_date: str=None, warnings: List[Error]=None):
        """Report - a model defined in OpenAPI

        :param dimension_metadata: The dimension_metadata of this Report.
        :param end_date: The end_date of this Report.
        :param header: The header of this Report.
        :param last_updated_date: The last_updated_date of this Report.
        :param records: The records of this Report.
        :param start_date: The start_date of this Report.
        :param warnings: The warnings of this Report.
        """
        self.openapi_types = {
            'dimension_metadata': List[Metadata],
            'end_date': str,
            'header': Header,
            'last_updated_date': str,
            'records': List[Record],
            'start_date': str,
            'warnings': List[Error]
        }

        self.attribute_map = {
            'dimension_metadata': 'dimensionMetadata',
            'end_date': 'endDate',
            'header': 'header',
            'last_updated_date': 'lastUpdatedDate',
            'records': 'records',
            'start_date': 'startDate',
            'warnings': 'warnings'
        }

        self._dimension_metadata = dimension_metadata
        self._end_date = end_date
        self._header = header
        self._last_updated_date = last_updated_date
        self._records = records
        self._start_date = start_date
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_metadata(self):
        """Gets the dimension_metadata of this Report.

        A complex type containing the header of the report and the type of data containted in the rows of the report.

        :return: The dimension_metadata of this Report.
        :rtype: List[Metadata]
        """
        return self._dimension_metadata

    @dimension_metadata.setter
    def dimension_metadata(self, dimension_metadata):
        """Sets the dimension_metadata of this Report.

        A complex type containing the header of the report and the type of data containted in the rows of the report.

        :param dimension_metadata: The dimension_metadata of this Report.
        :type dimension_metadata: List[Metadata]
        """

        self._dimension_metadata = dimension_metadata

    @property
    def end_date(self):
        """Gets the end_date of this Report.

        The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z

        :return: The end_date of this Report.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Report.

        The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z

        :param end_date: The end_date of this Report.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def header(self):
        """Gets the header of this Report.


        :return: The header of this Report.
        :rtype: Header
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Report.


        :param header: The header of this Report.
        :type header: Header
        """

        self._header = header

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this Report.

        The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.

        :return: The last_updated_date of this Report.
        :rtype: str
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this Report.

        The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.

        :param last_updated_date: The last_updated_date of this Report.
        :type last_updated_date: str
        """

        self._last_updated_date = last_updated_date

    @property
    def records(self):
        """Gets the records of this Report.

        A complex type containing the individual data records for the traffic report.

        :return: The records of this Report.
        :rtype: List[Record]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this Report.

        A complex type containing the individual data records for the traffic report.

        :param records: The records of this Report.
        :type records: List[Record]
        """

        self._records = records

    @property
    def start_date(self):
        """Gets the start_date of this Report.

        The start date of the date range used to calculate the report, in ISO 8601 format.

        :return: The start_date of this Report.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Report.

        The start date of the date range used to calculate the report, in ISO 8601 format.

        :param start_date: The start_date of this Report.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def warnings(self):
        """Gets the warnings of this Report.

        An array of any process errors or warnings that were generated during the processing of the call processing.

        :return: The warnings of this Report.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Report.

        An array of any process errors or warnings that were generated during the processing of the call processing.

        :param warnings: The warnings of this Report.
        :type warnings: List[Error]
        """

        self._warnings = warnings
