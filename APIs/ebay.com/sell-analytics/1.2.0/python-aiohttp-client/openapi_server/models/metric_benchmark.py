# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.benchmark_metadata import BenchmarkMetadata
from openapi_server import util


class MetricBenchmark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: str=None, basis: str=None, metadata: BenchmarkMetadata=None, rating: str=None):
        """MetricBenchmark - a model defined in OpenAPI

        :param adjustment: The adjustment of this MetricBenchmark.
        :param basis: The basis of this MetricBenchmark.
        :param metadata: The metadata of this MetricBenchmark.
        :param rating: The rating of this MetricBenchmark.
        """
        self.openapi_types = {
            'adjustment': str,
            'basis': str,
            'metadata': BenchmarkMetadata,
            'rating': str
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'basis': 'basis',
            'metadata': 'metadata',
            'rating': 'rating'
        }

        self._adjustment = adjustment
        self._basis = basis
        self._metadata = metadata
        self._rating = rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricBenchmark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricBenchmark of this MetricBenchmark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this MetricBenchmark.

        If this field is present, it indicates that the rating given to the seller was &quot;adjusted&quot; for one reason or another. If eBay determines that the normal rating of a seller is impacted by circumstances beyond their control, they can issue an override to adjust the rating given to the seller. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/RatingAdjustmentTypeEnum.html'>eBay API documentation</a>

        :return: The adjustment of this MetricBenchmark.
        :rtype: str
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this MetricBenchmark.

        If this field is present, it indicates that the rating given to the seller was &quot;adjusted&quot; for one reason or another. If eBay determines that the normal rating of a seller is impacted by circumstances beyond their control, they can issue an override to adjust the rating given to the seller. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/RatingAdjustmentTypeEnum.html'>eBay API documentation</a>

        :param adjustment: The adjustment of this MetricBenchmark.
        :type adjustment: str
        """

        self._adjustment = adjustment

    @property
    def basis(self):
        """Gets the basis of this MetricBenchmark.

        This field returns the &quot;basis&quot; by which the benchmark is calculated for the customer service metric type. Currently, the only supported basis is PEER_BENCHMARK. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/BenchmarkTypeEnum.html'>eBay API documentation</a>

        :return: The basis of this MetricBenchmark.
        :rtype: str
        """
        return self._basis

    @basis.setter
    def basis(self, basis):
        """Sets the basis of this MetricBenchmark.

        This field returns the &quot;basis&quot; by which the benchmark is calculated for the customer service metric type. Currently, the only supported basis is PEER_BENCHMARK. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/BenchmarkTypeEnum.html'>eBay API documentation</a>

        :param basis: The basis of this MetricBenchmark.
        :type basis: str
        """

        self._basis = basis

    @property
    def metadata(self):
        """Gets the metadata of this MetricBenchmark.


        :return: The metadata of this MetricBenchmark.
        :rtype: BenchmarkMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MetricBenchmark.


        :param metadata: The metadata of this MetricBenchmark.
        :type metadata: BenchmarkMetadata
        """

        self._metadata = metadata

    @property
    def rating(self):
        """Gets the rating of this MetricBenchmark.

        This field returns seller's rating for the customer service metric. The rating is set to a value that equals the relative deviation between the seller's metric value and the benchmark value for the customer service metric. Deviation values range from LOW to VERY HIGH, and the lower the deviation, the better the seller rating. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/RatingTypeEnum.html'>eBay API documentation</a>

        :return: The rating of this MetricBenchmark.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this MetricBenchmark.

        This field returns seller's rating for the customer service metric. The rating is set to a value that equals the relative deviation between the seller's metric value and the benchmark value for the customer service metric. Deviation values range from LOW to VERY HIGH, and the lower the deviation, the better the seller rating. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/RatingTypeEnum.html'>eBay API documentation</a>

        :param rating: The rating of this MetricBenchmark.
        :type rating: str
        """

        self._rating = rating
