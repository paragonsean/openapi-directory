# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_parameter import ErrorParameter
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, domain: str=None, error_id: int=None, input_ref_ids: List[str]=None, long_message: str=None, message: str=None, output_ref_ids: List[str]=None, parameters: List[ErrorParameter]=None, subdomain: str=None):
        """Error - a model defined in OpenAPI

        :param category: The category of this Error.
        :param domain: The domain of this Error.
        :param error_id: The error_id of this Error.
        :param input_ref_ids: The input_ref_ids of this Error.
        :param long_message: The long_message of this Error.
        :param message: The message of this Error.
        :param output_ref_ids: The output_ref_ids of this Error.
        :param parameters: The parameters of this Error.
        :param subdomain: The subdomain of this Error.
        """
        self.openapi_types = {
            'category': str,
            'domain': str,
            'error_id': int,
            'input_ref_ids': List[str],
            'long_message': str,
            'message': str,
            'output_ref_ids': List[str],
            'parameters': List[ErrorParameter],
            'subdomain': str
        }

        self.attribute_map = {
            'category': 'category',
            'domain': 'domain',
            'error_id': 'errorId',
            'input_ref_ids': 'inputRefIds',
            'long_message': 'longMessage',
            'message': 'message',
            'output_ref_ids': 'outputRefIds',
            'parameters': 'parameters',
            'subdomain': 'subdomain'
        }

        self._category = category
        self._domain = domain
        self._error_id = error_id
        self._input_ref_ids = input_ref_ids
        self._long_message = long_message
        self._message = message
        self._output_ref_ids = output_ref_ids
        self._parameters = parameters
        self._subdomain = subdomain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Error.

        Identifies whether the error was in the REQUEST or happened when running the APPLICATION.

        :return: The category of this Error.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Error.

        Identifies whether the error was in the REQUEST or happened when running the APPLICATION.

        :param category: The category of this Error.
        :type category: str
        """

        self._category = category

    @property
    def domain(self):
        """Gets the domain of this Error.

        The primary system where the error occurred. This is relevant for application errors. For Analytics errors, it always has the value API_ANALYTICS.

        :return: The domain of this Error.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Error.

        The primary system where the error occurred. This is relevant for application errors. For Analytics errors, it always has the value API_ANALYTICS.

        :param domain: The domain of this Error.
        :type domain: str
        """

        self._domain = domain

    @property
    def error_id(self):
        """Gets the error_id of this Error.

        A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms. Traffic report error IDs range from 50001 to 50500.

        :return: The error_id of this Error.
        :rtype: int
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this Error.

        A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms. Traffic report error IDs range from 50001 to 50500.

        :param error_id: The error_id of this Error.
        :type error_id: int
        """

        self._error_id = error_id

    @property
    def input_ref_ids(self):
        """Gets the input_ref_ids of this Error.

        Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use JSONPath notation.

        :return: The input_ref_ids of this Error.
        :rtype: List[str]
        """
        return self._input_ref_ids

    @input_ref_ids.setter
    def input_ref_ids(self, input_ref_ids):
        """Sets the input_ref_ids of this Error.

        Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use JSONPath notation.

        :param input_ref_ids: The input_ref_ids of this Error.
        :type input_ref_ids: List[str]
        """

        self._input_ref_ids = input_ref_ids

    @property
    def long_message(self):
        """Gets the long_message of this Error.

        A more detailed explanation of the error than given in the message error field.

        :return: The long_message of this Error.
        :rtype: str
        """
        return self._long_message

    @long_message.setter
    def long_message(self, long_message):
        """Sets the long_message of this Error.

        A more detailed explanation of the error than given in the message error field.

        :param long_message: The long_message of this Error.
        :type long_message: str
        """

        self._long_message = long_message

    @property
    def message(self):
        """Gets the message of this Error.

        Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def output_ref_ids(self):
        """Gets the output_ref_ids of this Error.

        Identifies specific response elements associated with the error, if any. Path format is the same as inputRefId.

        :return: The output_ref_ids of this Error.
        :rtype: List[str]
        """
        return self._output_ref_ids

    @output_ref_ids.setter
    def output_ref_ids(self, output_ref_ids):
        """Sets the output_ref_ids of this Error.

        Identifies specific response elements associated with the error, if any. Path format is the same as inputRefId.

        :param output_ref_ids: The output_ref_ids of this Error.
        :type output_ref_ids: List[str]
        """

        self._output_ref_ids = output_ref_ids

    @property
    def parameters(self):
        """Gets the parameters of this Error.

        This optional list of name/value pairs that contain context-specific ErrorParameter objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each ErrorParameter object consists of two fields, a name and a value.

        :return: The parameters of this Error.
        :rtype: List[ErrorParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Error.

        This optional list of name/value pairs that contain context-specific ErrorParameter objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each ErrorParameter object consists of two fields, a name and a value.

        :param parameters: The parameters of this Error.
        :type parameters: List[ErrorParameter]
        """

        self._parameters = parameters

    @property
    def subdomain(self):
        """Gets the subdomain of this Error.

        If present, indicates which subsystem in which the error occurred.

        :return: The subdomain of this Error.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this Error.

        If present, indicates which subsystem in which the error occurred.

        :param subdomain: The subdomain of this Error.
        :type subdomain: str
        """

        self._subdomain = subdomain
