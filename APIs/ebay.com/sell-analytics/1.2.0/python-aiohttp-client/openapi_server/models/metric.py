# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_benchmark import MetricBenchmark
from openapi_server.models.metric_distribution import MetricDistribution
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benchmark: MetricBenchmark=None, distributions: List[MetricDistribution]=None, metric_key: str=None, value: str=None):
        """Metric - a model defined in OpenAPI

        :param benchmark: The benchmark of this Metric.
        :param distributions: The distributions of this Metric.
        :param metric_key: The metric_key of this Metric.
        :param value: The value of this Metric.
        """
        self.openapi_types = {
            'benchmark': MetricBenchmark,
            'distributions': List[MetricDistribution],
            'metric_key': str,
            'value': str
        }

        self.attribute_map = {
            'benchmark': 'benchmark',
            'distributions': 'distributions',
            'metric_key': 'metricKey',
            'value': 'value'
        }

        self._benchmark = benchmark
        self._distributions = distributions
        self._metric_key = metric_key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benchmark(self):
        """Gets the benchmark of this Metric.


        :return: The benchmark of this Metric.
        :rtype: MetricBenchmark
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this Metric.


        :param benchmark: The benchmark of this Metric.
        :type benchmark: MetricBenchmark
        """

        self._benchmark = benchmark

    @property
    def distributions(self):
        """Gets the distributions of this Metric.

        Returned when metricKey equals COUNT, this field returns an array of seller data where each set of data is grouped according by an overarching basis. When the seller distribution is returned, the numeric value of the associated value container equals the sum of the transactions where the seller meets the criteria of the customer service metric type for the given dimension during the evaluationCycle.

        :return: The distributions of this Metric.
        :rtype: List[MetricDistribution]
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """Sets the distributions of this Metric.

        Returned when metricKey equals COUNT, this field returns an array of seller data where each set of data is grouped according by an overarching basis. When the seller distribution is returned, the numeric value of the associated value container equals the sum of the transactions where the seller meets the criteria of the customer service metric type for the given dimension during the evaluationCycle.

        :param distributions: The distributions of this Metric.
        :type distributions: List[MetricDistribution]
        """

        self._distributions = distributions

    @property
    def metric_key(self):
        """Gets the metric_key of this Metric.

        This field indicates the customer service metric being returned in the associated metrics container. The field is set as follows: TRANSACTION_COUNT &ndash; When set to this value, the associated value field equals the total number of transactions completed in the seller group for the metric in the given dimension during the associated evaluationCycle. COUNT &ndash; When set to this value, the associated value field is set to the total number of transactions the seller completed that meet the criteria of the customer service metric type for the given dimension that occurred during the evaluationCycle. RATE &ndash; When set to this value, the value of the associated value field is the rate of the customer service metric type in the given dimension during the associated evaluationCycle. Specifically, when metricKey is set to RATE, the associated value field is set to the value of metricKey TRANSACTION_COUNT divided by the value of metricKey COUNT. The returned benchmark.rating for the seller is based on this calculated value.

        :return: The metric_key of this Metric.
        :rtype: str
        """
        return self._metric_key

    @metric_key.setter
    def metric_key(self, metric_key):
        """Sets the metric_key of this Metric.

        This field indicates the customer service metric being returned in the associated metrics container. The field is set as follows: TRANSACTION_COUNT &ndash; When set to this value, the associated value field equals the total number of transactions completed in the seller group for the metric in the given dimension during the associated evaluationCycle. COUNT &ndash; When set to this value, the associated value field is set to the total number of transactions the seller completed that meet the criteria of the customer service metric type for the given dimension that occurred during the evaluationCycle. RATE &ndash; When set to this value, the value of the associated value field is the rate of the customer service metric type in the given dimension during the associated evaluationCycle. Specifically, when metricKey is set to RATE, the associated value field is set to the value of metricKey TRANSACTION_COUNT divided by the value of metricKey COUNT. The returned benchmark.rating for the seller is based on this calculated value.

        :param metric_key: The metric_key of this Metric.
        :type metric_key: str
        """

        self._metric_key = metric_key

    @property
    def value(self):
        """Gets the value of this Metric.

        This field is set to the seller's numeric rating for the associated metricKey for the given dimension during the evaluationCycle. To determine the seller's rating for this metric, the value of this field is compared to the average metric value of the group.

        :return: The value of this Metric.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Metric.

        This field is set to the seller's numeric rating for the associated metricKey for the given dimension during the evaluationCycle. To determine the seller's rating for this metric, the value of this field is compared to the average metric value of the group.

        :param value: The value of this Metric.
        :type value: str
        """

        self._value = value
