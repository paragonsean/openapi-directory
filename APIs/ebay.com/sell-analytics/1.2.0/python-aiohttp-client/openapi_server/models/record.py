# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value import Value
from openapi_server import util


class Record(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_values: List[Value]=None, metric_values: List[Value]=None):
        """Record - a model defined in OpenAPI

        :param dimension_values: The dimension_values of this Record.
        :param metric_values: The metric_values of this Record.
        """
        self.openapi_types = {
            'dimension_values': List[Value],
            'metric_values': List[Value]
        }

        self.attribute_map = {
            'dimension_values': 'dimensionValues',
            'metric_values': 'metricValues'
        }

        self._dimension_values = dimension_values
        self._metric_values = metric_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Record of this Record.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_values(self):
        """Gets the dimension_values of this Record.

        A list where each element contains either the string DAY (if the dimension is DAY), or the listing ID for which the record's metric data is computed. A second array member, applicable, is always true for dimension values.

        :return: The dimension_values of this Record.
        :rtype: List[Value]
        """
        return self._dimension_values

    @dimension_values.setter
    def dimension_values(self, dimension_values):
        """Sets the dimension_values of this Record.

        A list where each element contains either the string DAY (if the dimension is DAY), or the listing ID for which the record's metric data is computed. A second array member, applicable, is always true for dimension values.

        :param dimension_values: The dimension_values of this Record.
        :type dimension_values: List[Value]
        """

        self._dimension_values = dimension_values

    @property
    def metric_values(self):
        """Gets the metric_values of this Record.

        A list where each element contains a value field that indicates the record's value for the metric. Each element also contains an applicable field that indicates the veracity of the computed value. Note that there are no metric names or IDs associated with the values returned in this array. The metadata to which these values relate can be found in the key values . The order of the metric values in this array equals the order of the key values in metadataHeader.

        :return: The metric_values of this Record.
        :rtype: List[Value]
        """
        return self._metric_values

    @metric_values.setter
    def metric_values(self, metric_values):
        """Sets the metric_values of this Record.

        A list where each element contains a value field that indicates the record's value for the metric. Each element also contains an applicable field that indicates the veracity of the computed value. Note that there are no metric names or IDs associated with the values returned in this array. The metadata to which these values relate can be found in the key values . The order of the metric values in this array equals the order of the key values in metadataHeader.

        :param metric_values: The metric_values of this Record.
        :type metric_values: List[Value]
        """

        self._metric_values = metric_values
