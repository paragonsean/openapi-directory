# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BenchmarkMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: str=None):
        """BenchmarkMetadata - a model defined in OpenAPI

        :param average: The average of this BenchmarkMetadata.
        """
        self.openapi_types = {
            'average': str
        }

        self.attribute_map = {
            'average': 'average'
        }

        self._average = average

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BenchmarkMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BenchmarkMetadata of this BenchmarkMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this BenchmarkMetadata.

        This field returns the average value for the group, as defined by the specified basis. When the benchmark basis is set to PEER_BENCHMARK, the value returned in this field is the benchmark value to which the seller's metric value is compared to determine the seller's rating for the customer service metric.

        :return: The average of this BenchmarkMetadata.
        :rtype: str
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this BenchmarkMetadata.

        This field returns the average value for the group, as defined by the specified basis. When the benchmark basis is set to PEER_BENCHMARK, the value returned in this field is the benchmark value to which the seller's metric value is compared to determine the seller's rating for the customer service metric.

        :param average: The average of this BenchmarkMetadata.
        :type average: str
        """

        self._average = average
