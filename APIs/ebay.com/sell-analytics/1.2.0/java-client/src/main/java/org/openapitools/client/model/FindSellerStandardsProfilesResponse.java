/*
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StandardsProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response container for a list of seller profiles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.123290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindSellerStandardsProfilesResponse {
  public static final String SERIALIZED_NAME_STANDARDS_PROFILES = "standardsProfiles";
  @SerializedName(SERIALIZED_NAME_STANDARDS_PROFILES)
  private List<StandardsProfile> standardsProfiles = new ArrayList<>();

  public FindSellerStandardsProfilesResponse() {
  }

  public FindSellerStandardsProfilesResponse standardsProfiles(List<StandardsProfile> standardsProfiles) {
    this.standardsProfiles = standardsProfiles;
    return this;
  }

  public FindSellerStandardsProfilesResponse addStandardsProfilesItem(StandardsProfile standardsProfilesItem) {
    if (this.standardsProfiles == null) {
      this.standardsProfiles = new ArrayList<>();
    }
    this.standardsProfiles.add(standardsProfilesItem);
    return this;
  }

  /**
   * A list of the seller&#39;s standards profiles. A &amp;quot;standards profile&amp;quot; is a set of eBay seller standards categories and the values related to the associated seller. Profiles are distinguished by a combination of cycle and program values. The &amp;quot;program&amp;quot; value specifies the region to which the data is from. The &amp;quot;cycle&amp;quot; value specifies whether the values were determined just now, or if the values are from the last official eBay seller standards evaluation.
   * @return standardsProfiles
   */
  @javax.annotation.Nullable
  public List<StandardsProfile> getStandardsProfiles() {
    return standardsProfiles;
  }

  public void setStandardsProfiles(List<StandardsProfile> standardsProfiles) {
    this.standardsProfiles = standardsProfiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindSellerStandardsProfilesResponse findSellerStandardsProfilesResponse = (FindSellerStandardsProfilesResponse) o;
    return Objects.equals(this.standardsProfiles, findSellerStandardsProfilesResponse.standardsProfiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(standardsProfiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindSellerStandardsProfilesResponse {\n");
    sb.append("    standardsProfiles: ").append(toIndentedString(standardsProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("standardsProfiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindSellerStandardsProfilesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindSellerStandardsProfilesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindSellerStandardsProfilesResponse is not found in the empty JSON string", FindSellerStandardsProfilesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindSellerStandardsProfilesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindSellerStandardsProfilesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("standardsProfiles") != null && !jsonObj.get("standardsProfiles").isJsonNull()) {
        JsonArray jsonArraystandardsProfiles = jsonObj.getAsJsonArray("standardsProfiles");
        if (jsonArraystandardsProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("standardsProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `standardsProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("standardsProfiles").toString()));
          }

          // validate the optional field `standardsProfiles` (array)
          for (int i = 0; i < jsonArraystandardsProfiles.size(); i++) {
            StandardsProfile.validateJsonElement(jsonArraystandardsProfiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindSellerStandardsProfilesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindSellerStandardsProfilesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindSellerStandardsProfilesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindSellerStandardsProfilesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FindSellerStandardsProfilesResponse>() {
           @Override
           public void write(JsonWriter out, FindSellerStandardsProfilesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindSellerStandardsProfilesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindSellerStandardsProfilesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindSellerStandardsProfilesResponse
   * @throws IOException if the JSON string is invalid with respect to FindSellerStandardsProfilesResponse
   */
  public static FindSellerStandardsProfilesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindSellerStandardsProfilesResponse.class);
  }

  /**
   * Convert an instance of FindSellerStandardsProfilesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

