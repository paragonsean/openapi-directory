/*
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Cycle;
import org.openapitools.client.model.Metric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that defines a seller profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.123290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandardsProfile {
  public static final String SERIALIZED_NAME_CYCLE = "cycle";
  @SerializedName(SERIALIZED_NAME_CYCLE)
  private Cycle cycle;

  public static final String SERIALIZED_NAME_DEFAULT_PROGRAM = "defaultProgram";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROGRAM)
  private Boolean defaultProgram;

  public static final String SERIALIZED_NAME_EVALUATION_REASON = "evaluationReason";
  @SerializedName(SERIALIZED_NAME_EVALUATION_REASON)
  private String evaluationReason;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private String program;

  public static final String SERIALIZED_NAME_STANDARDS_LEVEL = "standardsLevel";
  @SerializedName(SERIALIZED_NAME_STANDARDS_LEVEL)
  private String standardsLevel;

  public StandardsProfile() {
  }

  public StandardsProfile cycle(Cycle cycle) {
    this.cycle = cycle;
    return this;
  }

  /**
   * Get cycle
   * @return cycle
   */
  @javax.annotation.Nullable
  public Cycle getCycle() {
    return cycle;
  }

  public void setCycle(Cycle cycle) {
    this.cycle = cycle;
  }


  public StandardsProfile defaultProgram(Boolean defaultProgram) {
    this.defaultProgram = defaultProgram;
    return this;
  }

  /**
   * If set to true, this flag indicates this is the default program for the seller. Except for sellers in China, a seller&#39;s default program is the marketplace where they registered with eBay. Seller&#39;s in China select their default program when they register.
   * @return defaultProgram
   */
  @javax.annotation.Nullable
  public Boolean getDefaultProgram() {
    return defaultProgram;
  }

  public void setDefaultProgram(Boolean defaultProgram) {
    this.defaultProgram = defaultProgram;
  }


  public StandardsProfile evaluationReason(String evaluationReason) {
    this.evaluationReason = evaluationReason;
    return this;
  }

  /**
   * Specifies how the overall seller level was calculated. In the event of special circumstances (as determined by eBay), eBay may override the calculated seller level. In general, such overrides protect a seller&#39;s level. The usual value for both cycle types is &amp;quot;Seller level generated by standards monthly evaluation cycle.&amp;quot;
   * @return evaluationReason
   */
  @javax.annotation.Nullable
  public String getEvaluationReason() {
    return evaluationReason;
  }

  public void setEvaluationReason(String evaluationReason) {
    this.evaluationReason = evaluationReason;
  }


  public StandardsProfile metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public StandardsProfile addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * A list of the metrics upon which a seller&#39;s profile is evaluated. Each program&#39;s applicable metrics and requirements are listed at eBay Top Rated seller program standards.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }


  public StandardsProfile program(String program) {
    this.program = program;
    return this;
  }

  /**
   * Indicates the program used to generate the profile data. Values can be PROGRAM_DE, PROGRAM_UK, PROGRAM_US, or PROGRAM_GLOBAL. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/analytics/types/ProgramEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return program
   */
  @javax.annotation.Nullable
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }


  public StandardsProfile standardsLevel(String standardsLevel) {
    this.standardsLevel = standardsLevel;
    return this;
  }

  /**
   * The overall standards level of the seller, one of TOP_RATED, ABOVE_STANDARD, or BELOW_STANDARD. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/analytics/types/StandardsLevelEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return standardsLevel
   */
  @javax.annotation.Nullable
  public String getStandardsLevel() {
    return standardsLevel;
  }

  public void setStandardsLevel(String standardsLevel) {
    this.standardsLevel = standardsLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardsProfile standardsProfile = (StandardsProfile) o;
    return Objects.equals(this.cycle, standardsProfile.cycle) &&
        Objects.equals(this.defaultProgram, standardsProfile.defaultProgram) &&
        Objects.equals(this.evaluationReason, standardsProfile.evaluationReason) &&
        Objects.equals(this.metrics, standardsProfile.metrics) &&
        Objects.equals(this.program, standardsProfile.program) &&
        Objects.equals(this.standardsLevel, standardsProfile.standardsLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycle, defaultProgram, evaluationReason, metrics, program, standardsLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardsProfile {\n");
    sb.append("    cycle: ").append(toIndentedString(cycle)).append("\n");
    sb.append("    defaultProgram: ").append(toIndentedString(defaultProgram)).append("\n");
    sb.append("    evaluationReason: ").append(toIndentedString(evaluationReason)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    standardsLevel: ").append(toIndentedString(standardsLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycle");
    openapiFields.add("defaultProgram");
    openapiFields.add("evaluationReason");
    openapiFields.add("metrics");
    openapiFields.add("program");
    openapiFields.add("standardsLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandardsProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardsProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardsProfile is not found in the empty JSON string", StandardsProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandardsProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardsProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cycle`
      if (jsonObj.get("cycle") != null && !jsonObj.get("cycle").isJsonNull()) {
        Cycle.validateJsonElement(jsonObj.get("cycle"));
      }
      if ((jsonObj.get("evaluationReason") != null && !jsonObj.get("evaluationReason").isJsonNull()) && !jsonObj.get("evaluationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationReason").toString()));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) && !jsonObj.get("program").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program").toString()));
      }
      if ((jsonObj.get("standardsLevel") != null && !jsonObj.get("standardsLevel").isJsonNull()) && !jsonObj.get("standardsLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standardsLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standardsLevel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardsProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardsProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardsProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardsProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardsProfile>() {
           @Override
           public void write(JsonWriter out, StandardsProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardsProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandardsProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandardsProfile
   * @throws IOException if the JSON string is invalid with respect to StandardsProfile
   */
  public static StandardsProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardsProfile.class);
  }

  /**
   * Convert an instance of StandardsProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

