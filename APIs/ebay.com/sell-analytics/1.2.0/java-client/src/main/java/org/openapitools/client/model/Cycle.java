/*
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that describes a program cycle.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.123290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cycle {
  public static final String SERIALIZED_NAME_CYCLE_TYPE = "cycleType";
  @SerializedName(SERIALIZED_NAME_CYCLE_TYPE)
  private String cycleType;

  public static final String SERIALIZED_NAME_EVALUATION_DATE = "evaluationDate";
  @SerializedName(SERIALIZED_NAME_EVALUATION_DATE)
  private String evaluationDate;

  public static final String SERIALIZED_NAME_EVALUATION_MONTH = "evaluationMonth";
  @SerializedName(SERIALIZED_NAME_EVALUATION_MONTH)
  private String evaluationMonth;

  public Cycle() {
  }

  public Cycle cycleType(String cycleType) {
    this.cycleType = cycleType;
    return this;
  }

  /**
   * The cycle type, either CURRENT or PROJECTED. CURRENT means the profile&#39;s metrics values are from the most recent official eBay monthly standards evaluation. PROJECTED means the profile values were determined when the profile was requested. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/analytics/types/CycleTypeEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return cycleType
   */
  @javax.annotation.Nullable
  public String getCycleType() {
    return cycleType;
  }

  public void setCycleType(String cycleType) {
    this.cycleType = cycleType;
  }


  public Cycle evaluationDate(String evaluationDate) {
    this.evaluationDate = evaluationDate;
    return this;
  }

  /**
   * The date and time at which the standard compliance values were determined for the profile. The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-04T07:09:00.000Z
   * @return evaluationDate
   */
  @javax.annotation.Nullable
  public String getEvaluationDate() {
    return evaluationDate;
  }

  public void setEvaluationDate(String evaluationDate) {
    this.evaluationDate = evaluationDate;
  }


  public Cycle evaluationMonth(String evaluationMonth) {
    this.evaluationMonth = evaluationMonth;
    return this;
  }

  /**
   * The month in which the currently effective seller level was computed. The value is always formatted as YYYY-MM. If the cycle is CURRENT, this value is the month and year the of the last eBay compliance evaluation. If this is for a PROJECTED cycle, the value is the month and year of the next scheduled evaluation. Because eBay does official evaluations around the 20th of each month, a PROJECTED value may indicate either the current or the next month.
   * @return evaluationMonth
   */
  @javax.annotation.Nullable
  public String getEvaluationMonth() {
    return evaluationMonth;
  }

  public void setEvaluationMonth(String evaluationMonth) {
    this.evaluationMonth = evaluationMonth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cycle cycle = (Cycle) o;
    return Objects.equals(this.cycleType, cycle.cycleType) &&
        Objects.equals(this.evaluationDate, cycle.evaluationDate) &&
        Objects.equals(this.evaluationMonth, cycle.evaluationMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycleType, evaluationDate, evaluationMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cycle {\n");
    sb.append("    cycleType: ").append(toIndentedString(cycleType)).append("\n");
    sb.append("    evaluationDate: ").append(toIndentedString(evaluationDate)).append("\n");
    sb.append("    evaluationMonth: ").append(toIndentedString(evaluationMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycleType");
    openapiFields.add("evaluationDate");
    openapiFields.add("evaluationMonth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cycle is not found in the empty JSON string", Cycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cycleType") != null && !jsonObj.get("cycleType").isJsonNull()) && !jsonObj.get("cycleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cycleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cycleType").toString()));
      }
      if ((jsonObj.get("evaluationDate") != null && !jsonObj.get("evaluationDate").isJsonNull()) && !jsonObj.get("evaluationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationDate").toString()));
      }
      if ((jsonObj.get("evaluationMonth") != null && !jsonObj.get("evaluationMonth").isJsonNull()) && !jsonObj.get("evaluationMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMonth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cycle.class));

       return (TypeAdapter<T>) new TypeAdapter<Cycle>() {
           @Override
           public void write(JsonWriter out, Cycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cycle
   * @throws IOException if the JSON string is invalid with respect to Cycle
   */
  public static Cycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cycle.class);
  }

  /**
   * Convert an instance of Cycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

