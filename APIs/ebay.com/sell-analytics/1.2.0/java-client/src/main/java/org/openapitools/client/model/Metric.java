/*
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricBenchmark;
import org.openapitools.client.model.MetricDistribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex data type defines the details of the customer service metric and benchmark data related to the associated dimension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.123290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metric {
  public static final String SERIALIZED_NAME_BENCHMARK = "benchmark";
  @SerializedName(SERIALIZED_NAME_BENCHMARK)
  private MetricBenchmark benchmark;

  public static final String SERIALIZED_NAME_DISTRIBUTIONS = "distributions";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTIONS)
  private List<MetricDistribution> distributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_KEY = "metricKey";
  @SerializedName(SERIALIZED_NAME_METRIC_KEY)
  private String metricKey;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public Metric() {
  }

  public Metric benchmark(MetricBenchmark benchmark) {
    this.benchmark = benchmark;
    return this;
  }

  /**
   * Get benchmark
   * @return benchmark
   */
  @javax.annotation.Nullable
  public MetricBenchmark getBenchmark() {
    return benchmark;
  }

  public void setBenchmark(MetricBenchmark benchmark) {
    this.benchmark = benchmark;
  }


  public Metric distributions(List<MetricDistribution> distributions) {
    this.distributions = distributions;
    return this;
  }

  public Metric addDistributionsItem(MetricDistribution distributionsItem) {
    if (this.distributions == null) {
      this.distributions = new ArrayList<>();
    }
    this.distributions.add(distributionsItem);
    return this;
  }

  /**
   * Returned when metricKey equals COUNT, this field returns an array of seller data where each set of data is grouped according by an overarching basis. When the seller distribution is returned, the numeric value of the associated value container equals the sum of the transactions where the seller meets the criteria of the customer service metric type for the given dimension during the evaluationCycle.
   * @return distributions
   */
  @javax.annotation.Nullable
  public List<MetricDistribution> getDistributions() {
    return distributions;
  }

  public void setDistributions(List<MetricDistribution> distributions) {
    this.distributions = distributions;
  }


  public Metric metricKey(String metricKey) {
    this.metricKey = metricKey;
    return this;
  }

  /**
   * This field indicates the customer service metric being returned in the associated metrics container. The field is set as follows: TRANSACTION_COUNT &amp;ndash; When set to this value, the associated value field equals the total number of transactions completed in the seller group for the metric in the given dimension during the associated evaluationCycle. COUNT &amp;ndash; When set to this value, the associated value field is set to the total number of transactions the seller completed that meet the criteria of the customer service metric type for the given dimension that occurred during the evaluationCycle. RATE &amp;ndash; When set to this value, the value of the associated value field is the rate of the customer service metric type in the given dimension during the associated evaluationCycle. Specifically, when metricKey is set to RATE, the associated value field is set to the value of metricKey TRANSACTION_COUNT divided by the value of metricKey COUNT. The returned benchmark.rating for the seller is based on this calculated value.
   * @return metricKey
   */
  @javax.annotation.Nullable
  public String getMetricKey() {
    return metricKey;
  }

  public void setMetricKey(String metricKey) {
    this.metricKey = metricKey;
  }


  public Metric value(String value) {
    this.value = value;
    return this;
  }

  /**
   * This field is set to the seller&#39;s numeric rating for the associated metricKey for the given dimension during the evaluationCycle. To determine the seller&#39;s rating for this metric, the value of this field is compared to the average metric value of the group.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return Objects.equals(this.benchmark, metric.benchmark) &&
        Objects.equals(this.distributions, metric.distributions) &&
        Objects.equals(this.metricKey, metric.metricKey) &&
        Objects.equals(this.value, metric.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benchmark, distributions, metricKey, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    sb.append("    benchmark: ").append(toIndentedString(benchmark)).append("\n");
    sb.append("    distributions: ").append(toIndentedString(distributions)).append("\n");
    sb.append("    metricKey: ").append(toIndentedString(metricKey)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benchmark");
    openapiFields.add("distributions");
    openapiFields.add("metricKey");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metric is not found in the empty JSON string", Metric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `benchmark`
      if (jsonObj.get("benchmark") != null && !jsonObj.get("benchmark").isJsonNull()) {
        MetricBenchmark.validateJsonElement(jsonObj.get("benchmark"));
      }
      if (jsonObj.get("distributions") != null && !jsonObj.get("distributions").isJsonNull()) {
        JsonArray jsonArraydistributions = jsonObj.getAsJsonArray("distributions");
        if (jsonArraydistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distributions` to be an array in the JSON string but got `%s`", jsonObj.get("distributions").toString()));
          }

          // validate the optional field `distributions` (array)
          for (int i = 0; i < jsonArraydistributions.size(); i++) {
            MetricDistribution.validateJsonElement(jsonArraydistributions.get(i));
          };
        }
      }
      if ((jsonObj.get("metricKey") != null && !jsonObj.get("metricKey").isJsonNull()) && !jsonObj.get("metricKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricKey").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metric.class));

       return (TypeAdapter<T>) new TypeAdapter<Metric>() {
           @Override
           public void write(JsonWriter out, Metric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metric
   * @throws IOException if the JSON string is invalid with respect to Metric
   */
  public static Metric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metric.class);
  }

  /**
   * Convert an instance of Metric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

