/*
 *  Seller Service Metrics API 
 * The <i>Analytics API</i> provides data and information about a seller and their eBay business.  <br><br>The resources and methods in this API let sellers review information on their listing performance, metrics on their customer service performance, and details on their eBay seller performance rating.  <br><br>The three resources in the Analytics API provide the following data and information: <ul><li><b>Customer Service Metric</b> &ndash; Returns data on a seller's customer service performance as compared to other seller's in the same peer group.</li> <li><b>Traffic Report</b> &ndash; Returns data that shows how buyers are engaging with a seller's listings.</li> <li><b>Seller Standards Profile</b> &ndash; Returns data pertaining to a seller's performance rating.</li></ul> Sellers can use the data and information returned by the various Analytics API methods to determine where they can make improvements to increase sales and how they might improve their seller status as viewed by eBay buyers.  <br><br>For details on using this API, see <a href=\"/api-docs/sell/static/performance/analyzing-performance.html\" title=\"Selling Integration Guide\">Analyzing seller performance</a>.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionMetric;
import org.openapitools.client.model.EvaluationCycle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex data type defines the response data that is returned from a request to getCustomerServiceMetric. The dimensionMetrics object contains the details of the dimension being measured and the calculated customer service metric values. The evaluationCycle defines the period used to calculate the metric values. The marketplaceId is the eBay marketplace for which the metrics are being considered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:44.123290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCustomerServiceMetricResponse {
  public static final String SERIALIZED_NAME_DIMENSION_METRICS = "dimensionMetrics";
  @SerializedName(SERIALIZED_NAME_DIMENSION_METRICS)
  private List<DimensionMetric> dimensionMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVALUATION_CYCLE = "evaluationCycle";
  @SerializedName(SERIALIZED_NAME_EVALUATION_CYCLE)
  private EvaluationCycle evaluationCycle;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public GetCustomerServiceMetricResponse() {
  }

  public GetCustomerServiceMetricResponse dimensionMetrics(List<DimensionMetric> dimensionMetrics) {
    this.dimensionMetrics = dimensionMetrics;
    return this;
  }

  public GetCustomerServiceMetricResponse addDimensionMetricsItem(DimensionMetric dimensionMetricsItem) {
    if (this.dimensionMetrics == null) {
      this.dimensionMetrics = new ArrayList<>();
    }
    this.dimensionMetrics.add(dimensionMetricsItem);
    return this;
  }

  /**
   * This container provides a seller&#39;s customer service metric performance for a given dimension. In the getCustomerServiceMetric request, specify values for the following request parameters to control the returned dimension and the associated metric values: customer_service_metric_type evaluation_type evaluation_marketplace_id
   * @return dimensionMetrics
   */
  @javax.annotation.Nullable
  public List<DimensionMetric> getDimensionMetrics() {
    return dimensionMetrics;
  }

  public void setDimensionMetrics(List<DimensionMetric> dimensionMetrics) {
    this.dimensionMetrics = dimensionMetrics;
  }


  public GetCustomerServiceMetricResponse evaluationCycle(EvaluationCycle evaluationCycle) {
    this.evaluationCycle = evaluationCycle;
    return this;
  }

  /**
   * Get evaluationCycle
   * @return evaluationCycle
   */
  @javax.annotation.Nullable
  public EvaluationCycle getEvaluationCycle() {
    return evaluationCycle;
  }

  public void setEvaluationCycle(EvaluationCycle evaluationCycle) {
    this.evaluationCycle = evaluationCycle;
  }


  public GetCustomerServiceMetricResponse marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The eBay marketplace ID of the marketplace upon which the customer service metric evaluation is based. The customer_service_metric resource supports a limited set of marketplaces. For a complete list of the supported marketplaces, please see the Service metrics policy page. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/analytics/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCustomerServiceMetricResponse getCustomerServiceMetricResponse = (GetCustomerServiceMetricResponse) o;
    return Objects.equals(this.dimensionMetrics, getCustomerServiceMetricResponse.dimensionMetrics) &&
        Objects.equals(this.evaluationCycle, getCustomerServiceMetricResponse.evaluationCycle) &&
        Objects.equals(this.marketplaceId, getCustomerServiceMetricResponse.marketplaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionMetrics, evaluationCycle, marketplaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCustomerServiceMetricResponse {\n");
    sb.append("    dimensionMetrics: ").append(toIndentedString(dimensionMetrics)).append("\n");
    sb.append("    evaluationCycle: ").append(toIndentedString(evaluationCycle)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionMetrics");
    openapiFields.add("evaluationCycle");
    openapiFields.add("marketplaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCustomerServiceMetricResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCustomerServiceMetricResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCustomerServiceMetricResponse is not found in the empty JSON string", GetCustomerServiceMetricResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCustomerServiceMetricResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCustomerServiceMetricResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensionMetrics") != null && !jsonObj.get("dimensionMetrics").isJsonNull()) {
        JsonArray jsonArraydimensionMetrics = jsonObj.getAsJsonArray("dimensionMetrics");
        if (jsonArraydimensionMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionMetrics").toString()));
          }

          // validate the optional field `dimensionMetrics` (array)
          for (int i = 0; i < jsonArraydimensionMetrics.size(); i++) {
            DimensionMetric.validateJsonElement(jsonArraydimensionMetrics.get(i));
          };
        }
      }
      // validate the optional field `evaluationCycle`
      if (jsonObj.get("evaluationCycle") != null && !jsonObj.get("evaluationCycle").isJsonNull()) {
        EvaluationCycle.validateJsonElement(jsonObj.get("evaluationCycle"));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCustomerServiceMetricResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCustomerServiceMetricResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCustomerServiceMetricResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCustomerServiceMetricResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCustomerServiceMetricResponse>() {
           @Override
           public void write(JsonWriter out, GetCustomerServiceMetricResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCustomerServiceMetricResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCustomerServiceMetricResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCustomerServiceMetricResponse
   * @throws IOException if the JSON string is invalid with respect to GetCustomerServiceMetricResponse
   */
  public static GetCustomerServiceMetricResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCustomerServiceMetricResponse.class);
  }

  /**
   * Convert an instance of GetCustomerServiceMetricResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

