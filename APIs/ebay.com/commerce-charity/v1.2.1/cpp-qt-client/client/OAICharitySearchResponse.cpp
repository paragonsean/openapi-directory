/**
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICharitySearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICharitySearchResponse::OAICharitySearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICharitySearchResponse::OAICharitySearchResponse() {
    this->initializeModel();
}

OAICharitySearchResponse::~OAICharitySearchResponse() {}

void OAICharitySearchResponse::initializeModel() {

    m_charity_orgs_isSet = false;
    m_charity_orgs_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAICharitySearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICharitySearchResponse::fromJsonObject(QJsonObject json) {

    m_charity_orgs_isValid = ::OpenAPI::fromJsonValue(m_charity_orgs, json[QString("charityOrgs")]);
    m_charity_orgs_isSet = !json[QString("charityOrgs")].isNull() && m_charity_orgs_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAICharitySearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICharitySearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_charity_orgs.size() > 0) {
        obj.insert(QString("charityOrgs"), ::OpenAPI::toJsonValue(m_charity_orgs));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAICharityOrg> OAICharitySearchResponse::getCharityOrgs() const {
    return m_charity_orgs;
}
void OAICharitySearchResponse::setCharityOrgs(const QList<OAICharityOrg> &charity_orgs) {
    m_charity_orgs = charity_orgs;
    m_charity_orgs_isSet = true;
}

bool OAICharitySearchResponse::is_charity_orgs_Set() const{
    return m_charity_orgs_isSet;
}

bool OAICharitySearchResponse::is_charity_orgs_Valid() const{
    return m_charity_orgs_isValid;
}

QString OAICharitySearchResponse::getHref() const {
    return m_href;
}
void OAICharitySearchResponse::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAICharitySearchResponse::is_href_Set() const{
    return m_href_isSet;
}

bool OAICharitySearchResponse::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAICharitySearchResponse::getLimit() const {
    return m_limit;
}
void OAICharitySearchResponse::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAICharitySearchResponse::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAICharitySearchResponse::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAICharitySearchResponse::getNext() const {
    return m_next;
}
void OAICharitySearchResponse::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAICharitySearchResponse::is_next_Set() const{
    return m_next_isSet;
}

bool OAICharitySearchResponse::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAICharitySearchResponse::getOffset() const {
    return m_offset;
}
void OAICharitySearchResponse::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAICharitySearchResponse::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAICharitySearchResponse::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAICharitySearchResponse::getPrev() const {
    return m_prev;
}
void OAICharitySearchResponse::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAICharitySearchResponse::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAICharitySearchResponse::is_prev_Valid() const{
    return m_prev_isValid;
}

qint32 OAICharitySearchResponse::getTotal() const {
    return m_total;
}
void OAICharitySearchResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICharitySearchResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAICharitySearchResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAICharitySearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charity_orgs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICharitySearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
