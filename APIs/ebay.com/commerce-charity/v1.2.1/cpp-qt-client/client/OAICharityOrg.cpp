/**
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICharityOrg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICharityOrg::OAICharityOrg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICharityOrg::OAICharityOrg() {
    this->initializeModel();
}

OAICharityOrg::~OAICharityOrg() {}

void OAICharityOrg::initializeModel() {

    m_charity_org_id_isSet = false;
    m_charity_org_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_image_isSet = false;
    m_logo_image_isValid = false;

    m_mission_statement_isSet = false;
    m_mission_statement_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_id_isSet = false;
    m_registration_id_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAICharityOrg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICharityOrg::fromJsonObject(QJsonObject json) {

    m_charity_org_id_isValid = ::OpenAPI::fromJsonValue(m_charity_org_id, json[QString("charityOrgId")]);
    m_charity_org_id_isSet = !json[QString("charityOrgId")].isNull() && m_charity_org_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_image_isValid = ::OpenAPI::fromJsonValue(m_logo_image, json[QString("logoImage")]);
    m_logo_image_isSet = !json[QString("logoImage")].isNull() && m_logo_image_isValid;

    m_mission_statement_isValid = ::OpenAPI::fromJsonValue(m_mission_statement, json[QString("missionStatement")]);
    m_mission_statement_isSet = !json[QString("missionStatement")].isNull() && m_mission_statement_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registration_id_isValid = ::OpenAPI::fromJsonValue(m_registration_id, json[QString("registrationId")]);
    m_registration_id_isSet = !json[QString("registrationId")].isNull() && m_registration_id_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAICharityOrg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICharityOrg::asJsonObject() const {
    QJsonObject obj;
    if (m_charity_org_id_isSet) {
        obj.insert(QString("charityOrgId"), ::OpenAPI::toJsonValue(m_charity_org_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo_image.isSet()) {
        obj.insert(QString("logoImage"), ::OpenAPI::toJsonValue(m_logo_image));
    }
    if (m_mission_statement_isSet) {
        obj.insert(QString("missionStatement"), ::OpenAPI::toJsonValue(m_mission_statement));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_id_isSet) {
        obj.insert(QString("registrationId"), ::OpenAPI::toJsonValue(m_registration_id));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAICharityOrg::getCharityOrgId() const {
    return m_charity_org_id;
}
void OAICharityOrg::setCharityOrgId(const QString &charity_org_id) {
    m_charity_org_id = charity_org_id;
    m_charity_org_id_isSet = true;
}

bool OAICharityOrg::is_charity_org_id_Set() const{
    return m_charity_org_id_isSet;
}

bool OAICharityOrg::is_charity_org_id_Valid() const{
    return m_charity_org_id_isValid;
}

QString OAICharityOrg::getDescription() const {
    return m_description;
}
void OAICharityOrg::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICharityOrg::is_description_Set() const{
    return m_description_isSet;
}

bool OAICharityOrg::is_description_Valid() const{
    return m_description_isValid;
}

OAILocation OAICharityOrg::getLocation() const {
    return m_location;
}
void OAICharityOrg::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICharityOrg::is_location_Set() const{
    return m_location_isSet;
}

bool OAICharityOrg::is_location_Valid() const{
    return m_location_isValid;
}

OAIImage OAICharityOrg::getLogoImage() const {
    return m_logo_image;
}
void OAICharityOrg::setLogoImage(const OAIImage &logo_image) {
    m_logo_image = logo_image;
    m_logo_image_isSet = true;
}

bool OAICharityOrg::is_logo_image_Set() const{
    return m_logo_image_isSet;
}

bool OAICharityOrg::is_logo_image_Valid() const{
    return m_logo_image_isValid;
}

QString OAICharityOrg::getMissionStatement() const {
    return m_mission_statement;
}
void OAICharityOrg::setMissionStatement(const QString &mission_statement) {
    m_mission_statement = mission_statement;
    m_mission_statement_isSet = true;
}

bool OAICharityOrg::is_mission_statement_Set() const{
    return m_mission_statement_isSet;
}

bool OAICharityOrg::is_mission_statement_Valid() const{
    return m_mission_statement_isValid;
}

QString OAICharityOrg::getName() const {
    return m_name;
}
void OAICharityOrg::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICharityOrg::is_name_Set() const{
    return m_name_isSet;
}

bool OAICharityOrg::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICharityOrg::getRegistrationId() const {
    return m_registration_id;
}
void OAICharityOrg::setRegistrationId(const QString &registration_id) {
    m_registration_id = registration_id;
    m_registration_id_isSet = true;
}

bool OAICharityOrg::is_registration_id_Set() const{
    return m_registration_id_isSet;
}

bool OAICharityOrg::is_registration_id_Valid() const{
    return m_registration_id_isValid;
}

QString OAICharityOrg::getWebsite() const {
    return m_website;
}
void OAICharityOrg::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICharityOrg::is_website_Set() const{
    return m_website_isSet;
}

bool OAICharityOrg::is_website_Valid() const{
    return m_website_isValid;
}

bool OAICharityOrg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charity_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICharityOrg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
