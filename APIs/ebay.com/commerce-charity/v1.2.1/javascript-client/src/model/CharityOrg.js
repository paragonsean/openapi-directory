/**
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import Location from './Location';

/**
 * The CharityOrg model module.
 * @module model/CharityOrg
 * @version v1.2.1
 */
class CharityOrg {
    /**
     * Constructs a new <code>CharityOrg</code>.
     * The full location, ID, logo and other details of the charity organization.
     * @alias module:model/CharityOrg
     */
    constructor() { 
        
        CharityOrg.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CharityOrg</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharityOrg} obj Optional instance to populate.
     * @return {module:model/CharityOrg} The populated <code>CharityOrg</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharityOrg();

            if (data.hasOwnProperty('charityOrgId')) {
                obj['charityOrgId'] = ApiClient.convertToType(data['charityOrgId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('logoImage')) {
                obj['logoImage'] = Image.constructFromObject(data['logoImage']);
            }
            if (data.hasOwnProperty('missionStatement')) {
                obj['missionStatement'] = ApiClient.convertToType(data['missionStatement'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('registrationId')) {
                obj['registrationId'] = ApiClient.convertToType(data['registrationId'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharityOrg</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharityOrg</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['charityOrgId'] && !(typeof data['charityOrgId'] === 'string' || data['charityOrgId'] instanceof String)) {
            throw new Error("Expected the field `charityOrgId` to be a primitive type in the JSON string but got " + data['charityOrgId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // validate the optional field `logoImage`
        if (data['logoImage']) { // data not null
          Image.validateJSON(data['logoImage']);
        }
        // ensure the json data is a string
        if (data['missionStatement'] && !(typeof data['missionStatement'] === 'string' || data['missionStatement'] instanceof String)) {
            throw new Error("Expected the field `missionStatement` to be a primitive type in the JSON string but got " + data['missionStatement']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['registrationId'] && !(typeof data['registrationId'] === 'string' || data['registrationId'] instanceof String)) {
            throw new Error("Expected the field `registrationId` to be a primitive type in the JSON string but got " + data['registrationId']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * The ID of the charitable organization.
 * @member {String} charityOrgId
 */
CharityOrg.prototype['charityOrgId'] = undefined;

/**
 * The description of the charitable organization.
 * @member {String} description
 */
CharityOrg.prototype['description'] = undefined;

/**
 * @member {module:model/Location} location
 */
CharityOrg.prototype['location'] = undefined;

/**
 * @member {module:model/Image} logoImage
 */
CharityOrg.prototype['logoImage'] = undefined;

/**
 * The mission statement of the charitable organization.
 * @member {String} missionStatement
 */
CharityOrg.prototype['missionStatement'] = undefined;

/**
 * The name of the charitable organization.
 * @member {String} name
 */
CharityOrg.prototype['name'] = undefined;

/**
 * The registration ID for the charitable organization.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> For the US marketplace, this is the EIN.</span>
 * @member {String} registrationId
 */
CharityOrg.prototype['registrationId'] = undefined;

/**
 * The link to the website for the charitable organization.
 * @member {String} website
 */
CharityOrg.prototype['website'] = undefined;






export default CharityOrg;

