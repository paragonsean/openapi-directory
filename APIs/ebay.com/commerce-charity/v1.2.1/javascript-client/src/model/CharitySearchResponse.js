/**
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CharityOrg from './CharityOrg';

/**
 * The CharitySearchResponse model module.
 * @module model/CharitySearchResponse
 * @version v1.2.1
 */
class CharitySearchResponse {
    /**
     * Constructs a new <code>CharitySearchResponse</code>.
     * A single set of search results, with information for accessing other sets.
     * @alias module:model/CharitySearchResponse
     */
    constructor() { 
        
        CharitySearchResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CharitySearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharitySearchResponse} obj Optional instance to populate.
     * @return {module:model/CharitySearchResponse} The populated <code>CharitySearchResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharitySearchResponse();

            if (data.hasOwnProperty('charityOrgs')) {
                obj['charityOrgs'] = ApiClient.convertToType(data['charityOrgs'], [CharityOrg]);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('prev')) {
                obj['prev'] = ApiClient.convertToType(data['prev'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharitySearchResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharitySearchResponse</code>.
     */
    static validateJSON(data) {
        if (data['charityOrgs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['charityOrgs'])) {
                throw new Error("Expected the field `charityOrgs` to be an array in the JSON data but got " + data['charityOrgs']);
            }
            // validate the optional field `charityOrgs` (array)
            for (const item of data['charityOrgs']) {
                CharityOrg.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['prev'] && !(typeof data['prev'] === 'string' || data['prev'] instanceof String)) {
            throw new Error("Expected the field `prev` to be a primitive type in the JSON string but got " + data['prev']);
        }

        return true;
    }


}



/**
 * The list of charitable organizations that match the search criteria.
 * @member {Array.<module:model/CharityOrg>} charityOrgs
 */
CharitySearchResponse.prototype['charityOrgs'] = undefined;

/**
 * The relative path to the current set of results.
 * @member {String} href
 */
CharitySearchResponse.prototype['href'] = undefined;

/**
 * The number of items, from the result set, returned in a single page.<br /><br /><b>Valid Values:</b> <code>1-100</code><br /><br /><b>Default:</b> <code>20</code>
 * @member {Number} limit
 */
CharitySearchResponse.prototype['limit'] = undefined;

/**
 * The relative path to the next set of results.
 * @member {String} next
 */
CharitySearchResponse.prototype['next'] = undefined;

/**
 * The number of items that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.<br /><br /><b>Valid Values:</b> <code>0-10,000</code><br /><br /><b>Default:</b> <code>0</code>
 * @member {Number} offset
 */
CharitySearchResponse.prototype['offset'] = undefined;

/**
 * The relative path to the previous set of results.
 * @member {String} prev
 */
CharitySearchResponse.prototype['prev'] = undefined;

/**
 * The total number of matches for the search criteria.
 * @member {Number} total
 */
CharitySearchResponse.prototype['total'] = undefined;






export default CharitySearchResponse;

