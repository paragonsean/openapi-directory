/**
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CharityOrg from '../model/CharityOrg';
import CharitySearchResponse from '../model/CharitySearchResponse';

/**
* CharityOrg service.
* @module api/CharityOrgApi
* @version v1.2.1
*/
export default class CharityOrgApi {

    /**
    * Constructs a new CharityOrgApi. 
    * @alias module:api/CharityOrgApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCharityOrg operation.
     * @callback module:api/CharityOrgApi~getCharityOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CharityOrg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This call is used to retrieve detailed information about supported charitable organizations. It allows users to retrieve the details for a specific charitable organization using its charity organization ID.
     * @param {String} charityOrgId The unique ID of the charitable organization.
     * @param {String} X_EBAY_C_MARKETPLACE_ID A header used to specify the eBay marketplace ID.<br /><br /><b>Valid Values:</b> <code>EBAY_GB</code> and <code>EBAY_US</code>
     * @param {module:api/CharityOrgApi~getCharityOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CharityOrg}
     */
    getCharityOrg(charityOrgId, X_EBAY_C_MARKETPLACE_ID, callback) {
      let postBody = null;
      // verify the required parameter 'charityOrgId' is set
      if (charityOrgId === undefined || charityOrgId === null) {
        throw new Error("Missing the required parameter 'charityOrgId' when calling getCharityOrg");
      }
      // verify the required parameter 'X_EBAY_C_MARKETPLACE_ID' is set
      if (X_EBAY_C_MARKETPLACE_ID === undefined || X_EBAY_C_MARKETPLACE_ID === null) {
        throw new Error("Missing the required parameter 'X_EBAY_C_MARKETPLACE_ID' when calling getCharityOrg");
      }

      let pathParams = {
        'charity_org_id': charityOrgId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-EBAY-C-MARKETPLACE-ID': X_EBAY_C_MARKETPLACE_ID
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CharityOrg;
      return this.apiClient.callApi(
        '/charity_org/{charity_org_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharityOrgs operation.
     * @callback module:api/CharityOrgApi~getCharityOrgsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CharitySearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This call is used to search for supported charitable organizations. It allows users to search for a specific charitable organization, or for multiple charitable organizations, from a particular charitable domain and/or geographical region, or by using search criteria.<br /><br />The call returns paginated search results containing the charitable organizations that match the specified criteria.
     * @param {String} X_EBAY_C_MARKETPLACE_ID A header used to specify the eBay marketplace ID.<br /><br /><b>Valid Values:</b> <code>EBAY_GB</code> and <code>EBAY_US</code>
     * @param {Object} opts Optional parameters
     * @param {String} [limit] The number of items, from the result set, returned in a single page.<br /><br /><b>Valid Values:</b> <code>1-100</code><br /><br /><b>Default:</b> <code>20</code>
     * @param {String} [offset] The number of items that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.<br /><br /><b>Valid Values:</b> <code>0-10,000</code><br /><br /><b>Default:</b> <code>0</code>
     * @param {String} [q] A query string that matches the keywords in name, mission statement, or description.
     * @param {String} [registrationIds] A comma-separated list of charitable organization registration IDs.<br /><br /><span class=\"tablenote\"><b>Note: </b>Do not specify this parameter for query-based searches. Specify either the <b>q</b> or <b>registration_ids</b> parameter, but not both.</span><br /><br /><b>Maximum Limit:</b> <code>20</code>
     * @param {module:api/CharityOrgApi~getCharityOrgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CharitySearchResponse}
     */
    getCharityOrgs(X_EBAY_C_MARKETPLACE_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'X_EBAY_C_MARKETPLACE_ID' is set
      if (X_EBAY_C_MARKETPLACE_ID === undefined || X_EBAY_C_MARKETPLACE_ID === null) {
        throw new Error("Missing the required parameter 'X_EBAY_C_MARKETPLACE_ID' when calling getCharityOrgs");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'q': opts['q'],
        'registration_ids': opts['registrationIds']
      };
      let headerParams = {
        'X-EBAY-C-MARKETPLACE-ID': X_EBAY_C_MARKETPLACE_ID
      };
      let formParams = {
      };

      let authNames = ['api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CharitySearchResponse;
      return this.apiClient.callApi(
        '/charity_org', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
