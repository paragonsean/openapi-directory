/*
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CharityOrg;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single set of search results, with information for accessing other sets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.531765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CharitySearchResponse {
  public static final String SERIALIZED_NAME_CHARITY_ORGS = "charityOrgs";
  @SerializedName(SERIALIZED_NAME_CHARITY_ORGS)
  private List<CharityOrg> charityOrgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public CharitySearchResponse() {
  }

  public CharitySearchResponse charityOrgs(List<CharityOrg> charityOrgs) {
    this.charityOrgs = charityOrgs;
    return this;
  }

  public CharitySearchResponse addCharityOrgsItem(CharityOrg charityOrgsItem) {
    if (this.charityOrgs == null) {
      this.charityOrgs = new ArrayList<>();
    }
    this.charityOrgs.add(charityOrgsItem);
    return this;
  }

  /**
   * The list of charitable organizations that match the search criteria.
   * @return charityOrgs
   */
  @javax.annotation.Nullable
  public List<CharityOrg> getCharityOrgs() {
    return charityOrgs;
  }

  public void setCharityOrgs(List<CharityOrg> charityOrgs) {
    this.charityOrgs = charityOrgs;
  }


  public CharitySearchResponse href(String href) {
    this.href = href;
    return this;
  }

  /**
   * The relative path to the current set of results.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public CharitySearchResponse limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of items, from the result set, returned in a single page.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid Values:&lt;/b&gt; &lt;code&gt;1-100&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;20&lt;/code&gt;
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public CharitySearchResponse next(String next) {
    this.next = next;
    return this;
  }

  /**
   * The relative path to the next set of results.
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public CharitySearchResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of items that will be skipped in the result set. This is used with the &lt;b&gt;limit&lt;/b&gt; field to control the pagination of the output.&lt;br /&gt;&lt;br /&gt;For example, if the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;0&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 1 through 10 from the list of items returned. If the &lt;b&gt;offset&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt; and the &lt;b&gt;limit&lt;/b&gt; is set to &lt;code&gt;10&lt;/code&gt;, the method will retrieve items 11 through 20 from the list of items returned.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid Values:&lt;/b&gt; &lt;code&gt;0-10,000&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;0&lt;/code&gt;
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public CharitySearchResponse prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * The relative path to the previous set of results.
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public CharitySearchResponse total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of matches for the search criteria.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharitySearchResponse charitySearchResponse = (CharitySearchResponse) o;
    return Objects.equals(this.charityOrgs, charitySearchResponse.charityOrgs) &&
        Objects.equals(this.href, charitySearchResponse.href) &&
        Objects.equals(this.limit, charitySearchResponse.limit) &&
        Objects.equals(this.next, charitySearchResponse.next) &&
        Objects.equals(this.offset, charitySearchResponse.offset) &&
        Objects.equals(this.prev, charitySearchResponse.prev) &&
        Objects.equals(this.total, charitySearchResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charityOrgs, href, limit, next, offset, prev, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharitySearchResponse {\n");
    sb.append("    charityOrgs: ").append(toIndentedString(charityOrgs)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charityOrgs");
    openapiFields.add("href");
    openapiFields.add("limit");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("prev");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CharitySearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CharitySearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CharitySearchResponse is not found in the empty JSON string", CharitySearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CharitySearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CharitySearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("charityOrgs") != null && !jsonObj.get("charityOrgs").isJsonNull()) {
        JsonArray jsonArraycharityOrgs = jsonObj.getAsJsonArray("charityOrgs");
        if (jsonArraycharityOrgs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("charityOrgs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `charityOrgs` to be an array in the JSON string but got `%s`", jsonObj.get("charityOrgs").toString()));
          }

          // validate the optional field `charityOrgs` (array)
          for (int i = 0; i < jsonArraycharityOrgs.size(); i++) {
            CharityOrg.validateJsonElement(jsonArraycharityOrgs.get(i));
          };
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CharitySearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CharitySearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CharitySearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CharitySearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CharitySearchResponse>() {
           @Override
           public void write(JsonWriter out, CharitySearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CharitySearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CharitySearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CharitySearchResponse
   * @throws IOException if the JSON string is invalid with respect to CharitySearchResponse
   */
  public static CharitySearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CharitySearchResponse.class);
  }

  /**
   * Convert an instance of CharitySearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

