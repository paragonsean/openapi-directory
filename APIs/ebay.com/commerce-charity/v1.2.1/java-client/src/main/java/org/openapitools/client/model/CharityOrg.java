/*
 * Charity API
 * The Charity API allows third-party developers to search for and access details on supported charitable organizations.
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The full location, ID, logo and other details of the charity organization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:48.531765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CharityOrg {
  public static final String SERIALIZED_NAME_CHARITY_ORG_ID = "charityOrgId";
  @SerializedName(SERIALIZED_NAME_CHARITY_ORG_ID)
  private String charityOrgId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_LOGO_IMAGE = "logoImage";
  @SerializedName(SERIALIZED_NAME_LOGO_IMAGE)
  private Image logoImage;

  public static final String SERIALIZED_NAME_MISSION_STATEMENT = "missionStatement";
  @SerializedName(SERIALIZED_NAME_MISSION_STATEMENT)
  private String missionStatement;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGISTRATION_ID = "registrationId";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ID)
  private String registrationId;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public CharityOrg() {
  }

  public CharityOrg charityOrgId(String charityOrgId) {
    this.charityOrgId = charityOrgId;
    return this;
  }

  /**
   * The ID of the charitable organization.
   * @return charityOrgId
   */
  @javax.annotation.Nullable
  public String getCharityOrgId() {
    return charityOrgId;
  }

  public void setCharityOrgId(String charityOrgId) {
    this.charityOrgId = charityOrgId;
  }


  public CharityOrg description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the charitable organization.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CharityOrg location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public CharityOrg logoImage(Image logoImage) {
    this.logoImage = logoImage;
    return this;
  }

  /**
   * Get logoImage
   * @return logoImage
   */
  @javax.annotation.Nullable
  public Image getLogoImage() {
    return logoImage;
  }

  public void setLogoImage(Image logoImage) {
    this.logoImage = logoImage;
  }


  public CharityOrg missionStatement(String missionStatement) {
    this.missionStatement = missionStatement;
    return this;
  }

  /**
   * The mission statement of the charitable organization.
   * @return missionStatement
   */
  @javax.annotation.Nullable
  public String getMissionStatement() {
    return missionStatement;
  }

  public void setMissionStatement(String missionStatement) {
    this.missionStatement = missionStatement;
  }


  public CharityOrg name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the charitable organization.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CharityOrg registrationId(String registrationId) {
    this.registrationId = registrationId;
    return this;
  }

  /**
   * The registration ID for the charitable organization.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; For the US marketplace, this is the EIN.&lt;/span&gt;
   * @return registrationId
   */
  @javax.annotation.Nullable
  public String getRegistrationId() {
    return registrationId;
  }

  public void setRegistrationId(String registrationId) {
    this.registrationId = registrationId;
  }


  public CharityOrg website(String website) {
    this.website = website;
    return this;
  }

  /**
   * The link to the website for the charitable organization.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharityOrg charityOrg = (CharityOrg) o;
    return Objects.equals(this.charityOrgId, charityOrg.charityOrgId) &&
        Objects.equals(this.description, charityOrg.description) &&
        Objects.equals(this.location, charityOrg.location) &&
        Objects.equals(this.logoImage, charityOrg.logoImage) &&
        Objects.equals(this.missionStatement, charityOrg.missionStatement) &&
        Objects.equals(this.name, charityOrg.name) &&
        Objects.equals(this.registrationId, charityOrg.registrationId) &&
        Objects.equals(this.website, charityOrg.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charityOrgId, description, location, logoImage, missionStatement, name, registrationId, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharityOrg {\n");
    sb.append("    charityOrgId: ").append(toIndentedString(charityOrgId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    logoImage: ").append(toIndentedString(logoImage)).append("\n");
    sb.append("    missionStatement: ").append(toIndentedString(missionStatement)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registrationId: ").append(toIndentedString(registrationId)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charityOrgId");
    openapiFields.add("description");
    openapiFields.add("location");
    openapiFields.add("logoImage");
    openapiFields.add("missionStatement");
    openapiFields.add("name");
    openapiFields.add("registrationId");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CharityOrg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CharityOrg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CharityOrg is not found in the empty JSON string", CharityOrg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CharityOrg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CharityOrg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("charityOrgId") != null && !jsonObj.get("charityOrgId").isJsonNull()) && !jsonObj.get("charityOrgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charityOrgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charityOrgId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `logoImage`
      if (jsonObj.get("logoImage") != null && !jsonObj.get("logoImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("logoImage"));
      }
      if ((jsonObj.get("missionStatement") != null && !jsonObj.get("missionStatement").isJsonNull()) && !jsonObj.get("missionStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `missionStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("missionStatement").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("registrationId") != null && !jsonObj.get("registrationId").isJsonNull()) && !jsonObj.get("registrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationId").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CharityOrg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CharityOrg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CharityOrg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CharityOrg.class));

       return (TypeAdapter<T>) new TypeAdapter<CharityOrg>() {
           @Override
           public void write(JsonWriter out, CharityOrg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CharityOrg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CharityOrg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CharityOrg
   * @throws IOException if the JSON string is invalid with respect to CharityOrg
   */
  public static CharityOrg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CharityOrg.class);
  }

  /**
   * Convert an instance of CharityOrg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

