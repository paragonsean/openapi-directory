# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.charity_org import CharityOrg
from openapi_server import util


class CharitySearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charity_orgs: List[CharityOrg]=None, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """CharitySearchResponse - a model defined in OpenAPI

        :param charity_orgs: The charity_orgs of this CharitySearchResponse.
        :param href: The href of this CharitySearchResponse.
        :param limit: The limit of this CharitySearchResponse.
        :param next: The next of this CharitySearchResponse.
        :param offset: The offset of this CharitySearchResponse.
        :param prev: The prev of this CharitySearchResponse.
        :param total: The total of this CharitySearchResponse.
        """
        self.openapi_types = {
            'charity_orgs': List[CharityOrg],
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'charity_orgs': 'charityOrgs',
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._charity_orgs = charity_orgs
        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CharitySearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CharitySearchResponse of this CharitySearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charity_orgs(self):
        """Gets the charity_orgs of this CharitySearchResponse.

        The list of charitable organizations that match the search criteria.

        :return: The charity_orgs of this CharitySearchResponse.
        :rtype: List[CharityOrg]
        """
        return self._charity_orgs

    @charity_orgs.setter
    def charity_orgs(self, charity_orgs):
        """Sets the charity_orgs of this CharitySearchResponse.

        The list of charitable organizations that match the search criteria.

        :param charity_orgs: The charity_orgs of this CharitySearchResponse.
        :type charity_orgs: List[CharityOrg]
        """

        self._charity_orgs = charity_orgs

    @property
    def href(self):
        """Gets the href of this CharitySearchResponse.

        The relative path to the current set of results.

        :return: The href of this CharitySearchResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CharitySearchResponse.

        The relative path to the current set of results.

        :param href: The href of this CharitySearchResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this CharitySearchResponse.

        The number of items, from the result set, returned in a single page.<br /><br /><b>Valid Values:</b> <code>1-100</code><br /><br /><b>Default:</b> <code>20</code>

        :return: The limit of this CharitySearchResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CharitySearchResponse.

        The number of items, from the result set, returned in a single page.<br /><br /><b>Valid Values:</b> <code>1-100</code><br /><br /><b>Default:</b> <code>20</code>

        :param limit: The limit of this CharitySearchResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this CharitySearchResponse.

        The relative path to the next set of results.

        :return: The next of this CharitySearchResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this CharitySearchResponse.

        The relative path to the next set of results.

        :param next: The next of this CharitySearchResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this CharitySearchResponse.

        The number of items that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.<br /><br /><b>Valid Values:</b> <code>0-10,000</code><br /><br /><b>Default:</b> <code>0</code>

        :return: The offset of this CharitySearchResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this CharitySearchResponse.

        The number of items that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.<br /><br /><b>Valid Values:</b> <code>0-10,000</code><br /><br /><b>Default:</b> <code>0</code>

        :param offset: The offset of this CharitySearchResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this CharitySearchResponse.

        The relative path to the previous set of results.

        :return: The prev of this CharitySearchResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this CharitySearchResponse.

        The relative path to the previous set of results.

        :param prev: The prev of this CharitySearchResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this CharitySearchResponse.

        The total number of matches for the search criteria.

        :return: The total of this CharitySearchResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CharitySearchResponse.

        The total number of matches for the search criteria.

        :param total: The total of this CharitySearchResponse.
        :type total: int
        """

        self._total = total
