/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesTaxJurisdictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesTaxJurisdictions::OAISalesTaxJurisdictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesTaxJurisdictions::OAISalesTaxJurisdictions() {
    this->initializeModel();
}

OAISalesTaxJurisdictions::~OAISalesTaxJurisdictions() {}

void OAISalesTaxJurisdictions::initializeModel() {

    m_sales_tax_jurisdictions_isSet = false;
    m_sales_tax_jurisdictions_isValid = false;
}

void OAISalesTaxJurisdictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesTaxJurisdictions::fromJsonObject(QJsonObject json) {

    m_sales_tax_jurisdictions_isValid = ::OpenAPI::fromJsonValue(m_sales_tax_jurisdictions, json[QString("salesTaxJurisdictions")]);
    m_sales_tax_jurisdictions_isSet = !json[QString("salesTaxJurisdictions")].isNull() && m_sales_tax_jurisdictions_isValid;
}

QString OAISalesTaxJurisdictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesTaxJurisdictions::asJsonObject() const {
    QJsonObject obj;
    if (m_sales_tax_jurisdictions.size() > 0) {
        obj.insert(QString("salesTaxJurisdictions"), ::OpenAPI::toJsonValue(m_sales_tax_jurisdictions));
    }
    return obj;
}

QList<OAISalesTaxJurisdiction> OAISalesTaxJurisdictions::getSalesTaxJurisdictions() const {
    return m_sales_tax_jurisdictions;
}
void OAISalesTaxJurisdictions::setSalesTaxJurisdictions(const QList<OAISalesTaxJurisdiction> &sales_tax_jurisdictions) {
    m_sales_tax_jurisdictions = sales_tax_jurisdictions;
    m_sales_tax_jurisdictions_isSet = true;
}

bool OAISalesTaxJurisdictions::is_sales_tax_jurisdictions_Set() const{
    return m_sales_tax_jurisdictions_isSet;
}

bool OAISalesTaxJurisdictions::is_sales_tax_jurisdictions_Valid() const{
    return m_sales_tax_jurisdictions_isValid;
}

bool OAISalesTaxJurisdictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sales_tax_jurisdictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesTaxJurisdictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
