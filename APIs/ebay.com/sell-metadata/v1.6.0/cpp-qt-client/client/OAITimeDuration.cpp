/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeDuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeDuration::OAITimeDuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeDuration::OAITimeDuration() {
    this->initializeModel();
}

OAITimeDuration::~OAITimeDuration() {}

void OAITimeDuration::initializeModel() {

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITimeDuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeDuration::fromJsonObject(QJsonObject json) {

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITimeDuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeDuration::asJsonObject() const {
    QJsonObject obj;
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAITimeDuration::getUnit() const {
    return m_unit;
}
void OAITimeDuration::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAITimeDuration::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAITimeDuration::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAITimeDuration::getValue() const {
    return m_value;
}
void OAITimeDuration::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITimeDuration::is_value_Set() const{
    return m_value_isSet;
}

bool OAITimeDuration::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITimeDuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeDuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
