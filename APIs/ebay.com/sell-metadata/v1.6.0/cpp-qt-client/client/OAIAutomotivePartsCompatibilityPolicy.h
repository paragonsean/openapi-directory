/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAutomotivePartsCompatibilityPolicy.h
 *
 * 
 */

#ifndef OAIAutomotivePartsCompatibilityPolicy_H
#define OAIAutomotivePartsCompatibilityPolicy_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAutomotivePartsCompatibilityPolicy : public OAIObject {
public:
    OAIAutomotivePartsCompatibilityPolicy();
    OAIAutomotivePartsCompatibilityPolicy(QString json);
    ~OAIAutomotivePartsCompatibilityPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategoryId() const;
    void setCategoryId(const QString &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    QString getCategoryTreeId() const;
    void setCategoryTreeId(const QString &category_tree_id);
    bool is_category_tree_id_Set() const;
    bool is_category_tree_id_Valid() const;

    QString getCompatibilityBasedOn() const;
    void setCompatibilityBasedOn(const QString &compatibility_based_on);
    bool is_compatibility_based_on_Set() const;
    bool is_compatibility_based_on_Valid() const;

    QList<QString> getCompatibleVehicleTypes() const;
    void setCompatibleVehicleTypes(const QList<QString> &compatible_vehicle_types);
    bool is_compatible_vehicle_types_Set() const;
    bool is_compatible_vehicle_types_Valid() const;

    qint32 getMaxNumberOfCompatibleVehicles() const;
    void setMaxNumberOfCompatibleVehicles(const qint32 &max_number_of_compatible_vehicles);
    bool is_max_number_of_compatible_vehicles_Set() const;
    bool is_max_number_of_compatible_vehicles_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    QString m_category_tree_id;
    bool m_category_tree_id_isSet;
    bool m_category_tree_id_isValid;

    QString m_compatibility_based_on;
    bool m_compatibility_based_on_isSet;
    bool m_compatibility_based_on_isValid;

    QList<QString> m_compatible_vehicle_types;
    bool m_compatible_vehicle_types_isSet;
    bool m_compatible_vehicle_types_isValid;

    qint32 m_max_number_of_compatible_vehicles;
    bool m_max_number_of_compatible_vehicles_isSet;
    bool m_max_number_of_compatible_vehicles_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAutomotivePartsCompatibilityPolicy)

#endif // OAIAutomotivePartsCompatibilityPolicy_H
