/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedProducerResponsibilityPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedProducerResponsibilityPolicy::OAIExtendedProducerResponsibilityPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedProducerResponsibilityPolicy::OAIExtendedProducerResponsibilityPolicy() {
    this->initializeModel();
}

OAIExtendedProducerResponsibilityPolicy::~OAIExtendedProducerResponsibilityPolicy() {}

void OAIExtendedProducerResponsibilityPolicy::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_supported_attributes_isSet = false;
    m_supported_attributes_isValid = false;
}

void OAIExtendedProducerResponsibilityPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedProducerResponsibilityPolicy::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_supported_attributes_isValid = ::OpenAPI::fromJsonValue(m_supported_attributes, json[QString("supportedAttributes")]);
    m_supported_attributes_isSet = !json[QString("supportedAttributes")].isNull() && m_supported_attributes_isValid;
}

QString OAIExtendedProducerResponsibilityPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedProducerResponsibilityPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_supported_attributes.size() > 0) {
        obj.insert(QString("supportedAttributes"), ::OpenAPI::toJsonValue(m_supported_attributes));
    }
    return obj;
}

QString OAIExtendedProducerResponsibilityPolicy::getCategoryId() const {
    return m_category_id;
}
void OAIExtendedProducerResponsibilityPolicy::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIExtendedProducerResponsibilityPolicy::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIExtendedProducerResponsibilityPolicy::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIExtendedProducerResponsibilityPolicy::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAIExtendedProducerResponsibilityPolicy::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAIExtendedProducerResponsibilityPolicy::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAIExtendedProducerResponsibilityPolicy::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

QList<OAIExtendedProducerResponsibility> OAIExtendedProducerResponsibilityPolicy::getSupportedAttributes() const {
    return m_supported_attributes;
}
void OAIExtendedProducerResponsibilityPolicy::setSupportedAttributes(const QList<OAIExtendedProducerResponsibility> &supported_attributes) {
    m_supported_attributes = supported_attributes;
    m_supported_attributes_isSet = true;
}

bool OAIExtendedProducerResponsibilityPolicy::is_supported_attributes_Set() const{
    return m_supported_attributes_isSet;
}

bool OAIExtendedProducerResponsibilityPolicy::is_supported_attributes_Valid() const{
    return m_supported_attributes_isValid;
}

bool OAIExtendedProducerResponsibilityPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedProducerResponsibilityPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
