/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemConditionPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemConditionPolicy::OAIItemConditionPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemConditionPolicy::OAIItemConditionPolicy() {
    this->initializeModel();
}

OAIItemConditionPolicy::~OAIItemConditionPolicy() {}

void OAIItemConditionPolicy::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_item_condition_required_isSet = false;
    m_item_condition_required_isValid = false;

    m_item_conditions_isSet = false;
    m_item_conditions_isValid = false;
}

void OAIItemConditionPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemConditionPolicy::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_item_condition_required_isValid = ::OpenAPI::fromJsonValue(m_item_condition_required, json[QString("itemConditionRequired")]);
    m_item_condition_required_isSet = !json[QString("itemConditionRequired")].isNull() && m_item_condition_required_isValid;

    m_item_conditions_isValid = ::OpenAPI::fromJsonValue(m_item_conditions, json[QString("itemConditions")]);
    m_item_conditions_isSet = !json[QString("itemConditions")].isNull() && m_item_conditions_isValid;
}

QString OAIItemConditionPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemConditionPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_item_condition_required_isSet) {
        obj.insert(QString("itemConditionRequired"), ::OpenAPI::toJsonValue(m_item_condition_required));
    }
    if (m_item_conditions.size() > 0) {
        obj.insert(QString("itemConditions"), ::OpenAPI::toJsonValue(m_item_conditions));
    }
    return obj;
}

QString OAIItemConditionPolicy::getCategoryId() const {
    return m_category_id;
}
void OAIItemConditionPolicy::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIItemConditionPolicy::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIItemConditionPolicy::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIItemConditionPolicy::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAIItemConditionPolicy::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAIItemConditionPolicy::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAIItemConditionPolicy::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

bool OAIItemConditionPolicy::isItemConditionRequired() const {
    return m_item_condition_required;
}
void OAIItemConditionPolicy::setItemConditionRequired(const bool &item_condition_required) {
    m_item_condition_required = item_condition_required;
    m_item_condition_required_isSet = true;
}

bool OAIItemConditionPolicy::is_item_condition_required_Set() const{
    return m_item_condition_required_isSet;
}

bool OAIItemConditionPolicy::is_item_condition_required_Valid() const{
    return m_item_condition_required_isValid;
}

QList<OAIItemCondition> OAIItemConditionPolicy::getItemConditions() const {
    return m_item_conditions;
}
void OAIItemConditionPolicy::setItemConditions(const QList<OAIItemCondition> &item_conditions) {
    m_item_conditions = item_conditions;
    m_item_conditions_isSet = true;
}

bool OAIItemConditionPolicy::is_item_conditions_Set() const{
    return m_item_conditions_isSet;
}

bool OAIItemConditionPolicy::is_item_conditions_Valid() const{
    return m_item_conditions_isValid;
}

bool OAIItemConditionPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_condition_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemConditionPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
