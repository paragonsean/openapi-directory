/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingStructurePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingStructurePolicy::OAIListingStructurePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingStructurePolicy::OAIListingStructurePolicy() {
    this->initializeModel();
}

OAIListingStructurePolicy::~OAIListingStructurePolicy() {}

void OAIListingStructurePolicy::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_variations_supported_isSet = false;
    m_variations_supported_isValid = false;
}

void OAIListingStructurePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingStructurePolicy::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_variations_supported_isValid = ::OpenAPI::fromJsonValue(m_variations_supported, json[QString("variationsSupported")]);
    m_variations_supported_isSet = !json[QString("variationsSupported")].isNull() && m_variations_supported_isValid;
}

QString OAIListingStructurePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingStructurePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_variations_supported_isSet) {
        obj.insert(QString("variationsSupported"), ::OpenAPI::toJsonValue(m_variations_supported));
    }
    return obj;
}

QString OAIListingStructurePolicy::getCategoryId() const {
    return m_category_id;
}
void OAIListingStructurePolicy::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIListingStructurePolicy::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIListingStructurePolicy::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIListingStructurePolicy::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAIListingStructurePolicy::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAIListingStructurePolicy::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAIListingStructurePolicy::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

bool OAIListingStructurePolicy::isVariationsSupported() const {
    return m_variations_supported;
}
void OAIListingStructurePolicy::setVariationsSupported(const bool &variations_supported) {
    m_variations_supported = variations_supported;
    m_variations_supported_isSet = true;
}

bool OAIListingStructurePolicy::is_variations_supported_Set() const{
    return m_variations_supported_isSet;
}

bool OAIListingStructurePolicy::is_variations_supported_Valid() const{
    return m_variations_supported_isValid;
}

bool OAIListingStructurePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingStructurePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
