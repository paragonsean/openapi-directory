/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingStructurePolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingStructurePolicyResponse::OAIListingStructurePolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingStructurePolicyResponse::OAIListingStructurePolicyResponse() {
    this->initializeModel();
}

OAIListingStructurePolicyResponse::~OAIListingStructurePolicyResponse() {}

void OAIListingStructurePolicyResponse::initializeModel() {

    m_listing_structure_policies_isSet = false;
    m_listing_structure_policies_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIListingStructurePolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingStructurePolicyResponse::fromJsonObject(QJsonObject json) {

    m_listing_structure_policies_isValid = ::OpenAPI::fromJsonValue(m_listing_structure_policies, json[QString("listingStructurePolicies")]);
    m_listing_structure_policies_isSet = !json[QString("listingStructurePolicies")].isNull() && m_listing_structure_policies_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIListingStructurePolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingStructurePolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_listing_structure_policies.size() > 0) {
        obj.insert(QString("listingStructurePolicies"), ::OpenAPI::toJsonValue(m_listing_structure_policies));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIListingStructurePolicy> OAIListingStructurePolicyResponse::getListingStructurePolicies() const {
    return m_listing_structure_policies;
}
void OAIListingStructurePolicyResponse::setListingStructurePolicies(const QList<OAIListingStructurePolicy> &listing_structure_policies) {
    m_listing_structure_policies = listing_structure_policies;
    m_listing_structure_policies_isSet = true;
}

bool OAIListingStructurePolicyResponse::is_listing_structure_policies_Set() const{
    return m_listing_structure_policies_isSet;
}

bool OAIListingStructurePolicyResponse::is_listing_structure_policies_Valid() const{
    return m_listing_structure_policies_isValid;
}

QList<OAIError> OAIListingStructurePolicyResponse::getWarnings() const {
    return m_warnings;
}
void OAIListingStructurePolicyResponse::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIListingStructurePolicyResponse::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIListingStructurePolicyResponse::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIListingStructurePolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_listing_structure_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingStructurePolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
