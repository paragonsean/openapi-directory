/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignalWord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignalWord::OAISignalWord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignalWord::OAISignalWord() {
    this->initializeModel();
}

OAISignalWord::~OAISignalWord() {}

void OAISignalWord::initializeModel() {

    m_signal_word_description_isSet = false;
    m_signal_word_description_isValid = false;

    m_signal_word_id_isSet = false;
    m_signal_word_id_isValid = false;
}

void OAISignalWord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignalWord::fromJsonObject(QJsonObject json) {

    m_signal_word_description_isValid = ::OpenAPI::fromJsonValue(m_signal_word_description, json[QString("signalWordDescription")]);
    m_signal_word_description_isSet = !json[QString("signalWordDescription")].isNull() && m_signal_word_description_isValid;

    m_signal_word_id_isValid = ::OpenAPI::fromJsonValue(m_signal_word_id, json[QString("signalWordId")]);
    m_signal_word_id_isSet = !json[QString("signalWordId")].isNull() && m_signal_word_id_isValid;
}

QString OAISignalWord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignalWord::asJsonObject() const {
    QJsonObject obj;
    if (m_signal_word_description_isSet) {
        obj.insert(QString("signalWordDescription"), ::OpenAPI::toJsonValue(m_signal_word_description));
    }
    if (m_signal_word_id_isSet) {
        obj.insert(QString("signalWordId"), ::OpenAPI::toJsonValue(m_signal_word_id));
    }
    return obj;
}

QString OAISignalWord::getSignalWordDescription() const {
    return m_signal_word_description;
}
void OAISignalWord::setSignalWordDescription(const QString &signal_word_description) {
    m_signal_word_description = signal_word_description;
    m_signal_word_description_isSet = true;
}

bool OAISignalWord::is_signal_word_description_Set() const{
    return m_signal_word_description_isSet;
}

bool OAISignalWord::is_signal_word_description_Valid() const{
    return m_signal_word_description_isValid;
}

QString OAISignalWord::getSignalWordId() const {
    return m_signal_word_id;
}
void OAISignalWord::setSignalWordId(const QString &signal_word_id) {
    m_signal_word_id = signal_word_id;
    m_signal_word_id_isSet = true;
}

bool OAISignalWord::is_signal_word_id_Set() const{
    return m_signal_word_id_isSet;
}

bool OAISignalWord::is_signal_word_id_Valid() const{
    return m_signal_word_id_isValid;
}

bool OAISignalWord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signal_word_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_word_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignalWord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
