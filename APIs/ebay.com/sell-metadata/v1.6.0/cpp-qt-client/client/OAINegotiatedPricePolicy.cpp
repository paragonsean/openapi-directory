/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiatedPricePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiatedPricePolicy::OAINegotiatedPricePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiatedPricePolicy::OAINegotiatedPricePolicy() {
    this->initializeModel();
}

OAINegotiatedPricePolicy::~OAINegotiatedPricePolicy() {}

void OAINegotiatedPricePolicy::initializeModel() {

    m_best_offer_auto_accept_enabled_isSet = false;
    m_best_offer_auto_accept_enabled_isValid = false;

    m_best_offer_auto_decline_enabled_isSet = false;
    m_best_offer_auto_decline_enabled_isValid = false;

    m_best_offer_counter_enabled_isSet = false;
    m_best_offer_counter_enabled_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;
}

void OAINegotiatedPricePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiatedPricePolicy::fromJsonObject(QJsonObject json) {

    m_best_offer_auto_accept_enabled_isValid = ::OpenAPI::fromJsonValue(m_best_offer_auto_accept_enabled, json[QString("bestOfferAutoAcceptEnabled")]);
    m_best_offer_auto_accept_enabled_isSet = !json[QString("bestOfferAutoAcceptEnabled")].isNull() && m_best_offer_auto_accept_enabled_isValid;

    m_best_offer_auto_decline_enabled_isValid = ::OpenAPI::fromJsonValue(m_best_offer_auto_decline_enabled, json[QString("bestOfferAutoDeclineEnabled")]);
    m_best_offer_auto_decline_enabled_isSet = !json[QString("bestOfferAutoDeclineEnabled")].isNull() && m_best_offer_auto_decline_enabled_isValid;

    m_best_offer_counter_enabled_isValid = ::OpenAPI::fromJsonValue(m_best_offer_counter_enabled, json[QString("bestOfferCounterEnabled")]);
    m_best_offer_counter_enabled_isSet = !json[QString("bestOfferCounterEnabled")].isNull() && m_best_offer_counter_enabled_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;
}

QString OAINegotiatedPricePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiatedPricePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_best_offer_auto_accept_enabled_isSet) {
        obj.insert(QString("bestOfferAutoAcceptEnabled"), ::OpenAPI::toJsonValue(m_best_offer_auto_accept_enabled));
    }
    if (m_best_offer_auto_decline_enabled_isSet) {
        obj.insert(QString("bestOfferAutoDeclineEnabled"), ::OpenAPI::toJsonValue(m_best_offer_auto_decline_enabled));
    }
    if (m_best_offer_counter_enabled_isSet) {
        obj.insert(QString("bestOfferCounterEnabled"), ::OpenAPI::toJsonValue(m_best_offer_counter_enabled));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    return obj;
}

bool OAINegotiatedPricePolicy::isBestOfferAutoAcceptEnabled() const {
    return m_best_offer_auto_accept_enabled;
}
void OAINegotiatedPricePolicy::setBestOfferAutoAcceptEnabled(const bool &best_offer_auto_accept_enabled) {
    m_best_offer_auto_accept_enabled = best_offer_auto_accept_enabled;
    m_best_offer_auto_accept_enabled_isSet = true;
}

bool OAINegotiatedPricePolicy::is_best_offer_auto_accept_enabled_Set() const{
    return m_best_offer_auto_accept_enabled_isSet;
}

bool OAINegotiatedPricePolicy::is_best_offer_auto_accept_enabled_Valid() const{
    return m_best_offer_auto_accept_enabled_isValid;
}

bool OAINegotiatedPricePolicy::isBestOfferAutoDeclineEnabled() const {
    return m_best_offer_auto_decline_enabled;
}
void OAINegotiatedPricePolicy::setBestOfferAutoDeclineEnabled(const bool &best_offer_auto_decline_enabled) {
    m_best_offer_auto_decline_enabled = best_offer_auto_decline_enabled;
    m_best_offer_auto_decline_enabled_isSet = true;
}

bool OAINegotiatedPricePolicy::is_best_offer_auto_decline_enabled_Set() const{
    return m_best_offer_auto_decline_enabled_isSet;
}

bool OAINegotiatedPricePolicy::is_best_offer_auto_decline_enabled_Valid() const{
    return m_best_offer_auto_decline_enabled_isValid;
}

bool OAINegotiatedPricePolicy::isBestOfferCounterEnabled() const {
    return m_best_offer_counter_enabled;
}
void OAINegotiatedPricePolicy::setBestOfferCounterEnabled(const bool &best_offer_counter_enabled) {
    m_best_offer_counter_enabled = best_offer_counter_enabled;
    m_best_offer_counter_enabled_isSet = true;
}

bool OAINegotiatedPricePolicy::is_best_offer_counter_enabled_Set() const{
    return m_best_offer_counter_enabled_isSet;
}

bool OAINegotiatedPricePolicy::is_best_offer_counter_enabled_Valid() const{
    return m_best_offer_counter_enabled_isValid;
}

QString OAINegotiatedPricePolicy::getCategoryId() const {
    return m_category_id;
}
void OAINegotiatedPricePolicy::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAINegotiatedPricePolicy::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAINegotiatedPricePolicy::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAINegotiatedPricePolicy::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAINegotiatedPricePolicy::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAINegotiatedPricePolicy::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAINegotiatedPricePolicy::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

bool OAINegotiatedPricePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_offer_auto_accept_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_offer_auto_decline_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_offer_counter_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiatedPricePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
