/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPictogram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPictogram::OAIPictogram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPictogram::OAIPictogram() {
    this->initializeModel();
}

OAIPictogram::~OAIPictogram() {}

void OAIPictogram::initializeModel() {

    m_pictogram_description_isSet = false;
    m_pictogram_description_isValid = false;

    m_pictogram_id_isSet = false;
    m_pictogram_id_isValid = false;

    m_pictogram_url_isSet = false;
    m_pictogram_url_isValid = false;
}

void OAIPictogram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPictogram::fromJsonObject(QJsonObject json) {

    m_pictogram_description_isValid = ::OpenAPI::fromJsonValue(m_pictogram_description, json[QString("pictogramDescription")]);
    m_pictogram_description_isSet = !json[QString("pictogramDescription")].isNull() && m_pictogram_description_isValid;

    m_pictogram_id_isValid = ::OpenAPI::fromJsonValue(m_pictogram_id, json[QString("pictogramId")]);
    m_pictogram_id_isSet = !json[QString("pictogramId")].isNull() && m_pictogram_id_isValid;

    m_pictogram_url_isValid = ::OpenAPI::fromJsonValue(m_pictogram_url, json[QString("pictogramUrl")]);
    m_pictogram_url_isSet = !json[QString("pictogramUrl")].isNull() && m_pictogram_url_isValid;
}

QString OAIPictogram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPictogram::asJsonObject() const {
    QJsonObject obj;
    if (m_pictogram_description_isSet) {
        obj.insert(QString("pictogramDescription"), ::OpenAPI::toJsonValue(m_pictogram_description));
    }
    if (m_pictogram_id_isSet) {
        obj.insert(QString("pictogramId"), ::OpenAPI::toJsonValue(m_pictogram_id));
    }
    if (m_pictogram_url_isSet) {
        obj.insert(QString("pictogramUrl"), ::OpenAPI::toJsonValue(m_pictogram_url));
    }
    return obj;
}

QString OAIPictogram::getPictogramDescription() const {
    return m_pictogram_description;
}
void OAIPictogram::setPictogramDescription(const QString &pictogram_description) {
    m_pictogram_description = pictogram_description;
    m_pictogram_description_isSet = true;
}

bool OAIPictogram::is_pictogram_description_Set() const{
    return m_pictogram_description_isSet;
}

bool OAIPictogram::is_pictogram_description_Valid() const{
    return m_pictogram_description_isValid;
}

QString OAIPictogram::getPictogramId() const {
    return m_pictogram_id;
}
void OAIPictogram::setPictogramId(const QString &pictogram_id) {
    m_pictogram_id = pictogram_id;
    m_pictogram_id_isSet = true;
}

bool OAIPictogram::is_pictogram_id_Set() const{
    return m_pictogram_id_isSet;
}

bool OAIPictogram::is_pictogram_id_Valid() const{
    return m_pictogram_id_isValid;
}

QString OAIPictogram::getPictogramUrl() const {
    return m_pictogram_url;
}
void OAIPictogram::setPictogramUrl(const QString &pictogram_url) {
    m_pictogram_url = pictogram_url;
    m_pictogram_url_isSet = true;
}

bool OAIPictogram::is_pictogram_url_Set() const{
    return m_pictogram_url_isSet;
}

bool OAIPictogram::is_pictogram_url_Valid() const{
    return m_pictogram_url_isValid;
}

bool OAIPictogram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pictogram_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictogram_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictogram_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPictogram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
