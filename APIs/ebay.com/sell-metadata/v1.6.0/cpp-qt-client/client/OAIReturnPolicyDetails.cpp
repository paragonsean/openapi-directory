/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnPolicyDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnPolicyDetails::OAIReturnPolicyDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnPolicyDetails::OAIReturnPolicyDetails() {
    this->initializeModel();
}

OAIReturnPolicyDetails::~OAIReturnPolicyDetails() {}

void OAIReturnPolicyDetails::initializeModel() {

    m_policy_description_enabled_isSet = false;
    m_policy_description_enabled_isValid = false;

    m_refund_methods_isSet = false;
    m_refund_methods_isValid = false;

    m_return_methods_isSet = false;
    m_return_methods_isValid = false;

    m_return_periods_isSet = false;
    m_return_periods_isValid = false;

    m_return_shipping_cost_payers_isSet = false;
    m_return_shipping_cost_payers_isValid = false;

    m_returns_acceptance_enabled_isSet = false;
    m_returns_acceptance_enabled_isValid = false;
}

void OAIReturnPolicyDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnPolicyDetails::fromJsonObject(QJsonObject json) {

    m_policy_description_enabled_isValid = ::OpenAPI::fromJsonValue(m_policy_description_enabled, json[QString("policyDescriptionEnabled")]);
    m_policy_description_enabled_isSet = !json[QString("policyDescriptionEnabled")].isNull() && m_policy_description_enabled_isValid;

    m_refund_methods_isValid = ::OpenAPI::fromJsonValue(m_refund_methods, json[QString("refundMethods")]);
    m_refund_methods_isSet = !json[QString("refundMethods")].isNull() && m_refund_methods_isValid;

    m_return_methods_isValid = ::OpenAPI::fromJsonValue(m_return_methods, json[QString("returnMethods")]);
    m_return_methods_isSet = !json[QString("returnMethods")].isNull() && m_return_methods_isValid;

    m_return_periods_isValid = ::OpenAPI::fromJsonValue(m_return_periods, json[QString("returnPeriods")]);
    m_return_periods_isSet = !json[QString("returnPeriods")].isNull() && m_return_periods_isValid;

    m_return_shipping_cost_payers_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_cost_payers, json[QString("returnShippingCostPayers")]);
    m_return_shipping_cost_payers_isSet = !json[QString("returnShippingCostPayers")].isNull() && m_return_shipping_cost_payers_isValid;

    m_returns_acceptance_enabled_isValid = ::OpenAPI::fromJsonValue(m_returns_acceptance_enabled, json[QString("returnsAcceptanceEnabled")]);
    m_returns_acceptance_enabled_isSet = !json[QString("returnsAcceptanceEnabled")].isNull() && m_returns_acceptance_enabled_isValid;
}

QString OAIReturnPolicyDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnPolicyDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_description_enabled_isSet) {
        obj.insert(QString("policyDescriptionEnabled"), ::OpenAPI::toJsonValue(m_policy_description_enabled));
    }
    if (m_refund_methods.size() > 0) {
        obj.insert(QString("refundMethods"), ::OpenAPI::toJsonValue(m_refund_methods));
    }
    if (m_return_methods.size() > 0) {
        obj.insert(QString("returnMethods"), ::OpenAPI::toJsonValue(m_return_methods));
    }
    if (m_return_periods.size() > 0) {
        obj.insert(QString("returnPeriods"), ::OpenAPI::toJsonValue(m_return_periods));
    }
    if (m_return_shipping_cost_payers.size() > 0) {
        obj.insert(QString("returnShippingCostPayers"), ::OpenAPI::toJsonValue(m_return_shipping_cost_payers));
    }
    if (m_returns_acceptance_enabled_isSet) {
        obj.insert(QString("returnsAcceptanceEnabled"), ::OpenAPI::toJsonValue(m_returns_acceptance_enabled));
    }
    return obj;
}

bool OAIReturnPolicyDetails::isPolicyDescriptionEnabled() const {
    return m_policy_description_enabled;
}
void OAIReturnPolicyDetails::setPolicyDescriptionEnabled(const bool &policy_description_enabled) {
    m_policy_description_enabled = policy_description_enabled;
    m_policy_description_enabled_isSet = true;
}

bool OAIReturnPolicyDetails::is_policy_description_enabled_Set() const{
    return m_policy_description_enabled_isSet;
}

bool OAIReturnPolicyDetails::is_policy_description_enabled_Valid() const{
    return m_policy_description_enabled_isValid;
}

QList<QString> OAIReturnPolicyDetails::getRefundMethods() const {
    return m_refund_methods;
}
void OAIReturnPolicyDetails::setRefundMethods(const QList<QString> &refund_methods) {
    m_refund_methods = refund_methods;
    m_refund_methods_isSet = true;
}

bool OAIReturnPolicyDetails::is_refund_methods_Set() const{
    return m_refund_methods_isSet;
}

bool OAIReturnPolicyDetails::is_refund_methods_Valid() const{
    return m_refund_methods_isValid;
}

QList<QString> OAIReturnPolicyDetails::getReturnMethods() const {
    return m_return_methods;
}
void OAIReturnPolicyDetails::setReturnMethods(const QList<QString> &return_methods) {
    m_return_methods = return_methods;
    m_return_methods_isSet = true;
}

bool OAIReturnPolicyDetails::is_return_methods_Set() const{
    return m_return_methods_isSet;
}

bool OAIReturnPolicyDetails::is_return_methods_Valid() const{
    return m_return_methods_isValid;
}

QList<OAITimeDuration> OAIReturnPolicyDetails::getReturnPeriods() const {
    return m_return_periods;
}
void OAIReturnPolicyDetails::setReturnPeriods(const QList<OAITimeDuration> &return_periods) {
    m_return_periods = return_periods;
    m_return_periods_isSet = true;
}

bool OAIReturnPolicyDetails::is_return_periods_Set() const{
    return m_return_periods_isSet;
}

bool OAIReturnPolicyDetails::is_return_periods_Valid() const{
    return m_return_periods_isValid;
}

QList<QString> OAIReturnPolicyDetails::getReturnShippingCostPayers() const {
    return m_return_shipping_cost_payers;
}
void OAIReturnPolicyDetails::setReturnShippingCostPayers(const QList<QString> &return_shipping_cost_payers) {
    m_return_shipping_cost_payers = return_shipping_cost_payers;
    m_return_shipping_cost_payers_isSet = true;
}

bool OAIReturnPolicyDetails::is_return_shipping_cost_payers_Set() const{
    return m_return_shipping_cost_payers_isSet;
}

bool OAIReturnPolicyDetails::is_return_shipping_cost_payers_Valid() const{
    return m_return_shipping_cost_payers_isValid;
}

bool OAIReturnPolicyDetails::isReturnsAcceptanceEnabled() const {
    return m_returns_acceptance_enabled;
}
void OAIReturnPolicyDetails::setReturnsAcceptanceEnabled(const bool &returns_acceptance_enabled) {
    m_returns_acceptance_enabled = returns_acceptance_enabled;
    m_returns_acceptance_enabled_isSet = true;
}

bool OAIReturnPolicyDetails::is_returns_acceptance_enabled_Set() const{
    return m_returns_acceptance_enabled_isSet;
}

bool OAIReturnPolicyDetails::is_returns_acceptance_enabled_Valid() const{
    return m_returns_acceptance_enabled_isValid;
}

bool OAIReturnPolicyDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_description_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_cost_payers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_returns_acceptance_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnPolicyDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
