/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHazardousMaterialDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHazardousMaterialDetailsResponse::OAIHazardousMaterialDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHazardousMaterialDetailsResponse::OAIHazardousMaterialDetailsResponse() {
    this->initializeModel();
}

OAIHazardousMaterialDetailsResponse::~OAIHazardousMaterialDetailsResponse() {}

void OAIHazardousMaterialDetailsResponse::initializeModel() {

    m_pictograms_isSet = false;
    m_pictograms_isValid = false;

    m_signal_words_isSet = false;
    m_signal_words_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIHazardousMaterialDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHazardousMaterialDetailsResponse::fromJsonObject(QJsonObject json) {

    m_pictograms_isValid = ::OpenAPI::fromJsonValue(m_pictograms, json[QString("pictograms")]);
    m_pictograms_isSet = !json[QString("pictograms")].isNull() && m_pictograms_isValid;

    m_signal_words_isValid = ::OpenAPI::fromJsonValue(m_signal_words, json[QString("signalWords")]);
    m_signal_words_isSet = !json[QString("signalWords")].isNull() && m_signal_words_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIHazardousMaterialDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHazardousMaterialDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_pictograms.size() > 0) {
        obj.insert(QString("pictograms"), ::OpenAPI::toJsonValue(m_pictograms));
    }
    if (m_signal_words.size() > 0) {
        obj.insert(QString("signalWords"), ::OpenAPI::toJsonValue(m_signal_words));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

QList<OAIPictogram> OAIHazardousMaterialDetailsResponse::getPictograms() const {
    return m_pictograms;
}
void OAIHazardousMaterialDetailsResponse::setPictograms(const QList<OAIPictogram> &pictograms) {
    m_pictograms = pictograms;
    m_pictograms_isSet = true;
}

bool OAIHazardousMaterialDetailsResponse::is_pictograms_Set() const{
    return m_pictograms_isSet;
}

bool OAIHazardousMaterialDetailsResponse::is_pictograms_Valid() const{
    return m_pictograms_isValid;
}

QList<OAISignalWord> OAIHazardousMaterialDetailsResponse::getSignalWords() const {
    return m_signal_words;
}
void OAIHazardousMaterialDetailsResponse::setSignalWords(const QList<OAISignalWord> &signal_words) {
    m_signal_words = signal_words;
    m_signal_words_isSet = true;
}

bool OAIHazardousMaterialDetailsResponse::is_signal_words_Set() const{
    return m_signal_words_isSet;
}

bool OAIHazardousMaterialDetailsResponse::is_signal_words_Valid() const{
    return m_signal_words_isValid;
}

QList<OAIHazardStatement> OAIHazardousMaterialDetailsResponse::getStatements() const {
    return m_statements;
}
void OAIHazardousMaterialDetailsResponse::setStatements(const QList<OAIHazardStatement> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIHazardousMaterialDetailsResponse::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIHazardousMaterialDetailsResponse::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIHazardousMaterialDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pictograms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHazardousMaterialDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
