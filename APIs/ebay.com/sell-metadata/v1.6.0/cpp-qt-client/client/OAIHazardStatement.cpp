/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHazardStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHazardStatement::OAIHazardStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHazardStatement::OAIHazardStatement() {
    this->initializeModel();
}

OAIHazardStatement::~OAIHazardStatement() {}

void OAIHazardStatement::initializeModel() {

    m_statement_description_isSet = false;
    m_statement_description_isValid = false;

    m_statement_id_isSet = false;
    m_statement_id_isValid = false;
}

void OAIHazardStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHazardStatement::fromJsonObject(QJsonObject json) {

    m_statement_description_isValid = ::OpenAPI::fromJsonValue(m_statement_description, json[QString("statementDescription")]);
    m_statement_description_isSet = !json[QString("statementDescription")].isNull() && m_statement_description_isValid;

    m_statement_id_isValid = ::OpenAPI::fromJsonValue(m_statement_id, json[QString("statementId")]);
    m_statement_id_isSet = !json[QString("statementId")].isNull() && m_statement_id_isValid;
}

QString OAIHazardStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHazardStatement::asJsonObject() const {
    QJsonObject obj;
    if (m_statement_description_isSet) {
        obj.insert(QString("statementDescription"), ::OpenAPI::toJsonValue(m_statement_description));
    }
    if (m_statement_id_isSet) {
        obj.insert(QString("statementId"), ::OpenAPI::toJsonValue(m_statement_id));
    }
    return obj;
}

QString OAIHazardStatement::getStatementDescription() const {
    return m_statement_description;
}
void OAIHazardStatement::setStatementDescription(const QString &statement_description) {
    m_statement_description = statement_description;
    m_statement_description_isSet = true;
}

bool OAIHazardStatement::is_statement_description_Set() const{
    return m_statement_description_isSet;
}

bool OAIHazardStatement::is_statement_description_Valid() const{
    return m_statement_description_isValid;
}

QString OAIHazardStatement::getStatementId() const {
    return m_statement_id;
}
void OAIHazardStatement::setStatementId(const QString &statement_id) {
    m_statement_id = statement_id;
    m_statement_id_isSet = true;
}

bool OAIHazardStatement::is_statement_id_Set() const{
    return m_statement_id_isSet;
}

bool OAIHazardStatement::is_statement_id_Valid() const{
    return m_statement_id_isValid;
}

bool OAIHazardStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_statement_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHazardStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
