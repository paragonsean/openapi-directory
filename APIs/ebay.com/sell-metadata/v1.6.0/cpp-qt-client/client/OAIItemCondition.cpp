/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemCondition::OAIItemCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemCondition::OAIItemCondition() {
    this->initializeModel();
}

OAIItemCondition::~OAIItemCondition() {}

void OAIItemCondition::initializeModel() {

    m_condition_description_isSet = false;
    m_condition_description_isValid = false;

    m_condition_id_isSet = false;
    m_condition_id_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIItemCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemCondition::fromJsonObject(QJsonObject json) {

    m_condition_description_isValid = ::OpenAPI::fromJsonValue(m_condition_description, json[QString("conditionDescription")]);
    m_condition_description_isSet = !json[QString("conditionDescription")].isNull() && m_condition_description_isValid;

    m_condition_id_isValid = ::OpenAPI::fromJsonValue(m_condition_id, json[QString("conditionId")]);
    m_condition_id_isSet = !json[QString("conditionId")].isNull() && m_condition_id_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIItemCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_description_isSet) {
        obj.insert(QString("conditionDescription"), ::OpenAPI::toJsonValue(m_condition_description));
    }
    if (m_condition_id_isSet) {
        obj.insert(QString("conditionId"), ::OpenAPI::toJsonValue(m_condition_id));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIItemCondition::getConditionDescription() const {
    return m_condition_description;
}
void OAIItemCondition::setConditionDescription(const QString &condition_description) {
    m_condition_description = condition_description;
    m_condition_description_isSet = true;
}

bool OAIItemCondition::is_condition_description_Set() const{
    return m_condition_description_isSet;
}

bool OAIItemCondition::is_condition_description_Valid() const{
    return m_condition_description_isValid;
}

QString OAIItemCondition::getConditionId() const {
    return m_condition_id;
}
void OAIItemCondition::setConditionId(const QString &condition_id) {
    m_condition_id = condition_id;
    m_condition_id_isSet = true;
}

bool OAIItemCondition::is_condition_id_Set() const{
    return m_condition_id_isSet;
}

bool OAIItemCondition::is_condition_id_Valid() const{
    return m_condition_id_isValid;
}

QString OAIItemCondition::getUsage() const {
    return m_usage;
}
void OAIItemCondition::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIItemCondition::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIItemCondition::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIItemCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
