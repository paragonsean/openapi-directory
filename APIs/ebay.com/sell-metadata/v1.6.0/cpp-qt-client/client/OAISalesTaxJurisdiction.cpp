/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesTaxJurisdiction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesTaxJurisdiction::OAISalesTaxJurisdiction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesTaxJurisdiction::OAISalesTaxJurisdiction() {
    this->initializeModel();
}

OAISalesTaxJurisdiction::~OAISalesTaxJurisdiction() {}

void OAISalesTaxJurisdiction::initializeModel() {

    m_sales_tax_jurisdiction_id_isSet = false;
    m_sales_tax_jurisdiction_id_isValid = false;
}

void OAISalesTaxJurisdiction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesTaxJurisdiction::fromJsonObject(QJsonObject json) {

    m_sales_tax_jurisdiction_id_isValid = ::OpenAPI::fromJsonValue(m_sales_tax_jurisdiction_id, json[QString("salesTaxJurisdictionId")]);
    m_sales_tax_jurisdiction_id_isSet = !json[QString("salesTaxJurisdictionId")].isNull() && m_sales_tax_jurisdiction_id_isValid;
}

QString OAISalesTaxJurisdiction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesTaxJurisdiction::asJsonObject() const {
    QJsonObject obj;
    if (m_sales_tax_jurisdiction_id_isSet) {
        obj.insert(QString("salesTaxJurisdictionId"), ::OpenAPI::toJsonValue(m_sales_tax_jurisdiction_id));
    }
    return obj;
}

QString OAISalesTaxJurisdiction::getSalesTaxJurisdictionId() const {
    return m_sales_tax_jurisdiction_id;
}
void OAISalesTaxJurisdiction::setSalesTaxJurisdictionId(const QString &sales_tax_jurisdiction_id) {
    m_sales_tax_jurisdiction_id = sales_tax_jurisdiction_id;
    m_sales_tax_jurisdiction_id_isSet = true;
}

bool OAISalesTaxJurisdiction::is_sales_tax_jurisdiction_id_Set() const{
    return m_sales_tax_jurisdiction_id_isSet;
}

bool OAISalesTaxJurisdiction::is_sales_tax_jurisdiction_id_Valid() const{
    return m_sales_tax_jurisdiction_id_isValid;
}

bool OAISalesTaxJurisdiction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sales_tax_jurisdiction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesTaxJurisdiction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
