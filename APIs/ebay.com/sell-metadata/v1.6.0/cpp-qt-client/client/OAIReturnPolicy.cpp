/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnPolicy::OAIReturnPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnPolicy::OAIReturnPolicy() {
    this->initializeModel();
}

OAIReturnPolicy::~OAIReturnPolicy() {}

void OAIReturnPolicy::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_tree_id_isSet = false;
    m_category_tree_id_isValid = false;

    m_domestic_isSet = false;
    m_domestic_isValid = false;

    m_international_isSet = false;
    m_international_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;
}

void OAIReturnPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnPolicy::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_tree_id_isValid = ::OpenAPI::fromJsonValue(m_category_tree_id, json[QString("categoryTreeId")]);
    m_category_tree_id_isSet = !json[QString("categoryTreeId")].isNull() && m_category_tree_id_isValid;

    m_domestic_isValid = ::OpenAPI::fromJsonValue(m_domestic, json[QString("domestic")]);
    m_domestic_isSet = !json[QString("domestic")].isNull() && m_domestic_isValid;

    m_international_isValid = ::OpenAPI::fromJsonValue(m_international, json[QString("international")]);
    m_international_isSet = !json[QString("international")].isNull() && m_international_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;
}

QString OAIReturnPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_tree_id_isSet) {
        obj.insert(QString("categoryTreeId"), ::OpenAPI::toJsonValue(m_category_tree_id));
    }
    if (m_domestic.isSet()) {
        obj.insert(QString("domestic"), ::OpenAPI::toJsonValue(m_domestic));
    }
    if (m_international.isSet()) {
        obj.insert(QString("international"), ::OpenAPI::toJsonValue(m_international));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    return obj;
}

QString OAIReturnPolicy::getCategoryId() const {
    return m_category_id;
}
void OAIReturnPolicy::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIReturnPolicy::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIReturnPolicy::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIReturnPolicy::getCategoryTreeId() const {
    return m_category_tree_id;
}
void OAIReturnPolicy::setCategoryTreeId(const QString &category_tree_id) {
    m_category_tree_id = category_tree_id;
    m_category_tree_id_isSet = true;
}

bool OAIReturnPolicy::is_category_tree_id_Set() const{
    return m_category_tree_id_isSet;
}

bool OAIReturnPolicy::is_category_tree_id_Valid() const{
    return m_category_tree_id_isValid;
}

OAIReturnPolicyDetails OAIReturnPolicy::getDomestic() const {
    return m_domestic;
}
void OAIReturnPolicy::setDomestic(const OAIReturnPolicyDetails &domestic) {
    m_domestic = domestic;
    m_domestic_isSet = true;
}

bool OAIReturnPolicy::is_domestic_Set() const{
    return m_domestic_isSet;
}

bool OAIReturnPolicy::is_domestic_Valid() const{
    return m_domestic_isValid;
}

OAIReturnPolicyDetails OAIReturnPolicy::getInternational() const {
    return m_international;
}
void OAIReturnPolicy::setInternational(const OAIReturnPolicyDetails &international) {
    m_international = international;
    m_international_isSet = true;
}

bool OAIReturnPolicy::is_international_Set() const{
    return m_international_isSet;
}

bool OAIReturnPolicy::is_international_Valid() const{
    return m_international_isValid;
}

bool OAIReturnPolicy::isRequired() const {
    return m_required;
}
void OAIReturnPolicy::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIReturnPolicy::is_required_Set() const{
    return m_required_isSet;
}

bool OAIReturnPolicy::is_required_Valid() const{
    return m_required_isValid;
}

bool OAIReturnPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_international.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
