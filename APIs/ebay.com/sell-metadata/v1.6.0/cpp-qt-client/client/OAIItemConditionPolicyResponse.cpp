/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemConditionPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemConditionPolicyResponse::OAIItemConditionPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemConditionPolicyResponse::OAIItemConditionPolicyResponse() {
    this->initializeModel();
}

OAIItemConditionPolicyResponse::~OAIItemConditionPolicyResponse() {}

void OAIItemConditionPolicyResponse::initializeModel() {

    m_item_condition_policies_isSet = false;
    m_item_condition_policies_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIItemConditionPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemConditionPolicyResponse::fromJsonObject(QJsonObject json) {

    m_item_condition_policies_isValid = ::OpenAPI::fromJsonValue(m_item_condition_policies, json[QString("itemConditionPolicies")]);
    m_item_condition_policies_isSet = !json[QString("itemConditionPolicies")].isNull() && m_item_condition_policies_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIItemConditionPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemConditionPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_item_condition_policies.size() > 0) {
        obj.insert(QString("itemConditionPolicies"), ::OpenAPI::toJsonValue(m_item_condition_policies));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIItemConditionPolicy> OAIItemConditionPolicyResponse::getItemConditionPolicies() const {
    return m_item_condition_policies;
}
void OAIItemConditionPolicyResponse::setItemConditionPolicies(const QList<OAIItemConditionPolicy> &item_condition_policies) {
    m_item_condition_policies = item_condition_policies;
    m_item_condition_policies_isSet = true;
}

bool OAIItemConditionPolicyResponse::is_item_condition_policies_Set() const{
    return m_item_condition_policies_isSet;
}

bool OAIItemConditionPolicyResponse::is_item_condition_policies_Valid() const{
    return m_item_condition_policies_isValid;
}

QList<OAIError> OAIItemConditionPolicyResponse::getWarnings() const {
    return m_warnings;
}
void OAIItemConditionPolicyResponse::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIItemConditionPolicyResponse::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIItemConditionPolicyResponse::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIItemConditionPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_condition_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemConditionPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
