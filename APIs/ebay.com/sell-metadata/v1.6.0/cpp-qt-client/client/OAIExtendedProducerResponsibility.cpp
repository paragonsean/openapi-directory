/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedProducerResponsibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedProducerResponsibility::OAIExtendedProducerResponsibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedProducerResponsibility::OAIExtendedProducerResponsibility() {
    this->initializeModel();
}

OAIExtendedProducerResponsibility::~OAIExtendedProducerResponsibility() {}

void OAIExtendedProducerResponsibility::initializeModel() {

    m_enabled_for_variations_isSet = false;
    m_enabled_for_variations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIExtendedProducerResponsibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedProducerResponsibility::fromJsonObject(QJsonObject json) {

    m_enabled_for_variations_isValid = ::OpenAPI::fromJsonValue(m_enabled_for_variations, json[QString("enabledForVariations")]);
    m_enabled_for_variations_isSet = !json[QString("enabledForVariations")].isNull() && m_enabled_for_variations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIExtendedProducerResponsibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedProducerResponsibility::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_for_variations_isSet) {
        obj.insert(QString("enabledForVariations"), ::OpenAPI::toJsonValue(m_enabled_for_variations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

bool OAIExtendedProducerResponsibility::isEnabledForVariations() const {
    return m_enabled_for_variations;
}
void OAIExtendedProducerResponsibility::setEnabledForVariations(const bool &enabled_for_variations) {
    m_enabled_for_variations = enabled_for_variations;
    m_enabled_for_variations_isSet = true;
}

bool OAIExtendedProducerResponsibility::is_enabled_for_variations_Set() const{
    return m_enabled_for_variations_isSet;
}

bool OAIExtendedProducerResponsibility::is_enabled_for_variations_Valid() const{
    return m_enabled_for_variations_isValid;
}

QString OAIExtendedProducerResponsibility::getName() const {
    return m_name;
}
void OAIExtendedProducerResponsibility::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExtendedProducerResponsibility::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExtendedProducerResponsibility::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExtendedProducerResponsibility::getUsage() const {
    return m_usage;
}
void OAIExtendedProducerResponsibility::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIExtendedProducerResponsibility::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIExtendedProducerResponsibility::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIExtendedProducerResponsibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_for_variations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedProducerResponsibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
