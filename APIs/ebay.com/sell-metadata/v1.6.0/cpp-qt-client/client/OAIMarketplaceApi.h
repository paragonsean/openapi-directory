/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMarketplaceApi_H
#define OAI_OAIMarketplaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutomotivePartsCompatibilityPolicyResponse.h"
#include "OAIExtendedProducerResponsibilityPolicyResponse.h"
#include "OAIHazardousMaterialDetailsResponse.h"
#include "OAIItemConditionPolicyResponse.h"
#include "OAIListingStructurePolicyResponse.h"
#include "OAINegotiatedPricePolicyResponse.h"
#include "OAIReturnPolicyResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMarketplaceApi : public QObject {
    Q_OBJECT

public:
    OAIMarketplaceApi(const int timeOut = 0);
    ~OAIMarketplaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getAutomotivePartsCompatibilityPolicies(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getExtendedProducerResponsibilityPolicies(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_id QString [required]
    */
    virtual void getHazardousMaterialsLabels(const QString &marketplace_id);

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getItemConditionPolicies(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getListingStructurePolicies(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getNegotiatedPricePolicies(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marketplace_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getReturnPolicies(const QString &marketplace_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAutomotivePartsCompatibilityPoliciesCallback(OAIHttpRequestWorker *worker);
    void getExtendedProducerResponsibilityPoliciesCallback(OAIHttpRequestWorker *worker);
    void getHazardousMaterialsLabelsCallback(OAIHttpRequestWorker *worker);
    void getItemConditionPoliciesCallback(OAIHttpRequestWorker *worker);
    void getListingStructurePoliciesCallback(OAIHttpRequestWorker *worker);
    void getNegotiatedPricePoliciesCallback(OAIHttpRequestWorker *worker);
    void getReturnPoliciesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAutomotivePartsCompatibilityPoliciesSignal(OAIAutomotivePartsCompatibilityPolicyResponse summary);
    void getExtendedProducerResponsibilityPoliciesSignal(OAIExtendedProducerResponsibilityPolicyResponse summary);
    void getHazardousMaterialsLabelsSignal(OAIHazardousMaterialDetailsResponse summary);
    void getItemConditionPoliciesSignal(OAIItemConditionPolicyResponse summary);
    void getListingStructurePoliciesSignal(OAIListingStructurePolicyResponse summary);
    void getNegotiatedPricePoliciesSignal(OAINegotiatedPricePolicyResponse summary);
    void getReturnPoliciesSignal(OAIReturnPolicyResponse summary);


    void getAutomotivePartsCompatibilityPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIAutomotivePartsCompatibilityPolicyResponse summary);
    void getExtendedProducerResponsibilityPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIExtendedProducerResponsibilityPolicyResponse summary);
    void getHazardousMaterialsLabelsSignalFull(OAIHttpRequestWorker *worker, OAIHazardousMaterialDetailsResponse summary);
    void getItemConditionPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIItemConditionPolicyResponse summary);
    void getListingStructurePoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListingStructurePolicyResponse summary);
    void getNegotiatedPricePoliciesSignalFull(OAIHttpRequestWorker *worker, OAINegotiatedPricePolicyResponse summary);
    void getReturnPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIReturnPolicyResponse summary);

    Q_DECL_DEPRECATED_X("Use getAutomotivePartsCompatibilityPoliciesSignalError() instead")
    void getAutomotivePartsCompatibilityPoliciesSignalE(OAIAutomotivePartsCompatibilityPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutomotivePartsCompatibilityPoliciesSignalError(OAIAutomotivePartsCompatibilityPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExtendedProducerResponsibilityPoliciesSignalError() instead")
    void getExtendedProducerResponsibilityPoliciesSignalE(OAIExtendedProducerResponsibilityPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExtendedProducerResponsibilityPoliciesSignalError(OAIExtendedProducerResponsibilityPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHazardousMaterialsLabelsSignalError() instead")
    void getHazardousMaterialsLabelsSignalE(OAIHazardousMaterialDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHazardousMaterialsLabelsSignalError(OAIHazardousMaterialDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemConditionPoliciesSignalError() instead")
    void getItemConditionPoliciesSignalE(OAIItemConditionPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemConditionPoliciesSignalError(OAIItemConditionPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListingStructurePoliciesSignalError() instead")
    void getListingStructurePoliciesSignalE(OAIListingStructurePolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListingStructurePoliciesSignalError(OAIListingStructurePolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNegotiatedPricePoliciesSignalError() instead")
    void getNegotiatedPricePoliciesSignalE(OAINegotiatedPricePolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNegotiatedPricePoliciesSignalError(OAINegotiatedPricePolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnPoliciesSignalError() instead")
    void getReturnPoliciesSignalE(OAIReturnPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnPoliciesSignalError(OAIReturnPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAutomotivePartsCompatibilityPoliciesSignalErrorFull() instead")
    void getAutomotivePartsCompatibilityPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutomotivePartsCompatibilityPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExtendedProducerResponsibilityPoliciesSignalErrorFull() instead")
    void getExtendedProducerResponsibilityPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExtendedProducerResponsibilityPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHazardousMaterialsLabelsSignalErrorFull() instead")
    void getHazardousMaterialsLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHazardousMaterialsLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemConditionPoliciesSignalErrorFull() instead")
    void getItemConditionPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemConditionPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListingStructurePoliciesSignalErrorFull() instead")
    void getListingStructurePoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListingStructurePoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNegotiatedPricePoliciesSignalErrorFull() instead")
    void getNegotiatedPricePoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNegotiatedPricePoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnPoliciesSignalErrorFull() instead")
    void getReturnPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
