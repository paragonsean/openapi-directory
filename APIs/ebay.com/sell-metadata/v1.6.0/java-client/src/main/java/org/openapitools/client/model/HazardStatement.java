/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that describes hazard statements for hazardous materials labels
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HazardStatement {
  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION = "statementDescription";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION)
  private String statementDescription;

  public static final String SERIALIZED_NAME_STATEMENT_ID = "statementId";
  @SerializedName(SERIALIZED_NAME_STATEMENT_ID)
  private String statementId;

  public HazardStatement() {
  }

  public HazardStatement statementDescription(String statementDescription) {
    this.statementDescription = statementDescription;
    return this;
  }

  /**
   * The description of the statement localized to the default language of the marketplace. For sample values, see &lt;a href&#x3D;&#39;/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Hazard&#39;&gt;Hazard statement sample values&lt;/a&gt;.
   * @return statementDescription
   */
  @javax.annotation.Nullable
  public String getStatementDescription() {
    return statementDescription;
  }

  public void setStatementDescription(String statementDescription) {
    this.statementDescription = statementDescription;
  }


  public HazardStatement statementId(String statementId) {
    this.statementId = statementId;
    return this;
  }

  /**
   * The identifier of the statement. For sample values, see &lt;a href&#x3D;&#39;/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Hazard&#39;&gt;Hazard statement sample values&lt;/a&gt;.
   * @return statementId
   */
  @javax.annotation.Nullable
  public String getStatementId() {
    return statementId;
  }

  public void setStatementId(String statementId) {
    this.statementId = statementId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HazardStatement hazardStatement = (HazardStatement) o;
    return Objects.equals(this.statementDescription, hazardStatement.statementDescription) &&
        Objects.equals(this.statementId, hazardStatement.statementId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statementDescription, statementId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HazardStatement {\n");
    sb.append("    statementDescription: ").append(toIndentedString(statementDescription)).append("\n");
    sb.append("    statementId: ").append(toIndentedString(statementId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statementDescription");
    openapiFields.add("statementId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HazardStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HazardStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HazardStatement is not found in the empty JSON string", HazardStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HazardStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HazardStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("statementDescription") != null && !jsonObj.get("statementDescription").isJsonNull()) && !jsonObj.get("statementDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementDescription").toString()));
      }
      if ((jsonObj.get("statementId") != null && !jsonObj.get("statementId").isJsonNull()) && !jsonObj.get("statementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HazardStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HazardStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HazardStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HazardStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<HazardStatement>() {
           @Override
           public void write(JsonWriter out, HazardStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HazardStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HazardStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HazardStatement
   * @throws IOException if the JSON string is invalid with respect to HazardStatement
   */
  public static HazardStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HazardStatement.class);
  }

  /**
   * Convert an instance of HazardStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

