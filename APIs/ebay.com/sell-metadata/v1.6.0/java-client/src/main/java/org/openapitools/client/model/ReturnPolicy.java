/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReturnPolicyDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReturnPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicy {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public static final String SERIALIZED_NAME_DOMESTIC = "domestic";
  @SerializedName(SERIALIZED_NAME_DOMESTIC)
  private ReturnPolicyDetails domestic;

  public static final String SERIALIZED_NAME_INTERNATIONAL = "international";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL)
  private ReturnPolicyDetails international;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public ReturnPolicy() {
  }

  public ReturnPolicy categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The category ID to which the return policies apply.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ReturnPolicy categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    &lt;br&gt;&lt;br&gt;A &lt;i&gt;category tree&lt;/i&gt; is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique &lt;b&gt;categoryId&lt;/b&gt; value. Within a category tree, the root node has no parent node and &lt;i&gt;leaf nodes&lt;/i&gt; are nodes that have no child nodes.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }


  public ReturnPolicy domestic(ReturnPolicyDetails domestic) {
    this.domestic = domestic;
    return this;
  }

  /**
   * Get domestic
   * @return domestic
   */
  @javax.annotation.Nullable
  public ReturnPolicyDetails getDomestic() {
    return domestic;
  }

  public void setDomestic(ReturnPolicyDetails domestic) {
    this.domestic = domestic;
  }


  public ReturnPolicy international(ReturnPolicyDetails international) {
    this.international = international;
    return this;
  }

  /**
   * Get international
   * @return international
   */
  @javax.annotation.Nullable
  public ReturnPolicyDetails getInternational() {
    return international;
  }

  public void setInternational(ReturnPolicyDetails international) {
    this.international = international;
  }


  public ReturnPolicy required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, this flag indicates that you must specify a return policy for items listed in the associated category.  &lt;br&gt;&lt;br&gt;Note that not accepting returns (setting &lt;b&gt;returnsAcceptedEnabled&lt;/b&gt; to &lt;code&gt;false&lt;/code&gt;) is a valid return policy.
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicy returnPolicy = (ReturnPolicy) o;
    return Objects.equals(this.categoryId, returnPolicy.categoryId) &&
        Objects.equals(this.categoryTreeId, returnPolicy.categoryTreeId) &&
        Objects.equals(this.domestic, returnPolicy.domestic) &&
        Objects.equals(this.international, returnPolicy.international) &&
        Objects.equals(this.required, returnPolicy.required);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, categoryTreeId, domestic, international, required);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicy {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("    domestic: ").append(toIndentedString(domestic)).append("\n");
    sb.append("    international: ").append(toIndentedString(international)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("categoryTreeId");
    openapiFields.add("domestic");
    openapiFields.add("international");
    openapiFields.add("required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicy is not found in the empty JSON string", ReturnPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
      // validate the optional field `domestic`
      if (jsonObj.get("domestic") != null && !jsonObj.get("domestic").isJsonNull()) {
        ReturnPolicyDetails.validateJsonElement(jsonObj.get("domestic"));
      }
      // validate the optional field `international`
      if (jsonObj.get("international") != null && !jsonObj.get("international").isJsonNull()) {
        ReturnPolicyDetails.validateJsonElement(jsonObj.get("international"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicy>() {
           @Override
           public void write(JsonWriter out, ReturnPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicy
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicy
   */
  public static ReturnPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicy.class);
  }

  /**
   * Convert an instance of ReturnPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

