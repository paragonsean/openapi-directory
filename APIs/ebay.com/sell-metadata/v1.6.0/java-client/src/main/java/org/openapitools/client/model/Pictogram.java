/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that describes pictograms for hazardous materials labels.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pictogram {
  public static final String SERIALIZED_NAME_PICTOGRAM_DESCRIPTION = "pictogramDescription";
  @SerializedName(SERIALIZED_NAME_PICTOGRAM_DESCRIPTION)
  private String pictogramDescription;

  public static final String SERIALIZED_NAME_PICTOGRAM_ID = "pictogramId";
  @SerializedName(SERIALIZED_NAME_PICTOGRAM_ID)
  private String pictogramId;

  public static final String SERIALIZED_NAME_PICTOGRAM_URL = "pictogramUrl";
  @SerializedName(SERIALIZED_NAME_PICTOGRAM_URL)
  private String pictogramUrl;

  public Pictogram() {
  }

  public Pictogram pictogramDescription(String pictogramDescription) {
    this.pictogramDescription = pictogramDescription;
    return this;
  }

  /**
   * The description of the pictogram localized to the default language of the marketplace. For sample values, see &lt;a href&#x3D;&#39;/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Pictogra&#39;&gt;Pictogram sample values&lt;/a&gt;.
   * @return pictogramDescription
   */
  @javax.annotation.Nullable
  public String getPictogramDescription() {
    return pictogramDescription;
  }

  public void setPictogramDescription(String pictogramDescription) {
    this.pictogramDescription = pictogramDescription;
  }


  public Pictogram pictogramId(String pictogramId) {
    this.pictogramId = pictogramId;
    return this;
  }

  /**
   * The identifier of the pictogram. For sample values, see &lt;a href&#x3D;&#39;/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Pictogra&#39;&gt;Pictogram sample values&lt;/a&gt;.
   * @return pictogramId
   */
  @javax.annotation.Nullable
  public String getPictogramId() {
    return pictogramId;
  }

  public void setPictogramId(String pictogramId) {
    this.pictogramId = pictogramId;
  }


  public Pictogram pictogramUrl(String pictogramUrl) {
    this.pictogramUrl = pictogramUrl;
    return this;
  }

  /**
   * The URL of the pictogram.
   * @return pictogramUrl
   */
  @javax.annotation.Nullable
  public String getPictogramUrl() {
    return pictogramUrl;
  }

  public void setPictogramUrl(String pictogramUrl) {
    this.pictogramUrl = pictogramUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pictogram pictogram = (Pictogram) o;
    return Objects.equals(this.pictogramDescription, pictogram.pictogramDescription) &&
        Objects.equals(this.pictogramId, pictogram.pictogramId) &&
        Objects.equals(this.pictogramUrl, pictogram.pictogramUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pictogramDescription, pictogramId, pictogramUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pictogram {\n");
    sb.append("    pictogramDescription: ").append(toIndentedString(pictogramDescription)).append("\n");
    sb.append("    pictogramId: ").append(toIndentedString(pictogramId)).append("\n");
    sb.append("    pictogramUrl: ").append(toIndentedString(pictogramUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pictogramDescription");
    openapiFields.add("pictogramId");
    openapiFields.add("pictogramUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pictogram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pictogram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pictogram is not found in the empty JSON string", Pictogram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pictogram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pictogram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pictogramDescription") != null && !jsonObj.get("pictogramDescription").isJsonNull()) && !jsonObj.get("pictogramDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictogramDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictogramDescription").toString()));
      }
      if ((jsonObj.get("pictogramId") != null && !jsonObj.get("pictogramId").isJsonNull()) && !jsonObj.get("pictogramId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictogramId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictogramId").toString()));
      }
      if ((jsonObj.get("pictogramUrl") != null && !jsonObj.get("pictogramUrl").isJsonNull()) && !jsonObj.get("pictogramUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictogramUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictogramUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pictogram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pictogram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pictogram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pictogram.class));

       return (TypeAdapter<T>) new TypeAdapter<Pictogram>() {
           @Override
           public void write(JsonWriter out, Pictogram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pictogram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pictogram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pictogram
   * @throws IOException if the JSON string is invalid with respect to Pictogram
   */
  public static Pictogram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pictogram.class);
  }

  /**
   * Convert an instance of Pictogram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

