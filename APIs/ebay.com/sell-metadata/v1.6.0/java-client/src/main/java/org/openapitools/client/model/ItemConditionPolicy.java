/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItemCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItemConditionPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemConditionPolicy {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public static final String SERIALIZED_NAME_ITEM_CONDITION_REQUIRED = "itemConditionRequired";
  @SerializedName(SERIALIZED_NAME_ITEM_CONDITION_REQUIRED)
  private Boolean itemConditionRequired;

  public static final String SERIALIZED_NAME_ITEM_CONDITIONS = "itemConditions";
  @SerializedName(SERIALIZED_NAME_ITEM_CONDITIONS)
  private List<ItemCondition> itemConditions = new ArrayList<>();

  public ItemConditionPolicy() {
  }

  public ItemConditionPolicy categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The category ID to which the item-condition policy applies.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ItemConditionPolicy categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    &lt;br&gt;&lt;br&gt;A &lt;i&gt;category tree&lt;/i&gt; is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique &lt;b&gt;categoryId&lt;/b&gt; value. Within a category tree, the root node has no parent node and &lt;i&gt;leaf nodes&lt;/i&gt; are nodes that have no child nodes.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }


  public ItemConditionPolicy itemConditionRequired(Boolean itemConditionRequired) {
    this.itemConditionRequired = itemConditionRequired;
    return this;
  }

  /**
   * This flag denotes whether or not you must list the item condition in a listing for the specified category. If set to &lt;code&gt;true&lt;/code&gt;, you must specify an item condition for the associated category.
   * @return itemConditionRequired
   */
  @javax.annotation.Nullable
  public Boolean getItemConditionRequired() {
    return itemConditionRequired;
  }

  public void setItemConditionRequired(Boolean itemConditionRequired) {
    this.itemConditionRequired = itemConditionRequired;
  }


  public ItemConditionPolicy itemConditions(List<ItemCondition> itemConditions) {
    this.itemConditions = itemConditions;
    return this;
  }

  public ItemConditionPolicy addItemConditionsItem(ItemCondition itemConditionsItem) {
    if (this.itemConditions == null) {
      this.itemConditions = new ArrayList<>();
    }
    this.itemConditions.add(itemConditionsItem);
    return this;
  }

  /**
   * The item-condition values allowed in the category.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The ‘Seller Refurbished’ item condition (condition ID 2500) has been replaced by the &#39;Excellent - Refurbished&#39;, &#39;Very Good - Refurbished&#39;, and &#39;Good - Refurbished&#39; item conditions in a select number of eBay marketplaces and categories. See the &lt;a href&#x3D;\&quot;/api-docs/sell/static/metadata/condition-id-values.html#Category \&quot; target&#x3D;\&quot;_blank \&quot;&gt; eBay Refurbished Program - Category and marketplace support&lt;/a&gt; topic for more details.&lt;br/&gt;&lt;br/&gt;Similar to the ‘Certified Refurbished’ item condition (condition ID 2000), a seller’s OAuth user token will have to be used instead of an OAuth application token, since each seller must  go through an application and qualification process before using any of these new refurbished item conditions in supported categories. If a seller is not qualified to use the new refurbished item conditions, these item condition values will not be returned by &lt;b&gt;getItemConditionPolicies&lt;/b&gt;.&lt;/span&gt;
   * @return itemConditions
   */
  @javax.annotation.Nullable
  public List<ItemCondition> getItemConditions() {
    return itemConditions;
  }

  public void setItemConditions(List<ItemCondition> itemConditions) {
    this.itemConditions = itemConditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemConditionPolicy itemConditionPolicy = (ItemConditionPolicy) o;
    return Objects.equals(this.categoryId, itemConditionPolicy.categoryId) &&
        Objects.equals(this.categoryTreeId, itemConditionPolicy.categoryTreeId) &&
        Objects.equals(this.itemConditionRequired, itemConditionPolicy.itemConditionRequired) &&
        Objects.equals(this.itemConditions, itemConditionPolicy.itemConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, categoryTreeId, itemConditionRequired, itemConditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemConditionPolicy {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("    itemConditionRequired: ").append(toIndentedString(itemConditionRequired)).append("\n");
    sb.append("    itemConditions: ").append(toIndentedString(itemConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("categoryTreeId");
    openapiFields.add("itemConditionRequired");
    openapiFields.add("itemConditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemConditionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemConditionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemConditionPolicy is not found in the empty JSON string", ItemConditionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemConditionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemConditionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
      if (jsonObj.get("itemConditions") != null && !jsonObj.get("itemConditions").isJsonNull()) {
        JsonArray jsonArrayitemConditions = jsonObj.getAsJsonArray("itemConditions");
        if (jsonArrayitemConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemConditions` to be an array in the JSON string but got `%s`", jsonObj.get("itemConditions").toString()));
          }

          // validate the optional field `itemConditions` (array)
          for (int i = 0; i < jsonArrayitemConditions.size(); i++) {
            ItemCondition.validateJsonElement(jsonArrayitemConditions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemConditionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemConditionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemConditionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemConditionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemConditionPolicy>() {
           @Override
           public void write(JsonWriter out, ItemConditionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemConditionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemConditionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemConditionPolicy
   * @throws IOException if the JSON string is invalid with respect to ItemConditionPolicy
   */
  public static ItemConditionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemConditionPolicy.class);
  }

  /**
   * Convert an instance of ItemConditionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

