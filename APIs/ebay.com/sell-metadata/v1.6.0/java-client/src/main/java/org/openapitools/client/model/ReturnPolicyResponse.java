/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ReturnPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReturnPolicyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicyResponse {
  public static final String SERIALIZED_NAME_RETURN_POLICIES = "returnPolicies";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICIES)
  private List<ReturnPolicy> returnPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public ReturnPolicyResponse() {
  }

  public ReturnPolicyResponse returnPolicies(List<ReturnPolicy> returnPolicies) {
    this.returnPolicies = returnPolicies;
    return this;
  }

  public ReturnPolicyResponse addReturnPoliciesItem(ReturnPolicy returnPoliciesItem) {
    if (this.returnPolicies == null) {
      this.returnPolicies = new ArrayList<>();
    }
    this.returnPolicies.add(returnPoliciesItem);
    return this;
  }

  /**
   * A list of elements, where each contains a category ID and a flag that indicates whether or not listings in that category require a return policy.
   * @return returnPolicies
   */
  @javax.annotation.Nullable
  public List<ReturnPolicy> getReturnPolicies() {
    return returnPolicies;
  }

  public void setReturnPolicies(List<ReturnPolicy> returnPolicies) {
    this.returnPolicies = returnPolicies;
  }


  public ReturnPolicyResponse warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ReturnPolicyResponse addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyResponse returnPolicyResponse = (ReturnPolicyResponse) o;
    return Objects.equals(this.returnPolicies, returnPolicyResponse.returnPolicies) &&
        Objects.equals(this.warnings, returnPolicyResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnPolicies, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyResponse {\n");
    sb.append("    returnPolicies: ").append(toIndentedString(returnPolicies)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("returnPolicies");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyResponse is not found in the empty JSON string", ReturnPolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("returnPolicies") != null && !jsonObj.get("returnPolicies").isJsonNull()) {
        JsonArray jsonArrayreturnPolicies = jsonObj.getAsJsonArray("returnPolicies");
        if (jsonArrayreturnPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("returnPolicies").toString()));
          }

          // validate the optional field `returnPolicies` (array)
          for (int i = 0; i < jsonArrayreturnPolicies.size(); i++) {
            ReturnPolicy.validateJsonElement(jsonArrayreturnPolicies.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyResponse>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyResponse
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyResponse
   */
  public static ReturnPolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyResponse.class);
  }

  /**
   * Convert an instance of ReturnPolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

