/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A unique ID for a sales tax jurisdiction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesTaxJurisdiction {
  public static final String SERIALIZED_NAME_SALES_TAX_JURISDICTION_ID = "salesTaxJurisdictionId";
  @SerializedName(SERIALIZED_NAME_SALES_TAX_JURISDICTION_ID)
  private String salesTaxJurisdictionId;

  public SalesTaxJurisdiction() {
  }

  public SalesTaxJurisdiction salesTaxJurisdictionId(String salesTaxJurisdictionId) {
    this.salesTaxJurisdictionId = salesTaxJurisdictionId;
    return this;
  }

  /**
   * The unique ID for a sales tax jurisdiction.
   * @return salesTaxJurisdictionId
   */
  @javax.annotation.Nullable
  public String getSalesTaxJurisdictionId() {
    return salesTaxJurisdictionId;
  }

  public void setSalesTaxJurisdictionId(String salesTaxJurisdictionId) {
    this.salesTaxJurisdictionId = salesTaxJurisdictionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesTaxJurisdiction salesTaxJurisdiction = (SalesTaxJurisdiction) o;
    return Objects.equals(this.salesTaxJurisdictionId, salesTaxJurisdiction.salesTaxJurisdictionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(salesTaxJurisdictionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesTaxJurisdiction {\n");
    sb.append("    salesTaxJurisdictionId: ").append(toIndentedString(salesTaxJurisdictionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("salesTaxJurisdictionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesTaxJurisdiction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesTaxJurisdiction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesTaxJurisdiction is not found in the empty JSON string", SalesTaxJurisdiction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesTaxJurisdiction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesTaxJurisdiction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("salesTaxJurisdictionId") != null && !jsonObj.get("salesTaxJurisdictionId").isJsonNull()) && !jsonObj.get("salesTaxJurisdictionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesTaxJurisdictionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesTaxJurisdictionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesTaxJurisdiction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesTaxJurisdiction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesTaxJurisdiction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesTaxJurisdiction.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesTaxJurisdiction>() {
           @Override
           public void write(JsonWriter out, SalesTaxJurisdiction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesTaxJurisdiction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesTaxJurisdiction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesTaxJurisdiction
   * @throws IOException if the JSON string is invalid with respect to SalesTaxJurisdiction
   */
  public static SalesTaxJurisdiction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesTaxJurisdiction.class);
  }

  /**
   * Convert an instance of SalesTaxJurisdiction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

