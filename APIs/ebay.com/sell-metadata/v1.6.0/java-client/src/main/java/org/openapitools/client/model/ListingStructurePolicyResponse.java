/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListingStructurePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListingStructurePolicyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingStructurePolicyResponse {
  public static final String SERIALIZED_NAME_LISTING_STRUCTURE_POLICIES = "listingStructurePolicies";
  @SerializedName(SERIALIZED_NAME_LISTING_STRUCTURE_POLICIES)
  private List<ListingStructurePolicy> listingStructurePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public ListingStructurePolicyResponse() {
  }

  public ListingStructurePolicyResponse listingStructurePolicies(List<ListingStructurePolicy> listingStructurePolicies) {
    this.listingStructurePolicies = listingStructurePolicies;
    return this;
  }

  public ListingStructurePolicyResponse addListingStructurePoliciesItem(ListingStructurePolicy listingStructurePoliciesItem) {
    if (this.listingStructurePolicies == null) {
      this.listingStructurePolicies = new ArrayList<>();
    }
    this.listingStructurePolicies.add(listingStructurePoliciesItem);
    return this;
  }

  /**
   * Returns a list of category IDs plus a flag indicating whether or not each listed category supports item variations.
   * @return listingStructurePolicies
   */
  @javax.annotation.Nullable
  public List<ListingStructurePolicy> getListingStructurePolicies() {
    return listingStructurePolicies;
  }

  public void setListingStructurePolicies(List<ListingStructurePolicy> listingStructurePolicies) {
    this.listingStructurePolicies = listingStructurePolicies;
  }


  public ListingStructurePolicyResponse warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ListingStructurePolicyResponse addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingStructurePolicyResponse listingStructurePolicyResponse = (ListingStructurePolicyResponse) o;
    return Objects.equals(this.listingStructurePolicies, listingStructurePolicyResponse.listingStructurePolicies) &&
        Objects.equals(this.warnings, listingStructurePolicyResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listingStructurePolicies, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingStructurePolicyResponse {\n");
    sb.append("    listingStructurePolicies: ").append(toIndentedString(listingStructurePolicies)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("listingStructurePolicies");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingStructurePolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingStructurePolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingStructurePolicyResponse is not found in the empty JSON string", ListingStructurePolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingStructurePolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingStructurePolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("listingStructurePolicies") != null && !jsonObj.get("listingStructurePolicies").isJsonNull()) {
        JsonArray jsonArraylistingStructurePolicies = jsonObj.getAsJsonArray("listingStructurePolicies");
        if (jsonArraylistingStructurePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listingStructurePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listingStructurePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("listingStructurePolicies").toString()));
          }

          // validate the optional field `listingStructurePolicies` (array)
          for (int i = 0; i < jsonArraylistingStructurePolicies.size(); i++) {
            ListingStructurePolicy.validateJsonElement(jsonArraylistingStructurePolicies.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingStructurePolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingStructurePolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingStructurePolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingStructurePolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingStructurePolicyResponse>() {
           @Override
           public void write(JsonWriter out, ListingStructurePolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingStructurePolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingStructurePolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingStructurePolicyResponse
   * @throws IOException if the JSON string is invalid with respect to ListingStructurePolicyResponse
   */
  public static ListingStructurePolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingStructurePolicyResponse.class);
  }

  /**
   * Convert an instance of ListingStructurePolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

