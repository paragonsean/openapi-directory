/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HazardStatement;
import org.openapitools.client.model.Pictogram;
import org.openapitools.client.model.SignalWord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that defines the response fields for the &lt;b&gt;getHazardousMaterialsLabels&lt;/b&gt; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HazardousMaterialDetailsResponse {
  public static final String SERIALIZED_NAME_PICTOGRAMS = "pictograms";
  @SerializedName(SERIALIZED_NAME_PICTOGRAMS)
  private List<Pictogram> pictograms = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNAL_WORDS = "signalWords";
  @SerializedName(SERIALIZED_NAME_SIGNAL_WORDS)
  private List<SignalWord> signalWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATEMENTS = "statements";
  @SerializedName(SERIALIZED_NAME_STATEMENTS)
  private List<HazardStatement> statements = new ArrayList<>();

  public HazardousMaterialDetailsResponse() {
  }

  public HazardousMaterialDetailsResponse pictograms(List<Pictogram> pictograms) {
    this.pictograms = pictograms;
    return this;
  }

  public HazardousMaterialDetailsResponse addPictogramsItem(Pictogram pictogramsItem) {
    if (this.pictograms == null) {
      this.pictograms = new ArrayList<>();
    }
    this.pictograms.add(pictogramsItem);
    return this;
  }

  /**
   * This array contains of available hazardous materials hazard pictograms for the specified marketplace.
   * @return pictograms
   */
  @javax.annotation.Nullable
  public List<Pictogram> getPictograms() {
    return pictograms;
  }

  public void setPictograms(List<Pictogram> pictograms) {
    this.pictograms = pictograms;
  }


  public HazardousMaterialDetailsResponse signalWords(List<SignalWord> signalWords) {
    this.signalWords = signalWords;
    return this;
  }

  public HazardousMaterialDetailsResponse addSignalWordsItem(SignalWord signalWordsItem) {
    if (this.signalWords == null) {
      this.signalWords = new ArrayList<>();
    }
    this.signalWords.add(signalWordsItem);
    return this;
  }

  /**
   * This array contains available hazardous materials signal words for the specified marketplace.
   * @return signalWords
   */
  @javax.annotation.Nullable
  public List<SignalWord> getSignalWords() {
    return signalWords;
  }

  public void setSignalWords(List<SignalWord> signalWords) {
    this.signalWords = signalWords;
  }


  public HazardousMaterialDetailsResponse statements(List<HazardStatement> statements) {
    this.statements = statements;
    return this;
  }

  public HazardousMaterialDetailsResponse addStatementsItem(HazardStatement statementsItem) {
    if (this.statements == null) {
      this.statements = new ArrayList<>();
    }
    this.statements.add(statementsItem);
    return this;
  }

  /**
   * This array contains available hazardous materials hazard statements for the specified marketplace.
   * @return statements
   */
  @javax.annotation.Nullable
  public List<HazardStatement> getStatements() {
    return statements;
  }

  public void setStatements(List<HazardStatement> statements) {
    this.statements = statements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HazardousMaterialDetailsResponse hazardousMaterialDetailsResponse = (HazardousMaterialDetailsResponse) o;
    return Objects.equals(this.pictograms, hazardousMaterialDetailsResponse.pictograms) &&
        Objects.equals(this.signalWords, hazardousMaterialDetailsResponse.signalWords) &&
        Objects.equals(this.statements, hazardousMaterialDetailsResponse.statements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pictograms, signalWords, statements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HazardousMaterialDetailsResponse {\n");
    sb.append("    pictograms: ").append(toIndentedString(pictograms)).append("\n");
    sb.append("    signalWords: ").append(toIndentedString(signalWords)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pictograms");
    openapiFields.add("signalWords");
    openapiFields.add("statements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HazardousMaterialDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HazardousMaterialDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HazardousMaterialDetailsResponse is not found in the empty JSON string", HazardousMaterialDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HazardousMaterialDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HazardousMaterialDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("pictograms") != null && !jsonObj.get("pictograms").isJsonNull()) {
        JsonArray jsonArraypictograms = jsonObj.getAsJsonArray("pictograms");
        if (jsonArraypictograms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pictograms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pictograms` to be an array in the JSON string but got `%s`", jsonObj.get("pictograms").toString()));
          }

          // validate the optional field `pictograms` (array)
          for (int i = 0; i < jsonArraypictograms.size(); i++) {
            Pictogram.validateJsonElement(jsonArraypictograms.get(i));
          };
        }
      }
      if (jsonObj.get("signalWords") != null && !jsonObj.get("signalWords").isJsonNull()) {
        JsonArray jsonArraysignalWords = jsonObj.getAsJsonArray("signalWords");
        if (jsonArraysignalWords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signalWords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signalWords` to be an array in the JSON string but got `%s`", jsonObj.get("signalWords").toString()));
          }

          // validate the optional field `signalWords` (array)
          for (int i = 0; i < jsonArraysignalWords.size(); i++) {
            SignalWord.validateJsonElement(jsonArraysignalWords.get(i));
          };
        }
      }
      if (jsonObj.get("statements") != null && !jsonObj.get("statements").isJsonNull()) {
        JsonArray jsonArraystatements = jsonObj.getAsJsonArray("statements");
        if (jsonArraystatements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statements` to be an array in the JSON string but got `%s`", jsonObj.get("statements").toString()));
          }

          // validate the optional field `statements` (array)
          for (int i = 0; i < jsonArraystatements.size(); i++) {
            HazardStatement.validateJsonElement(jsonArraystatements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HazardousMaterialDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HazardousMaterialDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HazardousMaterialDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HazardousMaterialDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HazardousMaterialDetailsResponse>() {
           @Override
           public void write(JsonWriter out, HazardousMaterialDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HazardousMaterialDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HazardousMaterialDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HazardousMaterialDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to HazardousMaterialDetailsResponse
   */
  public static HazardousMaterialDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HazardousMaterialDetailsResponse.class);
  }

  /**
   * Convert an instance of HazardousMaterialDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

