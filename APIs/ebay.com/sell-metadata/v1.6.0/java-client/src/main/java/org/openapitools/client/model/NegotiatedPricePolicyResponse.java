/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.NegotiatedPricePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NegotiatedPricePolicyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NegotiatedPricePolicyResponse {
  public static final String SERIALIZED_NAME_NEGOTIATED_PRICE_POLICIES = "negotiatedPricePolicies";
  @SerializedName(SERIALIZED_NAME_NEGOTIATED_PRICE_POLICIES)
  private List<NegotiatedPricePolicy> negotiatedPricePolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public NegotiatedPricePolicyResponse() {
  }

  public NegotiatedPricePolicyResponse negotiatedPricePolicies(List<NegotiatedPricePolicy> negotiatedPricePolicies) {
    this.negotiatedPricePolicies = negotiatedPricePolicies;
    return this;
  }

  public NegotiatedPricePolicyResponse addNegotiatedPricePoliciesItem(NegotiatedPricePolicy negotiatedPricePoliciesItem) {
    if (this.negotiatedPricePolicies == null) {
      this.negotiatedPricePolicies = new ArrayList<>();
    }
    this.negotiatedPricePolicies.add(negotiatedPricePoliciesItem);
    return this;
  }

  /**
   * A list of category IDs and the policies related to negotiated-price items for each of the listed categories.
   * @return negotiatedPricePolicies
   */
  @javax.annotation.Nullable
  public List<NegotiatedPricePolicy> getNegotiatedPricePolicies() {
    return negotiatedPricePolicies;
  }

  public void setNegotiatedPricePolicies(List<NegotiatedPricePolicy> negotiatedPricePolicies) {
    this.negotiatedPricePolicies = negotiatedPricePolicies;
  }


  public NegotiatedPricePolicyResponse warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public NegotiatedPricePolicyResponse addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegotiatedPricePolicyResponse negotiatedPricePolicyResponse = (NegotiatedPricePolicyResponse) o;
    return Objects.equals(this.negotiatedPricePolicies, negotiatedPricePolicyResponse.negotiatedPricePolicies) &&
        Objects.equals(this.warnings, negotiatedPricePolicyResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negotiatedPricePolicies, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegotiatedPricePolicyResponse {\n");
    sb.append("    negotiatedPricePolicies: ").append(toIndentedString(negotiatedPricePolicies)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("negotiatedPricePolicies");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NegotiatedPricePolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NegotiatedPricePolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NegotiatedPricePolicyResponse is not found in the empty JSON string", NegotiatedPricePolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NegotiatedPricePolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NegotiatedPricePolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("negotiatedPricePolicies") != null && !jsonObj.get("negotiatedPricePolicies").isJsonNull()) {
        JsonArray jsonArraynegotiatedPricePolicies = jsonObj.getAsJsonArray("negotiatedPricePolicies");
        if (jsonArraynegotiatedPricePolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("negotiatedPricePolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `negotiatedPricePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("negotiatedPricePolicies").toString()));
          }

          // validate the optional field `negotiatedPricePolicies` (array)
          for (int i = 0; i < jsonArraynegotiatedPricePolicies.size(); i++) {
            NegotiatedPricePolicy.validateJsonElement(jsonArraynegotiatedPricePolicies.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NegotiatedPricePolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NegotiatedPricePolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NegotiatedPricePolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NegotiatedPricePolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NegotiatedPricePolicyResponse>() {
           @Override
           public void write(JsonWriter out, NegotiatedPricePolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NegotiatedPricePolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NegotiatedPricePolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NegotiatedPricePolicyResponse
   * @throws IOException if the JSON string is invalid with respect to NegotiatedPricePolicyResponse
   */
  public static NegotiatedPricePolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NegotiatedPricePolicyResponse.class);
  }

  /**
   * Convert an instance of NegotiatedPricePolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

