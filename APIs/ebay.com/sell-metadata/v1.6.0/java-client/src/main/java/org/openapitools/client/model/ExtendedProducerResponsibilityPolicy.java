/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExtendedProducerResponsibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that defines the Extended Producer Responsibility policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedProducerResponsibilityPolicy {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public static final String SERIALIZED_NAME_SUPPORTED_ATTRIBUTES = "supportedAttributes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ATTRIBUTES)
  private List<ExtendedProducerResponsibility> supportedAttributes = new ArrayList<>();

  public ExtendedProducerResponsibilityPolicy() {
  }

  public ExtendedProducerResponsibilityPolicy categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The unique identifier for the category under which the policy applies.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ExtendedProducerResponsibilityPolicy categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * The unique identifier for the category tree under which the policy applies.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }


  public ExtendedProducerResponsibilityPolicy supportedAttributes(List<ExtendedProducerResponsibility> supportedAttributes) {
    this.supportedAttributes = supportedAttributes;
    return this;
  }

  public ExtendedProducerResponsibilityPolicy addSupportedAttributesItem(ExtendedProducerResponsibility supportedAttributesItem) {
    if (this.supportedAttributes == null) {
      this.supportedAttributes = new ArrayList<>();
    }
    this.supportedAttributes.add(supportedAttributesItem);
    return this;
  }

  /**
   * The details regarding the attributes included in the policy, such as their usage guidelines and whether they can be specified at the listing variation level.
   * @return supportedAttributes
   */
  @javax.annotation.Nullable
  public List<ExtendedProducerResponsibility> getSupportedAttributes() {
    return supportedAttributes;
  }

  public void setSupportedAttributes(List<ExtendedProducerResponsibility> supportedAttributes) {
    this.supportedAttributes = supportedAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedProducerResponsibilityPolicy extendedProducerResponsibilityPolicy = (ExtendedProducerResponsibilityPolicy) o;
    return Objects.equals(this.categoryId, extendedProducerResponsibilityPolicy.categoryId) &&
        Objects.equals(this.categoryTreeId, extendedProducerResponsibilityPolicy.categoryTreeId) &&
        Objects.equals(this.supportedAttributes, extendedProducerResponsibilityPolicy.supportedAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, categoryTreeId, supportedAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedProducerResponsibilityPolicy {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("    supportedAttributes: ").append(toIndentedString(supportedAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("categoryTreeId");
    openapiFields.add("supportedAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedProducerResponsibilityPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedProducerResponsibilityPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedProducerResponsibilityPolicy is not found in the empty JSON string", ExtendedProducerResponsibilityPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedProducerResponsibilityPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedProducerResponsibilityPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
      if (jsonObj.get("supportedAttributes") != null && !jsonObj.get("supportedAttributes").isJsonNull()) {
        JsonArray jsonArraysupportedAttributes = jsonObj.getAsJsonArray("supportedAttributes");
        if (jsonArraysupportedAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedAttributes").toString()));
          }

          // validate the optional field `supportedAttributes` (array)
          for (int i = 0; i < jsonArraysupportedAttributes.size(); i++) {
            ExtendedProducerResponsibility.validateJsonElement(jsonArraysupportedAttributes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedProducerResponsibilityPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedProducerResponsibilityPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedProducerResponsibilityPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedProducerResponsibilityPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedProducerResponsibilityPolicy>() {
           @Override
           public void write(JsonWriter out, ExtendedProducerResponsibilityPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedProducerResponsibilityPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedProducerResponsibilityPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedProducerResponsibilityPolicy
   * @throws IOException if the JSON string is invalid with respect to ExtendedProducerResponsibilityPolicy
   */
  public static ExtendedProducerResponsibilityPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedProducerResponsibilityPolicy.class);
  }

  /**
   * Convert an instance of ExtendedProducerResponsibilityPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

