/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that defines the attributes of an Extended Producer Responsibility policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedProducerResponsibility {
  public static final String SERIALIZED_NAME_ENABLED_FOR_VARIATIONS = "enabledForVariations";
  @SerializedName(SERIALIZED_NAME_ENABLED_FOR_VARIATIONS)
  private Boolean enabledForVariations;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private String usage;

  public ExtendedProducerResponsibility() {
  }

  public ExtendedProducerResponsibility enabledForVariations(Boolean enabledForVariations) {
    this.enabledForVariations = enabledForVariations;
    return this;
  }

  /**
   * An indication of whether the attribute can be enabled for listing variations.&lt;br /&gt;&lt;br /&gt;If the value is &lt;code&gt;true&lt;/code&gt;, the attribute may be specified at the variation level.
   * @return enabledForVariations
   */
  @javax.annotation.Nullable
  public Boolean getEnabledForVariations() {
    return enabledForVariations;
  }

  public void setEnabledForVariations(Boolean enabledForVariations) {
    this.enabledForVariations = enabledForVariations;
  }


  public ExtendedProducerResponsibility name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the attribute included in the policy. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/metadata/types/sel:ExtendedProducerResponsibilityEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExtendedProducerResponsibility usage(String usage) {
    this.usage = usage;
    return this;
  }

  /**
   * The usage guidelines for the attribute, in the specified marketplace. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/metadata/types/sel:GenericUsageEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return usage
   */
  @javax.annotation.Nullable
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedProducerResponsibility extendedProducerResponsibility = (ExtendedProducerResponsibility) o;
    return Objects.equals(this.enabledForVariations, extendedProducerResponsibility.enabledForVariations) &&
        Objects.equals(this.name, extendedProducerResponsibility.name) &&
        Objects.equals(this.usage, extendedProducerResponsibility.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabledForVariations, name, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedProducerResponsibility {\n");
    sb.append("    enabledForVariations: ").append(toIndentedString(enabledForVariations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabledForVariations");
    openapiFields.add("name");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedProducerResponsibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedProducerResponsibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedProducerResponsibility is not found in the empty JSON string", ExtendedProducerResponsibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedProducerResponsibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedProducerResponsibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) && !jsonObj.get("usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedProducerResponsibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedProducerResponsibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedProducerResponsibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedProducerResponsibility.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedProducerResponsibility>() {
           @Override
           public void write(JsonWriter out, ExtendedProducerResponsibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedProducerResponsibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedProducerResponsibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedProducerResponsibility
   * @throws IOException if the JSON string is invalid with respect to ExtendedProducerResponsibility
   */
  public static ExtendedProducerResponsibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedProducerResponsibility.class);
  }

  /**
   * Convert an instance of ExtendedProducerResponsibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

