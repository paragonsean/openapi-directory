/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that describes signal words for hazardous materials labels.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignalWord {
  public static final String SERIALIZED_NAME_SIGNAL_WORD_DESCRIPTION = "signalWordDescription";
  @SerializedName(SERIALIZED_NAME_SIGNAL_WORD_DESCRIPTION)
  private String signalWordDescription;

  public static final String SERIALIZED_NAME_SIGNAL_WORD_ID = "signalWordId";
  @SerializedName(SERIALIZED_NAME_SIGNAL_WORD_ID)
  private String signalWordId;

  public SignalWord() {
  }

  public SignalWord signalWordDescription(String signalWordDescription) {
    this.signalWordDescription = signalWordDescription;
    return this;
  }

  /**
   * The description of the signal word localized to the default language of the marketplace. For more information, see &lt;a href&#x3D;&#39;/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal&#39;&gt;Signal word information&lt;/a&gt;.
   * @return signalWordDescription
   */
  @javax.annotation.Nullable
  public String getSignalWordDescription() {
    return signalWordDescription;
  }

  public void setSignalWordDescription(String signalWordDescription) {
    this.signalWordDescription = signalWordDescription;
  }


  public SignalWord signalWordId(String signalWordId) {
    this.signalWordId = signalWordId;
    return this;
  }

  /**
   * The identifier of the signal word. For more information, see &lt;a href&#x3D;&#39;/api-docs/sell/static/metadata/feature-regulatorhazmatcontainer.html#Signal&#39;&gt;Signal word information&lt;/a&gt;.
   * @return signalWordId
   */
  @javax.annotation.Nullable
  public String getSignalWordId() {
    return signalWordId;
  }

  public void setSignalWordId(String signalWordId) {
    this.signalWordId = signalWordId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalWord signalWord = (SignalWord) o;
    return Objects.equals(this.signalWordDescription, signalWord.signalWordDescription) &&
        Objects.equals(this.signalWordId, signalWord.signalWordId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signalWordDescription, signalWordId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalWord {\n");
    sb.append("    signalWordDescription: ").append(toIndentedString(signalWordDescription)).append("\n");
    sb.append("    signalWordId: ").append(toIndentedString(signalWordId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signalWordDescription");
    openapiFields.add("signalWordId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignalWord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignalWord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignalWord is not found in the empty JSON string", SignalWord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignalWord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignalWord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("signalWordDescription") != null && !jsonObj.get("signalWordDescription").isJsonNull()) && !jsonObj.get("signalWordDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalWordDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalWordDescription").toString()));
      }
      if ((jsonObj.get("signalWordId") != null && !jsonObj.get("signalWordId").isJsonNull()) && !jsonObj.get("signalWordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalWordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalWordId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignalWord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignalWord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignalWord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignalWord.class));

       return (TypeAdapter<T>) new TypeAdapter<SignalWord>() {
           @Override
           public void write(JsonWriter out, SignalWord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignalWord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignalWord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignalWord
   * @throws IOException if the JSON string is invalid with respect to SignalWord
   */
  public static SignalWord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignalWord.class);
  }

  /**
   * Convert an instance of SignalWord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

