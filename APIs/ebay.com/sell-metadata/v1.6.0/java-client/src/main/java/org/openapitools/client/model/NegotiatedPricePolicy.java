/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NegotiatedPricePolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NegotiatedPricePolicy {
  public static final String SERIALIZED_NAME_BEST_OFFER_AUTO_ACCEPT_ENABLED = "bestOfferAutoAcceptEnabled";
  @SerializedName(SERIALIZED_NAME_BEST_OFFER_AUTO_ACCEPT_ENABLED)
  private Boolean bestOfferAutoAcceptEnabled;

  public static final String SERIALIZED_NAME_BEST_OFFER_AUTO_DECLINE_ENABLED = "bestOfferAutoDeclineEnabled";
  @SerializedName(SERIALIZED_NAME_BEST_OFFER_AUTO_DECLINE_ENABLED)
  private Boolean bestOfferAutoDeclineEnabled;

  public static final String SERIALIZED_NAME_BEST_OFFER_COUNTER_ENABLED = "bestOfferCounterEnabled";
  @SerializedName(SERIALIZED_NAME_BEST_OFFER_COUNTER_ENABLED)
  private Boolean bestOfferCounterEnabled;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_TREE_ID = "categoryTreeId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE_ID)
  private String categoryTreeId;

  public NegotiatedPricePolicy() {
  }

  public NegotiatedPricePolicy bestOfferAutoAcceptEnabled(Boolean bestOfferAutoAcceptEnabled) {
    this.bestOfferAutoAcceptEnabled = bestOfferAutoAcceptEnabled;
    return this;
  }

  /**
   * This flag denotes whether or not the category supports the setting of a price at which best offers are automatically accepted. If set to &lt;code&gt;true&lt;/code&gt;, the category does support the setting of an automatic price for best-offers.
   * @return bestOfferAutoAcceptEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBestOfferAutoAcceptEnabled() {
    return bestOfferAutoAcceptEnabled;
  }

  public void setBestOfferAutoAcceptEnabled(Boolean bestOfferAutoAcceptEnabled) {
    this.bestOfferAutoAcceptEnabled = bestOfferAutoAcceptEnabled;
  }


  public NegotiatedPricePolicy bestOfferAutoDeclineEnabled(Boolean bestOfferAutoDeclineEnabled) {
    this.bestOfferAutoDeclineEnabled = bestOfferAutoDeclineEnabled;
    return this;
  }

  /**
   * This flag denotes whether or not the category supports the setting of an auto-decline price for best offers. If set to &lt;code&gt;true&lt;/code&gt;, the category does support the setting of an automatic-decline price for best-offers.
   * @return bestOfferAutoDeclineEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBestOfferAutoDeclineEnabled() {
    return bestOfferAutoDeclineEnabled;
  }

  public void setBestOfferAutoDeclineEnabled(Boolean bestOfferAutoDeclineEnabled) {
    this.bestOfferAutoDeclineEnabled = bestOfferAutoDeclineEnabled;
  }


  public NegotiatedPricePolicy bestOfferCounterEnabled(Boolean bestOfferCounterEnabled) {
    this.bestOfferCounterEnabled = bestOfferCounterEnabled;
    return this;
  }

  /**
   * This flag denotes whether or not the category supports the setting for an automatic counter-offer on best offers. If set to &lt;code&gt;true&lt;/code&gt;, the category does support the setting of an automatic counter-offer price for best-offers.
   * @return bestOfferCounterEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBestOfferCounterEnabled() {
    return bestOfferCounterEnabled;
  }

  public void setBestOfferCounterEnabled(Boolean bestOfferCounterEnabled) {
    this.bestOfferCounterEnabled = bestOfferCounterEnabled;
  }


  public NegotiatedPricePolicy categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The category ID to which the negotiated-price policies apply.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public NegotiatedPricePolicy categoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
    return this;
  }

  /**
   * A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    &lt;br&gt;&lt;br&gt;A &lt;i&gt;category tree&lt;/i&gt; is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique &lt;b&gt;categoryId&lt;/b&gt; value. Within a category tree, the root node has no parent node and &lt;i&gt;leaf nodes&lt;/i&gt; are nodes that have no child nodes.
   * @return categoryTreeId
   */
  @javax.annotation.Nullable
  public String getCategoryTreeId() {
    return categoryTreeId;
  }

  public void setCategoryTreeId(String categoryTreeId) {
    this.categoryTreeId = categoryTreeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegotiatedPricePolicy negotiatedPricePolicy = (NegotiatedPricePolicy) o;
    return Objects.equals(this.bestOfferAutoAcceptEnabled, negotiatedPricePolicy.bestOfferAutoAcceptEnabled) &&
        Objects.equals(this.bestOfferAutoDeclineEnabled, negotiatedPricePolicy.bestOfferAutoDeclineEnabled) &&
        Objects.equals(this.bestOfferCounterEnabled, negotiatedPricePolicy.bestOfferCounterEnabled) &&
        Objects.equals(this.categoryId, negotiatedPricePolicy.categoryId) &&
        Objects.equals(this.categoryTreeId, negotiatedPricePolicy.categoryTreeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestOfferAutoAcceptEnabled, bestOfferAutoDeclineEnabled, bestOfferCounterEnabled, categoryId, categoryTreeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegotiatedPricePolicy {\n");
    sb.append("    bestOfferAutoAcceptEnabled: ").append(toIndentedString(bestOfferAutoAcceptEnabled)).append("\n");
    sb.append("    bestOfferAutoDeclineEnabled: ").append(toIndentedString(bestOfferAutoDeclineEnabled)).append("\n");
    sb.append("    bestOfferCounterEnabled: ").append(toIndentedString(bestOfferCounterEnabled)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryTreeId: ").append(toIndentedString(categoryTreeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestOfferAutoAcceptEnabled");
    openapiFields.add("bestOfferAutoDeclineEnabled");
    openapiFields.add("bestOfferCounterEnabled");
    openapiFields.add("categoryId");
    openapiFields.add("categoryTreeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NegotiatedPricePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NegotiatedPricePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NegotiatedPricePolicy is not found in the empty JSON string", NegotiatedPricePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NegotiatedPricePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NegotiatedPricePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryTreeId") != null && !jsonObj.get("categoryTreeId").isJsonNull()) && !jsonObj.get("categoryTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTreeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NegotiatedPricePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NegotiatedPricePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NegotiatedPricePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NegotiatedPricePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<NegotiatedPricePolicy>() {
           @Override
           public void write(JsonWriter out, NegotiatedPricePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NegotiatedPricePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NegotiatedPricePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NegotiatedPricePolicy
   * @throws IOException if the JSON string is invalid with respect to NegotiatedPricePolicy
   */
  public static NegotiatedPricePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NegotiatedPricePolicy.class);
  }

  /**
   * Convert an instance of NegotiatedPricePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

