/*
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This container defines the category policies that relate to domestic and international return policies (the return shipping is made via a domestic or an international shipping service, respectively).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:30.278615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicyDetails {
  public static final String SERIALIZED_NAME_POLICY_DESCRIPTION_ENABLED = "policyDescriptionEnabled";
  @SerializedName(SERIALIZED_NAME_POLICY_DESCRIPTION_ENABLED)
  private Boolean policyDescriptionEnabled;

  public static final String SERIALIZED_NAME_REFUND_METHODS = "refundMethods";
  @SerializedName(SERIALIZED_NAME_REFUND_METHODS)
  private List<String> refundMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_METHODS = "returnMethods";
  @SerializedName(SERIALIZED_NAME_RETURN_METHODS)
  private List<String> returnMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_PERIODS = "returnPeriods";
  @SerializedName(SERIALIZED_NAME_RETURN_PERIODS)
  private List<TimeDuration> returnPeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_SHIPPING_COST_PAYERS = "returnShippingCostPayers";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING_COST_PAYERS)
  private List<String> returnShippingCostPayers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURNS_ACCEPTANCE_ENABLED = "returnsAcceptanceEnabled";
  @SerializedName(SERIALIZED_NAME_RETURNS_ACCEPTANCE_ENABLED)
  private Boolean returnsAcceptanceEnabled;

  public ReturnPolicyDetails() {
  }

  public ReturnPolicyDetails policyDescriptionEnabled(Boolean policyDescriptionEnabled) {
    this.policyDescriptionEnabled = policyDescriptionEnabled;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, this flag indicates you can supply a detailed return policy description within your return policy (for example, by populating the &lt;b&gt;returnInstructions&lt;/b&gt; field in the Account API&#39;s &lt;b&gt;createReturnPolicy&lt;/b&gt;). User-supplied return policy details are allowed only in the DE, ES, FR, and IT marketplaces.
   * @return policyDescriptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPolicyDescriptionEnabled() {
    return policyDescriptionEnabled;
  }

  public void setPolicyDescriptionEnabled(Boolean policyDescriptionEnabled) {
    this.policyDescriptionEnabled = policyDescriptionEnabled;
  }


  public ReturnPolicyDetails refundMethods(List<String> refundMethods) {
    this.refundMethods = refundMethods;
    return this;
  }

  public ReturnPolicyDetails addRefundMethodsItem(String refundMethodsItem) {
    if (this.refundMethods == null) {
      this.refundMethods = new ArrayList<>();
    }
    this.refundMethods.add(refundMethodsItem);
    return this;
  }

  /**
   * A list of refund methods allowed for the associated category.
   * @return refundMethods
   */
  @javax.annotation.Nullable
  public List<String> getRefundMethods() {
    return refundMethods;
  }

  public void setRefundMethods(List<String> refundMethods) {
    this.refundMethods = refundMethods;
  }


  public ReturnPolicyDetails returnMethods(List<String> returnMethods) {
    this.returnMethods = returnMethods;
    return this;
  }

  public ReturnPolicyDetails addReturnMethodsItem(String returnMethodsItem) {
    if (this.returnMethods == null) {
      this.returnMethods = new ArrayList<>();
    }
    this.returnMethods.add(returnMethodsItem);
    return this;
  }

  /**
   * A list of return methods allowed for the associated category.
   * @return returnMethods
   */
  @javax.annotation.Nullable
  public List<String> getReturnMethods() {
    return returnMethods;
  }

  public void setReturnMethods(List<String> returnMethods) {
    this.returnMethods = returnMethods;
  }


  public ReturnPolicyDetails returnPeriods(List<TimeDuration> returnPeriods) {
    this.returnPeriods = returnPeriods;
    return this;
  }

  public ReturnPolicyDetails addReturnPeriodsItem(TimeDuration returnPeriodsItem) {
    if (this.returnPeriods == null) {
      this.returnPeriods = new ArrayList<>();
    }
    this.returnPeriods.add(returnPeriodsItem);
    return this;
  }

  /**
   * A list of return periods allowed for the associated category.  &lt;br&gt;&lt;br&gt;Note that different APIs require you to enter the return period in different ways. For example, the Account API uses the complex &lt;b&gt;TimeDuration&lt;/b&gt; type, which takes two values (a &lt;b&gt;unit&lt;/b&gt; and a &lt;b&gt;value&lt;/b&gt;), whereas the Trading API takes a single value (such as &lt;code&gt;Days_30&lt;/code&gt;).
   * @return returnPeriods
   */
  @javax.annotation.Nullable
  public List<TimeDuration> getReturnPeriods() {
    return returnPeriods;
  }

  public void setReturnPeriods(List<TimeDuration> returnPeriods) {
    this.returnPeriods = returnPeriods;
  }


  public ReturnPolicyDetails returnShippingCostPayers(List<String> returnShippingCostPayers) {
    this.returnShippingCostPayers = returnShippingCostPayers;
    return this;
  }

  public ReturnPolicyDetails addReturnShippingCostPayersItem(String returnShippingCostPayersItem) {
    if (this.returnShippingCostPayers == null) {
      this.returnShippingCostPayers = new ArrayList<>();
    }
    this.returnShippingCostPayers.add(returnShippingCostPayersItem);
    return this;
  }

  /**
   * A list of allowed values for who pays for the return shipping cost.  &lt;br&gt;&lt;br&gt;Note that for SNAD returns, the seller is always responsible for the return shipping cost.
   * @return returnShippingCostPayers
   */
  @javax.annotation.Nullable
  public List<String> getReturnShippingCostPayers() {
    return returnShippingCostPayers;
  }

  public void setReturnShippingCostPayers(List<String> returnShippingCostPayers) {
    this.returnShippingCostPayers = returnShippingCostPayers;
  }


  public ReturnPolicyDetails returnsAcceptanceEnabled(Boolean returnsAcceptanceEnabled) {
    this.returnsAcceptanceEnabled = returnsAcceptanceEnabled;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, this flag indicates the seller can configure how they handle domestic returns.
   * @return returnsAcceptanceEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReturnsAcceptanceEnabled() {
    return returnsAcceptanceEnabled;
  }

  public void setReturnsAcceptanceEnabled(Boolean returnsAcceptanceEnabled) {
    this.returnsAcceptanceEnabled = returnsAcceptanceEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyDetails returnPolicyDetails = (ReturnPolicyDetails) o;
    return Objects.equals(this.policyDescriptionEnabled, returnPolicyDetails.policyDescriptionEnabled) &&
        Objects.equals(this.refundMethods, returnPolicyDetails.refundMethods) &&
        Objects.equals(this.returnMethods, returnPolicyDetails.returnMethods) &&
        Objects.equals(this.returnPeriods, returnPolicyDetails.returnPeriods) &&
        Objects.equals(this.returnShippingCostPayers, returnPolicyDetails.returnShippingCostPayers) &&
        Objects.equals(this.returnsAcceptanceEnabled, returnPolicyDetails.returnsAcceptanceEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyDescriptionEnabled, refundMethods, returnMethods, returnPeriods, returnShippingCostPayers, returnsAcceptanceEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyDetails {\n");
    sb.append("    policyDescriptionEnabled: ").append(toIndentedString(policyDescriptionEnabled)).append("\n");
    sb.append("    refundMethods: ").append(toIndentedString(refundMethods)).append("\n");
    sb.append("    returnMethods: ").append(toIndentedString(returnMethods)).append("\n");
    sb.append("    returnPeriods: ").append(toIndentedString(returnPeriods)).append("\n");
    sb.append("    returnShippingCostPayers: ").append(toIndentedString(returnShippingCostPayers)).append("\n");
    sb.append("    returnsAcceptanceEnabled: ").append(toIndentedString(returnsAcceptanceEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyDescriptionEnabled");
    openapiFields.add("refundMethods");
    openapiFields.add("returnMethods");
    openapiFields.add("returnPeriods");
    openapiFields.add("returnShippingCostPayers");
    openapiFields.add("returnsAcceptanceEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyDetails is not found in the empty JSON string", ReturnPolicyDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("refundMethods") != null && !jsonObj.get("refundMethods").isJsonNull() && !jsonObj.get("refundMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundMethods` to be an array in the JSON string but got `%s`", jsonObj.get("refundMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("returnMethods") != null && !jsonObj.get("returnMethods").isJsonNull() && !jsonObj.get("returnMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMethods` to be an array in the JSON string but got `%s`", jsonObj.get("returnMethods").toString()));
      }
      if (jsonObj.get("returnPeriods") != null && !jsonObj.get("returnPeriods").isJsonNull()) {
        JsonArray jsonArrayreturnPeriods = jsonObj.getAsJsonArray("returnPeriods");
        if (jsonArrayreturnPeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnPeriods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnPeriods` to be an array in the JSON string but got `%s`", jsonObj.get("returnPeriods").toString()));
          }

          // validate the optional field `returnPeriods` (array)
          for (int i = 0; i < jsonArrayreturnPeriods.size(); i++) {
            TimeDuration.validateJsonElement(jsonArrayreturnPeriods.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("returnShippingCostPayers") != null && !jsonObj.get("returnShippingCostPayers").isJsonNull() && !jsonObj.get("returnShippingCostPayers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnShippingCostPayers` to be an array in the JSON string but got `%s`", jsonObj.get("returnShippingCostPayers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyDetails>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyDetails
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyDetails
   */
  public static ReturnPolicyDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyDetails.class);
  }

  /**
   * Convert an instance of ReturnPolicyDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

