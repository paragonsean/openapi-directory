/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemCondition from './ItemCondition';

/**
 * The ItemConditionPolicy model module.
 * @module model/ItemConditionPolicy
 * @version v1.6.0
 */
class ItemConditionPolicy {
    /**
     * Constructs a new <code>ItemConditionPolicy</code>.
     * @alias module:model/ItemConditionPolicy
     */
    constructor() { 
        
        ItemConditionPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemConditionPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemConditionPolicy} obj Optional instance to populate.
     * @return {module:model/ItemConditionPolicy} The populated <code>ItemConditionPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemConditionPolicy();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('categoryTreeId')) {
                obj['categoryTreeId'] = ApiClient.convertToType(data['categoryTreeId'], 'String');
            }
            if (data.hasOwnProperty('itemConditionRequired')) {
                obj['itemConditionRequired'] = ApiClient.convertToType(data['itemConditionRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('itemConditions')) {
                obj['itemConditions'] = ApiClient.convertToType(data['itemConditions'], [ItemCondition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemConditionPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemConditionPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['categoryTreeId'] && !(typeof data['categoryTreeId'] === 'string' || data['categoryTreeId'] instanceof String)) {
            throw new Error("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got " + data['categoryTreeId']);
        }
        if (data['itemConditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemConditions'])) {
                throw new Error("Expected the field `itemConditions` to be an array in the JSON data but got " + data['itemConditions']);
            }
            // validate the optional field `itemConditions` (array)
            for (const item of data['itemConditions']) {
                ItemCondition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The category ID to which the item-condition policy applies.
 * @member {String} categoryId
 */
ItemConditionPolicy.prototype['categoryId'] = undefined;

/**
 * A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.
 * @member {String} categoryTreeId
 */
ItemConditionPolicy.prototype['categoryTreeId'] = undefined;

/**
 * This flag denotes whether or not you must list the item condition in a listing for the specified category. If set to <code>true</code>, you must specify an item condition for the associated category.
 * @member {Boolean} itemConditionRequired
 */
ItemConditionPolicy.prototype['itemConditionRequired'] = undefined;

/**
 * The item-condition values allowed in the category.<br /><br /><span class=\"tablenote\"><b>Note:</b> The ‘Seller Refurbished’ item condition (condition ID 2500) has been replaced by the 'Excellent - Refurbished', 'Very Good - Refurbished', and 'Good - Refurbished' item conditions in a select number of eBay marketplaces and categories. See the <a href=\"/api-docs/sell/static/metadata/condition-id-values.html#Category \" target=\"_blank \"> eBay Refurbished Program - Category and marketplace support</a> topic for more details.<br/><br/>Similar to the ‘Certified Refurbished’ item condition (condition ID 2000), a seller’s OAuth user token will have to be used instead of an OAuth application token, since each seller must  go through an application and qualification process before using any of these new refurbished item conditions in supported categories. If a seller is not qualified to use the new refurbished item conditions, these item condition values will not be returned by <b>getItemConditionPolicies</b>.</span>
 * @member {Array.<module:model/ItemCondition>} itemConditions
 */
ItemConditionPolicy.prototype['itemConditions'] = undefined;






export default ItemConditionPolicy;

