/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HazardStatement from './HazardStatement';
import Pictogram from './Pictogram';
import SignalWord from './SignalWord';

/**
 * The HazardousMaterialDetailsResponse model module.
 * @module model/HazardousMaterialDetailsResponse
 * @version v1.6.0
 */
class HazardousMaterialDetailsResponse {
    /**
     * Constructs a new <code>HazardousMaterialDetailsResponse</code>.
     * A type that defines the response fields for the &lt;b&gt;getHazardousMaterialsLabels&lt;/b&gt; method.
     * @alias module:model/HazardousMaterialDetailsResponse
     */
    constructor() { 
        
        HazardousMaterialDetailsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HazardousMaterialDetailsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HazardousMaterialDetailsResponse} obj Optional instance to populate.
     * @return {module:model/HazardousMaterialDetailsResponse} The populated <code>HazardousMaterialDetailsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HazardousMaterialDetailsResponse();

            if (data.hasOwnProperty('pictograms')) {
                obj['pictograms'] = ApiClient.convertToType(data['pictograms'], [Pictogram]);
            }
            if (data.hasOwnProperty('signalWords')) {
                obj['signalWords'] = ApiClient.convertToType(data['signalWords'], [SignalWord]);
            }
            if (data.hasOwnProperty('statements')) {
                obj['statements'] = ApiClient.convertToType(data['statements'], [HazardStatement]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HazardousMaterialDetailsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HazardousMaterialDetailsResponse</code>.
     */
    static validateJSON(data) {
        if (data['pictograms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pictograms'])) {
                throw new Error("Expected the field `pictograms` to be an array in the JSON data but got " + data['pictograms']);
            }
            // validate the optional field `pictograms` (array)
            for (const item of data['pictograms']) {
                Pictogram.validateJSON(item);
            };
        }
        if (data['signalWords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signalWords'])) {
                throw new Error("Expected the field `signalWords` to be an array in the JSON data but got " + data['signalWords']);
            }
            // validate the optional field `signalWords` (array)
            for (const item of data['signalWords']) {
                SignalWord.validateJSON(item);
            };
        }
        if (data['statements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statements'])) {
                throw new Error("Expected the field `statements` to be an array in the JSON data but got " + data['statements']);
            }
            // validate the optional field `statements` (array)
            for (const item of data['statements']) {
                HazardStatement.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This array contains of available hazardous materials hazard pictograms for the specified marketplace.
 * @member {Array.<module:model/Pictogram>} pictograms
 */
HazardousMaterialDetailsResponse.prototype['pictograms'] = undefined;

/**
 * This array contains available hazardous materials signal words for the specified marketplace.
 * @member {Array.<module:model/SignalWord>} signalWords
 */
HazardousMaterialDetailsResponse.prototype['signalWords'] = undefined;

/**
 * This array contains available hazardous materials hazard statements for the specified marketplace.
 * @member {Array.<module:model/HazardStatement>} statements
 */
HazardousMaterialDetailsResponse.prototype['statements'] = undefined;






export default HazardousMaterialDetailsResponse;

