/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeDuration from './TimeDuration';

/**
 * The ReturnPolicyDetails model module.
 * @module model/ReturnPolicyDetails
 * @version v1.6.0
 */
class ReturnPolicyDetails {
    /**
     * Constructs a new <code>ReturnPolicyDetails</code>.
     * This container defines the category policies that relate to domestic and international return policies (the return shipping is made via a domestic or an international shipping service, respectively).
     * @alias module:model/ReturnPolicyDetails
     */
    constructor() { 
        
        ReturnPolicyDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnPolicyDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnPolicyDetails} obj Optional instance to populate.
     * @return {module:model/ReturnPolicyDetails} The populated <code>ReturnPolicyDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnPolicyDetails();

            if (data.hasOwnProperty('policyDescriptionEnabled')) {
                obj['policyDescriptionEnabled'] = ApiClient.convertToType(data['policyDescriptionEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('refundMethods')) {
                obj['refundMethods'] = ApiClient.convertToType(data['refundMethods'], ['String']);
            }
            if (data.hasOwnProperty('returnMethods')) {
                obj['returnMethods'] = ApiClient.convertToType(data['returnMethods'], ['String']);
            }
            if (data.hasOwnProperty('returnPeriods')) {
                obj['returnPeriods'] = ApiClient.convertToType(data['returnPeriods'], [TimeDuration]);
            }
            if (data.hasOwnProperty('returnShippingCostPayers')) {
                obj['returnShippingCostPayers'] = ApiClient.convertToType(data['returnShippingCostPayers'], ['String']);
            }
            if (data.hasOwnProperty('returnsAcceptanceEnabled')) {
                obj['returnsAcceptanceEnabled'] = ApiClient.convertToType(data['returnsAcceptanceEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnPolicyDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnPolicyDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['refundMethods'])) {
            throw new Error("Expected the field `refundMethods` to be an array in the JSON data but got " + data['refundMethods']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['returnMethods'])) {
            throw new Error("Expected the field `returnMethods` to be an array in the JSON data but got " + data['returnMethods']);
        }
        if (data['returnPeriods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['returnPeriods'])) {
                throw new Error("Expected the field `returnPeriods` to be an array in the JSON data but got " + data['returnPeriods']);
            }
            // validate the optional field `returnPeriods` (array)
            for (const item of data['returnPeriods']) {
                TimeDuration.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['returnShippingCostPayers'])) {
            throw new Error("Expected the field `returnShippingCostPayers` to be an array in the JSON data but got " + data['returnShippingCostPayers']);
        }

        return true;
    }


}



/**
 * If set to <code>true</code>, this flag indicates you can supply a detailed return policy description within your return policy (for example, by populating the <b>returnInstructions</b> field in the Account API's <b>createReturnPolicy</b>). User-supplied return policy details are allowed only in the DE, ES, FR, and IT marketplaces.
 * @member {Boolean} policyDescriptionEnabled
 */
ReturnPolicyDetails.prototype['policyDescriptionEnabled'] = undefined;

/**
 * A list of refund methods allowed for the associated category.
 * @member {Array.<String>} refundMethods
 */
ReturnPolicyDetails.prototype['refundMethods'] = undefined;

/**
 * A list of return methods allowed for the associated category.
 * @member {Array.<String>} returnMethods
 */
ReturnPolicyDetails.prototype['returnMethods'] = undefined;

/**
 * A list of return periods allowed for the associated category.  <br><br>Note that different APIs require you to enter the return period in different ways. For example, the Account API uses the complex <b>TimeDuration</b> type, which takes two values (a <b>unit</b> and a <b>value</b>), whereas the Trading API takes a single value (such as <code>Days_30</code>).
 * @member {Array.<module:model/TimeDuration>} returnPeriods
 */
ReturnPolicyDetails.prototype['returnPeriods'] = undefined;

/**
 * A list of allowed values for who pays for the return shipping cost.  <br><br>Note that for SNAD returns, the seller is always responsible for the return shipping cost.
 * @member {Array.<String>} returnShippingCostPayers
 */
ReturnPolicyDetails.prototype['returnShippingCostPayers'] = undefined;

/**
 * If set to <code>true</code>, this flag indicates the seller can configure how they handle domestic returns.
 * @member {Boolean} returnsAcceptanceEnabled
 */
ReturnPolicyDetails.prototype['returnsAcceptanceEnabled'] = undefined;






export default ReturnPolicyDetails;

