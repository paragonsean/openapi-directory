/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListingStructurePolicy model module.
 * @module model/ListingStructurePolicy
 * @version v1.6.0
 */
class ListingStructurePolicy {
    /**
     * Constructs a new <code>ListingStructurePolicy</code>.
     * @alias module:model/ListingStructurePolicy
     */
    constructor() { 
        
        ListingStructurePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListingStructurePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingStructurePolicy} obj Optional instance to populate.
     * @return {module:model/ListingStructurePolicy} The populated <code>ListingStructurePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingStructurePolicy();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('categoryTreeId')) {
                obj['categoryTreeId'] = ApiClient.convertToType(data['categoryTreeId'], 'String');
            }
            if (data.hasOwnProperty('variationsSupported')) {
                obj['variationsSupported'] = ApiClient.convertToType(data['variationsSupported'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingStructurePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingStructurePolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['categoryTreeId'] && !(typeof data['categoryTreeId'] === 'string' || data['categoryTreeId'] instanceof String)) {
            throw new Error("Expected the field `categoryTreeId` to be a primitive type in the JSON string but got " + data['categoryTreeId']);
        }

        return true;
    }


}



/**
 * The category ID to which the listing-structure policy applies.
 * @member {String} categoryId
 */
ListingStructurePolicy.prototype['categoryId'] = undefined;

/**
 * A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.
 * @member {String} categoryTreeId
 */
ListingStructurePolicy.prototype['categoryTreeId'] = undefined;

/**
 * This flag denotes whether or not the associated category supports listings with item variations. If set to <code>true</code>, the category does support item variations.
 * @member {Boolean} variationsSupported
 */
ListingStructurePolicy.prototype['variationsSupported'] = undefined;






export default ListingStructurePolicy;

