/**
 * Metadata API
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemCondition model module.
 * @module model/ItemCondition
 * @version v1.6.0
 */
class ItemCondition {
    /**
     * Constructs a new <code>ItemCondition</code>.
     * &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt;In all eBay marketplaces, Condition ID 2000 now maps to an item condition of &#39;Certified Refurbished&#39;, and not &#39;Manufacturer Refurbished&#39;. To list an item as &#39;Certified Refurbished&#39;, a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition. Any active listings on any eBay marketplace that had &#39;Manufacturer Refurbished&#39; as the item condition should have been automatically updated by eBay to the &#39;Seller Refurbished&#39; item condition (Condition ID 2500). &lt;br&gt;&lt;br&gt; Any seller that is interested in eligibility requirements to list with &#39;Certified Refurbished&#39; should see the &lt;a href&#x3D;\&quot;https://pages.ebay.com/seller-center/listing-and-marketing/certified-refurbished-program.html \&quot; target&#x3D;\&quot;_blank\&quot;&gt;Certified refurbished program&lt;/a&gt; page in Seller Center. &lt;/span&gt;
     * @alias module:model/ItemCondition
     */
    constructor() { 
        
        ItemCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemCondition} obj Optional instance to populate.
     * @return {module:model/ItemCondition} The populated <code>ItemCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemCondition();

            if (data.hasOwnProperty('conditionDescription')) {
                obj['conditionDescription'] = ApiClient.convertToType(data['conditionDescription'], 'String');
            }
            if (data.hasOwnProperty('conditionId')) {
                obj['conditionId'] = ApiClient.convertToType(data['conditionId'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conditionDescription'] && !(typeof data['conditionDescription'] === 'string' || data['conditionDescription'] instanceof String)) {
            throw new Error("Expected the field `conditionDescription` to be a primitive type in the JSON string but got " + data['conditionDescription']);
        }
        // ensure the json data is a string
        if (data['conditionId'] && !(typeof data['conditionId'] === 'string' || data['conditionId'] instanceof String)) {
            throw new Error("Expected the field `conditionId` to be a primitive type in the JSON string but got " + data['conditionId']);
        }
        // ensure the json data is a string
        if (data['usage'] && !(typeof data['usage'] === 'string' || data['usage'] instanceof String)) {
            throw new Error("Expected the field `usage` to be a primitive type in the JSON string but got " + data['usage']);
        }

        return true;
    }


}



/**
 * The human-readable label for the condition (e.g., \"New\"). This value is typically localized for each site.  <br><br>Note that the display name can vary by category. For example, the description for condition ID <code>1000</code> could be called \"New: with Tags\" in one category and \"Brand New\" in another. For details on condition IDs and descriptions, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>.
 * @member {String} conditionDescription
 */
ItemCondition.prototype['conditionDescription'] = undefined;

/**
 * The ID value of the selected item condition. For information on the supported condition ID values, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>.
 * @member {String} conditionId
 */
ItemCondition.prototype['conditionId'] = undefined;

/**
 * The value returned in this field indicates if there are any usage restrictions or requirements for the corresponding item condition in the corresponding category.<br /><br /><span class=\"tablenote\"><b>Note:</b> Currently, the only supported value is 'RESTRICTED', and this field will only be returned for the following conditions: 2000, 2010, 2020, 2030. Sellers must be pre-approved to use any of these item conditions.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:UsageEnum'>eBay API documentation</a>
 * @member {String} usage
 */
ItemCondition.prototype['usage'] = undefined;






export default ItemCondition;

