# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_description: str=None, condition_id: str=None, usage: str=None):
        """ItemCondition - a model defined in OpenAPI

        :param condition_description: The condition_description of this ItemCondition.
        :param condition_id: The condition_id of this ItemCondition.
        :param usage: The usage of this ItemCondition.
        """
        self.openapi_types = {
            'condition_description': str,
            'condition_id': str,
            'usage': str
        }

        self.attribute_map = {
            'condition_description': 'conditionDescription',
            'condition_id': 'conditionId',
            'usage': 'usage'
        }

        self._condition_description = condition_description
        self._condition_id = condition_id
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemCondition of this ItemCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_description(self):
        """Gets the condition_description of this ItemCondition.

        The human-readable label for the condition (e.g., \"New\"). This value is typically localized for each site.  <br><br>Note that the display name can vary by category. For example, the description for condition ID <code>1000</code> could be called \"New: with Tags\" in one category and \"Brand New\" in another. For details on condition IDs and descriptions, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>.

        :return: The condition_description of this ItemCondition.
        :rtype: str
        """
        return self._condition_description

    @condition_description.setter
    def condition_description(self, condition_description):
        """Sets the condition_description of this ItemCondition.

        The human-readable label for the condition (e.g., \"New\"). This value is typically localized for each site.  <br><br>Note that the display name can vary by category. For example, the description for condition ID <code>1000</code> could be called \"New: with Tags\" in one category and \"Brand New\" in another. For details on condition IDs and descriptions, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>.

        :param condition_description: The condition_description of this ItemCondition.
        :type condition_description: str
        """

        self._condition_description = condition_description

    @property
    def condition_id(self):
        """Gets the condition_id of this ItemCondition.

        The ID value of the selected item condition. For information on the supported condition ID values, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>.

        :return: The condition_id of this ItemCondition.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this ItemCondition.

        The ID value of the selected item condition. For information on the supported condition ID values, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>.

        :param condition_id: The condition_id of this ItemCondition.
        :type condition_id: str
        """

        self._condition_id = condition_id

    @property
    def usage(self):
        """Gets the usage of this ItemCondition.

        The value returned in this field indicates if there are any usage restrictions or requirements for the corresponding item condition in the corresponding category.<br /><br /><span class=\"tablenote\"><b>Note:</b> Currently, the only supported value is 'RESTRICTED', and this field will only be returned for the following conditions: 2000, 2010, 2020, 2030. Sellers must be pre-approved to use any of these item conditions.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:UsageEnum'>eBay API documentation</a>

        :return: The usage of this ItemCondition.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this ItemCondition.

        The value returned in this field indicates if there are any usage restrictions or requirements for the corresponding item condition in the corresponding category.<br /><br /><span class=\"tablenote\"><b>Note:</b> Currently, the only supported value is 'RESTRICTED', and this field will only be returned for the following conditions: 2000, 2010, 2020, 2030. Sellers must be pre-approved to use any of these item conditions.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:UsageEnum'>eBay API documentation</a>

        :param usage: The usage of this ItemCondition.
        :type usage: str
        """

        self._usage = usage
