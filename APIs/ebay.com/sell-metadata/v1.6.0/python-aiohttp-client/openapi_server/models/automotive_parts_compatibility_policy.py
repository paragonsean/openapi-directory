# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomotivePartsCompatibilityPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_tree_id: str=None, compatibility_based_on: str=None, compatible_vehicle_types: List[str]=None, max_number_of_compatible_vehicles: int=None):
        """AutomotivePartsCompatibilityPolicy - a model defined in OpenAPI

        :param category_id: The category_id of this AutomotivePartsCompatibilityPolicy.
        :param category_tree_id: The category_tree_id of this AutomotivePartsCompatibilityPolicy.
        :param compatibility_based_on: The compatibility_based_on of this AutomotivePartsCompatibilityPolicy.
        :param compatible_vehicle_types: The compatible_vehicle_types of this AutomotivePartsCompatibilityPolicy.
        :param max_number_of_compatible_vehicles: The max_number_of_compatible_vehicles of this AutomotivePartsCompatibilityPolicy.
        """
        self.openapi_types = {
            'category_id': str,
            'category_tree_id': str,
            'compatibility_based_on': str,
            'compatible_vehicle_types': List[str],
            'max_number_of_compatible_vehicles': int
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_tree_id': 'categoryTreeId',
            'compatibility_based_on': 'compatibilityBasedOn',
            'compatible_vehicle_types': 'compatibleVehicleTypes',
            'max_number_of_compatible_vehicles': 'maxNumberOfCompatibleVehicles'
        }

        self._category_id = category_id
        self._category_tree_id = category_tree_id
        self._compatibility_based_on = compatibility_based_on
        self._compatible_vehicle_types = compatible_vehicle_types
        self._max_number_of_compatible_vehicles = max_number_of_compatible_vehicles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomotivePartsCompatibilityPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomotivePartsCompatibilityPolicy of this AutomotivePartsCompatibilityPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this AutomotivePartsCompatibilityPolicy.

        The category ID to which the automotive-parts-compatibility policies apply.

        :return: The category_id of this AutomotivePartsCompatibilityPolicy.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AutomotivePartsCompatibilityPolicy.

        The category ID to which the automotive-parts-compatibility policies apply.

        :param category_id: The category_id of this AutomotivePartsCompatibilityPolicy.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this AutomotivePartsCompatibilityPolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :return: The category_tree_id of this AutomotivePartsCompatibilityPolicy.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this AutomotivePartsCompatibilityPolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :param category_tree_id: The category_tree_id of this AutomotivePartsCompatibilityPolicy.
        :type category_tree_id: str
        """

        self._category_tree_id = category_tree_id

    @property
    def compatibility_based_on(self):
        """Gets the compatibility_based_on of this AutomotivePartsCompatibilityPolicy.

        Indicates whether the category supports parts compatibility by either <code>ASSEMBLY</code> or by <code>SPECIFICATION</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:CompatibilityTypeEnum'>eBay API documentation</a>

        :return: The compatibility_based_on of this AutomotivePartsCompatibilityPolicy.
        :rtype: str
        """
        return self._compatibility_based_on

    @compatibility_based_on.setter
    def compatibility_based_on(self, compatibility_based_on):
        """Sets the compatibility_based_on of this AutomotivePartsCompatibilityPolicy.

        Indicates whether the category supports parts compatibility by either <code>ASSEMBLY</code> or by <code>SPECIFICATION</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:CompatibilityTypeEnum'>eBay API documentation</a>

        :param compatibility_based_on: The compatibility_based_on of this AutomotivePartsCompatibilityPolicy.
        :type compatibility_based_on: str
        """

        self._compatibility_based_on = compatibility_based_on

    @property
    def compatible_vehicle_types(self):
        """Gets the compatible_vehicle_types of this AutomotivePartsCompatibilityPolicy.

        Indicates the compatibility classification of the part based on high-level vehicle types.

        :return: The compatible_vehicle_types of this AutomotivePartsCompatibilityPolicy.
        :rtype: List[str]
        """
        return self._compatible_vehicle_types

    @compatible_vehicle_types.setter
    def compatible_vehicle_types(self, compatible_vehicle_types):
        """Sets the compatible_vehicle_types of this AutomotivePartsCompatibilityPolicy.

        Indicates the compatibility classification of the part based on high-level vehicle types.

        :param compatible_vehicle_types: The compatible_vehicle_types of this AutomotivePartsCompatibilityPolicy.
        :type compatible_vehicle_types: List[str]
        """

        self._compatible_vehicle_types = compatible_vehicle_types

    @property
    def max_number_of_compatible_vehicles(self):
        """Gets the max_number_of_compatible_vehicles of this AutomotivePartsCompatibilityPolicy.

        Specifies the maximum number of compatible vehicle-applications allowed per item.

        :return: The max_number_of_compatible_vehicles of this AutomotivePartsCompatibilityPolicy.
        :rtype: int
        """
        return self._max_number_of_compatible_vehicles

    @max_number_of_compatible_vehicles.setter
    def max_number_of_compatible_vehicles(self, max_number_of_compatible_vehicles):
        """Sets the max_number_of_compatible_vehicles of this AutomotivePartsCompatibilityPolicy.

        Specifies the maximum number of compatible vehicle-applications allowed per item.

        :param max_number_of_compatible_vehicles: The max_number_of_compatible_vehicles of this AutomotivePartsCompatibilityPolicy.
        :type max_number_of_compatible_vehicles: int
        """

        self._max_number_of_compatible_vehicles = max_number_of_compatible_vehicles
