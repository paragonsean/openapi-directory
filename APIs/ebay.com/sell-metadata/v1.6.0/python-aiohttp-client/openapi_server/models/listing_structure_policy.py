# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListingStructurePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_tree_id: str=None, variations_supported: bool=None):
        """ListingStructurePolicy - a model defined in OpenAPI

        :param category_id: The category_id of this ListingStructurePolicy.
        :param category_tree_id: The category_tree_id of this ListingStructurePolicy.
        :param variations_supported: The variations_supported of this ListingStructurePolicy.
        """
        self.openapi_types = {
            'category_id': str,
            'category_tree_id': str,
            'variations_supported': bool
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_tree_id': 'categoryTreeId',
            'variations_supported': 'variationsSupported'
        }

        self._category_id = category_id
        self._category_tree_id = category_tree_id
        self._variations_supported = variations_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingStructurePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListingStructurePolicy of this ListingStructurePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this ListingStructurePolicy.

        The category ID to which the listing-structure policy applies.

        :return: The category_id of this ListingStructurePolicy.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ListingStructurePolicy.

        The category ID to which the listing-structure policy applies.

        :param category_id: The category_id of this ListingStructurePolicy.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this ListingStructurePolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :return: The category_tree_id of this ListingStructurePolicy.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this ListingStructurePolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :param category_tree_id: The category_tree_id of this ListingStructurePolicy.
        :type category_tree_id: str
        """

        self._category_tree_id = category_tree_id

    @property
    def variations_supported(self):
        """Gets the variations_supported of this ListingStructurePolicy.

        This flag denotes whether or not the associated category supports listings with item variations. If set to <code>true</code>, the category does support item variations.

        :return: The variations_supported of this ListingStructurePolicy.
        :rtype: bool
        """
        return self._variations_supported

    @variations_supported.setter
    def variations_supported(self, variations_supported):
        """Sets the variations_supported of this ListingStructurePolicy.

        This flag denotes whether or not the associated category supports listings with item variations. If set to <code>true</code>, the category does support item variations.

        :param variations_supported: The variations_supported of this ListingStructurePolicy.
        :type variations_supported: bool
        """

        self._variations_supported = variations_supported
