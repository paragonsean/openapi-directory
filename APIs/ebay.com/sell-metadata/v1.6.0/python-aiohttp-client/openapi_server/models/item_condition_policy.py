# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_condition import ItemCondition
from openapi_server import util


class ItemConditionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_tree_id: str=None, item_condition_required: bool=None, item_conditions: List[ItemCondition]=None):
        """ItemConditionPolicy - a model defined in OpenAPI

        :param category_id: The category_id of this ItemConditionPolicy.
        :param category_tree_id: The category_tree_id of this ItemConditionPolicy.
        :param item_condition_required: The item_condition_required of this ItemConditionPolicy.
        :param item_conditions: The item_conditions of this ItemConditionPolicy.
        """
        self.openapi_types = {
            'category_id': str,
            'category_tree_id': str,
            'item_condition_required': bool,
            'item_conditions': List[ItemCondition]
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_tree_id': 'categoryTreeId',
            'item_condition_required': 'itemConditionRequired',
            'item_conditions': 'itemConditions'
        }

        self._category_id = category_id
        self._category_tree_id = category_tree_id
        self._item_condition_required = item_condition_required
        self._item_conditions = item_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemConditionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemConditionPolicy of this ItemConditionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this ItemConditionPolicy.

        The category ID to which the item-condition policy applies.

        :return: The category_id of this ItemConditionPolicy.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ItemConditionPolicy.

        The category ID to which the item-condition policy applies.

        :param category_id: The category_id of this ItemConditionPolicy.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this ItemConditionPolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :return: The category_tree_id of this ItemConditionPolicy.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this ItemConditionPolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :param category_tree_id: The category_tree_id of this ItemConditionPolicy.
        :type category_tree_id: str
        """

        self._category_tree_id = category_tree_id

    @property
    def item_condition_required(self):
        """Gets the item_condition_required of this ItemConditionPolicy.

        This flag denotes whether or not you must list the item condition in a listing for the specified category. If set to <code>true</code>, you must specify an item condition for the associated category.

        :return: The item_condition_required of this ItemConditionPolicy.
        :rtype: bool
        """
        return self._item_condition_required

    @item_condition_required.setter
    def item_condition_required(self, item_condition_required):
        """Sets the item_condition_required of this ItemConditionPolicy.

        This flag denotes whether or not you must list the item condition in a listing for the specified category. If set to <code>true</code>, you must specify an item condition for the associated category.

        :param item_condition_required: The item_condition_required of this ItemConditionPolicy.
        :type item_condition_required: bool
        """

        self._item_condition_required = item_condition_required

    @property
    def item_conditions(self):
        """Gets the item_conditions of this ItemConditionPolicy.

        The item-condition values allowed in the category.<br /><br /><span class=\"tablenote\"><b>Note:</b> The ‘Seller Refurbished’ item condition (condition ID 2500) has been replaced by the 'Excellent - Refurbished', 'Very Good - Refurbished', and 'Good - Refurbished' item conditions in a select number of eBay marketplaces and categories. See the <a href=\"/api-docs/sell/static/metadata/condition-id-values.html#Category \" target=\"_blank \"> eBay Refurbished Program - Category and marketplace support</a> topic for more details.<br/><br/>Similar to the ‘Certified Refurbished’ item condition (condition ID 2000), a seller’s OAuth user token will have to be used instead of an OAuth application token, since each seller must  go through an application and qualification process before using any of these new refurbished item conditions in supported categories. If a seller is not qualified to use the new refurbished item conditions, these item condition values will not be returned by <b>getItemConditionPolicies</b>.</span>

        :return: The item_conditions of this ItemConditionPolicy.
        :rtype: List[ItemCondition]
        """
        return self._item_conditions

    @item_conditions.setter
    def item_conditions(self, item_conditions):
        """Sets the item_conditions of this ItemConditionPolicy.

        The item-condition values allowed in the category.<br /><br /><span class=\"tablenote\"><b>Note:</b> The ‘Seller Refurbished’ item condition (condition ID 2500) has been replaced by the 'Excellent - Refurbished', 'Very Good - Refurbished', and 'Good - Refurbished' item conditions in a select number of eBay marketplaces and categories. See the <a href=\"/api-docs/sell/static/metadata/condition-id-values.html#Category \" target=\"_blank \"> eBay Refurbished Program - Category and marketplace support</a> topic for more details.<br/><br/>Similar to the ‘Certified Refurbished’ item condition (condition ID 2000), a seller’s OAuth user token will have to be used instead of an OAuth application token, since each seller must  go through an application and qualification process before using any of these new refurbished item conditions in supported categories. If a seller is not qualified to use the new refurbished item conditions, these item condition values will not be returned by <b>getItemConditionPolicies</b>.</span>

        :param item_conditions: The item_conditions of this ItemConditionPolicy.
        :type item_conditions: List[ItemCondition]
        """

        self._item_conditions = item_conditions
