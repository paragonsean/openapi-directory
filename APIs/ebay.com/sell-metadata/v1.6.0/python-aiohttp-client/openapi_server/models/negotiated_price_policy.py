# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiatedPricePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_offer_auto_accept_enabled: bool=None, best_offer_auto_decline_enabled: bool=None, best_offer_counter_enabled: bool=None, category_id: str=None, category_tree_id: str=None):
        """NegotiatedPricePolicy - a model defined in OpenAPI

        :param best_offer_auto_accept_enabled: The best_offer_auto_accept_enabled of this NegotiatedPricePolicy.
        :param best_offer_auto_decline_enabled: The best_offer_auto_decline_enabled of this NegotiatedPricePolicy.
        :param best_offer_counter_enabled: The best_offer_counter_enabled of this NegotiatedPricePolicy.
        :param category_id: The category_id of this NegotiatedPricePolicy.
        :param category_tree_id: The category_tree_id of this NegotiatedPricePolicy.
        """
        self.openapi_types = {
            'best_offer_auto_accept_enabled': bool,
            'best_offer_auto_decline_enabled': bool,
            'best_offer_counter_enabled': bool,
            'category_id': str,
            'category_tree_id': str
        }

        self.attribute_map = {
            'best_offer_auto_accept_enabled': 'bestOfferAutoAcceptEnabled',
            'best_offer_auto_decline_enabled': 'bestOfferAutoDeclineEnabled',
            'best_offer_counter_enabled': 'bestOfferCounterEnabled',
            'category_id': 'categoryId',
            'category_tree_id': 'categoryTreeId'
        }

        self._best_offer_auto_accept_enabled = best_offer_auto_accept_enabled
        self._best_offer_auto_decline_enabled = best_offer_auto_decline_enabled
        self._best_offer_counter_enabled = best_offer_counter_enabled
        self._category_id = category_id
        self._category_tree_id = category_tree_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiatedPricePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NegotiatedPricePolicy of this NegotiatedPricePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_offer_auto_accept_enabled(self):
        """Gets the best_offer_auto_accept_enabled of this NegotiatedPricePolicy.

        This flag denotes whether or not the category supports the setting of a price at which best offers are automatically accepted. If set to <code>true</code>, the category does support the setting of an automatic price for best-offers.

        :return: The best_offer_auto_accept_enabled of this NegotiatedPricePolicy.
        :rtype: bool
        """
        return self._best_offer_auto_accept_enabled

    @best_offer_auto_accept_enabled.setter
    def best_offer_auto_accept_enabled(self, best_offer_auto_accept_enabled):
        """Sets the best_offer_auto_accept_enabled of this NegotiatedPricePolicy.

        This flag denotes whether or not the category supports the setting of a price at which best offers are automatically accepted. If set to <code>true</code>, the category does support the setting of an automatic price for best-offers.

        :param best_offer_auto_accept_enabled: The best_offer_auto_accept_enabled of this NegotiatedPricePolicy.
        :type best_offer_auto_accept_enabled: bool
        """

        self._best_offer_auto_accept_enabled = best_offer_auto_accept_enabled

    @property
    def best_offer_auto_decline_enabled(self):
        """Gets the best_offer_auto_decline_enabled of this NegotiatedPricePolicy.

        This flag denotes whether or not the category supports the setting of an auto-decline price for best offers. If set to <code>true</code>, the category does support the setting of an automatic-decline price for best-offers.

        :return: The best_offer_auto_decline_enabled of this NegotiatedPricePolicy.
        :rtype: bool
        """
        return self._best_offer_auto_decline_enabled

    @best_offer_auto_decline_enabled.setter
    def best_offer_auto_decline_enabled(self, best_offer_auto_decline_enabled):
        """Sets the best_offer_auto_decline_enabled of this NegotiatedPricePolicy.

        This flag denotes whether or not the category supports the setting of an auto-decline price for best offers. If set to <code>true</code>, the category does support the setting of an automatic-decline price for best-offers.

        :param best_offer_auto_decline_enabled: The best_offer_auto_decline_enabled of this NegotiatedPricePolicy.
        :type best_offer_auto_decline_enabled: bool
        """

        self._best_offer_auto_decline_enabled = best_offer_auto_decline_enabled

    @property
    def best_offer_counter_enabled(self):
        """Gets the best_offer_counter_enabled of this NegotiatedPricePolicy.

        This flag denotes whether or not the category supports the setting for an automatic counter-offer on best offers. If set to <code>true</code>, the category does support the setting of an automatic counter-offer price for best-offers.

        :return: The best_offer_counter_enabled of this NegotiatedPricePolicy.
        :rtype: bool
        """
        return self._best_offer_counter_enabled

    @best_offer_counter_enabled.setter
    def best_offer_counter_enabled(self, best_offer_counter_enabled):
        """Sets the best_offer_counter_enabled of this NegotiatedPricePolicy.

        This flag denotes whether or not the category supports the setting for an automatic counter-offer on best offers. If set to <code>true</code>, the category does support the setting of an automatic counter-offer price for best-offers.

        :param best_offer_counter_enabled: The best_offer_counter_enabled of this NegotiatedPricePolicy.
        :type best_offer_counter_enabled: bool
        """

        self._best_offer_counter_enabled = best_offer_counter_enabled

    @property
    def category_id(self):
        """Gets the category_id of this NegotiatedPricePolicy.

        The category ID to which the negotiated-price policies apply.

        :return: The category_id of this NegotiatedPricePolicy.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this NegotiatedPricePolicy.

        The category ID to which the negotiated-price policies apply.

        :param category_id: The category_id of this NegotiatedPricePolicy.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this NegotiatedPricePolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :return: The category_tree_id of this NegotiatedPricePolicy.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this NegotiatedPricePolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :param category_tree_id: The category_tree_id of this NegotiatedPricePolicy.
        :type category_tree_id: str
        """

        self._category_tree_id = category_tree_id
