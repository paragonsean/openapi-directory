# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hazard_statement import HazardStatement
from openapi_server.models.pictogram import Pictogram
from openapi_server.models.signal_word import SignalWord
from openapi_server import util


class HazardousMaterialDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pictograms: List[Pictogram]=None, signal_words: List[SignalWord]=None, statements: List[HazardStatement]=None):
        """HazardousMaterialDetailsResponse - a model defined in OpenAPI

        :param pictograms: The pictograms of this HazardousMaterialDetailsResponse.
        :param signal_words: The signal_words of this HazardousMaterialDetailsResponse.
        :param statements: The statements of this HazardousMaterialDetailsResponse.
        """
        self.openapi_types = {
            'pictograms': List[Pictogram],
            'signal_words': List[SignalWord],
            'statements': List[HazardStatement]
        }

        self.attribute_map = {
            'pictograms': 'pictograms',
            'signal_words': 'signalWords',
            'statements': 'statements'
        }

        self._pictograms = pictograms
        self._signal_words = signal_words
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HazardousMaterialDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HazardousMaterialDetailsResponse of this HazardousMaterialDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pictograms(self):
        """Gets the pictograms of this HazardousMaterialDetailsResponse.

        This array contains of available hazardous materials hazard pictograms for the specified marketplace.

        :return: The pictograms of this HazardousMaterialDetailsResponse.
        :rtype: List[Pictogram]
        """
        return self._pictograms

    @pictograms.setter
    def pictograms(self, pictograms):
        """Sets the pictograms of this HazardousMaterialDetailsResponse.

        This array contains of available hazardous materials hazard pictograms for the specified marketplace.

        :param pictograms: The pictograms of this HazardousMaterialDetailsResponse.
        :type pictograms: List[Pictogram]
        """

        self._pictograms = pictograms

    @property
    def signal_words(self):
        """Gets the signal_words of this HazardousMaterialDetailsResponse.

        This array contains available hazardous materials signal words for the specified marketplace.

        :return: The signal_words of this HazardousMaterialDetailsResponse.
        :rtype: List[SignalWord]
        """
        return self._signal_words

    @signal_words.setter
    def signal_words(self, signal_words):
        """Sets the signal_words of this HazardousMaterialDetailsResponse.

        This array contains available hazardous materials signal words for the specified marketplace.

        :param signal_words: The signal_words of this HazardousMaterialDetailsResponse.
        :type signal_words: List[SignalWord]
        """

        self._signal_words = signal_words

    @property
    def statements(self):
        """Gets the statements of this HazardousMaterialDetailsResponse.

        This array contains available hazardous materials hazard statements for the specified marketplace.

        :return: The statements of this HazardousMaterialDetailsResponse.
        :rtype: List[HazardStatement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this HazardousMaterialDetailsResponse.

        This array contains available hazardous materials hazard statements for the specified marketplace.

        :param statements: The statements of this HazardousMaterialDetailsResponse.
        :type statements: List[HazardStatement]
        """

        self._statements = statements
