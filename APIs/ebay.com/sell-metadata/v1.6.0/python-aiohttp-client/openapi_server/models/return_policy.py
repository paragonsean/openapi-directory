# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_policy_details import ReturnPolicyDetails
from openapi_server import util


class ReturnPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_tree_id: str=None, domestic: ReturnPolicyDetails=None, international: ReturnPolicyDetails=None, required: bool=None):
        """ReturnPolicy - a model defined in OpenAPI

        :param category_id: The category_id of this ReturnPolicy.
        :param category_tree_id: The category_tree_id of this ReturnPolicy.
        :param domestic: The domestic of this ReturnPolicy.
        :param international: The international of this ReturnPolicy.
        :param required: The required of this ReturnPolicy.
        """
        self.openapi_types = {
            'category_id': str,
            'category_tree_id': str,
            'domestic': ReturnPolicyDetails,
            'international': ReturnPolicyDetails,
            'required': bool
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_tree_id': 'categoryTreeId',
            'domestic': 'domestic',
            'international': 'international',
            'required': 'required'
        }

        self._category_id = category_id
        self._category_tree_id = category_tree_id
        self._domestic = domestic
        self._international = international
        self._required = required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnPolicy of this ReturnPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this ReturnPolicy.

        The category ID to which the return policies apply.

        :return: The category_id of this ReturnPolicy.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ReturnPolicy.

        The category ID to which the return policies apply.

        :param category_id: The category_id of this ReturnPolicy.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_tree_id(self):
        """Gets the category_tree_id of this ReturnPolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :return: The category_tree_id of this ReturnPolicy.
        :rtype: str
        """
        return self._category_tree_id

    @category_tree_id.setter
    def category_tree_id(self, category_tree_id):
        """Sets the category_tree_id of this ReturnPolicy.

        A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.

        :param category_tree_id: The category_tree_id of this ReturnPolicy.
        :type category_tree_id: str
        """

        self._category_tree_id = category_tree_id

    @property
    def domestic(self):
        """Gets the domestic of this ReturnPolicy.


        :return: The domestic of this ReturnPolicy.
        :rtype: ReturnPolicyDetails
        """
        return self._domestic

    @domestic.setter
    def domestic(self, domestic):
        """Sets the domestic of this ReturnPolicy.


        :param domestic: The domestic of this ReturnPolicy.
        :type domestic: ReturnPolicyDetails
        """

        self._domestic = domestic

    @property
    def international(self):
        """Gets the international of this ReturnPolicy.


        :return: The international of this ReturnPolicy.
        :rtype: ReturnPolicyDetails
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this ReturnPolicy.


        :param international: The international of this ReturnPolicy.
        :type international: ReturnPolicyDetails
        """

        self._international = international

    @property
    def required(self):
        """Gets the required of this ReturnPolicy.

        If set to <code>true</code>, this flag indicates that you must specify a return policy for items listed in the associated category.  <br><br>Note that not accepting returns (setting <b>returnsAcceptedEnabled</b> to <code>false</code>) is a valid return policy.

        :return: The required of this ReturnPolicy.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ReturnPolicy.

        If set to <code>true</code>, this flag indicates that you must specify a return policy for items listed in the associated category.  <br><br>Note that not accepting returns (setting <b>returnsAcceptedEnabled</b> to <code>false</code>) is a valid return policy.

        :param required: The required of this ReturnPolicy.
        :type required: bool
        """

        self._required = required
