# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util


class BaseResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, warnings: List[Error]=None):
        """BaseResponse - a model defined in OpenAPI

        :param warnings: The warnings of this BaseResponse.
        """
        self.openapi_types = {
            'warnings': List[Error]
        }

        self.attribute_map = {
            'warnings': 'warnings'
        }

        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseResponse of this BaseResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def warnings(self):
        """Gets the warnings of this BaseResponse.

        The container for any warning error messages generated by the request. Warnings are not fatal in that they do not prevent the call from running and returning a response, but they should be reviewed to ensure your requests are returning the responses you expect.

        :return: The warnings of this BaseResponse.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this BaseResponse.

        The container for any warning error messages generated by the request. Warnings are not fatal in that they do not prevent the call from running and returning a response, but they should be reviewed to ensure your requests are returning the responses you expect.

        :param warnings: The warnings of this BaseResponse.
        :type warnings: List[Error]
        """

        self._warnings = warnings
