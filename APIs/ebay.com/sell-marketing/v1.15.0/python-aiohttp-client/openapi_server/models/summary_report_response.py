# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class SummaryReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_sale: Amount=None, last_updated: str=None, percentage_sales_lift: str=None, promotion_sale: Amount=None, total_sale: Amount=None):
        """SummaryReportResponse - a model defined in OpenAPI

        :param base_sale: The base_sale of this SummaryReportResponse.
        :param last_updated: The last_updated of this SummaryReportResponse.
        :param percentage_sales_lift: The percentage_sales_lift of this SummaryReportResponse.
        :param promotion_sale: The promotion_sale of this SummaryReportResponse.
        :param total_sale: The total_sale of this SummaryReportResponse.
        """
        self.openapi_types = {
            'base_sale': Amount,
            'last_updated': str,
            'percentage_sales_lift': str,
            'promotion_sale': Amount,
            'total_sale': Amount
        }

        self.attribute_map = {
            'base_sale': 'baseSale',
            'last_updated': 'lastUpdated',
            'percentage_sales_lift': 'percentageSalesLift',
            'promotion_sale': 'promotionSale',
            'total_sale': 'totalSale'
        }

        self._base_sale = base_sale
        self._last_updated = last_updated
        self._percentage_sales_lift = percentage_sales_lift
        self._promotion_sale = promotion_sale
        self._total_sale = total_sale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SummaryReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SummaryReportResponse of this SummaryReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_sale(self):
        """Gets the base_sale of this SummaryReportResponse.


        :return: The base_sale of this SummaryReportResponse.
        :rtype: Amount
        """
        return self._base_sale

    @base_sale.setter
    def base_sale(self, base_sale):
        """Sets the base_sale of this SummaryReportResponse.


        :param base_sale: The base_sale of this SummaryReportResponse.
        :type base_sale: Amount
        """

        self._base_sale = base_sale

    @property
    def last_updated(self):
        """Gets the last_updated of this SummaryReportResponse.

        The date the report was generated.

        :return: The last_updated of this SummaryReportResponse.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this SummaryReportResponse.

        The date the report was generated.

        :param last_updated: The last_updated of this SummaryReportResponse.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def percentage_sales_lift(self):
        """Gets the percentage_sales_lift of this SummaryReportResponse.

        The percentage of the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br><b>precentageSalesLift</b> = <b>promotionSale</b> / (<b>baseSale</b> + <b>promotionSale</b>)

        :return: The percentage_sales_lift of this SummaryReportResponse.
        :rtype: str
        """
        return self._percentage_sales_lift

    @percentage_sales_lift.setter
    def percentage_sales_lift(self, percentage_sales_lift):
        """Sets the percentage_sales_lift of this SummaryReportResponse.

        The percentage of the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br><b>precentageSalesLift</b> = <b>promotionSale</b> / (<b>baseSale</b> + <b>promotionSale</b>)

        :param percentage_sales_lift: The percentage_sales_lift of this SummaryReportResponse.
        :type percentage_sales_lift: str
        """

        self._percentage_sales_lift = percentage_sales_lift

    @property
    def promotion_sale(self):
        """Gets the promotion_sale of this SummaryReportResponse.


        :return: The promotion_sale of this SummaryReportResponse.
        :rtype: Amount
        """
        return self._promotion_sale

    @promotion_sale.setter
    def promotion_sale(self, promotion_sale):
        """Sets the promotion_sale of this SummaryReportResponse.


        :param promotion_sale: The promotion_sale of this SummaryReportResponse.
        :type promotion_sale: Amount
        """

        self._promotion_sale = promotion_sale

    @property
    def total_sale(self):
        """Gets the total_sale of this SummaryReportResponse.


        :return: The total_sale of this SummaryReportResponse.
        :rtype: Amount
        """
        return self._total_sale

    @total_sale.setter
    def total_sale(self, total_sale):
        """Sets the total_sale of this SummaryReportResponse.


        :param total_sale: The total_sale of this SummaryReportResponse.
        :type total_sale: Amount
        """

        self._total_sale = total_sale
