# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.selected_inventory_discount import SelectedInventoryDiscount
from openapi_server import util


class ItemPriceMarkdown(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_free_shipping: bool=None, auto_select_future_inventory: bool=None, block_price_increase_in_item_revision: bool=None, description: str=None, end_date: str=None, marketplace_id: str=None, name: str=None, priority: str=None, promotion_image_url: str=None, promotion_status: str=None, selected_inventory_discounts: List[SelectedInventoryDiscount]=None, start_date: str=None):
        """ItemPriceMarkdown - a model defined in OpenAPI

        :param apply_free_shipping: The apply_free_shipping of this ItemPriceMarkdown.
        :param auto_select_future_inventory: The auto_select_future_inventory of this ItemPriceMarkdown.
        :param block_price_increase_in_item_revision: The block_price_increase_in_item_revision of this ItemPriceMarkdown.
        :param description: The description of this ItemPriceMarkdown.
        :param end_date: The end_date of this ItemPriceMarkdown.
        :param marketplace_id: The marketplace_id of this ItemPriceMarkdown.
        :param name: The name of this ItemPriceMarkdown.
        :param priority: The priority of this ItemPriceMarkdown.
        :param promotion_image_url: The promotion_image_url of this ItemPriceMarkdown.
        :param promotion_status: The promotion_status of this ItemPriceMarkdown.
        :param selected_inventory_discounts: The selected_inventory_discounts of this ItemPriceMarkdown.
        :param start_date: The start_date of this ItemPriceMarkdown.
        """
        self.openapi_types = {
            'apply_free_shipping': bool,
            'auto_select_future_inventory': bool,
            'block_price_increase_in_item_revision': bool,
            'description': str,
            'end_date': str,
            'marketplace_id': str,
            'name': str,
            'priority': str,
            'promotion_image_url': str,
            'promotion_status': str,
            'selected_inventory_discounts': List[SelectedInventoryDiscount],
            'start_date': str
        }

        self.attribute_map = {
            'apply_free_shipping': 'applyFreeShipping',
            'auto_select_future_inventory': 'autoSelectFutureInventory',
            'block_price_increase_in_item_revision': 'blockPriceIncreaseInItemRevision',
            'description': 'description',
            'end_date': 'endDate',
            'marketplace_id': 'marketplaceId',
            'name': 'name',
            'priority': 'priority',
            'promotion_image_url': 'promotionImageUrl',
            'promotion_status': 'promotionStatus',
            'selected_inventory_discounts': 'selectedInventoryDiscounts',
            'start_date': 'startDate'
        }

        self._apply_free_shipping = apply_free_shipping
        self._auto_select_future_inventory = auto_select_future_inventory
        self._block_price_increase_in_item_revision = block_price_increase_in_item_revision
        self._description = description
        self._end_date = end_date
        self._marketplace_id = marketplace_id
        self._name = name
        self._priority = priority
        self._promotion_image_url = promotion_image_url
        self._promotion_status = promotion_status
        self._selected_inventory_discounts = selected_inventory_discounts
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemPriceMarkdown':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemPriceMarkdown of this ItemPriceMarkdown.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_free_shipping(self):
        """Gets the apply_free_shipping of this ItemPriceMarkdown.

        If set to <code>true</code>, free shipping is applied to the first shipping service specified for the item. The first domestic shipping option is set to \"free shipping,\" regardless if the shipping <b>optionType</b> for that service is set to <code>FLAT_RATE</code>, <code>CALCULATED</code>, or <code>NOT_SPECIFIED</code> (freight). This flag essentially adds free shipping as a promotional bonus. <br><br><b>Default:</b> <code>false</code>

        :return: The apply_free_shipping of this ItemPriceMarkdown.
        :rtype: bool
        """
        return self._apply_free_shipping

    @apply_free_shipping.setter
    def apply_free_shipping(self, apply_free_shipping):
        """Sets the apply_free_shipping of this ItemPriceMarkdown.

        If set to <code>true</code>, free shipping is applied to the first shipping service specified for the item. The first domestic shipping option is set to \"free shipping,\" regardless if the shipping <b>optionType</b> for that service is set to <code>FLAT_RATE</code>, <code>CALCULATED</code>, or <code>NOT_SPECIFIED</code> (freight). This flag essentially adds free shipping as a promotional bonus. <br><br><b>Default:</b> <code>false</code>

        :param apply_free_shipping: The apply_free_shipping of this ItemPriceMarkdown.
        :type apply_free_shipping: bool
        """

        self._apply_free_shipping = apply_free_shipping

    @property
    def auto_select_future_inventory(self):
        """Gets the auto_select_future_inventory of this ItemPriceMarkdown.

        If set to <code>true</code>, eBay will automatically add inventory items to the markdown promotion if they meet the <b>selectedInventoryDiscounts</b> criteria specified for the markdown promotion.  <br><br><b>Default:</b> <code>false</code>

        :return: The auto_select_future_inventory of this ItemPriceMarkdown.
        :rtype: bool
        """
        return self._auto_select_future_inventory

    @auto_select_future_inventory.setter
    def auto_select_future_inventory(self, auto_select_future_inventory):
        """Sets the auto_select_future_inventory of this ItemPriceMarkdown.

        If set to <code>true</code>, eBay will automatically add inventory items to the markdown promotion if they meet the <b>selectedInventoryDiscounts</b> criteria specified for the markdown promotion.  <br><br><b>Default:</b> <code>false</code>

        :param auto_select_future_inventory: The auto_select_future_inventory of this ItemPriceMarkdown.
        :type auto_select_future_inventory: bool
        """

        self._auto_select_future_inventory = auto_select_future_inventory

    @property
    def block_price_increase_in_item_revision(self):
        """Gets the block_price_increase_in_item_revision of this ItemPriceMarkdown.

        If set to <code>true</code>, price increases (including removing the free shipping flag) are blocked and an error message is returned if a seller attempts to adjust the price of an item that's partaking in this markdown promotion. If set to <code>false</code>, an item is dropped from the markdown promotion if the seller adjusts the price.  <br><br><b>Default:</b> <code>false</code>

        :return: The block_price_increase_in_item_revision of this ItemPriceMarkdown.
        :rtype: bool
        """
        return self._block_price_increase_in_item_revision

    @block_price_increase_in_item_revision.setter
    def block_price_increase_in_item_revision(self, block_price_increase_in_item_revision):
        """Sets the block_price_increase_in_item_revision of this ItemPriceMarkdown.

        If set to <code>true</code>, price increases (including removing the free shipping flag) are blocked and an error message is returned if a seller attempts to adjust the price of an item that's partaking in this markdown promotion. If set to <code>false</code>, an item is dropped from the markdown promotion if the seller adjusts the price.  <br><br><b>Default:</b> <code>false</code>

        :param block_price_increase_in_item_revision: The block_price_increase_in_item_revision of this ItemPriceMarkdown.
        :type block_price_increase_in_item_revision: bool
        """

        self._block_price_increase_in_item_revision = block_price_increase_in_item_revision

    @property
    def description(self):
        """Gets the description of this ItemPriceMarkdown.

        This field is required if you are configuring an MARKDOWN_SALE promotion. <br><br>This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\" A tag line appears under the \"offer-type text\" that is generated for the promotion. The text is displayed on the offer tile that is shown on the seller's <b>All Offers</b> page and on the event page for the promotion.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. This text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"20% off\".</p>  <br><b>Maximum length:</b> 50

        :return: The description of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemPriceMarkdown.

        This field is required if you are configuring an MARKDOWN_SALE promotion. <br><br>This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\" A tag line appears under the \"offer-type text\" that is generated for the promotion. The text is displayed on the offer tile that is shown on the seller's <b>All Offers</b> page and on the event page for the promotion.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. This text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"20% off\".</p>  <br><b>Maximum length:</b> 50

        :param description: The description of this ItemPriceMarkdown.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this ItemPriceMarkdown.

        The date and time the promotion ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). The value supplied for <b>endDate</b> must be at least 24 hours after the value supplied for the <b>startDate</b> of the markdown promotion.<br><br>For display purposes, convert this time into the local time of the seller.  <br><br><b>Max value:</b><ul><li><code>14</code> days for the AT, CH, DE, ES, FR, IE, IT, and UK, marketplaces.</li>  <li><code>45</code> days for all other marketplaces.</li></ul>

        :return: The end_date of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ItemPriceMarkdown.

        The date and time the promotion ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). The value supplied for <b>endDate</b> must be at least 24 hours after the value supplied for the <b>startDate</b> of the markdown promotion.<br><br>For display purposes, convert this time into the local time of the seller.  <br><br><b>Max value:</b><ul><li><code>14</code> days for the AT, CH, DE, ES, FR, IE, IT, and UK, marketplaces.</li>  <li><code>45</code> days for all other marketplaces.</li></ul>

        :param end_date: The end_date of this ItemPriceMarkdown.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this ItemPriceMarkdown.

        The eBay marketplace ID of the site where the markdown promotion is hosted. Markdown promotions are supported on all eBay marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :return: The marketplace_id of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this ItemPriceMarkdown.

        The eBay marketplace ID of the site where the markdown promotion is hosted. Markdown promotions are supported on all eBay marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :param marketplace_id: The marketplace_id of this ItemPriceMarkdown.
        :type marketplace_id: str
        """

        self._marketplace_id = marketplace_id

    @property
    def name(self):
        """Gets the name of this ItemPriceMarkdown.

        The seller-defined name or 'title' of the promotion that the seller can use to identify a promotion. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90

        :return: The name of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemPriceMarkdown.

        The seller-defined name or 'title' of the promotion that the seller can use to identify a promotion. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90

        :param name: The name of this ItemPriceMarkdown.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this ItemPriceMarkdown.

        This field is ignored in markdown promotions. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>

        :return: The priority of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ItemPriceMarkdown.

        This field is ignored in markdown promotions. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>

        :param priority: The priority of this ItemPriceMarkdown.
        :type priority: str
        """

        self._priority = priority

    @property
    def promotion_image_url(self):
        """Gets the promotion_image_url of this ItemPriceMarkdown.

        Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, populate this field with a URL that points to an image to be used with the promotion. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.

        :return: The promotion_image_url of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._promotion_image_url

    @promotion_image_url.setter
    def promotion_image_url(self, promotion_image_url):
        """Sets the promotion_image_url of this ItemPriceMarkdown.

        Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, populate this field with a URL that points to an image to be used with the promotion. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.

        :param promotion_image_url: The promotion_image_url of this ItemPriceMarkdown.
        :type promotion_image_url: str
        """

        self._promotion_image_url = promotion_image_url

    @property
    def promotion_status(self):
        """Gets the promotion_status of this ItemPriceMarkdown.

        The current status of the promotion. When creating a new promotion, you must set this value to either <code>DRAFT</code> or <code>SCHEDULED</code>.  <br><br>Note that you must set this value to <code>SCHEDULED</code> when you update a <b>RUNNING</b> promotion. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>

        :return: The promotion_status of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._promotion_status

    @promotion_status.setter
    def promotion_status(self, promotion_status):
        """Sets the promotion_status of this ItemPriceMarkdown.

        The current status of the promotion. When creating a new promotion, you must set this value to either <code>DRAFT</code> or <code>SCHEDULED</code>.  <br><br>Note that you must set this value to <code>SCHEDULED</code> when you update a <b>RUNNING</b> promotion. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>

        :param promotion_status: The promotion_status of this ItemPriceMarkdown.
        :type promotion_status: str
        """

        self._promotion_status = promotion_status

    @property
    def selected_inventory_discounts(self):
        """Gets the selected_inventory_discounts of this ItemPriceMarkdown.

        A list that defines the sets of selected items for the markdown promotion and the discount specified for promotion.

        :return: The selected_inventory_discounts of this ItemPriceMarkdown.
        :rtype: List[SelectedInventoryDiscount]
        """
        return self._selected_inventory_discounts

    @selected_inventory_discounts.setter
    def selected_inventory_discounts(self, selected_inventory_discounts):
        """Sets the selected_inventory_discounts of this ItemPriceMarkdown.

        A list that defines the sets of selected items for the markdown promotion and the discount specified for promotion.

        :param selected_inventory_discounts: The selected_inventory_discounts of this ItemPriceMarkdown.
        :type selected_inventory_discounts: List[SelectedInventoryDiscount]
        """

        self._selected_inventory_discounts = selected_inventory_discounts

    @property
    def start_date(self):
        """Gets the start_date of this ItemPriceMarkdown.

        The date and time the promotion starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.

        :return: The start_date of this ItemPriceMarkdown.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ItemPriceMarkdown.

        The date and time the promotion starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.

        :param start_date: The start_date of this ItemPriceMarkdown.
        :type start_date: str
        """

        self._start_date = start_date
