# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DynamicAdRatePreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_rate_adjustment_percent: str=None, ad_rate_cap_percent: str=None):
        """DynamicAdRatePreference - a model defined in OpenAPI

        :param ad_rate_adjustment_percent: The ad_rate_adjustment_percent of this DynamicAdRatePreference.
        :param ad_rate_cap_percent: The ad_rate_cap_percent of this DynamicAdRatePreference.
        """
        self.openapi_types = {
            'ad_rate_adjustment_percent': str,
            'ad_rate_cap_percent': str
        }

        self.attribute_map = {
            'ad_rate_adjustment_percent': 'adRateAdjustmentPercent',
            'ad_rate_cap_percent': 'adRateCapPercent'
        }

        self._ad_rate_adjustment_percent = ad_rate_adjustment_percent
        self._ad_rate_cap_percent = ad_rate_cap_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynamicAdRatePreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynamicAdRatePreference of this DynamicAdRatePreference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_rate_adjustment_percent(self):
        """Gets the ad_rate_adjustment_percent of this DynamicAdRatePreference.

        The percentage above or below (-) the eBay suggested ad rate that a seller is willing to pay.<br /><br />This specifies the maximum and minimum values to which an ad rate can be dynamically adjusted.

        :return: The ad_rate_adjustment_percent of this DynamicAdRatePreference.
        :rtype: str
        """
        return self._ad_rate_adjustment_percent

    @ad_rate_adjustment_percent.setter
    def ad_rate_adjustment_percent(self, ad_rate_adjustment_percent):
        """Sets the ad_rate_adjustment_percent of this DynamicAdRatePreference.

        The percentage above or below (-) the eBay suggested ad rate that a seller is willing to pay.<br /><br />This specifies the maximum and minimum values to which an ad rate can be dynamically adjusted.

        :param ad_rate_adjustment_percent: The ad_rate_adjustment_percent of this DynamicAdRatePreference.
        :type ad_rate_adjustment_percent: str
        """

        self._ad_rate_adjustment_percent = ad_rate_adjustment_percent

    @property
    def ad_rate_cap_percent(self):
        """Gets the ad_rate_cap_percent of this DynamicAdRatePreference.

        The maximum value (specified as a percentage) to which the eBay suggested ad rate can be adjusted. The adjusted ad rate will never exceed this percentage.

        :return: The ad_rate_cap_percent of this DynamicAdRatePreference.
        :rtype: str
        """
        return self._ad_rate_cap_percent

    @ad_rate_cap_percent.setter
    def ad_rate_cap_percent(self, ad_rate_cap_percent):
        """Sets the ad_rate_cap_percent of this DynamicAdRatePreference.

        The maximum value (specified as a percentage) to which the eBay suggested ad rate can be adjusted. The adjusted ad rate will never exceed this percentage.

        :param ad_rate_cap_percent: The ad_rate_cap_percent of this DynamicAdRatePreference.
        :type ad_rate_cap_percent: str
        """

        self._ad_rate_cap_percent = ad_rate_cap_percent
