# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.targeting_items import TargetingItems
from openapi_server import util


class TargetedAdsPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, suggested_items: List[TargetingItems]=None, total: int=None):
        """TargetedAdsPagedCollection - a model defined in OpenAPI

        :param href: The href of this TargetedAdsPagedCollection.
        :param limit: The limit of this TargetedAdsPagedCollection.
        :param next: The next of this TargetedAdsPagedCollection.
        :param offset: The offset of this TargetedAdsPagedCollection.
        :param prev: The prev of this TargetedAdsPagedCollection.
        :param suggested_items: The suggested_items of this TargetedAdsPagedCollection.
        :param total: The total of this TargetedAdsPagedCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'suggested_items': List[TargetingItems],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'suggested_items': 'suggestedItems',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._suggested_items = suggested_items
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetedAdsPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetedAdsPagedCollection of this TargetedAdsPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this TargetedAdsPagedCollection.

        The URI of the current page of results from the result set.

        :return: The href of this TargetedAdsPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this TargetedAdsPagedCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this TargetedAdsPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this TargetedAdsPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this TargetedAdsPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TargetedAdsPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this TargetedAdsPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this TargetedAdsPagedCollection.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set.

        :return: The next of this TargetedAdsPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this TargetedAdsPagedCollection.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set.

        :param next: The next of this TargetedAdsPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this TargetedAdsPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p><b>Default:</b> 0</p><br><span class=\"tablenote\"><b>Note: </b>The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :return: The offset of this TargetedAdsPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TargetedAdsPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p><b>Default:</b> 0</p><br><span class=\"tablenote\"><b>Note: </b>The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :param offset: The offset of this TargetedAdsPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this TargetedAdsPagedCollection.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results.

        :return: The prev of this TargetedAdsPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this TargetedAdsPagedCollection.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results.

        :param prev: The prev of this TargetedAdsPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def suggested_items(self):
        """Gets the suggested_items of this TargetedAdsPagedCollection.

        A list of suggested items in the paginated collection.

        :return: The suggested_items of this TargetedAdsPagedCollection.
        :rtype: List[TargetingItems]
        """
        return self._suggested_items

    @suggested_items.setter
    def suggested_items(self, suggested_items):
        """Sets the suggested_items of this TargetedAdsPagedCollection.

        A list of suggested items in the paginated collection.

        :param suggested_items: The suggested_items of this TargetedAdsPagedCollection.
        :type suggested_items: List[TargetingItems]
        """

        self._suggested_items = suggested_items

    @property
    def total(self):
        """Gets the total of this TargetedAdsPagedCollection.

        The total number of items retrieved in the result set.<br /><br /><span class=\"tablenote\"><b>Note: </b>If no items are found, this field is returned with a value of <code>0</code>.</span>

        :return: The total of this TargetedAdsPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TargetedAdsPagedCollection.

        The total number of items retrieved in the result set.<br /><br /><span class=\"tablenote\"><b>Note: </b>If no items are found, this field is returned with a value of <code>0</code>.</span>

        :param total: The total of this TargetedAdsPagedCollection.
        :type total: int
        """

        self._total = total
