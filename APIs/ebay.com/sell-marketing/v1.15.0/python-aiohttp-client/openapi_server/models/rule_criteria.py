# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inventory_item import InventoryItem
from openapi_server.models.selection_rule import SelectionRule
from openapi_server import util


class RuleCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude_inventory_items: List[InventoryItem]=None, exclude_listing_ids: List[str]=None, markup_inventory_items: List[InventoryItem]=None, markup_listing_ids: List[str]=None, selection_rules: List[SelectionRule]=None):
        """RuleCriteria - a model defined in OpenAPI

        :param exclude_inventory_items: The exclude_inventory_items of this RuleCriteria.
        :param exclude_listing_ids: The exclude_listing_ids of this RuleCriteria.
        :param markup_inventory_items: The markup_inventory_items of this RuleCriteria.
        :param markup_listing_ids: The markup_listing_ids of this RuleCriteria.
        :param selection_rules: The selection_rules of this RuleCriteria.
        """
        self.openapi_types = {
            'exclude_inventory_items': List[InventoryItem],
            'exclude_listing_ids': List[str],
            'markup_inventory_items': List[InventoryItem],
            'markup_listing_ids': List[str],
            'selection_rules': List[SelectionRule]
        }

        self.attribute_map = {
            'exclude_inventory_items': 'excludeInventoryItems',
            'exclude_listing_ids': 'excludeListingIds',
            'markup_inventory_items': 'markupInventoryItems',
            'markup_listing_ids': 'markupListingIds',
            'selection_rules': 'selectionRules'
        }

        self._exclude_inventory_items = exclude_inventory_items
        self._exclude_listing_ids = exclude_listing_ids
        self._markup_inventory_items = markup_inventory_items
        self._markup_listing_ids = markup_listing_ids
        self._selection_rules = selection_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleCriteria of this RuleCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude_inventory_items(self):
        """Gets the exclude_inventory_items of this RuleCriteria.

        A list of seller inventory reference IDs to exclude from the promotion.  <br><br><p class=\"tablenote\"><b>Note:</b> The request can have either <b>excludeInventoryItems</b> or <b>excludeListingIds</b> but not both.</p> <b>Maximum:</b> 100 parent items <br><b>Maximum SKU or custom label length:</b> 50 characters

        :return: The exclude_inventory_items of this RuleCriteria.
        :rtype: List[InventoryItem]
        """
        return self._exclude_inventory_items

    @exclude_inventory_items.setter
    def exclude_inventory_items(self, exclude_inventory_items):
        """Sets the exclude_inventory_items of this RuleCriteria.

        A list of seller inventory reference IDs to exclude from the promotion.  <br><br><p class=\"tablenote\"><b>Note:</b> The request can have either <b>excludeInventoryItems</b> or <b>excludeListingIds</b> but not both.</p> <b>Maximum:</b> 100 parent items <br><b>Maximum SKU or custom label length:</b> 50 characters

        :param exclude_inventory_items: The exclude_inventory_items of this RuleCriteria.
        :type exclude_inventory_items: List[InventoryItem]
        """

        self._exclude_inventory_items = exclude_inventory_items

    @property
    def exclude_listing_ids(self):
        """Gets the exclude_listing_ids of this RuleCriteria.

        A list of eBay listing IDs to exclude from the promotion.  <br><br><p class=\"tablenote\"><b>Note:</b> The request can have either <b>excludeInventoryItems</b> or <b>excludeListingIds</b> but not both.</p> <b>Maximum:</b> 100 parent items <br><b>Maximum SKU or custom label length:</b> 50 characters

        :return: The exclude_listing_ids of this RuleCriteria.
        :rtype: List[str]
        """
        return self._exclude_listing_ids

    @exclude_listing_ids.setter
    def exclude_listing_ids(self, exclude_listing_ids):
        """Sets the exclude_listing_ids of this RuleCriteria.

        A list of eBay listing IDs to exclude from the promotion.  <br><br><p class=\"tablenote\"><b>Note:</b> The request can have either <b>excludeInventoryItems</b> or <b>excludeListingIds</b> but not both.</p> <b>Maximum:</b> 100 parent items <br><b>Maximum SKU or custom label length:</b> 50 characters

        :param exclude_listing_ids: The exclude_listing_ids of this RuleCriteria.
        :type exclude_listing_ids: List[str]
        """

        self._exclude_listing_ids = exclude_listing_ids

    @property
    def markup_inventory_items(self):
        """Gets the markup_inventory_items of this RuleCriteria.

        A list of SKUs to remove from a markdown promotion. The listed SKUs are 'marked up' to their standard price after being part of the markdown promotion.

        :return: The markup_inventory_items of this RuleCriteria.
        :rtype: List[InventoryItem]
        """
        return self._markup_inventory_items

    @markup_inventory_items.setter
    def markup_inventory_items(self, markup_inventory_items):
        """Sets the markup_inventory_items of this RuleCriteria.

        A list of SKUs to remove from a markdown promotion. The listed SKUs are 'marked up' to their standard price after being part of the markdown promotion.

        :param markup_inventory_items: The markup_inventory_items of this RuleCriteria.
        :type markup_inventory_items: List[InventoryItem]
        """

        self._markup_inventory_items = markup_inventory_items

    @property
    def markup_listing_ids(self):
        """Gets the markup_listing_ids of this RuleCriteria.

        A list of listing IDs to remove from a markdown promotion. The listed items are 'marked up' to their standard price after being part of the markdown promotion.

        :return: The markup_listing_ids of this RuleCriteria.
        :rtype: List[str]
        """
        return self._markup_listing_ids

    @markup_listing_ids.setter
    def markup_listing_ids(self, markup_listing_ids):
        """Sets the markup_listing_ids of this RuleCriteria.

        A list of listing IDs to remove from a markdown promotion. The listed items are 'marked up' to their standard price after being part of the markdown promotion.

        :param markup_listing_ids: The markup_listing_ids of this RuleCriteria.
        :type markup_listing_ids: List[str]
        """

        self._markup_listing_ids = markup_listing_ids

    @property
    def selection_rules(self):
        """Gets the selection_rules of this RuleCriteria.

        The container for the rules that select the items to include in a promotion.  <br><br><i>Required if </i> <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>. <br><br>For information on using the contained fields, see <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>.

        :return: The selection_rules of this RuleCriteria.
        :rtype: List[SelectionRule]
        """
        return self._selection_rules

    @selection_rules.setter
    def selection_rules(self, selection_rules):
        """Sets the selection_rules of this RuleCriteria.

        The container for the rules that select the items to include in a promotion.  <br><br><i>Required if </i> <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>. <br><br>For information on using the contained fields, see <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>.

        :param selection_rules: The selection_rules of this RuleCriteria.
        :type selection_rules: List[SelectionRule]
        """

        self._selection_rules = selection_rules
