# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.negative_keyword import NegativeKeyword
from openapi_server import util


class NegativeKeywordPagedCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, negative_keywords: List[NegativeKeyword]=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """NegativeKeywordPagedCollectionResponse - a model defined in OpenAPI

        :param href: The href of this NegativeKeywordPagedCollectionResponse.
        :param limit: The limit of this NegativeKeywordPagedCollectionResponse.
        :param negative_keywords: The negative_keywords of this NegativeKeywordPagedCollectionResponse.
        :param next: The next of this NegativeKeywordPagedCollectionResponse.
        :param offset: The offset of this NegativeKeywordPagedCollectionResponse.
        :param prev: The prev of this NegativeKeywordPagedCollectionResponse.
        :param total: The total of this NegativeKeywordPagedCollectionResponse.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'negative_keywords': List[NegativeKeyword],
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'negative_keywords': 'negativeKeywords',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._negative_keywords = negative_keywords
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegativeKeywordPagedCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NegativeKeywordPagedCollectionResponse of this NegativeKeywordPagedCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this NegativeKeywordPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :return: The href of this NegativeKeywordPagedCollectionResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this NegativeKeywordPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :param href: The href of this NegativeKeywordPagedCollectionResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this NegativeKeywordPagedCollectionResponse.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this NegativeKeywordPagedCollectionResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this NegativeKeywordPagedCollectionResponse.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this NegativeKeywordPagedCollectionResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def negative_keywords(self):
        """Gets the negative_keywords of this NegativeKeywordPagedCollectionResponse.

        A list of negative keywords returned in the paginated collection.

        :return: The negative_keywords of this NegativeKeywordPagedCollectionResponse.
        :rtype: List[NegativeKeyword]
        """
        return self._negative_keywords

    @negative_keywords.setter
    def negative_keywords(self, negative_keywords):
        """Sets the negative_keywords of this NegativeKeywordPagedCollectionResponse.

        A list of negative keywords returned in the paginated collection.

        :param negative_keywords: The negative_keywords of this NegativeKeywordPagedCollectionResponse.
        :type negative_keywords: List[NegativeKeyword]
        """

        self._negative_keywords = negative_keywords

    @property
    def next(self):
        """Gets the next of this NegativeKeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set.

        :return: The next of this NegativeKeywordPagedCollectionResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this NegativeKeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set.

        :param next: The next of this NegativeKeywordPagedCollectionResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this NegativeKeywordPagedCollectionResponse.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter.<br /><br /><b>Default:</b> <code>0</code><br /><br /><span class=\"tablenote\"><b>Note: </b>The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :return: The offset of this NegativeKeywordPagedCollectionResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this NegativeKeywordPagedCollectionResponse.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter.<br /><br /><b>Default:</b> <code>0</code><br /><br /><span class=\"tablenote\"><b>Note: </b>The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :param offset: The offset of this NegativeKeywordPagedCollectionResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this NegativeKeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results.

        :return: The prev of this NegativeKeywordPagedCollectionResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this NegativeKeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results.

        :param prev: The prev of this NegativeKeywordPagedCollectionResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this NegativeKeywordPagedCollectionResponse.

        The total number of result sets in the paginated collection.

        :return: The total of this NegativeKeywordPagedCollectionResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NegativeKeywordPagedCollectionResponse.

        The total number of result sets in the paginated collection.

        :param total: The total of this NegativeKeywordPagedCollectionResponse.
        :type total: int
        """

        self._total = total
