# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_task import ReportTask
from openapi_server import util


class ReportTaskPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, report_tasks: List[ReportTask]=None, total: int=None):
        """ReportTaskPagedCollection - a model defined in OpenAPI

        :param href: The href of this ReportTaskPagedCollection.
        :param limit: The limit of this ReportTaskPagedCollection.
        :param next: The next of this ReportTaskPagedCollection.
        :param offset: The offset of this ReportTaskPagedCollection.
        :param prev: The prev of this ReportTaskPagedCollection.
        :param report_tasks: The report_tasks of this ReportTaskPagedCollection.
        :param total: The total of this ReportTaskPagedCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'report_tasks': List[ReportTask],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'report_tasks': 'reportTasks',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._report_tasks = report_tasks
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportTaskPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportTaskPagedCollection of this ReportTaskPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this ReportTaskPagedCollection.

        The URI of the current page of results from the result set.

        :return: The href of this ReportTaskPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ReportTaskPagedCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this ReportTaskPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this ReportTaskPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this ReportTaskPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ReportTaskPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this ReportTaskPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this ReportTaskPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The next of this ReportTaskPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this ReportTaskPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param next: The next of this ReportTaskPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this ReportTaskPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</span>

        :return: The offset of this ReportTaskPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ReportTaskPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</span>

        :param offset: The offset of this ReportTaskPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this ReportTaskPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The prev of this ReportTaskPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this ReportTaskPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param prev: The prev of this ReportTaskPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def report_tasks(self):
        """Gets the report_tasks of this ReportTaskPagedCollection.

        A list of report tasks contained on this page from the paginated response.

        :return: The report_tasks of this ReportTaskPagedCollection.
        :rtype: List[ReportTask]
        """
        return self._report_tasks

    @report_tasks.setter
    def report_tasks(self, report_tasks):
        """Sets the report_tasks of this ReportTaskPagedCollection.

        A list of report tasks contained on this page from the paginated response.

        :param report_tasks: The report_tasks of this ReportTaskPagedCollection.
        :type report_tasks: List[ReportTask]
        """

        self._report_tasks = report_tasks

    @property
    def total(self):
        """Gets the total of this ReportTaskPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :return: The total of this ReportTaskPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ReportTaskPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :param total: The total of this ReportTaskPagedCollection.
        :type total: int
        """

        self._total = total
