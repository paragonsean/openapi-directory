# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemBasis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_value: int=None, metric: str=None):
        """ItemBasis - a model defined in OpenAPI

        :param estimated_value: The estimated_value of this ItemBasis.
        :param metric: The metric of this ItemBasis.
        """
        self.openapi_types = {
            'estimated_value': int,
            'metric': str
        }

        self.attribute_map = {
            'estimated_value': 'estimatedValue',
            'metric': 'metric'
        }

        self._estimated_value = estimated_value
        self._metric = metric

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemBasis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemBasis of this ItemBasis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_value(self):
        """Gets the estimated_value of this ItemBasis.

        The estimated value of the search impressions for items based on the provided dimensions. <br /><br /><b>Duration:</b> 17 days<br /><br /><b>Total slots:</b> 200 <br /><br /><b>Channel:</b> Dweb, Mweb, Native

        :return: The estimated_value of this ItemBasis.
        :rtype: int
        """
        return self._estimated_value

    @estimated_value.setter
    def estimated_value(self, estimated_value):
        """Sets the estimated_value of this ItemBasis.

        The estimated value of the search impressions for items based on the provided dimensions. <br /><br /><b>Duration:</b> 17 days<br /><br /><b>Total slots:</b> 200 <br /><br /><b>Channel:</b> Dweb, Mweb, Native

        :param estimated_value: The estimated_value of this ItemBasis.
        :type estimated_value: int
        """

        self._estimated_value = estimated_value

    @property
    def metric(self):
        """Gets the metric of this ItemBasis.

        The basis of the statistics. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:TargetingMetricsEnum'>eBay API documentation</a>

        :return: The metric of this ItemBasis.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ItemBasis.

        The basis of the statistics. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:TargetingMetricsEnum'>eBay API documentation</a>

        :param metric: The metric of this ItemBasis.
        :type metric: str
        """

        self._metric = metric
