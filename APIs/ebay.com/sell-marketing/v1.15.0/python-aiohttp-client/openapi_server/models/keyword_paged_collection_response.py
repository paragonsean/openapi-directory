# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keyword import Keyword
from openapi_server import util


class KeywordPagedCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, keywords: List[Keyword]=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """KeywordPagedCollectionResponse - a model defined in OpenAPI

        :param href: The href of this KeywordPagedCollectionResponse.
        :param keywords: The keywords of this KeywordPagedCollectionResponse.
        :param limit: The limit of this KeywordPagedCollectionResponse.
        :param next: The next of this KeywordPagedCollectionResponse.
        :param offset: The offset of this KeywordPagedCollectionResponse.
        :param prev: The prev of this KeywordPagedCollectionResponse.
        :param total: The total of this KeywordPagedCollectionResponse.
        """
        self.openapi_types = {
            'href': str,
            'keywords': List[Keyword],
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'keywords': 'keywords',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._href = href
        self._keywords = keywords
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeywordPagedCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeywordPagedCollectionResponse of this KeywordPagedCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this KeywordPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :return: The href of this KeywordPagedCollectionResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this KeywordPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :param href: The href of this KeywordPagedCollectionResponse.
        :type href: str
        """

        self._href = href

    @property
    def keywords(self):
        """Gets the keywords of this KeywordPagedCollectionResponse.

        This array contains all of the keywords that match the request criteria. Keywords will be sorted by adGroupId, regardless of whether you searched for keywords across the entire campaign, or if you searched for keywords within one or specific ad groups.

        :return: The keywords of this KeywordPagedCollectionResponse.
        :rtype: List[Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this KeywordPagedCollectionResponse.

        This array contains all of the keywords that match the request criteria. Keywords will be sorted by adGroupId, regardless of whether you searched for keywords across the entire campaign, or if you searched for keywords within one or specific ad groups.

        :param keywords: The keywords of this KeywordPagedCollectionResponse.
        :type keywords: List[Keyword]
        """

        self._keywords = keywords

    @property
    def limit(self):
        """Gets the limit of this KeywordPagedCollectionResponse.

        The number of keywords returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this KeywordPagedCollectionResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this KeywordPagedCollectionResponse.

        The number of keywords returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this KeywordPagedCollectionResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this KeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The next of this KeywordPagedCollectionResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this KeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param next: The next of this KeywordPagedCollectionResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this KeywordPagedCollectionResponse.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this KeywordPagedCollectionResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this KeywordPagedCollectionResponse.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this KeywordPagedCollectionResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this KeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results. <br><br><b>Max length</b>: 2048

        :return: The prev of this KeywordPagedCollectionResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this KeywordPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results. <br><br><b>Max length</b>: 2048

        :param prev: The prev of this KeywordPagedCollectionResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this KeywordPagedCollectionResponse.

        The total number of keywords retrieved in the result set.  <br><br>If no keywords are found, this field is returned with a value of <code>0</code>.

        :return: The total of this KeywordPagedCollectionResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this KeywordPagedCollectionResponse.

        The total number of keywords retrieved in the result set.  <br><br>If no keywords are found, this field is returned with a value of <code>0</code>.

        :param total: The total of this KeywordPagedCollectionResponse.
        :type total: int
        """

        self._total = total
