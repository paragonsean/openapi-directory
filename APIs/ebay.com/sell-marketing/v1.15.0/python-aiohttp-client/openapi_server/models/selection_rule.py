# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class SelectionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brands: List[str]=None, category_ids: List[str]=None, category_scope: str=None, listing_condition_ids: List[str]=None, max_price: Amount=None, min_price: Amount=None):
        """SelectionRule - a model defined in OpenAPI

        :param brands: The brands of this SelectionRule.
        :param category_ids: The category_ids of this SelectionRule.
        :param category_scope: The category_scope of this SelectionRule.
        :param listing_condition_ids: The listing_condition_ids of this SelectionRule.
        :param max_price: The max_price of this SelectionRule.
        :param min_price: The min_price of this SelectionRule.
        """
        self.openapi_types = {
            'brands': List[str],
            'category_ids': List[str],
            'category_scope': str,
            'listing_condition_ids': List[str],
            'max_price': Amount,
            'min_price': Amount
        }

        self.attribute_map = {
            'brands': 'brands',
            'category_ids': 'categoryIds',
            'category_scope': 'categoryScope',
            'listing_condition_ids': 'listingConditionIds',
            'max_price': 'maxPrice',
            'min_price': 'minPrice'
        }

        self._brands = brands
        self._category_ids = category_ids
        self._category_scope = category_scope
        self._listing_condition_ids = listing_condition_ids
        self._max_price = max_price
        self._min_price = min_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SelectionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SelectionRule of this SelectionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brands(self):
        """Gets the brands of this SelectionRule.

        An array of product brands. For more details, see <a href=\"/api-docs/sell/static/marketing/using-the-selectionrules-container.html \">Using the selectionRules container</a>.

        :return: The brands of this SelectionRule.
        :rtype: List[str]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this SelectionRule.

        An array of product brands. For more details, see <a href=\"/api-docs/sell/static/marketing/using-the-selectionrules-container.html \">Using the selectionRules container</a>.

        :param brands: The brands of this SelectionRule.
        :type brands: List[str]
        """

        self._brands = brands

    @property
    def category_ids(self):
        """Gets the category_ids of this SelectionRule.

        This field contains an array of the associated category ID(s).<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, a single-item array containing the category ID associated with the promotion. Required when used in an Item promotion and either specifying a <b>selectionRules</b> container or when <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, an array of category ID(s) associated with the campaign. <br><br>For information on how to get category IDs, see <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#eBay \">eBay Marketplace category IDs</a> and <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Seller \">Seller store category IDs</a>

        :return: The category_ids of this SelectionRule.
        :rtype: List[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this SelectionRule.

        This field contains an array of the associated category ID(s).<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, a single-item array containing the category ID associated with the promotion. Required when used in an Item promotion and either specifying a <b>selectionRules</b> container or when <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, an array of category ID(s) associated with the campaign. <br><br>For information on how to get category IDs, see <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#eBay \">eBay Marketplace category IDs</a> and <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Seller \">Seller store category IDs</a>

        :param category_ids: The category_ids of this SelectionRule.
        :type category_ids: List[str]
        """

        self._category_ids = category_ids

    @property
    def category_scope(self):
        """Gets the category_scope of this SelectionRule.

        This enumerated value indicates if the category ID for the item is an identifier for eBay categories or for a seller's eBay store categories. <br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, this field includes the type of the category ID for the item(s) to be included in the campaign.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, this field identifies the scope for the corresponding array as eBay categories or for a seller's eBay store categories. Required when used in an Item promotion and <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:CategoryScopeEnum'>eBay API documentation</a>

        :return: The category_scope of this SelectionRule.
        :rtype: str
        """
        return self._category_scope

    @category_scope.setter
    def category_scope(self, category_scope):
        """Sets the category_scope of this SelectionRule.

        This enumerated value indicates if the category ID for the item is an identifier for eBay categories or for a seller's eBay store categories. <br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, this field includes the type of the category ID for the item(s) to be included in the campaign.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, this field identifies the scope for the corresponding array as eBay categories or for a seller's eBay store categories. Required when used in an Item promotion and <b>inventoryCriterionType</b> is set to <code>INVENTORY_BY_RULE</code>.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:CategoryScopeEnum'>eBay API documentation</a>

        :param category_scope: The category_scope of this SelectionRule.
        :type category_scope: str
        """

        self._category_scope = category_scope

    @property
    def listing_condition_ids(self):
        """Gets the listing_condition_ids of this SelectionRule.

        A comma-separated list of unique identifiers for the conditions of listings to be included<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, refer to <a href= \"/api-docs/sell/static/marketing/pl-campaign-flow-pls.html#add-by-rule \">Add items to the PLS campaign</a>. Up to four IDs can be specified.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, refer to <a href= \"/api-docs/sell/static/metadata/condition-id-values.html \">Item condition ID and name values</a>.

        :return: The listing_condition_ids of this SelectionRule.
        :rtype: List[str]
        """
        return self._listing_condition_ids

    @listing_condition_ids.setter
    def listing_condition_ids(self, listing_condition_ids):
        """Sets the listing_condition_ids of this SelectionRule.

        A comma-separated list of unique identifiers for the conditions of listings to be included<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \">Promoted Listing campaigns</a>, refer to <a href= \"/api-docs/sell/static/marketing/pl-campaign-flow-pls.html#add-by-rule \">Add items to the PLS campaign</a>. Up to four IDs can be specified.<br><br>For <a href= \"/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \">Item promotions</a>, refer to <a href= \"/api-docs/sell/static/metadata/condition-id-values.html \">Item condition ID and name values</a>.

        :param listing_condition_ids: The listing_condition_ids of this SelectionRule.
        :type listing_condition_ids: List[str]
        """

        self._listing_condition_ids = listing_condition_ids

    @property
    def max_price(self):
        """Gets the max_price of this SelectionRule.


        :return: The max_price of this SelectionRule.
        :rtype: Amount
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this SelectionRule.


        :param max_price: The max_price of this SelectionRule.
        :type max_price: Amount
        """

        self._max_price = max_price

    @property
    def min_price(self):
        """Gets the min_price of this SelectionRule.


        :return: The min_price of this SelectionRule.
        :rtype: Amount
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this SelectionRule.


        :param min_price: The min_price of this SelectionRule.
        :type min_price: Amount
        """

        self._min_price = min_price
