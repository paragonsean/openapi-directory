# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_group import AdGroup
from openapi_server import util


class AdGroupPagedCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_groups: List[AdGroup]=None, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """AdGroupPagedCollectionResponse - a model defined in OpenAPI

        :param ad_groups: The ad_groups of this AdGroupPagedCollectionResponse.
        :param href: The href of this AdGroupPagedCollectionResponse.
        :param limit: The limit of this AdGroupPagedCollectionResponse.
        :param next: The next of this AdGroupPagedCollectionResponse.
        :param offset: The offset of this AdGroupPagedCollectionResponse.
        :param prev: The prev of this AdGroupPagedCollectionResponse.
        :param total: The total of this AdGroupPagedCollectionResponse.
        """
        self.openapi_types = {
            'ad_groups': List[AdGroup],
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'ad_groups': 'adGroups',
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._ad_groups = ad_groups
        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdGroupPagedCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdGroupPagedCollectionResponse of this AdGroupPagedCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_groups(self):
        """Gets the ad_groups of this AdGroupPagedCollectionResponse.

        The details of existing ad groups, such as the name, ID, and status of the ad groups.

        :return: The ad_groups of this AdGroupPagedCollectionResponse.
        :rtype: List[AdGroup]
        """
        return self._ad_groups

    @ad_groups.setter
    def ad_groups(self, ad_groups):
        """Sets the ad_groups of this AdGroupPagedCollectionResponse.

        The details of existing ad groups, such as the name, ID, and status of the ad groups.

        :param ad_groups: The ad_groups of this AdGroupPagedCollectionResponse.
        :type ad_groups: List[AdGroup]
        """

        self._ad_groups = ad_groups

    @property
    def href(self):
        """Gets the href of this AdGroupPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :return: The href of this AdGroupPagedCollectionResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AdGroupPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :param href: The href of this AdGroupPagedCollectionResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this AdGroupPagedCollectionResponse.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this AdGroupPagedCollectionResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AdGroupPagedCollectionResponse.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this AdGroupPagedCollectionResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this AdGroupPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set.

        :return: The next of this AdGroupPagedCollectionResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this AdGroupPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. This value is returned only if there is an additional page of results to display from the result set.

        :param next: The next of this AdGroupPagedCollectionResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this AdGroupPagedCollectionResponse.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p><b>Default:</b> 0</p><br><span class=\"tablenote\"><b>Note: </b>The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :return: The offset of this AdGroupPagedCollectionResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this AdGroupPagedCollectionResponse.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p><b>Default:</b> 0</p><br><span class=\"tablenote\"><b>Note: </b>The items in a paginated result set use a zero-based list, where the first item in the list has an offset of <code>0</code>.</span>

        :param offset: The offset of this AdGroupPagedCollectionResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this AdGroupPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results.

        :return: The prev of this AdGroupPagedCollectionResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this AdGroupPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results.

        :param prev: The prev of this AdGroupPagedCollectionResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this AdGroupPagedCollectionResponse.

        The total number of items retrieved in the result set.<br /><br /><span class=\"tablenote\"><b>Note: </b>If no items are found, this field is returned with a value of <code>0</code>.</span>

        :return: The total of this AdGroupPagedCollectionResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AdGroupPagedCollectionResponse.

        The total number of items retrieved in the result set.<br /><br /><span class=\"tablenote\"><b>Note: </b>If no items are found, this field is returned with a value of <code>0</code>.</span>

        :param total: The total of this AdGroupPagedCollectionResponse.
        :type total: int
        """

        self._total = total
