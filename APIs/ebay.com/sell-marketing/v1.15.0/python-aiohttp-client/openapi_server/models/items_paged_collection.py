# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.listing_detail import ListingDetail
from openapi_server import util


class ItemsPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, listings: List[ListingDetail]=None, next: str=None, offset: int=None, prev: str=None, total: int=None, warnings: List[Error]=None):
        """ItemsPagedCollection - a model defined in OpenAPI

        :param href: The href of this ItemsPagedCollection.
        :param limit: The limit of this ItemsPagedCollection.
        :param listings: The listings of this ItemsPagedCollection.
        :param next: The next of this ItemsPagedCollection.
        :param offset: The offset of this ItemsPagedCollection.
        :param prev: The prev of this ItemsPagedCollection.
        :param total: The total of this ItemsPagedCollection.
        :param warnings: The warnings of this ItemsPagedCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'listings': List[ListingDetail],
            'next': str,
            'offset': int,
            'prev': str,
            'total': int,
            'warnings': List[Error]
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'listings': 'listings',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total',
            'warnings': 'warnings'
        }

        self._href = href
        self._limit = limit
        self._listings = listings
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemsPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemsPagedCollection of this ItemsPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this ItemsPagedCollection.

        The URI of the current page of results from the result set.

        :return: The href of this ItemsPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ItemsPagedCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this ItemsPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this ItemsPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this ItemsPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ItemsPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this ItemsPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def listings(self):
        """Gets the listings of this ItemsPagedCollection.

        An array of the listings associated with a promotion.

        :return: The listings of this ItemsPagedCollection.
        :rtype: List[ListingDetail]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this ItemsPagedCollection.

        An array of the listings associated with a promotion.

        :param listings: The listings of this ItemsPagedCollection.
        :type listings: List[ListingDetail]
        """

        self._listings = listings

    @property
    def next(self):
        """Gets the next of this ItemsPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The next of this ItemsPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this ItemsPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param next: The next of this ItemsPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this ItemsPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this ItemsPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ItemsPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this ItemsPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this ItemsPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The prev of this ItemsPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this ItemsPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param prev: The prev of this ItemsPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this ItemsPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :return: The total of this ItemsPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ItemsPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :param total: The total of this ItemsPagedCollection.
        :type total: int
        """

        self._total = total

    @property
    def warnings(self):
        """Gets the warnings of this ItemsPagedCollection.

        A list of warnings that were generated by the request. Warning do not stop processing, but should be checked to ensure that the response contains the correct information.

        :return: The warnings of this ItemsPagedCollection.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ItemsPagedCollection.

        A list of warnings that were generated by the request. Warning do not stop processing, but should be checked to ensure that the response contains the correct information.

        :param warnings: The warnings of this ItemsPagedCollection.
        :type warnings: List[Error]
        """

        self._warnings = warnings
