# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util


class NegativeKeywordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_id: str=None, campaign_id: str=None, errors: List[Error]=None, href: str=None, negative_keyword_id: str=None, negative_keyword_match_type: str=None, negative_keyword_text: str=None, status_code: int=None):
        """NegativeKeywordResponse - a model defined in OpenAPI

        :param ad_group_id: The ad_group_id of this NegativeKeywordResponse.
        :param campaign_id: The campaign_id of this NegativeKeywordResponse.
        :param errors: The errors of this NegativeKeywordResponse.
        :param href: The href of this NegativeKeywordResponse.
        :param negative_keyword_id: The negative_keyword_id of this NegativeKeywordResponse.
        :param negative_keyword_match_type: The negative_keyword_match_type of this NegativeKeywordResponse.
        :param negative_keyword_text: The negative_keyword_text of this NegativeKeywordResponse.
        :param status_code: The status_code of this NegativeKeywordResponse.
        """
        self.openapi_types = {
            'ad_group_id': str,
            'campaign_id': str,
            'errors': List[Error],
            'href': str,
            'negative_keyword_id': str,
            'negative_keyword_match_type': str,
            'negative_keyword_text': str,
            'status_code': int
        }

        self.attribute_map = {
            'ad_group_id': 'adGroupId',
            'campaign_id': 'campaignId',
            'errors': 'errors',
            'href': 'href',
            'negative_keyword_id': 'negativeKeywordId',
            'negative_keyword_match_type': 'negativeKeywordMatchType',
            'negative_keyword_text': 'negativeKeywordText',
            'status_code': 'statusCode'
        }

        self._ad_group_id = ad_group_id
        self._campaign_id = campaign_id
        self._errors = errors
        self._href = href
        self._negative_keyword_id = negative_keyword_id
        self._negative_keyword_match_type = negative_keyword_match_type
        self._negative_keyword_text = negative_keyword_text
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegativeKeywordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NegativeKeywordResponse of this NegativeKeywordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_id(self):
        """Gets the ad_group_id of this NegativeKeywordResponse.

        A unique identifier for an ad group that is generated when an ad group is first created and associated with a campaign.

        :return: The ad_group_id of this NegativeKeywordResponse.
        :rtype: str
        """
        return self._ad_group_id

    @ad_group_id.setter
    def ad_group_id(self, ad_group_id):
        """Sets the ad_group_id of this NegativeKeywordResponse.

        A unique identifier for an ad group that is generated when an ad group is first created and associated with a campaign.

        :param ad_group_id: The ad_group_id of this NegativeKeywordResponse.
        :type ad_group_id: str
        """

        self._ad_group_id = ad_group_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this NegativeKeywordResponse.

        A unique eBay-assigned ID for a campaign. This ID is generated when a campaign is created.

        :return: The campaign_id of this NegativeKeywordResponse.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this NegativeKeywordResponse.

        A unique eBay-assigned ID for a campaign. This ID is generated when a campaign is created.

        :param campaign_id: The campaign_id of this NegativeKeywordResponse.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def errors(self):
        """Gets the errors of this NegativeKeywordResponse.

        This container will be returned if there is an issue creating the corresponding negative keyword.

        :return: The errors of this NegativeKeywordResponse.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this NegativeKeywordResponse.

        This container will be returned if there is an issue creating the corresponding negative keyword.

        :param errors: The errors of this NegativeKeywordResponse.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def href(self):
        """Gets the href of this NegativeKeywordResponse.

        The URI for the negative keyword, which is used to retrieve the negative keyword. This URI will be returned for each successfully created negative keyword.

        :return: The href of this NegativeKeywordResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this NegativeKeywordResponse.

        The URI for the negative keyword, which is used to retrieve the negative keyword. This URI will be returned for each successfully created negative keyword.

        :param href: The href of this NegativeKeywordResponse.
        :type href: str
        """

        self._href = href

    @property
    def negative_keyword_id(self):
        """Gets the negative_keyword_id of this NegativeKeywordResponse.

        A unique eBay-assigned ID for a negative keyword. This negative keyword ID will be generated for each successfully created negative keyword.

        :return: The negative_keyword_id of this NegativeKeywordResponse.
        :rtype: str
        """
        return self._negative_keyword_id

    @negative_keyword_id.setter
    def negative_keyword_id(self, negative_keyword_id):
        """Sets the negative_keyword_id of this NegativeKeywordResponse.

        A unique eBay-assigned ID for a negative keyword. This negative keyword ID will be generated for each successfully created negative keyword.

        :param negative_keyword_id: The negative_keyword_id of this NegativeKeywordResponse.
        :type negative_keyword_id: str
        """

        self._negative_keyword_id = negative_keyword_id

    @property
    def negative_keyword_match_type(self):
        """Gets the negative_keyword_match_type of this NegativeKeywordResponse.

        The match type for the negative keyword.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Broad matching of negative keywords is not currently supported.</span><br /><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>PHRASE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:NegativeKeywordMatchTypeEnum'>eBay API documentation</a>

        :return: The negative_keyword_match_type of this NegativeKeywordResponse.
        :rtype: str
        """
        return self._negative_keyword_match_type

    @negative_keyword_match_type.setter
    def negative_keyword_match_type(self, negative_keyword_match_type):
        """Sets the negative_keyword_match_type of this NegativeKeywordResponse.

        The match type for the negative keyword.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Broad matching of negative keywords is not currently supported.</span><br /><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>PHRASE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:NegativeKeywordMatchTypeEnum'>eBay API documentation</a>

        :param negative_keyword_match_type: The negative_keyword_match_type of this NegativeKeywordResponse.
        :type negative_keyword_match_type: str
        """

        self._negative_keyword_match_type = negative_keyword_match_type

    @property
    def negative_keyword_text(self):
        """Gets the negative_keyword_text of this NegativeKeywordResponse.

        The text for the negative keyword.

        :return: The negative_keyword_text of this NegativeKeywordResponse.
        :rtype: str
        """
        return self._negative_keyword_text

    @negative_keyword_text.setter
    def negative_keyword_text(self, negative_keyword_text):
        """Sets the negative_keyword_text of this NegativeKeywordResponse.

        The text for the negative keyword.

        :param negative_keyword_text: The negative_keyword_text of this NegativeKeywordResponse.
        :type negative_keyword_text: str
        """

        self._negative_keyword_text = negative_keyword_text

    @property
    def status_code(self):
        """Gets the status_code of this NegativeKeywordResponse.

        The status of the request to create a negative keyword. This field indicates whether the process was successful or not.

        :return: The status_code of this NegativeKeywordResponse.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this NegativeKeywordResponse.

        The status of the request to create a negative keyword. This field indicates whether the process was successful or not.

        :param status_code: The status_code of this NegativeKeywordResponse.
        :type status_code: int
        """

        self._status_code = status_code
