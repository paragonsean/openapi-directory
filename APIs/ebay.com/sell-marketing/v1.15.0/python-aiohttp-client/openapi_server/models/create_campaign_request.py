# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_budget_request import CampaignBudgetRequest
from openapi_server.models.campaign_criterion import CampaignCriterion
from openapi_server.models.funding_strategy import FundingStrategy
from openapi_server import util


class CreateCampaignRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget: CampaignBudgetRequest=None, campaign_criterion: CampaignCriterion=None, campaign_name: str=None, end_date: str=None, funding_strategy: FundingStrategy=None, marketplace_id: str=None, start_date: str=None):
        """CreateCampaignRequest - a model defined in OpenAPI

        :param budget: The budget of this CreateCampaignRequest.
        :param campaign_criterion: The campaign_criterion of this CreateCampaignRequest.
        :param campaign_name: The campaign_name of this CreateCampaignRequest.
        :param end_date: The end_date of this CreateCampaignRequest.
        :param funding_strategy: The funding_strategy of this CreateCampaignRequest.
        :param marketplace_id: The marketplace_id of this CreateCampaignRequest.
        :param start_date: The start_date of this CreateCampaignRequest.
        """
        self.openapi_types = {
            'budget': CampaignBudgetRequest,
            'campaign_criterion': CampaignCriterion,
            'campaign_name': str,
            'end_date': str,
            'funding_strategy': FundingStrategy,
            'marketplace_id': str,
            'start_date': str
        }

        self.attribute_map = {
            'budget': 'budget',
            'campaign_criterion': 'campaignCriterion',
            'campaign_name': 'campaignName',
            'end_date': 'endDate',
            'funding_strategy': 'fundingStrategy',
            'marketplace_id': 'marketplaceId',
            'start_date': 'startDate'
        }

        self._budget = budget
        self._campaign_criterion = campaign_criterion
        self._campaign_name = campaign_name
        self._end_date = end_date
        self._funding_strategy = funding_strategy
        self._marketplace_id = marketplace_id
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCampaignRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCampaignRequest of this CreateCampaignRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget(self):
        """Gets the budget of this CreateCampaignRequest.


        :return: The budget of this CreateCampaignRequest.
        :rtype: CampaignBudgetRequest
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this CreateCampaignRequest.


        :param budget: The budget of this CreateCampaignRequest.
        :type budget: CampaignBudgetRequest
        """

        self._budget = budget

    @property
    def campaign_criterion(self):
        """Gets the campaign_criterion of this CreateCampaignRequest.


        :return: The campaign_criterion of this CreateCampaignRequest.
        :rtype: CampaignCriterion
        """
        return self._campaign_criterion

    @campaign_criterion.setter
    def campaign_criterion(self, campaign_criterion):
        """Sets the campaign_criterion of this CreateCampaignRequest.


        :param campaign_criterion: The campaign_criterion of this CreateCampaignRequest.
        :type campaign_criterion: CampaignCriterion
        """

        self._campaign_criterion = campaign_criterion

    @property
    def campaign_name(self):
        """Gets the campaign_name of this CreateCampaignRequest.

        A seller-defined name for the campaign. This value must be unique for the seller. <p>You can use any alphanumeric characters in the name, except the less than (&lt;) or greater than (&gt;) characters.</p><b>Max length: </b>80 characters

        :return: The campaign_name of this CreateCampaignRequest.
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this CreateCampaignRequest.

        A seller-defined name for the campaign. This value must be unique for the seller. <p>You can use any alphanumeric characters in the name, except the less than (&lt;) or greater than (&gt;) characters.</p><b>Max length: </b>80 characters

        :param campaign_name: The campaign_name of this CreateCampaignRequest.
        :type campaign_name: str
        """

        self._campaign_name = campaign_name

    @property
    def end_date(self):
        """Gets the end_date of this CreateCampaignRequest.

        The date and time the campaign ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). If this field is omitted, the campaign will have no defined end date, and will not end until the seller makes a decision to end the campaign with an <a href=\"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> call, or if they update the campaign at a later time with an end date.

        :return: The end_date of this CreateCampaignRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateCampaignRequest.

        The date and time the campaign ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). If this field is omitted, the campaign will have no defined end date, and will not end until the seller makes a decision to end the campaign with an <a href=\"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> call, or if they update the campaign at a later time with an end date.

        :param end_date: The end_date of this CreateCampaignRequest.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def funding_strategy(self):
        """Gets the funding_strategy of this CreateCampaignRequest.


        :return: The funding_strategy of this CreateCampaignRequest.
        :rtype: FundingStrategy
        """
        return self._funding_strategy

    @funding_strategy.setter
    def funding_strategy(self, funding_strategy):
        """Sets the funding_strategy of this CreateCampaignRequest.


        :param funding_strategy: The funding_strategy of this CreateCampaignRequest.
        :type funding_strategy: FundingStrategy
        """

        self._funding_strategy = funding_strategy

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this CreateCampaignRequest.

        The ID of the eBay marketplace where the campaign is hosted. See the <b>MarketplaceIdEnum</b> type to get the appropriate enumeration value for the listing marketplace. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :return: The marketplace_id of this CreateCampaignRequest.
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this CreateCampaignRequest.

        The ID of the eBay marketplace where the campaign is hosted. See the <b>MarketplaceIdEnum</b> type to get the appropriate enumeration value for the listing marketplace. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :param marketplace_id: The marketplace_id of this CreateCampaignRequest.
        :type marketplace_id: str
        """

        self._marketplace_id = marketplace_id

    @property
    def start_date(self):
        """Gets the start_date of this CreateCampaignRequest.

        The date and time the campaign starts, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.  <p>On the date specified, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts after this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign. Call <b>getCampaign</b> to check the status of the campaign.</p>

        :return: The start_date of this CreateCampaignRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateCampaignRequest.

        The date and time the campaign starts, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.  <p>On the date specified, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts after this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign. Call <b>getCampaign</b> to check the status of the campaign.</p>

        :param start_date: The start_date of this CreateCampaignRequest.
        :type start_date: str
        """

        self._start_date = start_date
