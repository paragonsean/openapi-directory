# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CouponConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coupon_code: str=None, coupon_type: str=None, max_coupon_redemption_per_user: int=None):
        """CouponConfiguration - a model defined in OpenAPI

        :param coupon_code: The coupon_code of this CouponConfiguration.
        :param coupon_type: The coupon_type of this CouponConfiguration.
        :param max_coupon_redemption_per_user: The max_coupon_redemption_per_user of this CouponConfiguration.
        """
        self.openapi_types = {
            'coupon_code': str,
            'coupon_type': str,
            'max_coupon_redemption_per_user': int
        }

        self.attribute_map = {
            'coupon_code': 'couponCode',
            'coupon_type': 'couponType',
            'max_coupon_redemption_per_user': 'maxCouponRedemptionPerUser'
        }

        self._coupon_code = coupon_code
        self._coupon_type = coupon_type
        self._max_coupon_redemption_per_user = max_coupon_redemption_per_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CouponConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CouponConfiguration of this CouponConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coupon_code(self):
        """Gets the coupon_code of this CouponConfiguration.

        A unique code that buyers can use during checkout to receive a discount. The code must be unique across eBay. <br><br>The code must be from 8-15 alphanumeric characters and can contain no more than two dashes ( - ).<br><br>This is required when the promotion type is CODED_COUPON.

        :return: The coupon_code of this CouponConfiguration.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this CouponConfiguration.

        A unique code that buyers can use during checkout to receive a discount. The code must be unique across eBay. <br><br>The code must be from 8-15 alphanumeric characters and can contain no more than two dashes ( - ).<br><br>This is required when the promotion type is CODED_COUPON.

        :param coupon_code: The coupon_code of this CouponConfiguration.
        :type coupon_code: str
        """

        self._coupon_code = coupon_code

    @property
    def coupon_type(self):
        """Gets the coupon_type of this CouponConfiguration.

        This indicates the type of Coded Coupon promotion, and is required when the promotion type is <b>CODED_COUPON</b>.<br><br>Supported types:<ul><li><b>PRIVATE_SINGLE_SELLER_COUPON:</b> Anyone can use and share the coupon code, but it isn't posted on eBay.</li><li><b>PUBLIC_SINGLE_SELLER_COUPON:</b> Anyone can find the coupon code on eBay and use it.</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:CouponTypeEnum'>eBay API documentation</a>

        :return: The coupon_type of this CouponConfiguration.
        :rtype: str
        """
        return self._coupon_type

    @coupon_type.setter
    def coupon_type(self, coupon_type):
        """Sets the coupon_type of this CouponConfiguration.

        This indicates the type of Coded Coupon promotion, and is required when the promotion type is <b>CODED_COUPON</b>.<br><br>Supported types:<ul><li><b>PRIVATE_SINGLE_SELLER_COUPON:</b> Anyone can use and share the coupon code, but it isn't posted on eBay.</li><li><b>PUBLIC_SINGLE_SELLER_COUPON:</b> Anyone can find the coupon code on eBay and use it.</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:CouponTypeEnum'>eBay API documentation</a>

        :param coupon_type: The coupon_type of this CouponConfiguration.
        :type coupon_type: str
        """

        self._coupon_type = coupon_type

    @property
    def max_coupon_redemption_per_user(self):
        """Gets the max_coupon_redemption_per_user of this CouponConfiguration.

        This sets the limit on the number of times a buyer can use this coupon. The range of values is 1-10. If no value is provided, a buyer can use the coupon an unlimited number of times.

        :return: The max_coupon_redemption_per_user of this CouponConfiguration.
        :rtype: int
        """
        return self._max_coupon_redemption_per_user

    @max_coupon_redemption_per_user.setter
    def max_coupon_redemption_per_user(self, max_coupon_redemption_per_user):
        """Sets the max_coupon_redemption_per_user of this CouponConfiguration.

        This sets the limit on the number of times a buyer can use this coupon. The range of values is 1-10. If no value is provided, a buyer can use the coupon an unlimited number of times.

        :param max_coupon_redemption_per_user: The max_coupon_redemption_per_user of this CouponConfiguration.
        :type max_coupon_redemption_per_user: int
        """

        self._max_coupon_redemption_per_user = max_coupon_redemption_per_user
