# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class DiscountBenefit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_off_item: Amount=None, amount_off_order: Amount=None, percentage_off_item: str=None, percentage_off_order: str=None):
        """DiscountBenefit - a model defined in OpenAPI

        :param amount_off_item: The amount_off_item of this DiscountBenefit.
        :param amount_off_order: The amount_off_order of this DiscountBenefit.
        :param percentage_off_item: The percentage_off_item of this DiscountBenefit.
        :param percentage_off_order: The percentage_off_order of this DiscountBenefit.
        """
        self.openapi_types = {
            'amount_off_item': Amount,
            'amount_off_order': Amount,
            'percentage_off_item': str,
            'percentage_off_order': str
        }

        self.attribute_map = {
            'amount_off_item': 'amountOffItem',
            'amount_off_order': 'amountOffOrder',
            'percentage_off_item': 'percentageOffItem',
            'percentage_off_order': 'percentageOffOrder'
        }

        self._amount_off_item = amount_off_item
        self._amount_off_order = amount_off_order
        self._percentage_off_item = percentage_off_item
        self._percentage_off_order = percentage_off_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscountBenefit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscountBenefit of this DiscountBenefit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_off_item(self):
        """Gets the amount_off_item of this DiscountBenefit.


        :return: The amount_off_item of this DiscountBenefit.
        :rtype: Amount
        """
        return self._amount_off_item

    @amount_off_item.setter
    def amount_off_item(self, amount_off_item):
        """Sets the amount_off_item of this DiscountBenefit.


        :param amount_off_item: The amount_off_item of this DiscountBenefit.
        :type amount_off_item: Amount
        """

        self._amount_off_item = amount_off_item

    @property
    def amount_off_order(self):
        """Gets the amount_off_order of this DiscountBenefit.


        :return: The amount_off_order of this DiscountBenefit.
        :rtype: Amount
        """
        return self._amount_off_order

    @amount_off_order.setter
    def amount_off_order(self, amount_off_order):
        """Sets the amount_off_order of this DiscountBenefit.


        :param amount_off_order: The amount_off_order of this DiscountBenefit.
        :type amount_off_order: Amount
        """

        self._amount_off_order = amount_off_order

    @property
    def percentage_off_item(self):
        """Gets the percentage_off_item of this DiscountBenefit.

        The percentage applied to the sales price that is discounted off the promoted item (or items) when the promotion criteria is met.  <br><br>Valid integer values for percentage off: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>

        :return: The percentage_off_item of this DiscountBenefit.
        :rtype: str
        """
        return self._percentage_off_item

    @percentage_off_item.setter
    def percentage_off_item(self, percentage_off_item):
        """Sets the percentage_off_item of this DiscountBenefit.

        The percentage applied to the sales price that is discounted off the promoted item (or items) when the promotion criteria is met.  <br><br>Valid integer values for percentage off: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>

        :param percentage_off_item: The percentage_off_item of this DiscountBenefit.
        :type percentage_off_item: str
        """

        self._percentage_off_item = percentage_off_item

    @property
    def percentage_off_order(self):
        """Gets the percentage_off_order of this DiscountBenefit.

        Used for threshold promotions, this is the percentage of the order price that is discounted off the order when the promotion criteria is met. This field is not value for markdown promotions.  <br><br>Valid integer values for ORDER_DISCOUNT promotions: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  <br><br>For VOLUME_DISCOUNT promotions: Must be set to <code>0</code> for the first discount rule.

        :return: The percentage_off_order of this DiscountBenefit.
        :rtype: str
        """
        return self._percentage_off_order

    @percentage_off_order.setter
    def percentage_off_order(self, percentage_off_order):
        """Sets the percentage_off_order of this DiscountBenefit.

        Used for threshold promotions, this is the percentage of the order price that is discounted off the order when the promotion criteria is met. This field is not value for markdown promotions.  <br><br>Valid integer values for ORDER_DISCOUNT promotions: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  <br><br>For VOLUME_DISCOUNT promotions: Must be set to <code>0</code> for the first discount rule.

        :param percentage_off_order: The percentage_off_order of this DiscountBenefit.
        :type percentage_off_order: str
        """

        self._percentage_off_order = percentage_off_order
