# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.promotion_detail import PromotionDetail
from openapi_server import util


class PromotionsPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, promotions: List[PromotionDetail]=None, total: int=None):
        """PromotionsPagedCollection - a model defined in OpenAPI

        :param href: The href of this PromotionsPagedCollection.
        :param limit: The limit of this PromotionsPagedCollection.
        :param next: The next of this PromotionsPagedCollection.
        :param offset: The offset of this PromotionsPagedCollection.
        :param prev: The prev of this PromotionsPagedCollection.
        :param promotions: The promotions of this PromotionsPagedCollection.
        :param total: The total of this PromotionsPagedCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'promotions': List[PromotionDetail],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'promotions': 'promotions',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._promotions = promotions
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionsPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionsPagedCollection of this PromotionsPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PromotionsPagedCollection.

        The URI of the current page of results from the result set.

        :return: The href of this PromotionsPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PromotionsPagedCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this PromotionsPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PromotionsPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this PromotionsPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PromotionsPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this PromotionsPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this PromotionsPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The next of this PromotionsPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PromotionsPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param next: The next of this PromotionsPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PromotionsPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this PromotionsPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PromotionsPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this PromotionsPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this PromotionsPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The prev of this PromotionsPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PromotionsPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param prev: The prev of this PromotionsPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def promotions(self):
        """Gets the promotions of this PromotionsPagedCollection.

        A list containing the details of each returned promotion. This includes all the information about the promotions except for the listings that are part of the promotions.

        :return: The promotions of this PromotionsPagedCollection.
        :rtype: List[PromotionDetail]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this PromotionsPagedCollection.

        A list containing the details of each returned promotion. This includes all the information about the promotions except for the listings that are part of the promotions.

        :param promotions: The promotions of this PromotionsPagedCollection.
        :type promotions: List[PromotionDetail]
        """

        self._promotions = promotions

    @property
    def total(self):
        """Gets the total of this PromotionsPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :return: The total of this PromotionsPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PromotionsPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :param total: The total of this PromotionsPagedCollection.
        :type total: int
        """

        self._total = total
