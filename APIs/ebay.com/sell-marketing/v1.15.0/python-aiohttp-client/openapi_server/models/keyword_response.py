# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util


class KeywordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_id: str=None, errors: List[Error]=None, href: str=None, keyword_id: str=None, keyword_text: str=None, match_type: str=None, status_code: int=None):
        """KeywordResponse - a model defined in OpenAPI

        :param ad_group_id: The ad_group_id of this KeywordResponse.
        :param errors: The errors of this KeywordResponse.
        :param href: The href of this KeywordResponse.
        :param keyword_id: The keyword_id of this KeywordResponse.
        :param keyword_text: The keyword_text of this KeywordResponse.
        :param match_type: The match_type of this KeywordResponse.
        :param status_code: The status_code of this KeywordResponse.
        """
        self.openapi_types = {
            'ad_group_id': str,
            'errors': List[Error],
            'href': str,
            'keyword_id': str,
            'keyword_text': str,
            'match_type': str,
            'status_code': int
        }

        self.attribute_map = {
            'ad_group_id': 'adGroupId',
            'errors': 'errors',
            'href': 'href',
            'keyword_id': 'keywordId',
            'keyword_text': 'keywordText',
            'match_type': 'matchType',
            'status_code': 'statusCode'
        }

        self._ad_group_id = ad_group_id
        self._errors = errors
        self._href = href
        self._keyword_id = keyword_id
        self._keyword_text = keyword_text
        self._match_type = match_type
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeywordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeywordResponse of this KeywordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_id(self):
        """Gets the ad_group_id of this KeywordResponse.

        The identifier of the ad group that the keyword was added to.

        :return: The ad_group_id of this KeywordResponse.
        :rtype: str
        """
        return self._ad_group_id

    @ad_group_id.setter
    def ad_group_id(self, ad_group_id):
        """Sets the ad_group_id of this KeywordResponse.

        The identifier of the ad group that the keyword was added to.

        :param ad_group_id: The ad_group_id of this KeywordResponse.
        :type ad_group_id: str
        """

        self._ad_group_id = ad_group_id

    @property
    def errors(self):
        """Gets the errors of this KeywordResponse.

        This container will be returned if there is an issue creating the corresponding keyword and/or adding that keyword to the corresponding ad group.

        :return: The errors of this KeywordResponse.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this KeywordResponse.

        This container will be returned if there is an issue creating the corresponding keyword and/or adding that keyword to the corresponding ad group.

        :param errors: The errors of this KeywordResponse.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def href(self):
        """Gets the href of this KeywordResponse.

        The getKeyword URI for the keyword, which is used to retrieve the keyword. This URI will be returned for each successfully created keyword.

        :return: The href of this KeywordResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this KeywordResponse.

        The getKeyword URI for the keyword, which is used to retrieve the keyword. This URI will be returned for each successfully created keyword.

        :param href: The href of this KeywordResponse.
        :type href: str
        """

        self._href = href

    @property
    def keyword_id(self):
        """Gets the keyword_id of this KeywordResponse.

        A unique eBay-assigned ID for a keyword that is generated for an ad group. This keyword ID will be generated for each successfully created keyword.

        :return: The keyword_id of this KeywordResponse.
        :rtype: str
        """
        return self._keyword_id

    @keyword_id.setter
    def keyword_id(self, keyword_id):
        """Sets the keyword_id of this KeywordResponse.

        A unique eBay-assigned ID for a keyword that is generated for an ad group. This keyword ID will be generated for each successfully created keyword.

        :param keyword_id: The keyword_id of this KeywordResponse.
        :type keyword_id: str
        """

        self._keyword_id = keyword_id

    @property
    def keyword_text(self):
        """Gets the keyword_text of this KeywordResponse.

        The text of the keyword.

        :return: The keyword_text of this KeywordResponse.
        :rtype: str
        """
        return self._keyword_text

    @keyword_text.setter
    def keyword_text(self, keyword_text):
        """Sets the keyword_text of this KeywordResponse.

        The text of the keyword.

        :param keyword_text: The keyword_text of this KeywordResponse.
        :type keyword_text: str
        """

        self._keyword_text = keyword_text

    @property
    def match_type(self):
        """Gets the match_type of this KeywordResponse.

        A field that defines the match type for the keyword.<br /><br /><b>Valid Values:</b><ul><li><code>BROAD</code></li><li><code>EXACT</code></li><li><code>PHRASE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:MatchTypeEnum'>eBay API documentation</a>

        :return: The match_type of this KeywordResponse.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this KeywordResponse.

        A field that defines the match type for the keyword.<br /><br /><b>Valid Values:</b><ul><li><code>BROAD</code></li><li><code>EXACT</code></li><li><code>PHRASE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:MatchTypeEnum'>eBay API documentation</a>

        :param match_type: The match_type of this KeywordResponse.
        :type match_type: str
        """

        self._match_type = match_type

    @property
    def status_code(self):
        """Gets the status_code of this KeywordResponse.

        An HTTP status code is returned for each keyword to indicate the success or failure of adding that keyword to the ad group.

        :return: The status_code of this KeywordResponse.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this KeywordResponse.

        An HTTP status code is returned for each keyword to indicate the success or failure of adding that keyword to the ad group.

        :param status_code: The status_code of this KeywordResponse.
        :type status_code: int
        """

        self._status_code = status_code
