# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PromotionDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coupon_code: str=None, description: str=None, end_date: str=None, marketplace_id: str=None, name: str=None, priority: str=None, promotion_href: str=None, promotion_id: str=None, promotion_image_url: str=None, promotion_status: str=None, promotion_type: str=None, start_date: str=None):
        """PromotionDetail - a model defined in OpenAPI

        :param coupon_code: The coupon_code of this PromotionDetail.
        :param description: The description of this PromotionDetail.
        :param end_date: The end_date of this PromotionDetail.
        :param marketplace_id: The marketplace_id of this PromotionDetail.
        :param name: The name of this PromotionDetail.
        :param priority: The priority of this PromotionDetail.
        :param promotion_href: The promotion_href of this PromotionDetail.
        :param promotion_id: The promotion_id of this PromotionDetail.
        :param promotion_image_url: The promotion_image_url of this PromotionDetail.
        :param promotion_status: The promotion_status of this PromotionDetail.
        :param promotion_type: The promotion_type of this PromotionDetail.
        :param start_date: The start_date of this PromotionDetail.
        """
        self.openapi_types = {
            'coupon_code': str,
            'description': str,
            'end_date': str,
            'marketplace_id': str,
            'name': str,
            'priority': str,
            'promotion_href': str,
            'promotion_id': str,
            'promotion_image_url': str,
            'promotion_status': str,
            'promotion_type': str,
            'start_date': str
        }

        self.attribute_map = {
            'coupon_code': 'couponCode',
            'description': 'description',
            'end_date': 'endDate',
            'marketplace_id': 'marketplaceId',
            'name': 'name',
            'priority': 'priority',
            'promotion_href': 'promotionHref',
            'promotion_id': 'promotionId',
            'promotion_image_url': 'promotionImageUrl',
            'promotion_status': 'promotionStatus',
            'promotion_type': 'promotionType',
            'start_date': 'startDate'
        }

        self._coupon_code = coupon_code
        self._description = description
        self._end_date = end_date
        self._marketplace_id = marketplace_id
        self._name = name
        self._priority = priority
        self._promotion_href = promotion_href
        self._promotion_id = promotion_id
        self._promotion_image_url = promotion_image_url
        self._promotion_status = promotion_status
        self._promotion_type = promotion_type
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionDetail of this PromotionDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coupon_code(self):
        """Gets the coupon_code of this PromotionDetail.

        A unique code that buyers can use during checkout to receive a discount. The code must be unique across eBay.

        :return: The coupon_code of this PromotionDetail.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this PromotionDetail.

        A unique code that buyers can use during checkout to receive a discount. The code must be unique across eBay.

        :param coupon_code: The coupon_code of this PromotionDetail.
        :type coupon_code: str
        """

        self._coupon_code = coupon_code

    @property
    def description(self):
        """Gets the description of this PromotionDetail.

        This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\" Tag lines appear under the \"offer-type text\" that is generated for a promotion and displayed under the offer tile that is shown on the seller's <b>All Offers</b> page and on the promotion's event page.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. This text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"Extra 20% off when you buy 3+\".</p>  <br><b>Maximum length:</b> 50 <br><br><i>Required if</i> you are configuring ORDER_DISCOUNT or MARKDOWN_SALE promotions (and not valid for VOLUME_DISCOUNT promotions).

        :return: The description of this PromotionDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PromotionDetail.

        This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\" Tag lines appear under the \"offer-type text\" that is generated for a promotion and displayed under the offer tile that is shown on the seller's <b>All Offers</b> page and on the promotion's event page.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. This text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"Extra 20% off when you buy 3+\".</p>  <br><b>Maximum length:</b> 50 <br><br><i>Required if</i> you are configuring ORDER_DISCOUNT or MARKDOWN_SALE promotions (and not valid for VOLUME_DISCOUNT promotions).

        :param description: The description of this PromotionDetail.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this PromotionDetail.

        The date and time the promotion ends in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.

        :return: The end_date of this PromotionDetail.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PromotionDetail.

        The date and time the promotion ends in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.

        :param end_date: The end_date of this PromotionDetail.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this PromotionDetail.

        The eBay marketplace ID of the site where the promotion is hosted. Threshold promotions are supported on a select set of marketplaces while markdown promotions are supported on all eBay marketplaces. <p><b>Valid values for threshold promotions are as follows:</b></p>  <ul class=\"compact\"><li><code>EBAY_AU</code> = Australia</li> <li><code>EBAY_DE</code> = Germany</li> <li><code>EBAY_ES</code> = Spain</li> <li><code>EBAY_FR</code> = France</li> <li><code>EBAY_GB</code> = Great Britain</li> <li><code>EBAY_IT</code> = Italy</li> <li><code>EBAY_US</code> = United States</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :return: The marketplace_id of this PromotionDetail.
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this PromotionDetail.

        The eBay marketplace ID of the site where the promotion is hosted. Threshold promotions are supported on a select set of marketplaces while markdown promotions are supported on all eBay marketplaces. <p><b>Valid values for threshold promotions are as follows:</b></p>  <ul class=\"compact\"><li><code>EBAY_AU</code> = Australia</li> <li><code>EBAY_DE</code> = Germany</li> <li><code>EBAY_ES</code> = Spain</li> <li><code>EBAY_FR</code> = France</li> <li><code>EBAY_GB</code> = Great Britain</li> <li><code>EBAY_IT</code> = Italy</li> <li><code>EBAY_US</code> = United States</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :param marketplace_id: The marketplace_id of this PromotionDetail.
        :type marketplace_id: str
        """

        self._marketplace_id = marketplace_id

    @property
    def name(self):
        """Gets the name of this PromotionDetail.

        The seller-defined name or \"title\" of the promotion, such as \"Buy 1 Get 1\", that the seller can use to identify a promotion. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90

        :return: The name of this PromotionDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromotionDetail.

        The seller-defined name or \"title\" of the promotion, such as \"Buy 1 Get 1\", that the seller can use to identify a promotion. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90

        :param name: The name of this PromotionDetail.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this PromotionDetail.

        Applicable for only <b>ORDER_DISCOUNT</b> promotions, this field indicates the precedence of the promotion, which is used to determine the position of a promotion on the seller's <b>All Offers</b> page. If an item is associated with multiple promotions, the promotion with the higher priority takes precedence. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>

        :return: The priority of this PromotionDetail.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PromotionDetail.

        Applicable for only <b>ORDER_DISCOUNT</b> promotions, this field indicates the precedence of the promotion, which is used to determine the position of a promotion on the seller's <b>All Offers</b> page. If an item is associated with multiple promotions, the promotion with the higher priority takes precedence. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>

        :param priority: The priority of this PromotionDetail.
        :type priority: str
        """

        self._priority = priority

    @property
    def promotion_href(self):
        """Gets the promotion_href of this PromotionDetail.

        The URI of the promotion details.

        :return: The promotion_href of this PromotionDetail.
        :rtype: str
        """
        return self._promotion_href

    @promotion_href.setter
    def promotion_href(self, promotion_href):
        """Sets the promotion_href of this PromotionDetail.

        The URI of the promotion details.

        :param promotion_href: The promotion_href of this PromotionDetail.
        :type promotion_href: str
        """

        self._promotion_href = promotion_href

    @property
    def promotion_id(self):
        """Gets the promotion_id of this PromotionDetail.

        A unique eBay-assigned ID for the promotion that's generated when the promotion is created.

        :return: The promotion_id of this PromotionDetail.
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id):
        """Sets the promotion_id of this PromotionDetail.

        A unique eBay-assigned ID for the promotion that's generated when the promotion is created.

        :param promotion_id: The promotion_id of this PromotionDetail.
        :type promotion_id: str
        """

        self._promotion_id = promotion_id

    @property
    def promotion_image_url(self):
        """Gets the promotion_image_url of this PromotionDetail.

        Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, and not applicable for <b>VOLUME_DISCOUNT</b> promotions, this field is a URL that points to an image for the promotion. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.

        :return: The promotion_image_url of this PromotionDetail.
        :rtype: str
        """
        return self._promotion_image_url

    @promotion_image_url.setter
    def promotion_image_url(self, promotion_image_url):
        """Sets the promotion_image_url of this PromotionDetail.

        Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, and not applicable for <b>VOLUME_DISCOUNT</b> promotions, this field is a URL that points to an image for the promotion. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.

        :param promotion_image_url: The promotion_image_url of this PromotionDetail.
        :type promotion_image_url: str
        """

        self._promotion_image_url = promotion_image_url

    @property
    def promotion_status(self):
        """Gets the promotion_status of this PromotionDetail.

        The current status of the promotion. When creating a new promotion, you must set this value to either <code>DRAFT</code> or <code>SCHEDULED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>

        :return: The promotion_status of this PromotionDetail.
        :rtype: str
        """
        return self._promotion_status

    @promotion_status.setter
    def promotion_status(self, promotion_status):
        """Sets the promotion_status of this PromotionDetail.

        The current status of the promotion. When creating a new promotion, you must set this value to either <code>DRAFT</code> or <code>SCHEDULED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>

        :param promotion_status: The promotion_status of this PromotionDetail.
        :type promotion_status: str
        """

        self._promotion_status = promotion_status

    @property
    def promotion_type(self):
        """Gets the promotion_type of this PromotionDetail.

        Indicates type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>

        :return: The promotion_type of this PromotionDetail.
        :rtype: str
        """
        return self._promotion_type

    @promotion_type.setter
    def promotion_type(self, promotion_type):
        """Sets the promotion_type of this PromotionDetail.

        Indicates type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>

        :param promotion_type: The promotion_type of this PromotionDetail.
        :type promotion_type: str
        """

        self._promotion_type = promotion_type

    @property
    def start_date(self):
        """Gets the start_date of this PromotionDetail.

        The date and time the promotion starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.

        :return: The start_date of this PromotionDetail.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PromotionDetail.

        The date and time the promotion starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.

        :param start_date: The start_date of this PromotionDetail.
        :type start_date: str
        """

        self._start_date = start_date
