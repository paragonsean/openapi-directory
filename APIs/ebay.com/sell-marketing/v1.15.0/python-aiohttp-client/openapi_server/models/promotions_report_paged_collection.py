# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.promotion_report_detail import PromotionReportDetail
from openapi_server import util


class PromotionsReportPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, promotion_reports: List[PromotionReportDetail]=None, total: int=None):
        """PromotionsReportPagedCollection - a model defined in OpenAPI

        :param href: The href of this PromotionsReportPagedCollection.
        :param limit: The limit of this PromotionsReportPagedCollection.
        :param next: The next of this PromotionsReportPagedCollection.
        :param offset: The offset of this PromotionsReportPagedCollection.
        :param prev: The prev of this PromotionsReportPagedCollection.
        :param promotion_reports: The promotion_reports of this PromotionsReportPagedCollection.
        :param total: The total of this PromotionsReportPagedCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'promotion_reports': List[PromotionReportDetail],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'promotion_reports': 'promotionReports',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._promotion_reports = promotion_reports
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionsReportPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionsReportPagedCollection of this PromotionsReportPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PromotionsReportPagedCollection.

        The URI of the current page of results from the result set.

        :return: The href of this PromotionsReportPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PromotionsReportPagedCollection.

        The URI of the current page of results from the result set.

        :param href: The href of this PromotionsReportPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PromotionsReportPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :return: The limit of this PromotionsReportPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PromotionsReportPagedCollection.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.

        :param limit: The limit of this PromotionsReportPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this PromotionsReportPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The next of this PromotionsReportPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PromotionsReportPagedCollection.

        The URI for the following page of results. This value is returned only if there is an additional page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param next: The next of this PromotionsReportPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PromotionsReportPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this PromotionsReportPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PromotionsReportPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this PromotionsReportPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this PromotionsReportPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :return: The prev of this PromotionsReportPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PromotionsReportPagedCollection.

        The URI for the preceding page of results. This value is returned only if there is a previous page of results to display from the result set. <br><br><b>Max length</b>: 2048

        :param prev: The prev of this PromotionsReportPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def promotion_reports(self):
        """Gets the promotion_reports of this PromotionsReportPagedCollection.

        A list of <b>promotionReports</b> contained in the paginated result set.

        :return: The promotion_reports of this PromotionsReportPagedCollection.
        :rtype: List[PromotionReportDetail]
        """
        return self._promotion_reports

    @promotion_reports.setter
    def promotion_reports(self, promotion_reports):
        """Sets the promotion_reports of this PromotionsReportPagedCollection.

        A list of <b>promotionReports</b> contained in the paginated result set.

        :param promotion_reports: The promotion_reports of this PromotionsReportPagedCollection.
        :type promotion_reports: List[PromotionReportDetail]
        """

        self._promotion_reports = promotion_reports

    @property
    def total(self):
        """Gets the total of this PromotionsReportPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :return: The total of this PromotionsReportPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PromotionsReportPagedCollection.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :param total: The total of this PromotionsReportPagedCollection.
        :type total: int
        """

        self._total = total
