# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discount_benefit import DiscountBenefit
from openapi_server.models.inventory_criterion import InventoryCriterion
from openapi_server import util


class SelectedInventoryDiscount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_benefit: DiscountBenefit=None, discount_id: str=None, inventory_criterion: InventoryCriterion=None, rule_order: int=None):
        """SelectedInventoryDiscount - a model defined in OpenAPI

        :param discount_benefit: The discount_benefit of this SelectedInventoryDiscount.
        :param discount_id: The discount_id of this SelectedInventoryDiscount.
        :param inventory_criterion: The inventory_criterion of this SelectedInventoryDiscount.
        :param rule_order: The rule_order of this SelectedInventoryDiscount.
        """
        self.openapi_types = {
            'discount_benefit': DiscountBenefit,
            'discount_id': str,
            'inventory_criterion': InventoryCriterion,
            'rule_order': int
        }

        self.attribute_map = {
            'discount_benefit': 'discountBenefit',
            'discount_id': 'discountId',
            'inventory_criterion': 'inventoryCriterion',
            'rule_order': 'ruleOrder'
        }

        self._discount_benefit = discount_benefit
        self._discount_id = discount_id
        self._inventory_criterion = inventory_criterion
        self._rule_order = rule_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SelectedInventoryDiscount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SelectedInventoryDiscount of this SelectedInventoryDiscount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_benefit(self):
        """Gets the discount_benefit of this SelectedInventoryDiscount.


        :return: The discount_benefit of this SelectedInventoryDiscount.
        :rtype: DiscountBenefit
        """
        return self._discount_benefit

    @discount_benefit.setter
    def discount_benefit(self, discount_benefit):
        """Sets the discount_benefit of this SelectedInventoryDiscount.


        :param discount_benefit: The discount_benefit of this SelectedInventoryDiscount.
        :type discount_benefit: DiscountBenefit
        """

        self._discount_benefit = discount_benefit

    @property
    def discount_id(self):
        """Gets the discount_id of this SelectedInventoryDiscount.

        A unique, eBay-generated ID that you can use to identify the discount. This field is ignored in POST and PUT operations.

        :return: The discount_id of this SelectedInventoryDiscount.
        :rtype: str
        """
        return self._discount_id

    @discount_id.setter
    def discount_id(self, discount_id):
        """Sets the discount_id of this SelectedInventoryDiscount.

        A unique, eBay-generated ID that you can use to identify the discount. This field is ignored in POST and PUT operations.

        :param discount_id: The discount_id of this SelectedInventoryDiscount.
        :type discount_id: str
        """

        self._discount_id = discount_id

    @property
    def inventory_criterion(self):
        """Gets the inventory_criterion of this SelectedInventoryDiscount.


        :return: The inventory_criterion of this SelectedInventoryDiscount.
        :rtype: InventoryCriterion
        """
        return self._inventory_criterion

    @inventory_criterion.setter
    def inventory_criterion(self, inventory_criterion):
        """Sets the inventory_criterion of this SelectedInventoryDiscount.


        :param inventory_criterion: The inventory_criterion of this SelectedInventoryDiscount.
        :type inventory_criterion: InventoryCriterion
        """

        self._inventory_criterion = inventory_criterion

    @property
    def rule_order(self):
        """Gets the rule_order of this SelectedInventoryDiscount.

        For markdown promotions, this field is reserved for future use. <!--This field specifies the precedence of this set of inventory criteria, which is taken into account if an item is selected for multiple discounts by different sets of criteria. The criteria with the highest priority (lowest ruleOrder value) takes precedence over criteria with a lower precedence.-->

        :return: The rule_order of this SelectedInventoryDiscount.
        :rtype: int
        """
        return self._rule_order

    @rule_order.setter
    def rule_order(self, rule_order):
        """Sets the rule_order of this SelectedInventoryDiscount.

        For markdown promotions, this field is reserved for future use. <!--This field specifies the precedence of this set of inventory criteria, which is taken into account if an item is selected for multiple discounts by different sets of criteria. The criteria with the highest priority (lowest ruleOrder value) takes precedence over criteria with a lower precedence.-->

        :param rule_order: The rule_order of this SelectedInventoryDiscount.
        :type rule_order: int
        """

        self._rule_order = rule_order
