# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class PromotionReportDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_item_discount: Amount=None, average_item_revenue: Amount=None, average_order_discount: Amount=None, average_order_revenue: Amount=None, average_order_size: str=None, base_sale: Amount=None, items_sold_quantity: int=None, number_of_orders_sold: int=None, percentage_sales_lift: str=None, promotion_href: str=None, promotion_id: str=None, promotion_report_id: str=None, promotion_sale: Amount=None, promotion_type: str=None, total_discount: Amount=None, total_sale: Amount=None):
        """PromotionReportDetail - a model defined in OpenAPI

        :param average_item_discount: The average_item_discount of this PromotionReportDetail.
        :param average_item_revenue: The average_item_revenue of this PromotionReportDetail.
        :param average_order_discount: The average_order_discount of this PromotionReportDetail.
        :param average_order_revenue: The average_order_revenue of this PromotionReportDetail.
        :param average_order_size: The average_order_size of this PromotionReportDetail.
        :param base_sale: The base_sale of this PromotionReportDetail.
        :param items_sold_quantity: The items_sold_quantity of this PromotionReportDetail.
        :param number_of_orders_sold: The number_of_orders_sold of this PromotionReportDetail.
        :param percentage_sales_lift: The percentage_sales_lift of this PromotionReportDetail.
        :param promotion_href: The promotion_href of this PromotionReportDetail.
        :param promotion_id: The promotion_id of this PromotionReportDetail.
        :param promotion_report_id: The promotion_report_id of this PromotionReportDetail.
        :param promotion_sale: The promotion_sale of this PromotionReportDetail.
        :param promotion_type: The promotion_type of this PromotionReportDetail.
        :param total_discount: The total_discount of this PromotionReportDetail.
        :param total_sale: The total_sale of this PromotionReportDetail.
        """
        self.openapi_types = {
            'average_item_discount': Amount,
            'average_item_revenue': Amount,
            'average_order_discount': Amount,
            'average_order_revenue': Amount,
            'average_order_size': str,
            'base_sale': Amount,
            'items_sold_quantity': int,
            'number_of_orders_sold': int,
            'percentage_sales_lift': str,
            'promotion_href': str,
            'promotion_id': str,
            'promotion_report_id': str,
            'promotion_sale': Amount,
            'promotion_type': str,
            'total_discount': Amount,
            'total_sale': Amount
        }

        self.attribute_map = {
            'average_item_discount': 'averageItemDiscount',
            'average_item_revenue': 'averageItemRevenue',
            'average_order_discount': 'averageOrderDiscount',
            'average_order_revenue': 'averageOrderRevenue',
            'average_order_size': 'averageOrderSize',
            'base_sale': 'baseSale',
            'items_sold_quantity': 'itemsSoldQuantity',
            'number_of_orders_sold': 'numberOfOrdersSold',
            'percentage_sales_lift': 'percentageSalesLift',
            'promotion_href': 'promotionHref',
            'promotion_id': 'promotionId',
            'promotion_report_id': 'promotionReportId',
            'promotion_sale': 'promotionSale',
            'promotion_type': 'promotionType',
            'total_discount': 'totalDiscount',
            'total_sale': 'totalSale'
        }

        self._average_item_discount = average_item_discount
        self._average_item_revenue = average_item_revenue
        self._average_order_discount = average_order_discount
        self._average_order_revenue = average_order_revenue
        self._average_order_size = average_order_size
        self._base_sale = base_sale
        self._items_sold_quantity = items_sold_quantity
        self._number_of_orders_sold = number_of_orders_sold
        self._percentage_sales_lift = percentage_sales_lift
        self._promotion_href = promotion_href
        self._promotion_id = promotion_id
        self._promotion_report_id = promotion_report_id
        self._promotion_sale = promotion_sale
        self._promotion_type = promotion_type
        self._total_discount = total_discount
        self._total_sale = total_sale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionReportDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionReportDetail of this PromotionReportDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_item_discount(self):
        """Gets the average_item_discount of this PromotionReportDetail.


        :return: The average_item_discount of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._average_item_discount

    @average_item_discount.setter
    def average_item_discount(self, average_item_discount):
        """Sets the average_item_discount of this PromotionReportDetail.


        :param average_item_discount: The average_item_discount of this PromotionReportDetail.
        :type average_item_discount: Amount
        """

        self._average_item_discount = average_item_discount

    @property
    def average_item_revenue(self):
        """Gets the average_item_revenue of this PromotionReportDetail.


        :return: The average_item_revenue of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._average_item_revenue

    @average_item_revenue.setter
    def average_item_revenue(self, average_item_revenue):
        """Sets the average_item_revenue of this PromotionReportDetail.


        :param average_item_revenue: The average_item_revenue of this PromotionReportDetail.
        :type average_item_revenue: Amount
        """

        self._average_item_revenue = average_item_revenue

    @property
    def average_order_discount(self):
        """Gets the average_order_discount of this PromotionReportDetail.


        :return: The average_order_discount of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._average_order_discount

    @average_order_discount.setter
    def average_order_discount(self, average_order_discount):
        """Sets the average_order_discount of this PromotionReportDetail.


        :param average_order_discount: The average_order_discount of this PromotionReportDetail.
        :type average_order_discount: Amount
        """

        self._average_order_discount = average_order_discount

    @property
    def average_order_revenue(self):
        """Gets the average_order_revenue of this PromotionReportDetail.


        :return: The average_order_revenue of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._average_order_revenue

    @average_order_revenue.setter
    def average_order_revenue(self, average_order_revenue):
        """Sets the average_order_revenue of this PromotionReportDetail.


        :param average_order_revenue: The average_order_revenue of this PromotionReportDetail.
        :type average_order_revenue: Amount
        """

        self._average_order_revenue = average_order_revenue

    @property
    def average_order_size(self):
        """Gets the average_order_size of this PromotionReportDetail.

        The <i>average order size</i> is the average number of items that each order contained in a promotion. This value is calculated as follows:  <br><br><b>itemsSoldQuantity</b> / <b>numberOfOrdersSold</b> = <b>averageOrderSize</b> 

        :return: The average_order_size of this PromotionReportDetail.
        :rtype: str
        """
        return self._average_order_size

    @average_order_size.setter
    def average_order_size(self, average_order_size):
        """Sets the average_order_size of this PromotionReportDetail.

        The <i>average order size</i> is the average number of items that each order contained in a promotion. This value is calculated as follows:  <br><br><b>itemsSoldQuantity</b> / <b>numberOfOrdersSold</b> = <b>averageOrderSize</b> 

        :param average_order_size: The average_order_size of this PromotionReportDetail.
        :type average_order_size: str
        """

        self._average_order_size = average_order_size

    @property
    def base_sale(self):
        """Gets the base_sale of this PromotionReportDetail.


        :return: The base_sale of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._base_sale

    @base_sale.setter
    def base_sale(self, base_sale):
        """Sets the base_sale of this PromotionReportDetail.


        :param base_sale: The base_sale of this PromotionReportDetail.
        :type base_sale: Amount
        """

        self._base_sale = base_sale

    @property
    def items_sold_quantity(self):
        """Gets the items_sold_quantity of this PromotionReportDetail.

        This is the quantity of items purchased in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (<b>itemsSoldQuantity</b>) would be 2 and you number of orders sold (<b>numberOfOrdersSold</b>) would be 1.

        :return: The items_sold_quantity of this PromotionReportDetail.
        :rtype: int
        """
        return self._items_sold_quantity

    @items_sold_quantity.setter
    def items_sold_quantity(self, items_sold_quantity):
        """Sets the items_sold_quantity of this PromotionReportDetail.

        This is the quantity of items purchased in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (<b>itemsSoldQuantity</b>) would be 2 and you number of orders sold (<b>numberOfOrdersSold</b>) would be 1.

        :param items_sold_quantity: The items_sold_quantity of this PromotionReportDetail.
        :type items_sold_quantity: int
        """

        self._items_sold_quantity = items_sold_quantity

    @property
    def number_of_orders_sold(self):
        """Gets the number_of_orders_sold of this PromotionReportDetail.

        This is the number of orders sold in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your <b>numberOfOrdersSold</b> would be 1 and your <b>itemsSoldQuantity</b> would be 2.

        :return: The number_of_orders_sold of this PromotionReportDetail.
        :rtype: int
        """
        return self._number_of_orders_sold

    @number_of_orders_sold.setter
    def number_of_orders_sold(self, number_of_orders_sold):
        """Sets the number_of_orders_sold of this PromotionReportDetail.

        This is the number of orders sold in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your <b>numberOfOrdersSold</b> would be 1 and your <b>itemsSoldQuantity</b> would be 2.

        :param number_of_orders_sold: The number_of_orders_sold of this PromotionReportDetail.
        :type number_of_orders_sold: int
        """

        self._number_of_orders_sold = number_of_orders_sold

    @property
    def percentage_sales_lift(self):
        """Gets the percentage_sales_lift of this PromotionReportDetail.

        The <i>percentage sales lift</i> is the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br> <b>promotionSale</b> / <b>totalSale</b> =  <b>percentageSalesLift</b> 

        :return: The percentage_sales_lift of this PromotionReportDetail.
        :rtype: str
        """
        return self._percentage_sales_lift

    @percentage_sales_lift.setter
    def percentage_sales_lift(self, percentage_sales_lift):
        """Sets the percentage_sales_lift of this PromotionReportDetail.

        The <i>percentage sales lift</i> is the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br> <b>promotionSale</b> / <b>totalSale</b> =  <b>percentageSalesLift</b> 

        :param percentage_sales_lift: The percentage_sales_lift of this PromotionReportDetail.
        :type percentage_sales_lift: str
        """

        self._percentage_sales_lift = percentage_sales_lift

    @property
    def promotion_href(self):
        """Gets the promotion_href of this PromotionReportDetail.

        The URI of the promotion report.

        :return: The promotion_href of this PromotionReportDetail.
        :rtype: str
        """
        return self._promotion_href

    @promotion_href.setter
    def promotion_href(self, promotion_href):
        """Sets the promotion_href of this PromotionReportDetail.

        The URI of the promotion report.

        :param promotion_href: The promotion_href of this PromotionReportDetail.
        :type promotion_href: str
        """

        self._promotion_href = promotion_href

    @property
    def promotion_id(self):
        """Gets the promotion_id of this PromotionReportDetail.

        A unique eBay-assigned ID for the promotion that's generated when the promotion is created.

        :return: The promotion_id of this PromotionReportDetail.
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id):
        """Sets the promotion_id of this PromotionReportDetail.

        A unique eBay-assigned ID for the promotion that's generated when the promotion is created.

        :param promotion_id: The promotion_id of this PromotionReportDetail.
        :type promotion_id: str
        """

        self._promotion_id = promotion_id

    @property
    def promotion_report_id(self):
        """Gets the promotion_report_id of this PromotionReportDetail.

        The unique eBay-assigned ID of the promotion report that is generated when the report is created.

        :return: The promotion_report_id of this PromotionReportDetail.
        :rtype: str
        """
        return self._promotion_report_id

    @promotion_report_id.setter
    def promotion_report_id(self, promotion_report_id):
        """Sets the promotion_report_id of this PromotionReportDetail.

        The unique eBay-assigned ID of the promotion report that is generated when the report is created.

        :param promotion_report_id: The promotion_report_id of this PromotionReportDetail.
        :type promotion_report_id: str
        """

        self._promotion_report_id = promotion_report_id

    @property
    def promotion_sale(self):
        """Gets the promotion_sale of this PromotionReportDetail.


        :return: The promotion_sale of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._promotion_sale

    @promotion_sale.setter
    def promotion_sale(self, promotion_sale):
        """Sets the promotion_sale of this PromotionReportDetail.


        :param promotion_sale: The promotion_sale of this PromotionReportDetail.
        :type promotion_sale: Amount
        """

        self._promotion_sale = promotion_sale

    @property
    def promotion_type(self):
        """Gets the promotion_type of this PromotionReportDetail.

        Indicates the type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>

        :return: The promotion_type of this PromotionReportDetail.
        :rtype: str
        """
        return self._promotion_type

    @promotion_type.setter
    def promotion_type(self, promotion_type):
        """Sets the promotion_type of this PromotionReportDetail.

        Indicates the type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>

        :param promotion_type: The promotion_type of this PromotionReportDetail.
        :type promotion_type: str
        """

        self._promotion_type = promotion_type

    @property
    def total_discount(self):
        """Gets the total_discount of this PromotionReportDetail.


        :return: The total_discount of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this PromotionReportDetail.


        :param total_discount: The total_discount of this PromotionReportDetail.
        :type total_discount: Amount
        """

        self._total_discount = total_discount

    @property
    def total_sale(self):
        """Gets the total_sale of this PromotionReportDetail.


        :return: The total_sale of this PromotionReportDetail.
        :rtype: Amount
        """
        return self._total_sale

    @total_sale.setter
    def total_sale(self, total_sale):
        """Sets the total_sale of this PromotionReportDetail.


        :param total_sale: The total_sale of this PromotionReportDetail.
        :type total_sale: Amount
        """

        self._total_sale = total_sale
