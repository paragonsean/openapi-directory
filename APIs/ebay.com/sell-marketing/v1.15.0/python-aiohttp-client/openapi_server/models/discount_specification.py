# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class DiscountSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, for_each_amount: Amount=None, for_each_quantity: int=None, min_amount: Amount=None, min_quantity: int=None, number_of_discounted_items: int=None):
        """DiscountSpecification - a model defined in OpenAPI

        :param for_each_amount: The for_each_amount of this DiscountSpecification.
        :param for_each_quantity: The for_each_quantity of this DiscountSpecification.
        :param min_amount: The min_amount of this DiscountSpecification.
        :param min_quantity: The min_quantity of this DiscountSpecification.
        :param number_of_discounted_items: The number_of_discounted_items of this DiscountSpecification.
        """
        self.openapi_types = {
            'for_each_amount': Amount,
            'for_each_quantity': int,
            'min_amount': Amount,
            'min_quantity': int,
            'number_of_discounted_items': int
        }

        self.attribute_map = {
            'for_each_amount': 'forEachAmount',
            'for_each_quantity': 'forEachQuantity',
            'min_amount': 'minAmount',
            'min_quantity': 'minQuantity',
            'number_of_discounted_items': 'numberOfDiscountedItems'
        }

        self._for_each_amount = for_each_amount
        self._for_each_quantity = for_each_quantity
        self._min_amount = min_amount
        self._min_quantity = min_quantity
        self._number_of_discounted_items = number_of_discounted_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscountSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscountSpecification of this DiscountSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def for_each_amount(self):
        """Gets the for_each_amount of this DiscountSpecification.


        :return: The for_each_amount of this DiscountSpecification.
        :rtype: Amount
        """
        return self._for_each_amount

    @for_each_amount.setter
    def for_each_amount(self, for_each_amount):
        """Sets the for_each_amount of this DiscountSpecification.


        :param for_each_amount: The for_each_amount of this DiscountSpecification.
        :type for_each_amount: Amount
        """

        self._for_each_amount = for_each_amount

    @property
    def for_each_quantity(self):
        """Gets the for_each_quantity of this DiscountSpecification.

        The number of items that must be purchased in order to qualify for the discount.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, <br> &nbsp; 12, 13, 14, 15, 16, 17, 18, 19 <br> &nbsp; 20, 25, 50, 75, 100</code>

        :return: The for_each_quantity of this DiscountSpecification.
        :rtype: int
        """
        return self._for_each_quantity

    @for_each_quantity.setter
    def for_each_quantity(self, for_each_quantity):
        """Sets the for_each_quantity of this DiscountSpecification.

        The number of items that must be purchased in order to qualify for the discount.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, <br> &nbsp; 12, 13, 14, 15, 16, 17, 18, 19 <br> &nbsp; 20, 25, 50, 75, 100</code>

        :param for_each_quantity: The for_each_quantity of this DiscountSpecification.
        :type for_each_quantity: int
        """

        self._for_each_quantity = for_each_quantity

    @property
    def min_amount(self):
        """Gets the min_amount of this DiscountSpecification.


        :return: The min_amount of this DiscountSpecification.
        :rtype: Amount
        """
        return self._min_amount

    @min_amount.setter
    def min_amount(self, min_amount):
        """Sets the min_amount of this DiscountSpecification.


        :param min_amount: The min_amount of this DiscountSpecification.
        :type min_amount: Amount
        """

        self._min_amount = min_amount

    @property
    def min_quantity(self):
        """Gets the min_quantity of this DiscountSpecification.

        The minimum quantity of promoted items that needs to be bought in order to qualify for the promotion's discount.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, <br> &nbsp; 12, 13, 14, 15, 16, 17, 18, 19 <br> &nbsp; 20, 25, 50, 75, 100</code>

        :return: The min_quantity of this DiscountSpecification.
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this DiscountSpecification.

        The minimum quantity of promoted items that needs to be bought in order to qualify for the promotion's discount.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, <br> &nbsp; 12, 13, 14, 15, 16, 17, 18, 19 <br> &nbsp; 20, 25, 50, 75, 100</code>

        :param min_quantity: The min_quantity of this DiscountSpecification.
        :type min_quantity: int
        """

        self._min_quantity = min_quantity

    @property
    def number_of_discounted_items(self):
        """Gets the number_of_discounted_items of this DiscountSpecification.

        Use this field to configure \"Buy One Get One\" (or <b>BOGO</b>) promotions.  <br><br>You must couple this field with <b>forEachQuantity</b> and an <b>amountOffItem</b> or <b>percentOffItem</b> field to configure your BOGO promotion. This field is not valid with order-based promotions. <br><br>The value of this field represents the number of items to be discounted when other promotion criteria is met. For example, when the buyer adds the number of items identified by the <b>forEachQuantity</b> value to their cart, they are then eligible to receive the stated discount from an additional number of like items (the number of which is identified by this field) when they add those items to their cart. To receive the discount, the buyer must purchase the number of items indicated by  <b>forEachQuantity</b> <i>plus</i> the number indicated by this field.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</code>

        :return: The number_of_discounted_items of this DiscountSpecification.
        :rtype: int
        """
        return self._number_of_discounted_items

    @number_of_discounted_items.setter
    def number_of_discounted_items(self, number_of_discounted_items):
        """Sets the number_of_discounted_items of this DiscountSpecification.

        Use this field to configure \"Buy One Get One\" (or <b>BOGO</b>) promotions.  <br><br>You must couple this field with <b>forEachQuantity</b> and an <b>amountOffItem</b> or <b>percentOffItem</b> field to configure your BOGO promotion. This field is not valid with order-based promotions. <br><br>The value of this field represents the number of items to be discounted when other promotion criteria is met. For example, when the buyer adds the number of items identified by the <b>forEachQuantity</b> value to their cart, they are then eligible to receive the stated discount from an additional number of like items (the number of which is identified by this field) when they add those items to their cart. To receive the discount, the buyer must purchase the number of items indicated by  <b>forEachQuantity</b> <i>plus</i> the number indicated by this field.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</code>

        :param number_of_discounted_items: The number_of_discounted_items of this DiscountSpecification.
        :type number_of_discounted_items: int
        """

        self._number_of_discounted_items = number_of_discounted_items
