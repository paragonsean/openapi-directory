# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad import Ad
from openapi_server import util


class AdPagedCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ads: List[Ad]=None, href: str=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """AdPagedCollectionResponse - a model defined in OpenAPI

        :param ads: The ads of this AdPagedCollectionResponse.
        :param href: The href of this AdPagedCollectionResponse.
        :param limit: The limit of this AdPagedCollectionResponse.
        :param next: The next of this AdPagedCollectionResponse.
        :param offset: The offset of this AdPagedCollectionResponse.
        :param prev: The prev of this AdPagedCollectionResponse.
        :param total: The total of this AdPagedCollectionResponse.
        """
        self.openapi_types = {
            'ads': List[Ad],
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'ads': 'ads',
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._ads = ads
        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdPagedCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdPagedCollectionResponse of this AdPagedCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ads(self):
        """Gets the ads of this AdPagedCollectionResponse.

        The list of ads that matched the request criteria.

        :return: The ads of this AdPagedCollectionResponse.
        :rtype: List[Ad]
        """
        return self._ads

    @ads.setter
    def ads(self, ads):
        """Sets the ads of this AdPagedCollectionResponse.

        The list of ads that matched the request criteria.

        :param ads: The ads of this AdPagedCollectionResponse.
        :type ads: List[Ad]
        """

        self._ads = ads

    @property
    def href(self):
        """Gets the href of this AdPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :return: The href of this AdPagedCollectionResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AdPagedCollectionResponse.

        The URI of the current page of results from the result set.

        :param href: The href of this AdPagedCollectionResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this AdPagedCollectionResponse.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.<p><b>Default</b>: <code>10</code>

        :return: The limit of this AdPagedCollectionResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AdPagedCollectionResponse.

        The number of items returned on a single page from the result set. This value can be set in the request with the <b>limit</b> query parameter.<p><b>Default</b>: <code>10</code>

        :param limit: The limit of this AdPagedCollectionResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this AdPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be increased to retrieve the next page of results. <br><br><b>Max length</b>: 2048

        :return: The next of this AdPagedCollectionResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this AdPagedCollectionResponse.

        The call URI that can be used to retrieve the next page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be increased to retrieve the next page of results. <br><br><b>Max length</b>: 2048

        :param next: The next of this AdPagedCollectionResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this AdPagedCollectionResponse.

        The number of results skipped in the result set before listing the first result on the current page. This value can be set in the request with the <b>offset</b> query parameter. If the <b>offset</b> value is not set, it defaults to zero.<p><b>Default</b>: <code>0</code></p><p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this AdPagedCollectionResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this AdPagedCollectionResponse.

        The number of results skipped in the result set before listing the first result on the current page. This value can be set in the request with the <b>offset</b> query parameter. If the <b>offset</b> value is not set, it defaults to zero.<p><b>Default</b>: <code>0</code></p><p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this AdPagedCollectionResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this AdPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results. <br><br><b>Max length</b>: 2048

        :return: The prev of this AdPagedCollectionResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this AdPagedCollectionResponse.

        The call URI that can be used to retrieve the previous page in the result set. Basically, all of the request parameters will remain the same except the offset value, which will be decreased to retrieve the previous page of results. <br><br><b>Max length</b>: 2048

        :param prev: The prev of this AdPagedCollectionResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this AdPagedCollectionResponse.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :return: The total of this AdPagedCollectionResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AdPagedCollectionResponse.

        The total number of items retrieved in the result set.  <br><br>If no items are found, this field is returned with a value of <code>0</code>.

        :param total: The total of this AdPagedCollectionResponse.
        :type total: int
        """

        self._total = total
