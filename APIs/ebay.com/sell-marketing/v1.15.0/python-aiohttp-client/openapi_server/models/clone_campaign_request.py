# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.funding_strategy import FundingStrategy
from openapi_server import util


class CloneCampaignRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_name: str=None, end_date: str=None, funding_strategy: FundingStrategy=None, start_date: str=None):
        """CloneCampaignRequest - a model defined in OpenAPI

        :param campaign_name: The campaign_name of this CloneCampaignRequest.
        :param end_date: The end_date of this CloneCampaignRequest.
        :param funding_strategy: The funding_strategy of this CloneCampaignRequest.
        :param start_date: The start_date of this CloneCampaignRequest.
        """
        self.openapi_types = {
            'campaign_name': str,
            'end_date': str,
            'funding_strategy': FundingStrategy,
            'start_date': str
        }

        self.attribute_map = {
            'campaign_name': 'campaignName',
            'end_date': 'endDate',
            'funding_strategy': 'fundingStrategy',
            'start_date': 'startDate'
        }

        self._campaign_name = campaign_name
        self._end_date = end_date
        self._funding_strategy = funding_strategy
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloneCampaignRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloneCampaignRequest of this CloneCampaignRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_name(self):
        """Gets the campaign_name of this CloneCampaignRequest.

        A seller-defined name for the newly-cloned campaign. This value must be unique for the seller. <p>You can use any alphanumeric characters in the name, except the less than (&lt;) or greater than (&gt;) characters.</p><b>Max length: </b>80 characters

        :return: The campaign_name of this CloneCampaignRequest.
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this CloneCampaignRequest.

        A seller-defined name for the newly-cloned campaign. This value must be unique for the seller. <p>You can use any alphanumeric characters in the name, except the less than (&lt;) or greater than (&gt;) characters.</p><b>Max length: </b>80 characters

        :param campaign_name: The campaign_name of this CloneCampaignRequest.
        :type campaign_name: str
        """

        self._campaign_name = campaign_name

    @property
    def end_date(self):
        """Gets the end_date of this CloneCampaignRequest.

        The date and time the campaign ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). If this field is omitted, the campaign will have no defined end date, and will not end until the seller makes a decision to end the campaign with an <a href=\"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> call, or if they update the campaign at a later time with an end date.

        :return: The end_date of this CloneCampaignRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CloneCampaignRequest.

        The date and time the campaign ends, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). If this field is omitted, the campaign will have no defined end date, and will not end until the seller makes a decision to end the campaign with an <a href=\"/api-docs/sell/marketing/resources/campaign/methods/endCampaign\">endCampaign</a> call, or if they update the campaign at a later time with an end date.

        :param end_date: The end_date of this CloneCampaignRequest.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def funding_strategy(self):
        """Gets the funding_strategy of this CloneCampaignRequest.


        :return: The funding_strategy of this CloneCampaignRequest.
        :rtype: FundingStrategy
        """
        return self._funding_strategy

    @funding_strategy.setter
    def funding_strategy(self, funding_strategy):
        """Sets the funding_strategy of this CloneCampaignRequest.


        :param funding_strategy: The funding_strategy of this CloneCampaignRequest.
        :type funding_strategy: FundingStrategy
        """

        self._funding_strategy = funding_strategy

    @property
    def start_date(self):
        """Gets the start_date of this CloneCampaignRequest.

        The date and time the cloned campaign starts, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.  <p>On the date specified, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts after this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign. Call <b>getCampaign</b> to check the status of the campaign.</p>

        :return: The start_date of this CloneCampaignRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CloneCampaignRequest.

        The date and time the cloned campaign starts, in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.  <p>On the date specified, the service derives the keywords for each listing in the campaign, creates an ad for each listing, and associates each new ad with the campaign. The campaign starts after this process is completed. The amount of time it takes the service to start the campaign depends on the number of listings in the campaign. Call <b>getCampaign</b> to check the status of the campaign.</p>

        :param start_date: The start_date of this CloneCampaignRequest.
        :type start_date: str
        """

        self._start_date = start_date
