/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import CouponConfiguration from './CouponConfiguration';
import DiscountRule from './DiscountRule';
import InventoryCriterion from './InventoryCriterion';

/**
 * The ItemPromotion model module.
 * @module model/ItemPromotion
 * @version v1.15.0
 */
class ItemPromotion {
    /**
     * Constructs a new <code>ItemPromotion</code>.
     * This type defines the fields that describe a threshold promotion and includes the promotional discount, the items included in the promotion, and the rules that specify when the promotion is applied.
     * @alias module:model/ItemPromotion
     */
    constructor() { 
        
        ItemPromotion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemPromotion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemPromotion} obj Optional instance to populate.
     * @return {module:model/ItemPromotion} The populated <code>ItemPromotion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemPromotion();

            if (data.hasOwnProperty('applyDiscountToSingleItemOnly')) {
                obj['applyDiscountToSingleItemOnly'] = ApiClient.convertToType(data['applyDiscountToSingleItemOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('budget')) {
                obj['budget'] = Amount.constructFromObject(data['budget']);
            }
            if (data.hasOwnProperty('couponConfiguration')) {
                obj['couponConfiguration'] = CouponConfiguration.constructFromObject(data['couponConfiguration']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discountRules')) {
                obj['discountRules'] = ApiClient.convertToType(data['discountRules'], [DiscountRule]);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('inventoryCriterion')) {
                obj['inventoryCriterion'] = InventoryCriterion.constructFromObject(data['inventoryCriterion']);
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('promotionImageUrl')) {
                obj['promotionImageUrl'] = ApiClient.convertToType(data['promotionImageUrl'], 'String');
            }
            if (data.hasOwnProperty('promotionStatus')) {
                obj['promotionStatus'] = ApiClient.convertToType(data['promotionStatus'], 'String');
            }
            if (data.hasOwnProperty('promotionType')) {
                obj['promotionType'] = ApiClient.convertToType(data['promotionType'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemPromotion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemPromotion</code>.
     */
    static validateJSON(data) {
        // validate the optional field `budget`
        if (data['budget']) { // data not null
          Amount.validateJSON(data['budget']);
        }
        // validate the optional field `couponConfiguration`
        if (data['couponConfiguration']) { // data not null
          CouponConfiguration.validateJSON(data['couponConfiguration']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['discountRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discountRules'])) {
                throw new Error("Expected the field `discountRules` to be an array in the JSON data but got " + data['discountRules']);
            }
            // validate the optional field `discountRules` (array)
            for (const item of data['discountRules']) {
                DiscountRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // validate the optional field `inventoryCriterion`
        if (data['inventoryCriterion']) { // data not null
          InventoryCriterion.validateJSON(data['inventoryCriterion']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['promotionImageUrl'] && !(typeof data['promotionImageUrl'] === 'string' || data['promotionImageUrl'] instanceof String)) {
            throw new Error("Expected the field `promotionImageUrl` to be a primitive type in the JSON string but got " + data['promotionImageUrl']);
        }
        // ensure the json data is a string
        if (data['promotionStatus'] && !(typeof data['promotionStatus'] === 'string' || data['promotionStatus'] instanceof String)) {
            throw new Error("Expected the field `promotionStatus` to be a primitive type in the JSON string but got " + data['promotionStatus']);
        }
        // ensure the json data is a string
        if (data['promotionType'] && !(typeof data['promotionType'] === 'string' || data['promotionType'] instanceof String)) {
            throw new Error("Expected the field `promotionType` to be a primitive type in the JSON string but got " + data['promotionType']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }

        return true;
    }


}



/**
 * This flag is relevant in only when <b>promotionType</b> is set to <code>VOLUME_DISCOUNT</code>. For details on volume pricing promotions, see <a href=\"/api-docs/sell/static/marketing/pm-volume-discounts.html\">Configuring volume pricing discounts</a>.  <br><br>If set to <code>true</code>, the discount is applied only when the buyer purchases multiple quantities of a single item in the promotion. Otherwise, the promotional discount applies to multiple quantities of any items in the promotion. Different variations of a multi-variation item are considered to be the same item. Note that this flag is not relevant if the <b>inventoryCriterion</b> container identifies a single listing ID for the promotion.
 * @member {Boolean} applyDiscountToSingleItemOnly
 */
ItemPromotion.prototype['applyDiscountToSingleItemOnly'] = undefined;

/**
 * @member {module:model/Amount} budget
 */
ItemPromotion.prototype['budget'] = undefined;

/**
 * @member {module:model/CouponConfiguration} couponConfiguration
 */
ItemPromotion.prototype['couponConfiguration'] = undefined;

/**
 * This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\"  <br><br>The tag line appears under the \"offer-type text\" that is generated for the promotion and is displayed on the offer tile that's shown on the seller's <b>All Offers</b> page, and on the event page for the promotion.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. The offer-type text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"Extra 20% off when you buy 3+\".</p>  <br><b>Maximum length:</b> 50 <br><br><i>Required if</i> you are configuring CODED_COUPON, ORDER_DISCOUNT, or MARKDOWN_SALE promotions (and not valid for VOLUME_DISCOUNT promotions).
 * @member {String} description
 */
ItemPromotion.prototype['description'] = undefined;

/**
 * This container defines a promotion using the following two required fields: <ul><li><b>discountBenefit</b> &ndash; Defines a discount as either a monetary amount or a percentage that is subtracted from the sales price of an item, a set of items, or an order.</li>  <li><b>discountSpecification</b> &ndash; Defines a set of rules that determine when the promotion is applied.</li></ul> <p class=\"tablenote\"><b>Note:</b> For volume pricing, you must specify at least two and not more than four <b>discountBenefit</b>/<b>discountSpecification</b> pairs. In addition, you must define each set of rules with a <b>ruleOrder</b> value that corresponds with the order of volume discounts you present.</p>  <p><b>Tip:</b> Refer to <a href=\"/api-docs/sell/static/marketing/pm-specifying-discounts.html\">Specifying item promotion discounts</a> for information and examples on how to combine <b>discountBenefit</b> and <b>discountSpecification</b> to create different types of promotions.</p>
 * @member {Array.<module:model/DiscountRule>} discountRules
 */
ItemPromotion.prototype['discountRules'] = undefined;

/**
 * The date and time the promotion ends in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.
 * @member {String} endDate
 */
ItemPromotion.prototype['endDate'] = undefined;

/**
 * @member {module:model/InventoryCriterion} inventoryCriterion
 */
ItemPromotion.prototype['inventoryCriterion'] = undefined;

/**
 * The eBay marketplace ID of the site where the threshold promotion is hosted. Threshold promotions are currently supported on a limited number of eBay marketplaces.  <p><b>Valid values:</b></p>  <ul><li><code>EBAY_AU</code> = Australia</li> <li><code>EBAY_DE</code> = Germany</li> <li><code>EBAY_ES</code> = Spain</li> <li><code>EBAY_FR</code> = France</li> <li><code>EBAY_GB</code> = Great Britain</li> <li><code>EBAY_IT</code> = Italy</li> <li><code>EBAY_US</code> = United States</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
ItemPromotion.prototype['marketplaceId'] = undefined;

/**
 * The seller-defined name or \"title\" of the promotion that the seller can use to identify a promotion. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90
 * @member {String} name
 */
ItemPromotion.prototype['name'] = undefined;

/**
 * Applicable for only <b>ORDER_DISCOUNT</b> promotions, this field indicates the precedence of the promotion, which is used to determine the position of a promotion on the seller's <b>All Offers</b> page. If an item is associated with multiple promotions, the promotion with the higher priority takes precedence. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>
 * @member {String} priority
 */
ItemPromotion.prototype['priority'] = undefined;

/**
 * Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, and not valid for VOLUME_DISCOUNT promotions.  <br><br>Populate this field with a URL that points to an image to be used with the promotion. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.
 * @member {String} promotionImageUrl
 */
ItemPromotion.prototype['promotionImageUrl'] = undefined;

/**
 * The current status of the promotion. When creating a new promotion, this value must be set to either <code>DRAFT</code> or <code>SCHEDULED</code>.  <br><br>Note that you must set this value to <code>SCHEDULED</code> when you update a <b>RUNNING</b> promotion. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>
 * @member {String} promotionStatus
 */
ItemPromotion.prototype['promotionStatus'] = undefined;

/**
 * Use this field to specify the type of the promotion you are creating. <p>The supported types are:</p> <ul><li><code>CODED_COUPON</code> &ndash; A coupon code promotion set with <b>createItemPromotion</b>.</li> <li><code>MARKDOWN_SALE</code> &ndash; A markdown promotion set with <b>createItemPriceMarkdownPromotion</b>.</li> <li><code>ORDER_DISCOUNT</code> &ndash; A threshold promotion set with <b>createItemPromotion</b>.</li> <li><code>VOLUME_DISCOUNT</code> &ndash; A volume pricing promotion set with <b>createItemPromotion</b>.</li></ul> <p>See the <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\" target=\"_blank\">Promotions Manager</a> documentation for details.</p> <p><i>Required if </i> you are creating a volume pricing promotion (<code>VOLUME_DISCOUNT</code>).</p> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>
 * @member {String} promotionType
 */
ItemPromotion.prototype['promotionType'] = undefined;

/**
 * The date and time the promotion starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.
 * @member {String} startDate
 */
ItemPromotion.prototype['startDate'] = undefined;






export default ItemPromotion;

