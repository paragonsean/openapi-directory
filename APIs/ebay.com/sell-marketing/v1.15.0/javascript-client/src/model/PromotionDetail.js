/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PromotionDetail model module.
 * @module model/PromotionDetail
 * @version v1.15.0
 */
class PromotionDetail {
    /**
     * Constructs a new <code>PromotionDetail</code>.
     * This type defines the fields that describe a promotion. This includes all the information about a promotion except for the listings that are a part of the promotion.
     * @alias module:model/PromotionDetail
     */
    constructor() { 
        
        PromotionDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PromotionDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromotionDetail} obj Optional instance to populate.
     * @return {module:model/PromotionDetail} The populated <code>PromotionDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromotionDetail();

            if (data.hasOwnProperty('couponCode')) {
                obj['couponCode'] = ApiClient.convertToType(data['couponCode'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('promotionHref')) {
                obj['promotionHref'] = ApiClient.convertToType(data['promotionHref'], 'String');
            }
            if (data.hasOwnProperty('promotionId')) {
                obj['promotionId'] = ApiClient.convertToType(data['promotionId'], 'String');
            }
            if (data.hasOwnProperty('promotionImageUrl')) {
                obj['promotionImageUrl'] = ApiClient.convertToType(data['promotionImageUrl'], 'String');
            }
            if (data.hasOwnProperty('promotionStatus')) {
                obj['promotionStatus'] = ApiClient.convertToType(data['promotionStatus'], 'String');
            }
            if (data.hasOwnProperty('promotionType')) {
                obj['promotionType'] = ApiClient.convertToType(data['promotionType'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromotionDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromotionDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['couponCode'] && !(typeof data['couponCode'] === 'string' || data['couponCode'] instanceof String)) {
            throw new Error("Expected the field `couponCode` to be a primitive type in the JSON string but got " + data['couponCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['promotionHref'] && !(typeof data['promotionHref'] === 'string' || data['promotionHref'] instanceof String)) {
            throw new Error("Expected the field `promotionHref` to be a primitive type in the JSON string but got " + data['promotionHref']);
        }
        // ensure the json data is a string
        if (data['promotionId'] && !(typeof data['promotionId'] === 'string' || data['promotionId'] instanceof String)) {
            throw new Error("Expected the field `promotionId` to be a primitive type in the JSON string but got " + data['promotionId']);
        }
        // ensure the json data is a string
        if (data['promotionImageUrl'] && !(typeof data['promotionImageUrl'] === 'string' || data['promotionImageUrl'] instanceof String)) {
            throw new Error("Expected the field `promotionImageUrl` to be a primitive type in the JSON string but got " + data['promotionImageUrl']);
        }
        // ensure the json data is a string
        if (data['promotionStatus'] && !(typeof data['promotionStatus'] === 'string' || data['promotionStatus'] instanceof String)) {
            throw new Error("Expected the field `promotionStatus` to be a primitive type in the JSON string but got " + data['promotionStatus']);
        }
        // ensure the json data is a string
        if (data['promotionType'] && !(typeof data['promotionType'] === 'string' || data['promotionType'] instanceof String)) {
            throw new Error("Expected the field `promotionType` to be a primitive type in the JSON string but got " + data['promotionType']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }

        return true;
    }


}



/**
 * A unique code that buyers can use during checkout to receive a discount. The code must be unique across eBay.
 * @member {String} couponCode
 */
PromotionDetail.prototype['couponCode'] = undefined;

/**
 * This is the seller-defined \"tag line\" for the offer, such as \"Save on designer shoes.\" Tag lines appear under the \"offer-type text\" that is generated for a promotion and displayed under the offer tile that is shown on the seller's <b>All Offers</b> page and on the promotion's event page.  <p class=\"tablenote\"><b>Note:</b> Offer-type text is a teaser that's presented throughout the buyer's journey through the sales flow and is generated by eBay. This text is not editable by the seller&mdash;it's derived from the settings in the <b>discountRules</b> and <b>discountSpecification</b> fields&mdash;and can be, for example, \"Extra 20% off when you buy 3+\".</p>  <br><b>Maximum length:</b> 50 <br><br><i>Required if</i> you are configuring ORDER_DISCOUNT or MARKDOWN_SALE promotions (and not valid for VOLUME_DISCOUNT promotions).
 * @member {String} description
 */
PromotionDetail.prototype['description'] = undefined;

/**
 * The date and time the promotion ends in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.
 * @member {String} endDate
 */
PromotionDetail.prototype['endDate'] = undefined;

/**
 * The eBay marketplace ID of the site where the promotion is hosted. Threshold promotions are supported on a select set of marketplaces while markdown promotions are supported on all eBay marketplaces. <p><b>Valid values for threshold promotions are as follows:</b></p>  <ul class=\"compact\"><li><code>EBAY_AU</code> = Australia</li> <li><code>EBAY_DE</code> = Germany</li> <li><code>EBAY_ES</code> = Spain</li> <li><code>EBAY_FR</code> = France</li> <li><code>EBAY_GB</code> = Great Britain</li> <li><code>EBAY_IT</code> = Italy</li> <li><code>EBAY_US</code> = United States</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
PromotionDetail.prototype['marketplaceId'] = undefined;

/**
 * The seller-defined name or \"title\" of the promotion, such as \"Buy 1 Get 1\", that the seller can use to identify a promotion. This label is not displayed in end-user flows.  <br><br><b>Maximum length:</b> 90
 * @member {String} name
 */
PromotionDetail.prototype['name'] = undefined;

/**
 * Applicable for only <b>ORDER_DISCOUNT</b> promotions, this field indicates the precedence of the promotion, which is used to determine the position of a promotion on the seller's <b>All Offers</b> page. If an item is associated with multiple promotions, the promotion with the higher priority takes precedence. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum'>eBay API documentation</a>
 * @member {String} priority
 */
PromotionDetail.prototype['priority'] = undefined;

/**
 * The URI of the promotion details.
 * @member {String} promotionHref
 */
PromotionDetail.prototype['promotionHref'] = undefined;

/**
 * A unique eBay-assigned ID for the promotion that's generated when the promotion is created.
 * @member {String} promotionId
 */
PromotionDetail.prototype['promotionId'] = undefined;

/**
 * Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, and not applicable for <b>VOLUME_DISCOUNT</b> promotions, this field is a URL that points to an image for the promotion. This image is displayed on the seller's <b>All Offers</b> page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.
 * @member {String} promotionImageUrl
 */
PromotionDetail.prototype['promotionImageUrl'] = undefined;

/**
 * The current status of the promotion. When creating a new promotion, you must set this value to either <code>DRAFT</code> or <code>SCHEDULED</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum'>eBay API documentation</a>
 * @member {String} promotionStatus
 */
PromotionDetail.prototype['promotionStatus'] = undefined;

/**
 * Indicates type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>
 * @member {String} promotionType
 */
PromotionDetail.prototype['promotionType'] = undefined;

/**
 * The date and time the promotion starts in UTC format (<code>yyyy-MM-ddThh:mm:ssZ</code>). For display purposes, convert this time into the local time of the seller.
 * @member {String} startDate
 */
PromotionDetail.prototype['startDate'] = undefined;






export default PromotionDetail;

