/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import InventoryReference from './InventoryReference';

/**
 * The CreateReportTask model module.
 * @module model/CreateReportTask
 * @version v1.15.0
 */
class CreateReportTask {
    /**
     * Constructs a new <code>CreateReportTask</code>.
     * This type defines the rules that govern the generation of a report task and the criteria that&#39;s used to create the report. The report-generation rules include the starting and ending dates for the report. Report-task criteria includes the report dimensions, metrics, listings covered in the report, and so on. For information on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.
     * @alias module:model/CreateReportTask
     */
    constructor() { 
        
        CreateReportTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateReportTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateReportTask} obj Optional instance to populate.
     * @return {module:model/CreateReportTask} The populated <code>CreateReportTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateReportTask();

            if (data.hasOwnProperty('additionalRecords')) {
                obj['additionalRecords'] = ApiClient.convertToType(data['additionalRecords'], ['String']);
            }
            if (data.hasOwnProperty('campaignIds')) {
                obj['campaignIds'] = ApiClient.convertToType(data['campaignIds'], ['String']);
            }
            if (data.hasOwnProperty('dateFrom')) {
                obj['dateFrom'] = ApiClient.convertToType(data['dateFrom'], 'String');
            }
            if (data.hasOwnProperty('dateTo')) {
                obj['dateTo'] = ApiClient.convertToType(data['dateTo'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('fundingModels')) {
                obj['fundingModels'] = ApiClient.convertToType(data['fundingModels'], ['String']);
            }
            if (data.hasOwnProperty('inventoryReferences')) {
                obj['inventoryReferences'] = ApiClient.convertToType(data['inventoryReferences'], [InventoryReference]);
            }
            if (data.hasOwnProperty('listingIds')) {
                obj['listingIds'] = ApiClient.convertToType(data['listingIds'], ['String']);
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('metricKeys')) {
                obj['metricKeys'] = ApiClient.convertToType(data['metricKeys'], ['String']);
            }
            if (data.hasOwnProperty('reportFormat')) {
                obj['reportFormat'] = ApiClient.convertToType(data['reportFormat'], 'String');
            }
            if (data.hasOwnProperty('reportType')) {
                obj['reportType'] = ApiClient.convertToType(data['reportType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateReportTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateReportTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additionalRecords'])) {
            throw new Error("Expected the field `additionalRecords` to be an array in the JSON data but got " + data['additionalRecords']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['campaignIds'])) {
            throw new Error("Expected the field `campaignIds` to be an array in the JSON data but got " + data['campaignIds']);
        }
        // ensure the json data is a string
        if (data['dateFrom'] && !(typeof data['dateFrom'] === 'string' || data['dateFrom'] instanceof String)) {
            throw new Error("Expected the field `dateFrom` to be a primitive type in the JSON string but got " + data['dateFrom']);
        }
        // ensure the json data is a string
        if (data['dateTo'] && !(typeof data['dateTo'] === 'string' || data['dateTo'] instanceof String)) {
            throw new Error("Expected the field `dateTo` to be a primitive type in the JSON string but got " + data['dateTo']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fundingModels'])) {
            throw new Error("Expected the field `fundingModels` to be an array in the JSON data but got " + data['fundingModels']);
        }
        if (data['inventoryReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inventoryReferences'])) {
                throw new Error("Expected the field `inventoryReferences` to be an array in the JSON data but got " + data['inventoryReferences']);
            }
            // validate the optional field `inventoryReferences` (array)
            for (const item of data['inventoryReferences']) {
                InventoryReference.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listingIds'])) {
            throw new Error("Expected the field `listingIds` to be an array in the JSON data but got " + data['listingIds']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricKeys'])) {
            throw new Error("Expected the field `metricKeys` to be an array in the JSON data but got " + data['metricKeys']);
        }
        // ensure the json data is a string
        if (data['reportFormat'] && !(typeof data['reportFormat'] === 'string' || data['reportFormat'] instanceof String)) {
            throw new Error("Expected the field `reportFormat` to be a primitive type in the JSON string but got " + data['reportFormat']);
        }
        // ensure the json data is a string
        if (data['reportType'] && !(typeof data['reportType'] === 'string' || data['reportType'] instanceof String)) {
            throw new Error("Expected the field `reportType` to be a primitive type in the JSON string but got " + data['reportType']);
        }

        return true;
    }


}



/**
 * A list of additional records that shall be included in the report, such as non-performing data.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Additional records are only applicable to Promoted Listings Advanced (PLA) campaigns that use the Cost Per Click (CPC) funding model.</span><br /><b>Valid Value:</b> <code>NON_PERFORMING_DATA</code>
 * @member {Array.<String>} additionalRecords
 */
CreateReportTask.prototype['additionalRecords'] = undefined;

/**
 * A list of campaign IDs to be included in the report task. Call <b>getCampaigns</b> to get a list of the current campaign IDs for a seller.<br /><br />For Promoted Listings Standard (PLS) sellers, this field is required if the <b>reportType</b> is set to <code>CAMPAIGN_PERFORMANCE_REPORT</code> or <code>CAMPAIGN_PERFORMANCE_SUMMARY_REPORT</code>.<br /><br />For Promoted Listings Advanced (PLA) sellers, leave this request field blank to retrieve the details for all campaigns associated with your account, or specify the campaign IDs for which you would like to retrieve the campaign-specific details.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> There is a maximum data limit that cannot be exceeded when generating reports. If this threshold is exceeded, the report will fail. Refer to <a href=\"/api-docs/sell/static/marketing/pl-reports.html#creation\">Promoted Listings reporting</a> in the Selling Integration Guide for details.</span><br /><br /><b>Maximum:</b><ul><li>25 IDs for PLS</li><li>1,000 IDs for PLA</li></ul>
 * @member {Array.<String>} campaignIds
 */
CreateReportTask.prototype['campaignIds'] = undefined;

/**
 * The date defining the start of the timespan covered by the report.<br /><br />Format the timestamp as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock with local offset.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The date specified cannot be a future date.</span><br /><br /><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code><br /><br /><b>Example:</b> <code>2021-03-15T13:00:00-07:00</code>
 * @member {String} dateFrom
 */
CreateReportTask.prototype['dateFrom'] = undefined;

/**
 * The date defining the end of the timespan covered by the report.<br /><br />As with the <b>dateFrom</b> field, format the timestamp as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The date specified cannot be a future date. Additionally, the time specified must be a later time than that specified in the <b>dateFrom</b> field.</span><br /><br /><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code><br /><br /><b>Example:</b> <code>2021-03-17T13:00:00-07:00</code>
 * @member {String} dateTo
 */
CreateReportTask.prototype['dateTo'] = undefined;

/**
 * The list of the dimensions applied to the report.  <p>A dimension is an attribute to which the report data applies. For example, if you set <b>dimensionKey</b> to <code>campaign_id</code> in a Campaign Performance Report, the data will apply to the entire ad campaign. For information on the dimensions and how to specify them, see <a href=\"/api-docs/sell/static/marketing/pl-reports.html\">Promoted Listings reporting</a>.</p>
 * @member {Array.<module:model/Dimension>} dimensions
 */
CreateReportTask.prototype['dimensions'] = undefined;

/**
 * The funding model for the campaign that shall be included in the report.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The default funding model for Promoted Listings reports is <code>COST_PER_SALE</code>.</span><br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Multiple value support for the <b>fundingModels</b> array has been deprecated. See <a href =\"/develop/apis/api-deprecation-status \">API&nbsp;Deprecation&nbsp;Status</a> for information.</span><br /><br /><b>Valid Values:</b><ul><li><code>COST_PER_SALE</code></li><li><code>COST_PER_CLICK</code></li></ul><i>Required if</i> the campaign funding model is Cost Per Click (CPC).
 * @member {Array.<String>} fundingModels
 */
CreateReportTask.prototype['fundingModels'] = undefined;

/**
 * You can use this field to supply an array of items to include in the report if you manage your inventory with the <a href=\"/api-docs/sell/inventory/resources/methods\">Inventory API</a>.  <br><br>This field is mutually exclusive with the <b>listingIds</b> field; if you populate this field, <i>do not</i> populate the <b>listingIds</b> field.  <br><br>An inventory reference identifies an item in your inventory using a pair of values, where the <b>inventoryReferenceId</b> can be either a seller-defined <b>SKU</b> value or an <b>inventoryItemGroupKey</b>, where an <b>inventoryItemGroupKey</b> is seller-defined ID for an inventory item group (a multiple-variation listing). <br><br>Couple the <b>inventoryReferenceId</b> with an <b>inventoryReferenceType</b> identifier to fully identify an item in your inventory.  <br><br><b>Maximum: </b> 500 items <br><br><i>Required if </i> you do not supply an array of <b>listingId</b> values or if you set <b>reportType</b> to <code>INVENTORY_PERFORMANCE_REPORT</code>.
 * @member {Array.<module:model/InventoryReference>} inventoryReferences
 */
CreateReportTask.prototype['inventoryReferences'] = undefined;

/**
 * Use this field to supply an array of listing IDs you want to include in the report.<br><br>A listing ID is the eBay listing identifier that is generated when the listing is created. This field accepts listing ID values generated with both the Inventory API and the eBay Traditional APIs, such as the Trading and Finding APIs.<br><br><span class=\"tablenote\"><span style=\"color:#FF0000\"><strong>Important:</strong></span> This field is mutually exclusive with the <b>inventoryReferences</b> field; if you populate this field, <i>do not</i> populate the <b>inventoryReferences</b> field.</span><br /><br />For Promoted Listings Standard (PLS) sellers, this field is required if you do not supply an array of <b>inventoryReferences</b> values or if you set the <b>reportType</b> to <code>LISTING_PERFORMANCE_REPORT</code>.<br /><br />For Promoted Listings Advanced (PLA) sellers, leave this field blank to retrieve the details for all listings associated with the specified campaign IDs (or all campaigns associated with your account, if no campaign IDs are specified), or specify the listing IDs for which you would like to retrieve the listing-specific details.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> There is a maximum data limit that cannot be exceeded when generating reports. If this threshold is exceeded, the report will fail. Refer to <a href=\"/api-docs/sell/static/marketing/pl-reports.html#creation\">Promoted Listings reporting</a> in the Selling Integration Guide for details.</span><br /><br /><b>Maximum:</b> 500 listings
 * @member {Array.<String>} listingIds
 */
CreateReportTask.prototype['listingIds'] = undefined;

/**
 * The ID for the eBay marketplace on which the report is based.<br /><br /><b>Maximum: </b> 1 For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
CreateReportTask.prototype['marketplaceId'] = undefined;

/**
 * The list of metrics to be included in the report.  <p>Metrics are the quantitative measurements compiled into the report and the data returned is based on the specified dimension of the report. For example, if the dimension is <code>campaign</code>, the metrics for <b>number of sales</b> would be the number of sales in the campaign. However, if the dimension is <code>listing</code>, the <b>number of sales</b> represents the number of items sold in that listing.</p>  <p>For information on metric keys and how to set them, see <a href=\"/api-docs/sell/static/marketing/pl-reports.html\">Promoted Listings reporting</a>.</p><b>Minimum: </b> 1
 * @member {Array.<String>} metricKeys
 */
CreateReportTask.prototype['metricKeys'] = undefined;

/**
 * The file format of the report. Currently, the only supported format is <code>TSV_GZIP</code>, which is a gzip file with tab separated values. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportFormatEnum'>eBay API documentation</a>
 * @member {String} reportFormat
 */
CreateReportTask.prototype['reportFormat'] = undefined;

/**
 * The type of report to be generated, such as <code>ACCOUNT_PERFORMANCE_REPORT</code> or <code>CAMPAIGN_PERFORMANCE_REPORT</code>.<br/><br/><span class=\"tablenote\"><b>Note:</b> INVENTORY_PERFORMANCE_REPORT is not currently available; availability date is pending.</span><br /><br /><b>Maximum:</b> 1 For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum'>eBay API documentation</a>
 * @member {String} reportType
 */
CreateReportTask.prototype['reportType'] = undefined;






export default CreateReportTask;

