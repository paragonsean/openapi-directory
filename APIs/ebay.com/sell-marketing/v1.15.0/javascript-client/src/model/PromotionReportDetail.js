/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The PromotionReportDetail model module.
 * @module model/PromotionReportDetail
 * @version v1.15.0
 */
class PromotionReportDetail {
    /**
     * Constructs a new <code>PromotionReportDetail</code>.
     * This type defines the fields in a promotion-level report.
     * @alias module:model/PromotionReportDetail
     */
    constructor() { 
        
        PromotionReportDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PromotionReportDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromotionReportDetail} obj Optional instance to populate.
     * @return {module:model/PromotionReportDetail} The populated <code>PromotionReportDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromotionReportDetail();

            if (data.hasOwnProperty('averageItemDiscount')) {
                obj['averageItemDiscount'] = Amount.constructFromObject(data['averageItemDiscount']);
            }
            if (data.hasOwnProperty('averageItemRevenue')) {
                obj['averageItemRevenue'] = Amount.constructFromObject(data['averageItemRevenue']);
            }
            if (data.hasOwnProperty('averageOrderDiscount')) {
                obj['averageOrderDiscount'] = Amount.constructFromObject(data['averageOrderDiscount']);
            }
            if (data.hasOwnProperty('averageOrderRevenue')) {
                obj['averageOrderRevenue'] = Amount.constructFromObject(data['averageOrderRevenue']);
            }
            if (data.hasOwnProperty('averageOrderSize')) {
                obj['averageOrderSize'] = ApiClient.convertToType(data['averageOrderSize'], 'String');
            }
            if (data.hasOwnProperty('baseSale')) {
                obj['baseSale'] = Amount.constructFromObject(data['baseSale']);
            }
            if (data.hasOwnProperty('itemsSoldQuantity')) {
                obj['itemsSoldQuantity'] = ApiClient.convertToType(data['itemsSoldQuantity'], 'Number');
            }
            if (data.hasOwnProperty('numberOfOrdersSold')) {
                obj['numberOfOrdersSold'] = ApiClient.convertToType(data['numberOfOrdersSold'], 'Number');
            }
            if (data.hasOwnProperty('percentageSalesLift')) {
                obj['percentageSalesLift'] = ApiClient.convertToType(data['percentageSalesLift'], 'String');
            }
            if (data.hasOwnProperty('promotionHref')) {
                obj['promotionHref'] = ApiClient.convertToType(data['promotionHref'], 'String');
            }
            if (data.hasOwnProperty('promotionId')) {
                obj['promotionId'] = ApiClient.convertToType(data['promotionId'], 'String');
            }
            if (data.hasOwnProperty('promotionReportId')) {
                obj['promotionReportId'] = ApiClient.convertToType(data['promotionReportId'], 'String');
            }
            if (data.hasOwnProperty('promotionSale')) {
                obj['promotionSale'] = Amount.constructFromObject(data['promotionSale']);
            }
            if (data.hasOwnProperty('promotionType')) {
                obj['promotionType'] = ApiClient.convertToType(data['promotionType'], 'String');
            }
            if (data.hasOwnProperty('totalDiscount')) {
                obj['totalDiscount'] = Amount.constructFromObject(data['totalDiscount']);
            }
            if (data.hasOwnProperty('totalSale')) {
                obj['totalSale'] = Amount.constructFromObject(data['totalSale']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromotionReportDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromotionReportDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `averageItemDiscount`
        if (data['averageItemDiscount']) { // data not null
          Amount.validateJSON(data['averageItemDiscount']);
        }
        // validate the optional field `averageItemRevenue`
        if (data['averageItemRevenue']) { // data not null
          Amount.validateJSON(data['averageItemRevenue']);
        }
        // validate the optional field `averageOrderDiscount`
        if (data['averageOrderDiscount']) { // data not null
          Amount.validateJSON(data['averageOrderDiscount']);
        }
        // validate the optional field `averageOrderRevenue`
        if (data['averageOrderRevenue']) { // data not null
          Amount.validateJSON(data['averageOrderRevenue']);
        }
        // ensure the json data is a string
        if (data['averageOrderSize'] && !(typeof data['averageOrderSize'] === 'string' || data['averageOrderSize'] instanceof String)) {
            throw new Error("Expected the field `averageOrderSize` to be a primitive type in the JSON string but got " + data['averageOrderSize']);
        }
        // validate the optional field `baseSale`
        if (data['baseSale']) { // data not null
          Amount.validateJSON(data['baseSale']);
        }
        // ensure the json data is a string
        if (data['percentageSalesLift'] && !(typeof data['percentageSalesLift'] === 'string' || data['percentageSalesLift'] instanceof String)) {
            throw new Error("Expected the field `percentageSalesLift` to be a primitive type in the JSON string but got " + data['percentageSalesLift']);
        }
        // ensure the json data is a string
        if (data['promotionHref'] && !(typeof data['promotionHref'] === 'string' || data['promotionHref'] instanceof String)) {
            throw new Error("Expected the field `promotionHref` to be a primitive type in the JSON string but got " + data['promotionHref']);
        }
        // ensure the json data is a string
        if (data['promotionId'] && !(typeof data['promotionId'] === 'string' || data['promotionId'] instanceof String)) {
            throw new Error("Expected the field `promotionId` to be a primitive type in the JSON string but got " + data['promotionId']);
        }
        // ensure the json data is a string
        if (data['promotionReportId'] && !(typeof data['promotionReportId'] === 'string' || data['promotionReportId'] instanceof String)) {
            throw new Error("Expected the field `promotionReportId` to be a primitive type in the JSON string but got " + data['promotionReportId']);
        }
        // validate the optional field `promotionSale`
        if (data['promotionSale']) { // data not null
          Amount.validateJSON(data['promotionSale']);
        }
        // ensure the json data is a string
        if (data['promotionType'] && !(typeof data['promotionType'] === 'string' || data['promotionType'] instanceof String)) {
            throw new Error("Expected the field `promotionType` to be a primitive type in the JSON string but got " + data['promotionType']);
        }
        // validate the optional field `totalDiscount`
        if (data['totalDiscount']) { // data not null
          Amount.validateJSON(data['totalDiscount']);
        }
        // validate the optional field `totalSale`
        if (data['totalSale']) { // data not null
          Amount.validateJSON(data['totalSale']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} averageItemDiscount
 */
PromotionReportDetail.prototype['averageItemDiscount'] = undefined;

/**
 * @member {module:model/Amount} averageItemRevenue
 */
PromotionReportDetail.prototype['averageItemRevenue'] = undefined;

/**
 * @member {module:model/Amount} averageOrderDiscount
 */
PromotionReportDetail.prototype['averageOrderDiscount'] = undefined;

/**
 * @member {module:model/Amount} averageOrderRevenue
 */
PromotionReportDetail.prototype['averageOrderRevenue'] = undefined;

/**
 * The <i>average order size</i> is the average number of items that each order contained in a promotion. This value is calculated as follows:  <br><br><b>itemsSoldQuantity</b> / <b>numberOfOrdersSold</b> = <b>averageOrderSize</b> 
 * @member {String} averageOrderSize
 */
PromotionReportDetail.prototype['averageOrderSize'] = undefined;

/**
 * @member {module:model/Amount} baseSale
 */
PromotionReportDetail.prototype['baseSale'] = undefined;

/**
 * This is the quantity of items purchased in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (<b>itemsSoldQuantity</b>) would be 2 and you number of orders sold (<b>numberOfOrdersSold</b>) would be 1.
 * @member {Number} itemsSoldQuantity
 */
PromotionReportDetail.prototype['itemsSoldQuantity'] = undefined;

/**
 * This is the number of orders sold in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your <b>numberOfOrdersSold</b> would be 1 and your <b>itemsSoldQuantity</b> would be 2.
 * @member {Number} numberOfOrdersSold
 */
PromotionReportDetail.prototype['numberOfOrdersSold'] = undefined;

/**
 * The <i>percentage sales lift</i> is the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br> <b>promotionSale</b> / <b>totalSale</b> =  <b>percentageSalesLift</b> 
 * @member {String} percentageSalesLift
 */
PromotionReportDetail.prototype['percentageSalesLift'] = undefined;

/**
 * The URI of the promotion report.
 * @member {String} promotionHref
 */
PromotionReportDetail.prototype['promotionHref'] = undefined;

/**
 * A unique eBay-assigned ID for the promotion that's generated when the promotion is created.
 * @member {String} promotionId
 */
PromotionReportDetail.prototype['promotionId'] = undefined;

/**
 * The unique eBay-assigned ID of the promotion report that is generated when the report is created.
 * @member {String} promotionReportId
 */
PromotionReportDetail.prototype['promotionReportId'] = undefined;

/**
 * @member {module:model/Amount} promotionSale
 */
PromotionReportDetail.prototype['promotionSale'] = undefined;

/**
 * Indicates the type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>
 * @member {String} promotionType
 */
PromotionReportDetail.prototype['promotionType'] = undefined;

/**
 * @member {module:model/Amount} totalDiscount
 */
PromotionReportDetail.prototype['totalDiscount'] = undefined;

/**
 * @member {module:model/Amount} totalSale
 */
PromotionReportDetail.prototype['totalSale'] = undefined;






export default PromotionReportDetail;

