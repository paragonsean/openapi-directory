/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import InventoryReference from './InventoryReference';

/**
 * The ReportTask model module.
 * @module model/ReportTask
 * @version v1.15.0
 */
class ReportTask {
    /**
     * Constructs a new <code>ReportTask</code>.
     * This type defines the fields in a report task.
     * @alias module:model/ReportTask
     */
    constructor() { 
        
        ReportTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportTask} obj Optional instance to populate.
     * @return {module:model/ReportTask} The populated <code>ReportTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportTask();

            if (data.hasOwnProperty('campaignIds')) {
                obj['campaignIds'] = ApiClient.convertToType(data['campaignIds'], ['String']);
            }
            if (data.hasOwnProperty('dateFrom')) {
                obj['dateFrom'] = ApiClient.convertToType(data['dateFrom'], 'String');
            }
            if (data.hasOwnProperty('dateTo')) {
                obj['dateTo'] = ApiClient.convertToType(data['dateTo'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('fundingModels')) {
                obj['fundingModels'] = ApiClient.convertToType(data['fundingModels'], ['String']);
            }
            if (data.hasOwnProperty('inventoryReferences')) {
                obj['inventoryReferences'] = ApiClient.convertToType(data['inventoryReferences'], [InventoryReference]);
            }
            if (data.hasOwnProperty('listingIds')) {
                obj['listingIds'] = ApiClient.convertToType(data['listingIds'], ['String']);
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('metricKeys')) {
                obj['metricKeys'] = ApiClient.convertToType(data['metricKeys'], ['String']);
            }
            if (data.hasOwnProperty('reportExpirationDate')) {
                obj['reportExpirationDate'] = ApiClient.convertToType(data['reportExpirationDate'], 'String');
            }
            if (data.hasOwnProperty('reportFormat')) {
                obj['reportFormat'] = ApiClient.convertToType(data['reportFormat'], 'String');
            }
            if (data.hasOwnProperty('reportHref')) {
                obj['reportHref'] = ApiClient.convertToType(data['reportHref'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('reportName')) {
                obj['reportName'] = ApiClient.convertToType(data['reportName'], 'String');
            }
            if (data.hasOwnProperty('reportTaskCompletionDate')) {
                obj['reportTaskCompletionDate'] = ApiClient.convertToType(data['reportTaskCompletionDate'], 'String');
            }
            if (data.hasOwnProperty('reportTaskCreationDate')) {
                obj['reportTaskCreationDate'] = ApiClient.convertToType(data['reportTaskCreationDate'], 'String');
            }
            if (data.hasOwnProperty('reportTaskExpectedCompletionDate')) {
                obj['reportTaskExpectedCompletionDate'] = ApiClient.convertToType(data['reportTaskExpectedCompletionDate'], 'String');
            }
            if (data.hasOwnProperty('reportTaskId')) {
                obj['reportTaskId'] = ApiClient.convertToType(data['reportTaskId'], 'String');
            }
            if (data.hasOwnProperty('reportTaskStatus')) {
                obj['reportTaskStatus'] = ApiClient.convertToType(data['reportTaskStatus'], 'String');
            }
            if (data.hasOwnProperty('reportTaskStatusMessage')) {
                obj['reportTaskStatusMessage'] = ApiClient.convertToType(data['reportTaskStatusMessage'], 'String');
            }
            if (data.hasOwnProperty('reportType')) {
                obj['reportType'] = ApiClient.convertToType(data['reportType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['campaignIds'])) {
            throw new Error("Expected the field `campaignIds` to be an array in the JSON data but got " + data['campaignIds']);
        }
        // ensure the json data is a string
        if (data['dateFrom'] && !(typeof data['dateFrom'] === 'string' || data['dateFrom'] instanceof String)) {
            throw new Error("Expected the field `dateFrom` to be a primitive type in the JSON string but got " + data['dateFrom']);
        }
        // ensure the json data is a string
        if (data['dateTo'] && !(typeof data['dateTo'] === 'string' || data['dateTo'] instanceof String)) {
            throw new Error("Expected the field `dateTo` to be a primitive type in the JSON string but got " + data['dateTo']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fundingModels'])) {
            throw new Error("Expected the field `fundingModels` to be an array in the JSON data but got " + data['fundingModels']);
        }
        if (data['inventoryReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inventoryReferences'])) {
                throw new Error("Expected the field `inventoryReferences` to be an array in the JSON data but got " + data['inventoryReferences']);
            }
            // validate the optional field `inventoryReferences` (array)
            for (const item of data['inventoryReferences']) {
                InventoryReference.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listingIds'])) {
            throw new Error("Expected the field `listingIds` to be an array in the JSON data but got " + data['listingIds']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricKeys'])) {
            throw new Error("Expected the field `metricKeys` to be an array in the JSON data but got " + data['metricKeys']);
        }
        // ensure the json data is a string
        if (data['reportExpirationDate'] && !(typeof data['reportExpirationDate'] === 'string' || data['reportExpirationDate'] instanceof String)) {
            throw new Error("Expected the field `reportExpirationDate` to be a primitive type in the JSON string but got " + data['reportExpirationDate']);
        }
        // ensure the json data is a string
        if (data['reportFormat'] && !(typeof data['reportFormat'] === 'string' || data['reportFormat'] instanceof String)) {
            throw new Error("Expected the field `reportFormat` to be a primitive type in the JSON string but got " + data['reportFormat']);
        }
        // ensure the json data is a string
        if (data['reportHref'] && !(typeof data['reportHref'] === 'string' || data['reportHref'] instanceof String)) {
            throw new Error("Expected the field `reportHref` to be a primitive type in the JSON string but got " + data['reportHref']);
        }
        // ensure the json data is a string
        if (data['reportId'] && !(typeof data['reportId'] === 'string' || data['reportId'] instanceof String)) {
            throw new Error("Expected the field `reportId` to be a primitive type in the JSON string but got " + data['reportId']);
        }
        // ensure the json data is a string
        if (data['reportName'] && !(typeof data['reportName'] === 'string' || data['reportName'] instanceof String)) {
            throw new Error("Expected the field `reportName` to be a primitive type in the JSON string but got " + data['reportName']);
        }
        // ensure the json data is a string
        if (data['reportTaskCompletionDate'] && !(typeof data['reportTaskCompletionDate'] === 'string' || data['reportTaskCompletionDate'] instanceof String)) {
            throw new Error("Expected the field `reportTaskCompletionDate` to be a primitive type in the JSON string but got " + data['reportTaskCompletionDate']);
        }
        // ensure the json data is a string
        if (data['reportTaskCreationDate'] && !(typeof data['reportTaskCreationDate'] === 'string' || data['reportTaskCreationDate'] instanceof String)) {
            throw new Error("Expected the field `reportTaskCreationDate` to be a primitive type in the JSON string but got " + data['reportTaskCreationDate']);
        }
        // ensure the json data is a string
        if (data['reportTaskExpectedCompletionDate'] && !(typeof data['reportTaskExpectedCompletionDate'] === 'string' || data['reportTaskExpectedCompletionDate'] instanceof String)) {
            throw new Error("Expected the field `reportTaskExpectedCompletionDate` to be a primitive type in the JSON string but got " + data['reportTaskExpectedCompletionDate']);
        }
        // ensure the json data is a string
        if (data['reportTaskId'] && !(typeof data['reportTaskId'] === 'string' || data['reportTaskId'] instanceof String)) {
            throw new Error("Expected the field `reportTaskId` to be a primitive type in the JSON string but got " + data['reportTaskId']);
        }
        // ensure the json data is a string
        if (data['reportTaskStatus'] && !(typeof data['reportTaskStatus'] === 'string' || data['reportTaskStatus'] instanceof String)) {
            throw new Error("Expected the field `reportTaskStatus` to be a primitive type in the JSON string but got " + data['reportTaskStatus']);
        }
        // ensure the json data is a string
        if (data['reportTaskStatusMessage'] && !(typeof data['reportTaskStatusMessage'] === 'string' || data['reportTaskStatusMessage'] instanceof String)) {
            throw new Error("Expected the field `reportTaskStatusMessage` to be a primitive type in the JSON string but got " + data['reportTaskStatusMessage']);
        }
        // ensure the json data is a string
        if (data['reportType'] && !(typeof data['reportType'] === 'string' || data['reportType'] instanceof String)) {
            throw new Error("Expected the field `reportType` to be a primitive type in the JSON string but got " + data['reportType']);
        }

        return true;
    }


}



/**
 * A list of IDs for the campaigns that are included in the report. A campaign ID is a unique eBay-assigned identifier of the campaign that's generated when the campaign is created.<br /><br />Call <b>getCampaigns</b> to return the current campaign IDs for a seller.
 * @member {Array.<String>} campaignIds
 */
ReportTask.prototype['campaignIds'] = undefined;

/**
 * The date defining the start of the timespan covered by the report, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html \" title=\"https://www.iso.org \" target=\"_blank\">ISO 8601</a> timestamp.
 * @member {String} dateFrom
 */
ReportTask.prototype['dateFrom'] = undefined;

/**
 * The date defining the end of the timespan covered by the report, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html \" title=\"https://www.iso.org \" target=\"_blank\">ISO 8601</a> timestamp.
 * @member {String} dateTo
 */
ReportTask.prototype['dateTo'] = undefined;

/**
 * A list containing the dimension in the report.
 * @member {Array.<module:model/Dimension>} dimensions
 */
ReportTask.prototype['dimensions'] = undefined;

/**
 * The funding model for the campaign that shall be included in the report.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> The default funding model for Promoted Listings reports is <code>COST_PER_SALE</code>.</span><br /><br /><b>Valid Values:</b><ul><li><code>COST_PER_SALE</code></li><li><code>COST_PER_CLICK</code></li></ul>
 * @member {Array.<String>} fundingModels
 */
ReportTask.prototype['fundingModels'] = undefined;

/**
 * If supplied in the request, this field returns a list of the seller's inventory reference IDs included in the report.  <p>Each item is referenced by a pair of <b>inventoryRefernceID</b> and <b>inventoryReferenceType</b> values, where an inventory reference ID can be either a seller-defined <b>SKU</b> value or an <b>inventoryItemGroupKey</b>. An <b>inventoryItemGroupKey</b> is seller-defined ID for an inventory item group (a multiple-variation listing), and is created and used by the <a href=\"/api-docs/sell/inventory/resources/methods\">Inventory API</a>.</p>
 * @member {Array.<module:model/InventoryReference>} inventoryReferences
 */
ReportTask.prototype['inventoryReferences'] = undefined;

/**
 * If supplied in the request, this field returns a list of the listing IDs included in the report. A listing ID is an eBay-assigned ID that's generated when a listing is created.
 * @member {Array.<String>} listingIds
 */
ReportTask.prototype['listingIds'] = undefined;

/**
 * The ID of the eBay marketplace used by the report task. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} marketplaceId
 */
ReportTask.prototype['marketplaceId'] = undefined;

/**
 * A list of metrics for the report task.
 * @member {Array.<String>} metricKeys
 */
ReportTask.prototype['metricKeys'] = undefined;

/**
 * The date after which the report is no longer be available. Reports are available for 30 days and you cannot download a report after it has expired.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
 * @member {String} reportExpirationDate
 */
ReportTask.prototype['reportExpirationDate'] = undefined;

/**
 * Indicates the format of the report. Currently, only <code>TSV_GZIP</code> is supported. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportFormatEnum'>eBay API documentation</a>
 * @member {String} reportFormat
 */
ReportTask.prototype['reportFormat'] = undefined;

/**
 * The URL of the generated report, which can be used to download the report once it has been generated.
 * @member {String} reportHref
 */
ReportTask.prototype['reportHref'] = undefined;

/**
 * A unique eBay-assigned ID for the report.
 * @member {String} reportId
 */
ReportTask.prototype['reportId'] = undefined;

/**
 * An eBay-assigned name for the report that's created by the <b>createReportTask</b> call. This name is unique for the seller.
 * @member {String} reportName
 */
ReportTask.prototype['reportName'] = undefined;

/**
 * The date the report task completed the report generation.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
 * @member {String} reportTaskCompletionDate
 */
ReportTask.prototype['reportTaskCompletionDate'] = undefined;

/**
 * The date the report task was created.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
 * @member {String} reportTaskCreationDate
 */
ReportTask.prototype['reportTaskCreationDate'] = undefined;

/**
 * The date the report task is expected to complete the report generation.  <br><br><b>Format (UTC): </b> yyyy-MM-ddThh:mm:ss.sssZ
 * @member {String} reportTaskExpectedCompletionDate
 */
ReportTask.prototype['reportTaskExpectedCompletionDate'] = undefined;

/**
 * The unique eBay-assigned ID of the report task. This value is generated when the report task is created with a call to <b>createReportTask</b>.
 * @member {String} reportTaskId
 */
ReportTask.prototype['reportTaskId'] = undefined;

/**
 * Indicates the current state of the report task. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:TaskStatusEnum'>eBay API documentation</a>
 * @member {String} reportTaskStatus
 */
ReportTask.prototype['reportTaskStatus'] = undefined;

/**
 * A status message with additional information about the report task.
 * @member {String} reportTaskStatusMessage
 */
ReportTask.prototype['reportTaskStatusMessage'] = undefined;

/**
 * Indicates type of report associated with the report task.<br/><br/><span class=\"tablenote\"><b>Note:</b> INVENTORY_PERFORMANCE_REPORT is not currently available; availability date is pending.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum'>eBay API documentation</a>
 * @member {String} reportType
 */
ReportTask.prototype['reportType'] = undefined;






export default ReportTask;

