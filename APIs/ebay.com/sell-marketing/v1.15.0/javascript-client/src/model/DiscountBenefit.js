/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The DiscountBenefit model module.
 * @module model/DiscountBenefit
 * @version v1.15.0
 */
class DiscountBenefit {
    /**
     * Constructs a new <code>DiscountBenefit</code>.
     * This container defines the promotional discount as either a monetary amount or a percentage of the sales price.  &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Important!:&lt;/b&gt; You must populate one and only one of the fields in this container: &lt;ul&gt;&lt;li&gt;&lt;b&gt;amountOffItem&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;amountOffOrder&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;percentageOffItem&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;percentageOffOrder&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;  &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Tip:&lt;/b&gt; Refer to &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pm-specifying-discounts.html\&quot;&gt;Configuring discounts for threshold promotions&lt;/a&gt; for information and examples on how to combine &lt;b&gt;discountBenefit&lt;/b&gt; and &lt;b&gt;discountSpecification&lt;/b&gt; values to create different types of promotions.&lt;/p&gt;
     * @alias module:model/DiscountBenefit
     */
    constructor() { 
        
        DiscountBenefit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiscountBenefit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiscountBenefit} obj Optional instance to populate.
     * @return {module:model/DiscountBenefit} The populated <code>DiscountBenefit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscountBenefit();

            if (data.hasOwnProperty('amountOffItem')) {
                obj['amountOffItem'] = Amount.constructFromObject(data['amountOffItem']);
            }
            if (data.hasOwnProperty('amountOffOrder')) {
                obj['amountOffOrder'] = Amount.constructFromObject(data['amountOffOrder']);
            }
            if (data.hasOwnProperty('percentageOffItem')) {
                obj['percentageOffItem'] = ApiClient.convertToType(data['percentageOffItem'], 'String');
            }
            if (data.hasOwnProperty('percentageOffOrder')) {
                obj['percentageOffOrder'] = ApiClient.convertToType(data['percentageOffOrder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscountBenefit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscountBenefit</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amountOffItem`
        if (data['amountOffItem']) { // data not null
          Amount.validateJSON(data['amountOffItem']);
        }
        // validate the optional field `amountOffOrder`
        if (data['amountOffOrder']) { // data not null
          Amount.validateJSON(data['amountOffOrder']);
        }
        // ensure the json data is a string
        if (data['percentageOffItem'] && !(typeof data['percentageOffItem'] === 'string' || data['percentageOffItem'] instanceof String)) {
            throw new Error("Expected the field `percentageOffItem` to be a primitive type in the JSON string but got " + data['percentageOffItem']);
        }
        // ensure the json data is a string
        if (data['percentageOffOrder'] && !(typeof data['percentageOffOrder'] === 'string' || data['percentageOffOrder'] instanceof String)) {
            throw new Error("Expected the field `percentageOffOrder` to be a primitive type in the JSON string but got " + data['percentageOffOrder']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amountOffItem
 */
DiscountBenefit.prototype['amountOffItem'] = undefined;

/**
 * @member {module:model/Amount} amountOffOrder
 */
DiscountBenefit.prototype['amountOffOrder'] = undefined;

/**
 * The percentage applied to the sales price that is discounted off the promoted item (or items) when the promotion criteria is met.  <br><br>Valid integer values for percentage off: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>
 * @member {String} percentageOffItem
 */
DiscountBenefit.prototype['percentageOffItem'] = undefined;

/**
 * Used for threshold promotions, this is the percentage of the order price that is discounted off the order when the promotion criteria is met. This field is not value for markdown promotions.  <br><br>Valid integer values for ORDER_DISCOUNT promotions: &nbsp;&nbsp;<b>Min:</b> <code>5</code> &nbsp;&nbsp;<b>Max:</b> <code>80</code>  <br><br>For VOLUME_DISCOUNT promotions: Must be set to <code>0</code> for the first discount rule.
 * @member {String} percentageOffOrder
 */
DiscountBenefit.prototype['percentageOffOrder'] = undefined;






export default DiscountBenefit;

