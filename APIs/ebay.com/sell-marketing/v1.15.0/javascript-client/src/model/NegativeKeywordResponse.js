/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';

/**
 * The NegativeKeywordResponse model module.
 * @module model/NegativeKeywordResponse
 * @version v1.15.0
 */
class NegativeKeywordResponse {
    /**
     * Constructs a new <code>NegativeKeywordResponse</code>.
     * A type that defines the negative keyword response.
     * @alias module:model/NegativeKeywordResponse
     */
    constructor() { 
        
        NegativeKeywordResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NegativeKeywordResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NegativeKeywordResponse} obj Optional instance to populate.
     * @return {module:model/NegativeKeywordResponse} The populated <code>NegativeKeywordResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NegativeKeywordResponse();

            if (data.hasOwnProperty('adGroupId')) {
                obj['adGroupId'] = ApiClient.convertToType(data['adGroupId'], 'String');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('negativeKeywordId')) {
                obj['negativeKeywordId'] = ApiClient.convertToType(data['negativeKeywordId'], 'String');
            }
            if (data.hasOwnProperty('negativeKeywordMatchType')) {
                obj['negativeKeywordMatchType'] = ApiClient.convertToType(data['negativeKeywordMatchType'], 'String');
            }
            if (data.hasOwnProperty('negativeKeywordText')) {
                obj['negativeKeywordText'] = ApiClient.convertToType(data['negativeKeywordText'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NegativeKeywordResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NegativeKeywordResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adGroupId'] && !(typeof data['adGroupId'] === 'string' || data['adGroupId'] instanceof String)) {
            throw new Error("Expected the field `adGroupId` to be a primitive type in the JSON string but got " + data['adGroupId']);
        }
        // ensure the json data is a string
        if (data['campaignId'] && !(typeof data['campaignId'] === 'string' || data['campaignId'] instanceof String)) {
            throw new Error("Expected the field `campaignId` to be a primitive type in the JSON string but got " + data['campaignId']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['negativeKeywordId'] && !(typeof data['negativeKeywordId'] === 'string' || data['negativeKeywordId'] instanceof String)) {
            throw new Error("Expected the field `negativeKeywordId` to be a primitive type in the JSON string but got " + data['negativeKeywordId']);
        }
        // ensure the json data is a string
        if (data['negativeKeywordMatchType'] && !(typeof data['negativeKeywordMatchType'] === 'string' || data['negativeKeywordMatchType'] instanceof String)) {
            throw new Error("Expected the field `negativeKeywordMatchType` to be a primitive type in the JSON string but got " + data['negativeKeywordMatchType']);
        }
        // ensure the json data is a string
        if (data['negativeKeywordText'] && !(typeof data['negativeKeywordText'] === 'string' || data['negativeKeywordText'] instanceof String)) {
            throw new Error("Expected the field `negativeKeywordText` to be a primitive type in the JSON string but got " + data['negativeKeywordText']);
        }

        return true;
    }


}



/**
 * A unique identifier for an ad group that is generated when an ad group is first created and associated with a campaign.
 * @member {String} adGroupId
 */
NegativeKeywordResponse.prototype['adGroupId'] = undefined;

/**
 * A unique eBay-assigned ID for a campaign. This ID is generated when a campaign is created.
 * @member {String} campaignId
 */
NegativeKeywordResponse.prototype['campaignId'] = undefined;

/**
 * This container will be returned if there is an issue creating the corresponding negative keyword.
 * @member {Array.<module:model/Error>} errors
 */
NegativeKeywordResponse.prototype['errors'] = undefined;

/**
 * The URI for the negative keyword, which is used to retrieve the negative keyword. This URI will be returned for each successfully created negative keyword.
 * @member {String} href
 */
NegativeKeywordResponse.prototype['href'] = undefined;

/**
 * A unique eBay-assigned ID for a negative keyword. This negative keyword ID will be generated for each successfully created negative keyword.
 * @member {String} negativeKeywordId
 */
NegativeKeywordResponse.prototype['negativeKeywordId'] = undefined;

/**
 * The match type for the negative keyword.<br /><br /><span class=\"tablenote\"><span style=\"color:#004680\"><strong>Note:</strong></span> Broad matching of negative keywords is not currently supported.</span><br /><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>PHRASE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:NegativeKeywordMatchTypeEnum'>eBay API documentation</a>
 * @member {String} negativeKeywordMatchType
 */
NegativeKeywordResponse.prototype['negativeKeywordMatchType'] = undefined;

/**
 * The text for the negative keyword.
 * @member {String} negativeKeywordText
 */
NegativeKeywordResponse.prototype['negativeKeywordText'] = undefined;

/**
 * The status of the request to create a negative keyword. This field indicates whether the process was successful or not.
 * @member {Number} statusCode
 */
NegativeKeywordResponse.prototype['statusCode'] = undefined;






export default NegativeKeywordResponse;

