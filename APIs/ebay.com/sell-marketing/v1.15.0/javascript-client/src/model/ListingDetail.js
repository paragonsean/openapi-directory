/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import ItemMarkdownStatus from './ItemMarkdownStatus';

/**
 * The ListingDetail model module.
 * @module model/ListingDetail
 * @version v1.15.0
 */
class ListingDetail {
    /**
     * Constructs a new <code>ListingDetail</code>.
     * This type defines the fields that describe a listing that is in a promotion.
     * @alias module:model/ListingDetail
     */
    constructor() { 
        
        ListingDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListingDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingDetail} obj Optional instance to populate.
     * @return {module:model/ListingDetail} The populated <code>ListingDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingDetail();

            if (data.hasOwnProperty('currentPrice')) {
                obj['currentPrice'] = Amount.constructFromObject(data['currentPrice']);
            }
            if (data.hasOwnProperty('freeShipping')) {
                obj['freeShipping'] = ApiClient.convertToType(data['freeShipping'], 'Boolean');
            }
            if (data.hasOwnProperty('inventoryReferenceId')) {
                obj['inventoryReferenceId'] = ApiClient.convertToType(data['inventoryReferenceId'], 'String');
            }
            if (data.hasOwnProperty('inventoryReferenceType')) {
                obj['inventoryReferenceType'] = ApiClient.convertToType(data['inventoryReferenceType'], 'String');
            }
            if (data.hasOwnProperty('listingCategoryId')) {
                obj['listingCategoryId'] = ApiClient.convertToType(data['listingCategoryId'], 'String');
            }
            if (data.hasOwnProperty('listingCondition')) {
                obj['listingCondition'] = ApiClient.convertToType(data['listingCondition'], 'String');
            }
            if (data.hasOwnProperty('listingConditionId')) {
                obj['listingConditionId'] = ApiClient.convertToType(data['listingConditionId'], 'String');
            }
            if (data.hasOwnProperty('listingId')) {
                obj['listingId'] = ApiClient.convertToType(data['listingId'], 'String');
            }
            if (data.hasOwnProperty('listingPromotionStatuses')) {
                obj['listingPromotionStatuses'] = ApiClient.convertToType(data['listingPromotionStatuses'], [ItemMarkdownStatus]);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('storeCategoryId')) {
                obj['storeCategoryId'] = ApiClient.convertToType(data['storeCategoryId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `currentPrice`
        if (data['currentPrice']) { // data not null
          Amount.validateJSON(data['currentPrice']);
        }
        // ensure the json data is a string
        if (data['inventoryReferenceId'] && !(typeof data['inventoryReferenceId'] === 'string' || data['inventoryReferenceId'] instanceof String)) {
            throw new Error("Expected the field `inventoryReferenceId` to be a primitive type in the JSON string but got " + data['inventoryReferenceId']);
        }
        // ensure the json data is a string
        if (data['inventoryReferenceType'] && !(typeof data['inventoryReferenceType'] === 'string' || data['inventoryReferenceType'] instanceof String)) {
            throw new Error("Expected the field `inventoryReferenceType` to be a primitive type in the JSON string but got " + data['inventoryReferenceType']);
        }
        // ensure the json data is a string
        if (data['listingCategoryId'] && !(typeof data['listingCategoryId'] === 'string' || data['listingCategoryId'] instanceof String)) {
            throw new Error("Expected the field `listingCategoryId` to be a primitive type in the JSON string but got " + data['listingCategoryId']);
        }
        // ensure the json data is a string
        if (data['listingCondition'] && !(typeof data['listingCondition'] === 'string' || data['listingCondition'] instanceof String)) {
            throw new Error("Expected the field `listingCondition` to be a primitive type in the JSON string but got " + data['listingCondition']);
        }
        // ensure the json data is a string
        if (data['listingConditionId'] && !(typeof data['listingConditionId'] === 'string' || data['listingConditionId'] instanceof String)) {
            throw new Error("Expected the field `listingConditionId` to be a primitive type in the JSON string but got " + data['listingConditionId']);
        }
        // ensure the json data is a string
        if (data['listingId'] && !(typeof data['listingId'] === 'string' || data['listingId'] instanceof String)) {
            throw new Error("Expected the field `listingId` to be a primitive type in the JSON string but got " + data['listingId']);
        }
        if (data['listingPromotionStatuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listingPromotionStatuses'])) {
                throw new Error("Expected the field `listingPromotionStatuses` to be an array in the JSON data but got " + data['listingPromotionStatuses']);
            }
            // validate the optional field `listingPromotionStatuses` (array)
            for (const item of data['listingPromotionStatuses']) {
                ItemMarkdownStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['storeCategoryId'] && !(typeof data['storeCategoryId'] === 'string' || data['storeCategoryId'] instanceof String)) {
            throw new Error("Expected the field `storeCategoryId` to be a primitive type in the JSON string but got " + data['storeCategoryId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} currentPrice
 */
ListingDetail.prototype['currentPrice'] = undefined;

/**
 * If set to <code>true</code>, the seller pays for the shipping (or that the item is marked for local pickup only) In this case, the listing does not have an associated shipping cost for the first listed domestic-shipping option (even if the first domestic-shipping option specifies a flat-rate or calculated shipping option). If <code>false</code>, the buyer is required to pay for a flat-rate or calculated cost shipping service.
 * @member {Boolean} freeShipping
 */
ListingDetail.prototype['freeShipping'] = undefined;

/**
 * The seller's inventory reference ID for a listing. Also known as the \"SKU\" or \"custom label,\" an inventory reference ID is either the ID of the listing or, if the listing has variations (such as a shirt that's available in multiple sizes and colors), the ID of the parent listing.
 * @member {String} inventoryReferenceId
 */
ListingDetail.prototype['inventoryReferenceId'] = undefined;

/**
 * Indicates the type of the <b>inventoryReferenceId</b>, which can be either a single-SKU or a multi-SKU listing (<code>INVENTORY_ITEM</code> and <code>INVENTORY_ITEM_GROUP</code>, respectively).  <br><br><b>Note:</b> This value is not currently returned in the response.
 * @member {String} inventoryReferenceType
 */
ListingDetail.prototype['inventoryReferenceType'] = undefined;

/**
 * The ID of the category that listing belongs to. The ID is a numeric and unique identifier for the category that is assigned by eBay.
 * @member {String} listingCategoryId
 */
ListingDetail.prototype['listingCategoryId'] = undefined;

/**
 * An eBay-assigned value that indicates condition of the associated item. For more information, see <a href=\"/api-docs/sell/static/metadata/condition-id-values.html\">Item condition ID and name values</a>.
 * @member {String} listingCondition
 */
ListingDetail.prototype['listingCondition'] = undefined;

/**
 * The ID of the condition associated with the item. For more information, see <a href=\"/api-docs/sell/static/metadata/condition-id-values.html\">Item condition ID and name values</a>.<br /><br /><span class=\"tablenote\"><b>Note: </b> This value is not currently returned in the response.</span>
 * @member {String} listingConditionId
 */
ListingDetail.prototype['listingConditionId'] = undefined;

/**
 * A unique eBay-assigned ID that is generated when the item is listed.
 * @member {String} listingId
 */
ListingDetail.prototype['listingId'] = undefined;

/**
 * A list of the status values assigned to the item and the date that each new status was assigned.
 * @member {Array.<module:model/ItemMarkdownStatus>} listingPromotionStatuses
 */
ListingDetail.prototype['listingPromotionStatuses'] = undefined;

/**
 * The number of items being sold in the listing.
 * @member {Number} quantity
 */
ListingDetail.prototype['quantity'] = undefined;

/**
 * Store CategoryId (if any) that to which the listing belongs. This field is blank if there is no seller Store category ID.
 * @member {String} storeCategoryId
 */
ListingDetail.prototype['storeCategoryId'] = undefined;

/**
 * The seller-defined title of the listing that a seller can use to identify the item.  This label is not displayed in end-user flows.
 * @member {String} title
 */
ListingDetail.prototype['title'] = undefined;






export default ListingDetail;

