/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkCreateNegativeKeywordRequest from '../model/BulkCreateNegativeKeywordRequest';
import BulkCreateNegativeKeywordResponse from '../model/BulkCreateNegativeKeywordResponse';
import BulkUpdateNegativeKeywordRequest from '../model/BulkUpdateNegativeKeywordRequest';
import BulkUpdateNegativeKeywordResponse from '../model/BulkUpdateNegativeKeywordResponse';
import CreateNegativeKeywordRequest from '../model/CreateNegativeKeywordRequest';
import NegativeKeyword from '../model/NegativeKeyword';
import NegativeKeywordPagedCollectionResponse from '../model/NegativeKeywordPagedCollectionResponse';
import UpdateNegativeKeywordRequest from '../model/UpdateNegativeKeywordRequest';

/**
* NegativeKeyword service.
* @module api/NegativeKeywordApi
* @version v1.15.0
*/
export default class NegativeKeywordApi {

    /**
    * Constructs a new NegativeKeywordApi. 
    * @alias module:api/NegativeKeywordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulkCreateNegativeKeyword operation.
     * @callback module:api/NegativeKeywordApi~bulkCreateNegativeKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkCreateNegativeKeywordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \" target=\"_blank \"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \" target=\"_blank \">getAdvertisingEligibility</a> method in Account API.</span><br />This method adds negative keywords, in bulk, to an existing ad group in a PLA campaign that uses the Cost Per Click (CPC) funding model.<br /><br />Specify the <b>campaignId</b> and <b>adGroupId</b> in the request body, along with the <b>negativeKeywordText</b> and <b>negativeKeywordMatchType</b>.<br /><br />Call the <a href=\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\">getCampaigns</a> method to retrieve a list of current campaign IDs for a specified seller.
     * @param {module:model/BulkCreateNegativeKeywordRequest} bulkCreateNegativeKeywordRequest A type that defines the fields for the bulk request to create negative keywords.
     * @param {module:api/NegativeKeywordApi~bulkCreateNegativeKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkCreateNegativeKeywordResponse}
     */
    bulkCreateNegativeKeyword(bulkCreateNegativeKeywordRequest, callback) {
      let postBody = bulkCreateNegativeKeywordRequest;
      // verify the required parameter 'bulkCreateNegativeKeywordRequest' is set
      if (bulkCreateNegativeKeywordRequest === undefined || bulkCreateNegativeKeywordRequest === null) {
        throw new Error("Missing the required parameter 'bulkCreateNegativeKeywordRequest' when calling bulkCreateNegativeKeyword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth', 'api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkCreateNegativeKeywordResponse;
      return this.apiClient.callApi(
        '/bulk_create_negative_keyword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkUpdateNegativeKeyword operation.
     * @callback module:api/NegativeKeywordApi~bulkUpdateNegativeKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkUpdateNegativeKeywordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \" target=\"_blank \"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \" target=\"_blank \">getAdvertisingEligibility</a> method in Account API.</span><br />This method updates the statuses of existing negative keywords, in bulk.<br /><br />Specify the <b>negativeKeywordId</b> and <b>negativeKeywordStatus</b> in the request body.
     * @param {module:model/BulkUpdateNegativeKeywordRequest} bulkUpdateNegativeKeywordRequest A type that defines the fields for the bulk request to update negative keyword statuses.
     * @param {module:api/NegativeKeywordApi~bulkUpdateNegativeKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkUpdateNegativeKeywordResponse}
     */
    bulkUpdateNegativeKeyword(bulkUpdateNegativeKeywordRequest, callback) {
      let postBody = bulkUpdateNegativeKeywordRequest;
      // verify the required parameter 'bulkUpdateNegativeKeywordRequest' is set
      if (bulkUpdateNegativeKeywordRequest === undefined || bulkUpdateNegativeKeywordRequest === null) {
        throw new Error("Missing the required parameter 'bulkUpdateNegativeKeywordRequest' when calling bulkUpdateNegativeKeyword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth', 'api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkUpdateNegativeKeywordResponse;
      return this.apiClient.callApi(
        '/bulk_update_negative_keyword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNegativeKeyword operation.
     * @callback module:api/NegativeKeywordApi~createNegativeKeywordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \" target=\"_blank \"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \" target=\"_blank \">getAdvertisingEligibility</a> method in Account API.</span><br />This method adds a negative keyword to an existing ad group in a PLA campaign that uses the Cost Per Click (CPC) funding model.<br /><br />Specify the <b>campaignId</b> and <b>adGroupId</b> in the request body, along with the <b>negativeKeywordText</b> and <b>negativeKeywordMatchType</b>.<br /><br />Call the <a href=\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\">getCampaigns</a> method to retrieve a list of current campaign IDs for a specified seller.
     * @param {module:model/CreateNegativeKeywordRequest} createNegativeKeywordRequest A type that defines the fields for the request to create a negative keyword.
     * @param {module:api/NegativeKeywordApi~createNegativeKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNegativeKeyword(createNegativeKeywordRequest, callback) {
      let postBody = createNegativeKeywordRequest;
      // verify the required parameter 'createNegativeKeywordRequest' is set
      if (createNegativeKeywordRequest === undefined || createNegativeKeywordRequest === null) {
        throw new Error("Missing the required parameter 'createNegativeKeywordRequest' when calling createNegativeKeyword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth', 'api_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/negative_keyword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNegativeKeyword operation.
     * @callback module:api/NegativeKeywordApi~getNegativeKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NegativeKeyword} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \" target=\"_blank \"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \" target=\"_blank \">getAdvertisingEligibility</a> method in Account API.</span><br />This method retrieves details on a specific negative keyword.<br /><br />In the request, specify the <b>negative_keyword_id</b> as a path parameter.
     * @param {String} negativeKeywordId The unique identifier for the negative keyword.<br /><br />This value is returned in the <b>Location</b> response header from the <a href=\"/api-docs/sell/marketing/resources/negative_keyword/methods/createNegativeKeyword\">createNegativeKeyword</a> method.
     * @param {module:api/NegativeKeywordApi~getNegativeKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NegativeKeyword}
     */
    getNegativeKeyword(negativeKeywordId, callback) {
      let postBody = null;
      // verify the required parameter 'negativeKeywordId' is set
      if (negativeKeywordId === undefined || negativeKeywordId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordId' when calling getNegativeKeyword");
      }

      let pathParams = {
        'negative_keyword_id': negativeKeywordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth', 'api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NegativeKeyword;
      return this.apiClient.callApi(
        '/negative_keyword/{negative_keyword_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNegativeKeywords operation.
     * @callback module:api/NegativeKeywordApi~getNegativeKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NegativeKeywordPagedCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \" target=\"_blank \"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \" target=\"_blank \">getAdvertisingEligibility</a> method in Account API.</span><br />This method can be used to retrieve all of the negative keywords for ad groups in PLA campaigns that use the Cost Per Click (CPC) funding model.<br /><br />The results can be filtered using the <b>campaign_ids</b>, <b>ad_group_ids</b>, and <b>negative_keyword_status</b> query parameters.<br /><br />Call the <a href=\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\">getCampaigns</a> method to retrieve a list of current campaign IDs for a seller.
     * @param {Object} opts Optional parameters
     * @param {String} [adGroupIds] A comma-separated list of ad group IDs.<br /><br />This query parameter is used if the seller wants to retrieve the negative keywords from one or more specific ad groups. The results might not include these ad group IDs if other search conditions exclude them.<br /><br /><span class=\"tablenote\"><b>Note:</b>You can call the <a href=\"/api-docs/sell/marketing/resources/adgroup/methods/getAdGroups\">getAdGroups</a> method to retrieve the ad group IDs for a seller.</span><br /><br /><i>Required if</i> the search results must be filtered to include negative keywords created at the ad group level.
     * @param {String} [campaignIds] A unique eBay-assigned ID for an ad campaign that is generated when a campaign is created.<br /><br />This query parameter is used if the seller wants to retrieve the negative keywords from a specific campaign. The results might not include these campaign IDs if other search conditions exclude them.<br /><br /><span class=\"tablenote\"><b>Note:</b> Currently, only one campaign ID value is supported for each request.</span>
     * @param {String} [limit] The number of results, from the current result set, to be returned in a single page.
     * @param {String} [negativeKeywordStatus] A comma-separated list of negative keyword statuses.<br /><br />This query parameter is used if the seller wants to filter the search results based on one or more negative keyword statuses.
     * @param {String} [offset] The number of results that will be skipped in the result set. This is used with the <b>limit</b> field to control the pagination of the output.<br /><br />For example, if the <b>offset</b> is set to <code>0</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 1 through 10 from the list of items returned. If the <b>offset</b> is set to <code>10</code> and the <b>limit</b> is set to <code>10</code>, the method will retrieve items 11 through 20 from the list of items returned.
     * @param {module:api/NegativeKeywordApi~getNegativeKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NegativeKeywordPagedCollectionResponse}
     */
    getNegativeKeywords(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ad_group_ids': opts['adGroupIds'],
        'campaign_ids': opts['campaignIds'],
        'limit': opts['limit'],
        'negative_keyword_status': opts['negativeKeywordStatus'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth', 'api_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NegativeKeywordPagedCollectionResponse;
      return this.apiClient.callApi(
        '/negative_keyword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNegativeKeyword operation.
     * @callback module:api/NegativeKeywordApi~updateNegativeKeywordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <span class=\"tablenote\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \" target=\"_blank \"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \" target=\"_blank \">getAdvertisingEligibility</a> method in Account API.</span><br />This method updates the status of an existing negative keyword.<br /><br />Specify the <b>negative_keyword_id</b> as a path parameter, and specify the <b>negativeKeywordStatus</b> in the request body.
     * @param {String} negativeKeywordId The unique identifier for the negative keyword.<br /><br />This value is returned in the <b>Location</b> response header from the <a href=\"/api-docs/sell/marketing/resources/negative_keyword/methods/createNegativeKeyword\">createNegativeKeyword</a> method.
     * @param {module:model/UpdateNegativeKeywordRequest} updateNegativeKeywordRequest A type that defines the fields for the request to update a negative keyword.
     * @param {module:api/NegativeKeywordApi~updateNegativeKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateNegativeKeyword(negativeKeywordId, updateNegativeKeywordRequest, callback) {
      let postBody = updateNegativeKeywordRequest;
      // verify the required parameter 'negativeKeywordId' is set
      if (negativeKeywordId === undefined || negativeKeywordId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordId' when calling updateNegativeKeyword");
      }
      // verify the required parameter 'updateNegativeKeywordRequest' is set
      if (updateNegativeKeywordRequest === undefined || updateNegativeKeywordRequest === null) {
        throw new Error("Missing the required parameter 'updateNegativeKeywordRequest' when calling updateNegativeKeyword");
      }

      let pathParams = {
        'negative_keyword_id': negativeKeywordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_auth', 'api_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/negative_keyword/{negative_keyword_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
