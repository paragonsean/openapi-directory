/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MarketingApi);
  }
}(this, function(expect, MarketingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MarketingApi.ReportTask();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReportTask', function() {
    it('should create an instance of ReportTask', function() {
      // uncomment below and update the code to test ReportTask
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be.a(MarketingApi.ReportTask);
    });

    it('should have the property campaignIds (base name: "campaignIds")', function() {
      // uncomment below and update the code to test the property campaignIds
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property dateFrom (base name: "dateFrom")', function() {
      // uncomment below and update the code to test the property dateFrom
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property dateTo (base name: "dateTo")', function() {
      // uncomment below and update the code to test the property dateTo
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property fundingModels (base name: "fundingModels")', function() {
      // uncomment below and update the code to test the property fundingModels
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property inventoryReferences (base name: "inventoryReferences")', function() {
      // uncomment below and update the code to test the property inventoryReferences
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property listingIds (base name: "listingIds")', function() {
      // uncomment below and update the code to test the property listingIds
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property marketplaceId (base name: "marketplaceId")', function() {
      // uncomment below and update the code to test the property marketplaceId
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property metricKeys (base name: "metricKeys")', function() {
      // uncomment below and update the code to test the property metricKeys
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportExpirationDate (base name: "reportExpirationDate")', function() {
      // uncomment below and update the code to test the property reportExpirationDate
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportFormat (base name: "reportFormat")', function() {
      // uncomment below and update the code to test the property reportFormat
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportHref (base name: "reportHref")', function() {
      // uncomment below and update the code to test the property reportHref
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportId (base name: "reportId")', function() {
      // uncomment below and update the code to test the property reportId
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportName (base name: "reportName")', function() {
      // uncomment below and update the code to test the property reportName
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportTaskCompletionDate (base name: "reportTaskCompletionDate")', function() {
      // uncomment below and update the code to test the property reportTaskCompletionDate
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportTaskCreationDate (base name: "reportTaskCreationDate")', function() {
      // uncomment below and update the code to test the property reportTaskCreationDate
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportTaskExpectedCompletionDate (base name: "reportTaskExpectedCompletionDate")', function() {
      // uncomment below and update the code to test the property reportTaskExpectedCompletionDate
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportTaskId (base name: "reportTaskId")', function() {
      // uncomment below and update the code to test the property reportTaskId
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportTaskStatus (base name: "reportTaskStatus")', function() {
      // uncomment below and update the code to test the property reportTaskStatus
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportTaskStatusMessage (base name: "reportTaskStatusMessage")', function() {
      // uncomment below and update the code to test the property reportTaskStatusMessage
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

    it('should have the property reportType (base name: "reportType")', function() {
      // uncomment below and update the code to test the property reportType
      //var instance = new MarketingApi.ReportTask();
      //expect(instance).to.be();
    });

  });

}));
