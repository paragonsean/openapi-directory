/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MarketingApi);
  }
}(this, function(expect, MarketingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MarketingApi.CampaignApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CampaignApi', function() {
    describe('cloneCampaign', function() {
      it('should call cloneCampaign successfully', function(done) {
        //uncomment below and update the code to test cloneCampaign
        //instance.cloneCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCampaign', function() {
      it('should call createCampaign successfully', function(done) {
        //uncomment below and update the code to test createCampaign
        //instance.createCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCampaign', function() {
      it('should call deleteCampaign successfully', function(done) {
        //uncomment below and update the code to test deleteCampaign
        //instance.deleteCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('endCampaign', function() {
      it('should call endCampaign successfully', function(done) {
        //uncomment below and update the code to test endCampaign
        //instance.endCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findCampaignByAdReference', function() {
      it('should call findCampaignByAdReference successfully', function(done) {
        //uncomment below and update the code to test findCampaignByAdReference
        //instance.findCampaignByAdReference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCampaign', function() {
      it('should call getCampaign successfully', function(done) {
        //uncomment below and update the code to test getCampaign
        //instance.getCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCampaignByName', function() {
      it('should call getCampaignByName successfully', function(done) {
        //uncomment below and update the code to test getCampaignByName
        //instance.getCampaignByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCampaigns', function() {
      it('should call getCampaigns successfully', function(done) {
        //uncomment below and update the code to test getCampaigns
        //instance.getCampaigns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseCampaign', function() {
      it('should call pauseCampaign successfully', function(done) {
        //uncomment below and update the code to test pauseCampaign
        //instance.pauseCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeCampaign', function() {
      it('should call resumeCampaign successfully', function(done) {
        //uncomment below and update the code to test resumeCampaign
        //instance.resumeCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('suggestItems', function() {
      it('should call suggestItems successfully', function(done) {
        //uncomment below and update the code to test suggestItems
        //instance.suggestItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAdRateStrategy', function() {
      it('should call updateAdRateStrategy successfully', function(done) {
        //uncomment below and update the code to test updateAdRateStrategy
        //instance.updateAdRateStrategy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCampaignBudget', function() {
      it('should call updateCampaignBudget successfully', function(done) {
        //uncomment below and update the code to test updateCampaignBudget
        //instance.updateCampaignBudget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCampaignIdentification', function() {
      it('should call updateCampaignIdentification successfully', function(done) {
        //uncomment below and update the code to test updateCampaignIdentification
        //instance.updateCampaignIdentification(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
