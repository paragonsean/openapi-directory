/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDiscountSpecification.h
 *
 * This container defines the criteria for when the discounts of a promotion trigger, such as the minimum quantity the buyer must purchase before the promotion kicks in. The promotional discount is applied each time the criteria defined by this container is met.  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When configuring the rules that govern when the discounts are applied, populate just one of the following fields in the &lt;b&gt;discountSpecification&lt;/b&gt; container:&lt;/p&gt;  &lt;ul&gt;&lt;li&gt;&lt;b&gt;minAmount&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;minQuantity&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;forEachQuantity&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;forEachAmount&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Tip:&lt;/b&gt; Refer to &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pm-specifying-discounts.html\&quot;&gt;Configuring discounts for threshold promotions&lt;/a&gt; for information and examples on how to combine &lt;b&gt;discountBenefit&lt;/b&gt; and &lt;b&gt;discountSpecification&lt;/b&gt; to create different types of promotions.&lt;/p&gt;
 */

#ifndef OAIDiscountSpecification_H
#define OAIDiscountSpecification_H

#include <QJsonObject>

#include "OAIAmount.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAIDiscountSpecification : public OAIObject {
public:
    OAIDiscountSpecification();
    OAIDiscountSpecification(QString json);
    ~OAIDiscountSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAmount getForEachAmount() const;
    void setForEachAmount(const OAIAmount &for_each_amount);
    bool is_for_each_amount_Set() const;
    bool is_for_each_amount_Valid() const;

    qint32 getForEachQuantity() const;
    void setForEachQuantity(const qint32 &for_each_quantity);
    bool is_for_each_quantity_Set() const;
    bool is_for_each_quantity_Valid() const;

    OAIAmount getMinAmount() const;
    void setMinAmount(const OAIAmount &min_amount);
    bool is_min_amount_Set() const;
    bool is_min_amount_Valid() const;

    qint32 getMinQuantity() const;
    void setMinQuantity(const qint32 &min_quantity);
    bool is_min_quantity_Set() const;
    bool is_min_quantity_Valid() const;

    qint32 getNumberOfDiscountedItems() const;
    void setNumberOfDiscountedItems(const qint32 &number_of_discounted_items);
    bool is_number_of_discounted_items_Set() const;
    bool is_number_of_discounted_items_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAmount m_for_each_amount;
    bool m_for_each_amount_isSet;
    bool m_for_each_amount_isValid;

    qint32 m_for_each_quantity;
    bool m_for_each_quantity_isSet;
    bool m_for_each_quantity_isValid;

    OAIAmount m_min_amount;
    bool m_min_amount_isSet;
    bool m_min_amount_isValid;

    qint32 m_min_quantity;
    bool m_min_quantity_isSet;
    bool m_min_quantity_isValid;

    qint32 m_number_of_discounted_items;
    bool m_number_of_discounted_items_isSet;
    bool m_number_of_discounted_items_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDiscountSpecification)

#endif // OAIDiscountSpecification_H
