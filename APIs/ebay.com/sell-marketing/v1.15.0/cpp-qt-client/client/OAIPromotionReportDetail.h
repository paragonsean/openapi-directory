/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPromotionReportDetail.h
 *
 * This type defines the fields in a promotion-level report.
 */

#ifndef OAIPromotionReportDetail_H
#define OAIPromotionReportDetail_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAIPromotionReportDetail : public OAIObject {
public:
    OAIPromotionReportDetail();
    OAIPromotionReportDetail(QString json);
    ~OAIPromotionReportDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAmount getAverageItemDiscount() const;
    void setAverageItemDiscount(const OAIAmount &average_item_discount);
    bool is_average_item_discount_Set() const;
    bool is_average_item_discount_Valid() const;

    OAIAmount getAverageItemRevenue() const;
    void setAverageItemRevenue(const OAIAmount &average_item_revenue);
    bool is_average_item_revenue_Set() const;
    bool is_average_item_revenue_Valid() const;

    OAIAmount getAverageOrderDiscount() const;
    void setAverageOrderDiscount(const OAIAmount &average_order_discount);
    bool is_average_order_discount_Set() const;
    bool is_average_order_discount_Valid() const;

    OAIAmount getAverageOrderRevenue() const;
    void setAverageOrderRevenue(const OAIAmount &average_order_revenue);
    bool is_average_order_revenue_Set() const;
    bool is_average_order_revenue_Valid() const;

    QString getAverageOrderSize() const;
    void setAverageOrderSize(const QString &average_order_size);
    bool is_average_order_size_Set() const;
    bool is_average_order_size_Valid() const;

    OAIAmount getBaseSale() const;
    void setBaseSale(const OAIAmount &base_sale);
    bool is_base_sale_Set() const;
    bool is_base_sale_Valid() const;

    qint32 getItemsSoldQuantity() const;
    void setItemsSoldQuantity(const qint32 &items_sold_quantity);
    bool is_items_sold_quantity_Set() const;
    bool is_items_sold_quantity_Valid() const;

    qint32 getNumberOfOrdersSold() const;
    void setNumberOfOrdersSold(const qint32 &number_of_orders_sold);
    bool is_number_of_orders_sold_Set() const;
    bool is_number_of_orders_sold_Valid() const;

    QString getPercentageSalesLift() const;
    void setPercentageSalesLift(const QString &percentage_sales_lift);
    bool is_percentage_sales_lift_Set() const;
    bool is_percentage_sales_lift_Valid() const;

    QString getPromotionHref() const;
    void setPromotionHref(const QString &promotion_href);
    bool is_promotion_href_Set() const;
    bool is_promotion_href_Valid() const;

    QString getPromotionId() const;
    void setPromotionId(const QString &promotion_id);
    bool is_promotion_id_Set() const;
    bool is_promotion_id_Valid() const;

    QString getPromotionReportId() const;
    void setPromotionReportId(const QString &promotion_report_id);
    bool is_promotion_report_id_Set() const;
    bool is_promotion_report_id_Valid() const;

    OAIAmount getPromotionSale() const;
    void setPromotionSale(const OAIAmount &promotion_sale);
    bool is_promotion_sale_Set() const;
    bool is_promotion_sale_Valid() const;

    QString getPromotionType() const;
    void setPromotionType(const QString &promotion_type);
    bool is_promotion_type_Set() const;
    bool is_promotion_type_Valid() const;

    OAIAmount getTotalDiscount() const;
    void setTotalDiscount(const OAIAmount &total_discount);
    bool is_total_discount_Set() const;
    bool is_total_discount_Valid() const;

    OAIAmount getTotalSale() const;
    void setTotalSale(const OAIAmount &total_sale);
    bool is_total_sale_Set() const;
    bool is_total_sale_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAmount m_average_item_discount;
    bool m_average_item_discount_isSet;
    bool m_average_item_discount_isValid;

    OAIAmount m_average_item_revenue;
    bool m_average_item_revenue_isSet;
    bool m_average_item_revenue_isValid;

    OAIAmount m_average_order_discount;
    bool m_average_order_discount_isSet;
    bool m_average_order_discount_isValid;

    OAIAmount m_average_order_revenue;
    bool m_average_order_revenue_isSet;
    bool m_average_order_revenue_isValid;

    QString m_average_order_size;
    bool m_average_order_size_isSet;
    bool m_average_order_size_isValid;

    OAIAmount m_base_sale;
    bool m_base_sale_isSet;
    bool m_base_sale_isValid;

    qint32 m_items_sold_quantity;
    bool m_items_sold_quantity_isSet;
    bool m_items_sold_quantity_isValid;

    qint32 m_number_of_orders_sold;
    bool m_number_of_orders_sold_isSet;
    bool m_number_of_orders_sold_isValid;

    QString m_percentage_sales_lift;
    bool m_percentage_sales_lift_isSet;
    bool m_percentage_sales_lift_isValid;

    QString m_promotion_href;
    bool m_promotion_href_isSet;
    bool m_promotion_href_isValid;

    QString m_promotion_id;
    bool m_promotion_id_isSet;
    bool m_promotion_id_isValid;

    QString m_promotion_report_id;
    bool m_promotion_report_id_isSet;
    bool m_promotion_report_id_isValid;

    OAIAmount m_promotion_sale;
    bool m_promotion_sale_isSet;
    bool m_promotion_sale_isValid;

    QString m_promotion_type;
    bool m_promotion_type_isSet;
    bool m_promotion_type_isValid;

    OAIAmount m_total_discount;
    bool m_total_discount_isSet;
    bool m_total_discount_isValid;

    OAIAmount m_total_sale;
    bool m_total_sale_isSet;
    bool m_total_sale_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPromotionReportDetail)

#endif // OAIPromotionReportDetail_H
