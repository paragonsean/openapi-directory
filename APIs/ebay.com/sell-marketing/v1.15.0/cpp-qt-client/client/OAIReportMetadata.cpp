/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportMetadata::OAIReportMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportMetadata::OAIReportMetadata() {
    this->initializeModel();
}

OAIReportMetadata::~OAIReportMetadata() {}

void OAIReportMetadata::initializeModel() {

    m_dimension_metadata_isSet = false;
    m_dimension_metadata_isValid = false;

    m_max_number_of_dimensions_to_request_isSet = false;
    m_max_number_of_dimensions_to_request_isValid = false;

    m_max_number_of_metrics_to_request_isSet = false;
    m_max_number_of_metrics_to_request_isValid = false;

    m_metric_metadata_isSet = false;
    m_metric_metadata_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;
}

void OAIReportMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportMetadata::fromJsonObject(QJsonObject json) {

    m_dimension_metadata_isValid = ::OpenAPI::fromJsonValue(m_dimension_metadata, json[QString("dimensionMetadata")]);
    m_dimension_metadata_isSet = !json[QString("dimensionMetadata")].isNull() && m_dimension_metadata_isValid;

    m_max_number_of_dimensions_to_request_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_dimensions_to_request, json[QString("maxNumberOfDimensionsToRequest")]);
    m_max_number_of_dimensions_to_request_isSet = !json[QString("maxNumberOfDimensionsToRequest")].isNull() && m_max_number_of_dimensions_to_request_isValid;

    m_max_number_of_metrics_to_request_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_metrics_to_request, json[QString("maxNumberOfMetricsToRequest")]);
    m_max_number_of_metrics_to_request_isSet = !json[QString("maxNumberOfMetricsToRequest")].isNull() && m_max_number_of_metrics_to_request_isValid;

    m_metric_metadata_isValid = ::OpenAPI::fromJsonValue(m_metric_metadata, json[QString("metricMetadata")]);
    m_metric_metadata_isSet = !json[QString("metricMetadata")].isNull() && m_metric_metadata_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("reportType")]);
    m_report_type_isSet = !json[QString("reportType")].isNull() && m_report_type_isValid;
}

QString OAIReportMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_metadata.size() > 0) {
        obj.insert(QString("dimensionMetadata"), ::OpenAPI::toJsonValue(m_dimension_metadata));
    }
    if (m_max_number_of_dimensions_to_request_isSet) {
        obj.insert(QString("maxNumberOfDimensionsToRequest"), ::OpenAPI::toJsonValue(m_max_number_of_dimensions_to_request));
    }
    if (m_max_number_of_metrics_to_request_isSet) {
        obj.insert(QString("maxNumberOfMetricsToRequest"), ::OpenAPI::toJsonValue(m_max_number_of_metrics_to_request));
    }
    if (m_metric_metadata.size() > 0) {
        obj.insert(QString("metricMetadata"), ::OpenAPI::toJsonValue(m_metric_metadata));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("reportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    return obj;
}

QList<OAIDimensionMetadata> OAIReportMetadata::getDimensionMetadata() const {
    return m_dimension_metadata;
}
void OAIReportMetadata::setDimensionMetadata(const QList<OAIDimensionMetadata> &dimension_metadata) {
    m_dimension_metadata = dimension_metadata;
    m_dimension_metadata_isSet = true;
}

bool OAIReportMetadata::is_dimension_metadata_Set() const{
    return m_dimension_metadata_isSet;
}

bool OAIReportMetadata::is_dimension_metadata_Valid() const{
    return m_dimension_metadata_isValid;
}

qint32 OAIReportMetadata::getMaxNumberOfDimensionsToRequest() const {
    return m_max_number_of_dimensions_to_request;
}
void OAIReportMetadata::setMaxNumberOfDimensionsToRequest(const qint32 &max_number_of_dimensions_to_request) {
    m_max_number_of_dimensions_to_request = max_number_of_dimensions_to_request;
    m_max_number_of_dimensions_to_request_isSet = true;
}

bool OAIReportMetadata::is_max_number_of_dimensions_to_request_Set() const{
    return m_max_number_of_dimensions_to_request_isSet;
}

bool OAIReportMetadata::is_max_number_of_dimensions_to_request_Valid() const{
    return m_max_number_of_dimensions_to_request_isValid;
}

qint32 OAIReportMetadata::getMaxNumberOfMetricsToRequest() const {
    return m_max_number_of_metrics_to_request;
}
void OAIReportMetadata::setMaxNumberOfMetricsToRequest(const qint32 &max_number_of_metrics_to_request) {
    m_max_number_of_metrics_to_request = max_number_of_metrics_to_request;
    m_max_number_of_metrics_to_request_isSet = true;
}

bool OAIReportMetadata::is_max_number_of_metrics_to_request_Set() const{
    return m_max_number_of_metrics_to_request_isSet;
}

bool OAIReportMetadata::is_max_number_of_metrics_to_request_Valid() const{
    return m_max_number_of_metrics_to_request_isValid;
}

QList<OAIMetricMetadata> OAIReportMetadata::getMetricMetadata() const {
    return m_metric_metadata;
}
void OAIReportMetadata::setMetricMetadata(const QList<OAIMetricMetadata> &metric_metadata) {
    m_metric_metadata = metric_metadata;
    m_metric_metadata_isSet = true;
}

bool OAIReportMetadata::is_metric_metadata_Set() const{
    return m_metric_metadata_isSet;
}

bool OAIReportMetadata::is_metric_metadata_Valid() const{
    return m_metric_metadata_isValid;
}

QString OAIReportMetadata::getReportType() const {
    return m_report_type;
}
void OAIReportMetadata::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIReportMetadata::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIReportMetadata::is_report_type_Valid() const{
    return m_report_type_isValid;
}

bool OAIReportMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_dimensions_to_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_metrics_to_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
