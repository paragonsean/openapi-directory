/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISelectionRule.h
 *
 * This type defines all rules/inclusion filters used to add listings to campaigns or promotions. Use of the specific fields is different for campaigns or promotions. See &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html \&quot;&gt;Using the selectionRules container&lt;/a&gt;.
 */

#ifndef OAISelectionRule_H
#define OAISelectionRule_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAISelectionRule : public OAIObject {
public:
    OAISelectionRule();
    OAISelectionRule(QString json);
    ~OAISelectionRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getBrands() const;
    void setBrands(const QList<QString> &brands);
    bool is_brands_Set() const;
    bool is_brands_Valid() const;

    QList<QString> getCategoryIds() const;
    void setCategoryIds(const QList<QString> &category_ids);
    bool is_category_ids_Set() const;
    bool is_category_ids_Valid() const;

    QString getCategoryScope() const;
    void setCategoryScope(const QString &category_scope);
    bool is_category_scope_Set() const;
    bool is_category_scope_Valid() const;

    QList<QString> getListingConditionIds() const;
    void setListingConditionIds(const QList<QString> &listing_condition_ids);
    bool is_listing_condition_ids_Set() const;
    bool is_listing_condition_ids_Valid() const;

    OAIAmount getMaxPrice() const;
    void setMaxPrice(const OAIAmount &max_price);
    bool is_max_price_Set() const;
    bool is_max_price_Valid() const;

    OAIAmount getMinPrice() const;
    void setMinPrice(const OAIAmount &min_price);
    bool is_min_price_Set() const;
    bool is_min_price_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_brands;
    bool m_brands_isSet;
    bool m_brands_isValid;

    QList<QString> m_category_ids;
    bool m_category_ids_isSet;
    bool m_category_ids_isValid;

    QString m_category_scope;
    bool m_category_scope_isSet;
    bool m_category_scope_isValid;

    QList<QString> m_listing_condition_ids;
    bool m_listing_condition_ids_isSet;
    bool m_listing_condition_ids_isValid;

    OAIAmount m_max_price;
    bool m_max_price_isSet;
    bool m_max_price_isValid;

    OAIAmount m_min_price;
    bool m_min_price_isSet;
    bool m_min_price_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISelectionRule)

#endif // OAISelectionRule_H
