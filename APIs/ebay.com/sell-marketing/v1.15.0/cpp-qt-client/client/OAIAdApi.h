/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdApi_H
#define OAI_OAIAdApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAd.h"
#include "OAIAdIds.h"
#include "OAIAdPagedCollectionResponse.h"
#include "OAIAdReferences.h"
#include "OAIAds.h"
#include "OAIBulkAdResponse.h"
#include "OAIBulkAdUpdateResponse.h"
#include "OAIBulkAdUpdateStatusByListingIdResponse.h"
#include "OAIBulkAdUpdateStatusResponse.h"
#include "OAIBulkCreateAdRequest.h"
#include "OAIBulkCreateAdsByInventoryReferenceRequest.h"
#include "OAIBulkCreateAdsByInventoryReferenceResponse.h"
#include "OAIBulkDeleteAdRequest.h"
#include "OAIBulkDeleteAdResponse.h"
#include "OAIBulkDeleteAdsByInventoryReferenceRequest.h"
#include "OAIBulkDeleteAdsByInventoryReferenceResponse.h"
#include "OAIBulkUpdateAdStatusByListingIdRequest.h"
#include "OAIBulkUpdateAdStatusRequest.h"
#include "OAIBulkUpdateAdsByInventoryReferenceResponse.h"
#include "OAICreateAdRequest.h"
#include "OAICreateAdsByInventoryReferenceRequest.h"
#include "OAIDeleteAdsByInventoryReferenceRequest.h"
#include "OAIObject.h"
#include "OAIUpdateBidPercentageRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdApi : public QObject {
    Q_OBJECT

public:
    OAIAdApi(const int timeOut = 0);
    ~OAIAdApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_create_ads_by_inventory_reference_request OAIBulkCreateAdsByInventoryReferenceRequest [required]
    */
    virtual void bulkCreateAdsByInventoryReference(const QString &campaign_id, const OAIBulkCreateAdsByInventoryReferenceRequest &oai_bulk_create_ads_by_inventory_reference_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_create_ad_request OAIBulkCreateAdRequest [required]
    */
    virtual void bulkCreateAdsByListingId(const QString &campaign_id, const OAIBulkCreateAdRequest &oai_bulk_create_ad_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_delete_ads_by_inventory_reference_request OAIBulkDeleteAdsByInventoryReferenceRequest [required]
    */
    virtual void bulkDeleteAdsByInventoryReference(const QString &campaign_id, const OAIBulkDeleteAdsByInventoryReferenceRequest &oai_bulk_delete_ads_by_inventory_reference_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_delete_ad_request OAIBulkDeleteAdRequest [required]
    */
    virtual void bulkDeleteAdsByListingId(const QString &campaign_id, const OAIBulkDeleteAdRequest &oai_bulk_delete_ad_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_create_ads_by_inventory_reference_request OAIBulkCreateAdsByInventoryReferenceRequest [required]
    */
    virtual void bulkUpdateAdsBidByInventoryReference(const QString &campaign_id, const OAIBulkCreateAdsByInventoryReferenceRequest &oai_bulk_create_ads_by_inventory_reference_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_create_ad_request OAIBulkCreateAdRequest [required]
    */
    virtual void bulkUpdateAdsBidByListingId(const QString &campaign_id, const OAIBulkCreateAdRequest &oai_bulk_create_ad_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_update_ad_status_request OAIBulkUpdateAdStatusRequest [required]
    */
    virtual void bulkUpdateAdsStatus(const QString &campaign_id, const OAIBulkUpdateAdStatusRequest &oai_bulk_update_ad_status_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_update_ad_status_by_listing_id_request OAIBulkUpdateAdStatusByListingIdRequest [required]
    */
    virtual void bulkUpdateAdsStatusByListingId(const QString &campaign_id, const OAIBulkUpdateAdStatusByListingIdRequest &oai_bulk_update_ad_status_by_listing_id_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_create_ad_request OAICreateAdRequest [required]
    */
    virtual void createAdByListingId(const QString &campaign_id, const OAICreateAdRequest &oai_create_ad_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_create_ads_by_inventory_reference_request OAICreateAdsByInventoryReferenceRequest [required]
    */
    virtual void createAdsByInventoryReference(const QString &campaign_id, const OAICreateAdsByInventoryReferenceRequest &oai_create_ads_by_inventory_reference_request);

    /**
    * @param[in]  ad_id QString [required]
    * @param[in]  campaign_id QString [required]
    */
    virtual void deleteAd(const QString &ad_id, const QString &campaign_id);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_delete_ads_by_inventory_reference_request OAIDeleteAdsByInventoryReferenceRequest [required]
    */
    virtual void deleteAdsByInventoryReference(const QString &campaign_id, const OAIDeleteAdsByInventoryReferenceRequest &oai_delete_ads_by_inventory_reference_request);

    /**
    * @param[in]  ad_id QString [required]
    * @param[in]  campaign_id QString [required]
    */
    virtual void getAd(const QString &ad_id, const QString &campaign_id);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  ad_group_ids QString [optional]
    * @param[in]  ad_status QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  listing_ids QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getAds(const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &ad_group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ad_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  inventory_reference_id QString [required]
    * @param[in]  inventory_reference_type QString [required]
    */
    virtual void getAdsByInventoryReference(const QString &campaign_id, const QString &inventory_reference_id, const QString &inventory_reference_type);

    /**
    * @param[in]  ad_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_update_bid_percentage_request OAIUpdateBidPercentageRequest [required]
    */
    virtual void updateBid(const QString &ad_id, const QString &campaign_id, const OAIUpdateBidPercentageRequest &oai_update_bid_percentage_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bulkCreateAdsByInventoryReferenceCallback(OAIHttpRequestWorker *worker);
    void bulkCreateAdsByListingIdCallback(OAIHttpRequestWorker *worker);
    void bulkDeleteAdsByInventoryReferenceCallback(OAIHttpRequestWorker *worker);
    void bulkDeleteAdsByListingIdCallback(OAIHttpRequestWorker *worker);
    void bulkUpdateAdsBidByInventoryReferenceCallback(OAIHttpRequestWorker *worker);
    void bulkUpdateAdsBidByListingIdCallback(OAIHttpRequestWorker *worker);
    void bulkUpdateAdsStatusCallback(OAIHttpRequestWorker *worker);
    void bulkUpdateAdsStatusByListingIdCallback(OAIHttpRequestWorker *worker);
    void createAdByListingIdCallback(OAIHttpRequestWorker *worker);
    void createAdsByInventoryReferenceCallback(OAIHttpRequestWorker *worker);
    void deleteAdCallback(OAIHttpRequestWorker *worker);
    void deleteAdsByInventoryReferenceCallback(OAIHttpRequestWorker *worker);
    void getAdCallback(OAIHttpRequestWorker *worker);
    void getAdsCallback(OAIHttpRequestWorker *worker);
    void getAdsByInventoryReferenceCallback(OAIHttpRequestWorker *worker);
    void updateBidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bulkCreateAdsByInventoryReferenceSignal(OAIBulkCreateAdsByInventoryReferenceResponse summary);
    void bulkCreateAdsByListingIdSignal(OAIBulkAdResponse summary);
    void bulkDeleteAdsByInventoryReferenceSignal(OAIBulkDeleteAdsByInventoryReferenceResponse summary);
    void bulkDeleteAdsByListingIdSignal(OAIBulkDeleteAdResponse summary);
    void bulkUpdateAdsBidByInventoryReferenceSignal(OAIBulkUpdateAdsByInventoryReferenceResponse summary);
    void bulkUpdateAdsBidByListingIdSignal(OAIBulkAdUpdateResponse summary);
    void bulkUpdateAdsStatusSignal(OAIBulkAdUpdateStatusResponse summary);
    void bulkUpdateAdsStatusByListingIdSignal(OAIBulkAdUpdateStatusByListingIdResponse summary);
    void createAdByListingIdSignal(OAIObject summary);
    void createAdsByInventoryReferenceSignal(OAIAdReferences summary);
    void deleteAdSignal();
    void deleteAdsByInventoryReferenceSignal(OAIAdIds summary);
    void getAdSignal(OAIAd summary);
    void getAdsSignal(OAIAdPagedCollectionResponse summary);
    void getAdsByInventoryReferenceSignal(OAIAds summary);
    void updateBidSignal();


    void bulkCreateAdsByInventoryReferenceSignalFull(OAIHttpRequestWorker *worker, OAIBulkCreateAdsByInventoryReferenceResponse summary);
    void bulkCreateAdsByListingIdSignalFull(OAIHttpRequestWorker *worker, OAIBulkAdResponse summary);
    void bulkDeleteAdsByInventoryReferenceSignalFull(OAIHttpRequestWorker *worker, OAIBulkDeleteAdsByInventoryReferenceResponse summary);
    void bulkDeleteAdsByListingIdSignalFull(OAIHttpRequestWorker *worker, OAIBulkDeleteAdResponse summary);
    void bulkUpdateAdsBidByInventoryReferenceSignalFull(OAIHttpRequestWorker *worker, OAIBulkUpdateAdsByInventoryReferenceResponse summary);
    void bulkUpdateAdsBidByListingIdSignalFull(OAIHttpRequestWorker *worker, OAIBulkAdUpdateResponse summary);
    void bulkUpdateAdsStatusSignalFull(OAIHttpRequestWorker *worker, OAIBulkAdUpdateStatusResponse summary);
    void bulkUpdateAdsStatusByListingIdSignalFull(OAIHttpRequestWorker *worker, OAIBulkAdUpdateStatusByListingIdResponse summary);
    void createAdByListingIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createAdsByInventoryReferenceSignalFull(OAIHttpRequestWorker *worker, OAIAdReferences summary);
    void deleteAdSignalFull(OAIHttpRequestWorker *worker);
    void deleteAdsByInventoryReferenceSignalFull(OAIHttpRequestWorker *worker, OAIAdIds summary);
    void getAdSignalFull(OAIHttpRequestWorker *worker, OAIAd summary);
    void getAdsSignalFull(OAIHttpRequestWorker *worker, OAIAdPagedCollectionResponse summary);
    void getAdsByInventoryReferenceSignalFull(OAIHttpRequestWorker *worker, OAIAds summary);
    void updateBidSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use bulkCreateAdsByInventoryReferenceSignalError() instead")
    void bulkCreateAdsByInventoryReferenceSignalE(OAIBulkCreateAdsByInventoryReferenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateAdsByInventoryReferenceSignalError(OAIBulkCreateAdsByInventoryReferenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkCreateAdsByListingIdSignalError() instead")
    void bulkCreateAdsByListingIdSignalE(OAIBulkAdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateAdsByListingIdSignalError(OAIBulkAdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkDeleteAdsByInventoryReferenceSignalError() instead")
    void bulkDeleteAdsByInventoryReferenceSignalE(OAIBulkDeleteAdsByInventoryReferenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkDeleteAdsByInventoryReferenceSignalError(OAIBulkDeleteAdsByInventoryReferenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkDeleteAdsByListingIdSignalError() instead")
    void bulkDeleteAdsByListingIdSignalE(OAIBulkDeleteAdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkDeleteAdsByListingIdSignalError(OAIBulkDeleteAdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsBidByInventoryReferenceSignalError() instead")
    void bulkUpdateAdsBidByInventoryReferenceSignalE(OAIBulkUpdateAdsByInventoryReferenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsBidByInventoryReferenceSignalError(OAIBulkUpdateAdsByInventoryReferenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsBidByListingIdSignalError() instead")
    void bulkUpdateAdsBidByListingIdSignalE(OAIBulkAdUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsBidByListingIdSignalError(OAIBulkAdUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsStatusSignalError() instead")
    void bulkUpdateAdsStatusSignalE(OAIBulkAdUpdateStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsStatusSignalError(OAIBulkAdUpdateStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsStatusByListingIdSignalError() instead")
    void bulkUpdateAdsStatusByListingIdSignalE(OAIBulkAdUpdateStatusByListingIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsStatusByListingIdSignalError(OAIBulkAdUpdateStatusByListingIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAdByListingIdSignalError() instead")
    void createAdByListingIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdByListingIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAdsByInventoryReferenceSignalError() instead")
    void createAdsByInventoryReferenceSignalE(OAIAdReferences summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdsByInventoryReferenceSignalError(OAIAdReferences summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdSignalError() instead")
    void deleteAdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdsByInventoryReferenceSignalError() instead")
    void deleteAdsByInventoryReferenceSignalE(OAIAdIds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdsByInventoryReferenceSignalError(OAIAdIds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdSignalError() instead")
    void getAdSignalE(OAIAd summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdSignalError(OAIAd summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdsSignalError() instead")
    void getAdsSignalE(OAIAdPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdsSignalError(OAIAdPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdsByInventoryReferenceSignalError() instead")
    void getAdsByInventoryReferenceSignalE(OAIAds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdsByInventoryReferenceSignalError(OAIAds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBidSignalError() instead")
    void updateBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bulkCreateAdsByInventoryReferenceSignalErrorFull() instead")
    void bulkCreateAdsByInventoryReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateAdsByInventoryReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkCreateAdsByListingIdSignalErrorFull() instead")
    void bulkCreateAdsByListingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateAdsByListingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkDeleteAdsByInventoryReferenceSignalErrorFull() instead")
    void bulkDeleteAdsByInventoryReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkDeleteAdsByInventoryReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkDeleteAdsByListingIdSignalErrorFull() instead")
    void bulkDeleteAdsByListingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkDeleteAdsByListingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsBidByInventoryReferenceSignalErrorFull() instead")
    void bulkUpdateAdsBidByInventoryReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsBidByInventoryReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsBidByListingIdSignalErrorFull() instead")
    void bulkUpdateAdsBidByListingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsBidByListingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsStatusSignalErrorFull() instead")
    void bulkUpdateAdsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateAdsStatusByListingIdSignalErrorFull() instead")
    void bulkUpdateAdsStatusByListingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateAdsStatusByListingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAdByListingIdSignalErrorFull() instead")
    void createAdByListingIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdByListingIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAdsByInventoryReferenceSignalErrorFull() instead")
    void createAdsByInventoryReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdsByInventoryReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdSignalErrorFull() instead")
    void deleteAdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdsByInventoryReferenceSignalErrorFull() instead")
    void deleteAdsByInventoryReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdsByInventoryReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdSignalErrorFull() instead")
    void getAdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdsSignalErrorFull() instead")
    void getAdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdsByInventoryReferenceSignalErrorFull() instead")
    void getAdsByInventoryReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdsByInventoryReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBidSignalErrorFull() instead")
    void updateBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
