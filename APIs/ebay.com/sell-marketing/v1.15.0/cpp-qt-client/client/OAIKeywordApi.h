/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKeywordApi_H
#define OAI_OAIKeywordApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkCreateKeywordRequest.h"
#include "OAIBulkCreateKeywordResponse.h"
#include "OAIBulkUpdateKeywordRequest.h"
#include "OAIBulkUpdateKeywordResponse.h"
#include "OAICreateKeywordRequest.h"
#include "OAIKeyword.h"
#include "OAIKeywordPagedCollectionResponse.h"
#include "OAIObject.h"
#include "OAIUpdateKeywordRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKeywordApi : public QObject {
    Q_OBJECT

public:
    OAIKeywordApi(const int timeOut = 0);
    ~OAIKeywordApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_create_keyword_request OAIBulkCreateKeywordRequest [required]
    */
    virtual void bulkCreateKeyword(const QString &campaign_id, const OAIBulkCreateKeywordRequest &oai_bulk_create_keyword_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_bulk_update_keyword_request OAIBulkUpdateKeywordRequest [required]
    */
    virtual void bulkUpdateKeyword(const QString &campaign_id, const OAIBulkUpdateKeywordRequest &oai_bulk_update_keyword_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_create_keyword_request OAICreateKeywordRequest [required]
    */
    virtual void createKeyword(const QString &campaign_id, const OAICreateKeywordRequest &oai_create_keyword_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  keyword_id QString [required]
    */
    virtual void getKeyword(const QString &campaign_id, const QString &keyword_id);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  ad_group_ids QString [optional]
    * @param[in]  keyword_status QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getKeywords(const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &ad_group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &keyword_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  keyword_id QString [required]
    * @param[in]  oai_update_keyword_request OAIUpdateKeywordRequest [required]
    */
    virtual void updateKeyword(const QString &campaign_id, const QString &keyword_id, const OAIUpdateKeywordRequest &oai_update_keyword_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bulkCreateKeywordCallback(OAIHttpRequestWorker *worker);
    void bulkUpdateKeywordCallback(OAIHttpRequestWorker *worker);
    void createKeywordCallback(OAIHttpRequestWorker *worker);
    void getKeywordCallback(OAIHttpRequestWorker *worker);
    void getKeywordsCallback(OAIHttpRequestWorker *worker);
    void updateKeywordCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bulkCreateKeywordSignal(OAIBulkCreateKeywordResponse summary);
    void bulkUpdateKeywordSignal(OAIBulkUpdateKeywordResponse summary);
    void createKeywordSignal(OAIObject summary);
    void getKeywordSignal(OAIKeyword summary);
    void getKeywordsSignal(OAIKeywordPagedCollectionResponse summary);
    void updateKeywordSignal();


    void bulkCreateKeywordSignalFull(OAIHttpRequestWorker *worker, OAIBulkCreateKeywordResponse summary);
    void bulkUpdateKeywordSignalFull(OAIHttpRequestWorker *worker, OAIBulkUpdateKeywordResponse summary);
    void createKeywordSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getKeywordSignalFull(OAIHttpRequestWorker *worker, OAIKeyword summary);
    void getKeywordsSignalFull(OAIHttpRequestWorker *worker, OAIKeywordPagedCollectionResponse summary);
    void updateKeywordSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use bulkCreateKeywordSignalError() instead")
    void bulkCreateKeywordSignalE(OAIBulkCreateKeywordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateKeywordSignalError(OAIBulkCreateKeywordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateKeywordSignalError() instead")
    void bulkUpdateKeywordSignalE(OAIBulkUpdateKeywordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateKeywordSignalError(OAIBulkUpdateKeywordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createKeywordSignalError() instead")
    void createKeywordSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createKeywordSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordSignalError() instead")
    void getKeywordSignalE(OAIKeyword summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordSignalError(OAIKeyword summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordsSignalError() instead")
    void getKeywordsSignalE(OAIKeywordPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordsSignalError(OAIKeywordPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeywordSignalError() instead")
    void updateKeywordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeywordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bulkCreateKeywordSignalErrorFull() instead")
    void bulkCreateKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkUpdateKeywordSignalErrorFull() instead")
    void bulkUpdateKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkUpdateKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createKeywordSignalErrorFull() instead")
    void createKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordSignalErrorFull() instead")
    void getKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeywordsSignalErrorFull() instead")
    void getKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeywordSignalErrorFull() instead")
    void updateKeywordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeywordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
