/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateReportTask.h
 *
 * This type defines the rules that govern the generation of a report task and the criteria that&#39;s used to create the report. The report-generation rules include the starting and ending dates for the report. Report-task criteria includes the report dimensions, metrics, listings covered in the report, and so on. For information on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.
 */

#ifndef OAICreateReportTask_H
#define OAICreateReportTask_H

#include <QJsonObject>

#include "OAIDimension.h"
#include "OAIInventoryReference.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDimension;
class OAIInventoryReference;

class OAICreateReportTask : public OAIObject {
public:
    OAICreateReportTask();
    OAICreateReportTask(QString json);
    ~OAICreateReportTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAdditionalRecords() const;
    void setAdditionalRecords(const QList<QString> &additional_records);
    bool is_additional_records_Set() const;
    bool is_additional_records_Valid() const;

    QList<QString> getCampaignIds() const;
    void setCampaignIds(const QList<QString> &campaign_ids);
    bool is_campaign_ids_Set() const;
    bool is_campaign_ids_Valid() const;

    QString getDateFrom() const;
    void setDateFrom(const QString &date_from);
    bool is_date_from_Set() const;
    bool is_date_from_Valid() const;

    QString getDateTo() const;
    void setDateTo(const QString &date_to);
    bool is_date_to_Set() const;
    bool is_date_to_Valid() const;

    QList<OAIDimension> getDimensions() const;
    void setDimensions(const QList<OAIDimension> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QList<QString> getFundingModels() const;
    void setFundingModels(const QList<QString> &funding_models);
    bool is_funding_models_Set() const;
    bool is_funding_models_Valid() const;

    QList<OAIInventoryReference> getInventoryReferences() const;
    void setInventoryReferences(const QList<OAIInventoryReference> &inventory_references);
    bool is_inventory_references_Set() const;
    bool is_inventory_references_Valid() const;

    QList<QString> getListingIds() const;
    void setListingIds(const QList<QString> &listing_ids);
    bool is_listing_ids_Set() const;
    bool is_listing_ids_Valid() const;

    QString getMarketplaceId() const;
    void setMarketplaceId(const QString &marketplace_id);
    bool is_marketplace_id_Set() const;
    bool is_marketplace_id_Valid() const;

    QList<QString> getMetricKeys() const;
    void setMetricKeys(const QList<QString> &metric_keys);
    bool is_metric_keys_Set() const;
    bool is_metric_keys_Valid() const;

    QString getReportFormat() const;
    void setReportFormat(const QString &report_format);
    bool is_report_format_Set() const;
    bool is_report_format_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_additional_records;
    bool m_additional_records_isSet;
    bool m_additional_records_isValid;

    QList<QString> m_campaign_ids;
    bool m_campaign_ids_isSet;
    bool m_campaign_ids_isValid;

    QString m_date_from;
    bool m_date_from_isSet;
    bool m_date_from_isValid;

    QString m_date_to;
    bool m_date_to_isSet;
    bool m_date_to_isValid;

    QList<OAIDimension> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QList<QString> m_funding_models;
    bool m_funding_models_isSet;
    bool m_funding_models_isValid;

    QList<OAIInventoryReference> m_inventory_references;
    bool m_inventory_references_isSet;
    bool m_inventory_references_isValid;

    QList<QString> m_listing_ids;
    bool m_listing_ids_isSet;
    bool m_listing_ids_isValid;

    QString m_marketplace_id;
    bool m_marketplace_id_isSet;
    bool m_marketplace_id_isValid;

    QList<QString> m_metric_keys;
    bool m_metric_keys_isSet;
    bool m_metric_keys_isValid;

    QString m_report_format;
    bool m_report_format_isSet;
    bool m_report_format_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateReportTask)

#endif // OAICreateReportTask_H
