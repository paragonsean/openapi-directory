/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromotionReportDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromotionReportDetail::OAIPromotionReportDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromotionReportDetail::OAIPromotionReportDetail() {
    this->initializeModel();
}

OAIPromotionReportDetail::~OAIPromotionReportDetail() {}

void OAIPromotionReportDetail::initializeModel() {

    m_average_item_discount_isSet = false;
    m_average_item_discount_isValid = false;

    m_average_item_revenue_isSet = false;
    m_average_item_revenue_isValid = false;

    m_average_order_discount_isSet = false;
    m_average_order_discount_isValid = false;

    m_average_order_revenue_isSet = false;
    m_average_order_revenue_isValid = false;

    m_average_order_size_isSet = false;
    m_average_order_size_isValid = false;

    m_base_sale_isSet = false;
    m_base_sale_isValid = false;

    m_items_sold_quantity_isSet = false;
    m_items_sold_quantity_isValid = false;

    m_number_of_orders_sold_isSet = false;
    m_number_of_orders_sold_isValid = false;

    m_percentage_sales_lift_isSet = false;
    m_percentage_sales_lift_isValid = false;

    m_promotion_href_isSet = false;
    m_promotion_href_isValid = false;

    m_promotion_id_isSet = false;
    m_promotion_id_isValid = false;

    m_promotion_report_id_isSet = false;
    m_promotion_report_id_isValid = false;

    m_promotion_sale_isSet = false;
    m_promotion_sale_isValid = false;

    m_promotion_type_isSet = false;
    m_promotion_type_isValid = false;

    m_total_discount_isSet = false;
    m_total_discount_isValid = false;

    m_total_sale_isSet = false;
    m_total_sale_isValid = false;
}

void OAIPromotionReportDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromotionReportDetail::fromJsonObject(QJsonObject json) {

    m_average_item_discount_isValid = ::OpenAPI::fromJsonValue(m_average_item_discount, json[QString("averageItemDiscount")]);
    m_average_item_discount_isSet = !json[QString("averageItemDiscount")].isNull() && m_average_item_discount_isValid;

    m_average_item_revenue_isValid = ::OpenAPI::fromJsonValue(m_average_item_revenue, json[QString("averageItemRevenue")]);
    m_average_item_revenue_isSet = !json[QString("averageItemRevenue")].isNull() && m_average_item_revenue_isValid;

    m_average_order_discount_isValid = ::OpenAPI::fromJsonValue(m_average_order_discount, json[QString("averageOrderDiscount")]);
    m_average_order_discount_isSet = !json[QString("averageOrderDiscount")].isNull() && m_average_order_discount_isValid;

    m_average_order_revenue_isValid = ::OpenAPI::fromJsonValue(m_average_order_revenue, json[QString("averageOrderRevenue")]);
    m_average_order_revenue_isSet = !json[QString("averageOrderRevenue")].isNull() && m_average_order_revenue_isValid;

    m_average_order_size_isValid = ::OpenAPI::fromJsonValue(m_average_order_size, json[QString("averageOrderSize")]);
    m_average_order_size_isSet = !json[QString("averageOrderSize")].isNull() && m_average_order_size_isValid;

    m_base_sale_isValid = ::OpenAPI::fromJsonValue(m_base_sale, json[QString("baseSale")]);
    m_base_sale_isSet = !json[QString("baseSale")].isNull() && m_base_sale_isValid;

    m_items_sold_quantity_isValid = ::OpenAPI::fromJsonValue(m_items_sold_quantity, json[QString("itemsSoldQuantity")]);
    m_items_sold_quantity_isSet = !json[QString("itemsSoldQuantity")].isNull() && m_items_sold_quantity_isValid;

    m_number_of_orders_sold_isValid = ::OpenAPI::fromJsonValue(m_number_of_orders_sold, json[QString("numberOfOrdersSold")]);
    m_number_of_orders_sold_isSet = !json[QString("numberOfOrdersSold")].isNull() && m_number_of_orders_sold_isValid;

    m_percentage_sales_lift_isValid = ::OpenAPI::fromJsonValue(m_percentage_sales_lift, json[QString("percentageSalesLift")]);
    m_percentage_sales_lift_isSet = !json[QString("percentageSalesLift")].isNull() && m_percentage_sales_lift_isValid;

    m_promotion_href_isValid = ::OpenAPI::fromJsonValue(m_promotion_href, json[QString("promotionHref")]);
    m_promotion_href_isSet = !json[QString("promotionHref")].isNull() && m_promotion_href_isValid;

    m_promotion_id_isValid = ::OpenAPI::fromJsonValue(m_promotion_id, json[QString("promotionId")]);
    m_promotion_id_isSet = !json[QString("promotionId")].isNull() && m_promotion_id_isValid;

    m_promotion_report_id_isValid = ::OpenAPI::fromJsonValue(m_promotion_report_id, json[QString("promotionReportId")]);
    m_promotion_report_id_isSet = !json[QString("promotionReportId")].isNull() && m_promotion_report_id_isValid;

    m_promotion_sale_isValid = ::OpenAPI::fromJsonValue(m_promotion_sale, json[QString("promotionSale")]);
    m_promotion_sale_isSet = !json[QString("promotionSale")].isNull() && m_promotion_sale_isValid;

    m_promotion_type_isValid = ::OpenAPI::fromJsonValue(m_promotion_type, json[QString("promotionType")]);
    m_promotion_type_isSet = !json[QString("promotionType")].isNull() && m_promotion_type_isValid;

    m_total_discount_isValid = ::OpenAPI::fromJsonValue(m_total_discount, json[QString("totalDiscount")]);
    m_total_discount_isSet = !json[QString("totalDiscount")].isNull() && m_total_discount_isValid;

    m_total_sale_isValid = ::OpenAPI::fromJsonValue(m_total_sale, json[QString("totalSale")]);
    m_total_sale_isSet = !json[QString("totalSale")].isNull() && m_total_sale_isValid;
}

QString OAIPromotionReportDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromotionReportDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_average_item_discount.isSet()) {
        obj.insert(QString("averageItemDiscount"), ::OpenAPI::toJsonValue(m_average_item_discount));
    }
    if (m_average_item_revenue.isSet()) {
        obj.insert(QString("averageItemRevenue"), ::OpenAPI::toJsonValue(m_average_item_revenue));
    }
    if (m_average_order_discount.isSet()) {
        obj.insert(QString("averageOrderDiscount"), ::OpenAPI::toJsonValue(m_average_order_discount));
    }
    if (m_average_order_revenue.isSet()) {
        obj.insert(QString("averageOrderRevenue"), ::OpenAPI::toJsonValue(m_average_order_revenue));
    }
    if (m_average_order_size_isSet) {
        obj.insert(QString("averageOrderSize"), ::OpenAPI::toJsonValue(m_average_order_size));
    }
    if (m_base_sale.isSet()) {
        obj.insert(QString("baseSale"), ::OpenAPI::toJsonValue(m_base_sale));
    }
    if (m_items_sold_quantity_isSet) {
        obj.insert(QString("itemsSoldQuantity"), ::OpenAPI::toJsonValue(m_items_sold_quantity));
    }
    if (m_number_of_orders_sold_isSet) {
        obj.insert(QString("numberOfOrdersSold"), ::OpenAPI::toJsonValue(m_number_of_orders_sold));
    }
    if (m_percentage_sales_lift_isSet) {
        obj.insert(QString("percentageSalesLift"), ::OpenAPI::toJsonValue(m_percentage_sales_lift));
    }
    if (m_promotion_href_isSet) {
        obj.insert(QString("promotionHref"), ::OpenAPI::toJsonValue(m_promotion_href));
    }
    if (m_promotion_id_isSet) {
        obj.insert(QString("promotionId"), ::OpenAPI::toJsonValue(m_promotion_id));
    }
    if (m_promotion_report_id_isSet) {
        obj.insert(QString("promotionReportId"), ::OpenAPI::toJsonValue(m_promotion_report_id));
    }
    if (m_promotion_sale.isSet()) {
        obj.insert(QString("promotionSale"), ::OpenAPI::toJsonValue(m_promotion_sale));
    }
    if (m_promotion_type_isSet) {
        obj.insert(QString("promotionType"), ::OpenAPI::toJsonValue(m_promotion_type));
    }
    if (m_total_discount.isSet()) {
        obj.insert(QString("totalDiscount"), ::OpenAPI::toJsonValue(m_total_discount));
    }
    if (m_total_sale.isSet()) {
        obj.insert(QString("totalSale"), ::OpenAPI::toJsonValue(m_total_sale));
    }
    return obj;
}

OAIAmount OAIPromotionReportDetail::getAverageItemDiscount() const {
    return m_average_item_discount;
}
void OAIPromotionReportDetail::setAverageItemDiscount(const OAIAmount &average_item_discount) {
    m_average_item_discount = average_item_discount;
    m_average_item_discount_isSet = true;
}

bool OAIPromotionReportDetail::is_average_item_discount_Set() const{
    return m_average_item_discount_isSet;
}

bool OAIPromotionReportDetail::is_average_item_discount_Valid() const{
    return m_average_item_discount_isValid;
}

OAIAmount OAIPromotionReportDetail::getAverageItemRevenue() const {
    return m_average_item_revenue;
}
void OAIPromotionReportDetail::setAverageItemRevenue(const OAIAmount &average_item_revenue) {
    m_average_item_revenue = average_item_revenue;
    m_average_item_revenue_isSet = true;
}

bool OAIPromotionReportDetail::is_average_item_revenue_Set() const{
    return m_average_item_revenue_isSet;
}

bool OAIPromotionReportDetail::is_average_item_revenue_Valid() const{
    return m_average_item_revenue_isValid;
}

OAIAmount OAIPromotionReportDetail::getAverageOrderDiscount() const {
    return m_average_order_discount;
}
void OAIPromotionReportDetail::setAverageOrderDiscount(const OAIAmount &average_order_discount) {
    m_average_order_discount = average_order_discount;
    m_average_order_discount_isSet = true;
}

bool OAIPromotionReportDetail::is_average_order_discount_Set() const{
    return m_average_order_discount_isSet;
}

bool OAIPromotionReportDetail::is_average_order_discount_Valid() const{
    return m_average_order_discount_isValid;
}

OAIAmount OAIPromotionReportDetail::getAverageOrderRevenue() const {
    return m_average_order_revenue;
}
void OAIPromotionReportDetail::setAverageOrderRevenue(const OAIAmount &average_order_revenue) {
    m_average_order_revenue = average_order_revenue;
    m_average_order_revenue_isSet = true;
}

bool OAIPromotionReportDetail::is_average_order_revenue_Set() const{
    return m_average_order_revenue_isSet;
}

bool OAIPromotionReportDetail::is_average_order_revenue_Valid() const{
    return m_average_order_revenue_isValid;
}

QString OAIPromotionReportDetail::getAverageOrderSize() const {
    return m_average_order_size;
}
void OAIPromotionReportDetail::setAverageOrderSize(const QString &average_order_size) {
    m_average_order_size = average_order_size;
    m_average_order_size_isSet = true;
}

bool OAIPromotionReportDetail::is_average_order_size_Set() const{
    return m_average_order_size_isSet;
}

bool OAIPromotionReportDetail::is_average_order_size_Valid() const{
    return m_average_order_size_isValid;
}

OAIAmount OAIPromotionReportDetail::getBaseSale() const {
    return m_base_sale;
}
void OAIPromotionReportDetail::setBaseSale(const OAIAmount &base_sale) {
    m_base_sale = base_sale;
    m_base_sale_isSet = true;
}

bool OAIPromotionReportDetail::is_base_sale_Set() const{
    return m_base_sale_isSet;
}

bool OAIPromotionReportDetail::is_base_sale_Valid() const{
    return m_base_sale_isValid;
}

qint32 OAIPromotionReportDetail::getItemsSoldQuantity() const {
    return m_items_sold_quantity;
}
void OAIPromotionReportDetail::setItemsSoldQuantity(const qint32 &items_sold_quantity) {
    m_items_sold_quantity = items_sold_quantity;
    m_items_sold_quantity_isSet = true;
}

bool OAIPromotionReportDetail::is_items_sold_quantity_Set() const{
    return m_items_sold_quantity_isSet;
}

bool OAIPromotionReportDetail::is_items_sold_quantity_Valid() const{
    return m_items_sold_quantity_isValid;
}

qint32 OAIPromotionReportDetail::getNumberOfOrdersSold() const {
    return m_number_of_orders_sold;
}
void OAIPromotionReportDetail::setNumberOfOrdersSold(const qint32 &number_of_orders_sold) {
    m_number_of_orders_sold = number_of_orders_sold;
    m_number_of_orders_sold_isSet = true;
}

bool OAIPromotionReportDetail::is_number_of_orders_sold_Set() const{
    return m_number_of_orders_sold_isSet;
}

bool OAIPromotionReportDetail::is_number_of_orders_sold_Valid() const{
    return m_number_of_orders_sold_isValid;
}

QString OAIPromotionReportDetail::getPercentageSalesLift() const {
    return m_percentage_sales_lift;
}
void OAIPromotionReportDetail::setPercentageSalesLift(const QString &percentage_sales_lift) {
    m_percentage_sales_lift = percentage_sales_lift;
    m_percentage_sales_lift_isSet = true;
}

bool OAIPromotionReportDetail::is_percentage_sales_lift_Set() const{
    return m_percentage_sales_lift_isSet;
}

bool OAIPromotionReportDetail::is_percentage_sales_lift_Valid() const{
    return m_percentage_sales_lift_isValid;
}

QString OAIPromotionReportDetail::getPromotionHref() const {
    return m_promotion_href;
}
void OAIPromotionReportDetail::setPromotionHref(const QString &promotion_href) {
    m_promotion_href = promotion_href;
    m_promotion_href_isSet = true;
}

bool OAIPromotionReportDetail::is_promotion_href_Set() const{
    return m_promotion_href_isSet;
}

bool OAIPromotionReportDetail::is_promotion_href_Valid() const{
    return m_promotion_href_isValid;
}

QString OAIPromotionReportDetail::getPromotionId() const {
    return m_promotion_id;
}
void OAIPromotionReportDetail::setPromotionId(const QString &promotion_id) {
    m_promotion_id = promotion_id;
    m_promotion_id_isSet = true;
}

bool OAIPromotionReportDetail::is_promotion_id_Set() const{
    return m_promotion_id_isSet;
}

bool OAIPromotionReportDetail::is_promotion_id_Valid() const{
    return m_promotion_id_isValid;
}

QString OAIPromotionReportDetail::getPromotionReportId() const {
    return m_promotion_report_id;
}
void OAIPromotionReportDetail::setPromotionReportId(const QString &promotion_report_id) {
    m_promotion_report_id = promotion_report_id;
    m_promotion_report_id_isSet = true;
}

bool OAIPromotionReportDetail::is_promotion_report_id_Set() const{
    return m_promotion_report_id_isSet;
}

bool OAIPromotionReportDetail::is_promotion_report_id_Valid() const{
    return m_promotion_report_id_isValid;
}

OAIAmount OAIPromotionReportDetail::getPromotionSale() const {
    return m_promotion_sale;
}
void OAIPromotionReportDetail::setPromotionSale(const OAIAmount &promotion_sale) {
    m_promotion_sale = promotion_sale;
    m_promotion_sale_isSet = true;
}

bool OAIPromotionReportDetail::is_promotion_sale_Set() const{
    return m_promotion_sale_isSet;
}

bool OAIPromotionReportDetail::is_promotion_sale_Valid() const{
    return m_promotion_sale_isValid;
}

QString OAIPromotionReportDetail::getPromotionType() const {
    return m_promotion_type;
}
void OAIPromotionReportDetail::setPromotionType(const QString &promotion_type) {
    m_promotion_type = promotion_type;
    m_promotion_type_isSet = true;
}

bool OAIPromotionReportDetail::is_promotion_type_Set() const{
    return m_promotion_type_isSet;
}

bool OAIPromotionReportDetail::is_promotion_type_Valid() const{
    return m_promotion_type_isValid;
}

OAIAmount OAIPromotionReportDetail::getTotalDiscount() const {
    return m_total_discount;
}
void OAIPromotionReportDetail::setTotalDiscount(const OAIAmount &total_discount) {
    m_total_discount = total_discount;
    m_total_discount_isSet = true;
}

bool OAIPromotionReportDetail::is_total_discount_Set() const{
    return m_total_discount_isSet;
}

bool OAIPromotionReportDetail::is_total_discount_Valid() const{
    return m_total_discount_isValid;
}

OAIAmount OAIPromotionReportDetail::getTotalSale() const {
    return m_total_sale;
}
void OAIPromotionReportDetail::setTotalSale(const OAIAmount &total_sale) {
    m_total_sale = total_sale;
    m_total_sale_isSet = true;
}

bool OAIPromotionReportDetail::is_total_sale_Set() const{
    return m_total_sale_isSet;
}

bool OAIPromotionReportDetail::is_total_sale_Valid() const{
    return m_total_sale_isValid;
}

bool OAIPromotionReportDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_item_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_item_revenue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_order_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_order_revenue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_order_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_sale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_sold_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_orders_sold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_sales_lift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_sale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sale.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromotionReportDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
