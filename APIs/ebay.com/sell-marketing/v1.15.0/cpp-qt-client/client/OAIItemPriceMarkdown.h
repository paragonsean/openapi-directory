/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIItemPriceMarkdown.h
 *
 * This type defines the fields used to describe an item price markdown promotion.
 */

#ifndef OAIItemPriceMarkdown_H
#define OAIItemPriceMarkdown_H

#include <QJsonObject>

#include "OAISelectedInventoryDiscount.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISelectedInventoryDiscount;

class OAIItemPriceMarkdown : public OAIObject {
public:
    OAIItemPriceMarkdown();
    OAIItemPriceMarkdown(QString json);
    ~OAIItemPriceMarkdown() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApplyFreeShipping() const;
    void setApplyFreeShipping(const bool &apply_free_shipping);
    bool is_apply_free_shipping_Set() const;
    bool is_apply_free_shipping_Valid() const;

    bool isAutoSelectFutureInventory() const;
    void setAutoSelectFutureInventory(const bool &auto_select_future_inventory);
    bool is_auto_select_future_inventory_Set() const;
    bool is_auto_select_future_inventory_Valid() const;

    bool isBlockPriceIncreaseInItemRevision() const;
    void setBlockPriceIncreaseInItemRevision(const bool &block_price_increase_in_item_revision);
    bool is_block_price_increase_in_item_revision_Set() const;
    bool is_block_price_increase_in_item_revision_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    QString getMarketplaceId() const;
    void setMarketplaceId(const QString &marketplace_id);
    bool is_marketplace_id_Set() const;
    bool is_marketplace_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPriority() const;
    void setPriority(const QString &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QString getPromotionImageUrl() const;
    void setPromotionImageUrl(const QString &promotion_image_url);
    bool is_promotion_image_url_Set() const;
    bool is_promotion_image_url_Valid() const;

    QString getPromotionStatus() const;
    void setPromotionStatus(const QString &promotion_status);
    bool is_promotion_status_Set() const;
    bool is_promotion_status_Valid() const;

    QList<OAISelectedInventoryDiscount> getSelectedInventoryDiscounts() const;
    void setSelectedInventoryDiscounts(const QList<OAISelectedInventoryDiscount> &selected_inventory_discounts);
    bool is_selected_inventory_discounts_Set() const;
    bool is_selected_inventory_discounts_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_apply_free_shipping;
    bool m_apply_free_shipping_isSet;
    bool m_apply_free_shipping_isValid;

    bool m_auto_select_future_inventory;
    bool m_auto_select_future_inventory_isSet;
    bool m_auto_select_future_inventory_isValid;

    bool m_block_price_increase_in_item_revision;
    bool m_block_price_increase_in_item_revision_isSet;
    bool m_block_price_increase_in_item_revision_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    QString m_marketplace_id;
    bool m_marketplace_id_isSet;
    bool m_marketplace_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QString m_promotion_image_url;
    bool m_promotion_image_url_isSet;
    bool m_promotion_image_url_isValid;

    QString m_promotion_status;
    bool m_promotion_status_isSet;
    bool m_promotion_status_isValid;

    QList<OAISelectedInventoryDiscount> m_selected_inventory_discounts;
    bool m_selected_inventory_discounts_isSet;
    bool m_selected_inventory_discounts_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIItemPriceMarkdown)

#endif // OAIItemPriceMarkdown_H
