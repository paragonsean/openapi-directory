/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemPriceMarkdown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemPriceMarkdown::OAIItemPriceMarkdown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemPriceMarkdown::OAIItemPriceMarkdown() {
    this->initializeModel();
}

OAIItemPriceMarkdown::~OAIItemPriceMarkdown() {}

void OAIItemPriceMarkdown::initializeModel() {

    m_apply_free_shipping_isSet = false;
    m_apply_free_shipping_isValid = false;

    m_auto_select_future_inventory_isSet = false;
    m_auto_select_future_inventory_isValid = false;

    m_block_price_increase_in_item_revision_isSet = false;
    m_block_price_increase_in_item_revision_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_promotion_image_url_isSet = false;
    m_promotion_image_url_isValid = false;

    m_promotion_status_isSet = false;
    m_promotion_status_isValid = false;

    m_selected_inventory_discounts_isSet = false;
    m_selected_inventory_discounts_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIItemPriceMarkdown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemPriceMarkdown::fromJsonObject(QJsonObject json) {

    m_apply_free_shipping_isValid = ::OpenAPI::fromJsonValue(m_apply_free_shipping, json[QString("applyFreeShipping")]);
    m_apply_free_shipping_isSet = !json[QString("applyFreeShipping")].isNull() && m_apply_free_shipping_isValid;

    m_auto_select_future_inventory_isValid = ::OpenAPI::fromJsonValue(m_auto_select_future_inventory, json[QString("autoSelectFutureInventory")]);
    m_auto_select_future_inventory_isSet = !json[QString("autoSelectFutureInventory")].isNull() && m_auto_select_future_inventory_isValid;

    m_block_price_increase_in_item_revision_isValid = ::OpenAPI::fromJsonValue(m_block_price_increase_in_item_revision, json[QString("blockPriceIncreaseInItemRevision")]);
    m_block_price_increase_in_item_revision_isSet = !json[QString("blockPriceIncreaseInItemRevision")].isNull() && m_block_price_increase_in_item_revision_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_promotion_image_url_isValid = ::OpenAPI::fromJsonValue(m_promotion_image_url, json[QString("promotionImageUrl")]);
    m_promotion_image_url_isSet = !json[QString("promotionImageUrl")].isNull() && m_promotion_image_url_isValid;

    m_promotion_status_isValid = ::OpenAPI::fromJsonValue(m_promotion_status, json[QString("promotionStatus")]);
    m_promotion_status_isSet = !json[QString("promotionStatus")].isNull() && m_promotion_status_isValid;

    m_selected_inventory_discounts_isValid = ::OpenAPI::fromJsonValue(m_selected_inventory_discounts, json[QString("selectedInventoryDiscounts")]);
    m_selected_inventory_discounts_isSet = !json[QString("selectedInventoryDiscounts")].isNull() && m_selected_inventory_discounts_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIItemPriceMarkdown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemPriceMarkdown::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_free_shipping_isSet) {
        obj.insert(QString("applyFreeShipping"), ::OpenAPI::toJsonValue(m_apply_free_shipping));
    }
    if (m_auto_select_future_inventory_isSet) {
        obj.insert(QString("autoSelectFutureInventory"), ::OpenAPI::toJsonValue(m_auto_select_future_inventory));
    }
    if (m_block_price_increase_in_item_revision_isSet) {
        obj.insert(QString("blockPriceIncreaseInItemRevision"), ::OpenAPI::toJsonValue(m_block_price_increase_in_item_revision));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_promotion_image_url_isSet) {
        obj.insert(QString("promotionImageUrl"), ::OpenAPI::toJsonValue(m_promotion_image_url));
    }
    if (m_promotion_status_isSet) {
        obj.insert(QString("promotionStatus"), ::OpenAPI::toJsonValue(m_promotion_status));
    }
    if (m_selected_inventory_discounts.size() > 0) {
        obj.insert(QString("selectedInventoryDiscounts"), ::OpenAPI::toJsonValue(m_selected_inventory_discounts));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

bool OAIItemPriceMarkdown::isApplyFreeShipping() const {
    return m_apply_free_shipping;
}
void OAIItemPriceMarkdown::setApplyFreeShipping(const bool &apply_free_shipping) {
    m_apply_free_shipping = apply_free_shipping;
    m_apply_free_shipping_isSet = true;
}

bool OAIItemPriceMarkdown::is_apply_free_shipping_Set() const{
    return m_apply_free_shipping_isSet;
}

bool OAIItemPriceMarkdown::is_apply_free_shipping_Valid() const{
    return m_apply_free_shipping_isValid;
}

bool OAIItemPriceMarkdown::isAutoSelectFutureInventory() const {
    return m_auto_select_future_inventory;
}
void OAIItemPriceMarkdown::setAutoSelectFutureInventory(const bool &auto_select_future_inventory) {
    m_auto_select_future_inventory = auto_select_future_inventory;
    m_auto_select_future_inventory_isSet = true;
}

bool OAIItemPriceMarkdown::is_auto_select_future_inventory_Set() const{
    return m_auto_select_future_inventory_isSet;
}

bool OAIItemPriceMarkdown::is_auto_select_future_inventory_Valid() const{
    return m_auto_select_future_inventory_isValid;
}

bool OAIItemPriceMarkdown::isBlockPriceIncreaseInItemRevision() const {
    return m_block_price_increase_in_item_revision;
}
void OAIItemPriceMarkdown::setBlockPriceIncreaseInItemRevision(const bool &block_price_increase_in_item_revision) {
    m_block_price_increase_in_item_revision = block_price_increase_in_item_revision;
    m_block_price_increase_in_item_revision_isSet = true;
}

bool OAIItemPriceMarkdown::is_block_price_increase_in_item_revision_Set() const{
    return m_block_price_increase_in_item_revision_isSet;
}

bool OAIItemPriceMarkdown::is_block_price_increase_in_item_revision_Valid() const{
    return m_block_price_increase_in_item_revision_isValid;
}

QString OAIItemPriceMarkdown::getDescription() const {
    return m_description;
}
void OAIItemPriceMarkdown::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItemPriceMarkdown::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItemPriceMarkdown::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIItemPriceMarkdown::getEndDate() const {
    return m_end_date;
}
void OAIItemPriceMarkdown::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIItemPriceMarkdown::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIItemPriceMarkdown::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIItemPriceMarkdown::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIItemPriceMarkdown::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIItemPriceMarkdown::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIItemPriceMarkdown::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAIItemPriceMarkdown::getName() const {
    return m_name;
}
void OAIItemPriceMarkdown::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItemPriceMarkdown::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItemPriceMarkdown::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItemPriceMarkdown::getPriority() const {
    return m_priority;
}
void OAIItemPriceMarkdown::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIItemPriceMarkdown::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIItemPriceMarkdown::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIItemPriceMarkdown::getPromotionImageUrl() const {
    return m_promotion_image_url;
}
void OAIItemPriceMarkdown::setPromotionImageUrl(const QString &promotion_image_url) {
    m_promotion_image_url = promotion_image_url;
    m_promotion_image_url_isSet = true;
}

bool OAIItemPriceMarkdown::is_promotion_image_url_Set() const{
    return m_promotion_image_url_isSet;
}

bool OAIItemPriceMarkdown::is_promotion_image_url_Valid() const{
    return m_promotion_image_url_isValid;
}

QString OAIItemPriceMarkdown::getPromotionStatus() const {
    return m_promotion_status;
}
void OAIItemPriceMarkdown::setPromotionStatus(const QString &promotion_status) {
    m_promotion_status = promotion_status;
    m_promotion_status_isSet = true;
}

bool OAIItemPriceMarkdown::is_promotion_status_Set() const{
    return m_promotion_status_isSet;
}

bool OAIItemPriceMarkdown::is_promotion_status_Valid() const{
    return m_promotion_status_isValid;
}

QList<OAISelectedInventoryDiscount> OAIItemPriceMarkdown::getSelectedInventoryDiscounts() const {
    return m_selected_inventory_discounts;
}
void OAIItemPriceMarkdown::setSelectedInventoryDiscounts(const QList<OAISelectedInventoryDiscount> &selected_inventory_discounts) {
    m_selected_inventory_discounts = selected_inventory_discounts;
    m_selected_inventory_discounts_isSet = true;
}

bool OAIItemPriceMarkdown::is_selected_inventory_discounts_Set() const{
    return m_selected_inventory_discounts_isSet;
}

bool OAIItemPriceMarkdown::is_selected_inventory_discounts_Valid() const{
    return m_selected_inventory_discounts_isValid;
}

QString OAIItemPriceMarkdown::getStartDate() const {
    return m_start_date;
}
void OAIItemPriceMarkdown::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIItemPriceMarkdown::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIItemPriceMarkdown::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIItemPriceMarkdown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_free_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_select_future_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_price_increase_in_item_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_inventory_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemPriceMarkdown::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
