/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReportTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReportTask::OAICreateReportTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReportTask::OAICreateReportTask() {
    this->initializeModel();
}

OAICreateReportTask::~OAICreateReportTask() {}

void OAICreateReportTask::initializeModel() {

    m_additional_records_isSet = false;
    m_additional_records_isValid = false;

    m_campaign_ids_isSet = false;
    m_campaign_ids_isValid = false;

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_funding_models_isSet = false;
    m_funding_models_isValid = false;

    m_inventory_references_isSet = false;
    m_inventory_references_isValid = false;

    m_listing_ids_isSet = false;
    m_listing_ids_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_metric_keys_isSet = false;
    m_metric_keys_isValid = false;

    m_report_format_isSet = false;
    m_report_format_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;
}

void OAICreateReportTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReportTask::fromJsonObject(QJsonObject json) {

    m_additional_records_isValid = ::OpenAPI::fromJsonValue(m_additional_records, json[QString("additionalRecords")]);
    m_additional_records_isSet = !json[QString("additionalRecords")].isNull() && m_additional_records_isValid;

    m_campaign_ids_isValid = ::OpenAPI::fromJsonValue(m_campaign_ids, json[QString("campaignIds")]);
    m_campaign_ids_isSet = !json[QString("campaignIds")].isNull() && m_campaign_ids_isValid;

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("dateFrom")]);
    m_date_from_isSet = !json[QString("dateFrom")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("dateTo")]);
    m_date_to_isSet = !json[QString("dateTo")].isNull() && m_date_to_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_funding_models_isValid = ::OpenAPI::fromJsonValue(m_funding_models, json[QString("fundingModels")]);
    m_funding_models_isSet = !json[QString("fundingModels")].isNull() && m_funding_models_isValid;

    m_inventory_references_isValid = ::OpenAPI::fromJsonValue(m_inventory_references, json[QString("inventoryReferences")]);
    m_inventory_references_isSet = !json[QString("inventoryReferences")].isNull() && m_inventory_references_isValid;

    m_listing_ids_isValid = ::OpenAPI::fromJsonValue(m_listing_ids, json[QString("listingIds")]);
    m_listing_ids_isSet = !json[QString("listingIds")].isNull() && m_listing_ids_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_metric_keys_isValid = ::OpenAPI::fromJsonValue(m_metric_keys, json[QString("metricKeys")]);
    m_metric_keys_isSet = !json[QString("metricKeys")].isNull() && m_metric_keys_isValid;

    m_report_format_isValid = ::OpenAPI::fromJsonValue(m_report_format, json[QString("reportFormat")]);
    m_report_format_isSet = !json[QString("reportFormat")].isNull() && m_report_format_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("reportType")]);
    m_report_type_isSet = !json[QString("reportType")].isNull() && m_report_type_isValid;
}

QString OAICreateReportTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReportTask::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_records.size() > 0) {
        obj.insert(QString("additionalRecords"), ::OpenAPI::toJsonValue(m_additional_records));
    }
    if (m_campaign_ids.size() > 0) {
        obj.insert(QString("campaignIds"), ::OpenAPI::toJsonValue(m_campaign_ids));
    }
    if (m_date_from_isSet) {
        obj.insert(QString("dateFrom"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("dateTo"), ::OpenAPI::toJsonValue(m_date_to));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_funding_models.size() > 0) {
        obj.insert(QString("fundingModels"), ::OpenAPI::toJsonValue(m_funding_models));
    }
    if (m_inventory_references.size() > 0) {
        obj.insert(QString("inventoryReferences"), ::OpenAPI::toJsonValue(m_inventory_references));
    }
    if (m_listing_ids.size() > 0) {
        obj.insert(QString("listingIds"), ::OpenAPI::toJsonValue(m_listing_ids));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_metric_keys.size() > 0) {
        obj.insert(QString("metricKeys"), ::OpenAPI::toJsonValue(m_metric_keys));
    }
    if (m_report_format_isSet) {
        obj.insert(QString("reportFormat"), ::OpenAPI::toJsonValue(m_report_format));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("reportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    return obj;
}

QList<QString> OAICreateReportTask::getAdditionalRecords() const {
    return m_additional_records;
}
void OAICreateReportTask::setAdditionalRecords(const QList<QString> &additional_records) {
    m_additional_records = additional_records;
    m_additional_records_isSet = true;
}

bool OAICreateReportTask::is_additional_records_Set() const{
    return m_additional_records_isSet;
}

bool OAICreateReportTask::is_additional_records_Valid() const{
    return m_additional_records_isValid;
}

QList<QString> OAICreateReportTask::getCampaignIds() const {
    return m_campaign_ids;
}
void OAICreateReportTask::setCampaignIds(const QList<QString> &campaign_ids) {
    m_campaign_ids = campaign_ids;
    m_campaign_ids_isSet = true;
}

bool OAICreateReportTask::is_campaign_ids_Set() const{
    return m_campaign_ids_isSet;
}

bool OAICreateReportTask::is_campaign_ids_Valid() const{
    return m_campaign_ids_isValid;
}

QString OAICreateReportTask::getDateFrom() const {
    return m_date_from;
}
void OAICreateReportTask::setDateFrom(const QString &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAICreateReportTask::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAICreateReportTask::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAICreateReportTask::getDateTo() const {
    return m_date_to;
}
void OAICreateReportTask::setDateTo(const QString &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAICreateReportTask::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAICreateReportTask::is_date_to_Valid() const{
    return m_date_to_isValid;
}

QList<OAIDimension> OAICreateReportTask::getDimensions() const {
    return m_dimensions;
}
void OAICreateReportTask::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAICreateReportTask::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAICreateReportTask::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList<QString> OAICreateReportTask::getFundingModels() const {
    return m_funding_models;
}
void OAICreateReportTask::setFundingModels(const QList<QString> &funding_models) {
    m_funding_models = funding_models;
    m_funding_models_isSet = true;
}

bool OAICreateReportTask::is_funding_models_Set() const{
    return m_funding_models_isSet;
}

bool OAICreateReportTask::is_funding_models_Valid() const{
    return m_funding_models_isValid;
}

QList<OAIInventoryReference> OAICreateReportTask::getInventoryReferences() const {
    return m_inventory_references;
}
void OAICreateReportTask::setInventoryReferences(const QList<OAIInventoryReference> &inventory_references) {
    m_inventory_references = inventory_references;
    m_inventory_references_isSet = true;
}

bool OAICreateReportTask::is_inventory_references_Set() const{
    return m_inventory_references_isSet;
}

bool OAICreateReportTask::is_inventory_references_Valid() const{
    return m_inventory_references_isValid;
}

QList<QString> OAICreateReportTask::getListingIds() const {
    return m_listing_ids;
}
void OAICreateReportTask::setListingIds(const QList<QString> &listing_ids) {
    m_listing_ids = listing_ids;
    m_listing_ids_isSet = true;
}

bool OAICreateReportTask::is_listing_ids_Set() const{
    return m_listing_ids_isSet;
}

bool OAICreateReportTask::is_listing_ids_Valid() const{
    return m_listing_ids_isValid;
}

QString OAICreateReportTask::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAICreateReportTask::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAICreateReportTask::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAICreateReportTask::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QList<QString> OAICreateReportTask::getMetricKeys() const {
    return m_metric_keys;
}
void OAICreateReportTask::setMetricKeys(const QList<QString> &metric_keys) {
    m_metric_keys = metric_keys;
    m_metric_keys_isSet = true;
}

bool OAICreateReportTask::is_metric_keys_Set() const{
    return m_metric_keys_isSet;
}

bool OAICreateReportTask::is_metric_keys_Valid() const{
    return m_metric_keys_isValid;
}

QString OAICreateReportTask::getReportFormat() const {
    return m_report_format;
}
void OAICreateReportTask::setReportFormat(const QString &report_format) {
    m_report_format = report_format;
    m_report_format_isSet = true;
}

bool OAICreateReportTask::is_report_format_Set() const{
    return m_report_format_isSet;
}

bool OAICreateReportTask::is_report_format_Valid() const{
    return m_report_format_isValid;
}

QString OAICreateReportTask::getReportType() const {
    return m_report_type;
}
void OAICreateReportTask::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAICreateReportTask::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAICreateReportTask::is_report_type_Valid() const{
    return m_report_type_isValid;
}

bool OAICreateReportTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReportTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
