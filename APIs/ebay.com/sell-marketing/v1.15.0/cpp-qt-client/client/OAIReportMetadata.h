/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportMetadata.h
 *
 * This type defines the fields included in the report.
 */

#ifndef OAIReportMetadata_H
#define OAIReportMetadata_H

#include <QJsonObject>

#include "OAIDimensionMetadata.h"
#include "OAIMetricMetadata.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDimensionMetadata;
class OAIMetricMetadata;

class OAIReportMetadata : public OAIObject {
public:
    OAIReportMetadata();
    OAIReportMetadata(QString json);
    ~OAIReportMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDimensionMetadata> getDimensionMetadata() const;
    void setDimensionMetadata(const QList<OAIDimensionMetadata> &dimension_metadata);
    bool is_dimension_metadata_Set() const;
    bool is_dimension_metadata_Valid() const;

    qint32 getMaxNumberOfDimensionsToRequest() const;
    void setMaxNumberOfDimensionsToRequest(const qint32 &max_number_of_dimensions_to_request);
    bool is_max_number_of_dimensions_to_request_Set() const;
    bool is_max_number_of_dimensions_to_request_Valid() const;

    qint32 getMaxNumberOfMetricsToRequest() const;
    void setMaxNumberOfMetricsToRequest(const qint32 &max_number_of_metrics_to_request);
    bool is_max_number_of_metrics_to_request_Set() const;
    bool is_max_number_of_metrics_to_request_Valid() const;

    QList<OAIMetricMetadata> getMetricMetadata() const;
    void setMetricMetadata(const QList<OAIMetricMetadata> &metric_metadata);
    bool is_metric_metadata_Set() const;
    bool is_metric_metadata_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDimensionMetadata> m_dimension_metadata;
    bool m_dimension_metadata_isSet;
    bool m_dimension_metadata_isValid;

    qint32 m_max_number_of_dimensions_to_request;
    bool m_max_number_of_dimensions_to_request_isSet;
    bool m_max_number_of_dimensions_to_request_isValid;

    qint32 m_max_number_of_metrics_to_request;
    bool m_max_number_of_metrics_to_request_isSet;
    bool m_max_number_of_metrics_to_request_isValid;

    QList<OAIMetricMetadata> m_metric_metadata;
    bool m_metric_metadata_isSet;
    bool m_metric_metadata_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportMetadata)

#endif // OAIReportMetadata_H
