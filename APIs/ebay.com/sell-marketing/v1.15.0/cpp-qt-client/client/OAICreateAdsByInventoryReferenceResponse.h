/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAdsByInventoryReferenceResponse.h
 *
 * This type defines the fields returned when you create an ad by inventory reference ID.
 */

#ifndef OAICreateAdsByInventoryReferenceResponse_H
#define OAICreateAdsByInventoryReferenceResponse_H

#include <QJsonObject>

#include "OAIAdReference.h"
#include "OAIError.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdReference;
class OAIError;

class OAICreateAdsByInventoryReferenceResponse : public OAIObject {
public:
    OAICreateAdsByInventoryReferenceResponse();
    OAICreateAdsByInventoryReferenceResponse(QString json);
    ~OAICreateAdsByInventoryReferenceResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdGroupId() const;
    void setAdGroupId(const QString &ad_group_id);
    bool is_ad_group_id_Set() const;
    bool is_ad_group_id_Valid() const;

    QList<OAIAdReference> getAds() const;
    void setAds(const QList<OAIAdReference> &ads);
    bool is_ads_Set() const;
    bool is_ads_Valid() const;

    QList<OAIError> getErrors() const;
    void setErrors(const QList<OAIError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QString getInventoryReferenceId() const;
    void setInventoryReferenceId(const QString &inventory_reference_id);
    bool is_inventory_reference_id_Set() const;
    bool is_inventory_reference_id_Valid() const;

    QString getInventoryReferenceType() const;
    void setInventoryReferenceType(const QString &inventory_reference_type);
    bool is_inventory_reference_type_Set() const;
    bool is_inventory_reference_type_Valid() const;

    qint32 getStatusCode() const;
    void setStatusCode(const qint32 &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ad_group_id;
    bool m_ad_group_id_isSet;
    bool m_ad_group_id_isValid;

    QList<OAIAdReference> m_ads;
    bool m_ads_isSet;
    bool m_ads_isValid;

    QList<OAIError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QString m_inventory_reference_id;
    bool m_inventory_reference_id_isSet;
    bool m_inventory_reference_id_isValid;

    QString m_inventory_reference_type;
    bool m_inventory_reference_type_isSet;
    bool m_inventory_reference_type_isValid;

    qint32 m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAdsByInventoryReferenceResponse)

#endif // OAICreateAdsByInventoryReferenceResponse_H
