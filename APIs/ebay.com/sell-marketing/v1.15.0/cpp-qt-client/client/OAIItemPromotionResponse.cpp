/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemPromotionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemPromotionResponse::OAIItemPromotionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemPromotionResponse::OAIItemPromotionResponse() {
    this->initializeModel();
}

OAIItemPromotionResponse::~OAIItemPromotionResponse() {}

void OAIItemPromotionResponse::initializeModel() {

    m_apply_discount_to_single_item_only_isSet = false;
    m_apply_discount_to_single_item_only_isValid = false;

    m_budget_isSet = false;
    m_budget_isValid = false;

    m_coupon_configuration_isSet = false;
    m_coupon_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_rules_isSet = false;
    m_discount_rules_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_inventory_criterion_isSet = false;
    m_inventory_criterion_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_promotion_id_isSet = false;
    m_promotion_id_isValid = false;

    m_promotion_image_url_isSet = false;
    m_promotion_image_url_isValid = false;

    m_promotion_status_isSet = false;
    m_promotion_status_isValid = false;

    m_promotion_type_isSet = false;
    m_promotion_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIItemPromotionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemPromotionResponse::fromJsonObject(QJsonObject json) {

    m_apply_discount_to_single_item_only_isValid = ::OpenAPI::fromJsonValue(m_apply_discount_to_single_item_only, json[QString("applyDiscountToSingleItemOnly")]);
    m_apply_discount_to_single_item_only_isSet = !json[QString("applyDiscountToSingleItemOnly")].isNull() && m_apply_discount_to_single_item_only_isValid;

    m_budget_isValid = ::OpenAPI::fromJsonValue(m_budget, json[QString("budget")]);
    m_budget_isSet = !json[QString("budget")].isNull() && m_budget_isValid;

    m_coupon_configuration_isValid = ::OpenAPI::fromJsonValue(m_coupon_configuration, json[QString("couponConfiguration")]);
    m_coupon_configuration_isSet = !json[QString("couponConfiguration")].isNull() && m_coupon_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_rules_isValid = ::OpenAPI::fromJsonValue(m_discount_rules, json[QString("discountRules")]);
    m_discount_rules_isSet = !json[QString("discountRules")].isNull() && m_discount_rules_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_inventory_criterion_isValid = ::OpenAPI::fromJsonValue(m_inventory_criterion, json[QString("inventoryCriterion")]);
    m_inventory_criterion_isSet = !json[QString("inventoryCriterion")].isNull() && m_inventory_criterion_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_promotion_id_isValid = ::OpenAPI::fromJsonValue(m_promotion_id, json[QString("promotionId")]);
    m_promotion_id_isSet = !json[QString("promotionId")].isNull() && m_promotion_id_isValid;

    m_promotion_image_url_isValid = ::OpenAPI::fromJsonValue(m_promotion_image_url, json[QString("promotionImageUrl")]);
    m_promotion_image_url_isSet = !json[QString("promotionImageUrl")].isNull() && m_promotion_image_url_isValid;

    m_promotion_status_isValid = ::OpenAPI::fromJsonValue(m_promotion_status, json[QString("promotionStatus")]);
    m_promotion_status_isSet = !json[QString("promotionStatus")].isNull() && m_promotion_status_isValid;

    m_promotion_type_isValid = ::OpenAPI::fromJsonValue(m_promotion_type, json[QString("promotionType")]);
    m_promotion_type_isSet = !json[QString("promotionType")].isNull() && m_promotion_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIItemPromotionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemPromotionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_discount_to_single_item_only_isSet) {
        obj.insert(QString("applyDiscountToSingleItemOnly"), ::OpenAPI::toJsonValue(m_apply_discount_to_single_item_only));
    }
    if (m_budget.isSet()) {
        obj.insert(QString("budget"), ::OpenAPI::toJsonValue(m_budget));
    }
    if (m_coupon_configuration.isSet()) {
        obj.insert(QString("couponConfiguration"), ::OpenAPI::toJsonValue(m_coupon_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_rules.size() > 0) {
        obj.insert(QString("discountRules"), ::OpenAPI::toJsonValue(m_discount_rules));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_inventory_criterion.isSet()) {
        obj.insert(QString("inventoryCriterion"), ::OpenAPI::toJsonValue(m_inventory_criterion));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_promotion_id_isSet) {
        obj.insert(QString("promotionId"), ::OpenAPI::toJsonValue(m_promotion_id));
    }
    if (m_promotion_image_url_isSet) {
        obj.insert(QString("promotionImageUrl"), ::OpenAPI::toJsonValue(m_promotion_image_url));
    }
    if (m_promotion_status_isSet) {
        obj.insert(QString("promotionStatus"), ::OpenAPI::toJsonValue(m_promotion_status));
    }
    if (m_promotion_type_isSet) {
        obj.insert(QString("promotionType"), ::OpenAPI::toJsonValue(m_promotion_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

bool OAIItemPromotionResponse::isApplyDiscountToSingleItemOnly() const {
    return m_apply_discount_to_single_item_only;
}
void OAIItemPromotionResponse::setApplyDiscountToSingleItemOnly(const bool &apply_discount_to_single_item_only) {
    m_apply_discount_to_single_item_only = apply_discount_to_single_item_only;
    m_apply_discount_to_single_item_only_isSet = true;
}

bool OAIItemPromotionResponse::is_apply_discount_to_single_item_only_Set() const{
    return m_apply_discount_to_single_item_only_isSet;
}

bool OAIItemPromotionResponse::is_apply_discount_to_single_item_only_Valid() const{
    return m_apply_discount_to_single_item_only_isValid;
}

OAIAmount OAIItemPromotionResponse::getBudget() const {
    return m_budget;
}
void OAIItemPromotionResponse::setBudget(const OAIAmount &budget) {
    m_budget = budget;
    m_budget_isSet = true;
}

bool OAIItemPromotionResponse::is_budget_Set() const{
    return m_budget_isSet;
}

bool OAIItemPromotionResponse::is_budget_Valid() const{
    return m_budget_isValid;
}

OAICouponConfiguration OAIItemPromotionResponse::getCouponConfiguration() const {
    return m_coupon_configuration;
}
void OAIItemPromotionResponse::setCouponConfiguration(const OAICouponConfiguration &coupon_configuration) {
    m_coupon_configuration = coupon_configuration;
    m_coupon_configuration_isSet = true;
}

bool OAIItemPromotionResponse::is_coupon_configuration_Set() const{
    return m_coupon_configuration_isSet;
}

bool OAIItemPromotionResponse::is_coupon_configuration_Valid() const{
    return m_coupon_configuration_isValid;
}

QString OAIItemPromotionResponse::getDescription() const {
    return m_description;
}
void OAIItemPromotionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItemPromotionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItemPromotionResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDiscountRule> OAIItemPromotionResponse::getDiscountRules() const {
    return m_discount_rules;
}
void OAIItemPromotionResponse::setDiscountRules(const QList<OAIDiscountRule> &discount_rules) {
    m_discount_rules = discount_rules;
    m_discount_rules_isSet = true;
}

bool OAIItemPromotionResponse::is_discount_rules_Set() const{
    return m_discount_rules_isSet;
}

bool OAIItemPromotionResponse::is_discount_rules_Valid() const{
    return m_discount_rules_isValid;
}

QString OAIItemPromotionResponse::getEndDate() const {
    return m_end_date;
}
void OAIItemPromotionResponse::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIItemPromotionResponse::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIItemPromotionResponse::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIInventoryCriterion OAIItemPromotionResponse::getInventoryCriterion() const {
    return m_inventory_criterion;
}
void OAIItemPromotionResponse::setInventoryCriterion(const OAIInventoryCriterion &inventory_criterion) {
    m_inventory_criterion = inventory_criterion;
    m_inventory_criterion_isSet = true;
}

bool OAIItemPromotionResponse::is_inventory_criterion_Set() const{
    return m_inventory_criterion_isSet;
}

bool OAIItemPromotionResponse::is_inventory_criterion_Valid() const{
    return m_inventory_criterion_isValid;
}

QString OAIItemPromotionResponse::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIItemPromotionResponse::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIItemPromotionResponse::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIItemPromotionResponse::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAIItemPromotionResponse::getName() const {
    return m_name;
}
void OAIItemPromotionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItemPromotionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItemPromotionResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItemPromotionResponse::getPriority() const {
    return m_priority;
}
void OAIItemPromotionResponse::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIItemPromotionResponse::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIItemPromotionResponse::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIItemPromotionResponse::getPromotionId() const {
    return m_promotion_id;
}
void OAIItemPromotionResponse::setPromotionId(const QString &promotion_id) {
    m_promotion_id = promotion_id;
    m_promotion_id_isSet = true;
}

bool OAIItemPromotionResponse::is_promotion_id_Set() const{
    return m_promotion_id_isSet;
}

bool OAIItemPromotionResponse::is_promotion_id_Valid() const{
    return m_promotion_id_isValid;
}

QString OAIItemPromotionResponse::getPromotionImageUrl() const {
    return m_promotion_image_url;
}
void OAIItemPromotionResponse::setPromotionImageUrl(const QString &promotion_image_url) {
    m_promotion_image_url = promotion_image_url;
    m_promotion_image_url_isSet = true;
}

bool OAIItemPromotionResponse::is_promotion_image_url_Set() const{
    return m_promotion_image_url_isSet;
}

bool OAIItemPromotionResponse::is_promotion_image_url_Valid() const{
    return m_promotion_image_url_isValid;
}

QString OAIItemPromotionResponse::getPromotionStatus() const {
    return m_promotion_status;
}
void OAIItemPromotionResponse::setPromotionStatus(const QString &promotion_status) {
    m_promotion_status = promotion_status;
    m_promotion_status_isSet = true;
}

bool OAIItemPromotionResponse::is_promotion_status_Set() const{
    return m_promotion_status_isSet;
}

bool OAIItemPromotionResponse::is_promotion_status_Valid() const{
    return m_promotion_status_isValid;
}

QString OAIItemPromotionResponse::getPromotionType() const {
    return m_promotion_type;
}
void OAIItemPromotionResponse::setPromotionType(const QString &promotion_type) {
    m_promotion_type = promotion_type;
    m_promotion_type_isSet = true;
}

bool OAIItemPromotionResponse::is_promotion_type_Set() const{
    return m_promotion_type_isSet;
}

bool OAIItemPromotionResponse::is_promotion_type_Valid() const{
    return m_promotion_type_isValid;
}

QString OAIItemPromotionResponse::getStartDate() const {
    return m_start_date;
}
void OAIItemPromotionResponse::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIItemPromotionResponse::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIItemPromotionResponse::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIItemPromotionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_discount_to_single_item_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_criterion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemPromotionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
