/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICampaignApi_H
#define OAI_OAICampaignApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICampaign.h"
#include "OAICampaignPagedCollectionResponse.h"
#include "OAICampaigns.h"
#include "OAICloneCampaignRequest.h"
#include "OAICreateCampaignRequest.h"
#include "OAIObject.h"
#include "OAITargetedAdsPagedCollection.h"
#include "OAIUpdateAdrateStrategyRequest.h"
#include "OAIUpdateCampaignBudgetRequest.h"
#include "OAIUpdateCampaignIdentificationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICampaignApi : public QObject {
    Q_OBJECT

public:
    OAICampaignApi(const int timeOut = 0);
    ~OAICampaignApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_clone_campaign_request OAICloneCampaignRequest [required]
    */
    virtual void cloneCampaign(const QString &campaign_id, const OAICloneCampaignRequest &oai_clone_campaign_request);

    /**
    * @param[in]  oai_create_campaign_request OAICreateCampaignRequest [required]
    */
    virtual void createCampaign(const OAICreateCampaignRequest &oai_create_campaign_request);

    /**
    * @param[in]  campaign_id QString [required]
    */
    virtual void deleteCampaign(const QString &campaign_id);

    /**
    * @param[in]  campaign_id QString [required]
    */
    virtual void endCampaign(const QString &campaign_id);

    /**
    * @param[in]  inventory_reference_id QString [optional]
    * @param[in]  inventory_reference_type QString [optional]
    * @param[in]  listing_id QString [optional]
    */
    virtual void findCampaignByAdReference(const ::OpenAPI::OptionalParam<QString> &inventory_reference_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_reference_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  campaign_id QString [required]
    */
    virtual void getCampaign(const QString &campaign_id);

    /**
    * @param[in]  campaign_name QString [required]
    */
    virtual void getCampaignByName(const QString &campaign_name);

    /**
    * @param[in]  campaign_name QString [optional]
    * @param[in]  campaign_status QString [optional]
    * @param[in]  end_date_range QString [optional]
    * @param[in]  funding_strategy QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  start_date_range QString [optional]
    */
    virtual void getCampaigns(const ::OpenAPI::OptionalParam<QString> &campaign_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &campaign_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &funding_strategy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date_range = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  campaign_id QString [required]
    */
    virtual void pauseCampaign(const QString &campaign_id);

    /**
    * @param[in]  campaign_id QString [required]
    */
    virtual void resumeCampaign(const QString &campaign_id);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  category_ids QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void suggestItems(const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &category_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_update_adrate_strategy_request OAIUpdateAdrateStrategyRequest [required]
    */
    virtual void updateAdRateStrategy(const QString &campaign_id, const OAIUpdateAdrateStrategyRequest &oai_update_adrate_strategy_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_update_campaign_budget_request OAIUpdateCampaignBudgetRequest [required]
    */
    virtual void updateCampaignBudget(const QString &campaign_id, const OAIUpdateCampaignBudgetRequest &oai_update_campaign_budget_request);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_update_campaign_identification_request OAIUpdateCampaignIdentificationRequest [required]
    */
    virtual void updateCampaignIdentification(const QString &campaign_id, const OAIUpdateCampaignIdentificationRequest &oai_update_campaign_identification_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloneCampaignCallback(OAIHttpRequestWorker *worker);
    void createCampaignCallback(OAIHttpRequestWorker *worker);
    void deleteCampaignCallback(OAIHttpRequestWorker *worker);
    void endCampaignCallback(OAIHttpRequestWorker *worker);
    void findCampaignByAdReferenceCallback(OAIHttpRequestWorker *worker);
    void getCampaignCallback(OAIHttpRequestWorker *worker);
    void getCampaignByNameCallback(OAIHttpRequestWorker *worker);
    void getCampaignsCallback(OAIHttpRequestWorker *worker);
    void pauseCampaignCallback(OAIHttpRequestWorker *worker);
    void resumeCampaignCallback(OAIHttpRequestWorker *worker);
    void suggestItemsCallback(OAIHttpRequestWorker *worker);
    void updateAdRateStrategyCallback(OAIHttpRequestWorker *worker);
    void updateCampaignBudgetCallback(OAIHttpRequestWorker *worker);
    void updateCampaignIdentificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloneCampaignSignal(OAIObject summary);
    void createCampaignSignal(OAIObject summary);
    void deleteCampaignSignal();
    void endCampaignSignal();
    void findCampaignByAdReferenceSignal(OAICampaigns summary);
    void getCampaignSignal(OAICampaign summary);
    void getCampaignByNameSignal(OAICampaign summary);
    void getCampaignsSignal(OAICampaignPagedCollectionResponse summary);
    void pauseCampaignSignal();
    void resumeCampaignSignal();
    void suggestItemsSignal(OAITargetedAdsPagedCollection summary);
    void updateAdRateStrategySignal();
    void updateCampaignBudgetSignal();
    void updateCampaignIdentificationSignal();


    void cloneCampaignSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createCampaignSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteCampaignSignalFull(OAIHttpRequestWorker *worker);
    void endCampaignSignalFull(OAIHttpRequestWorker *worker);
    void findCampaignByAdReferenceSignalFull(OAIHttpRequestWorker *worker, OAICampaigns summary);
    void getCampaignSignalFull(OAIHttpRequestWorker *worker, OAICampaign summary);
    void getCampaignByNameSignalFull(OAIHttpRequestWorker *worker, OAICampaign summary);
    void getCampaignsSignalFull(OAIHttpRequestWorker *worker, OAICampaignPagedCollectionResponse summary);
    void pauseCampaignSignalFull(OAIHttpRequestWorker *worker);
    void resumeCampaignSignalFull(OAIHttpRequestWorker *worker);
    void suggestItemsSignalFull(OAIHttpRequestWorker *worker, OAITargetedAdsPagedCollection summary);
    void updateAdRateStrategySignalFull(OAIHttpRequestWorker *worker);
    void updateCampaignBudgetSignalFull(OAIHttpRequestWorker *worker);
    void updateCampaignIdentificationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cloneCampaignSignalError() instead")
    void cloneCampaignSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneCampaignSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCampaignSignalError() instead")
    void createCampaignSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignSignalError() instead")
    void deleteCampaignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endCampaignSignalError() instead")
    void endCampaignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void endCampaignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCampaignByAdReferenceSignalError() instead")
    void findCampaignByAdReferenceSignalE(OAICampaigns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCampaignByAdReferenceSignalError(OAICampaigns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSignalError() instead")
    void getCampaignSignalE(OAICampaign summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalError(OAICampaign summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignByNameSignalError() instead")
    void getCampaignByNameSignalE(OAICampaign summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignByNameSignalError(OAICampaign summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalError() instead")
    void getCampaignsSignalE(OAICampaignPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalError(OAICampaignPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pauseCampaignSignalError() instead")
    void pauseCampaignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pauseCampaignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeCampaignSignalError() instead")
    void resumeCampaignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resumeCampaignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestItemsSignalError() instead")
    void suggestItemsSignalE(OAITargetedAdsPagedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestItemsSignalError(OAITargetedAdsPagedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdRateStrategySignalError() instead")
    void updateAdRateStrategySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdRateStrategySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignBudgetSignalError() instead")
    void updateCampaignBudgetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignBudgetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignIdentificationSignalError() instead")
    void updateCampaignIdentificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignIdentificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloneCampaignSignalErrorFull() instead")
    void cloneCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloneCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCampaignSignalErrorFull() instead")
    void createCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignSignalErrorFull() instead")
    void deleteCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use endCampaignSignalErrorFull() instead")
    void endCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCampaignByAdReferenceSignalErrorFull() instead")
    void findCampaignByAdReferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCampaignByAdReferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSignalErrorFull() instead")
    void getCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignByNameSignalErrorFull() instead")
    void getCampaignByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalErrorFull() instead")
    void getCampaignsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pauseCampaignSignalErrorFull() instead")
    void pauseCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pauseCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeCampaignSignalErrorFull() instead")
    void resumeCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestItemsSignalErrorFull() instead")
    void suggestItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdRateStrategySignalErrorFull() instead")
    void updateAdRateStrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdRateStrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignBudgetSignalErrorFull() instead")
    void updateCampaignBudgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignBudgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignIdentificationSignalErrorFull() instead")
    void updateCampaignIdentificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignIdentificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
