/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdGroupApi_H
#define OAI_OAIAdGroupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdGroup.h"
#include "OAIAdGroupPagedCollectionResponse.h"
#include "OAICreateAdGroupRequest.h"
#include "OAIObject.h"
#include "OAITargetedBidRequest.h"
#include "OAITargetedBidsPagedCollection.h"
#include "OAITargetedKeywordRequest.h"
#include "OAITargetedKeywordsPagedCollection.h"
#include "OAIUpdateAdGroupRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdGroupApi : public QObject {
    Q_OBJECT

public:
    OAIAdGroupApi(const int timeOut = 0);
    ~OAIAdGroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_create_ad_group_request OAICreateAdGroupRequest [required]
    */
    virtual void createAdGroup(const QString &campaign_id, const OAICreateAdGroupRequest &oai_create_ad_group_request);

    /**
    * @param[in]  ad_group_id QString [required]
    * @param[in]  campaign_id QString [required]
    */
    virtual void getAdGroup(const QString &ad_group_id, const QString &campaign_id);

    /**
    * @param[in]  campaign_id QString [required]
    * @param[in]  ad_group_status QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getAdGroups(const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &ad_group_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_group_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_targeted_bid_request OAITargetedBidRequest [required]
    */
    virtual void suggestBids(const QString &ad_group_id, const QString &campaign_id, const OAITargetedBidRequest &oai_targeted_bid_request);

    /**
    * @param[in]  ad_group_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_targeted_keyword_request OAITargetedKeywordRequest [optional]
    */
    virtual void suggestKeywords(const QString &ad_group_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAITargetedKeywordRequest> &oai_targeted_keyword_request = ::OpenAPI::OptionalParam<OAITargetedKeywordRequest>());

    /**
    * @param[in]  ad_group_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_update_ad_group_request OAIUpdateAdGroupRequest [required]
    */
    virtual void updateAdGroup(const QString &ad_group_id, const QString &campaign_id, const OAIUpdateAdGroupRequest &oai_update_ad_group_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAdGroupCallback(OAIHttpRequestWorker *worker);
    void getAdGroupCallback(OAIHttpRequestWorker *worker);
    void getAdGroupsCallback(OAIHttpRequestWorker *worker);
    void suggestBidsCallback(OAIHttpRequestWorker *worker);
    void suggestKeywordsCallback(OAIHttpRequestWorker *worker);
    void updateAdGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAdGroupSignal(OAIObject summary);
    void getAdGroupSignal(OAIAdGroup summary);
    void getAdGroupsSignal(OAIAdGroupPagedCollectionResponse summary);
    void suggestBidsSignal(OAITargetedBidsPagedCollection summary);
    void suggestKeywordsSignal(OAITargetedKeywordsPagedCollection summary);
    void updateAdGroupSignal();


    void createAdGroupSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAdGroupSignalFull(OAIHttpRequestWorker *worker, OAIAdGroup summary);
    void getAdGroupsSignalFull(OAIHttpRequestWorker *worker, OAIAdGroupPagedCollectionResponse summary);
    void suggestBidsSignalFull(OAIHttpRequestWorker *worker, OAITargetedBidsPagedCollection summary);
    void suggestKeywordsSignalFull(OAIHttpRequestWorker *worker, OAITargetedKeywordsPagedCollection summary);
    void updateAdGroupSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createAdGroupSignalError() instead")
    void createAdGroupSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdGroupSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdGroupSignalError() instead")
    void getAdGroupSignalE(OAIAdGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdGroupSignalError(OAIAdGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdGroupsSignalError() instead")
    void getAdGroupsSignalE(OAIAdGroupPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdGroupsSignalError(OAIAdGroupPagedCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestBidsSignalError() instead")
    void suggestBidsSignalE(OAITargetedBidsPagedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestBidsSignalError(OAITargetedBidsPagedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestKeywordsSignalError() instead")
    void suggestKeywordsSignalE(OAITargetedKeywordsPagedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestKeywordsSignalError(OAITargetedKeywordsPagedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdGroupSignalError() instead")
    void updateAdGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAdGroupSignalErrorFull() instead")
    void createAdGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdGroupSignalErrorFull() instead")
    void getAdGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdGroupsSignalErrorFull() instead")
    void getAdGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestBidsSignalErrorFull() instead")
    void suggestBidsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestBidsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestKeywordsSignalErrorFull() instead")
    void suggestKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdGroupSignalErrorFull() instead")
    void updateAdGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
