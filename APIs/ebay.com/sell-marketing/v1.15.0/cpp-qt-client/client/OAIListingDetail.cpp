/**
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingDetail::OAIListingDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingDetail::OAIListingDetail() {
    this->initializeModel();
}

OAIListingDetail::~OAIListingDetail() {}

void OAIListingDetail::initializeModel() {

    m_current_price_isSet = false;
    m_current_price_isValid = false;

    m_free_shipping_isSet = false;
    m_free_shipping_isValid = false;

    m_inventory_reference_id_isSet = false;
    m_inventory_reference_id_isValid = false;

    m_inventory_reference_type_isSet = false;
    m_inventory_reference_type_isValid = false;

    m_listing_category_id_isSet = false;
    m_listing_category_id_isValid = false;

    m_listing_condition_isSet = false;
    m_listing_condition_isValid = false;

    m_listing_condition_id_isSet = false;
    m_listing_condition_id_isValid = false;

    m_listing_id_isSet = false;
    m_listing_id_isValid = false;

    m_listing_promotion_statuses_isSet = false;
    m_listing_promotion_statuses_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_store_category_id_isSet = false;
    m_store_category_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIListingDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingDetail::fromJsonObject(QJsonObject json) {

    m_current_price_isValid = ::OpenAPI::fromJsonValue(m_current_price, json[QString("currentPrice")]);
    m_current_price_isSet = !json[QString("currentPrice")].isNull() && m_current_price_isValid;

    m_free_shipping_isValid = ::OpenAPI::fromJsonValue(m_free_shipping, json[QString("freeShipping")]);
    m_free_shipping_isSet = !json[QString("freeShipping")].isNull() && m_free_shipping_isValid;

    m_inventory_reference_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_reference_id, json[QString("inventoryReferenceId")]);
    m_inventory_reference_id_isSet = !json[QString("inventoryReferenceId")].isNull() && m_inventory_reference_id_isValid;

    m_inventory_reference_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_reference_type, json[QString("inventoryReferenceType")]);
    m_inventory_reference_type_isSet = !json[QString("inventoryReferenceType")].isNull() && m_inventory_reference_type_isValid;

    m_listing_category_id_isValid = ::OpenAPI::fromJsonValue(m_listing_category_id, json[QString("listingCategoryId")]);
    m_listing_category_id_isSet = !json[QString("listingCategoryId")].isNull() && m_listing_category_id_isValid;

    m_listing_condition_isValid = ::OpenAPI::fromJsonValue(m_listing_condition, json[QString("listingCondition")]);
    m_listing_condition_isSet = !json[QString("listingCondition")].isNull() && m_listing_condition_isValid;

    m_listing_condition_id_isValid = ::OpenAPI::fromJsonValue(m_listing_condition_id, json[QString("listingConditionId")]);
    m_listing_condition_id_isSet = !json[QString("listingConditionId")].isNull() && m_listing_condition_id_isValid;

    m_listing_id_isValid = ::OpenAPI::fromJsonValue(m_listing_id, json[QString("listingId")]);
    m_listing_id_isSet = !json[QString("listingId")].isNull() && m_listing_id_isValid;

    m_listing_promotion_statuses_isValid = ::OpenAPI::fromJsonValue(m_listing_promotion_statuses, json[QString("listingPromotionStatuses")]);
    m_listing_promotion_statuses_isSet = !json[QString("listingPromotionStatuses")].isNull() && m_listing_promotion_statuses_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_store_category_id_isValid = ::OpenAPI::fromJsonValue(m_store_category_id, json[QString("storeCategoryId")]);
    m_store_category_id_isSet = !json[QString("storeCategoryId")].isNull() && m_store_category_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIListingDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_current_price.isSet()) {
        obj.insert(QString("currentPrice"), ::OpenAPI::toJsonValue(m_current_price));
    }
    if (m_free_shipping_isSet) {
        obj.insert(QString("freeShipping"), ::OpenAPI::toJsonValue(m_free_shipping));
    }
    if (m_inventory_reference_id_isSet) {
        obj.insert(QString("inventoryReferenceId"), ::OpenAPI::toJsonValue(m_inventory_reference_id));
    }
    if (m_inventory_reference_type_isSet) {
        obj.insert(QString("inventoryReferenceType"), ::OpenAPI::toJsonValue(m_inventory_reference_type));
    }
    if (m_listing_category_id_isSet) {
        obj.insert(QString("listingCategoryId"), ::OpenAPI::toJsonValue(m_listing_category_id));
    }
    if (m_listing_condition_isSet) {
        obj.insert(QString("listingCondition"), ::OpenAPI::toJsonValue(m_listing_condition));
    }
    if (m_listing_condition_id_isSet) {
        obj.insert(QString("listingConditionId"), ::OpenAPI::toJsonValue(m_listing_condition_id));
    }
    if (m_listing_id_isSet) {
        obj.insert(QString("listingId"), ::OpenAPI::toJsonValue(m_listing_id));
    }
    if (m_listing_promotion_statuses.size() > 0) {
        obj.insert(QString("listingPromotionStatuses"), ::OpenAPI::toJsonValue(m_listing_promotion_statuses));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_store_category_id_isSet) {
        obj.insert(QString("storeCategoryId"), ::OpenAPI::toJsonValue(m_store_category_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIAmount OAIListingDetail::getCurrentPrice() const {
    return m_current_price;
}
void OAIListingDetail::setCurrentPrice(const OAIAmount &current_price) {
    m_current_price = current_price;
    m_current_price_isSet = true;
}

bool OAIListingDetail::is_current_price_Set() const{
    return m_current_price_isSet;
}

bool OAIListingDetail::is_current_price_Valid() const{
    return m_current_price_isValid;
}

bool OAIListingDetail::isFreeShipping() const {
    return m_free_shipping;
}
void OAIListingDetail::setFreeShipping(const bool &free_shipping) {
    m_free_shipping = free_shipping;
    m_free_shipping_isSet = true;
}

bool OAIListingDetail::is_free_shipping_Set() const{
    return m_free_shipping_isSet;
}

bool OAIListingDetail::is_free_shipping_Valid() const{
    return m_free_shipping_isValid;
}

QString OAIListingDetail::getInventoryReferenceId() const {
    return m_inventory_reference_id;
}
void OAIListingDetail::setInventoryReferenceId(const QString &inventory_reference_id) {
    m_inventory_reference_id = inventory_reference_id;
    m_inventory_reference_id_isSet = true;
}

bool OAIListingDetail::is_inventory_reference_id_Set() const{
    return m_inventory_reference_id_isSet;
}

bool OAIListingDetail::is_inventory_reference_id_Valid() const{
    return m_inventory_reference_id_isValid;
}

QString OAIListingDetail::getInventoryReferenceType() const {
    return m_inventory_reference_type;
}
void OAIListingDetail::setInventoryReferenceType(const QString &inventory_reference_type) {
    m_inventory_reference_type = inventory_reference_type;
    m_inventory_reference_type_isSet = true;
}

bool OAIListingDetail::is_inventory_reference_type_Set() const{
    return m_inventory_reference_type_isSet;
}

bool OAIListingDetail::is_inventory_reference_type_Valid() const{
    return m_inventory_reference_type_isValid;
}

QString OAIListingDetail::getListingCategoryId() const {
    return m_listing_category_id;
}
void OAIListingDetail::setListingCategoryId(const QString &listing_category_id) {
    m_listing_category_id = listing_category_id;
    m_listing_category_id_isSet = true;
}

bool OAIListingDetail::is_listing_category_id_Set() const{
    return m_listing_category_id_isSet;
}

bool OAIListingDetail::is_listing_category_id_Valid() const{
    return m_listing_category_id_isValid;
}

QString OAIListingDetail::getListingCondition() const {
    return m_listing_condition;
}
void OAIListingDetail::setListingCondition(const QString &listing_condition) {
    m_listing_condition = listing_condition;
    m_listing_condition_isSet = true;
}

bool OAIListingDetail::is_listing_condition_Set() const{
    return m_listing_condition_isSet;
}

bool OAIListingDetail::is_listing_condition_Valid() const{
    return m_listing_condition_isValid;
}

QString OAIListingDetail::getListingConditionId() const {
    return m_listing_condition_id;
}
void OAIListingDetail::setListingConditionId(const QString &listing_condition_id) {
    m_listing_condition_id = listing_condition_id;
    m_listing_condition_id_isSet = true;
}

bool OAIListingDetail::is_listing_condition_id_Set() const{
    return m_listing_condition_id_isSet;
}

bool OAIListingDetail::is_listing_condition_id_Valid() const{
    return m_listing_condition_id_isValid;
}

QString OAIListingDetail::getListingId() const {
    return m_listing_id;
}
void OAIListingDetail::setListingId(const QString &listing_id) {
    m_listing_id = listing_id;
    m_listing_id_isSet = true;
}

bool OAIListingDetail::is_listing_id_Set() const{
    return m_listing_id_isSet;
}

bool OAIListingDetail::is_listing_id_Valid() const{
    return m_listing_id_isValid;
}

QList<OAIItemMarkdownStatus> OAIListingDetail::getListingPromotionStatuses() const {
    return m_listing_promotion_statuses;
}
void OAIListingDetail::setListingPromotionStatuses(const QList<OAIItemMarkdownStatus> &listing_promotion_statuses) {
    m_listing_promotion_statuses = listing_promotion_statuses;
    m_listing_promotion_statuses_isSet = true;
}

bool OAIListingDetail::is_listing_promotion_statuses_Set() const{
    return m_listing_promotion_statuses_isSet;
}

bool OAIListingDetail::is_listing_promotion_statuses_Valid() const{
    return m_listing_promotion_statuses_isValid;
}

qint32 OAIListingDetail::getQuantity() const {
    return m_quantity;
}
void OAIListingDetail::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIListingDetail::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIListingDetail::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIListingDetail::getStoreCategoryId() const {
    return m_store_category_id;
}
void OAIListingDetail::setStoreCategoryId(const QString &store_category_id) {
    m_store_category_id = store_category_id;
    m_store_category_id_isSet = true;
}

bool OAIListingDetail::is_store_category_id_Set() const{
    return m_store_category_id_isSet;
}

bool OAIListingDetail::is_store_category_id_Valid() const{
    return m_store_category_id_isValid;
}

QString OAIListingDetail::getTitle() const {
    return m_title;
}
void OAIListingDetail::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIListingDetail::is_title_Set() const{
    return m_title_isSet;
}

bool OAIListingDetail::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIListingDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_reference_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_condition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_promotion_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
