/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This container defines the criteria for when the discounts of a promotion trigger, such as the minimum quantity the buyer must purchase before the promotion kicks in. The promotional discount is applied each time the criteria defined by this container is met.  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When configuring the rules that govern when the discounts are applied, populate just one of the following fields in the &lt;b&gt;discountSpecification&lt;/b&gt; container:&lt;/p&gt;  &lt;ul&gt;&lt;li&gt;&lt;b&gt;minAmount&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;minQuantity&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;forEachQuantity&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;forEachAmount&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Tip:&lt;/b&gt; Refer to &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pm-specifying-discounts.html\&quot;&gt;Configuring discounts for threshold promotions&lt;/a&gt; for information and examples on how to combine &lt;b&gt;discountBenefit&lt;/b&gt; and &lt;b&gt;discountSpecification&lt;/b&gt; to create different types of promotions.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscountSpecification {
  public static final String SERIALIZED_NAME_FOR_EACH_AMOUNT = "forEachAmount";
  @SerializedName(SERIALIZED_NAME_FOR_EACH_AMOUNT)
  private Amount forEachAmount;

  public static final String SERIALIZED_NAME_FOR_EACH_QUANTITY = "forEachQuantity";
  @SerializedName(SERIALIZED_NAME_FOR_EACH_QUANTITY)
  private Integer forEachQuantity;

  public static final String SERIALIZED_NAME_MIN_AMOUNT = "minAmount";
  @SerializedName(SERIALIZED_NAME_MIN_AMOUNT)
  private Amount minAmount;

  public static final String SERIALIZED_NAME_MIN_QUANTITY = "minQuantity";
  @SerializedName(SERIALIZED_NAME_MIN_QUANTITY)
  private Integer minQuantity;

  public static final String SERIALIZED_NAME_NUMBER_OF_DISCOUNTED_ITEMS = "numberOfDiscountedItems";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DISCOUNTED_ITEMS)
  private Integer numberOfDiscountedItems;

  public DiscountSpecification() {
  }

  public DiscountSpecification forEachAmount(Amount forEachAmount) {
    this.forEachAmount = forEachAmount;
    return this;
  }

  /**
   * Get forEachAmount
   * @return forEachAmount
   */
  @javax.annotation.Nullable
  public Amount getForEachAmount() {
    return forEachAmount;
  }

  public void setForEachAmount(Amount forEachAmount) {
    this.forEachAmount = forEachAmount;
  }


  public DiscountSpecification forEachQuantity(Integer forEachQuantity) {
    this.forEachQuantity = forEachQuantity;
    return this;
  }

  /**
   * The number of items that must be purchased in order to qualify for the discount.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Valid values:&lt;/b&gt; &lt;br&gt;&lt;code&gt; &amp;nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, &lt;br&gt; &amp;nbsp; 12, 13, 14, 15, 16, 17, 18, 19 &lt;br&gt; &amp;nbsp; 20, 25, 50, 75, 100&lt;/code&gt;
   * @return forEachQuantity
   */
  @javax.annotation.Nullable
  public Integer getForEachQuantity() {
    return forEachQuantity;
  }

  public void setForEachQuantity(Integer forEachQuantity) {
    this.forEachQuantity = forEachQuantity;
  }


  public DiscountSpecification minAmount(Amount minAmount) {
    this.minAmount = minAmount;
    return this;
  }

  /**
   * Get minAmount
   * @return minAmount
   */
  @javax.annotation.Nullable
  public Amount getMinAmount() {
    return minAmount;
  }

  public void setMinAmount(Amount minAmount) {
    this.minAmount = minAmount;
  }


  public DiscountSpecification minQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
    return this;
  }

  /**
   * The minimum quantity of promoted items that needs to be bought in order to qualify for the promotion&#39;s discount.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Valid values:&lt;/b&gt; &lt;br&gt;&lt;code&gt; &amp;nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, &lt;br&gt; &amp;nbsp; 12, 13, 14, 15, 16, 17, 18, 19 &lt;br&gt; &amp;nbsp; 20, 25, 50, 75, 100&lt;/code&gt;
   * @return minQuantity
   */
  @javax.annotation.Nullable
  public Integer getMinQuantity() {
    return minQuantity;
  }

  public void setMinQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
  }


  public DiscountSpecification numberOfDiscountedItems(Integer numberOfDiscountedItems) {
    this.numberOfDiscountedItems = numberOfDiscountedItems;
    return this;
  }

  /**
   * Use this field to configure \&quot;Buy One Get One\&quot; (or &lt;b&gt;BOGO&lt;/b&gt;) promotions.  &lt;br&gt;&lt;br&gt;You must couple this field with &lt;b&gt;forEachQuantity&lt;/b&gt; and an &lt;b&gt;amountOffItem&lt;/b&gt; or &lt;b&gt;percentOffItem&lt;/b&gt; field to configure your BOGO promotion. This field is not valid with order-based promotions. &lt;br&gt;&lt;br&gt;The value of this field represents the number of items to be discounted when other promotion criteria is met. For example, when the buyer adds the number of items identified by the &lt;b&gt;forEachQuantity&lt;/b&gt; value to their cart, they are then eligible to receive the stated discount from an additional number of like items (the number of which is identified by this field) when they add those items to their cart. To receive the discount, the buyer must purchase the number of items indicated by  &lt;b&gt;forEachQuantity&lt;/b&gt; &lt;i&gt;plus&lt;/i&gt; the number indicated by this field.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Valid values:&lt;/b&gt; &lt;br&gt;&lt;code&gt; &amp;nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10&lt;/code&gt;
   * @return numberOfDiscountedItems
   */
  @javax.annotation.Nullable
  public Integer getNumberOfDiscountedItems() {
    return numberOfDiscountedItems;
  }

  public void setNumberOfDiscountedItems(Integer numberOfDiscountedItems) {
    this.numberOfDiscountedItems = numberOfDiscountedItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscountSpecification discountSpecification = (DiscountSpecification) o;
    return Objects.equals(this.forEachAmount, discountSpecification.forEachAmount) &&
        Objects.equals(this.forEachQuantity, discountSpecification.forEachQuantity) &&
        Objects.equals(this.minAmount, discountSpecification.minAmount) &&
        Objects.equals(this.minQuantity, discountSpecification.minQuantity) &&
        Objects.equals(this.numberOfDiscountedItems, discountSpecification.numberOfDiscountedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forEachAmount, forEachQuantity, minAmount, minQuantity, numberOfDiscountedItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscountSpecification {\n");
    sb.append("    forEachAmount: ").append(toIndentedString(forEachAmount)).append("\n");
    sb.append("    forEachQuantity: ").append(toIndentedString(forEachQuantity)).append("\n");
    sb.append("    minAmount: ").append(toIndentedString(minAmount)).append("\n");
    sb.append("    minQuantity: ").append(toIndentedString(minQuantity)).append("\n");
    sb.append("    numberOfDiscountedItems: ").append(toIndentedString(numberOfDiscountedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forEachAmount");
    openapiFields.add("forEachQuantity");
    openapiFields.add("minAmount");
    openapiFields.add("minQuantity");
    openapiFields.add("numberOfDiscountedItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscountSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscountSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscountSpecification is not found in the empty JSON string", DiscountSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscountSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscountSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `forEachAmount`
      if (jsonObj.get("forEachAmount") != null && !jsonObj.get("forEachAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("forEachAmount"));
      }
      // validate the optional field `minAmount`
      if (jsonObj.get("minAmount") != null && !jsonObj.get("minAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("minAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscountSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscountSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscountSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscountSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscountSpecification>() {
           @Override
           public void write(JsonWriter out, DiscountSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscountSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscountSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscountSpecification
   * @throws IOException if the JSON string is invalid with respect to DiscountSpecification
   */
  public static DiscountSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscountSpecification.class);
  }

  /**
   * Convert an instance of DiscountSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

