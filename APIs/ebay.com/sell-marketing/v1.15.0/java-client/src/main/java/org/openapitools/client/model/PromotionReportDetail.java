/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields in a promotion-level report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromotionReportDetail {
  public static final String SERIALIZED_NAME_AVERAGE_ITEM_DISCOUNT = "averageItemDiscount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ITEM_DISCOUNT)
  private Amount averageItemDiscount;

  public static final String SERIALIZED_NAME_AVERAGE_ITEM_REVENUE = "averageItemRevenue";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ITEM_REVENUE)
  private Amount averageItemRevenue;

  public static final String SERIALIZED_NAME_AVERAGE_ORDER_DISCOUNT = "averageOrderDiscount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ORDER_DISCOUNT)
  private Amount averageOrderDiscount;

  public static final String SERIALIZED_NAME_AVERAGE_ORDER_REVENUE = "averageOrderRevenue";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ORDER_REVENUE)
  private Amount averageOrderRevenue;

  public static final String SERIALIZED_NAME_AVERAGE_ORDER_SIZE = "averageOrderSize";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ORDER_SIZE)
  private String averageOrderSize;

  public static final String SERIALIZED_NAME_BASE_SALE = "baseSale";
  @SerializedName(SERIALIZED_NAME_BASE_SALE)
  private Amount baseSale;

  public static final String SERIALIZED_NAME_ITEMS_SOLD_QUANTITY = "itemsSoldQuantity";
  @SerializedName(SERIALIZED_NAME_ITEMS_SOLD_QUANTITY)
  private Integer itemsSoldQuantity;

  public static final String SERIALIZED_NAME_NUMBER_OF_ORDERS_SOLD = "numberOfOrdersSold";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ORDERS_SOLD)
  private Integer numberOfOrdersSold;

  public static final String SERIALIZED_NAME_PERCENTAGE_SALES_LIFT = "percentageSalesLift";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_SALES_LIFT)
  private String percentageSalesLift;

  public static final String SERIALIZED_NAME_PROMOTION_HREF = "promotionHref";
  @SerializedName(SERIALIZED_NAME_PROMOTION_HREF)
  private String promotionHref;

  public static final String SERIALIZED_NAME_PROMOTION_ID = "promotionId";
  @SerializedName(SERIALIZED_NAME_PROMOTION_ID)
  private String promotionId;

  public static final String SERIALIZED_NAME_PROMOTION_REPORT_ID = "promotionReportId";
  @SerializedName(SERIALIZED_NAME_PROMOTION_REPORT_ID)
  private String promotionReportId;

  public static final String SERIALIZED_NAME_PROMOTION_SALE = "promotionSale";
  @SerializedName(SERIALIZED_NAME_PROMOTION_SALE)
  private Amount promotionSale;

  public static final String SERIALIZED_NAME_PROMOTION_TYPE = "promotionType";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TYPE)
  private String promotionType;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT = "totalDiscount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT)
  private Amount totalDiscount;

  public static final String SERIALIZED_NAME_TOTAL_SALE = "totalSale";
  @SerializedName(SERIALIZED_NAME_TOTAL_SALE)
  private Amount totalSale;

  public PromotionReportDetail() {
  }

  public PromotionReportDetail averageItemDiscount(Amount averageItemDiscount) {
    this.averageItemDiscount = averageItemDiscount;
    return this;
  }

  /**
   * Get averageItemDiscount
   * @return averageItemDiscount
   */
  @javax.annotation.Nullable
  public Amount getAverageItemDiscount() {
    return averageItemDiscount;
  }

  public void setAverageItemDiscount(Amount averageItemDiscount) {
    this.averageItemDiscount = averageItemDiscount;
  }


  public PromotionReportDetail averageItemRevenue(Amount averageItemRevenue) {
    this.averageItemRevenue = averageItemRevenue;
    return this;
  }

  /**
   * Get averageItemRevenue
   * @return averageItemRevenue
   */
  @javax.annotation.Nullable
  public Amount getAverageItemRevenue() {
    return averageItemRevenue;
  }

  public void setAverageItemRevenue(Amount averageItemRevenue) {
    this.averageItemRevenue = averageItemRevenue;
  }


  public PromotionReportDetail averageOrderDiscount(Amount averageOrderDiscount) {
    this.averageOrderDiscount = averageOrderDiscount;
    return this;
  }

  /**
   * Get averageOrderDiscount
   * @return averageOrderDiscount
   */
  @javax.annotation.Nullable
  public Amount getAverageOrderDiscount() {
    return averageOrderDiscount;
  }

  public void setAverageOrderDiscount(Amount averageOrderDiscount) {
    this.averageOrderDiscount = averageOrderDiscount;
  }


  public PromotionReportDetail averageOrderRevenue(Amount averageOrderRevenue) {
    this.averageOrderRevenue = averageOrderRevenue;
    return this;
  }

  /**
   * Get averageOrderRevenue
   * @return averageOrderRevenue
   */
  @javax.annotation.Nullable
  public Amount getAverageOrderRevenue() {
    return averageOrderRevenue;
  }

  public void setAverageOrderRevenue(Amount averageOrderRevenue) {
    this.averageOrderRevenue = averageOrderRevenue;
  }


  public PromotionReportDetail averageOrderSize(String averageOrderSize) {
    this.averageOrderSize = averageOrderSize;
    return this;
  }

  /**
   * The &lt;i&gt;average order size&lt;/i&gt; is the average number of items that each order contained in a promotion. This value is calculated as follows:  &lt;br&gt;&lt;br&gt;&lt;b&gt;itemsSoldQuantity&lt;/b&gt; / &lt;b&gt;numberOfOrdersSold&lt;/b&gt; &#x3D; &lt;b&gt;averageOrderSize&lt;/b&gt; 
   * @return averageOrderSize
   */
  @javax.annotation.Nullable
  public String getAverageOrderSize() {
    return averageOrderSize;
  }

  public void setAverageOrderSize(String averageOrderSize) {
    this.averageOrderSize = averageOrderSize;
  }


  public PromotionReportDetail baseSale(Amount baseSale) {
    this.baseSale = baseSale;
    return this;
  }

  /**
   * Get baseSale
   * @return baseSale
   */
  @javax.annotation.Nullable
  public Amount getBaseSale() {
    return baseSale;
  }

  public void setBaseSale(Amount baseSale) {
    this.baseSale = baseSale;
  }


  public PromotionReportDetail itemsSoldQuantity(Integer itemsSoldQuantity) {
    this.itemsSoldQuantity = itemsSoldQuantity;
    return this;
  }

  /**
   * This is the quantity of items purchased in a threshold promotion where the threshold &lt;i&gt;has been met&lt;/i&gt; and the discount was applied. &lt;br&gt;&lt;br&gt;For example, suppose you&#39;re running a \&quot;Buy 1, get 1 at 50%\&quot; promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (&lt;b&gt;itemsSoldQuantity&lt;/b&gt;) would be 2 and you number of orders sold (&lt;b&gt;numberOfOrdersSold&lt;/b&gt;) would be 1.
   * @return itemsSoldQuantity
   */
  @javax.annotation.Nullable
  public Integer getItemsSoldQuantity() {
    return itemsSoldQuantity;
  }

  public void setItemsSoldQuantity(Integer itemsSoldQuantity) {
    this.itemsSoldQuantity = itemsSoldQuantity;
  }


  public PromotionReportDetail numberOfOrdersSold(Integer numberOfOrdersSold) {
    this.numberOfOrdersSold = numberOfOrdersSold;
    return this;
  }

  /**
   * This is the number of orders sold in a threshold promotion where the threshold &lt;i&gt;has been met&lt;/i&gt; and the discount was applied. &lt;br&gt;&lt;br&gt;For example, suppose you&#39;re running a \&quot;Buy 1, get 1 at 50%\&quot; promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your &lt;b&gt;numberOfOrdersSold&lt;/b&gt; would be 1 and your &lt;b&gt;itemsSoldQuantity&lt;/b&gt; would be 2.
   * @return numberOfOrdersSold
   */
  @javax.annotation.Nullable
  public Integer getNumberOfOrdersSold() {
    return numberOfOrdersSold;
  }

  public void setNumberOfOrdersSold(Integer numberOfOrdersSold) {
    this.numberOfOrdersSold = numberOfOrdersSold;
  }


  public PromotionReportDetail percentageSalesLift(String percentageSalesLift) {
    this.percentageSalesLift = percentageSalesLift;
    return this;
  }

  /**
   * The &lt;i&gt;percentage sales lift&lt;/i&gt; is the total dollar amount gained due to promotions. This value is calculated as follows:  &lt;br&gt;&lt;br&gt; &lt;b&gt;promotionSale&lt;/b&gt; / &lt;b&gt;totalSale&lt;/b&gt; &#x3D;  &lt;b&gt;percentageSalesLift&lt;/b&gt; 
   * @return percentageSalesLift
   */
  @javax.annotation.Nullable
  public String getPercentageSalesLift() {
    return percentageSalesLift;
  }

  public void setPercentageSalesLift(String percentageSalesLift) {
    this.percentageSalesLift = percentageSalesLift;
  }


  public PromotionReportDetail promotionHref(String promotionHref) {
    this.promotionHref = promotionHref;
    return this;
  }

  /**
   * The URI of the promotion report.
   * @return promotionHref
   */
  @javax.annotation.Nullable
  public String getPromotionHref() {
    return promotionHref;
  }

  public void setPromotionHref(String promotionHref) {
    this.promotionHref = promotionHref;
  }


  public PromotionReportDetail promotionId(String promotionId) {
    this.promotionId = promotionId;
    return this;
  }

  /**
   * A unique eBay-assigned ID for the promotion that&#39;s generated when the promotion is created.
   * @return promotionId
   */
  @javax.annotation.Nullable
  public String getPromotionId() {
    return promotionId;
  }

  public void setPromotionId(String promotionId) {
    this.promotionId = promotionId;
  }


  public PromotionReportDetail promotionReportId(String promotionReportId) {
    this.promotionReportId = promotionReportId;
    return this;
  }

  /**
   * The unique eBay-assigned ID of the promotion report that is generated when the report is created.
   * @return promotionReportId
   */
  @javax.annotation.Nullable
  public String getPromotionReportId() {
    return promotionReportId;
  }

  public void setPromotionReportId(String promotionReportId) {
    this.promotionReportId = promotionReportId;
  }


  public PromotionReportDetail promotionSale(Amount promotionSale) {
    this.promotionSale = promotionSale;
    return this;
  }

  /**
   * Get promotionSale
   * @return promotionSale
   */
  @javax.annotation.Nullable
  public Amount getPromotionSale() {
    return promotionSale;
  }

  public void setPromotionSale(Amount promotionSale) {
    this.promotionSale = promotionSale;
  }


  public PromotionReportDetail promotionType(String promotionType) {
    this.promotionType = promotionType;
    return this;
  }

  /**
   * Indicates the type of the promotion, either &lt;code&gt;CODED_COUPON&lt;/code&gt;, &lt;code&gt;MARKDOWN_SALE&lt;/code&gt;, &lt;code&gt;ORDER_DISCOUNT&lt;/code&gt;, or &lt;code&gt;VOLUME_DISCOUNT&lt;/code&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return promotionType
   */
  @javax.annotation.Nullable
  public String getPromotionType() {
    return promotionType;
  }

  public void setPromotionType(String promotionType) {
    this.promotionType = promotionType;
  }


  public PromotionReportDetail totalDiscount(Amount totalDiscount) {
    this.totalDiscount = totalDiscount;
    return this;
  }

  /**
   * Get totalDiscount
   * @return totalDiscount
   */
  @javax.annotation.Nullable
  public Amount getTotalDiscount() {
    return totalDiscount;
  }

  public void setTotalDiscount(Amount totalDiscount) {
    this.totalDiscount = totalDiscount;
  }


  public PromotionReportDetail totalSale(Amount totalSale) {
    this.totalSale = totalSale;
    return this;
  }

  /**
   * Get totalSale
   * @return totalSale
   */
  @javax.annotation.Nullable
  public Amount getTotalSale() {
    return totalSale;
  }

  public void setTotalSale(Amount totalSale) {
    this.totalSale = totalSale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromotionReportDetail promotionReportDetail = (PromotionReportDetail) o;
    return Objects.equals(this.averageItemDiscount, promotionReportDetail.averageItemDiscount) &&
        Objects.equals(this.averageItemRevenue, promotionReportDetail.averageItemRevenue) &&
        Objects.equals(this.averageOrderDiscount, promotionReportDetail.averageOrderDiscount) &&
        Objects.equals(this.averageOrderRevenue, promotionReportDetail.averageOrderRevenue) &&
        Objects.equals(this.averageOrderSize, promotionReportDetail.averageOrderSize) &&
        Objects.equals(this.baseSale, promotionReportDetail.baseSale) &&
        Objects.equals(this.itemsSoldQuantity, promotionReportDetail.itemsSoldQuantity) &&
        Objects.equals(this.numberOfOrdersSold, promotionReportDetail.numberOfOrdersSold) &&
        Objects.equals(this.percentageSalesLift, promotionReportDetail.percentageSalesLift) &&
        Objects.equals(this.promotionHref, promotionReportDetail.promotionHref) &&
        Objects.equals(this.promotionId, promotionReportDetail.promotionId) &&
        Objects.equals(this.promotionReportId, promotionReportDetail.promotionReportId) &&
        Objects.equals(this.promotionSale, promotionReportDetail.promotionSale) &&
        Objects.equals(this.promotionType, promotionReportDetail.promotionType) &&
        Objects.equals(this.totalDiscount, promotionReportDetail.totalDiscount) &&
        Objects.equals(this.totalSale, promotionReportDetail.totalSale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageItemDiscount, averageItemRevenue, averageOrderDiscount, averageOrderRevenue, averageOrderSize, baseSale, itemsSoldQuantity, numberOfOrdersSold, percentageSalesLift, promotionHref, promotionId, promotionReportId, promotionSale, promotionType, totalDiscount, totalSale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromotionReportDetail {\n");
    sb.append("    averageItemDiscount: ").append(toIndentedString(averageItemDiscount)).append("\n");
    sb.append("    averageItemRevenue: ").append(toIndentedString(averageItemRevenue)).append("\n");
    sb.append("    averageOrderDiscount: ").append(toIndentedString(averageOrderDiscount)).append("\n");
    sb.append("    averageOrderRevenue: ").append(toIndentedString(averageOrderRevenue)).append("\n");
    sb.append("    averageOrderSize: ").append(toIndentedString(averageOrderSize)).append("\n");
    sb.append("    baseSale: ").append(toIndentedString(baseSale)).append("\n");
    sb.append("    itemsSoldQuantity: ").append(toIndentedString(itemsSoldQuantity)).append("\n");
    sb.append("    numberOfOrdersSold: ").append(toIndentedString(numberOfOrdersSold)).append("\n");
    sb.append("    percentageSalesLift: ").append(toIndentedString(percentageSalesLift)).append("\n");
    sb.append("    promotionHref: ").append(toIndentedString(promotionHref)).append("\n");
    sb.append("    promotionId: ").append(toIndentedString(promotionId)).append("\n");
    sb.append("    promotionReportId: ").append(toIndentedString(promotionReportId)).append("\n");
    sb.append("    promotionSale: ").append(toIndentedString(promotionSale)).append("\n");
    sb.append("    promotionType: ").append(toIndentedString(promotionType)).append("\n");
    sb.append("    totalDiscount: ").append(toIndentedString(totalDiscount)).append("\n");
    sb.append("    totalSale: ").append(toIndentedString(totalSale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageItemDiscount");
    openapiFields.add("averageItemRevenue");
    openapiFields.add("averageOrderDiscount");
    openapiFields.add("averageOrderRevenue");
    openapiFields.add("averageOrderSize");
    openapiFields.add("baseSale");
    openapiFields.add("itemsSoldQuantity");
    openapiFields.add("numberOfOrdersSold");
    openapiFields.add("percentageSalesLift");
    openapiFields.add("promotionHref");
    openapiFields.add("promotionId");
    openapiFields.add("promotionReportId");
    openapiFields.add("promotionSale");
    openapiFields.add("promotionType");
    openapiFields.add("totalDiscount");
    openapiFields.add("totalSale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromotionReportDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromotionReportDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromotionReportDetail is not found in the empty JSON string", PromotionReportDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromotionReportDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromotionReportDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `averageItemDiscount`
      if (jsonObj.get("averageItemDiscount") != null && !jsonObj.get("averageItemDiscount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("averageItemDiscount"));
      }
      // validate the optional field `averageItemRevenue`
      if (jsonObj.get("averageItemRevenue") != null && !jsonObj.get("averageItemRevenue").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("averageItemRevenue"));
      }
      // validate the optional field `averageOrderDiscount`
      if (jsonObj.get("averageOrderDiscount") != null && !jsonObj.get("averageOrderDiscount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("averageOrderDiscount"));
      }
      // validate the optional field `averageOrderRevenue`
      if (jsonObj.get("averageOrderRevenue") != null && !jsonObj.get("averageOrderRevenue").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("averageOrderRevenue"));
      }
      if ((jsonObj.get("averageOrderSize") != null && !jsonObj.get("averageOrderSize").isJsonNull()) && !jsonObj.get("averageOrderSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averageOrderSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averageOrderSize").toString()));
      }
      // validate the optional field `baseSale`
      if (jsonObj.get("baseSale") != null && !jsonObj.get("baseSale").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("baseSale"));
      }
      if ((jsonObj.get("percentageSalesLift") != null && !jsonObj.get("percentageSalesLift").isJsonNull()) && !jsonObj.get("percentageSalesLift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentageSalesLift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentageSalesLift").toString()));
      }
      if ((jsonObj.get("promotionHref") != null && !jsonObj.get("promotionHref").isJsonNull()) && !jsonObj.get("promotionHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionHref").toString()));
      }
      if ((jsonObj.get("promotionId") != null && !jsonObj.get("promotionId").isJsonNull()) && !jsonObj.get("promotionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionId").toString()));
      }
      if ((jsonObj.get("promotionReportId") != null && !jsonObj.get("promotionReportId").isJsonNull()) && !jsonObj.get("promotionReportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionReportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionReportId").toString()));
      }
      // validate the optional field `promotionSale`
      if (jsonObj.get("promotionSale") != null && !jsonObj.get("promotionSale").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("promotionSale"));
      }
      if ((jsonObj.get("promotionType") != null && !jsonObj.get("promotionType").isJsonNull()) && !jsonObj.get("promotionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionType").toString()));
      }
      // validate the optional field `totalDiscount`
      if (jsonObj.get("totalDiscount") != null && !jsonObj.get("totalDiscount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("totalDiscount"));
      }
      // validate the optional field `totalSale`
      if (jsonObj.get("totalSale") != null && !jsonObj.get("totalSale").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("totalSale"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromotionReportDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromotionReportDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromotionReportDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromotionReportDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PromotionReportDetail>() {
           @Override
           public void write(JsonWriter out, PromotionReportDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromotionReportDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromotionReportDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromotionReportDetail
   * @throws IOException if the JSON string is invalid with respect to PromotionReportDetail
   */
  public static PromotionReportDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromotionReportDetail.class);
  }

  /**
   * Convert an instance of PromotionReportDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

