/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InventoryItem;
import org.openapitools.client.model.SelectionRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields for a set of inventory selection rules.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Required:&lt;/b&gt; When &lt;b&gt;inventoryCriterionType&lt;/b&gt; is set to &lt;code&gt;INVENTORY_BY_RULE&lt;/code&gt; or &lt;code&gt;INVENTORY_ANY&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleCriteria {
  public static final String SERIALIZED_NAME_EXCLUDE_INVENTORY_ITEMS = "excludeInventoryItems";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_INVENTORY_ITEMS)
  private List<InventoryItem> excludeInventoryItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDE_LISTING_IDS = "excludeListingIds";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_LISTING_IDS)
  private List<String> excludeListingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKUP_INVENTORY_ITEMS = "markupInventoryItems";
  @SerializedName(SERIALIZED_NAME_MARKUP_INVENTORY_ITEMS)
  private List<InventoryItem> markupInventoryItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKUP_LISTING_IDS = "markupListingIds";
  @SerializedName(SERIALIZED_NAME_MARKUP_LISTING_IDS)
  private List<String> markupListingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTION_RULES = "selectionRules";
  @SerializedName(SERIALIZED_NAME_SELECTION_RULES)
  private List<SelectionRule> selectionRules = new ArrayList<>();

  public RuleCriteria() {
  }

  public RuleCriteria excludeInventoryItems(List<InventoryItem> excludeInventoryItems) {
    this.excludeInventoryItems = excludeInventoryItems;
    return this;
  }

  public RuleCriteria addExcludeInventoryItemsItem(InventoryItem excludeInventoryItemsItem) {
    if (this.excludeInventoryItems == null) {
      this.excludeInventoryItems = new ArrayList<>();
    }
    this.excludeInventoryItems.add(excludeInventoryItemsItem);
    return this;
  }

  /**
   * A list of seller inventory reference IDs to exclude from the promotion.  &lt;br&gt;&lt;br&gt;&lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The request can have either &lt;b&gt;excludeInventoryItems&lt;/b&gt; or &lt;b&gt;excludeListingIds&lt;/b&gt; but not both.&lt;/p&gt; &lt;b&gt;Maximum:&lt;/b&gt; 100 parent items &lt;br&gt;&lt;b&gt;Maximum SKU or custom label length:&lt;/b&gt; 50 characters
   * @return excludeInventoryItems
   */
  @javax.annotation.Nullable
  public List<InventoryItem> getExcludeInventoryItems() {
    return excludeInventoryItems;
  }

  public void setExcludeInventoryItems(List<InventoryItem> excludeInventoryItems) {
    this.excludeInventoryItems = excludeInventoryItems;
  }


  public RuleCriteria excludeListingIds(List<String> excludeListingIds) {
    this.excludeListingIds = excludeListingIds;
    return this;
  }

  public RuleCriteria addExcludeListingIdsItem(String excludeListingIdsItem) {
    if (this.excludeListingIds == null) {
      this.excludeListingIds = new ArrayList<>();
    }
    this.excludeListingIds.add(excludeListingIdsItem);
    return this;
  }

  /**
   * A list of eBay listing IDs to exclude from the promotion.  &lt;br&gt;&lt;br&gt;&lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The request can have either &lt;b&gt;excludeInventoryItems&lt;/b&gt; or &lt;b&gt;excludeListingIds&lt;/b&gt; but not both.&lt;/p&gt; &lt;b&gt;Maximum:&lt;/b&gt; 100 parent items &lt;br&gt;&lt;b&gt;Maximum SKU or custom label length:&lt;/b&gt; 50 characters
   * @return excludeListingIds
   */
  @javax.annotation.Nullable
  public List<String> getExcludeListingIds() {
    return excludeListingIds;
  }

  public void setExcludeListingIds(List<String> excludeListingIds) {
    this.excludeListingIds = excludeListingIds;
  }


  public RuleCriteria markupInventoryItems(List<InventoryItem> markupInventoryItems) {
    this.markupInventoryItems = markupInventoryItems;
    return this;
  }

  public RuleCriteria addMarkupInventoryItemsItem(InventoryItem markupInventoryItemsItem) {
    if (this.markupInventoryItems == null) {
      this.markupInventoryItems = new ArrayList<>();
    }
    this.markupInventoryItems.add(markupInventoryItemsItem);
    return this;
  }

  /**
   * A list of SKUs to remove from a markdown promotion. The listed SKUs are &#39;marked up&#39; to their standard price after being part of the markdown promotion.
   * @return markupInventoryItems
   */
  @javax.annotation.Nullable
  public List<InventoryItem> getMarkupInventoryItems() {
    return markupInventoryItems;
  }

  public void setMarkupInventoryItems(List<InventoryItem> markupInventoryItems) {
    this.markupInventoryItems = markupInventoryItems;
  }


  public RuleCriteria markupListingIds(List<String> markupListingIds) {
    this.markupListingIds = markupListingIds;
    return this;
  }

  public RuleCriteria addMarkupListingIdsItem(String markupListingIdsItem) {
    if (this.markupListingIds == null) {
      this.markupListingIds = new ArrayList<>();
    }
    this.markupListingIds.add(markupListingIdsItem);
    return this;
  }

  /**
   * A list of listing IDs to remove from a markdown promotion. The listed items are &#39;marked up&#39; to their standard price after being part of the markdown promotion.
   * @return markupListingIds
   */
  @javax.annotation.Nullable
  public List<String> getMarkupListingIds() {
    return markupListingIds;
  }

  public void setMarkupListingIds(List<String> markupListingIds) {
    this.markupListingIds = markupListingIds;
  }


  public RuleCriteria selectionRules(List<SelectionRule> selectionRules) {
    this.selectionRules = selectionRules;
    return this;
  }

  public RuleCriteria addSelectionRulesItem(SelectionRule selectionRulesItem) {
    if (this.selectionRules == null) {
      this.selectionRules = new ArrayList<>();
    }
    this.selectionRules.add(selectionRulesItem);
    return this;
  }

  /**
   * The container for the rules that select the items to include in a promotion.  &lt;br&gt;&lt;br&gt;&lt;i&gt;Required if &lt;/i&gt; &lt;b&gt;inventoryCriterionType&lt;/b&gt; is set to &lt;code&gt;INVENTORY_BY_RULE&lt;/code&gt;. &lt;br&gt;&lt;br&gt;For information on using the contained fields, see &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \&quot;&gt;Item promotions&lt;/a&gt;.
   * @return selectionRules
   */
  @javax.annotation.Nullable
  public List<SelectionRule> getSelectionRules() {
    return selectionRules;
  }

  public void setSelectionRules(List<SelectionRule> selectionRules) {
    this.selectionRules = selectionRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleCriteria ruleCriteria = (RuleCriteria) o;
    return Objects.equals(this.excludeInventoryItems, ruleCriteria.excludeInventoryItems) &&
        Objects.equals(this.excludeListingIds, ruleCriteria.excludeListingIds) &&
        Objects.equals(this.markupInventoryItems, ruleCriteria.markupInventoryItems) &&
        Objects.equals(this.markupListingIds, ruleCriteria.markupListingIds) &&
        Objects.equals(this.selectionRules, ruleCriteria.selectionRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeInventoryItems, excludeListingIds, markupInventoryItems, markupListingIds, selectionRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleCriteria {\n");
    sb.append("    excludeInventoryItems: ").append(toIndentedString(excludeInventoryItems)).append("\n");
    sb.append("    excludeListingIds: ").append(toIndentedString(excludeListingIds)).append("\n");
    sb.append("    markupInventoryItems: ").append(toIndentedString(markupInventoryItems)).append("\n");
    sb.append("    markupListingIds: ").append(toIndentedString(markupListingIds)).append("\n");
    sb.append("    selectionRules: ").append(toIndentedString(selectionRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludeInventoryItems");
    openapiFields.add("excludeListingIds");
    openapiFields.add("markupInventoryItems");
    openapiFields.add("markupListingIds");
    openapiFields.add("selectionRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleCriteria is not found in the empty JSON string", RuleCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("excludeInventoryItems") != null && !jsonObj.get("excludeInventoryItems").isJsonNull()) {
        JsonArray jsonArrayexcludeInventoryItems = jsonObj.getAsJsonArray("excludeInventoryItems");
        if (jsonArrayexcludeInventoryItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludeInventoryItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludeInventoryItems` to be an array in the JSON string but got `%s`", jsonObj.get("excludeInventoryItems").toString()));
          }

          // validate the optional field `excludeInventoryItems` (array)
          for (int i = 0; i < jsonArrayexcludeInventoryItems.size(); i++) {
            InventoryItem.validateJsonElement(jsonArrayexcludeInventoryItems.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeListingIds") != null && !jsonObj.get("excludeListingIds").isJsonNull() && !jsonObj.get("excludeListingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeListingIds` to be an array in the JSON string but got `%s`", jsonObj.get("excludeListingIds").toString()));
      }
      if (jsonObj.get("markupInventoryItems") != null && !jsonObj.get("markupInventoryItems").isJsonNull()) {
        JsonArray jsonArraymarkupInventoryItems = jsonObj.getAsJsonArray("markupInventoryItems");
        if (jsonArraymarkupInventoryItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markupInventoryItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markupInventoryItems` to be an array in the JSON string but got `%s`", jsonObj.get("markupInventoryItems").toString()));
          }

          // validate the optional field `markupInventoryItems` (array)
          for (int i = 0; i < jsonArraymarkupInventoryItems.size(); i++) {
            InventoryItem.validateJsonElement(jsonArraymarkupInventoryItems.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("markupListingIds") != null && !jsonObj.get("markupListingIds").isJsonNull() && !jsonObj.get("markupListingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `markupListingIds` to be an array in the JSON string but got `%s`", jsonObj.get("markupListingIds").toString()));
      }
      if (jsonObj.get("selectionRules") != null && !jsonObj.get("selectionRules").isJsonNull()) {
        JsonArray jsonArrayselectionRules = jsonObj.getAsJsonArray("selectionRules");
        if (jsonArrayselectionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectionRules` to be an array in the JSON string but got `%s`", jsonObj.get("selectionRules").toString()));
          }

          // validate the optional field `selectionRules` (array)
          for (int i = 0; i < jsonArrayselectionRules.size(); i++) {
            SelectionRule.validateJsonElement(jsonArrayselectionRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleCriteria>() {
           @Override
           public void write(JsonWriter out, RuleCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleCriteria
   * @throws IOException if the JSON string is invalid with respect to RuleCriteria
   */
  public static RuleCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleCriteria.class);
  }

  /**
   * Convert an instance of RuleCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

