/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.InventoryReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields in a report task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportTask {
  public static final String SERIALIZED_NAME_CAMPAIGN_IDS = "campaignIds";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_IDS)
  private List<String> campaignIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_FROM = "dateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "dateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNDING_MODELS = "fundingModels";
  @SerializedName(SERIALIZED_NAME_FUNDING_MODELS)
  private List<String> fundingModels = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_REFERENCES = "inventoryReferences";
  @SerializedName(SERIALIZED_NAME_INVENTORY_REFERENCES)
  private List<InventoryReference> inventoryReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTING_IDS = "listingIds";
  @SerializedName(SERIALIZED_NAME_LISTING_IDS)
  private List<String> listingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_METRIC_KEYS = "metricKeys";
  @SerializedName(SERIALIZED_NAME_METRIC_KEYS)
  private List<String> metricKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_EXPIRATION_DATE = "reportExpirationDate";
  @SerializedName(SERIALIZED_NAME_REPORT_EXPIRATION_DATE)
  private String reportExpirationDate;

  public static final String SERIALIZED_NAME_REPORT_FORMAT = "reportFormat";
  @SerializedName(SERIALIZED_NAME_REPORT_FORMAT)
  private String reportFormat;

  public static final String SERIALIZED_NAME_REPORT_HREF = "reportHref";
  @SerializedName(SERIALIZED_NAME_REPORT_HREF)
  private String reportHref;

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_REPORT_NAME = "reportName";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_REPORT_TASK_COMPLETION_DATE = "reportTaskCompletionDate";
  @SerializedName(SERIALIZED_NAME_REPORT_TASK_COMPLETION_DATE)
  private String reportTaskCompletionDate;

  public static final String SERIALIZED_NAME_REPORT_TASK_CREATION_DATE = "reportTaskCreationDate";
  @SerializedName(SERIALIZED_NAME_REPORT_TASK_CREATION_DATE)
  private String reportTaskCreationDate;

  public static final String SERIALIZED_NAME_REPORT_TASK_EXPECTED_COMPLETION_DATE = "reportTaskExpectedCompletionDate";
  @SerializedName(SERIALIZED_NAME_REPORT_TASK_EXPECTED_COMPLETION_DATE)
  private String reportTaskExpectedCompletionDate;

  public static final String SERIALIZED_NAME_REPORT_TASK_ID = "reportTaskId";
  @SerializedName(SERIALIZED_NAME_REPORT_TASK_ID)
  private String reportTaskId;

  public static final String SERIALIZED_NAME_REPORT_TASK_STATUS = "reportTaskStatus";
  @SerializedName(SERIALIZED_NAME_REPORT_TASK_STATUS)
  private String reportTaskStatus;

  public static final String SERIALIZED_NAME_REPORT_TASK_STATUS_MESSAGE = "reportTaskStatusMessage";
  @SerializedName(SERIALIZED_NAME_REPORT_TASK_STATUS_MESSAGE)
  private String reportTaskStatusMessage;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public ReportTask() {
  }

  public ReportTask campaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
    return this;
  }

  public ReportTask addCampaignIdsItem(String campaignIdsItem) {
    if (this.campaignIds == null) {
      this.campaignIds = new ArrayList<>();
    }
    this.campaignIds.add(campaignIdsItem);
    return this;
  }

  /**
   * A list of IDs for the campaigns that are included in the report. A campaign ID is a unique eBay-assigned identifier of the campaign that&#39;s generated when the campaign is created.&lt;br /&gt;&lt;br /&gt;Call &lt;b&gt;getCampaigns&lt;/b&gt; to return the current campaign IDs for a seller.
   * @return campaignIds
   */
  @javax.annotation.Nullable
  public List<String> getCampaignIds() {
    return campaignIds;
  }

  public void setCampaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
  }


  public ReportTask dateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * The date defining the start of the timespan covered by the report, formatted as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html \&quot; title&#x3D;\&quot;https://www.iso.org \&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; timestamp.
   * @return dateFrom
   */
  @javax.annotation.Nullable
  public String getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }


  public ReportTask dateTo(String dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * The date defining the end of the timespan covered by the report, formatted as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html \&quot; title&#x3D;\&quot;https://www.iso.org \&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; timestamp.
   * @return dateTo
   */
  @javax.annotation.Nullable
  public String getDateTo() {
    return dateTo;
  }

  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }


  public ReportTask dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public ReportTask addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * A list containing the dimension in the report.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public ReportTask fundingModels(List<String> fundingModels) {
    this.fundingModels = fundingModels;
    return this;
  }

  public ReportTask addFundingModelsItem(String fundingModelsItem) {
    if (this.fundingModels == null) {
      this.fundingModels = new ArrayList<>();
    }
    this.fundingModels.add(fundingModelsItem);
    return this;
  }

  /**
   * The funding model for the campaign that shall be included in the report.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The default funding model for Promoted Listings reports is &lt;code&gt;COST_PER_SALE&lt;/code&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid Values:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;COST_PER_SALE&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;COST_PER_CLICK&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
   * @return fundingModels
   */
  @javax.annotation.Nullable
  public List<String> getFundingModels() {
    return fundingModels;
  }

  public void setFundingModels(List<String> fundingModels) {
    this.fundingModels = fundingModels;
  }


  public ReportTask inventoryReferences(List<InventoryReference> inventoryReferences) {
    this.inventoryReferences = inventoryReferences;
    return this;
  }

  public ReportTask addInventoryReferencesItem(InventoryReference inventoryReferencesItem) {
    if (this.inventoryReferences == null) {
      this.inventoryReferences = new ArrayList<>();
    }
    this.inventoryReferences.add(inventoryReferencesItem);
    return this;
  }

  /**
   * If supplied in the request, this field returns a list of the seller&#39;s inventory reference IDs included in the report.  &lt;p&gt;Each item is referenced by a pair of &lt;b&gt;inventoryRefernceID&lt;/b&gt; and &lt;b&gt;inventoryReferenceType&lt;/b&gt; values, where an inventory reference ID can be either a seller-defined &lt;b&gt;SKU&lt;/b&gt; value or an &lt;b&gt;inventoryItemGroupKey&lt;/b&gt;. An &lt;b&gt;inventoryItemGroupKey&lt;/b&gt; is seller-defined ID for an inventory item group (a multiple-variation listing), and is created and used by the &lt;a href&#x3D;\&quot;/api-docs/sell/inventory/resources/methods\&quot;&gt;Inventory API&lt;/a&gt;.&lt;/p&gt;
   * @return inventoryReferences
   */
  @javax.annotation.Nullable
  public List<InventoryReference> getInventoryReferences() {
    return inventoryReferences;
  }

  public void setInventoryReferences(List<InventoryReference> inventoryReferences) {
    this.inventoryReferences = inventoryReferences;
  }


  public ReportTask listingIds(List<String> listingIds) {
    this.listingIds = listingIds;
    return this;
  }

  public ReportTask addListingIdsItem(String listingIdsItem) {
    if (this.listingIds == null) {
      this.listingIds = new ArrayList<>();
    }
    this.listingIds.add(listingIdsItem);
    return this;
  }

  /**
   * If supplied in the request, this field returns a list of the listing IDs included in the report. A listing ID is an eBay-assigned ID that&#39;s generated when a listing is created.
   * @return listingIds
   */
  @javax.annotation.Nullable
  public List<String> getListingIds() {
    return listingIds;
  }

  public void setListingIds(List<String> listingIds) {
    this.listingIds = listingIds;
  }


  public ReportTask marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The ID of the eBay marketplace used by the report task. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public ReportTask metricKeys(List<String> metricKeys) {
    this.metricKeys = metricKeys;
    return this;
  }

  public ReportTask addMetricKeysItem(String metricKeysItem) {
    if (this.metricKeys == null) {
      this.metricKeys = new ArrayList<>();
    }
    this.metricKeys.add(metricKeysItem);
    return this;
  }

  /**
   * A list of metrics for the report task.
   * @return metricKeys
   */
  @javax.annotation.Nullable
  public List<String> getMetricKeys() {
    return metricKeys;
  }

  public void setMetricKeys(List<String> metricKeys) {
    this.metricKeys = metricKeys;
  }


  public ReportTask reportExpirationDate(String reportExpirationDate) {
    this.reportExpirationDate = reportExpirationDate;
    return this;
  }

  /**
   * The date after which the report is no longer be available. Reports are available for 30 days and you cannot download a report after it has expired.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format (UTC): &lt;/b&gt; yyyy-MM-ddThh:mm:ss.sssZ
   * @return reportExpirationDate
   */
  @javax.annotation.Nullable
  public String getReportExpirationDate() {
    return reportExpirationDate;
  }

  public void setReportExpirationDate(String reportExpirationDate) {
    this.reportExpirationDate = reportExpirationDate;
  }


  public ReportTask reportFormat(String reportFormat) {
    this.reportFormat = reportFormat;
    return this;
  }

  /**
   * Indicates the format of the report. Currently, only &lt;code&gt;TSV_GZIP&lt;/code&gt; is supported. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportFormatEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reportFormat
   */
  @javax.annotation.Nullable
  public String getReportFormat() {
    return reportFormat;
  }

  public void setReportFormat(String reportFormat) {
    this.reportFormat = reportFormat;
  }


  public ReportTask reportHref(String reportHref) {
    this.reportHref = reportHref;
    return this;
  }

  /**
   * The URL of the generated report, which can be used to download the report once it has been generated.
   * @return reportHref
   */
  @javax.annotation.Nullable
  public String getReportHref() {
    return reportHref;
  }

  public void setReportHref(String reportHref) {
    this.reportHref = reportHref;
  }


  public ReportTask reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

  /**
   * A unique eBay-assigned ID for the report.
   * @return reportId
   */
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public ReportTask reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  /**
   * An eBay-assigned name for the report that&#39;s created by the &lt;b&gt;createReportTask&lt;/b&gt; call. This name is unique for the seller.
   * @return reportName
   */
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public ReportTask reportTaskCompletionDate(String reportTaskCompletionDate) {
    this.reportTaskCompletionDate = reportTaskCompletionDate;
    return this;
  }

  /**
   * The date the report task completed the report generation.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format (UTC): &lt;/b&gt; yyyy-MM-ddThh:mm:ss.sssZ
   * @return reportTaskCompletionDate
   */
  @javax.annotation.Nullable
  public String getReportTaskCompletionDate() {
    return reportTaskCompletionDate;
  }

  public void setReportTaskCompletionDate(String reportTaskCompletionDate) {
    this.reportTaskCompletionDate = reportTaskCompletionDate;
  }


  public ReportTask reportTaskCreationDate(String reportTaskCreationDate) {
    this.reportTaskCreationDate = reportTaskCreationDate;
    return this;
  }

  /**
   * The date the report task was created.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format (UTC): &lt;/b&gt; yyyy-MM-ddThh:mm:ss.sssZ
   * @return reportTaskCreationDate
   */
  @javax.annotation.Nullable
  public String getReportTaskCreationDate() {
    return reportTaskCreationDate;
  }

  public void setReportTaskCreationDate(String reportTaskCreationDate) {
    this.reportTaskCreationDate = reportTaskCreationDate;
  }


  public ReportTask reportTaskExpectedCompletionDate(String reportTaskExpectedCompletionDate) {
    this.reportTaskExpectedCompletionDate = reportTaskExpectedCompletionDate;
    return this;
  }

  /**
   * The date the report task is expected to complete the report generation.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format (UTC): &lt;/b&gt; yyyy-MM-ddThh:mm:ss.sssZ
   * @return reportTaskExpectedCompletionDate
   */
  @javax.annotation.Nullable
  public String getReportTaskExpectedCompletionDate() {
    return reportTaskExpectedCompletionDate;
  }

  public void setReportTaskExpectedCompletionDate(String reportTaskExpectedCompletionDate) {
    this.reportTaskExpectedCompletionDate = reportTaskExpectedCompletionDate;
  }


  public ReportTask reportTaskId(String reportTaskId) {
    this.reportTaskId = reportTaskId;
    return this;
  }

  /**
   * The unique eBay-assigned ID of the report task. This value is generated when the report task is created with a call to &lt;b&gt;createReportTask&lt;/b&gt;.
   * @return reportTaskId
   */
  @javax.annotation.Nullable
  public String getReportTaskId() {
    return reportTaskId;
  }

  public void setReportTaskId(String reportTaskId) {
    this.reportTaskId = reportTaskId;
  }


  public ReportTask reportTaskStatus(String reportTaskStatus) {
    this.reportTaskStatus = reportTaskStatus;
    return this;
  }

  /**
   * Indicates the current state of the report task. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/plr:TaskStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reportTaskStatus
   */
  @javax.annotation.Nullable
  public String getReportTaskStatus() {
    return reportTaskStatus;
  }

  public void setReportTaskStatus(String reportTaskStatus) {
    this.reportTaskStatus = reportTaskStatus;
  }


  public ReportTask reportTaskStatusMessage(String reportTaskStatusMessage) {
    this.reportTaskStatusMessage = reportTaskStatusMessage;
    return this;
  }

  /**
   * A status message with additional information about the report task.
   * @return reportTaskStatusMessage
   */
  @javax.annotation.Nullable
  public String getReportTaskStatusMessage() {
    return reportTaskStatusMessage;
  }

  public void setReportTaskStatusMessage(String reportTaskStatusMessage) {
    this.reportTaskStatusMessage = reportTaskStatusMessage;
  }


  public ReportTask reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Indicates type of report associated with the report task.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; INVENTORY_PERFORMANCE_REPORT is not currently available; availability date is pending.&lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportTask reportTask = (ReportTask) o;
    return Objects.equals(this.campaignIds, reportTask.campaignIds) &&
        Objects.equals(this.dateFrom, reportTask.dateFrom) &&
        Objects.equals(this.dateTo, reportTask.dateTo) &&
        Objects.equals(this.dimensions, reportTask.dimensions) &&
        Objects.equals(this.fundingModels, reportTask.fundingModels) &&
        Objects.equals(this.inventoryReferences, reportTask.inventoryReferences) &&
        Objects.equals(this.listingIds, reportTask.listingIds) &&
        Objects.equals(this.marketplaceId, reportTask.marketplaceId) &&
        Objects.equals(this.metricKeys, reportTask.metricKeys) &&
        Objects.equals(this.reportExpirationDate, reportTask.reportExpirationDate) &&
        Objects.equals(this.reportFormat, reportTask.reportFormat) &&
        Objects.equals(this.reportHref, reportTask.reportHref) &&
        Objects.equals(this.reportId, reportTask.reportId) &&
        Objects.equals(this.reportName, reportTask.reportName) &&
        Objects.equals(this.reportTaskCompletionDate, reportTask.reportTaskCompletionDate) &&
        Objects.equals(this.reportTaskCreationDate, reportTask.reportTaskCreationDate) &&
        Objects.equals(this.reportTaskExpectedCompletionDate, reportTask.reportTaskExpectedCompletionDate) &&
        Objects.equals(this.reportTaskId, reportTask.reportTaskId) &&
        Objects.equals(this.reportTaskStatus, reportTask.reportTaskStatus) &&
        Objects.equals(this.reportTaskStatusMessage, reportTask.reportTaskStatusMessage) &&
        Objects.equals(this.reportType, reportTask.reportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignIds, dateFrom, dateTo, dimensions, fundingModels, inventoryReferences, listingIds, marketplaceId, metricKeys, reportExpirationDate, reportFormat, reportHref, reportId, reportName, reportTaskCompletionDate, reportTaskCreationDate, reportTaskExpectedCompletionDate, reportTaskId, reportTaskStatus, reportTaskStatusMessage, reportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportTask {\n");
    sb.append("    campaignIds: ").append(toIndentedString(campaignIds)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    fundingModels: ").append(toIndentedString(fundingModels)).append("\n");
    sb.append("    inventoryReferences: ").append(toIndentedString(inventoryReferences)).append("\n");
    sb.append("    listingIds: ").append(toIndentedString(listingIds)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    metricKeys: ").append(toIndentedString(metricKeys)).append("\n");
    sb.append("    reportExpirationDate: ").append(toIndentedString(reportExpirationDate)).append("\n");
    sb.append("    reportFormat: ").append(toIndentedString(reportFormat)).append("\n");
    sb.append("    reportHref: ").append(toIndentedString(reportHref)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    reportTaskCompletionDate: ").append(toIndentedString(reportTaskCompletionDate)).append("\n");
    sb.append("    reportTaskCreationDate: ").append(toIndentedString(reportTaskCreationDate)).append("\n");
    sb.append("    reportTaskExpectedCompletionDate: ").append(toIndentedString(reportTaskExpectedCompletionDate)).append("\n");
    sb.append("    reportTaskId: ").append(toIndentedString(reportTaskId)).append("\n");
    sb.append("    reportTaskStatus: ").append(toIndentedString(reportTaskStatus)).append("\n");
    sb.append("    reportTaskStatusMessage: ").append(toIndentedString(reportTaskStatusMessage)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaignIds");
    openapiFields.add("dateFrom");
    openapiFields.add("dateTo");
    openapiFields.add("dimensions");
    openapiFields.add("fundingModels");
    openapiFields.add("inventoryReferences");
    openapiFields.add("listingIds");
    openapiFields.add("marketplaceId");
    openapiFields.add("metricKeys");
    openapiFields.add("reportExpirationDate");
    openapiFields.add("reportFormat");
    openapiFields.add("reportHref");
    openapiFields.add("reportId");
    openapiFields.add("reportName");
    openapiFields.add("reportTaskCompletionDate");
    openapiFields.add("reportTaskCreationDate");
    openapiFields.add("reportTaskExpectedCompletionDate");
    openapiFields.add("reportTaskId");
    openapiFields.add("reportTaskStatus");
    openapiFields.add("reportTaskStatusMessage");
    openapiFields.add("reportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportTask is not found in the empty JSON string", ReportTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("campaignIds") != null && !jsonObj.get("campaignIds").isJsonNull() && !jsonObj.get("campaignIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignIds` to be an array in the JSON string but got `%s`", jsonObj.get("campaignIds").toString()));
      }
      if ((jsonObj.get("dateFrom") != null && !jsonObj.get("dateFrom").isJsonNull()) && !jsonObj.get("dateFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFrom").toString()));
      }
      if ((jsonObj.get("dateTo") != null && !jsonObj.get("dateTo").isJsonNull()) && !jsonObj.get("dateTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTo").toString()));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fundingModels") != null && !jsonObj.get("fundingModels").isJsonNull() && !jsonObj.get("fundingModels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingModels` to be an array in the JSON string but got `%s`", jsonObj.get("fundingModels").toString()));
      }
      if (jsonObj.get("inventoryReferences") != null && !jsonObj.get("inventoryReferences").isJsonNull()) {
        JsonArray jsonArrayinventoryReferences = jsonObj.getAsJsonArray("inventoryReferences");
        if (jsonArrayinventoryReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventoryReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventoryReferences` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryReferences").toString()));
          }

          // validate the optional field `inventoryReferences` (array)
          for (int i = 0; i < jsonArrayinventoryReferences.size(); i++) {
            InventoryReference.validateJsonElement(jsonArrayinventoryReferences.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listingIds") != null && !jsonObj.get("listingIds").isJsonNull() && !jsonObj.get("listingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingIds` to be an array in the JSON string but got `%s`", jsonObj.get("listingIds").toString()));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricKeys") != null && !jsonObj.get("metricKeys").isJsonNull() && !jsonObj.get("metricKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricKeys` to be an array in the JSON string but got `%s`", jsonObj.get("metricKeys").toString()));
      }
      if ((jsonObj.get("reportExpirationDate") != null && !jsonObj.get("reportExpirationDate").isJsonNull()) && !jsonObj.get("reportExpirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportExpirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportExpirationDate").toString()));
      }
      if ((jsonObj.get("reportFormat") != null && !jsonObj.get("reportFormat").isJsonNull()) && !jsonObj.get("reportFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportFormat").toString()));
      }
      if ((jsonObj.get("reportHref") != null && !jsonObj.get("reportHref").isJsonNull()) && !jsonObj.get("reportHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportHref").toString()));
      }
      if ((jsonObj.get("reportId") != null && !jsonObj.get("reportId").isJsonNull()) && !jsonObj.get("reportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportId").toString()));
      }
      if ((jsonObj.get("reportName") != null && !jsonObj.get("reportName").isJsonNull()) && !jsonObj.get("reportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportName").toString()));
      }
      if ((jsonObj.get("reportTaskCompletionDate") != null && !jsonObj.get("reportTaskCompletionDate").isJsonNull()) && !jsonObj.get("reportTaskCompletionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTaskCompletionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTaskCompletionDate").toString()));
      }
      if ((jsonObj.get("reportTaskCreationDate") != null && !jsonObj.get("reportTaskCreationDate").isJsonNull()) && !jsonObj.get("reportTaskCreationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTaskCreationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTaskCreationDate").toString()));
      }
      if ((jsonObj.get("reportTaskExpectedCompletionDate") != null && !jsonObj.get("reportTaskExpectedCompletionDate").isJsonNull()) && !jsonObj.get("reportTaskExpectedCompletionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTaskExpectedCompletionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTaskExpectedCompletionDate").toString()));
      }
      if ((jsonObj.get("reportTaskId") != null && !jsonObj.get("reportTaskId").isJsonNull()) && !jsonObj.get("reportTaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTaskId").toString()));
      }
      if ((jsonObj.get("reportTaskStatus") != null && !jsonObj.get("reportTaskStatus").isJsonNull()) && !jsonObj.get("reportTaskStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTaskStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTaskStatus").toString()));
      }
      if ((jsonObj.get("reportTaskStatusMessage") != null && !jsonObj.get("reportTaskStatusMessage").isJsonNull()) && !jsonObj.get("reportTaskStatusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTaskStatusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTaskStatusMessage").toString()));
      }
      if ((jsonObj.get("reportType") != null && !jsonObj.get("reportType").isJsonNull()) && !jsonObj.get("reportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportTask.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportTask>() {
           @Override
           public void write(JsonWriter out, ReportTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportTask
   * @throws IOException if the JSON string is invalid with respect to ReportTask
   */
  public static ReportTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportTask.class);
  }

  /**
   * Convert an instance of ReportTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

