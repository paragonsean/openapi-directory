/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type that defines the fields for a negative keyword.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NegativeKeyword {
  public static final String SERIALIZED_NAME_AD_GROUP_ID = "adGroupId";
  @SerializedName(SERIALIZED_NAME_AD_GROUP_ID)
  private String adGroupId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_NEGATIVE_KEYWORD_ID = "negativeKeywordId";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_KEYWORD_ID)
  private String negativeKeywordId;

  public static final String SERIALIZED_NAME_NEGATIVE_KEYWORD_MATCH_TYPE = "negativeKeywordMatchType";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_KEYWORD_MATCH_TYPE)
  private String negativeKeywordMatchType;

  public static final String SERIALIZED_NAME_NEGATIVE_KEYWORD_STATUS = "negativeKeywordStatus";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_KEYWORD_STATUS)
  private String negativeKeywordStatus;

  public static final String SERIALIZED_NAME_NEGATIVE_KEYWORD_TEXT = "negativeKeywordText";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_KEYWORD_TEXT)
  private String negativeKeywordText;

  public NegativeKeyword() {
  }

  public NegativeKeyword adGroupId(String adGroupId) {
    this.adGroupId = adGroupId;
    return this;
  }

  /**
   * An ad group ID that is generated when an ad group is first created and associated with a campaign.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; You can call the  &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/adgroup/methods/getAdGroups\&quot;&gt;getAdGroups&lt;/a&gt; method to retrieve the ad group IDs for a seller.&lt;/span&gt;
   * @return adGroupId
   */
  @javax.annotation.Nullable
  public String getAdGroupId() {
    return adGroupId;
  }

  public void setAdGroupId(String adGroupId) {
    this.adGroupId = adGroupId;
  }


  public NegativeKeyword campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * A unique eBay-assigned ID for a campaign. This ID is generated when a campaign is created.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public NegativeKeyword negativeKeywordId(String negativeKeywordId) {
    this.negativeKeywordId = negativeKeywordId;
    return this;
  }

  /**
   * A unique eBay-assigned ID for a negative keyword. This keyword ID will be generated for each successfully created negative keyword.
   * @return negativeKeywordId
   */
  @javax.annotation.Nullable
  public String getNegativeKeywordId() {
    return negativeKeywordId;
  }

  public void setNegativeKeywordId(String negativeKeywordId) {
    this.negativeKeywordId = negativeKeywordId;
  }


  public NegativeKeyword negativeKeywordMatchType(String negativeKeywordMatchType) {
    this.negativeKeywordMatchType = negativeKeywordMatchType;
    return this;
  }

  /**
   * A field that defines the match type for the negative keyword.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; Broad matching of negative keywords is not currently supported.&lt;/span&gt;&lt;br /&gt;&lt;b&gt;Valid Values:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;EXACT&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;PHRASE&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/pls:NegativeKeywordMatchTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return negativeKeywordMatchType
   */
  @javax.annotation.Nullable
  public String getNegativeKeywordMatchType() {
    return negativeKeywordMatchType;
  }

  public void setNegativeKeywordMatchType(String negativeKeywordMatchType) {
    this.negativeKeywordMatchType = negativeKeywordMatchType;
  }


  public NegativeKeyword negativeKeywordStatus(String negativeKeywordStatus) {
    this.negativeKeywordStatus = negativeKeywordStatus;
    return this;
  }

  /**
   * A field that defines the status of the negative keyword. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/pls:NegativeKeywordStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return negativeKeywordStatus
   */
  @javax.annotation.Nullable
  public String getNegativeKeywordStatus() {
    return negativeKeywordStatus;
  }

  public void setNegativeKeywordStatus(String negativeKeywordStatus) {
    this.negativeKeywordStatus = negativeKeywordStatus;
  }


  public NegativeKeyword negativeKeywordText(String negativeKeywordText) {
    this.negativeKeywordText = negativeKeywordText;
    return this;
  }

  /**
   * The text for the negative keyword.
   * @return negativeKeywordText
   */
  @javax.annotation.Nullable
  public String getNegativeKeywordText() {
    return negativeKeywordText;
  }

  public void setNegativeKeywordText(String negativeKeywordText) {
    this.negativeKeywordText = negativeKeywordText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegativeKeyword negativeKeyword = (NegativeKeyword) o;
    return Objects.equals(this.adGroupId, negativeKeyword.adGroupId) &&
        Objects.equals(this.campaignId, negativeKeyword.campaignId) &&
        Objects.equals(this.negativeKeywordId, negativeKeyword.negativeKeywordId) &&
        Objects.equals(this.negativeKeywordMatchType, negativeKeyword.negativeKeywordMatchType) &&
        Objects.equals(this.negativeKeywordStatus, negativeKeyword.negativeKeywordStatus) &&
        Objects.equals(this.negativeKeywordText, negativeKeyword.negativeKeywordText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adGroupId, campaignId, negativeKeywordId, negativeKeywordMatchType, negativeKeywordStatus, negativeKeywordText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegativeKeyword {\n");
    sb.append("    adGroupId: ").append(toIndentedString(adGroupId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    negativeKeywordId: ").append(toIndentedString(negativeKeywordId)).append("\n");
    sb.append("    negativeKeywordMatchType: ").append(toIndentedString(negativeKeywordMatchType)).append("\n");
    sb.append("    negativeKeywordStatus: ").append(toIndentedString(negativeKeywordStatus)).append("\n");
    sb.append("    negativeKeywordText: ").append(toIndentedString(negativeKeywordText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adGroupId");
    openapiFields.add("campaignId");
    openapiFields.add("negativeKeywordId");
    openapiFields.add("negativeKeywordMatchType");
    openapiFields.add("negativeKeywordStatus");
    openapiFields.add("negativeKeywordText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NegativeKeyword
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NegativeKeyword.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NegativeKeyword is not found in the empty JSON string", NegativeKeyword.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NegativeKeyword.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NegativeKeyword` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adGroupId") != null && !jsonObj.get("adGroupId").isJsonNull()) && !jsonObj.get("adGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adGroupId").toString()));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if ((jsonObj.get("negativeKeywordId") != null && !jsonObj.get("negativeKeywordId").isJsonNull()) && !jsonObj.get("negativeKeywordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeKeywordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeKeywordId").toString()));
      }
      if ((jsonObj.get("negativeKeywordMatchType") != null && !jsonObj.get("negativeKeywordMatchType").isJsonNull()) && !jsonObj.get("negativeKeywordMatchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeKeywordMatchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeKeywordMatchType").toString()));
      }
      if ((jsonObj.get("negativeKeywordStatus") != null && !jsonObj.get("negativeKeywordStatus").isJsonNull()) && !jsonObj.get("negativeKeywordStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeKeywordStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeKeywordStatus").toString()));
      }
      if ((jsonObj.get("negativeKeywordText") != null && !jsonObj.get("negativeKeywordText").isJsonNull()) && !jsonObj.get("negativeKeywordText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeKeywordText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeKeywordText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NegativeKeyword.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NegativeKeyword' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NegativeKeyword> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NegativeKeyword.class));

       return (TypeAdapter<T>) new TypeAdapter<NegativeKeyword>() {
           @Override
           public void write(JsonWriter out, NegativeKeyword value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NegativeKeyword read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NegativeKeyword given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NegativeKeyword
   * @throws IOException if the JSON string is invalid with respect to NegativeKeyword
   */
  public static NegativeKeyword fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NegativeKeyword.class);
  }

  /**
   * Convert an instance of NegativeKeyword to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

