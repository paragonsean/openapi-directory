/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines all rules/inclusion filters used to add listings to campaigns or promotions. Use of the specific fields is different for campaigns or promotions. See &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html \&quot;&gt;Using the selectionRules container&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SelectionRule {
  public static final String SERIALIZED_NAME_BRANDS = "brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<String> brands = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_IDS = "categoryIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private List<String> categoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_SCOPE = "categoryScope";
  @SerializedName(SERIALIZED_NAME_CATEGORY_SCOPE)
  private String categoryScope;

  public static final String SERIALIZED_NAME_LISTING_CONDITION_IDS = "listingConditionIds";
  @SerializedName(SERIALIZED_NAME_LISTING_CONDITION_IDS)
  private List<String> listingConditionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_PRICE = "maxPrice";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private Amount maxPrice;

  public static final String SERIALIZED_NAME_MIN_PRICE = "minPrice";
  @SerializedName(SERIALIZED_NAME_MIN_PRICE)
  private Amount minPrice;

  public SelectionRule() {
  }

  public SelectionRule brands(List<String> brands) {
    this.brands = brands;
    return this;
  }

  public SelectionRule addBrandsItem(String brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

  /**
   * An array of product brands. For more details, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html \&quot;&gt;Using the selectionRules container&lt;/a&gt;.
   * @return brands
   */
  @javax.annotation.Nullable
  public List<String> getBrands() {
    return brands;
  }

  public void setBrands(List<String> brands) {
    this.brands = brands;
  }


  public SelectionRule categoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public SelectionRule addCategoryIdsItem(String categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

  /**
   * This field contains an array of the associated category ID(s).&lt;br&gt;&lt;br&gt;For &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \&quot;&gt;Item promotions&lt;/a&gt;, a single-item array containing the category ID associated with the promotion. Required when used in an Item promotion and either specifying a &lt;b&gt;selectionRules&lt;/b&gt; container or when &lt;b&gt;inventoryCriterionType&lt;/b&gt; is set to &lt;code&gt;INVENTORY_BY_RULE&lt;/code&gt;.&lt;br&gt;&lt;br&gt;For &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \&quot;&gt;Promoted Listing campaigns&lt;/a&gt;, an array of category ID(s) associated with the campaign. &lt;br&gt;&lt;br&gt;For information on how to get category IDs, see &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#eBay \&quot;&gt;eBay Marketplace category IDs&lt;/a&gt; and &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Seller \&quot;&gt;Seller store category IDs&lt;/a&gt;
   * @return categoryIds
   */
  @javax.annotation.Nullable
  public List<String> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public SelectionRule categoryScope(String categoryScope) {
    this.categoryScope = categoryScope;
    return this;
  }

  /**
   * This enumerated value indicates if the category ID for the item is an identifier for eBay categories or for a seller&#39;s eBay store categories. &lt;br&gt;&lt;br&gt;For &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \&quot;&gt;Promoted Listing campaigns&lt;/a&gt;, this field includes the type of the category ID for the item(s) to be included in the campaign.&lt;br&gt;&lt;br&gt;For &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \&quot;&gt;Item promotions&lt;/a&gt;, this field identifies the scope for the corresponding array as eBay categories or for a seller&#39;s eBay store categories. Required when used in an Item promotion and &lt;b&gt;inventoryCriterionType&lt;/b&gt; is set to &lt;code&gt;INVENTORY_BY_RULE&lt;/code&gt;.  For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/pls:CategoryScopeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return categoryScope
   */
  @javax.annotation.Nullable
  public String getCategoryScope() {
    return categoryScope;
  }

  public void setCategoryScope(String categoryScope) {
    this.categoryScope = categoryScope;
  }


  public SelectionRule listingConditionIds(List<String> listingConditionIds) {
    this.listingConditionIds = listingConditionIds;
    return this;
  }

  public SelectionRule addListingConditionIdsItem(String listingConditionIdsItem) {
    if (this.listingConditionIds == null) {
      this.listingConditionIds = new ArrayList<>();
    }
    this.listingConditionIds.add(listingConditionIdsItem);
    return this;
  }

  /**
   * A comma-separated list of unique identifiers for the conditions of listings to be included&lt;br&gt;&lt;br&gt;For &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Campaign \&quot;&gt;Promoted Listing campaigns&lt;/a&gt;, refer to &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/pl-campaign-flow-pls.html#add-by-rule \&quot;&gt;Add items to the PLS campaign&lt;/a&gt;. Up to four IDs can be specified.&lt;br&gt;&lt;br&gt;For &lt;a href&#x3D; \&quot;/api-docs/sell/static/marketing/using-the-selectionrules-container.html#Promotio \&quot;&gt;Item promotions&lt;/a&gt;, refer to &lt;a href&#x3D; \&quot;/api-docs/sell/static/metadata/condition-id-values.html \&quot;&gt;Item condition ID and name values&lt;/a&gt;.
   * @return listingConditionIds
   */
  @javax.annotation.Nullable
  public List<String> getListingConditionIds() {
    return listingConditionIds;
  }

  public void setListingConditionIds(List<String> listingConditionIds) {
    this.listingConditionIds = listingConditionIds;
  }


  public SelectionRule maxPrice(Amount maxPrice) {
    this.maxPrice = maxPrice;
    return this;
  }

  /**
   * Get maxPrice
   * @return maxPrice
   */
  @javax.annotation.Nullable
  public Amount getMaxPrice() {
    return maxPrice;
  }

  public void setMaxPrice(Amount maxPrice) {
    this.maxPrice = maxPrice;
  }


  public SelectionRule minPrice(Amount minPrice) {
    this.minPrice = minPrice;
    return this;
  }

  /**
   * Get minPrice
   * @return minPrice
   */
  @javax.annotation.Nullable
  public Amount getMinPrice() {
    return minPrice;
  }

  public void setMinPrice(Amount minPrice) {
    this.minPrice = minPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectionRule selectionRule = (SelectionRule) o;
    return Objects.equals(this.brands, selectionRule.brands) &&
        Objects.equals(this.categoryIds, selectionRule.categoryIds) &&
        Objects.equals(this.categoryScope, selectionRule.categoryScope) &&
        Objects.equals(this.listingConditionIds, selectionRule.listingConditionIds) &&
        Objects.equals(this.maxPrice, selectionRule.maxPrice) &&
        Objects.equals(this.minPrice, selectionRule.minPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brands, categoryIds, categoryScope, listingConditionIds, maxPrice, minPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectionRule {\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    categoryScope: ").append(toIndentedString(categoryScope)).append("\n");
    sb.append("    listingConditionIds: ").append(toIndentedString(listingConditionIds)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    minPrice: ").append(toIndentedString(minPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brands");
    openapiFields.add("categoryIds");
    openapiFields.add("categoryScope");
    openapiFields.add("listingConditionIds");
    openapiFields.add("maxPrice");
    openapiFields.add("minPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SelectionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelectionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelectionRule is not found in the empty JSON string", SelectionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelectionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelectionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("brands") != null && !jsonObj.get("brands").isJsonNull() && !jsonObj.get("brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brands` to be an array in the JSON string but got `%s`", jsonObj.get("brands").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryIds") != null && !jsonObj.get("categoryIds").isJsonNull() && !jsonObj.get("categoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoryIds").toString()));
      }
      if ((jsonObj.get("categoryScope") != null && !jsonObj.get("categoryScope").isJsonNull()) && !jsonObj.get("categoryScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryScope").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listingConditionIds") != null && !jsonObj.get("listingConditionIds").isJsonNull() && !jsonObj.get("listingConditionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingConditionIds` to be an array in the JSON string but got `%s`", jsonObj.get("listingConditionIds").toString()));
      }
      // validate the optional field `maxPrice`
      if (jsonObj.get("maxPrice") != null && !jsonObj.get("maxPrice").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("maxPrice"));
      }
      // validate the optional field `minPrice`
      if (jsonObj.get("minPrice") != null && !jsonObj.get("minPrice").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("minPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelectionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelectionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelectionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelectionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<SelectionRule>() {
           @Override
           public void write(JsonWriter out, SelectionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelectionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SelectionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SelectionRule
   * @throws IOException if the JSON string is invalid with respect to SelectionRule
   */
  public static SelectionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelectionRule.class);
  }

  /**
   * Convert an instance of SelectionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

