/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields in an Promotions Manager Summary report. Reports are formatted in JSON. For more details, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pm-summary-reports.html\&quot;&gt;Reading item promotion Summary reports&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SummaryReportResponse {
  public static final String SERIALIZED_NAME_BASE_SALE = "baseSale";
  @SerializedName(SERIALIZED_NAME_BASE_SALE)
  private Amount baseSale;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_PERCENTAGE_SALES_LIFT = "percentageSalesLift";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_SALES_LIFT)
  private String percentageSalesLift;

  public static final String SERIALIZED_NAME_PROMOTION_SALE = "promotionSale";
  @SerializedName(SERIALIZED_NAME_PROMOTION_SALE)
  private Amount promotionSale;

  public static final String SERIALIZED_NAME_TOTAL_SALE = "totalSale";
  @SerializedName(SERIALIZED_NAME_TOTAL_SALE)
  private Amount totalSale;

  public SummaryReportResponse() {
  }

  public SummaryReportResponse baseSale(Amount baseSale) {
    this.baseSale = baseSale;
    return this;
  }

  /**
   * Get baseSale
   * @return baseSale
   */
  @javax.annotation.Nullable
  public Amount getBaseSale() {
    return baseSale;
  }

  public void setBaseSale(Amount baseSale) {
    this.baseSale = baseSale;
  }


  public SummaryReportResponse lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date the report was generated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public SummaryReportResponse percentageSalesLift(String percentageSalesLift) {
    this.percentageSalesLift = percentageSalesLift;
    return this;
  }

  /**
   * The percentage of the total dollar amount gained due to promotions. This value is calculated as follows:  &lt;br&gt;&lt;br&gt;&lt;b&gt;precentageSalesLift&lt;/b&gt; &#x3D; &lt;b&gt;promotionSale&lt;/b&gt; / (&lt;b&gt;baseSale&lt;/b&gt; + &lt;b&gt;promotionSale&lt;/b&gt;)
   * @return percentageSalesLift
   */
  @javax.annotation.Nullable
  public String getPercentageSalesLift() {
    return percentageSalesLift;
  }

  public void setPercentageSalesLift(String percentageSalesLift) {
    this.percentageSalesLift = percentageSalesLift;
  }


  public SummaryReportResponse promotionSale(Amount promotionSale) {
    this.promotionSale = promotionSale;
    return this;
  }

  /**
   * Get promotionSale
   * @return promotionSale
   */
  @javax.annotation.Nullable
  public Amount getPromotionSale() {
    return promotionSale;
  }

  public void setPromotionSale(Amount promotionSale) {
    this.promotionSale = promotionSale;
  }


  public SummaryReportResponse totalSale(Amount totalSale) {
    this.totalSale = totalSale;
    return this;
  }

  /**
   * Get totalSale
   * @return totalSale
   */
  @javax.annotation.Nullable
  public Amount getTotalSale() {
    return totalSale;
  }

  public void setTotalSale(Amount totalSale) {
    this.totalSale = totalSale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryReportResponse summaryReportResponse = (SummaryReportResponse) o;
    return Objects.equals(this.baseSale, summaryReportResponse.baseSale) &&
        Objects.equals(this.lastUpdated, summaryReportResponse.lastUpdated) &&
        Objects.equals(this.percentageSalesLift, summaryReportResponse.percentageSalesLift) &&
        Objects.equals(this.promotionSale, summaryReportResponse.promotionSale) &&
        Objects.equals(this.totalSale, summaryReportResponse.totalSale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseSale, lastUpdated, percentageSalesLift, promotionSale, totalSale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryReportResponse {\n");
    sb.append("    baseSale: ").append(toIndentedString(baseSale)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    percentageSalesLift: ").append(toIndentedString(percentageSalesLift)).append("\n");
    sb.append("    promotionSale: ").append(toIndentedString(promotionSale)).append("\n");
    sb.append("    totalSale: ").append(toIndentedString(totalSale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseSale");
    openapiFields.add("lastUpdated");
    openapiFields.add("percentageSalesLift");
    openapiFields.add("promotionSale");
    openapiFields.add("totalSale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryReportResponse is not found in the empty JSON string", SummaryReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `baseSale`
      if (jsonObj.get("baseSale") != null && !jsonObj.get("baseSale").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("baseSale"));
      }
      if ((jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) && !jsonObj.get("lastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdated").toString()));
      }
      if ((jsonObj.get("percentageSalesLift") != null && !jsonObj.get("percentageSalesLift").isJsonNull()) && !jsonObj.get("percentageSalesLift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentageSalesLift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentageSalesLift").toString()));
      }
      // validate the optional field `promotionSale`
      if (jsonObj.get("promotionSale") != null && !jsonObj.get("promotionSale").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("promotionSale"));
      }
      // validate the optional field `totalSale`
      if (jsonObj.get("totalSale") != null && !jsonObj.get("totalSale").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("totalSale"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryReportResponse>() {
           @Override
           public void write(JsonWriter out, SummaryReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryReportResponse
   * @throws IOException if the JSON string is invalid with respect to SummaryReportResponse
   */
  public static SummaryReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryReportResponse.class);
  }

  /**
   * Convert an instance of SummaryReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

