/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DynamicAdRatePreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines how the Promoted Listings fee is calculated for a Promoted Listings ad campaign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FundingStrategy {
  public static final String SERIALIZED_NAME_AD_RATE_STRATEGY = "adRateStrategy";
  @SerializedName(SERIALIZED_NAME_AD_RATE_STRATEGY)
  private String adRateStrategy;

  public static final String SERIALIZED_NAME_BID_PERCENTAGE = "bidPercentage";
  @SerializedName(SERIALIZED_NAME_BID_PERCENTAGE)
  private String bidPercentage;

  public static final String SERIALIZED_NAME_DYNAMIC_AD_RATE_PREFERENCES = "dynamicAdRatePreferences";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_AD_RATE_PREFERENCES)
  private List<DynamicAdRatePreference> dynamicAdRatePreferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNDING_MODEL = "fundingModel";
  @SerializedName(SERIALIZED_NAME_FUNDING_MODEL)
  private String fundingModel;

  public FundingStrategy() {
  }

  public FundingStrategy adRateStrategy(String adRateStrategy) {
    this.adRateStrategy = adRateStrategy;
    return this;
  }

  /**
   * The ad rate strategy that shall be applied to the campaign. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/pls:AdRateStrategyEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return adRateStrategy
   */
  @javax.annotation.Nullable
  public String getAdRateStrategy() {
    return adRateStrategy;
  }

  public void setAdRateStrategy(String adRateStrategy) {
    this.adRateStrategy = adRateStrategy;
  }


  public FundingStrategy bidPercentage(String bidPercentage) {
    this.bidPercentage = bidPercentage;
    return this;
  }

  /**
   * The user-defined &lt;b&gt;bid percentage&lt;/b&gt; (also known as the &lt;i&gt;ad rate&lt;/i&gt;) sets the level that eBay increases the visibility in search results for the associated listing. The higher the &lt;b&gt;bidPercentage&lt;/b&gt; value, the more eBay promotes the listing.  &lt;br&gt;&lt;br&gt;The value specified here is also used to calculate the Promoted Listings fee. This percentage value is multiplied by the final sales price to determine the fee. &lt;br&gt;&lt;br&gt;The Promoted Listings fee is determined at the time the transaction completes and the seller is assessed the fee only when an item sells through a Promoted Listings ad campaign. &lt;br&gt;&lt;br&gt;The &lt;b&gt;bidPercentage&lt;/b&gt; is a single precision value that is guided by the following rules: &lt;ul&gt;&lt;li&gt;These values are &lt;b&gt;valid&lt;/b&gt;:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;4.1&lt;/code&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;5.0&lt;/code&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;5.5&lt;/code&gt;, ...&lt;/li&gt;  &lt;li&gt;These values are &lt;b&gt;not valid&lt;/b&gt;:&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;0.01&lt;/code&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;10.75&lt;/code&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;99.99&lt;/code&gt;,&lt;br /&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;and so on.&lt;/li&gt;&lt;/ul&gt;This is the default bid percentage for the campaigns using the Cost Per Sale (CPS) funding model, and this value will be overridden by any ads in the campaign that have their own set bid percentages.&lt;br /&gt;&lt;br /&gt;If a bid percentage is not provided for an ad, eBay uses the default bid percentage of the associated campaign.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt;This field is only relevant for campaigns that use the CPS funding model and a fixed ad rate. It is not used for campaigns that use the Cost Per Click (CPC) funding model and should not be provided when the selected adRateStrategy for the campaign is dynamic.&lt;/span&gt;&lt;br /&gt;&lt;b&gt;Minimum value:&lt;/b&gt; 2.0 &lt;br&gt;&lt;b&gt;Maximum value:&lt;/b&gt; 100.0
   * @return bidPercentage
   */
  @javax.annotation.Nullable
  public String getBidPercentage() {
    return bidPercentage;
  }

  public void setBidPercentage(String bidPercentage) {
    this.bidPercentage = bidPercentage;
  }


  public FundingStrategy dynamicAdRatePreferences(List<DynamicAdRatePreference> dynamicAdRatePreferences) {
    this.dynamicAdRatePreferences = dynamicAdRatePreferences;
    return this;
  }

  public FundingStrategy addDynamicAdRatePreferencesItem(DynamicAdRatePreference dynamicAdRatePreferencesItem) {
    if (this.dynamicAdRatePreferences == null) {
      this.dynamicAdRatePreferences = new ArrayList<>();
    }
    this.dynamicAdRatePreferences.add(dynamicAdRatePreferencesItem);
    return this;
  }

  /**
   * A field that indicates whether a single, user-defined bid percentage (also known as the &lt;i&gt;ad rate&lt;/i&gt;) should be used, or whether eBay should automatically adjust listings to maintain the daily suggested bid percentage.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; Dynamic adjustment is only applicable when the &lt;b&gt;adRateStrategy&lt;/b&gt; is set to &lt;code&gt;DYNAMIC&lt;/code&gt;.&lt;/span&gt;&lt;br /&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;FIXED&lt;/code&gt;
   * @return dynamicAdRatePreferences
   */
  @javax.annotation.Nullable
  public List<DynamicAdRatePreference> getDynamicAdRatePreferences() {
    return dynamicAdRatePreferences;
  }

  public void setDynamicAdRatePreferences(List<DynamicAdRatePreference> dynamicAdRatePreferences) {
    this.dynamicAdRatePreferences = dynamicAdRatePreferences;
  }


  public FundingStrategy fundingModel(String fundingModel) {
    this.fundingModel = fundingModel;
    return this;
  }

  /**
   * Indicates the model that eBay uses to calculate the Promoted Listings fee. &lt;p&gt;For a description of the funding model types, refer to &lt;b&gt;FundingModelTypeEnum&lt;/b&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/pls:FundingModelEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return fundingModel
   */
  @javax.annotation.Nullable
  public String getFundingModel() {
    return fundingModel;
  }

  public void setFundingModel(String fundingModel) {
    this.fundingModel = fundingModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundingStrategy fundingStrategy = (FundingStrategy) o;
    return Objects.equals(this.adRateStrategy, fundingStrategy.adRateStrategy) &&
        Objects.equals(this.bidPercentage, fundingStrategy.bidPercentage) &&
        Objects.equals(this.dynamicAdRatePreferences, fundingStrategy.dynamicAdRatePreferences) &&
        Objects.equals(this.fundingModel, fundingStrategy.fundingModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adRateStrategy, bidPercentage, dynamicAdRatePreferences, fundingModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundingStrategy {\n");
    sb.append("    adRateStrategy: ").append(toIndentedString(adRateStrategy)).append("\n");
    sb.append("    bidPercentage: ").append(toIndentedString(bidPercentage)).append("\n");
    sb.append("    dynamicAdRatePreferences: ").append(toIndentedString(dynamicAdRatePreferences)).append("\n");
    sb.append("    fundingModel: ").append(toIndentedString(fundingModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adRateStrategy");
    openapiFields.add("bidPercentage");
    openapiFields.add("dynamicAdRatePreferences");
    openapiFields.add("fundingModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundingStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundingStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundingStrategy is not found in the empty JSON string", FundingStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundingStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundingStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adRateStrategy") != null && !jsonObj.get("adRateStrategy").isJsonNull()) && !jsonObj.get("adRateStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adRateStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adRateStrategy").toString()));
      }
      if ((jsonObj.get("bidPercentage") != null && !jsonObj.get("bidPercentage").isJsonNull()) && !jsonObj.get("bidPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidPercentage").toString()));
      }
      if (jsonObj.get("dynamicAdRatePreferences") != null && !jsonObj.get("dynamicAdRatePreferences").isJsonNull()) {
        JsonArray jsonArraydynamicAdRatePreferences = jsonObj.getAsJsonArray("dynamicAdRatePreferences");
        if (jsonArraydynamicAdRatePreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicAdRatePreferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicAdRatePreferences` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicAdRatePreferences").toString()));
          }

          // validate the optional field `dynamicAdRatePreferences` (array)
          for (int i = 0; i < jsonArraydynamicAdRatePreferences.size(); i++) {
            DynamicAdRatePreference.validateJsonElement(jsonArraydynamicAdRatePreferences.get(i));
          };
        }
      }
      if ((jsonObj.get("fundingModel") != null && !jsonObj.get("fundingModel").isJsonNull()) && !jsonObj.get("fundingModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingModel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundingStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundingStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundingStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundingStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<FundingStrategy>() {
           @Override
           public void write(JsonWriter out, FundingStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundingStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundingStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundingStrategy
   * @throws IOException if the JSON string is invalid with respect to FundingStrategy
   */
  public static FundingStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundingStrategy.class);
  }

  /**
   * Convert an instance of FundingStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

