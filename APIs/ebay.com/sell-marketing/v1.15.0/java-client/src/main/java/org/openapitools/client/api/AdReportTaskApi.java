/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateReportTask;
import org.openapitools.client.model.ReportTask;
import org.openapitools.client.model.ReportTaskPagedCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdReportTaskApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdReportTaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdReportTaskApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createReportTask
     * @param createReportTask The container for the fields that define the report task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReportTaskCall(CreateReportTask createReportTask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReportTask;

        // create path and map variables
        String localVarPath = "/ad_report_task";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_auth", "api_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReportTaskValidateBeforeCall(CreateReportTask createReportTask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createReportTask' is set
        if (createReportTask == null) {
            throw new ApiException("Missing the required parameter 'createReportTask' when calling createReportTask(Async)");
        }

        return createReportTaskCall(createReportTask, _callback);

    }

    /**
     * 
     * &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Using multiple funding models in one report is deprecated. If multiple funding models are used, a Warning will be returned in a header. This functionality will be decommissioned on April 3, 2023. See &lt;a href&#x3D;\&quot;/develop/apis/api-deprecation-status\&quot;&gt;API Deprecation Status&lt;/a&gt; for details.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This method creates a &lt;i&gt;report task&lt;/i&gt;, which generates a Promoted Listings report based on the values specified in the call.&lt;br /&gt;&lt;br /&gt;The report is generated based on the criteria you specify, including the report type, the report&#39;s dimensions and metrics, the report&#39;s start and end dates, the listings to include in the report, and more. &lt;i&gt;Metrics &lt;/i&gt;are the quantitative measurements in the report while &lt;i&gt;dimensions&lt;/i&gt; specify the attributes of the data included in the reports.&lt;br /&gt;&lt;br /&gt;When creating a report task, you can specify the items you want included in the report. The items you specify, using either &lt;b&gt;listingId&lt;/b&gt; or &lt;b&gt;inventoryReference&lt;/b&gt; values, must be in a Promoted Listings campaign for them to be included in the report.&lt;br /&gt;&lt;br /&gt;For details on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This call returns the URL to the report task in the &lt;b&gt;Location&lt;/b&gt; response header, and the URL includes the report-task ID.&lt;br /&gt;&lt;br /&gt;Reports often take time to generate and it&#39;s common for this call to return an HTTP status of &lt;code&gt;202&lt;/code&gt;, which indicates the report is being generated. Call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt; (or &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTask\&quot;&gt;getReportTask&lt;/a&gt; with the report-task ID) to determine the status of a Promoted Listings report. When a report is complete, eBay sets its status to &lt;b&gt;SUCCESS&lt;/b&gt; and you can download it using the URL returned in the &lt;b&gt;reportHref&lt;/b&gt; field of the &lt;b&gt;getReportTask&lt;/b&gt; call. Report files are tab-separated value gzip files with a file extension of &lt;code&gt;.tsv.gz&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The reporting of some data related to sales and ad-fees may require a 72-hour (&lt;b&gt;maximum&lt;/b&gt;) adjustment period which is often referred to as the &lt;i&gt;Reconciliation Period&lt;/i&gt;. Such adjustment periods should, on average, be minimal. However, at any given time, the &lt;b&gt;payments&lt;/b&gt; tab may be used to view those amounts that have actually been charged.&lt;/span&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; This call fails if you don&#39;t submit all the required fields for the specified report type. Fields not supported by the specified report type are ignored. Call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_metadata/methods/getReportMetadata\&quot;&gt;getReportMetadata&lt;/a&gt; to retrieve a list of the fields you need to configure for each Promoted Listings report type.&lt;/span&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param createReportTask The container for the fields that define the report task. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public void createReportTask(CreateReportTask createReportTask) throws ApiException {
        createReportTaskWithHttpInfo(createReportTask);
    }

    /**
     * 
     * &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Using multiple funding models in one report is deprecated. If multiple funding models are used, a Warning will be returned in a header. This functionality will be decommissioned on April 3, 2023. See &lt;a href&#x3D;\&quot;/develop/apis/api-deprecation-status\&quot;&gt;API Deprecation Status&lt;/a&gt; for details.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This method creates a &lt;i&gt;report task&lt;/i&gt;, which generates a Promoted Listings report based on the values specified in the call.&lt;br /&gt;&lt;br /&gt;The report is generated based on the criteria you specify, including the report type, the report&#39;s dimensions and metrics, the report&#39;s start and end dates, the listings to include in the report, and more. &lt;i&gt;Metrics &lt;/i&gt;are the quantitative measurements in the report while &lt;i&gt;dimensions&lt;/i&gt; specify the attributes of the data included in the reports.&lt;br /&gt;&lt;br /&gt;When creating a report task, you can specify the items you want included in the report. The items you specify, using either &lt;b&gt;listingId&lt;/b&gt; or &lt;b&gt;inventoryReference&lt;/b&gt; values, must be in a Promoted Listings campaign for them to be included in the report.&lt;br /&gt;&lt;br /&gt;For details on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This call returns the URL to the report task in the &lt;b&gt;Location&lt;/b&gt; response header, and the URL includes the report-task ID.&lt;br /&gt;&lt;br /&gt;Reports often take time to generate and it&#39;s common for this call to return an HTTP status of &lt;code&gt;202&lt;/code&gt;, which indicates the report is being generated. Call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt; (or &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTask\&quot;&gt;getReportTask&lt;/a&gt; with the report-task ID) to determine the status of a Promoted Listings report. When a report is complete, eBay sets its status to &lt;b&gt;SUCCESS&lt;/b&gt; and you can download it using the URL returned in the &lt;b&gt;reportHref&lt;/b&gt; field of the &lt;b&gt;getReportTask&lt;/b&gt; call. Report files are tab-separated value gzip files with a file extension of &lt;code&gt;.tsv.gz&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The reporting of some data related to sales and ad-fees may require a 72-hour (&lt;b&gt;maximum&lt;/b&gt;) adjustment period which is often referred to as the &lt;i&gt;Reconciliation Period&lt;/i&gt;. Such adjustment periods should, on average, be minimal. However, at any given time, the &lt;b&gt;payments&lt;/b&gt; tab may be used to view those amounts that have actually been charged.&lt;/span&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; This call fails if you don&#39;t submit all the required fields for the specified report type. Fields not supported by the specified report type are ignored. Call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_metadata/methods/getReportMetadata\&quot;&gt;getReportMetadata&lt;/a&gt; to retrieve a list of the fields you need to configure for each Promoted Listings report type.&lt;/span&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param createReportTask The container for the fields that define the report task. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createReportTaskWithHttpInfo(CreateReportTask createReportTask) throws ApiException {
        okhttp3.Call localVarCall = createReportTaskValidateBeforeCall(createReportTask, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Using multiple funding models in one report is deprecated. If multiple funding models are used, a Warning will be returned in a header. This functionality will be decommissioned on April 3, 2023. See &lt;a href&#x3D;\&quot;/develop/apis/api-deprecation-status\&quot;&gt;API Deprecation Status&lt;/a&gt; for details.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This method creates a &lt;i&gt;report task&lt;/i&gt;, which generates a Promoted Listings report based on the values specified in the call.&lt;br /&gt;&lt;br /&gt;The report is generated based on the criteria you specify, including the report type, the report&#39;s dimensions and metrics, the report&#39;s start and end dates, the listings to include in the report, and more. &lt;i&gt;Metrics &lt;/i&gt;are the quantitative measurements in the report while &lt;i&gt;dimensions&lt;/i&gt; specify the attributes of the data included in the reports.&lt;br /&gt;&lt;br /&gt;When creating a report task, you can specify the items you want included in the report. The items you specify, using either &lt;b&gt;listingId&lt;/b&gt; or &lt;b&gt;inventoryReference&lt;/b&gt; values, must be in a Promoted Listings campaign for them to be included in the report.&lt;br /&gt;&lt;br /&gt;For details on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This call returns the URL to the report task in the &lt;b&gt;Location&lt;/b&gt; response header, and the URL includes the report-task ID.&lt;br /&gt;&lt;br /&gt;Reports often take time to generate and it&#39;s common for this call to return an HTTP status of &lt;code&gt;202&lt;/code&gt;, which indicates the report is being generated. Call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt; (or &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTask\&quot;&gt;getReportTask&lt;/a&gt; with the report-task ID) to determine the status of a Promoted Listings report. When a report is complete, eBay sets its status to &lt;b&gt;SUCCESS&lt;/b&gt; and you can download it using the URL returned in the &lt;b&gt;reportHref&lt;/b&gt; field of the &lt;b&gt;getReportTask&lt;/b&gt; call. Report files are tab-separated value gzip files with a file extension of &lt;code&gt;.tsv.gz&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; The reporting of some data related to sales and ad-fees may require a 72-hour (&lt;b&gt;maximum&lt;/b&gt;) adjustment period which is often referred to as the &lt;i&gt;Reconciliation Period&lt;/i&gt;. Such adjustment periods should, on average, be minimal. However, at any given time, the &lt;b&gt;payments&lt;/b&gt; tab may be used to view those amounts that have actually been charged.&lt;/span&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; This call fails if you don&#39;t submit all the required fields for the specified report type. Fields not supported by the specified report type are ignored. Call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_metadata/methods/getReportMetadata\&quot;&gt;getReportMetadata&lt;/a&gt; to retrieve a list of the fields you need to configure for each Promoted Listings report type.&lt;/span&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param createReportTask The container for the fields that define the report task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReportTaskAsync(CreateReportTask createReportTask, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReportTaskValidateBeforeCall(createReportTask, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReportTask
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReportTaskCall(String reportTaskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ad_report_task/{report_task_id}"
            .replace("{" + "report_task_id" + "}", localVarApiClient.escapeString(reportTaskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_auth", "api_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReportTaskValidateBeforeCall(String reportTaskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportTaskId' is set
        if (reportTaskId == null) {
            throw new ApiException("Missing the required parameter 'reportTaskId' when calling deleteReportTask(Async)");
        }

        return deleteReportTaskCall(reportTaskId, _callback);

    }

    /**
     * 
     * This call deletes the report task specified by the &lt;b&gt;report_task_id&lt;/b&gt; path parameter. This method also deletes any reports generated by the report task.  &lt;p&gt;Report task IDs are generated by eBay when you call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. Get a complete list of a seller&#39;s report-task IDs by calling &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReportTask(String reportTaskId) throws ApiException {
        deleteReportTaskWithHttpInfo(reportTaskId);
    }

    /**
     * 
     * This call deletes the report task specified by the &lt;b&gt;report_task_id&lt;/b&gt; path parameter. This method also deletes any reports generated by the report task.  &lt;p&gt;Report task IDs are generated by eBay when you call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. Get a complete list of a seller&#39;s report-task IDs by calling &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReportTaskWithHttpInfo(String reportTaskId) throws ApiException {
        okhttp3.Call localVarCall = deleteReportTaskValidateBeforeCall(reportTaskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This call deletes the report task specified by the &lt;b&gt;report_task_id&lt;/b&gt; path parameter. This method also deletes any reports generated by the report task.  &lt;p&gt;Report task IDs are generated by eBay when you call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. Get a complete list of a seller&#39;s report-task IDs by calling &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReportTaskAsync(String reportTaskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReportTaskValidateBeforeCall(reportTaskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportTask
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTaskCall(String reportTaskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ad_report_task/{report_task_id}"
            .replace("{" + "report_task_id" + "}", localVarApiClient.escapeString(reportTaskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_auth", "api_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportTaskValidateBeforeCall(String reportTaskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportTaskId' is set
        if (reportTaskId == null) {
            throw new ApiException("Missing the required parameter 'reportTaskId' when calling getReportTask(Async)");
        }

        return getReportTaskCall(reportTaskId, _callback);

    }

    /**
     * 
     * This call returns the details of a specific Promoted Listings report task, as specified by the &lt;b&gt;report_task_id&lt;/b&gt; path parameter. &lt;p&gt;The report task includes the report criteria (such as the report dimensions, metrics, and included listing) and the report-generation rules (such as starting and ending dates for the specified report task).&lt;/p&gt;  &lt;p&gt;Report-task IDs are generated by eBay when you call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. Get a complete list of a seller&#39;s report-task IDs by calling &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @return ReportTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportTask getReportTask(String reportTaskId) throws ApiException {
        ApiResponse<ReportTask> localVarResp = getReportTaskWithHttpInfo(reportTaskId);
        return localVarResp.getData();
    }

    /**
     * 
     * This call returns the details of a specific Promoted Listings report task, as specified by the &lt;b&gt;report_task_id&lt;/b&gt; path parameter. &lt;p&gt;The report task includes the report criteria (such as the report dimensions, metrics, and included listing) and the report-generation rules (such as starting and ending dates for the specified report task).&lt;/p&gt;  &lt;p&gt;Report-task IDs are generated by eBay when you call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. Get a complete list of a seller&#39;s report-task IDs by calling &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @return ApiResponse&lt;ReportTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportTask> getReportTaskWithHttpInfo(String reportTaskId) throws ApiException {
        okhttp3.Call localVarCall = getReportTaskValidateBeforeCall(reportTaskId, null);
        Type localVarReturnType = new TypeToken<ReportTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This call returns the details of a specific Promoted Listings report task, as specified by the &lt;b&gt;report_task_id&lt;/b&gt; path parameter. &lt;p&gt;The report task includes the report criteria (such as the report dimensions, metrics, and included listing) and the report-generation rules (such as starting and ending dates for the specified report task).&lt;/p&gt;  &lt;p&gt;Report-task IDs are generated by eBay when you call &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. Get a complete list of a seller&#39;s report-task IDs by calling &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/getReportTasks\&quot;&gt;getReportTasks&lt;/a&gt;.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param reportTaskId A unique eBay-assigned ID for the report task that&#39;s generated when the report task is created by a call to &lt;a href&#x3D;\&quot;/api-docs/sell/marketing/resources/ad_report_task/methods/createReportTask\&quot;&gt;createReportTask&lt;/a&gt;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTaskAsync(String reportTaskId, final ApiCallback<ReportTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportTaskValidateBeforeCall(reportTaskId, _callback);
        Type localVarReturnType = new TypeToken<ReportTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportTasks
     * @param limit Specifies the maximum number of report tasks to return on a page in the paginated response.  &lt;p&gt;&lt;b&gt;Default:&lt;/b&gt; 10&lt;br&gt;&lt;b&gt;Maximum:&lt;/b&gt; 500&lt;/p&gt; (optional)
     * @param offset Specifies the number of report tasks to skip in the result set before returning the first report in the paginated response.  &lt;p&gt;Combine &lt;b&gt;offset&lt;/b&gt; with the &lt;b&gt;limit&lt;/b&gt; query parameter to control the reports returned in the response. For example, if you supply an &lt;b&gt;offset&lt;/b&gt; of &lt;code&gt;0&lt;/code&gt; and a &lt;b&gt;limit&lt;/b&gt; of &lt;code&gt;10&lt;/code&gt;, the response contains the first 10 reports from the complete list of report tasks retrieved by the call. If &lt;b&gt;offset&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt; and &lt;b&gt;limit&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt;, the first page of the response contains reports 11-20 from the complete result set.&lt;/p&gt; &lt;b&gt;Default:&lt;/b&gt; 0 (optional)
     * @param reportTaskStatuses This parameter filters the returned report tasks by their status. Supply a comma-separated list of the report statuses you want returned. The results are filtered to include only the report statuses you specify.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The results might not include some report tasks if other search conditions exclude them.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid values: &lt;/b&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;PENDING&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;SUCCESS&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;FAILED&lt;/code&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTasksCall(String limit, String offset, String reportTaskStatuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ad_report_task";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (reportTaskStatuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_task_statuses", reportTaskStatuses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_auth", "api_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportTasksValidateBeforeCall(String limit, String offset, String reportTaskStatuses, final ApiCallback _callback) throws ApiException {
        return getReportTasksCall(limit, offset, reportTaskStatuses, _callback);

    }

    /**
     * 
     * This method returns information on all the existing report tasks related to a seller. &lt;p&gt;Use the &lt;b&gt;report_task_statuses&lt;/b&gt; query parameter to control which reports to return. You can paginate the result set by specifying a &lt;b&gt;limit&lt;/b&gt;, which dictates how many report tasks to return on each page of the response. Use the &lt;b&gt;offset&lt;/b&gt; parameter to specify how many reports to skip in the result set before returning the first result.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param limit Specifies the maximum number of report tasks to return on a page in the paginated response.  &lt;p&gt;&lt;b&gt;Default:&lt;/b&gt; 10&lt;br&gt;&lt;b&gt;Maximum:&lt;/b&gt; 500&lt;/p&gt; (optional)
     * @param offset Specifies the number of report tasks to skip in the result set before returning the first report in the paginated response.  &lt;p&gt;Combine &lt;b&gt;offset&lt;/b&gt; with the &lt;b&gt;limit&lt;/b&gt; query parameter to control the reports returned in the response. For example, if you supply an &lt;b&gt;offset&lt;/b&gt; of &lt;code&gt;0&lt;/code&gt; and a &lt;b&gt;limit&lt;/b&gt; of &lt;code&gt;10&lt;/code&gt;, the response contains the first 10 reports from the complete list of report tasks retrieved by the call. If &lt;b&gt;offset&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt; and &lt;b&gt;limit&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt;, the first page of the response contains reports 11-20 from the complete result set.&lt;/p&gt; &lt;b&gt;Default:&lt;/b&gt; 0 (optional)
     * @param reportTaskStatuses This parameter filters the returned report tasks by their status. Supply a comma-separated list of the report statuses you want returned. The results are filtered to include only the report statuses you specify.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The results might not include some report tasks if other search conditions exclude them.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid values: &lt;/b&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;PENDING&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;SUCCESS&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;FAILED&lt;/code&gt; (optional)
     * @return ReportTaskPagedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportTaskPagedCollection getReportTasks(String limit, String offset, String reportTaskStatuses) throws ApiException {
        ApiResponse<ReportTaskPagedCollection> localVarResp = getReportTasksWithHttpInfo(limit, offset, reportTaskStatuses);
        return localVarResp.getData();
    }

    /**
     * 
     * This method returns information on all the existing report tasks related to a seller. &lt;p&gt;Use the &lt;b&gt;report_task_statuses&lt;/b&gt; query parameter to control which reports to return. You can paginate the result set by specifying a &lt;b&gt;limit&lt;/b&gt;, which dictates how many report tasks to return on each page of the response. Use the &lt;b&gt;offset&lt;/b&gt; parameter to specify how many reports to skip in the result set before returning the first result.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param limit Specifies the maximum number of report tasks to return on a page in the paginated response.  &lt;p&gt;&lt;b&gt;Default:&lt;/b&gt; 10&lt;br&gt;&lt;b&gt;Maximum:&lt;/b&gt; 500&lt;/p&gt; (optional)
     * @param offset Specifies the number of report tasks to skip in the result set before returning the first report in the paginated response.  &lt;p&gt;Combine &lt;b&gt;offset&lt;/b&gt; with the &lt;b&gt;limit&lt;/b&gt; query parameter to control the reports returned in the response. For example, if you supply an &lt;b&gt;offset&lt;/b&gt; of &lt;code&gt;0&lt;/code&gt; and a &lt;b&gt;limit&lt;/b&gt; of &lt;code&gt;10&lt;/code&gt;, the response contains the first 10 reports from the complete list of report tasks retrieved by the call. If &lt;b&gt;offset&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt; and &lt;b&gt;limit&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt;, the first page of the response contains reports 11-20 from the complete result set.&lt;/p&gt; &lt;b&gt;Default:&lt;/b&gt; 0 (optional)
     * @param reportTaskStatuses This parameter filters the returned report tasks by their status. Supply a comma-separated list of the report statuses you want returned. The results are filtered to include only the report statuses you specify.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The results might not include some report tasks if other search conditions exclude them.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid values: &lt;/b&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;PENDING&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;SUCCESS&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;FAILED&lt;/code&gt; (optional)
     * @return ApiResponse&lt;ReportTaskPagedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportTaskPagedCollection> getReportTasksWithHttpInfo(String limit, String offset, String reportTaskStatuses) throws ApiException {
        okhttp3.Call localVarCall = getReportTasksValidateBeforeCall(limit, offset, reportTaskStatuses, null);
        Type localVarReturnType = new TypeToken<ReportTaskPagedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns information on all the existing report tasks related to a seller. &lt;p&gt;Use the &lt;b&gt;report_task_statuses&lt;/b&gt; query parameter to control which reports to return. You can paginate the result set by specifying a &lt;b&gt;limit&lt;/b&gt;, which dictates how many report tasks to return on each page of the response. Use the &lt;b&gt;offset&lt;/b&gt; parameter to specify how many reports to skip in the result set before returning the first result.&lt;/p&gt;&lt;br/&gt;&lt;div class&#x3D;\&quot;msgbox_important\&quot;&gt;&lt;p class&#x3D;\&quot;msgbox_importantInDiv\&quot; data-mc-autonum&#x3D;\&quot;&amp;lt;b&amp;gt;&amp;lt;span style&#x3D;&amp;quot;color: #dd1e31;&amp;quot; class&#x3D;&amp;quot;mcFormatColor&amp;quot;&amp;gt;Important! &amp;lt;/span&amp;gt;&amp;lt;/b&amp;gt;\&quot;&gt;&lt;span class&#x3D;\&quot;autonumber\&quot;&gt;&lt;span&gt;&lt;b&gt;&lt;span style&#x3D;\&quot;color: #dd1e31;\&quot; class&#x3D;\&quot;mcFormatColor\&quot;&gt;Important!&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;For &lt;b&gt;ad_report&lt;/b&gt; and &lt;b&gt;ad_report_task&lt;/b&gt; methods, the API call limit is subject to a per user quota. These API calls can &lt;b&gt;only&lt;/b&gt; be executed a maximum of 200 times per hour for each seller/user. If the number of calls per hour exceeds this limit, any new calls will be blocked for the next hour.&lt;/p&gt;&lt;/div&gt;
     * @param limit Specifies the maximum number of report tasks to return on a page in the paginated response.  &lt;p&gt;&lt;b&gt;Default:&lt;/b&gt; 10&lt;br&gt;&lt;b&gt;Maximum:&lt;/b&gt; 500&lt;/p&gt; (optional)
     * @param offset Specifies the number of report tasks to skip in the result set before returning the first report in the paginated response.  &lt;p&gt;Combine &lt;b&gt;offset&lt;/b&gt; with the &lt;b&gt;limit&lt;/b&gt; query parameter to control the reports returned in the response. For example, if you supply an &lt;b&gt;offset&lt;/b&gt; of &lt;code&gt;0&lt;/code&gt; and a &lt;b&gt;limit&lt;/b&gt; of &lt;code&gt;10&lt;/code&gt;, the response contains the first 10 reports from the complete list of report tasks retrieved by the call. If &lt;b&gt;offset&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt; and &lt;b&gt;limit&lt;/b&gt; is &lt;code&gt;10&lt;/code&gt;, the first page of the response contains reports 11-20 from the complete result set.&lt;/p&gt; &lt;b&gt;Default:&lt;/b&gt; 0 (optional)
     * @param reportTaskStatuses This parameter filters the returned report tasks by their status. Supply a comma-separated list of the report statuses you want returned. The results are filtered to include only the report statuses you specify.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The results might not include some report tasks if other search conditions exclude them.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid values: &lt;/b&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;PENDING&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;SUCCESS&lt;/code&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;FAILED&lt;/code&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportTasksAsync(String limit, String offset, String reportTaskStatuses, final ApiCallback<ReportTaskPagedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportTasksValidateBeforeCall(limit, offset, reportTaskStatuses, _callback);
        Type localVarReturnType = new TypeToken<ReportTaskPagedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
