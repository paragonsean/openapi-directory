/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionMetadata;
import org.openapitools.client.model.MetricMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields included in the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportMetadata {
  public static final String SERIALIZED_NAME_DIMENSION_METADATA = "dimensionMetadata";
  @SerializedName(SERIALIZED_NAME_DIMENSION_METADATA)
  private List<DimensionMetadata> dimensionMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_DIMENSIONS_TO_REQUEST = "maxNumberOfDimensionsToRequest";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_DIMENSIONS_TO_REQUEST)
  private Integer maxNumberOfDimensionsToRequest;

  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_METRICS_TO_REQUEST = "maxNumberOfMetricsToRequest";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_METRICS_TO_REQUEST)
  private Integer maxNumberOfMetricsToRequest;

  public static final String SERIALIZED_NAME_METRIC_METADATA = "metricMetadata";
  @SerializedName(SERIALIZED_NAME_METRIC_METADATA)
  private List<MetricMetadata> metricMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public ReportMetadata() {
  }

  public ReportMetadata dimensionMetadata(List<DimensionMetadata> dimensionMetadata) {
    this.dimensionMetadata = dimensionMetadata;
    return this;
  }

  public ReportMetadata addDimensionMetadataItem(DimensionMetadata dimensionMetadataItem) {
    if (this.dimensionMetadata == null) {
      this.dimensionMetadata = new ArrayList<>();
    }
    this.dimensionMetadata.add(dimensionMetadataItem);
    return this;
  }

  /**
   * A list containing the metadata for the dimension used in the report.
   * @return dimensionMetadata
   */
  @javax.annotation.Nullable
  public List<DimensionMetadata> getDimensionMetadata() {
    return dimensionMetadata;
  }

  public void setDimensionMetadata(List<DimensionMetadata> dimensionMetadata) {
    this.dimensionMetadata = dimensionMetadata;
  }


  public ReportMetadata maxNumberOfDimensionsToRequest(Integer maxNumberOfDimensionsToRequest) {
    this.maxNumberOfDimensionsToRequest = maxNumberOfDimensionsToRequest;
    return this;
  }

  /**
   * The maximum number of dimensions that can be requested for the specified report type.
   * @return maxNumberOfDimensionsToRequest
   */
  @javax.annotation.Nullable
  public Integer getMaxNumberOfDimensionsToRequest() {
    return maxNumberOfDimensionsToRequest;
  }

  public void setMaxNumberOfDimensionsToRequest(Integer maxNumberOfDimensionsToRequest) {
    this.maxNumberOfDimensionsToRequest = maxNumberOfDimensionsToRequest;
  }


  public ReportMetadata maxNumberOfMetricsToRequest(Integer maxNumberOfMetricsToRequest) {
    this.maxNumberOfMetricsToRequest = maxNumberOfMetricsToRequest;
    return this;
  }

  /**
   * The maximum number of metrics that can be requested for the specified report type.
   * @return maxNumberOfMetricsToRequest
   */
  @javax.annotation.Nullable
  public Integer getMaxNumberOfMetricsToRequest() {
    return maxNumberOfMetricsToRequest;
  }

  public void setMaxNumberOfMetricsToRequest(Integer maxNumberOfMetricsToRequest) {
    this.maxNumberOfMetricsToRequest = maxNumberOfMetricsToRequest;
  }


  public ReportMetadata metricMetadata(List<MetricMetadata> metricMetadata) {
    this.metricMetadata = metricMetadata;
    return this;
  }

  public ReportMetadata addMetricMetadataItem(MetricMetadata metricMetadataItem) {
    if (this.metricMetadata == null) {
      this.metricMetadata = new ArrayList<>();
    }
    this.metricMetadata.add(metricMetadataItem);
    return this;
  }

  /**
   * A list containing the metadata for the metrics in the report.
   * @return metricMetadata
   */
  @javax.annotation.Nullable
  public List<MetricMetadata> getMetricMetadata() {
    return metricMetadata;
  }

  public void setMetricMetadata(List<MetricMetadata> metricMetadata) {
    this.metricMetadata = metricMetadata;
  }


  public ReportMetadata reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * The &lt;b&gt;report_type&lt;/b&gt;, as specified in the request to create the report task.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; INVENTORY_PERFORMANCE_REPORT is not currently available; availability date is pending.&lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportMetadata reportMetadata = (ReportMetadata) o;
    return Objects.equals(this.dimensionMetadata, reportMetadata.dimensionMetadata) &&
        Objects.equals(this.maxNumberOfDimensionsToRequest, reportMetadata.maxNumberOfDimensionsToRequest) &&
        Objects.equals(this.maxNumberOfMetricsToRequest, reportMetadata.maxNumberOfMetricsToRequest) &&
        Objects.equals(this.metricMetadata, reportMetadata.metricMetadata) &&
        Objects.equals(this.reportType, reportMetadata.reportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionMetadata, maxNumberOfDimensionsToRequest, maxNumberOfMetricsToRequest, metricMetadata, reportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportMetadata {\n");
    sb.append("    dimensionMetadata: ").append(toIndentedString(dimensionMetadata)).append("\n");
    sb.append("    maxNumberOfDimensionsToRequest: ").append(toIndentedString(maxNumberOfDimensionsToRequest)).append("\n");
    sb.append("    maxNumberOfMetricsToRequest: ").append(toIndentedString(maxNumberOfMetricsToRequest)).append("\n");
    sb.append("    metricMetadata: ").append(toIndentedString(metricMetadata)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionMetadata");
    openapiFields.add("maxNumberOfDimensionsToRequest");
    openapiFields.add("maxNumberOfMetricsToRequest");
    openapiFields.add("metricMetadata");
    openapiFields.add("reportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportMetadata is not found in the empty JSON string", ReportMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensionMetadata") != null && !jsonObj.get("dimensionMetadata").isJsonNull()) {
        JsonArray jsonArraydimensionMetadata = jsonObj.getAsJsonArray("dimensionMetadata");
        if (jsonArraydimensionMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionMetadata").toString()));
          }

          // validate the optional field `dimensionMetadata` (array)
          for (int i = 0; i < jsonArraydimensionMetadata.size(); i++) {
            DimensionMetadata.validateJsonElement(jsonArraydimensionMetadata.get(i));
          };
        }
      }
      if (jsonObj.get("metricMetadata") != null && !jsonObj.get("metricMetadata").isJsonNull()) {
        JsonArray jsonArraymetricMetadata = jsonObj.getAsJsonArray("metricMetadata");
        if (jsonArraymetricMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("metricMetadata").toString()));
          }

          // validate the optional field `metricMetadata` (array)
          for (int i = 0; i < jsonArraymetricMetadata.size(); i++) {
            MetricMetadata.validateJsonElement(jsonArraymetricMetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("reportType") != null && !jsonObj.get("reportType").isJsonNull()) && !jsonObj.get("reportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportMetadata>() {
           @Override
           public void write(JsonWriter out, ReportMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportMetadata
   * @throws IOException if the JSON string is invalid with respect to ReportMetadata
   */
  public static ReportMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportMetadata.class);
  }

  /**
   * Convert an instance of ReportMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

