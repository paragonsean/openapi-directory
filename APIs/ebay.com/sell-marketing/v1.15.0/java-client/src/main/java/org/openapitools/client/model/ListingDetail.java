/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ItemMarkdownStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields that describe a listing that is in a promotion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingDetail {
  public static final String SERIALIZED_NAME_CURRENT_PRICE = "currentPrice";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE)
  private Amount currentPrice;

  public static final String SERIALIZED_NAME_FREE_SHIPPING = "freeShipping";
  @SerializedName(SERIALIZED_NAME_FREE_SHIPPING)
  private Boolean freeShipping;

  public static final String SERIALIZED_NAME_INVENTORY_REFERENCE_ID = "inventoryReferenceId";
  @SerializedName(SERIALIZED_NAME_INVENTORY_REFERENCE_ID)
  private String inventoryReferenceId;

  public static final String SERIALIZED_NAME_INVENTORY_REFERENCE_TYPE = "inventoryReferenceType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_REFERENCE_TYPE)
  private String inventoryReferenceType;

  public static final String SERIALIZED_NAME_LISTING_CATEGORY_ID = "listingCategoryId";
  @SerializedName(SERIALIZED_NAME_LISTING_CATEGORY_ID)
  private String listingCategoryId;

  public static final String SERIALIZED_NAME_LISTING_CONDITION = "listingCondition";
  @SerializedName(SERIALIZED_NAME_LISTING_CONDITION)
  private String listingCondition;

  public static final String SERIALIZED_NAME_LISTING_CONDITION_ID = "listingConditionId";
  @SerializedName(SERIALIZED_NAME_LISTING_CONDITION_ID)
  private String listingConditionId;

  public static final String SERIALIZED_NAME_LISTING_ID = "listingId";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private String listingId;

  public static final String SERIALIZED_NAME_LISTING_PROMOTION_STATUSES = "listingPromotionStatuses";
  @SerializedName(SERIALIZED_NAME_LISTING_PROMOTION_STATUSES)
  private List<ItemMarkdownStatus> listingPromotionStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_STORE_CATEGORY_ID = "storeCategoryId";
  @SerializedName(SERIALIZED_NAME_STORE_CATEGORY_ID)
  private String storeCategoryId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ListingDetail() {
  }

  public ListingDetail currentPrice(Amount currentPrice) {
    this.currentPrice = currentPrice;
    return this;
  }

  /**
   * Get currentPrice
   * @return currentPrice
   */
  @javax.annotation.Nullable
  public Amount getCurrentPrice() {
    return currentPrice;
  }

  public void setCurrentPrice(Amount currentPrice) {
    this.currentPrice = currentPrice;
  }


  public ListingDetail freeShipping(Boolean freeShipping) {
    this.freeShipping = freeShipping;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, the seller pays for the shipping (or that the item is marked for local pickup only) In this case, the listing does not have an associated shipping cost for the first listed domestic-shipping option (even if the first domestic-shipping option specifies a flat-rate or calculated shipping option). If &lt;code&gt;false&lt;/code&gt;, the buyer is required to pay for a flat-rate or calculated cost shipping service.
   * @return freeShipping
   */
  @javax.annotation.Nullable
  public Boolean getFreeShipping() {
    return freeShipping;
  }

  public void setFreeShipping(Boolean freeShipping) {
    this.freeShipping = freeShipping;
  }


  public ListingDetail inventoryReferenceId(String inventoryReferenceId) {
    this.inventoryReferenceId = inventoryReferenceId;
    return this;
  }

  /**
   * The seller&#39;s inventory reference ID for a listing. Also known as the \&quot;SKU\&quot; or \&quot;custom label,\&quot; an inventory reference ID is either the ID of the listing or, if the listing has variations (such as a shirt that&#39;s available in multiple sizes and colors), the ID of the parent listing.
   * @return inventoryReferenceId
   */
  @javax.annotation.Nullable
  public String getInventoryReferenceId() {
    return inventoryReferenceId;
  }

  public void setInventoryReferenceId(String inventoryReferenceId) {
    this.inventoryReferenceId = inventoryReferenceId;
  }


  public ListingDetail inventoryReferenceType(String inventoryReferenceType) {
    this.inventoryReferenceType = inventoryReferenceType;
    return this;
  }

  /**
   * Indicates the type of the &lt;b&gt;inventoryReferenceId&lt;/b&gt;, which can be either a single-SKU or a multi-SKU listing (&lt;code&gt;INVENTORY_ITEM&lt;/code&gt; and &lt;code&gt;INVENTORY_ITEM_GROUP&lt;/code&gt;, respectively).  &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This value is not currently returned in the response.
   * @return inventoryReferenceType
   */
  @javax.annotation.Nullable
  public String getInventoryReferenceType() {
    return inventoryReferenceType;
  }

  public void setInventoryReferenceType(String inventoryReferenceType) {
    this.inventoryReferenceType = inventoryReferenceType;
  }


  public ListingDetail listingCategoryId(String listingCategoryId) {
    this.listingCategoryId = listingCategoryId;
    return this;
  }

  /**
   * The ID of the category that listing belongs to. The ID is a numeric and unique identifier for the category that is assigned by eBay.
   * @return listingCategoryId
   */
  @javax.annotation.Nullable
  public String getListingCategoryId() {
    return listingCategoryId;
  }

  public void setListingCategoryId(String listingCategoryId) {
    this.listingCategoryId = listingCategoryId;
  }


  public ListingDetail listingCondition(String listingCondition) {
    this.listingCondition = listingCondition;
    return this;
  }

  /**
   * An eBay-assigned value that indicates condition of the associated item. For more information, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/metadata/condition-id-values.html\&quot;&gt;Item condition ID and name values&lt;/a&gt;.
   * @return listingCondition
   */
  @javax.annotation.Nullable
  public String getListingCondition() {
    return listingCondition;
  }

  public void setListingCondition(String listingCondition) {
    this.listingCondition = listingCondition;
  }


  public ListingDetail listingConditionId(String listingConditionId) {
    this.listingConditionId = listingConditionId;
    return this;
  }

  /**
   * The ID of the condition associated with the item. For more information, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/metadata/condition-id-values.html\&quot;&gt;Item condition ID and name values&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt; This value is not currently returned in the response.&lt;/span&gt;
   * @return listingConditionId
   */
  @javax.annotation.Nullable
  public String getListingConditionId() {
    return listingConditionId;
  }

  public void setListingConditionId(String listingConditionId) {
    this.listingConditionId = listingConditionId;
  }


  public ListingDetail listingId(String listingId) {
    this.listingId = listingId;
    return this;
  }

  /**
   * A unique eBay-assigned ID that is generated when the item is listed.
   * @return listingId
   */
  @javax.annotation.Nullable
  public String getListingId() {
    return listingId;
  }

  public void setListingId(String listingId) {
    this.listingId = listingId;
  }


  public ListingDetail listingPromotionStatuses(List<ItemMarkdownStatus> listingPromotionStatuses) {
    this.listingPromotionStatuses = listingPromotionStatuses;
    return this;
  }

  public ListingDetail addListingPromotionStatusesItem(ItemMarkdownStatus listingPromotionStatusesItem) {
    if (this.listingPromotionStatuses == null) {
      this.listingPromotionStatuses = new ArrayList<>();
    }
    this.listingPromotionStatuses.add(listingPromotionStatusesItem);
    return this;
  }

  /**
   * A list of the status values assigned to the item and the date that each new status was assigned.
   * @return listingPromotionStatuses
   */
  @javax.annotation.Nullable
  public List<ItemMarkdownStatus> getListingPromotionStatuses() {
    return listingPromotionStatuses;
  }

  public void setListingPromotionStatuses(List<ItemMarkdownStatus> listingPromotionStatuses) {
    this.listingPromotionStatuses = listingPromotionStatuses;
  }


  public ListingDetail quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of items being sold in the listing.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public ListingDetail storeCategoryId(String storeCategoryId) {
    this.storeCategoryId = storeCategoryId;
    return this;
  }

  /**
   * Store CategoryId (if any) that to which the listing belongs. This field is blank if there is no seller Store category ID.
   * @return storeCategoryId
   */
  @javax.annotation.Nullable
  public String getStoreCategoryId() {
    return storeCategoryId;
  }

  public void setStoreCategoryId(String storeCategoryId) {
    this.storeCategoryId = storeCategoryId;
  }


  public ListingDetail title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The seller-defined title of the listing that a seller can use to identify the item.  This label is not displayed in end-user flows.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingDetail listingDetail = (ListingDetail) o;
    return Objects.equals(this.currentPrice, listingDetail.currentPrice) &&
        Objects.equals(this.freeShipping, listingDetail.freeShipping) &&
        Objects.equals(this.inventoryReferenceId, listingDetail.inventoryReferenceId) &&
        Objects.equals(this.inventoryReferenceType, listingDetail.inventoryReferenceType) &&
        Objects.equals(this.listingCategoryId, listingDetail.listingCategoryId) &&
        Objects.equals(this.listingCondition, listingDetail.listingCondition) &&
        Objects.equals(this.listingConditionId, listingDetail.listingConditionId) &&
        Objects.equals(this.listingId, listingDetail.listingId) &&
        Objects.equals(this.listingPromotionStatuses, listingDetail.listingPromotionStatuses) &&
        Objects.equals(this.quantity, listingDetail.quantity) &&
        Objects.equals(this.storeCategoryId, listingDetail.storeCategoryId) &&
        Objects.equals(this.title, listingDetail.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPrice, freeShipping, inventoryReferenceId, inventoryReferenceType, listingCategoryId, listingCondition, listingConditionId, listingId, listingPromotionStatuses, quantity, storeCategoryId, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingDetail {\n");
    sb.append("    currentPrice: ").append(toIndentedString(currentPrice)).append("\n");
    sb.append("    freeShipping: ").append(toIndentedString(freeShipping)).append("\n");
    sb.append("    inventoryReferenceId: ").append(toIndentedString(inventoryReferenceId)).append("\n");
    sb.append("    inventoryReferenceType: ").append(toIndentedString(inventoryReferenceType)).append("\n");
    sb.append("    listingCategoryId: ").append(toIndentedString(listingCategoryId)).append("\n");
    sb.append("    listingCondition: ").append(toIndentedString(listingCondition)).append("\n");
    sb.append("    listingConditionId: ").append(toIndentedString(listingConditionId)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    listingPromotionStatuses: ").append(toIndentedString(listingPromotionStatuses)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    storeCategoryId: ").append(toIndentedString(storeCategoryId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentPrice");
    openapiFields.add("freeShipping");
    openapiFields.add("inventoryReferenceId");
    openapiFields.add("inventoryReferenceType");
    openapiFields.add("listingCategoryId");
    openapiFields.add("listingCondition");
    openapiFields.add("listingConditionId");
    openapiFields.add("listingId");
    openapiFields.add("listingPromotionStatuses");
    openapiFields.add("quantity");
    openapiFields.add("storeCategoryId");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingDetail is not found in the empty JSON string", ListingDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentPrice`
      if (jsonObj.get("currentPrice") != null && !jsonObj.get("currentPrice").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("currentPrice"));
      }
      if ((jsonObj.get("inventoryReferenceId") != null && !jsonObj.get("inventoryReferenceId").isJsonNull()) && !jsonObj.get("inventoryReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryReferenceId").toString()));
      }
      if ((jsonObj.get("inventoryReferenceType") != null && !jsonObj.get("inventoryReferenceType").isJsonNull()) && !jsonObj.get("inventoryReferenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryReferenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryReferenceType").toString()));
      }
      if ((jsonObj.get("listingCategoryId") != null && !jsonObj.get("listingCategoryId").isJsonNull()) && !jsonObj.get("listingCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingCategoryId").toString()));
      }
      if ((jsonObj.get("listingCondition") != null && !jsonObj.get("listingCondition").isJsonNull()) && !jsonObj.get("listingCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingCondition").toString()));
      }
      if ((jsonObj.get("listingConditionId") != null && !jsonObj.get("listingConditionId").isJsonNull()) && !jsonObj.get("listingConditionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingConditionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingConditionId").toString()));
      }
      if ((jsonObj.get("listingId") != null && !jsonObj.get("listingId").isJsonNull()) && !jsonObj.get("listingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingId").toString()));
      }
      if (jsonObj.get("listingPromotionStatuses") != null && !jsonObj.get("listingPromotionStatuses").isJsonNull()) {
        JsonArray jsonArraylistingPromotionStatuses = jsonObj.getAsJsonArray("listingPromotionStatuses");
        if (jsonArraylistingPromotionStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listingPromotionStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listingPromotionStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("listingPromotionStatuses").toString()));
          }

          // validate the optional field `listingPromotionStatuses` (array)
          for (int i = 0; i < jsonArraylistingPromotionStatuses.size(); i++) {
            ItemMarkdownStatus.validateJsonElement(jsonArraylistingPromotionStatuses.get(i));
          };
        }
      }
      if ((jsonObj.get("storeCategoryId") != null && !jsonObj.get("storeCategoryId").isJsonNull()) && !jsonObj.get("storeCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCategoryId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingDetail>() {
           @Override
           public void write(JsonWriter out, ListingDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingDetail
   * @throws IOException if the JSON string is invalid with respect to ListingDetail
   */
  public static ListingDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingDetail.class);
  }

  /**
   * Convert an instance of ListingDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

