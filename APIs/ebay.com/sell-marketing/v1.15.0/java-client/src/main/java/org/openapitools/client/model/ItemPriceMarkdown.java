/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SelectedInventoryDiscount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields used to describe an item price markdown promotion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemPriceMarkdown {
  public static final String SERIALIZED_NAME_APPLY_FREE_SHIPPING = "applyFreeShipping";
  @SerializedName(SERIALIZED_NAME_APPLY_FREE_SHIPPING)
  private Boolean applyFreeShipping;

  public static final String SERIALIZED_NAME_AUTO_SELECT_FUTURE_INVENTORY = "autoSelectFutureInventory";
  @SerializedName(SERIALIZED_NAME_AUTO_SELECT_FUTURE_INVENTORY)
  private Boolean autoSelectFutureInventory;

  public static final String SERIALIZED_NAME_BLOCK_PRICE_INCREASE_IN_ITEM_REVISION = "blockPriceIncreaseInItemRevision";
  @SerializedName(SERIALIZED_NAME_BLOCK_PRICE_INCREASE_IN_ITEM_REVISION)
  private Boolean blockPriceIncreaseInItemRevision;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_PROMOTION_IMAGE_URL = "promotionImageUrl";
  @SerializedName(SERIALIZED_NAME_PROMOTION_IMAGE_URL)
  private String promotionImageUrl;

  public static final String SERIALIZED_NAME_PROMOTION_STATUS = "promotionStatus";
  @SerializedName(SERIALIZED_NAME_PROMOTION_STATUS)
  private String promotionStatus;

  public static final String SERIALIZED_NAME_SELECTED_INVENTORY_DISCOUNTS = "selectedInventoryDiscounts";
  @SerializedName(SERIALIZED_NAME_SELECTED_INVENTORY_DISCOUNTS)
  private List<SelectedInventoryDiscount> selectedInventoryDiscounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public ItemPriceMarkdown() {
  }

  public ItemPriceMarkdown applyFreeShipping(Boolean applyFreeShipping) {
    this.applyFreeShipping = applyFreeShipping;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, free shipping is applied to the first shipping service specified for the item. The first domestic shipping option is set to \&quot;free shipping,\&quot; regardless if the shipping &lt;b&gt;optionType&lt;/b&gt; for that service is set to &lt;code&gt;FLAT_RATE&lt;/code&gt;, &lt;code&gt;CALCULATED&lt;/code&gt;, or &lt;code&gt;NOT_SPECIFIED&lt;/code&gt; (freight). This flag essentially adds free shipping as a promotional bonus. &lt;br&gt;&lt;br&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;false&lt;/code&gt;
   * @return applyFreeShipping
   */
  @javax.annotation.Nullable
  public Boolean getApplyFreeShipping() {
    return applyFreeShipping;
  }

  public void setApplyFreeShipping(Boolean applyFreeShipping) {
    this.applyFreeShipping = applyFreeShipping;
  }


  public ItemPriceMarkdown autoSelectFutureInventory(Boolean autoSelectFutureInventory) {
    this.autoSelectFutureInventory = autoSelectFutureInventory;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, eBay will automatically add inventory items to the markdown promotion if they meet the &lt;b&gt;selectedInventoryDiscounts&lt;/b&gt; criteria specified for the markdown promotion.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;false&lt;/code&gt;
   * @return autoSelectFutureInventory
   */
  @javax.annotation.Nullable
  public Boolean getAutoSelectFutureInventory() {
    return autoSelectFutureInventory;
  }

  public void setAutoSelectFutureInventory(Boolean autoSelectFutureInventory) {
    this.autoSelectFutureInventory = autoSelectFutureInventory;
  }


  public ItemPriceMarkdown blockPriceIncreaseInItemRevision(Boolean blockPriceIncreaseInItemRevision) {
    this.blockPriceIncreaseInItemRevision = blockPriceIncreaseInItemRevision;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, price increases (including removing the free shipping flag) are blocked and an error message is returned if a seller attempts to adjust the price of an item that&#39;s partaking in this markdown promotion. If set to &lt;code&gt;false&lt;/code&gt;, an item is dropped from the markdown promotion if the seller adjusts the price.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Default:&lt;/b&gt; &lt;code&gt;false&lt;/code&gt;
   * @return blockPriceIncreaseInItemRevision
   */
  @javax.annotation.Nullable
  public Boolean getBlockPriceIncreaseInItemRevision() {
    return blockPriceIncreaseInItemRevision;
  }

  public void setBlockPriceIncreaseInItemRevision(Boolean blockPriceIncreaseInItemRevision) {
    this.blockPriceIncreaseInItemRevision = blockPriceIncreaseInItemRevision;
  }


  public ItemPriceMarkdown description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This field is required if you are configuring an MARKDOWN_SALE promotion. &lt;br&gt;&lt;br&gt;This is the seller-defined \&quot;tag line\&quot; for the offer, such as \&quot;Save on designer shoes.\&quot; A tag line appears under the \&quot;offer-type text\&quot; that is generated for the promotion. The text is displayed on the offer tile that is shown on the seller&#39;s &lt;b&gt;All Offers&lt;/b&gt; page and on the event page for the promotion.  &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Offer-type text is a teaser that&#39;s presented throughout the buyer&#39;s journey through the sales flow and is generated by eBay. This text is not editable by the seller&amp;mdash;it&#39;s derived from the settings in the &lt;b&gt;discountRules&lt;/b&gt; and &lt;b&gt;discountSpecification&lt;/b&gt; fields&amp;mdash;and can be, for example, \&quot;20% off\&quot;.&lt;/p&gt;  &lt;br&gt;&lt;b&gt;Maximum length:&lt;/b&gt; 50
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ItemPriceMarkdown endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The date and time the promotion ends, in UTC format (&lt;code&gt;yyyy-MM-ddThh:mm:ssZ&lt;/code&gt;). The value supplied for &lt;b&gt;endDate&lt;/b&gt; must be at least 24 hours after the value supplied for the &lt;b&gt;startDate&lt;/b&gt; of the markdown promotion.&lt;br&gt;&lt;br&gt;For display purposes, convert this time into the local time of the seller.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Max value:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;14&lt;/code&gt; days for the AT, CH, DE, ES, FR, IE, IT, and UK, marketplaces.&lt;/li&gt;  &lt;li&gt;&lt;code&gt;45&lt;/code&gt; days for all other marketplaces.&lt;/li&gt;&lt;/ul&gt;
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public ItemPriceMarkdown marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The eBay marketplace ID of the site where the markdown promotion is hosted. Markdown promotions are supported on all eBay marketplaces. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public ItemPriceMarkdown name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The seller-defined name or &#39;title&#39; of the promotion that the seller can use to identify a promotion. This label is not displayed in end-user flows.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Maximum length:&lt;/b&gt; 90
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ItemPriceMarkdown priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * This field is ignored in markdown promotions. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionPriorityEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return priority
   */
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public ItemPriceMarkdown promotionImageUrl(String promotionImageUrl) {
    this.promotionImageUrl = promotionImageUrl;
    return this;
  }

  /**
   * Required for CODED_COUPON, MARKDOWN_SALE, and ORDER_DISCOUNT promotions, populate this field with a URL that points to an image to be used with the promotion. This image is displayed on the seller&#39;s &lt;b&gt;All Offers&lt;/b&gt; page. The URL must point to either JPEG or PNG image and it must be a minimum of 500x500 pixels in dimension and cannot exceed 12Mb in size.
   * @return promotionImageUrl
   */
  @javax.annotation.Nullable
  public String getPromotionImageUrl() {
    return promotionImageUrl;
  }

  public void setPromotionImageUrl(String promotionImageUrl) {
    this.promotionImageUrl = promotionImageUrl;
  }


  public ItemPriceMarkdown promotionStatus(String promotionStatus) {
    this.promotionStatus = promotionStatus;
    return this;
  }

  /**
   * The current status of the promotion. When creating a new promotion, you must set this value to either &lt;code&gt;DRAFT&lt;/code&gt; or &lt;code&gt;SCHEDULED&lt;/code&gt;.  &lt;br&gt;&lt;br&gt;Note that you must set this value to &lt;code&gt;SCHEDULED&lt;/code&gt; when you update a &lt;b&gt;RUNNING&lt;/b&gt; promotion. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return promotionStatus
   */
  @javax.annotation.Nullable
  public String getPromotionStatus() {
    return promotionStatus;
  }

  public void setPromotionStatus(String promotionStatus) {
    this.promotionStatus = promotionStatus;
  }


  public ItemPriceMarkdown selectedInventoryDiscounts(List<SelectedInventoryDiscount> selectedInventoryDiscounts) {
    this.selectedInventoryDiscounts = selectedInventoryDiscounts;
    return this;
  }

  public ItemPriceMarkdown addSelectedInventoryDiscountsItem(SelectedInventoryDiscount selectedInventoryDiscountsItem) {
    if (this.selectedInventoryDiscounts == null) {
      this.selectedInventoryDiscounts = new ArrayList<>();
    }
    this.selectedInventoryDiscounts.add(selectedInventoryDiscountsItem);
    return this;
  }

  /**
   * A list that defines the sets of selected items for the markdown promotion and the discount specified for promotion.
   * @return selectedInventoryDiscounts
   */
  @javax.annotation.Nullable
  public List<SelectedInventoryDiscount> getSelectedInventoryDiscounts() {
    return selectedInventoryDiscounts;
  }

  public void setSelectedInventoryDiscounts(List<SelectedInventoryDiscount> selectedInventoryDiscounts) {
    this.selectedInventoryDiscounts = selectedInventoryDiscounts;
  }


  public ItemPriceMarkdown startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The date and time the promotion starts in UTC format (&lt;code&gt;yyyy-MM-ddThh:mm:ssZ&lt;/code&gt;). For display purposes, convert this time into the local time of the seller.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPriceMarkdown itemPriceMarkdown = (ItemPriceMarkdown) o;
    return Objects.equals(this.applyFreeShipping, itemPriceMarkdown.applyFreeShipping) &&
        Objects.equals(this.autoSelectFutureInventory, itemPriceMarkdown.autoSelectFutureInventory) &&
        Objects.equals(this.blockPriceIncreaseInItemRevision, itemPriceMarkdown.blockPriceIncreaseInItemRevision) &&
        Objects.equals(this.description, itemPriceMarkdown.description) &&
        Objects.equals(this.endDate, itemPriceMarkdown.endDate) &&
        Objects.equals(this.marketplaceId, itemPriceMarkdown.marketplaceId) &&
        Objects.equals(this.name, itemPriceMarkdown.name) &&
        Objects.equals(this.priority, itemPriceMarkdown.priority) &&
        Objects.equals(this.promotionImageUrl, itemPriceMarkdown.promotionImageUrl) &&
        Objects.equals(this.promotionStatus, itemPriceMarkdown.promotionStatus) &&
        Objects.equals(this.selectedInventoryDiscounts, itemPriceMarkdown.selectedInventoryDiscounts) &&
        Objects.equals(this.startDate, itemPriceMarkdown.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyFreeShipping, autoSelectFutureInventory, blockPriceIncreaseInItemRevision, description, endDate, marketplaceId, name, priority, promotionImageUrl, promotionStatus, selectedInventoryDiscounts, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPriceMarkdown {\n");
    sb.append("    applyFreeShipping: ").append(toIndentedString(applyFreeShipping)).append("\n");
    sb.append("    autoSelectFutureInventory: ").append(toIndentedString(autoSelectFutureInventory)).append("\n");
    sb.append("    blockPriceIncreaseInItemRevision: ").append(toIndentedString(blockPriceIncreaseInItemRevision)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    promotionImageUrl: ").append(toIndentedString(promotionImageUrl)).append("\n");
    sb.append("    promotionStatus: ").append(toIndentedString(promotionStatus)).append("\n");
    sb.append("    selectedInventoryDiscounts: ").append(toIndentedString(selectedInventoryDiscounts)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyFreeShipping");
    openapiFields.add("autoSelectFutureInventory");
    openapiFields.add("blockPriceIncreaseInItemRevision");
    openapiFields.add("description");
    openapiFields.add("endDate");
    openapiFields.add("marketplaceId");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("promotionImageUrl");
    openapiFields.add("promotionStatus");
    openapiFields.add("selectedInventoryDiscounts");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemPriceMarkdown
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemPriceMarkdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemPriceMarkdown is not found in the empty JSON string", ItemPriceMarkdown.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemPriceMarkdown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemPriceMarkdown` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if ((jsonObj.get("promotionImageUrl") != null && !jsonObj.get("promotionImageUrl").isJsonNull()) && !jsonObj.get("promotionImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionImageUrl").toString()));
      }
      if ((jsonObj.get("promotionStatus") != null && !jsonObj.get("promotionStatus").isJsonNull()) && !jsonObj.get("promotionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionStatus").toString()));
      }
      if (jsonObj.get("selectedInventoryDiscounts") != null && !jsonObj.get("selectedInventoryDiscounts").isJsonNull()) {
        JsonArray jsonArrayselectedInventoryDiscounts = jsonObj.getAsJsonArray("selectedInventoryDiscounts");
        if (jsonArrayselectedInventoryDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectedInventoryDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectedInventoryDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("selectedInventoryDiscounts").toString()));
          }

          // validate the optional field `selectedInventoryDiscounts` (array)
          for (int i = 0; i < jsonArrayselectedInventoryDiscounts.size(); i++) {
            SelectedInventoryDiscount.validateJsonElement(jsonArrayselectedInventoryDiscounts.get(i));
          };
        }
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemPriceMarkdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemPriceMarkdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemPriceMarkdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemPriceMarkdown.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemPriceMarkdown>() {
           @Override
           public void write(JsonWriter out, ItemPriceMarkdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemPriceMarkdown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemPriceMarkdown given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemPriceMarkdown
   * @throws IOException if the JSON string is invalid with respect to ItemPriceMarkdown
   */
  public static ItemPriceMarkdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemPriceMarkdown.class);
  }

  /**
   * Convert an instance of ItemPriceMarkdown to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

