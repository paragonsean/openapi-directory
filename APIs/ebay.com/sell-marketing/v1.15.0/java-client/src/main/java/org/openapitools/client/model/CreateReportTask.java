/*
 * Marketing API
 * <p>The <i>Marketing API </i> offers two platforms that sellers can use to promote and advertise their products:</p> <ul><li><b>Promoted Listings</b> is an eBay ad service that lets sellers set up <i>ad campaigns </i> for the products they want to promote. eBay displays the ads in search results and in other marketing modules as <b>SPONSORED</b> listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage applied to the sales price. For complete details, refer to the <a href=\"/api-docs/sell/static/marketing/pl-landing.html\">Promoted Listings playbook</a>.</li><li><b>Promotions Manager</b> gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as \"20% off\" and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion <i>teasers</i> throughout buyer flows. For complete details, see <a href=\"/api-docs/sell/static/marketing/promotions-manager.html\">Promotions Manager</a>.</li></ul>  <p><b>Marketing reports</b>, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts.</p> <p class=\"tablenote\"><b>Important!</b> Sellers must have an active eBay Store subscription, and they must accept the <b>Terms and Conditions</b> before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the \"requirements and restrictions\" sections for <a href=\"/api-docs/sell/marketing/static/overview.html#PL-requirements\">Promoted Listings</a> and <a href=\"/api-docs/sell/marketing/static/overview.html#PM-requirements\">Promotions Manager</a>.</p> <p>The table below lists all the Marketing API calls grouped by resource.</p>
 *
 * The version of the OpenAPI document: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.InventoryReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the rules that govern the generation of a report task and the criteria that&#39;s used to create the report. The report-generation rules include the starting and ending dates for the report. Report-task criteria includes the report dimensions, metrics, listings covered in the report, and so on. For information on the required and optional fields for each report type, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:56.470009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateReportTask {
  public static final String SERIALIZED_NAME_ADDITIONAL_RECORDS = "additionalRecords";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RECORDS)
  private List<String> additionalRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_IDS = "campaignIds";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_IDS)
  private List<String> campaignIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_FROM = "dateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "dateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNDING_MODELS = "fundingModels";
  @SerializedName(SERIALIZED_NAME_FUNDING_MODELS)
  private List<String> fundingModels = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_REFERENCES = "inventoryReferences";
  @SerializedName(SERIALIZED_NAME_INVENTORY_REFERENCES)
  private List<InventoryReference> inventoryReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTING_IDS = "listingIds";
  @SerializedName(SERIALIZED_NAME_LISTING_IDS)
  private List<String> listingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_METRIC_KEYS = "metricKeys";
  @SerializedName(SERIALIZED_NAME_METRIC_KEYS)
  private List<String> metricKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_FORMAT = "reportFormat";
  @SerializedName(SERIALIZED_NAME_REPORT_FORMAT)
  private String reportFormat;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public CreateReportTask() {
  }

  public CreateReportTask additionalRecords(List<String> additionalRecords) {
    this.additionalRecords = additionalRecords;
    return this;
  }

  public CreateReportTask addAdditionalRecordsItem(String additionalRecordsItem) {
    if (this.additionalRecords == null) {
      this.additionalRecords = new ArrayList<>();
    }
    this.additionalRecords.add(additionalRecordsItem);
    return this;
  }

  /**
   * A list of additional records that shall be included in the report, such as non-performing data.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; Additional records are only applicable to Promoted Listings Advanced (PLA) campaigns that use the Cost Per Click (CPC) funding model.&lt;/span&gt;&lt;br /&gt;&lt;b&gt;Valid Value:&lt;/b&gt; &lt;code&gt;NON_PERFORMING_DATA&lt;/code&gt;
   * @return additionalRecords
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalRecords() {
    return additionalRecords;
  }

  public void setAdditionalRecords(List<String> additionalRecords) {
    this.additionalRecords = additionalRecords;
  }


  public CreateReportTask campaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
    return this;
  }

  public CreateReportTask addCampaignIdsItem(String campaignIdsItem) {
    if (this.campaignIds == null) {
      this.campaignIds = new ArrayList<>();
    }
    this.campaignIds.add(campaignIdsItem);
    return this;
  }

  /**
   * A list of campaign IDs to be included in the report task. Call &lt;b&gt;getCampaigns&lt;/b&gt; to get a list of the current campaign IDs for a seller.&lt;br /&gt;&lt;br /&gt;For Promoted Listings Standard (PLS) sellers, this field is required if the &lt;b&gt;reportType&lt;/b&gt; is set to &lt;code&gt;CAMPAIGN_PERFORMANCE_REPORT&lt;/code&gt; or &lt;code&gt;CAMPAIGN_PERFORMANCE_SUMMARY_REPORT&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;For Promoted Listings Advanced (PLA) sellers, leave this request field blank to retrieve the details for all campaigns associated with your account, or specify the campaign IDs for which you would like to retrieve the campaign-specific details.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; There is a maximum data limit that cannot be exceeded when generating reports. If this threshold is exceeded, the report will fail. Refer to &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html#creation\&quot;&gt;Promoted Listings reporting&lt;/a&gt; in the Selling Integration Guide for details.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Maximum:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;25 IDs for PLS&lt;/li&gt;&lt;li&gt;1,000 IDs for PLA&lt;/li&gt;&lt;/ul&gt;
   * @return campaignIds
   */
  @javax.annotation.Nullable
  public List<String> getCampaignIds() {
    return campaignIds;
  }

  public void setCampaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
  }


  public CreateReportTask dateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * The date defining the start of the timespan covered by the report.&lt;br /&gt;&lt;br /&gt;Format the timestamp as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot; title&#x3D;\&quot;https://www.iso.org\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; string, which is based on the 24-hour Coordinated Universal Time (UTC) clock with local offset.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The date specified cannot be a future date.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2021-03-15T13:00:00-07:00&lt;/code&gt;
   * @return dateFrom
   */
  @javax.annotation.Nullable
  public String getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }


  public CreateReportTask dateTo(String dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * The date defining the end of the timespan covered by the report.&lt;br /&gt;&lt;br /&gt;As with the &lt;b&gt;dateFrom&lt;/b&gt; field, format the timestamp as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot; title&#x3D;\&quot;https://www.iso.org\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; string.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The date specified cannot be a future date. Additionally, the time specified must be a later time than that specified in the &lt;b&gt;dateFrom&lt;/b&gt; field.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2021-03-17T13:00:00-07:00&lt;/code&gt;
   * @return dateTo
   */
  @javax.annotation.Nullable
  public String getDateTo() {
    return dateTo;
  }

  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }


  public CreateReportTask dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public CreateReportTask addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The list of the dimensions applied to the report.  &lt;p&gt;A dimension is an attribute to which the report data applies. For example, if you set &lt;b&gt;dimensionKey&lt;/b&gt; to &lt;code&gt;campaign_id&lt;/code&gt; in a Campaign Performance Report, the data will apply to the entire ad campaign. For information on the dimensions and how to specify them, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.&lt;/p&gt;
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public CreateReportTask fundingModels(List<String> fundingModels) {
    this.fundingModels = fundingModels;
    return this;
  }

  public CreateReportTask addFundingModelsItem(String fundingModelsItem) {
    if (this.fundingModels == null) {
      this.fundingModels = new ArrayList<>();
    }
    this.fundingModels.add(fundingModelsItem);
    return this;
  }

  /**
   * The funding model for the campaign that shall be included in the report.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; The default funding model for Promoted Listings reports is &lt;code&gt;COST_PER_SALE&lt;/code&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; Multiple value support for the &lt;b&gt;fundingModels&lt;/b&gt; array has been deprecated. See &lt;a href &#x3D;\&quot;/develop/apis/api-deprecation-status \&quot;&gt;API&amp;nbsp;Deprecation&amp;nbsp;Status&lt;/a&gt; for information.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Valid Values:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;COST_PER_SALE&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;COST_PER_CLICK&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;i&gt;Required if&lt;/i&gt; the campaign funding model is Cost Per Click (CPC).
   * @return fundingModels
   */
  @javax.annotation.Nullable
  public List<String> getFundingModels() {
    return fundingModels;
  }

  public void setFundingModels(List<String> fundingModels) {
    this.fundingModels = fundingModels;
  }


  public CreateReportTask inventoryReferences(List<InventoryReference> inventoryReferences) {
    this.inventoryReferences = inventoryReferences;
    return this;
  }

  public CreateReportTask addInventoryReferencesItem(InventoryReference inventoryReferencesItem) {
    if (this.inventoryReferences == null) {
      this.inventoryReferences = new ArrayList<>();
    }
    this.inventoryReferences.add(inventoryReferencesItem);
    return this;
  }

  /**
   * You can use this field to supply an array of items to include in the report if you manage your inventory with the &lt;a href&#x3D;\&quot;/api-docs/sell/inventory/resources/methods\&quot;&gt;Inventory API&lt;/a&gt;.  &lt;br&gt;&lt;br&gt;This field is mutually exclusive with the &lt;b&gt;listingIds&lt;/b&gt; field; if you populate this field, &lt;i&gt;do not&lt;/i&gt; populate the &lt;b&gt;listingIds&lt;/b&gt; field.  &lt;br&gt;&lt;br&gt;An inventory reference identifies an item in your inventory using a pair of values, where the &lt;b&gt;inventoryReferenceId&lt;/b&gt; can be either a seller-defined &lt;b&gt;SKU&lt;/b&gt; value or an &lt;b&gt;inventoryItemGroupKey&lt;/b&gt;, where an &lt;b&gt;inventoryItemGroupKey&lt;/b&gt; is seller-defined ID for an inventory item group (a multiple-variation listing). &lt;br&gt;&lt;br&gt;Couple the &lt;b&gt;inventoryReferenceId&lt;/b&gt; with an &lt;b&gt;inventoryReferenceType&lt;/b&gt; identifier to fully identify an item in your inventory.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Maximum: &lt;/b&gt; 500 items &lt;br&gt;&lt;br&gt;&lt;i&gt;Required if &lt;/i&gt; you do not supply an array of &lt;b&gt;listingId&lt;/b&gt; values or if you set &lt;b&gt;reportType&lt;/b&gt; to &lt;code&gt;INVENTORY_PERFORMANCE_REPORT&lt;/code&gt;.
   * @return inventoryReferences
   */
  @javax.annotation.Nullable
  public List<InventoryReference> getInventoryReferences() {
    return inventoryReferences;
  }

  public void setInventoryReferences(List<InventoryReference> inventoryReferences) {
    this.inventoryReferences = inventoryReferences;
  }


  public CreateReportTask listingIds(List<String> listingIds) {
    this.listingIds = listingIds;
    return this;
  }

  public CreateReportTask addListingIdsItem(String listingIdsItem) {
    if (this.listingIds == null) {
      this.listingIds = new ArrayList<>();
    }
    this.listingIds.add(listingIdsItem);
    return this;
  }

  /**
   * Use this field to supply an array of listing IDs you want to include in the report.&lt;br&gt;&lt;br&gt;A listing ID is the eBay listing identifier that is generated when the listing is created. This field accepts listing ID values generated with both the Inventory API and the eBay Traditional APIs, such as the Trading and Finding APIs.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#FF0000\&quot;&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/span&gt; This field is mutually exclusive with the &lt;b&gt;inventoryReferences&lt;/b&gt; field; if you populate this field, &lt;i&gt;do not&lt;/i&gt; populate the &lt;b&gt;inventoryReferences&lt;/b&gt; field.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;For Promoted Listings Standard (PLS) sellers, this field is required if you do not supply an array of &lt;b&gt;inventoryReferences&lt;/b&gt; values or if you set the &lt;b&gt;reportType&lt;/b&gt; to &lt;code&gt;LISTING_PERFORMANCE_REPORT&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;For Promoted Listings Advanced (PLA) sellers, leave this field blank to retrieve the details for all listings associated with the specified campaign IDs (or all campaigns associated with your account, if no campaign IDs are specified), or specify the listing IDs for which you would like to retrieve the listing-specific details.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;span style&#x3D;\&quot;color:#004680\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt; There is a maximum data limit that cannot be exceeded when generating reports. If this threshold is exceeded, the report will fail. Refer to &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html#creation\&quot;&gt;Promoted Listings reporting&lt;/a&gt; in the Selling Integration Guide for details.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Maximum:&lt;/b&gt; 500 listings
   * @return listingIds
   */
  @javax.annotation.Nullable
  public List<String> getListingIds() {
    return listingIds;
  }

  public void setListingIds(List<String> listingIds) {
    this.listingIds = listingIds;
  }


  public CreateReportTask marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The ID for the eBay marketplace on which the report is based.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Maximum: &lt;/b&gt; 1 For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return marketplaceId
   */
  @javax.annotation.Nullable
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public CreateReportTask metricKeys(List<String> metricKeys) {
    this.metricKeys = metricKeys;
    return this;
  }

  public CreateReportTask addMetricKeysItem(String metricKeysItem) {
    if (this.metricKeys == null) {
      this.metricKeys = new ArrayList<>();
    }
    this.metricKeys.add(metricKeysItem);
    return this;
  }

  /**
   * The list of metrics to be included in the report.  &lt;p&gt;Metrics are the quantitative measurements compiled into the report and the data returned is based on the specified dimension of the report. For example, if the dimension is &lt;code&gt;campaign&lt;/code&gt;, the metrics for &lt;b&gt;number of sales&lt;/b&gt; would be the number of sales in the campaign. However, if the dimension is &lt;code&gt;listing&lt;/code&gt;, the &lt;b&gt;number of sales&lt;/b&gt; represents the number of items sold in that listing.&lt;/p&gt;  &lt;p&gt;For information on metric keys and how to set them, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pl-reports.html\&quot;&gt;Promoted Listings reporting&lt;/a&gt;.&lt;/p&gt;&lt;b&gt;Minimum: &lt;/b&gt; 1
   * @return metricKeys
   */
  @javax.annotation.Nullable
  public List<String> getMetricKeys() {
    return metricKeys;
  }

  public void setMetricKeys(List<String> metricKeys) {
    this.metricKeys = metricKeys;
  }


  public CreateReportTask reportFormat(String reportFormat) {
    this.reportFormat = reportFormat;
    return this;
  }

  /**
   * The file format of the report. Currently, the only supported format is &lt;code&gt;TSV_GZIP&lt;/code&gt;, which is a gzip file with tab separated values. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportFormatEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reportFormat
   */
  @javax.annotation.Nullable
  public String getReportFormat() {
    return reportFormat;
  }

  public void setReportFormat(String reportFormat) {
    this.reportFormat = reportFormat;
  }


  public CreateReportTask reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * The type of report to be generated, such as &lt;code&gt;ACCOUNT_PERFORMANCE_REPORT&lt;/code&gt; or &lt;code&gt;CAMPAIGN_PERFORMANCE_REPORT&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; INVENTORY_PERFORMANCE_REPORT is not currently available; availability date is pending.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Maximum:&lt;/b&gt; 1 For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/marketing/types/plr:ReportTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateReportTask createReportTask = (CreateReportTask) o;
    return Objects.equals(this.additionalRecords, createReportTask.additionalRecords) &&
        Objects.equals(this.campaignIds, createReportTask.campaignIds) &&
        Objects.equals(this.dateFrom, createReportTask.dateFrom) &&
        Objects.equals(this.dateTo, createReportTask.dateTo) &&
        Objects.equals(this.dimensions, createReportTask.dimensions) &&
        Objects.equals(this.fundingModels, createReportTask.fundingModels) &&
        Objects.equals(this.inventoryReferences, createReportTask.inventoryReferences) &&
        Objects.equals(this.listingIds, createReportTask.listingIds) &&
        Objects.equals(this.marketplaceId, createReportTask.marketplaceId) &&
        Objects.equals(this.metricKeys, createReportTask.metricKeys) &&
        Objects.equals(this.reportFormat, createReportTask.reportFormat) &&
        Objects.equals(this.reportType, createReportTask.reportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRecords, campaignIds, dateFrom, dateTo, dimensions, fundingModels, inventoryReferences, listingIds, marketplaceId, metricKeys, reportFormat, reportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateReportTask {\n");
    sb.append("    additionalRecords: ").append(toIndentedString(additionalRecords)).append("\n");
    sb.append("    campaignIds: ").append(toIndentedString(campaignIds)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    fundingModels: ").append(toIndentedString(fundingModels)).append("\n");
    sb.append("    inventoryReferences: ").append(toIndentedString(inventoryReferences)).append("\n");
    sb.append("    listingIds: ").append(toIndentedString(listingIds)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    metricKeys: ").append(toIndentedString(metricKeys)).append("\n");
    sb.append("    reportFormat: ").append(toIndentedString(reportFormat)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalRecords");
    openapiFields.add("campaignIds");
    openapiFields.add("dateFrom");
    openapiFields.add("dateTo");
    openapiFields.add("dimensions");
    openapiFields.add("fundingModels");
    openapiFields.add("inventoryReferences");
    openapiFields.add("listingIds");
    openapiFields.add("marketplaceId");
    openapiFields.add("metricKeys");
    openapiFields.add("reportFormat");
    openapiFields.add("reportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateReportTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateReportTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateReportTask is not found in the empty JSON string", CreateReportTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateReportTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateReportTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalRecords") != null && !jsonObj.get("additionalRecords").isJsonNull() && !jsonObj.get("additionalRecords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalRecords` to be an array in the JSON string but got `%s`", jsonObj.get("additionalRecords").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("campaignIds") != null && !jsonObj.get("campaignIds").isJsonNull() && !jsonObj.get("campaignIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignIds` to be an array in the JSON string but got `%s`", jsonObj.get("campaignIds").toString()));
      }
      if ((jsonObj.get("dateFrom") != null && !jsonObj.get("dateFrom").isJsonNull()) && !jsonObj.get("dateFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFrom").toString()));
      }
      if ((jsonObj.get("dateTo") != null && !jsonObj.get("dateTo").isJsonNull()) && !jsonObj.get("dateTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTo").toString()));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fundingModels") != null && !jsonObj.get("fundingModels").isJsonNull() && !jsonObj.get("fundingModels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingModels` to be an array in the JSON string but got `%s`", jsonObj.get("fundingModels").toString()));
      }
      if (jsonObj.get("inventoryReferences") != null && !jsonObj.get("inventoryReferences").isJsonNull()) {
        JsonArray jsonArrayinventoryReferences = jsonObj.getAsJsonArray("inventoryReferences");
        if (jsonArrayinventoryReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventoryReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventoryReferences` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryReferences").toString()));
          }

          // validate the optional field `inventoryReferences` (array)
          for (int i = 0; i < jsonArrayinventoryReferences.size(); i++) {
            InventoryReference.validateJsonElement(jsonArrayinventoryReferences.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listingIds") != null && !jsonObj.get("listingIds").isJsonNull() && !jsonObj.get("listingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingIds` to be an array in the JSON string but got `%s`", jsonObj.get("listingIds").toString()));
      }
      if ((jsonObj.get("marketplaceId") != null && !jsonObj.get("marketplaceId").isJsonNull()) && !jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricKeys") != null && !jsonObj.get("metricKeys").isJsonNull() && !jsonObj.get("metricKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricKeys` to be an array in the JSON string but got `%s`", jsonObj.get("metricKeys").toString()));
      }
      if ((jsonObj.get("reportFormat") != null && !jsonObj.get("reportFormat").isJsonNull()) && !jsonObj.get("reportFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportFormat").toString()));
      }
      if ((jsonObj.get("reportType") != null && !jsonObj.get("reportType").isJsonNull()) && !jsonObj.get("reportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateReportTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateReportTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateReportTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateReportTask.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateReportTask>() {
           @Override
           public void write(JsonWriter out, CreateReportTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateReportTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateReportTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateReportTask
   * @throws IOException if the JSON string is invalid with respect to CreateReportTask
   */
  public static CreateReportTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateReportTask.class);
  }

  /**
   * Convert an instance of CreateReportTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

