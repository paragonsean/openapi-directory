# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compliance_detail import ComplianceDetail
from openapi_server import util


class ComplianceViolation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance_type: str=None, listing_id: str=None, offer_id: str=None, sku: str=None, violations: List[ComplianceDetail]=None):
        """ComplianceViolation - a model defined in OpenAPI

        :param compliance_type: The compliance_type of this ComplianceViolation.
        :param listing_id: The listing_id of this ComplianceViolation.
        :param offer_id: The offer_id of this ComplianceViolation.
        :param sku: The sku of this ComplianceViolation.
        :param violations: The violations of this ComplianceViolation.
        """
        self.openapi_types = {
            'compliance_type': str,
            'listing_id': str,
            'offer_id': str,
            'sku': str,
            'violations': List[ComplianceDetail]
        }

        self.attribute_map = {
            'compliance_type': 'complianceType',
            'listing_id': 'listingId',
            'offer_id': 'offerId',
            'sku': 'sku',
            'violations': 'violations'
        }

        self._compliance_type = compliance_type
        self._listing_id = listing_id
        self._offer_id = offer_id
        self._sku = sku
        self._violations = violations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceViolation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceViolation of this ComplianceViolation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance_type(self):
        """Gets the compliance_type of this ComplianceViolation.

        This enumeration value indicates the compliance type of listing violation. See ComplianceTypeEnum for more information on each compliance type. This will always be returned for each listing violation that is found. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>

        :return: The compliance_type of this ComplianceViolation.
        :rtype: str
        """
        return self._compliance_type

    @compliance_type.setter
    def compliance_type(self, compliance_type):
        """Sets the compliance_type of this ComplianceViolation.

        This enumeration value indicates the compliance type of listing violation. See ComplianceTypeEnum for more information on each compliance type. This will always be returned for each listing violation that is found. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>

        :param compliance_type: The compliance_type of this ComplianceViolation.
        :type compliance_type: str
        """

        self._compliance_type = compliance_type

    @property
    def listing_id(self):
        """Gets the listing_id of this ComplianceViolation.

        The unique identifier of the eBay listing that currently has the corresponding listing violation{s). This field will always be returned for each listing that has one or more violations.

        :return: The listing_id of this ComplianceViolation.
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this ComplianceViolation.

        The unique identifier of the eBay listing that currently has the corresponding listing violation{s). This field will always be returned for each listing that has one or more violations.

        :param listing_id: The listing_id of this ComplianceViolation.
        :type listing_id: str
        """

        self._listing_id = listing_id

    @property
    def offer_id(self):
        """Gets the offer_id of this ComplianceViolation.

        Note: This field is for future use, and will not be returned, even for listings created through the Inventory API. The unique identifier of the offer. This field is only applicable and returned for listings that were created through the Inventory API. To convert an Inventory Item object into an eBay listing, an Offer object must be created and published.

        :return: The offer_id of this ComplianceViolation.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ComplianceViolation.

        Note: This field is for future use, and will not be returned, even for listings created through the Inventory API. The unique identifier of the offer. This field is only applicable and returned for listings that were created through the Inventory API. To convert an Inventory Item object into an eBay listing, an Offer object must be created and published.

        :param offer_id: The offer_id of this ComplianceViolation.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def sku(self):
        """Gets the sku of this ComplianceViolation.

        The seller-defined SKU value of the product in the listing with the violation{s). This field is only returned if defined in the listing. SKU values are optional in listings except when creating listings using the Inventory API model.

        :return: The sku of this ComplianceViolation.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ComplianceViolation.

        The seller-defined SKU value of the product in the listing with the violation{s). This field is only returned if defined in the listing. SKU values are optional in listings except when creating listings using the Inventory API model.

        :param sku: The sku of this ComplianceViolation.
        :type sku: str
        """

        self._sku = sku

    @property
    def violations(self):
        """Gets the violations of this ComplianceViolation.

        This container consists of an array of one or more listing violations applicable to the eBay listing specified in the listingId field. This array is returned for each eBay listing that has one or more violations. For each returned violation, the fields that are returned and the details that are given will depend on the listing violation.

        :return: The violations of this ComplianceViolation.
        :rtype: List[ComplianceDetail]
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this ComplianceViolation.

        This container consists of an array of one or more listing violations applicable to the eBay listing specified in the listingId field. This array is returned for each eBay listing that has one or more violations. For each returned violation, the fields that are returned and the details that are given will depend on the listing violation.

        :param violations: The violations of this ComplianceViolation.
        :type violations: List[ComplianceDetail]
        """

        self._violations = violations
