# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compliance_violation import ComplianceViolation
from openapi_server import util


class PagedComplianceViolationCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, listing_violations: List[ComplianceViolation]=None, next: str=None, offset: int=None, prev: str=None, total: int=None):
        """PagedComplianceViolationCollection - a model defined in OpenAPI

        :param href: The href of this PagedComplianceViolationCollection.
        :param limit: The limit of this PagedComplianceViolationCollection.
        :param listing_violations: The listing_violations of this PagedComplianceViolationCollection.
        :param next: The next of this PagedComplianceViolationCollection.
        :param offset: The offset of this PagedComplianceViolationCollection.
        :param prev: The prev of this PagedComplianceViolationCollection.
        :param total: The total of this PagedComplianceViolationCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'listing_violations': List[ComplianceViolation],
            'next': str,
            'offset': int,
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'listing_violations': 'listingViolations',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._listing_violations = listing_violations
        self._next = next
        self._offset = offset
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagedComplianceViolationCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PagedComplianceViolationCollection of this PagedComplianceViolationCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this PagedComplianceViolationCollection.

        The URI of the getListingViolations call request that produced the current page of the result set.

        :return: The href of this PagedComplianceViolationCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PagedComplianceViolationCollection.

        The URI of the getListingViolations call request that produced the current page of the result set.

        :param href: The href of this PagedComplianceViolationCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PagedComplianceViolationCollection.

        The maximum number of listing violations returned per page of the result set. The limit and offset query parameters are used to control the pagination of the output. Note: If this is the last or only page in the result set, it may contain fewer listing violations than the limit value. To determine the number of pages in the result set, divide this value into the value of total and round up to the next integer. Default: 50 Max: 200

        :return: The limit of this PagedComplianceViolationCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PagedComplianceViolationCollection.

        The maximum number of listing violations returned per page of the result set. The limit and offset query parameters are used to control the pagination of the output. Note: If this is the last or only page in the result set, it may contain fewer listing violations than the limit value. To determine the number of pages in the result set, divide this value into the value of total and round up to the next integer. Default: 50 Max: 200

        :param limit: The limit of this PagedComplianceViolationCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def listing_violations(self):
        """Gets the listing_violations of this PagedComplianceViolationCollection.

        An array of listing violations that match the criteria in the call request, including pagination control {if set). As long as there is at least one listing violation that matches the input criteria, this container will be returned. If no listing violations are found for the seller, an HTTP status code of 204 No Content is returned, and there is no response body.

        :return: The listing_violations of this PagedComplianceViolationCollection.
        :rtype: List[ComplianceViolation]
        """
        return self._listing_violations

    @listing_violations.setter
    def listing_violations(self, listing_violations):
        """Sets the listing_violations of this PagedComplianceViolationCollection.

        An array of listing violations that match the criteria in the call request, including pagination control {if set). As long as there is at least one listing violation that matches the input criteria, this container will be returned. If no listing violations are found for the seller, an HTTP status code of 204 No Content is returned, and there is no response body.

        :param listing_violations: The listing_violations of this PagedComplianceViolationCollection.
        :type listing_violations: List[ComplianceViolation]
        """

        self._listing_violations = listing_violations

    @property
    def next(self):
        """Gets the next of this PagedComplianceViolationCollection.

        The getListingViolations call URI to use to view the next page of the result set. For example, the following URI returns listing violations 21 thru 30 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=20 This field is only returned if an additional page of listing violations exists.

        :return: The next of this PagedComplianceViolationCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PagedComplianceViolationCollection.

        The getListingViolations call URI to use to view the next page of the result set. For example, the following URI returns listing violations 21 thru 30 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=20 This field is only returned if an additional page of listing violations exists.

        :param next: The next of this PagedComplianceViolationCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PagedComplianceViolationCollection.

        This integer value shows the offset of the current page of results. The offset value controls the first listing violation in the result set that will be displayed at the top of the response. The offset and limit query parameters are used to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves listing violations 11 thru 20 from the resulting collection of violations. Note: This feature employs a zero-based index, where the first item in the list has an offset of 0. Default: 0 {zero)

        :return: The offset of this PagedComplianceViolationCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PagedComplianceViolationCollection.

        This integer value shows the offset of the current page of results. The offset value controls the first listing violation in the result set that will be displayed at the top of the response. The offset and limit query parameters are used to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves listing violations 11 thru 20 from the resulting collection of violations. Note: This feature employs a zero-based index, where the first item in the list has an offset of 0. Default: 0 {zero)

        :param offset: The offset of this PagedComplianceViolationCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this PagedComplianceViolationCollection.

        The getListingViolations call URI to use to view the previous page of the result set. For example, the following URI returns listing violations 1 thru 10 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=0 This field is only returned if an previous page of listing violations exists.

        :return: The prev of this PagedComplianceViolationCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PagedComplianceViolationCollection.

        The getListingViolations call URI to use to view the previous page of the result set. For example, the following URI returns listing violations 1 thru 10 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=0 This field is only returned if an previous page of listing violations exists.

        :param prev: The prev of this PagedComplianceViolationCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this PagedComplianceViolationCollection.

        The total number of listing violations in the result set. If this value is higher than the limit value, there are multiple pages in the result set to view.

        :return: The total of this PagedComplianceViolationCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagedComplianceViolationCollection.

        The total number of listing violations in the result set. If this value is higher than the limit value, there are multiple pages in the result set to view.

        :param total: The total of this PagedComplianceViolationCollection.
        :type total: int
        """

        self._total = total
