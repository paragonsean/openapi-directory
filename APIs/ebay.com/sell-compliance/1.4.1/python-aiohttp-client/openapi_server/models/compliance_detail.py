# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.corrective_recommendations import CorrectiveRecommendations
from openapi_server.models.name_value_list import NameValueList
from openapi_server.models.variation_details import VariationDetails
from openapi_server import util


class ComplianceDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance_state: str=None, corrective_recommendations: CorrectiveRecommendations=None, message: str=None, reason_code: str=None, variation: VariationDetails=None, violation_data: List[NameValueList]=None):
        """ComplianceDetail - a model defined in OpenAPI

        :param compliance_state: The compliance_state of this ComplianceDetail.
        :param corrective_recommendations: The corrective_recommendations of this ComplianceDetail.
        :param message: The message of this ComplianceDetail.
        :param reason_code: The reason_code of this ComplianceDetail.
        :param variation: The variation of this ComplianceDetail.
        :param violation_data: The violation_data of this ComplianceDetail.
        """
        self.openapi_types = {
            'compliance_state': str,
            'corrective_recommendations': CorrectiveRecommendations,
            'message': str,
            'reason_code': str,
            'variation': VariationDetails,
            'violation_data': List[NameValueList]
        }

        self.attribute_map = {
            'compliance_state': 'complianceState',
            'corrective_recommendations': 'correctiveRecommendations',
            'message': 'message',
            'reason_code': 'reasonCode',
            'variation': 'variation',
            'violation_data': 'violationData'
        }

        self._compliance_state = compliance_state
        self._corrective_recommendations = corrective_recommendations
        self._message = message
        self._reason_code = reason_code
        self._variation = variation
        self._violation_data = violation_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceDetail of this ComplianceDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance_state(self):
        """Gets the compliance_state of this ComplianceDetail.

        The enumeration value returned in this field indicates if the listing violation is considered to be OUT_OF_COMPLIANCE with an eBay listing policy, or the listing is considered to be AT_RISK of becoming non-compliant against an eBay listing policy. Generally, OUT_OF_COMPLIANCE policy violations can prevent the seller from revising a listing until the underlying violation(s) can be remedied. When the compliance state is AT_RISK, the seller is not blocked from revising the listing, but the seller should correct the violation to prevent the listing from being blocked for revisions in the future. Note: This field is returned for most violations, but not all. In the case that this field is not returned, it can be assumed that the state of the listing violation is OUT_OF_COMPLIANCE. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceStateEnum'>eBay API documentation</a>

        :return: The compliance_state of this ComplianceDetail.
        :rtype: str
        """
        return self._compliance_state

    @compliance_state.setter
    def compliance_state(self, compliance_state):
        """Sets the compliance_state of this ComplianceDetail.

        The enumeration value returned in this field indicates if the listing violation is considered to be OUT_OF_COMPLIANCE with an eBay listing policy, or the listing is considered to be AT_RISK of becoming non-compliant against an eBay listing policy. Generally, OUT_OF_COMPLIANCE policy violations can prevent the seller from revising a listing until the underlying violation(s) can be remedied. When the compliance state is AT_RISK, the seller is not blocked from revising the listing, but the seller should correct the violation to prevent the listing from being blocked for revisions in the future. Note: This field is returned for most violations, but not all. In the case that this field is not returned, it can be assumed that the state of the listing violation is OUT_OF_COMPLIANCE. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceStateEnum'>eBay API documentation</a>

        :param compliance_state: The compliance_state of this ComplianceDetail.
        :type compliance_state: str
        """

        self._compliance_state = compliance_state

    @property
    def corrective_recommendations(self):
        """Gets the corrective_recommendations of this ComplianceDetail.


        :return: The corrective_recommendations of this ComplianceDetail.
        :rtype: CorrectiveRecommendations
        """
        return self._corrective_recommendations

    @corrective_recommendations.setter
    def corrective_recommendations(self, corrective_recommendations):
        """Sets the corrective_recommendations of this ComplianceDetail.


        :param corrective_recommendations: The corrective_recommendations of this ComplianceDetail.
        :type corrective_recommendations: CorrectiveRecommendations
        """

        self._corrective_recommendations = corrective_recommendations

    @property
    def message(self):
        """Gets the message of this ComplianceDetail.

        This field provides a textual summary of the listing violation. A message field is returned for each listing violation. This message will vary widely based on the compliance type and corresponding reason code.

        :return: The message of this ComplianceDetail.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ComplianceDetail.

        This field provides a textual summary of the listing violation. A message field is returned for each listing violation. This message will vary widely based on the compliance type and corresponding reason code.

        :param message: The message of this ComplianceDetail.
        :type message: str
        """

        self._message = message

    @property
    def reason_code(self):
        """Gets the reason_code of this ComplianceDetail.

        This value states the nature of the listing violation. A reasonCode value is returned for each listing violation, and each compliance type can have several reason codes and related messages. The reasonCode values vary by compliance type. The reason codes for each compliance type are summarized below. Aspects adoption The reason codes for ASPECTS_ADOPTION compliance indicate that for the given violation, aspects listed in the violationData container are either missing from the listing or they have invalid values. The reason codes specify whether the violation is for required aspects, recommended (preferred) aspects, or soon to be required aspects. MISSING_OR_INVALID_REQUIRED_ASPECTS MISSING_OR_INVALID_PREFERRED_ASPECTS MISSING_OR_INVALID_SOON_TO_BE_REQUIRED_ASPECTS HTTPS The reason codes for HTTPS compliance identify where in the listing the violation occurs. For HTTPS policy violations, the seller will just need to remove the HTTP link (or update to HTTPS) from the listing details or product details: NON_SECURE_HTTP_LINK_IN_LISTING NON_SECURE_HTTP_LINK_IN_PRODUCT Non-eBay links The reason codes for OUTSIDE_EBAY_BUYING_AND_SELLING compliance identify the specific type of data (e.g., telephone number) that violated the policy. For each of these violations, the seller will just need to revise the listing, removing this information: UNAPPROVED_DOMAIN_WEBLINK_IN_LISTING PHONE_NUMBER_IN_LISTING EMAIL_ADDRESS_IN_LISTING Product adoption Product Adoption is not enforced at this time. Product adoption conformance Product Adoption is not enforced at this time. Returns policy The only RETURNS_POLICY reason code is UNSUPPORTED_RETURNS_PERIOD. The seller will have to revise their listing (or return business policy) with a supported return period for the site and category. The GetCategoryFeatures call of the Trading API can be used to verify the supported return periods for a particular category. For most eBay categories, the minimum return period that can be stated in a Returns Policy is 14 days for domestic and international sales, but some categories require a minimum 30-day return period.

        :return: The reason_code of this ComplianceDetail.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ComplianceDetail.

        This value states the nature of the listing violation. A reasonCode value is returned for each listing violation, and each compliance type can have several reason codes and related messages. The reasonCode values vary by compliance type. The reason codes for each compliance type are summarized below. Aspects adoption The reason codes for ASPECTS_ADOPTION compliance indicate that for the given violation, aspects listed in the violationData container are either missing from the listing or they have invalid values. The reason codes specify whether the violation is for required aspects, recommended (preferred) aspects, or soon to be required aspects. MISSING_OR_INVALID_REQUIRED_ASPECTS MISSING_OR_INVALID_PREFERRED_ASPECTS MISSING_OR_INVALID_SOON_TO_BE_REQUIRED_ASPECTS HTTPS The reason codes for HTTPS compliance identify where in the listing the violation occurs. For HTTPS policy violations, the seller will just need to remove the HTTP link (or update to HTTPS) from the listing details or product details: NON_SECURE_HTTP_LINK_IN_LISTING NON_SECURE_HTTP_LINK_IN_PRODUCT Non-eBay links The reason codes for OUTSIDE_EBAY_BUYING_AND_SELLING compliance identify the specific type of data (e.g., telephone number) that violated the policy. For each of these violations, the seller will just need to revise the listing, removing this information: UNAPPROVED_DOMAIN_WEBLINK_IN_LISTING PHONE_NUMBER_IN_LISTING EMAIL_ADDRESS_IN_LISTING Product adoption Product Adoption is not enforced at this time. Product adoption conformance Product Adoption is not enforced at this time. Returns policy The only RETURNS_POLICY reason code is UNSUPPORTED_RETURNS_PERIOD. The seller will have to revise their listing (or return business policy) with a supported return period for the site and category. The GetCategoryFeatures call of the Trading API can be used to verify the supported return periods for a particular category. For most eBay categories, the minimum return period that can be stated in a Returns Policy is 14 days for domestic and international sales, but some categories require a minimum 30-day return period.

        :param reason_code: The reason_code of this ComplianceDetail.
        :type reason_code: str
        """

        self._reason_code = reason_code

    @property
    def variation(self):
        """Gets the variation of this ComplianceDetail.


        :return: The variation of this ComplianceDetail.
        :rtype: VariationDetails
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation of this ComplianceDetail.


        :param variation: The variation of this ComplianceDetail.
        :type variation: VariationDetails
        """

        self._variation = variation

    @property
    def violation_data(self):
        """Gets the violation_data of this ComplianceDetail.

        This container provides more information about the listing violation, if applicable. The type of information that appears here will vary based on the compliance type and type of violation. For example, for ASPECTS_ADOPTION violations, this container lists the missing aspect(s) or aspect(s) with invalid values.

        :return: The violation_data of this ComplianceDetail.
        :rtype: List[NameValueList]
        """
        return self._violation_data

    @violation_data.setter
    def violation_data(self, violation_data):
        """Sets the violation_data of this ComplianceDetail.

        This container provides more information about the listing violation, if applicable. The type of information that appears here will vary based on the compliance type and type of violation. For example, for ASPECTS_ADOPTION violations, this container lists the missing aspect(s) or aspect(s) with invalid values.

        :param violation_data: The violation_data of this ComplianceDetail.
        :type violation_data: List[NameValueList]
        """

        self._violation_data = violation_data
