# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AspectRecommendations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, localized_aspect_name: str=None, suggested_values: List[str]=None):
        """AspectRecommendations - a model defined in OpenAPI

        :param localized_aspect_name: The localized_aspect_name of this AspectRecommendations.
        :param suggested_values: The suggested_values of this AspectRecommendations.
        """
        self.openapi_types = {
            'localized_aspect_name': str,
            'suggested_values': List[str]
        }

        self.attribute_map = {
            'localized_aspect_name': 'localizedAspectName',
            'suggested_values': 'suggestedValues'
        }

        self._localized_aspect_name = localized_aspect_name
        self._suggested_values = suggested_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AspectRecommendations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AspectRecommendations of this AspectRecommendations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def localized_aspect_name(self):
        """Gets the localized_aspect_name of this AspectRecommendations.

        The name of the item aspect for which eBay has a recommendation. In many cases, the same item aspect(s) that are returned under the violationData array for ASPECTS_ADOPTION listing violations are also returned here Note: This name is always localized for the specified marketplace.

        :return: The localized_aspect_name of this AspectRecommendations.
        :rtype: str
        """
        return self._localized_aspect_name

    @localized_aspect_name.setter
    def localized_aspect_name(self, localized_aspect_name):
        """Sets the localized_aspect_name of this AspectRecommendations.

        The name of the item aspect for which eBay has a recommendation. In many cases, the same item aspect(s) that are returned under the violationData array for ASPECTS_ADOPTION listing violations are also returned here Note: This name is always localized for the specified marketplace.

        :param localized_aspect_name: The localized_aspect_name of this AspectRecommendations.
        :type localized_aspect_name: str
        """

        self._localized_aspect_name = localized_aspect_name

    @property
    def suggested_values(self):
        """Gets the suggested_values of this AspectRecommendations.

        One or more valid values for the corresponding item aspect (in localizedAspectName) are returned here. These suggested values for the item aspect depend on the listing category and on the information specified in the listing. Sellers should confirm accuracy of the values before applying them to the listing. Please use getItemAspectsForCategory in the Taxonomy API or GetCategorySpecifics in the Trading API to get a comprehensive list of required and recommended aspects for a given category and a list of supported aspect values for each.

        :return: The suggested_values of this AspectRecommendations.
        :rtype: List[str]
        """
        return self._suggested_values

    @suggested_values.setter
    def suggested_values(self, suggested_values):
        """Sets the suggested_values of this AspectRecommendations.

        One or more valid values for the corresponding item aspect (in localizedAspectName) are returned here. These suggested values for the item aspect depend on the listing category and on the information specified in the listing. Sellers should confirm accuracy of the values before applying them to the listing. Please use getItemAspectsForCategory in the Taxonomy API or GetCategorySpecifics in the Trading API to get a comprehensive list of required and recommended aspects for a given category and a list of supported aspect values for each.

        :param suggested_values: The suggested_values of this AspectRecommendations.
        :type suggested_values: List[str]
        """

        self._suggested_values = suggested_values
