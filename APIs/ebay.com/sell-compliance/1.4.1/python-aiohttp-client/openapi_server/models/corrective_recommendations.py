# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect_recommendations import AspectRecommendations
from openapi_server.models.product_recommendation import ProductRecommendation
from openapi_server import util


class CorrectiveRecommendations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_recommendations: List[AspectRecommendations]=None, product_recommendation: ProductRecommendation=None):
        """CorrectiveRecommendations - a model defined in OpenAPI

        :param aspect_recommendations: The aspect_recommendations of this CorrectiveRecommendations.
        :param product_recommendation: The product_recommendation of this CorrectiveRecommendations.
        """
        self.openapi_types = {
            'aspect_recommendations': List[AspectRecommendations],
            'product_recommendation': ProductRecommendation
        }

        self.attribute_map = {
            'aspect_recommendations': 'aspectRecommendations',
            'product_recommendation': 'productRecommendation'
        }

        self._aspect_recommendations = aspect_recommendations
        self._product_recommendation = product_recommendation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorrectiveRecommendations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorrectiveRecommendations of this CorrectiveRecommendations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_recommendations(self):
        """Gets the aspect_recommendations of this CorrectiveRecommendations.

        This container is returned for ASPECTS_ADOPTION violations if eBay has found one or more item aspect name-value pairs that may be appropriate for the seller's product. In many cases, the missing or invalid item aspect(s) shown under the corresponding violationData array, will also show up under this array with suggested value(s).

        :return: The aspect_recommendations of this CorrectiveRecommendations.
        :rtype: List[AspectRecommendations]
        """
        return self._aspect_recommendations

    @aspect_recommendations.setter
    def aspect_recommendations(self, aspect_recommendations):
        """Sets the aspect_recommendations of this CorrectiveRecommendations.

        This container is returned for ASPECTS_ADOPTION violations if eBay has found one or more item aspect name-value pairs that may be appropriate for the seller's product. In many cases, the missing or invalid item aspect(s) shown under the corresponding violationData array, will also show up under this array with suggested value(s).

        :param aspect_recommendations: The aspect_recommendations of this CorrectiveRecommendations.
        :type aspect_recommendations: List[AspectRecommendations]
        """

        self._aspect_recommendations = aspect_recommendations

    @property
    def product_recommendation(self):
        """Gets the product_recommendation of this CorrectiveRecommendations.


        :return: The product_recommendation of this CorrectiveRecommendations.
        :rtype: ProductRecommendation
        """
        return self._product_recommendation

    @product_recommendation.setter
    def product_recommendation(self, product_recommendation):
        """Sets the product_recommendation of this CorrectiveRecommendations.


        :param product_recommendation: The product_recommendation of this CorrectiveRecommendations.
        :type product_recommendation: ProductRecommendation
        """

        self._product_recommendation = product_recommendation
