/*
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComplianceDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by each listing violation that is returned under the listingViolations container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.329665-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComplianceViolation {
  public static final String SERIALIZED_NAME_COMPLIANCE_TYPE = "complianceType";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_TYPE)
  private String complianceType;

  public static final String SERIALIZED_NAME_LISTING_ID = "listingId";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private String listingId;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_VIOLATIONS = "violations";
  @SerializedName(SERIALIZED_NAME_VIOLATIONS)
  private List<ComplianceDetail> violations = new ArrayList<>();

  public ComplianceViolation() {
  }

  public ComplianceViolation complianceType(String complianceType) {
    this.complianceType = complianceType;
    return this;
  }

  /**
   * This enumeration value indicates the compliance type of listing violation. See ComplianceTypeEnum for more information on each compliance type. This will always be returned for each listing violation that is found. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return complianceType
   */
  @javax.annotation.Nullable
  public String getComplianceType() {
    return complianceType;
  }

  public void setComplianceType(String complianceType) {
    this.complianceType = complianceType;
  }


  public ComplianceViolation listingId(String listingId) {
    this.listingId = listingId;
    return this;
  }

  /**
   * The unique identifier of the eBay listing that currently has the corresponding listing violation{s). This field will always be returned for each listing that has one or more violations.
   * @return listingId
   */
  @javax.annotation.Nullable
  public String getListingId() {
    return listingId;
  }

  public void setListingId(String listingId) {
    this.listingId = listingId;
  }


  public ComplianceViolation offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Note: This field is for future use, and will not be returned, even for listings created through the Inventory API. The unique identifier of the offer. This field is only applicable and returned for listings that were created through the Inventory API. To convert an Inventory Item object into an eBay listing, an Offer object must be created and published.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public ComplianceViolation sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * The seller-defined SKU value of the product in the listing with the violation{s). This field is only returned if defined in the listing. SKU values are optional in listings except when creating listings using the Inventory API model.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public ComplianceViolation violations(List<ComplianceDetail> violations) {
    this.violations = violations;
    return this;
  }

  public ComplianceViolation addViolationsItem(ComplianceDetail violationsItem) {
    if (this.violations == null) {
      this.violations = new ArrayList<>();
    }
    this.violations.add(violationsItem);
    return this;
  }

  /**
   * This container consists of an array of one or more listing violations applicable to the eBay listing specified in the listingId field. This array is returned for each eBay listing that has one or more violations. For each returned violation, the fields that are returned and the details that are given will depend on the listing violation.
   * @return violations
   */
  @javax.annotation.Nullable
  public List<ComplianceDetail> getViolations() {
    return violations;
  }

  public void setViolations(List<ComplianceDetail> violations) {
    this.violations = violations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceViolation complianceViolation = (ComplianceViolation) o;
    return Objects.equals(this.complianceType, complianceViolation.complianceType) &&
        Objects.equals(this.listingId, complianceViolation.listingId) &&
        Objects.equals(this.offerId, complianceViolation.offerId) &&
        Objects.equals(this.sku, complianceViolation.sku) &&
        Objects.equals(this.violations, complianceViolation.violations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complianceType, listingId, offerId, sku, violations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceViolation {\n");
    sb.append("    complianceType: ").append(toIndentedString(complianceType)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    violations: ").append(toIndentedString(violations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complianceType");
    openapiFields.add("listingId");
    openapiFields.add("offerId");
    openapiFields.add("sku");
    openapiFields.add("violations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComplianceViolation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceViolation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceViolation is not found in the empty JSON string", ComplianceViolation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComplianceViolation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceViolation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("complianceType") != null && !jsonObj.get("complianceType").isJsonNull()) && !jsonObj.get("complianceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complianceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complianceType").toString()));
      }
      if ((jsonObj.get("listingId") != null && !jsonObj.get("listingId").isJsonNull()) && !jsonObj.get("listingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingId").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (jsonObj.get("violations") != null && !jsonObj.get("violations").isJsonNull()) {
        JsonArray jsonArrayviolations = jsonObj.getAsJsonArray("violations");
        if (jsonArrayviolations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("violations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `violations` to be an array in the JSON string but got `%s`", jsonObj.get("violations").toString()));
          }

          // validate the optional field `violations` (array)
          for (int i = 0; i < jsonArrayviolations.size(); i++) {
            ComplianceDetail.validateJsonElement(jsonArrayviolations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceViolation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceViolation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceViolation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceViolation.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceViolation>() {
           @Override
           public void write(JsonWriter out, ComplianceViolation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceViolation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComplianceViolation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComplianceViolation
   * @throws IOException if the JSON string is invalid with respect to ComplianceViolation
   */
  public static ComplianceViolation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceViolation.class);
  }

  /**
   * Convert an instance of ComplianceViolation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

