/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CorrectiveRecommendations from './CorrectiveRecommendations';
import NameValueList from './NameValueList';
import VariationDetails from './VariationDetails';

/**
 * The ComplianceDetail model module.
 * @module model/ComplianceDetail
 * @version 1.4.1
 */
class ComplianceDetail {
    /**
     * Constructs a new <code>ComplianceDetail</code>.
     * This type is used by each listing violation that is returned under the violations container.
     * @alias module:model/ComplianceDetail
     */
    constructor() { 
        
        ComplianceDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComplianceDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComplianceDetail} obj Optional instance to populate.
     * @return {module:model/ComplianceDetail} The populated <code>ComplianceDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComplianceDetail();

            if (data.hasOwnProperty('complianceState')) {
                obj['complianceState'] = ApiClient.convertToType(data['complianceState'], 'String');
            }
            if (data.hasOwnProperty('correctiveRecommendations')) {
                obj['correctiveRecommendations'] = CorrectiveRecommendations.constructFromObject(data['correctiveRecommendations']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('reasonCode')) {
                obj['reasonCode'] = ApiClient.convertToType(data['reasonCode'], 'String');
            }
            if (data.hasOwnProperty('variation')) {
                obj['variation'] = VariationDetails.constructFromObject(data['variation']);
            }
            if (data.hasOwnProperty('violationData')) {
                obj['violationData'] = ApiClient.convertToType(data['violationData'], [NameValueList]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComplianceDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComplianceDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['complianceState'] && !(typeof data['complianceState'] === 'string' || data['complianceState'] instanceof String)) {
            throw new Error("Expected the field `complianceState` to be a primitive type in the JSON string but got " + data['complianceState']);
        }
        // validate the optional field `correctiveRecommendations`
        if (data['correctiveRecommendations']) { // data not null
          CorrectiveRecommendations.validateJSON(data['correctiveRecommendations']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reasonCode'] && !(typeof data['reasonCode'] === 'string' || data['reasonCode'] instanceof String)) {
            throw new Error("Expected the field `reasonCode` to be a primitive type in the JSON string but got " + data['reasonCode']);
        }
        // validate the optional field `variation`
        if (data['variation']) { // data not null
          VariationDetails.validateJSON(data['variation']);
        }
        if (data['violationData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['violationData'])) {
                throw new Error("Expected the field `violationData` to be an array in the JSON data but got " + data['violationData']);
            }
            // validate the optional field `violationData` (array)
            for (const item of data['violationData']) {
                NameValueList.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The enumeration value returned in this field indicates if the listing violation is considered to be OUT_OF_COMPLIANCE with an eBay listing policy, or the listing is considered to be AT_RISK of becoming non-compliant against an eBay listing policy. Generally, OUT_OF_COMPLIANCE policy violations can prevent the seller from revising a listing until the underlying violation(s) can be remedied. When the compliance state is AT_RISK, the seller is not blocked from revising the listing, but the seller should correct the violation to prevent the listing from being blocked for revisions in the future. Note: This field is returned for most violations, but not all. In the case that this field is not returned, it can be assumed that the state of the listing violation is OUT_OF_COMPLIANCE. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceStateEnum'>eBay API documentation</a>
 * @member {String} complianceState
 */
ComplianceDetail.prototype['complianceState'] = undefined;

/**
 * @member {module:model/CorrectiveRecommendations} correctiveRecommendations
 */
ComplianceDetail.prototype['correctiveRecommendations'] = undefined;

/**
 * This field provides a textual summary of the listing violation. A message field is returned for each listing violation. This message will vary widely based on the compliance type and corresponding reason code.
 * @member {String} message
 */
ComplianceDetail.prototype['message'] = undefined;

/**
 * This value states the nature of the listing violation. A reasonCode value is returned for each listing violation, and each compliance type can have several reason codes and related messages. The reasonCode values vary by compliance type. The reason codes for each compliance type are summarized below. Aspects adoption The reason codes for ASPECTS_ADOPTION compliance indicate that for the given violation, aspects listed in the violationData container are either missing from the listing or they have invalid values. The reason codes specify whether the violation is for required aspects, recommended (preferred) aspects, or soon to be required aspects. MISSING_OR_INVALID_REQUIRED_ASPECTS MISSING_OR_INVALID_PREFERRED_ASPECTS MISSING_OR_INVALID_SOON_TO_BE_REQUIRED_ASPECTS HTTPS The reason codes for HTTPS compliance identify where in the listing the violation occurs. For HTTPS policy violations, the seller will just need to remove the HTTP link (or update to HTTPS) from the listing details or product details: NON_SECURE_HTTP_LINK_IN_LISTING NON_SECURE_HTTP_LINK_IN_PRODUCT Non-eBay links The reason codes for OUTSIDE_EBAY_BUYING_AND_SELLING compliance identify the specific type of data (e.g., telephone number) that violated the policy. For each of these violations, the seller will just need to revise the listing, removing this information: UNAPPROVED_DOMAIN_WEBLINK_IN_LISTING PHONE_NUMBER_IN_LISTING EMAIL_ADDRESS_IN_LISTING Product adoption Product Adoption is not enforced at this time. Product adoption conformance Product Adoption is not enforced at this time. Returns policy The only RETURNS_POLICY reason code is UNSUPPORTED_RETURNS_PERIOD. The seller will have to revise their listing (or return business policy) with a supported return period for the site and category. The GetCategoryFeatures call of the Trading API can be used to verify the supported return periods for a particular category. For most eBay categories, the minimum return period that can be stated in a Returns Policy is 14 days for domestic and international sales, but some categories require a minimum 30-day return period.
 * @member {String} reasonCode
 */
ComplianceDetail.prototype['reasonCode'] = undefined;

/**
 * @member {module:model/VariationDetails} variation
 */
ComplianceDetail.prototype['variation'] = undefined;

/**
 * This container provides more information about the listing violation, if applicable. The type of information that appears here will vary based on the compliance type and type of violation. For example, for ASPECTS_ADOPTION violations, this container lists the missing aspect(s) or aspect(s) with invalid values.
 * @member {Array.<module:model/NameValueList>} violationData
 */
ComplianceDetail.prototype['violationData'] = undefined;






export default ComplianceDetail;

