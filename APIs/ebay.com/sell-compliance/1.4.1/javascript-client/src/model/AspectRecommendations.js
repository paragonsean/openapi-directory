/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AspectRecommendations model module.
 * @module model/AspectRecommendations
 * @version 1.4.1
 */
class AspectRecommendations {
    /**
     * Constructs a new <code>AspectRecommendations</code>.
     * This type is used by the aspectsRecommendation container, which is returned if eBay has found a listing with missing or invalid item aspects (ASPECTS_ADOPTION compliance type).
     * @alias module:model/AspectRecommendations
     */
    constructor() { 
        
        AspectRecommendations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AspectRecommendations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AspectRecommendations} obj Optional instance to populate.
     * @return {module:model/AspectRecommendations} The populated <code>AspectRecommendations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AspectRecommendations();

            if (data.hasOwnProperty('localizedAspectName')) {
                obj['localizedAspectName'] = ApiClient.convertToType(data['localizedAspectName'], 'String');
            }
            if (data.hasOwnProperty('suggestedValues')) {
                obj['suggestedValues'] = ApiClient.convertToType(data['suggestedValues'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AspectRecommendations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AspectRecommendations</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['localizedAspectName'] && !(typeof data['localizedAspectName'] === 'string' || data['localizedAspectName'] instanceof String)) {
            throw new Error("Expected the field `localizedAspectName` to be a primitive type in the JSON string but got " + data['localizedAspectName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestedValues'])) {
            throw new Error("Expected the field `suggestedValues` to be an array in the JSON data but got " + data['suggestedValues']);
        }

        return true;
    }


}



/**
 * The name of the item aspect for which eBay has a recommendation. In many cases, the same item aspect(s) that are returned under the violationData array for ASPECTS_ADOPTION listing violations are also returned here Note: This name is always localized for the specified marketplace.
 * @member {String} localizedAspectName
 */
AspectRecommendations.prototype['localizedAspectName'] = undefined;

/**
 * One or more valid values for the corresponding item aspect (in localizedAspectName) are returned here. These suggested values for the item aspect depend on the listing category and on the information specified in the listing. Sellers should confirm accuracy of the values before applying them to the listing. Please use getItemAspectsForCategory in the Taxonomy API or GetCategorySpecifics in the Trading API to get a comprehensive list of required and recommended aspects for a given category and a list of supported aspect values for each.
 * @member {Array.<String>} suggestedValues
 */
AspectRecommendations.prototype['suggestedValues'] = undefined;






export default AspectRecommendations;

