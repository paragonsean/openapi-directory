/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComplianceDetail from './ComplianceDetail';

/**
 * The ComplianceViolation model module.
 * @module model/ComplianceViolation
 * @version 1.4.1
 */
class ComplianceViolation {
    /**
     * Constructs a new <code>ComplianceViolation</code>.
     * This type is used by each listing violation that is returned under the listingViolations container.
     * @alias module:model/ComplianceViolation
     */
    constructor() { 
        
        ComplianceViolation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComplianceViolation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComplianceViolation} obj Optional instance to populate.
     * @return {module:model/ComplianceViolation} The populated <code>ComplianceViolation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComplianceViolation();

            if (data.hasOwnProperty('complianceType')) {
                obj['complianceType'] = ApiClient.convertToType(data['complianceType'], 'String');
            }
            if (data.hasOwnProperty('listingId')) {
                obj['listingId'] = ApiClient.convertToType(data['listingId'], 'String');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('violations')) {
                obj['violations'] = ApiClient.convertToType(data['violations'], [ComplianceDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComplianceViolation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComplianceViolation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['complianceType'] && !(typeof data['complianceType'] === 'string' || data['complianceType'] instanceof String)) {
            throw new Error("Expected the field `complianceType` to be a primitive type in the JSON string but got " + data['complianceType']);
        }
        // ensure the json data is a string
        if (data['listingId'] && !(typeof data['listingId'] === 'string' || data['listingId'] instanceof String)) {
            throw new Error("Expected the field `listingId` to be a primitive type in the JSON string but got " + data['listingId']);
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        if (data['violations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['violations'])) {
                throw new Error("Expected the field `violations` to be an array in the JSON data but got " + data['violations']);
            }
            // validate the optional field `violations` (array)
            for (const item of data['violations']) {
                ComplianceDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This enumeration value indicates the compliance type of listing violation. See ComplianceTypeEnum for more information on each compliance type. This will always be returned for each listing violation that is found. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/compliance/types/com:ComplianceTypeEnum'>eBay API documentation</a>
 * @member {String} complianceType
 */
ComplianceViolation.prototype['complianceType'] = undefined;

/**
 * The unique identifier of the eBay listing that currently has the corresponding listing violation{s). This field will always be returned for each listing that has one or more violations.
 * @member {String} listingId
 */
ComplianceViolation.prototype['listingId'] = undefined;

/**
 * Note: This field is for future use, and will not be returned, even for listings created through the Inventory API. The unique identifier of the offer. This field is only applicable and returned for listings that were created through the Inventory API. To convert an Inventory Item object into an eBay listing, an Offer object must be created and published.
 * @member {String} offerId
 */
ComplianceViolation.prototype['offerId'] = undefined;

/**
 * The seller-defined SKU value of the product in the listing with the violation{s). This field is only returned if defined in the listing. SKU values are optional in listings except when creating listings using the Inventory API model.
 * @member {String} sku
 */
ComplianceViolation.prototype['sku'] = undefined;

/**
 * This container consists of an array of one or more listing violations applicable to the eBay listing specified in the listingId field. This array is returned for each eBay listing that has one or more violations. For each returned violation, the fields that are returned and the details that are given will depend on the listing violation.
 * @member {Array.<module:model/ComplianceDetail>} violations
 */
ComplianceViolation.prototype['violations'] = undefined;






export default ComplianceViolation;

