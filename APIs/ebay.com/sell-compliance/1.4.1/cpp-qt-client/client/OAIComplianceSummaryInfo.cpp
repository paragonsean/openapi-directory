/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceSummaryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceSummaryInfo::OAIComplianceSummaryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceSummaryInfo::OAIComplianceSummaryInfo() {
    this->initializeModel();
}

OAIComplianceSummaryInfo::~OAIComplianceSummaryInfo() {}

void OAIComplianceSummaryInfo::initializeModel() {

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;

    m_listing_count_isSet = false;
    m_listing_count_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;
}

void OAIComplianceSummaryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceSummaryInfo::fromJsonObject(QJsonObject json) {

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;

    m_listing_count_isValid = ::OpenAPI::fromJsonValue(m_listing_count, json[QString("listingCount")]);
    m_listing_count_isSet = !json[QString("listingCount")].isNull() && m_listing_count_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;
}

QString OAIComplianceSummaryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceSummaryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    if (m_listing_count_isSet) {
        obj.insert(QString("listingCount"), ::OpenAPI::toJsonValue(m_listing_count));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    return obj;
}

QString OAIComplianceSummaryInfo::getComplianceType() const {
    return m_compliance_type;
}
void OAIComplianceSummaryInfo::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAIComplianceSummaryInfo::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAIComplianceSummaryInfo::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

qint32 OAIComplianceSummaryInfo::getListingCount() const {
    return m_listing_count;
}
void OAIComplianceSummaryInfo::setListingCount(const qint32 &listing_count) {
    m_listing_count = listing_count;
    m_listing_count_isSet = true;
}

bool OAIComplianceSummaryInfo::is_listing_count_Set() const{
    return m_listing_count_isSet;
}

bool OAIComplianceSummaryInfo::is_listing_count_Valid() const{
    return m_listing_count_isValid;
}

QString OAIComplianceSummaryInfo::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIComplianceSummaryInfo::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIComplianceSummaryInfo::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIComplianceSummaryInfo::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

bool OAIComplianceSummaryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceSummaryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
