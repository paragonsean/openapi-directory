/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAspectRecommendations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAspectRecommendations::OAIAspectRecommendations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAspectRecommendations::OAIAspectRecommendations() {
    this->initializeModel();
}

OAIAspectRecommendations::~OAIAspectRecommendations() {}

void OAIAspectRecommendations::initializeModel() {

    m_localized_aspect_name_isSet = false;
    m_localized_aspect_name_isValid = false;

    m_suggested_values_isSet = false;
    m_suggested_values_isValid = false;
}

void OAIAspectRecommendations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAspectRecommendations::fromJsonObject(QJsonObject json) {

    m_localized_aspect_name_isValid = ::OpenAPI::fromJsonValue(m_localized_aspect_name, json[QString("localizedAspectName")]);
    m_localized_aspect_name_isSet = !json[QString("localizedAspectName")].isNull() && m_localized_aspect_name_isValid;

    m_suggested_values_isValid = ::OpenAPI::fromJsonValue(m_suggested_values, json[QString("suggestedValues")]);
    m_suggested_values_isSet = !json[QString("suggestedValues")].isNull() && m_suggested_values_isValid;
}

QString OAIAspectRecommendations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAspectRecommendations::asJsonObject() const {
    QJsonObject obj;
    if (m_localized_aspect_name_isSet) {
        obj.insert(QString("localizedAspectName"), ::OpenAPI::toJsonValue(m_localized_aspect_name));
    }
    if (m_suggested_values.size() > 0) {
        obj.insert(QString("suggestedValues"), ::OpenAPI::toJsonValue(m_suggested_values));
    }
    return obj;
}

QString OAIAspectRecommendations::getLocalizedAspectName() const {
    return m_localized_aspect_name;
}
void OAIAspectRecommendations::setLocalizedAspectName(const QString &localized_aspect_name) {
    m_localized_aspect_name = localized_aspect_name;
    m_localized_aspect_name_isSet = true;
}

bool OAIAspectRecommendations::is_localized_aspect_name_Set() const{
    return m_localized_aspect_name_isSet;
}

bool OAIAspectRecommendations::is_localized_aspect_name_Valid() const{
    return m_localized_aspect_name_isValid;
}

QList<QString> OAIAspectRecommendations::getSuggestedValues() const {
    return m_suggested_values;
}
void OAIAspectRecommendations::setSuggestedValues(const QList<QString> &suggested_values) {
    m_suggested_values = suggested_values;
    m_suggested_values_isSet = true;
}

bool OAIAspectRecommendations::is_suggested_values_Set() const{
    return m_suggested_values_isSet;
}

bool OAIAspectRecommendations::is_suggested_values_Valid() const{
    return m_suggested_values_isValid;
}

bool OAIAspectRecommendations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_localized_aspect_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAspectRecommendations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
