/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceViolation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceViolation::OAIComplianceViolation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceViolation::OAIComplianceViolation() {
    this->initializeModel();
}

OAIComplianceViolation::~OAIComplianceViolation() {}

void OAIComplianceViolation::initializeModel() {

    m_compliance_type_isSet = false;
    m_compliance_type_isValid = false;

    m_listing_id_isSet = false;
    m_listing_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_violations_isSet = false;
    m_violations_isValid = false;
}

void OAIComplianceViolation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceViolation::fromJsonObject(QJsonObject json) {

    m_compliance_type_isValid = ::OpenAPI::fromJsonValue(m_compliance_type, json[QString("complianceType")]);
    m_compliance_type_isSet = !json[QString("complianceType")].isNull() && m_compliance_type_isValid;

    m_listing_id_isValid = ::OpenAPI::fromJsonValue(m_listing_id, json[QString("listingId")]);
    m_listing_id_isSet = !json[QString("listingId")].isNull() && m_listing_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_violations_isValid = ::OpenAPI::fromJsonValue(m_violations, json[QString("violations")]);
    m_violations_isSet = !json[QString("violations")].isNull() && m_violations_isValid;
}

QString OAIComplianceViolation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceViolation::asJsonObject() const {
    QJsonObject obj;
    if (m_compliance_type_isSet) {
        obj.insert(QString("complianceType"), ::OpenAPI::toJsonValue(m_compliance_type));
    }
    if (m_listing_id_isSet) {
        obj.insert(QString("listingId"), ::OpenAPI::toJsonValue(m_listing_id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_violations.size() > 0) {
        obj.insert(QString("violations"), ::OpenAPI::toJsonValue(m_violations));
    }
    return obj;
}

QString OAIComplianceViolation::getComplianceType() const {
    return m_compliance_type;
}
void OAIComplianceViolation::setComplianceType(const QString &compliance_type) {
    m_compliance_type = compliance_type;
    m_compliance_type_isSet = true;
}

bool OAIComplianceViolation::is_compliance_type_Set() const{
    return m_compliance_type_isSet;
}

bool OAIComplianceViolation::is_compliance_type_Valid() const{
    return m_compliance_type_isValid;
}

QString OAIComplianceViolation::getListingId() const {
    return m_listing_id;
}
void OAIComplianceViolation::setListingId(const QString &listing_id) {
    m_listing_id = listing_id;
    m_listing_id_isSet = true;
}

bool OAIComplianceViolation::is_listing_id_Set() const{
    return m_listing_id_isSet;
}

bool OAIComplianceViolation::is_listing_id_Valid() const{
    return m_listing_id_isValid;
}

QString OAIComplianceViolation::getOfferId() const {
    return m_offer_id;
}
void OAIComplianceViolation::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIComplianceViolation::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIComplianceViolation::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIComplianceViolation::getSku() const {
    return m_sku;
}
void OAIComplianceViolation::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIComplianceViolation::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIComplianceViolation::is_sku_Valid() const{
    return m_sku_isValid;
}

QList<OAIComplianceDetail> OAIComplianceViolation::getViolations() const {
    return m_violations;
}
void OAIComplianceViolation::setViolations(const QList<OAIComplianceDetail> &violations) {
    m_violations = violations;
    m_violations_isSet = true;
}

bool OAIComplianceViolation::is_violations_Set() const{
    return m_violations_isSet;
}

bool OAIComplianceViolation::is_violations_Valid() const{
    return m_violations_isValid;
}

bool OAIComplianceViolation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compliance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceViolation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
