/**
 * Compliance API
 * Service for providing information to sellers about their listings being non-compliant, or at risk for becoming non-compliant, against eBay listing policies.
 *
 * The version of the OpenAPI document: 1.4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceDetail::OAIComplianceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceDetail::OAIComplianceDetail() {
    this->initializeModel();
}

OAIComplianceDetail::~OAIComplianceDetail() {}

void OAIComplianceDetail::initializeModel() {

    m_compliance_state_isSet = false;
    m_compliance_state_isValid = false;

    m_corrective_recommendations_isSet = false;
    m_corrective_recommendations_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_variation_isSet = false;
    m_variation_isValid = false;

    m_violation_data_isSet = false;
    m_violation_data_isValid = false;
}

void OAIComplianceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceDetail::fromJsonObject(QJsonObject json) {

    m_compliance_state_isValid = ::OpenAPI::fromJsonValue(m_compliance_state, json[QString("complianceState")]);
    m_compliance_state_isSet = !json[QString("complianceState")].isNull() && m_compliance_state_isValid;

    m_corrective_recommendations_isValid = ::OpenAPI::fromJsonValue(m_corrective_recommendations, json[QString("correctiveRecommendations")]);
    m_corrective_recommendations_isSet = !json[QString("correctiveRecommendations")].isNull() && m_corrective_recommendations_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_variation_isValid = ::OpenAPI::fromJsonValue(m_variation, json[QString("variation")]);
    m_variation_isSet = !json[QString("variation")].isNull() && m_variation_isValid;

    m_violation_data_isValid = ::OpenAPI::fromJsonValue(m_violation_data, json[QString("violationData")]);
    m_violation_data_isSet = !json[QString("violationData")].isNull() && m_violation_data_isValid;
}

QString OAIComplianceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_compliance_state_isSet) {
        obj.insert(QString("complianceState"), ::OpenAPI::toJsonValue(m_compliance_state));
    }
    if (m_corrective_recommendations.isSet()) {
        obj.insert(QString("correctiveRecommendations"), ::OpenAPI::toJsonValue(m_corrective_recommendations));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_variation.isSet()) {
        obj.insert(QString("variation"), ::OpenAPI::toJsonValue(m_variation));
    }
    if (m_violation_data.size() > 0) {
        obj.insert(QString("violationData"), ::OpenAPI::toJsonValue(m_violation_data));
    }
    return obj;
}

QString OAIComplianceDetail::getComplianceState() const {
    return m_compliance_state;
}
void OAIComplianceDetail::setComplianceState(const QString &compliance_state) {
    m_compliance_state = compliance_state;
    m_compliance_state_isSet = true;
}

bool OAIComplianceDetail::is_compliance_state_Set() const{
    return m_compliance_state_isSet;
}

bool OAIComplianceDetail::is_compliance_state_Valid() const{
    return m_compliance_state_isValid;
}

OAICorrectiveRecommendations OAIComplianceDetail::getCorrectiveRecommendations() const {
    return m_corrective_recommendations;
}
void OAIComplianceDetail::setCorrectiveRecommendations(const OAICorrectiveRecommendations &corrective_recommendations) {
    m_corrective_recommendations = corrective_recommendations;
    m_corrective_recommendations_isSet = true;
}

bool OAIComplianceDetail::is_corrective_recommendations_Set() const{
    return m_corrective_recommendations_isSet;
}

bool OAIComplianceDetail::is_corrective_recommendations_Valid() const{
    return m_corrective_recommendations_isValid;
}

QString OAIComplianceDetail::getMessage() const {
    return m_message;
}
void OAIComplianceDetail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIComplianceDetail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIComplianceDetail::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIComplianceDetail::getReasonCode() const {
    return m_reason_code;
}
void OAIComplianceDetail::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIComplianceDetail::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIComplianceDetail::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

OAIVariationDetails OAIComplianceDetail::getVariation() const {
    return m_variation;
}
void OAIComplianceDetail::setVariation(const OAIVariationDetails &variation) {
    m_variation = variation;
    m_variation_isSet = true;
}

bool OAIComplianceDetail::is_variation_Set() const{
    return m_variation_isSet;
}

bool OAIComplianceDetail::is_variation_Valid() const{
    return m_variation_isValid;
}

QList<OAINameValueList> OAIComplianceDetail::getViolationData() const {
    return m_violation_data;
}
void OAIComplianceDetail::setViolationData(const QList<OAINameValueList> &violation_data) {
    m_violation_data = violation_data;
    m_violation_data_isSet = true;
}

bool OAIComplianceDetail::is_violation_data_Set() const{
    return m_violation_data_isSet;
}

bool OAIComplianceDetail::is_violation_data_Valid() const{
    return m_violation_data_isValid;
}

bool OAIComplianceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compliance_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrective_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
