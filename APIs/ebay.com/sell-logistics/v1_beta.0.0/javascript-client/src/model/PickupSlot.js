/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PickupSlot model module.
 * @module model/PickupSlot
 * @version v1_beta.0.0
 */
class PickupSlot {
    /**
     * Constructs a new <code>PickupSlot</code>.
     * This complex type defines a time window for the pickup of a package.
     * @alias module:model/PickupSlot
     */
    constructor() { 
        
        PickupSlot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PickupSlot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PickupSlot} obj Optional instance to populate.
     * @return {module:model/PickupSlot} The populated <code>PickupSlot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PickupSlot();

            if (data.hasOwnProperty('pickupSlotEndTime')) {
                obj['pickupSlotEndTime'] = ApiClient.convertToType(data['pickupSlotEndTime'], 'String');
            }
            if (data.hasOwnProperty('pickupSlotId')) {
                obj['pickupSlotId'] = ApiClient.convertToType(data['pickupSlotId'], 'String');
            }
            if (data.hasOwnProperty('pickupSlotStartTime')) {
                obj['pickupSlotStartTime'] = ApiClient.convertToType(data['pickupSlotStartTime'], 'String');
            }
            if (data.hasOwnProperty('pickupSlotTimeZone')) {
                obj['pickupSlotTimeZone'] = ApiClient.convertToType(data['pickupSlotTimeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PickupSlot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PickupSlot</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pickupSlotEndTime'] && !(typeof data['pickupSlotEndTime'] === 'string' || data['pickupSlotEndTime'] instanceof String)) {
            throw new Error("Expected the field `pickupSlotEndTime` to be a primitive type in the JSON string but got " + data['pickupSlotEndTime']);
        }
        // ensure the json data is a string
        if (data['pickupSlotId'] && !(typeof data['pickupSlotId'] === 'string' || data['pickupSlotId'] instanceof String)) {
            throw new Error("Expected the field `pickupSlotId` to be a primitive type in the JSON string but got " + data['pickupSlotId']);
        }
        // ensure the json data is a string
        if (data['pickupSlotStartTime'] && !(typeof data['pickupSlotStartTime'] === 'string' || data['pickupSlotStartTime'] instanceof String)) {
            throw new Error("Expected the field `pickupSlotStartTime` to be a primitive type in the JSON string but got " + data['pickupSlotStartTime']);
        }
        // ensure the json data is a string
        if (data['pickupSlotTimeZone'] && !(typeof data['pickupSlotTimeZone'] === 'string' || data['pickupSlotTimeZone'] instanceof String)) {
            throw new Error("Expected the field `pickupSlotTimeZone` to be a primitive type in the JSON string but got " + data['pickupSlotTimeZone']);
        }

        return true;
    }


}



/**
 * The date and time the pickup slot ends, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z</code> <br><b>Example:</b> <code>2018-08-20T07:09:00.000Z</code>
 * @member {String} pickupSlotEndTime
 */
PickupSlot.prototype['pickupSlotEndTime'] = undefined;

/**
 * Seller-defined name for the pickup slot. <!-- Max characters? -->
 * @member {String} pickupSlotId
 */
PickupSlot.prototype['pickupSlotId'] = undefined;

/**
 * The date and time the pickup slot begins, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> UTC string.
 * @member {String} pickupSlotStartTime
 */
PickupSlot.prototype['pickupSlotStartTime'] = undefined;

/**
 * The time zone of the pickup location, returned as <a href=\"https://www.iana.org/time-zones\" target=\"_blank\">Time Zone Database</a> ID (also know as an Olson time zone ID).
 * @member {String} pickupSlotTimeZone
 */
PickupSlot.prototype['pickupSlotTimeZone'] = undefined;






export default PickupSlot;

