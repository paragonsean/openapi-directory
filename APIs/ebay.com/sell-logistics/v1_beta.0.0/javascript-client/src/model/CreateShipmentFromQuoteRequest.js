/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalOption from './AdditionalOption';
import Contact from './Contact';

/**
 * The CreateShipmentFromQuoteRequest model module.
 * @module model/CreateShipmentFromQuoteRequest
 * @version v1_beta.0.0
 */
class CreateShipmentFromQuoteRequest {
    /**
     * Constructs a new <code>CreateShipmentFromQuoteRequest</code>.
     * This complex type contains the request payload for the &lt;b&gt;createFromShippingQuote&lt;/b&gt; method.
     * @alias module:model/CreateShipmentFromQuoteRequest
     */
    constructor() { 
        
        CreateShipmentFromQuoteRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateShipmentFromQuoteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateShipmentFromQuoteRequest} obj Optional instance to populate.
     * @return {module:model/CreateShipmentFromQuoteRequest} The populated <code>CreateShipmentFromQuoteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateShipmentFromQuoteRequest();

            if (data.hasOwnProperty('additionalOptions')) {
                obj['additionalOptions'] = ApiClient.convertToType(data['additionalOptions'], [AdditionalOption]);
            }
            if (data.hasOwnProperty('labelCustomMessage')) {
                obj['labelCustomMessage'] = ApiClient.convertToType(data['labelCustomMessage'], 'String');
            }
            if (data.hasOwnProperty('labelSize')) {
                obj['labelSize'] = ApiClient.convertToType(data['labelSize'], 'String');
            }
            if (data.hasOwnProperty('rateId')) {
                obj['rateId'] = ApiClient.convertToType(data['rateId'], 'String');
            }
            if (data.hasOwnProperty('returnTo')) {
                obj['returnTo'] = Contact.constructFromObject(data['returnTo']);
            }
            if (data.hasOwnProperty('shippingQuoteId')) {
                obj['shippingQuoteId'] = ApiClient.convertToType(data['shippingQuoteId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateShipmentFromQuoteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateShipmentFromQuoteRequest</code>.
     */
    static validateJSON(data) {
        if (data['additionalOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalOptions'])) {
                throw new Error("Expected the field `additionalOptions` to be an array in the JSON data but got " + data['additionalOptions']);
            }
            // validate the optional field `additionalOptions` (array)
            for (const item of data['additionalOptions']) {
                AdditionalOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['labelCustomMessage'] && !(typeof data['labelCustomMessage'] === 'string' || data['labelCustomMessage'] instanceof String)) {
            throw new Error("Expected the field `labelCustomMessage` to be a primitive type in the JSON string but got " + data['labelCustomMessage']);
        }
        // ensure the json data is a string
        if (data['labelSize'] && !(typeof data['labelSize'] === 'string' || data['labelSize'] instanceof String)) {
            throw new Error("Expected the field `labelSize` to be a primitive type in the JSON string but got " + data['labelSize']);
        }
        // ensure the json data is a string
        if (data['rateId'] && !(typeof data['rateId'] === 'string' || data['rateId'] instanceof String)) {
            throw new Error("Expected the field `rateId` to be a primitive type in the JSON string but got " + data['rateId']);
        }
        // validate the optional field `returnTo`
        if (data['returnTo']) { // data not null
          Contact.validateJSON(data['returnTo']);
        }
        // ensure the json data is a string
        if (data['shippingQuoteId'] && !(typeof data['shippingQuoteId'] === 'string' || data['shippingQuoteId'] instanceof String)) {
            throw new Error("Expected the field `shippingQuoteId` to be a primitive type in the JSON string but got " + data['shippingQuoteId']);
        }

        return true;
    }


}



/**
 * Supply a list of one or more shipping options that the seller wants to purchase for this shipment.  <br><br>The <b>baseShippingCost</b> field that's associated with the selected shipping rate is the cost of the base service offered in the rate. In addition to the base service, sellers can add additional shipping services to the base service. Shipping options include things such as shipping insurance or a recipient's signature upon delivery. The cost of any added services is summed with the base shipping cost to determine the final cost for the shipment. All options added to the shipment must be chosen from the set of shipping options offered with the selected rate.
 * @member {Array.<module:model/AdditionalOption>} additionalOptions
 */
CreateShipmentFromQuoteRequest.prototype['additionalOptions'] = undefined;

/**
 * Optional text to be printed on the shipping label if the selected shipping carrier supports custom messages on their labels.
 * @member {String} labelCustomMessage
 */
CreateShipmentFromQuoteRequest.prototype['labelCustomMessage'] = undefined;

/**
 * The seller's desired label size. Any supplied value is applied only if the shipping carrier supports multiple label sizes, otherwise the carrier's default label size is used.  <br><brCurrently, the only valid value is: <code>4\"x6\"</code>
 * @member {String} labelSize
 */
CreateShipmentFromQuoteRequest.prototype['labelSize'] = undefined;

/**
 * The eBay-assigned ID of the shipping rate that the seller selected for the shipment. This value is generated by a call to <b>createShippingQuote</b> and is returned in the <b>rates.rateId</b> field.
 * @member {String} rateId
 */
CreateShipmentFromQuoteRequest.prototype['rateId'] = undefined;

/**
 * @member {module:model/Contact} returnTo
 */
CreateShipmentFromQuoteRequest.prototype['returnTo'] = undefined;

/**
 * The unique eBay-assigned ID of the shipping quote that was generated by a call to <b>createShippingQuote</b>.
 * @member {String} shippingQuoteId
 */
CreateShipmentFromQuoteRequest.prototype['shippingQuoteId'] = undefined;






export default CreateShipmentFromQuoteRequest;

