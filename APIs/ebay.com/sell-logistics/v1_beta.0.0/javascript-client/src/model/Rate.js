/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalOption from './AdditionalOption';
import Amount from './Amount';
import PickupSlot from './PickupSlot';

/**
 * The Rate model module.
 * @module model/Rate
 * @version v1_beta.0.0
 */
class Rate {
    /**
     * Constructs a new <code>Rate</code>.
     * This complex type contains live quote information about a shipping service that&#39;s available for a given shipping quote request, including the shipping carrier and service, delivery window, shipping cost, and additional shipping options.
     * @alias module:model/Rate
     */
    constructor() { 
        
        Rate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rate} obj Optional instance to populate.
     * @return {module:model/Rate} The populated <code>Rate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rate();

            if (data.hasOwnProperty('additionalOptions')) {
                obj['additionalOptions'] = ApiClient.convertToType(data['additionalOptions'], [AdditionalOption]);
            }
            if (data.hasOwnProperty('baseShippingCost')) {
                obj['baseShippingCost'] = Amount.constructFromObject(data['baseShippingCost']);
            }
            if (data.hasOwnProperty('destinationTimeZone')) {
                obj['destinationTimeZone'] = ApiClient.convertToType(data['destinationTimeZone'], 'String');
            }
            if (data.hasOwnProperty('maxEstimatedDeliveryDate')) {
                obj['maxEstimatedDeliveryDate'] = ApiClient.convertToType(data['maxEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('minEstimatedDeliveryDate')) {
                obj['minEstimatedDeliveryDate'] = ApiClient.convertToType(data['minEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('pickupNetworks')) {
                obj['pickupNetworks'] = ApiClient.convertToType(data['pickupNetworks'], ['String']);
            }
            if (data.hasOwnProperty('pickupSlots')) {
                obj['pickupSlots'] = ApiClient.convertToType(data['pickupSlots'], [PickupSlot]);
            }
            if (data.hasOwnProperty('pickupType')) {
                obj['pickupType'] = ApiClient.convertToType(data['pickupType'], 'String');
            }
            if (data.hasOwnProperty('rateId')) {
                obj['rateId'] = ApiClient.convertToType(data['rateId'], 'String');
            }
            if (data.hasOwnProperty('rateRecommendation')) {
                obj['rateRecommendation'] = ApiClient.convertToType(data['rateRecommendation'], ['String']);
            }
            if (data.hasOwnProperty('shippingCarrierCode')) {
                obj['shippingCarrierCode'] = ApiClient.convertToType(data['shippingCarrierCode'], 'String');
            }
            if (data.hasOwnProperty('shippingCarrierName')) {
                obj['shippingCarrierName'] = ApiClient.convertToType(data['shippingCarrierName'], 'String');
            }
            if (data.hasOwnProperty('shippingServiceCode')) {
                obj['shippingServiceCode'] = ApiClient.convertToType(data['shippingServiceCode'], 'String');
            }
            if (data.hasOwnProperty('shippingServiceName')) {
                obj['shippingServiceName'] = ApiClient.convertToType(data['shippingServiceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rate</code>.
     */
    static validateJSON(data) {
        if (data['additionalOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalOptions'])) {
                throw new Error("Expected the field `additionalOptions` to be an array in the JSON data but got " + data['additionalOptions']);
            }
            // validate the optional field `additionalOptions` (array)
            for (const item of data['additionalOptions']) {
                AdditionalOption.validateJSON(item);
            };
        }
        // validate the optional field `baseShippingCost`
        if (data['baseShippingCost']) { // data not null
          Amount.validateJSON(data['baseShippingCost']);
        }
        // ensure the json data is a string
        if (data['destinationTimeZone'] && !(typeof data['destinationTimeZone'] === 'string' || data['destinationTimeZone'] instanceof String)) {
            throw new Error("Expected the field `destinationTimeZone` to be a primitive type in the JSON string but got " + data['destinationTimeZone']);
        }
        // ensure the json data is a string
        if (data['maxEstimatedDeliveryDate'] && !(typeof data['maxEstimatedDeliveryDate'] === 'string' || data['maxEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['maxEstimatedDeliveryDate']);
        }
        // ensure the json data is a string
        if (data['minEstimatedDeliveryDate'] && !(typeof data['minEstimatedDeliveryDate'] === 'string' || data['minEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['minEstimatedDeliveryDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pickupNetworks'])) {
            throw new Error("Expected the field `pickupNetworks` to be an array in the JSON data but got " + data['pickupNetworks']);
        }
        if (data['pickupSlots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pickupSlots'])) {
                throw new Error("Expected the field `pickupSlots` to be an array in the JSON data but got " + data['pickupSlots']);
            }
            // validate the optional field `pickupSlots` (array)
            for (const item of data['pickupSlots']) {
                PickupSlot.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['pickupType'] && !(typeof data['pickupType'] === 'string' || data['pickupType'] instanceof String)) {
            throw new Error("Expected the field `pickupType` to be a primitive type in the JSON string but got " + data['pickupType']);
        }
        // ensure the json data is a string
        if (data['rateId'] && !(typeof data['rateId'] === 'string' || data['rateId'] instanceof String)) {
            throw new Error("Expected the field `rateId` to be a primitive type in the JSON string but got " + data['rateId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rateRecommendation'])) {
            throw new Error("Expected the field `rateRecommendation` to be an array in the JSON data but got " + data['rateRecommendation']);
        }
        // ensure the json data is a string
        if (data['shippingCarrierCode'] && !(typeof data['shippingCarrierCode'] === 'string' || data['shippingCarrierCode'] instanceof String)) {
            throw new Error("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got " + data['shippingCarrierCode']);
        }
        // ensure the json data is a string
        if (data['shippingCarrierName'] && !(typeof data['shippingCarrierName'] === 'string' || data['shippingCarrierName'] instanceof String)) {
            throw new Error("Expected the field `shippingCarrierName` to be a primitive type in the JSON string but got " + data['shippingCarrierName']);
        }
        // ensure the json data is a string
        if (data['shippingServiceCode'] && !(typeof data['shippingServiceCode'] === 'string' || data['shippingServiceCode'] instanceof String)) {
            throw new Error("Expected the field `shippingServiceCode` to be a primitive type in the JSON string but got " + data['shippingServiceCode']);
        }
        // ensure the json data is a string
        if (data['shippingServiceName'] && !(typeof data['shippingServiceName'] === 'string' || data['shippingServiceName'] instanceof String)) {
            throw new Error("Expected the field `shippingServiceName` to be a primitive type in the JSON string but got " + data['shippingServiceName']);
        }

        return true;
    }


}



/**
 * Contains service and pricing information for one or more shipping options that are offered by the carrier and can be purchased in addition to the base shipping service provided by this rate. Shipping options can include items such as <code>INSURANCE</code> and <code>SIGNATURE</code>.
 * @member {Array.<module:model/AdditionalOption>} additionalOptions
 */
Rate.prototype['additionalOptions'] = undefined;

/**
 * @member {module:model/Amount} baseShippingCost
 */
Rate.prototype['baseShippingCost'] = undefined;

/**
 * The name of the time zone region, as defined in the <a href=\"http://www.iana.org/time-zones\"  target=\"_blank\">IANA Time Zone Database</a>, to which the package is being shipped.  <br><br>Delivery dates are calculated relative to this time zone.  <br><br><span class=\"tablenote\"><strong>Note:</strong> This is different from a Coordinated Universal Time (UTC) offset. For example, the <i>America/Los_Angeles</i> time zone identifies a region with the UTC standard time offset of <code>-08:00</code>, but so do several other time zones, including <i>America/Tijuana</i>,<i>America/Dawson</i>, and <i>Pacific/Pitcairn</i>.</span>
 * @member {String} destinationTimeZone
 */
Rate.prototype['destinationTimeZone'] = undefined;

/**
 * The latest stated date and time the shipment will be delivered at this rate.  <br><br>The time stamp is formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z</code> <br><b>Example:</b> <code>2018-08-20T07:09:00.000Z</code>
 * @member {String} maxEstimatedDeliveryDate
 */
Rate.prototype['maxEstimatedDeliveryDate'] = undefined;

/**
 * The estimated earliest date and time the shipment will be delivered at this rate. The time stamp is formatted as an ISO 8601 UTC string.
 * @member {String} minEstimatedDeliveryDate
 */
Rate.prototype['minEstimatedDeliveryDate'] = undefined;

/**
 * A list of pickup networks compatible with the shipping service.
 * @member {Array.<String>} pickupNetworks
 */
Rate.prototype['pickupNetworks'] = undefined;

/**
 * A list of available pickup slots for the package.
 * @member {Array.<module:model/PickupSlot>} pickupSlots
 */
Rate.prototype['pickupSlots'] = undefined;

/**
 * The type of pickup or drop-off service associated with the <b>pickupSlots</b> time frames. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/logistics/types/api:PickupTypeEnum'>eBay API documentation</a>
 * @member {String} pickupType
 */
Rate.prototype['pickupType'] = undefined;

/**
 * The unique eBay-assigned ID for this shipping rate.
 * @member {String} rateId
 */
Rate.prototype['rateId'] = undefined;

/**
 * A list of reasons this rate is recommended. Available values are: <ul> <li><code>BUYER_CHOSEN</code> &mdash; The rate meets or exceeds the requirements of the buyer's preferred shipping option.</li> <li><code>CHEAPEST_ON_TIME</code> &mdash; The rate is the cheapest rate available that will provide delivery within the seller's time frame commitment.</li>  <li><code>EBAY_PLUS_OK</code> &mdash; The rate complies with the shipping requirements of the eBay Plus program.</li> <li><code>FASTEST_ON_TIME</code> &mdash; The rate has the fastest shipping time, and will provide delivery within the seller's time frame commitment.</li> <li><code>GUARANTEED_DELIVERY_OK</code> &mdash; The rate complies with the shipping requirements of the eBay Guaranteed Delivery program.</li></ul>
 * @member {Array.<String>} rateRecommendation
 */
Rate.prototype['rateRecommendation'] = undefined;

/**
 * The code name of the shipping carrier who will provide the service identified by <b>shippingServiceCode</b>.
 * @member {String} shippingCarrierCode
 */
Rate.prototype['shippingCarrierCode'] = undefined;

/**
 * The common name of the shipping carrier.
 * @member {String} shippingCarrierName
 */
Rate.prototype['shippingCarrierName'] = undefined;

/**
 * The code name of the shipping service to be provided by the carrier identified by <b>shippingCarrierCode</b>.
 * @member {String} shippingServiceCode
 */
Rate.prototype['shippingServiceCode'] = undefined;

/**
 * The common name of the shipping service.
 * @member {String} shippingServiceName
 */
Rate.prototype['shippingServiceName'] = undefined;






export default Rate;

