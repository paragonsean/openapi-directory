/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalOption from './AdditionalOption';
import Amount from './Amount';

/**
 * The PurchasedRate model module.
 * @module model/PurchasedRate
 * @version v1_beta.0.0
 */
class PurchasedRate {
    /**
     * Constructs a new <code>PurchasedRate</code>.
     * The \&quot;rate\&quot; that has been selected and purchased for the shipment, as referenced by the &lt;b&gt;rateId&lt;/b&gt; value.
     * @alias module:model/PurchasedRate
     */
    constructor() { 
        
        PurchasedRate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchasedRate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchasedRate} obj Optional instance to populate.
     * @return {module:model/PurchasedRate} The populated <code>PurchasedRate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchasedRate();

            if (data.hasOwnProperty('additionalOptions')) {
                obj['additionalOptions'] = ApiClient.convertToType(data['additionalOptions'], [AdditionalOption]);
            }
            if (data.hasOwnProperty('baseShippingCost')) {
                obj['baseShippingCost'] = Amount.constructFromObject(data['baseShippingCost']);
            }
            if (data.hasOwnProperty('destinationTimeZone')) {
                obj['destinationTimeZone'] = ApiClient.convertToType(data['destinationTimeZone'], 'String');
            }
            if (data.hasOwnProperty('maxEstimatedDeliveryDate')) {
                obj['maxEstimatedDeliveryDate'] = ApiClient.convertToType(data['maxEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('minEstimatedDeliveryDate')) {
                obj['minEstimatedDeliveryDate'] = ApiClient.convertToType(data['minEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('pickupNetworks')) {
                obj['pickupNetworks'] = ApiClient.convertToType(data['pickupNetworks'], ['String']);
            }
            if (data.hasOwnProperty('pickupSlotId')) {
                obj['pickupSlotId'] = ApiClient.convertToType(data['pickupSlotId'], 'String');
            }
            if (data.hasOwnProperty('pickupType')) {
                obj['pickupType'] = ApiClient.convertToType(data['pickupType'], 'String');
            }
            if (data.hasOwnProperty('rateId')) {
                obj['rateId'] = ApiClient.convertToType(data['rateId'], 'String');
            }
            if (data.hasOwnProperty('shippingCarrierCode')) {
                obj['shippingCarrierCode'] = ApiClient.convertToType(data['shippingCarrierCode'], 'String');
            }
            if (data.hasOwnProperty('shippingCarrierName')) {
                obj['shippingCarrierName'] = ApiClient.convertToType(data['shippingCarrierName'], 'String');
            }
            if (data.hasOwnProperty('shippingQuoteId')) {
                obj['shippingQuoteId'] = ApiClient.convertToType(data['shippingQuoteId'], 'String');
            }
            if (data.hasOwnProperty('shippingServiceCode')) {
                obj['shippingServiceCode'] = ApiClient.convertToType(data['shippingServiceCode'], 'String');
            }
            if (data.hasOwnProperty('shippingServiceName')) {
                obj['shippingServiceName'] = ApiClient.convertToType(data['shippingServiceName'], 'String');
            }
            if (data.hasOwnProperty('totalShippingCost')) {
                obj['totalShippingCost'] = Amount.constructFromObject(data['totalShippingCost']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchasedRate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchasedRate</code>.
     */
    static validateJSON(data) {
        if (data['additionalOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalOptions'])) {
                throw new Error("Expected the field `additionalOptions` to be an array in the JSON data but got " + data['additionalOptions']);
            }
            // validate the optional field `additionalOptions` (array)
            for (const item of data['additionalOptions']) {
                AdditionalOption.validateJSON(item);
            };
        }
        // validate the optional field `baseShippingCost`
        if (data['baseShippingCost']) { // data not null
          Amount.validateJSON(data['baseShippingCost']);
        }
        // ensure the json data is a string
        if (data['destinationTimeZone'] && !(typeof data['destinationTimeZone'] === 'string' || data['destinationTimeZone'] instanceof String)) {
            throw new Error("Expected the field `destinationTimeZone` to be a primitive type in the JSON string but got " + data['destinationTimeZone']);
        }
        // ensure the json data is a string
        if (data['maxEstimatedDeliveryDate'] && !(typeof data['maxEstimatedDeliveryDate'] === 'string' || data['maxEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['maxEstimatedDeliveryDate']);
        }
        // ensure the json data is a string
        if (data['minEstimatedDeliveryDate'] && !(typeof data['minEstimatedDeliveryDate'] === 'string' || data['minEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['minEstimatedDeliveryDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pickupNetworks'])) {
            throw new Error("Expected the field `pickupNetworks` to be an array in the JSON data but got " + data['pickupNetworks']);
        }
        // ensure the json data is a string
        if (data['pickupSlotId'] && !(typeof data['pickupSlotId'] === 'string' || data['pickupSlotId'] instanceof String)) {
            throw new Error("Expected the field `pickupSlotId` to be a primitive type in the JSON string but got " + data['pickupSlotId']);
        }
        // ensure the json data is a string
        if (data['pickupType'] && !(typeof data['pickupType'] === 'string' || data['pickupType'] instanceof String)) {
            throw new Error("Expected the field `pickupType` to be a primitive type in the JSON string but got " + data['pickupType']);
        }
        // ensure the json data is a string
        if (data['rateId'] && !(typeof data['rateId'] === 'string' || data['rateId'] instanceof String)) {
            throw new Error("Expected the field `rateId` to be a primitive type in the JSON string but got " + data['rateId']);
        }
        // ensure the json data is a string
        if (data['shippingCarrierCode'] && !(typeof data['shippingCarrierCode'] === 'string' || data['shippingCarrierCode'] instanceof String)) {
            throw new Error("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got " + data['shippingCarrierCode']);
        }
        // ensure the json data is a string
        if (data['shippingCarrierName'] && !(typeof data['shippingCarrierName'] === 'string' || data['shippingCarrierName'] instanceof String)) {
            throw new Error("Expected the field `shippingCarrierName` to be a primitive type in the JSON string but got " + data['shippingCarrierName']);
        }
        // ensure the json data is a string
        if (data['shippingQuoteId'] && !(typeof data['shippingQuoteId'] === 'string' || data['shippingQuoteId'] instanceof String)) {
            throw new Error("Expected the field `shippingQuoteId` to be a primitive type in the JSON string but got " + data['shippingQuoteId']);
        }
        // ensure the json data is a string
        if (data['shippingServiceCode'] && !(typeof data['shippingServiceCode'] === 'string' || data['shippingServiceCode'] instanceof String)) {
            throw new Error("Expected the field `shippingServiceCode` to be a primitive type in the JSON string but got " + data['shippingServiceCode']);
        }
        // ensure the json data is a string
        if (data['shippingServiceName'] && !(typeof data['shippingServiceName'] === 'string' || data['shippingServiceName'] instanceof String)) {
            throw new Error("Expected the field `shippingServiceName` to be a primitive type in the JSON string but got " + data['shippingServiceName']);
        }
        // validate the optional field `totalShippingCost`
        if (data['totalShippingCost']) { // data not null
          Amount.validateJSON(data['totalShippingCost']);
        }

        return true;
    }


}



/**
 * An list of additional, optional features that have been purchased for the shipment.
 * @member {Array.<module:model/AdditionalOption>} additionalOptions
 */
PurchasedRate.prototype['additionalOptions'] = undefined;

/**
 * @member {module:model/Amount} baseShippingCost
 */
PurchasedRate.prototype['baseShippingCost'] = undefined;

/**
 * The time zone of the destination according to <a href=\"https://www.iana.org/time-zones\" target=\"_blank\">Time Zone Database</a>. For example, \"America/Los_Angeles\".
 * @member {String} destinationTimeZone
 */
PurchasedRate.prototype['destinationTimeZone'] = undefined;

/**
 * A string value representing maximum (latest) estimated delivery time, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z</code> <br><b>Example:</b> <code>2018-08-20T07:09:00.000Z</code>
 * @member {String} maxEstimatedDeliveryDate
 */
PurchasedRate.prototype['maxEstimatedDeliveryDate'] = undefined;

/**
 * A string value representing minimum (earliest) estimated delivery time, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a>ISO 8601</a> UTC string.
 * @member {String} minEstimatedDeliveryDate
 */
PurchasedRate.prototype['minEstimatedDeliveryDate'] = undefined;

/**
 * A list of pickup networks compatible with the shipping service.
 * @member {Array.<String>} pickupNetworks
 */
PurchasedRate.prototype['pickupNetworks'] = undefined;

/**
 * This unique eBay-assigned ID value is returned only if the shipment has been configured for a scheduled pickup.
 * @member {String} pickupSlotId
 */
PurchasedRate.prototype['pickupSlotId'] = undefined;

/**
 * The type of pickup or drop off configured for the shipment. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/logistics/types/api:PickupTypeEnum'>eBay API documentation</a>
 * @member {String} pickupType
 */
PurchasedRate.prototype['pickupType'] = undefined;

/**
 * The eBay-generated ID of the shipping rate that the seller has chosen to purchase for the shipment.
 * @member {String} rateId
 */
PurchasedRate.prototype['rateId'] = undefined;

/**
 * The ID code for the carrier that was selected for the package shipment.
 * @member {String} shippingCarrierCode
 */
PurchasedRate.prototype['shippingCarrierCode'] = undefined;

/**
 * The name of the shipping carrier.
 * @member {String} shippingCarrierName
 */
PurchasedRate.prototype['shippingCarrierName'] = undefined;

/**
 * The unique eBay-generated ID of the <i>shipping quote</i> from which the seller selected a shipping rate (<b>rateId</b>).
 * @member {String} shippingQuoteId
 */
PurchasedRate.prototype['shippingQuoteId'] = undefined;

/**
 * String ID code for the shipping service selected for the package shipment. This is a service that the shipping carrier supplies.
 * @member {String} shippingServiceCode
 */
PurchasedRate.prototype['shippingServiceCode'] = undefined;

/**
 * The name of the shipping service.
 * @member {String} shippingServiceName
 */
PurchasedRate.prototype['shippingServiceName'] = undefined;

/**
 * @member {module:model/Amount} totalShippingCost
 */
PurchasedRate.prototype['totalShippingCost'] = undefined;






export default PurchasedRate;

