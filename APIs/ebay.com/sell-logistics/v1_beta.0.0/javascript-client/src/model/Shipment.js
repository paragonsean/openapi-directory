/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import Order from './Order';
import PackageSpecification from './PackageSpecification';
import PurchasedRate from './PurchasedRate';
import ShipmentCancellation from './ShipmentCancellation';

/**
 * The Shipment model module.
 * @module model/Shipment
 * @version v1_beta.0.0
 */
class Shipment {
    /**
     * Constructs a new <code>Shipment</code>.
     * This complex type defines a shipment for a specific package (for example, a box or letter). Shipments are always linked to a purchased shipping label. 
     * @alias module:model/Shipment
     */
    constructor() { 
        
        Shipment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Shipment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Shipment} obj Optional instance to populate.
     * @return {module:model/Shipment} The populated <code>Shipment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Shipment();

            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = ShipmentCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('labelCustomMessage')) {
                obj['labelCustomMessage'] = ApiClient.convertToType(data['labelCustomMessage'], 'String');
            }
            if (data.hasOwnProperty('labelDownloadUrl')) {
                obj['labelDownloadUrl'] = ApiClient.convertToType(data['labelDownloadUrl'], 'String');
            }
            if (data.hasOwnProperty('labelSize')) {
                obj['labelSize'] = ApiClient.convertToType(data['labelSize'], 'String');
            }
            if (data.hasOwnProperty('orders')) {
                obj['orders'] = ApiClient.convertToType(data['orders'], [Order]);
            }
            if (data.hasOwnProperty('packageSpecification')) {
                obj['packageSpecification'] = PackageSpecification.constructFromObject(data['packageSpecification']);
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = PurchasedRate.constructFromObject(data['rate']);
            }
            if (data.hasOwnProperty('returnTo')) {
                obj['returnTo'] = Contact.constructFromObject(data['returnTo']);
            }
            if (data.hasOwnProperty('shipFrom')) {
                obj['shipFrom'] = Contact.constructFromObject(data['shipFrom']);
            }
            if (data.hasOwnProperty('shipTo')) {
                obj['shipTo'] = Contact.constructFromObject(data['shipTo']);
            }
            if (data.hasOwnProperty('shipmentId')) {
                obj['shipmentId'] = ApiClient.convertToType(data['shipmentId'], 'String');
            }
            if (data.hasOwnProperty('shipmentTrackingNumber')) {
                obj['shipmentTrackingNumber'] = ApiClient.convertToType(data['shipmentTrackingNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Shipment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Shipment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          ShipmentCancellation.validateJSON(data['cancellation']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['labelCustomMessage'] && !(typeof data['labelCustomMessage'] === 'string' || data['labelCustomMessage'] instanceof String)) {
            throw new Error("Expected the field `labelCustomMessage` to be a primitive type in the JSON string but got " + data['labelCustomMessage']);
        }
        // ensure the json data is a string
        if (data['labelDownloadUrl'] && !(typeof data['labelDownloadUrl'] === 'string' || data['labelDownloadUrl'] instanceof String)) {
            throw new Error("Expected the field `labelDownloadUrl` to be a primitive type in the JSON string but got " + data['labelDownloadUrl']);
        }
        // ensure the json data is a string
        if (data['labelSize'] && !(typeof data['labelSize'] === 'string' || data['labelSize'] instanceof String)) {
            throw new Error("Expected the field `labelSize` to be a primitive type in the JSON string but got " + data['labelSize']);
        }
        if (data['orders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orders'])) {
                throw new Error("Expected the field `orders` to be an array in the JSON data but got " + data['orders']);
            }
            // validate the optional field `orders` (array)
            for (const item of data['orders']) {
                Order.validateJSON(item);
            };
        }
        // validate the optional field `packageSpecification`
        if (data['packageSpecification']) { // data not null
          PackageSpecification.validateJSON(data['packageSpecification']);
        }
        // validate the optional field `rate`
        if (data['rate']) { // data not null
          PurchasedRate.validateJSON(data['rate']);
        }
        // validate the optional field `returnTo`
        if (data['returnTo']) { // data not null
          Contact.validateJSON(data['returnTo']);
        }
        // validate the optional field `shipFrom`
        if (data['shipFrom']) { // data not null
          Contact.validateJSON(data['shipFrom']);
        }
        // validate the optional field `shipTo`
        if (data['shipTo']) { // data not null
          Contact.validateJSON(data['shipTo']);
        }
        // ensure the json data is a string
        if (data['shipmentId'] && !(typeof data['shipmentId'] === 'string' || data['shipmentId'] instanceof String)) {
            throw new Error("Expected the field `shipmentId` to be a primitive type in the JSON string but got " + data['shipmentId']);
        }
        // ensure the json data is a string
        if (data['shipmentTrackingNumber'] && !(typeof data['shipmentTrackingNumber'] === 'string' || data['shipmentTrackingNumber'] instanceof String)) {
            throw new Error("Expected the field `shipmentTrackingNumber` to be a primitive type in the JSON string but got " + data['shipmentTrackingNumber']);
        }

        return true;
    }


}



/**
 * @member {module:model/ShipmentCancellation} cancellation
 */
Shipment.prototype['cancellation'] = undefined;

/**
 * The date and time the shipment was created, formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z</code> <br><b>Example:</b> <code>2018-08-20T07:09:00.000Z</code>
 * @member {String} creationDate
 */
Shipment.prototype['creationDate'] = undefined;

/**
 * If supported by the selected shipping carrier, this field can contain optional seller text to be printed on the shipping label.
 * @member {String} labelCustomMessage
 */
Shipment.prototype['labelCustomMessage'] = undefined;

/**
 * The direct URL the seller can use to download an image of the shipping label. By default, the file format is PDF. See <a href=\"/api-docs/sell/logistics/resources/shipment/methods/downloadLabelFile\">downloadLabelFile</a> for requesting different response file formats.
 * @member {String} labelDownloadUrl
 */
Shipment.prototype['labelDownloadUrl'] = undefined;

/**
 * The seller's desired label size. The support for multi-sized labels is shipping-carrier specific and if the size requested in the <b>creaateFromShippingQuote</b> call matches a size the carrier supports, the value will be represented here in the shipment. <br><br>Currently, the only valid value is: <code>4\"x6\"</code>
 * @member {String} labelSize
 */
Shipment.prototype['labelSize'] = undefined;

/**
 * This list value is optionally assigned by the seller. When present, each element in the returned list contains seller-assigned information about an order (such as an order number). Because a package can contain all or part of one or more orders, this field provides a way for sellers to identify the packages that contain specific orders.
 * @member {Array.<module:model/Order>} orders
 */
Shipment.prototype['orders'] = undefined;

/**
 * @member {module:model/PackageSpecification} packageSpecification
 */
Shipment.prototype['packageSpecification'] = undefined;

/**
 * @member {module:model/PurchasedRate} rate
 */
Shipment.prototype['rate'] = undefined;

/**
 * @member {module:model/Contact} returnTo
 */
Shipment.prototype['returnTo'] = undefined;

/**
 * @member {module:model/Contact} shipFrom
 */
Shipment.prototype['shipFrom'] = undefined;

/**
 * @member {module:model/Contact} shipTo
 */
Shipment.prototype['shipTo'] = undefined;

/**
 * The unique eBay-assigned ID for the shipment. The ID is generated when the shipment is created by a call to <b>createFromShippingQuote</b>.
 * @member {String} shipmentId
 */
Shipment.prototype['shipmentId'] = undefined;

/**
 * A unique carrier-assigned ID string that can be used to track the shipment.
 * @member {String} shipmentTrackingNumber
 */
Shipment.prototype['shipmentTrackingNumber'] = undefined;






export default Shipment;

