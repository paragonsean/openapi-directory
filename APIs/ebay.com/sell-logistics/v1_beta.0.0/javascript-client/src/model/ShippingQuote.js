/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import Error from './Error';
import Order from './Order';
import PackageSpecification from './PackageSpecification';
import Rate from './Rate';

/**
 * The ShippingQuote model module.
 * @module model/ShippingQuote
 * @version v1_beta.0.0
 */
class ShippingQuote {
    /**
     * Constructs a new <code>ShippingQuote</code>.
     * This complex type describes a \&quot;shipping quote,\&quot; which contains the parameters for a package shipment. The shipping quote contains a list of \&quot;live quotes\&quot; or &lt;i&gt;rates&lt;/i&gt; for the shipment. Rates are offerd by a carrier for a particular service, of set of services, for shipping the package. Included in the shipping quote are the package specifications, the shipment&#39;s origin and destination addresses, and the shipping parameters specified by the seller.  &lt;br&gt;&lt;br&gt;Use the &lt;b&gt;rateId&lt;/b&gt; value to select the specific service you want when you create a shipment by calling &lt;b&gt;createFromShippingQuote&lt;/b&gt;.
     * @alias module:model/ShippingQuote
     */
    constructor() { 
        
        ShippingQuote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShippingQuote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingQuote} obj Optional instance to populate.
     * @return {module:model/ShippingQuote} The populated <code>ShippingQuote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingQuote();

            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'String');
            }
            if (data.hasOwnProperty('orders')) {
                obj['orders'] = ApiClient.convertToType(data['orders'], [Order]);
            }
            if (data.hasOwnProperty('packageSpecification')) {
                obj['packageSpecification'] = PackageSpecification.constructFromObject(data['packageSpecification']);
            }
            if (data.hasOwnProperty('rates')) {
                obj['rates'] = ApiClient.convertToType(data['rates'], [Rate]);
            }
            if (data.hasOwnProperty('shipFrom')) {
                obj['shipFrom'] = Contact.constructFromObject(data['shipFrom']);
            }
            if (data.hasOwnProperty('shipTo')) {
                obj['shipTo'] = Contact.constructFromObject(data['shipTo']);
            }
            if (data.hasOwnProperty('shippingQuoteId')) {
                obj['shippingQuoteId'] = ApiClient.convertToType(data['shippingQuoteId'], 'String');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Error]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingQuote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingQuote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['expirationDate'] && !(typeof data['expirationDate'] === 'string' || data['expirationDate'] instanceof String)) {
            throw new Error("Expected the field `expirationDate` to be a primitive type in the JSON string but got " + data['expirationDate']);
        }
        if (data['orders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orders'])) {
                throw new Error("Expected the field `orders` to be an array in the JSON data but got " + data['orders']);
            }
            // validate the optional field `orders` (array)
            for (const item of data['orders']) {
                Order.validateJSON(item);
            };
        }
        // validate the optional field `packageSpecification`
        if (data['packageSpecification']) { // data not null
          PackageSpecification.validateJSON(data['packageSpecification']);
        }
        if (data['rates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rates'])) {
                throw new Error("Expected the field `rates` to be an array in the JSON data but got " + data['rates']);
            }
            // validate the optional field `rates` (array)
            for (const item of data['rates']) {
                Rate.validateJSON(item);
            };
        }
        // validate the optional field `shipFrom`
        if (data['shipFrom']) { // data not null
          Contact.validateJSON(data['shipFrom']);
        }
        // validate the optional field `shipTo`
        if (data['shipTo']) { // data not null
          Contact.validateJSON(data['shipTo']);
        }
        // ensure the json data is a string
        if (data['shippingQuoteId'] && !(typeof data['shippingQuoteId'] === 'string' || data['shippingQuoteId'] instanceof String)) {
            throw new Error("Expected the field `shippingQuoteId` to be a primitive type in the JSON string but got " + data['shippingQuoteId']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The date and time this quote was created, expressed as an ISO 8601 UTC string.
 * @member {String} creationDate
 */
ShippingQuote.prototype['creationDate'] = undefined;

/**
 * The last date and time that this quote will be honored, expressed as an ISO 8601 UTC string. After this time the quote expires and the expressed rates can no longer be purchased.
 * @member {String} expirationDate
 */
ShippingQuote.prototype['expirationDate'] = undefined;

/**
 * This list value is optionally assigned by the seller. When present, each element in the returned list contains seller-assigned information about an order (such as an order number). Because a package can contain all or part of one or more orders, this field provides a way for sellers to identify the packages that contain specific orders.
 * @member {Array.<module:model/Order>} orders
 */
ShippingQuote.prototype['orders'] = undefined;

/**
 * @member {module:model/PackageSpecification} packageSpecification
 */
ShippingQuote.prototype['packageSpecification'] = undefined;

/**
 * A list of <i>rates</i> where each rate, as identified by a <b>rateId</b>, contains information about a specific shipping service offered by a carrier.  Rates include shipping carrier and service, the to and from locations, the pickup and delivery windows, the seller's shipping parameters, the service constraints, and the cost for the base service and a list of additional shipping options.  <br><br>Each rate offered is supported by a label service where you can purchase the rate, and associated shipping label, via a call to <b>createFromShippingQuote</b>.
 * @member {Array.<module:model/Rate>} rates
 */
ShippingQuote.prototype['rates'] = undefined;

/**
 * @member {module:model/Contact} shipFrom
 */
ShippingQuote.prototype['shipFrom'] = undefined;

/**
 * @member {module:model/Contact} shipTo
 */
ShippingQuote.prototype['shipTo'] = undefined;

/**
 * The unique eBay-assigned ID for this shipping quote. The value of this field is associated with a specific package, based on its origin, destination, and size.
 * @member {String} shippingQuoteId
 */
ShippingQuote.prototype['shippingQuoteId'] = undefined;

/**
 * A list of any warnings triggered by the request.
 * @member {Array.<module:model/Error>} warnings
 */
ShippingQuote.prototype['warnings'] = undefined;






export default ShippingQuote;

