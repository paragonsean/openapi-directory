# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.order import Order
from openapi_server.models.package_specification import PackageSpecification
from openapi_server import util


class ShippingQuoteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orders: List[Order]=None, package_specification: PackageSpecification=None, ship_from: Contact=None, ship_to: Contact=None):
        """ShippingQuoteRequest - a model defined in OpenAPI

        :param orders: The orders of this ShippingQuoteRequest.
        :param package_specification: The package_specification of this ShippingQuoteRequest.
        :param ship_from: The ship_from of this ShippingQuoteRequest.
        :param ship_to: The ship_to of this ShippingQuoteRequest.
        """
        self.openapi_types = {
            'orders': List[Order],
            'package_specification': PackageSpecification,
            'ship_from': Contact,
            'ship_to': Contact
        }

        self.attribute_map = {
            'orders': 'orders',
            'package_specification': 'packageSpecification',
            'ship_from': 'shipFrom',
            'ship_to': 'shipTo'
        }

        self._orders = orders
        self._package_specification = package_specification
        self._ship_from = ship_from
        self._ship_to = ship_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingQuoteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingQuoteRequest of this ShippingQuoteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orders(self):
        """Gets the orders of this ShippingQuoteRequest.

        A seller-defined list that contains information about the orders in the package. This allows sellers to include information about the line items in the package with the shipment information.  <br><br>A package can contain any number of line items from one or more orders, providing they all ship in the same package.  <br><br><b>Maximum list size:</b> 10

        :return: The orders of this ShippingQuoteRequest.
        :rtype: List[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this ShippingQuoteRequest.

        A seller-defined list that contains information about the orders in the package. This allows sellers to include information about the line items in the package with the shipment information.  <br><br>A package can contain any number of line items from one or more orders, providing they all ship in the same package.  <br><br><b>Maximum list size:</b> 10

        :param orders: The orders of this ShippingQuoteRequest.
        :type orders: List[Order]
        """

        self._orders = orders

    @property
    def package_specification(self):
        """Gets the package_specification of this ShippingQuoteRequest.


        :return: The package_specification of this ShippingQuoteRequest.
        :rtype: PackageSpecification
        """
        return self._package_specification

    @package_specification.setter
    def package_specification(self, package_specification):
        """Sets the package_specification of this ShippingQuoteRequest.


        :param package_specification: The package_specification of this ShippingQuoteRequest.
        :type package_specification: PackageSpecification
        """

        self._package_specification = package_specification

    @property
    def ship_from(self):
        """Gets the ship_from of this ShippingQuoteRequest.


        :return: The ship_from of this ShippingQuoteRequest.
        :rtype: Contact
        """
        return self._ship_from

    @ship_from.setter
    def ship_from(self, ship_from):
        """Sets the ship_from of this ShippingQuoteRequest.


        :param ship_from: The ship_from of this ShippingQuoteRequest.
        :type ship_from: Contact
        """

        self._ship_from = ship_from

    @property
    def ship_to(self):
        """Gets the ship_to of this ShippingQuoteRequest.


        :return: The ship_to of this ShippingQuoteRequest.
        :rtype: Contact
        """
        return self._ship_to

    @ship_to.setter
    def ship_to(self, ship_to):
        """Sets the ship_to of this ShippingQuoteRequest.


        :param ship_to: The ship_to of this ShippingQuoteRequest.
        :type ship_to: Contact
        """

        self._ship_to = ship_to
