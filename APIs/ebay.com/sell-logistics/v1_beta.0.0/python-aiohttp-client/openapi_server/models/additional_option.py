# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class AdditionalOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_cost: Amount=None, option_type: str=None):
        """AdditionalOption - a model defined in OpenAPI

        :param additional_cost: The additional_cost of this AdditionalOption.
        :param option_type: The option_type of this AdditionalOption.
        """
        self.openapi_types = {
            'additional_cost': Amount,
            'option_type': str
        }

        self.attribute_map = {
            'additional_cost': 'additionalCost',
            'option_type': 'optionType'
        }

        self._additional_cost = additional_cost
        self._option_type = option_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalOption of this AdditionalOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_cost(self):
        """Gets the additional_cost of this AdditionalOption.


        :return: The additional_cost of this AdditionalOption.
        :rtype: Amount
        """
        return self._additional_cost

    @additional_cost.setter
    def additional_cost(self, additional_cost):
        """Sets the additional_cost of this AdditionalOption.


        :param additional_cost: The additional_cost of this AdditionalOption.
        :type additional_cost: Amount
        """

        self._additional_cost = additional_cost

    @property
    def option_type(self):
        """Gets the option_type of this AdditionalOption.

        The name of a shipping option that can be purchased in addition to the base shipping cost of this rate. The value supplied in this field must match exactly the option name as supplied by the selected rate.

        :return: The option_type of this AdditionalOption.
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this AdditionalOption.

        The name of a shipping option that can be purchased in addition to the base shipping cost of this rate. The value supplied in this field must match exactly the option name as supplied by the selected rate.

        :param option_type: The option_type of this AdditionalOption.
        :type option_type: str
        """

        self._option_type = option_type
