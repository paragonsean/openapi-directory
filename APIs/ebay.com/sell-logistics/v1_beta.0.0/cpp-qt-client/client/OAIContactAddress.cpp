/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactAddress::OAIContactAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactAddress::OAIContactAddress() {
    this->initializeModel();
}

OAIContactAddress::~OAIContactAddress() {}

void OAIContactAddress::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;
}

void OAIContactAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactAddress::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;
}

QString OAIContactAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    return obj;
}

QString OAIContactAddress::getAddressLine1() const {
    return m_address_line1;
}
void OAIContactAddress::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIContactAddress::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIContactAddress::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIContactAddress::getAddressLine2() const {
    return m_address_line2;
}
void OAIContactAddress::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIContactAddress::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIContactAddress::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIContactAddress::getCity() const {
    return m_city;
}
void OAIContactAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIContactAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIContactAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIContactAddress::getCountryCode() const {
    return m_country_code;
}
void OAIContactAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIContactAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIContactAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIContactAddress::getCounty() const {
    return m_county;
}
void OAIContactAddress::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIContactAddress::is_county_Set() const{
    return m_county_isSet;
}

bool OAIContactAddress::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIContactAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIContactAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIContactAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIContactAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIContactAddress::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIContactAddress::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIContactAddress::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIContactAddress::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

bool OAIContactAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
