/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingQuote::OAIShippingQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingQuote::OAIShippingQuote() {
    this->initializeModel();
}

OAIShippingQuote::~OAIShippingQuote() {}

void OAIShippingQuote::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_orders_isSet = false;
    m_orders_isValid = false;

    m_package_specification_isSet = false;
    m_package_specification_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_ship_from_isSet = false;
    m_ship_from_isValid = false;

    m_ship_to_isSet = false;
    m_ship_to_isValid = false;

    m_shipping_quote_id_isSet = false;
    m_shipping_quote_id_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIShippingQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingQuote::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_orders_isValid = ::OpenAPI::fromJsonValue(m_orders, json[QString("orders")]);
    m_orders_isSet = !json[QString("orders")].isNull() && m_orders_isValid;

    m_package_specification_isValid = ::OpenAPI::fromJsonValue(m_package_specification, json[QString("packageSpecification")]);
    m_package_specification_isSet = !json[QString("packageSpecification")].isNull() && m_package_specification_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_ship_from_isValid = ::OpenAPI::fromJsonValue(m_ship_from, json[QString("shipFrom")]);
    m_ship_from_isSet = !json[QString("shipFrom")].isNull() && m_ship_from_isValid;

    m_ship_to_isValid = ::OpenAPI::fromJsonValue(m_ship_to, json[QString("shipTo")]);
    m_ship_to_isSet = !json[QString("shipTo")].isNull() && m_ship_to_isValid;

    m_shipping_quote_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_quote_id, json[QString("shippingQuoteId")]);
    m_shipping_quote_id_isSet = !json[QString("shippingQuoteId")].isNull() && m_shipping_quote_id_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIShippingQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_orders.size() > 0) {
        obj.insert(QString("orders"), ::OpenAPI::toJsonValue(m_orders));
    }
    if (m_package_specification.isSet()) {
        obj.insert(QString("packageSpecification"), ::OpenAPI::toJsonValue(m_package_specification));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_ship_from.isSet()) {
        obj.insert(QString("shipFrom"), ::OpenAPI::toJsonValue(m_ship_from));
    }
    if (m_ship_to.isSet()) {
        obj.insert(QString("shipTo"), ::OpenAPI::toJsonValue(m_ship_to));
    }
    if (m_shipping_quote_id_isSet) {
        obj.insert(QString("shippingQuoteId"), ::OpenAPI::toJsonValue(m_shipping_quote_id));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIShippingQuote::getCreationDate() const {
    return m_creation_date;
}
void OAIShippingQuote::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIShippingQuote::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIShippingQuote::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIShippingQuote::getExpirationDate() const {
    return m_expiration_date;
}
void OAIShippingQuote::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIShippingQuote::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIShippingQuote::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QList<OAIOrder> OAIShippingQuote::getOrders() const {
    return m_orders;
}
void OAIShippingQuote::setOrders(const QList<OAIOrder> &orders) {
    m_orders = orders;
    m_orders_isSet = true;
}

bool OAIShippingQuote::is_orders_Set() const{
    return m_orders_isSet;
}

bool OAIShippingQuote::is_orders_Valid() const{
    return m_orders_isValid;
}

OAIPackageSpecification OAIShippingQuote::getPackageSpecification() const {
    return m_package_specification;
}
void OAIShippingQuote::setPackageSpecification(const OAIPackageSpecification &package_specification) {
    m_package_specification = package_specification;
    m_package_specification_isSet = true;
}

bool OAIShippingQuote::is_package_specification_Set() const{
    return m_package_specification_isSet;
}

bool OAIShippingQuote::is_package_specification_Valid() const{
    return m_package_specification_isValid;
}

QList<OAIRate> OAIShippingQuote::getRates() const {
    return m_rates;
}
void OAIShippingQuote::setRates(const QList<OAIRate> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIShippingQuote::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIShippingQuote::is_rates_Valid() const{
    return m_rates_isValid;
}

OAIContact OAIShippingQuote::getShipFrom() const {
    return m_ship_from;
}
void OAIShippingQuote::setShipFrom(const OAIContact &ship_from) {
    m_ship_from = ship_from;
    m_ship_from_isSet = true;
}

bool OAIShippingQuote::is_ship_from_Set() const{
    return m_ship_from_isSet;
}

bool OAIShippingQuote::is_ship_from_Valid() const{
    return m_ship_from_isValid;
}

OAIContact OAIShippingQuote::getShipTo() const {
    return m_ship_to;
}
void OAIShippingQuote::setShipTo(const OAIContact &ship_to) {
    m_ship_to = ship_to;
    m_ship_to_isSet = true;
}

bool OAIShippingQuote::is_ship_to_Set() const{
    return m_ship_to_isSet;
}

bool OAIShippingQuote::is_ship_to_Valid() const{
    return m_ship_to_isValid;
}

QString OAIShippingQuote::getShippingQuoteId() const {
    return m_shipping_quote_id;
}
void OAIShippingQuote::setShippingQuoteId(const QString &shipping_quote_id) {
    m_shipping_quote_id = shipping_quote_id;
    m_shipping_quote_id_isSet = true;
}

bool OAIShippingQuote::is_shipping_quote_id_Set() const{
    return m_shipping_quote_id_isSet;
}

bool OAIShippingQuote::is_shipping_quote_id_Valid() const{
    return m_shipping_quote_id_isValid;
}

QList<OAIError> OAIShippingQuote::getWarnings() const {
    return m_warnings;
}
void OAIShippingQuote::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIShippingQuote::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIShippingQuote::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIShippingQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
