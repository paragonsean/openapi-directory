/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchasedRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchasedRate::OAIPurchasedRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchasedRate::OAIPurchasedRate() {
    this->initializeModel();
}

OAIPurchasedRate::~OAIPurchasedRate() {}

void OAIPurchasedRate::initializeModel() {

    m_additional_options_isSet = false;
    m_additional_options_isValid = false;

    m_base_shipping_cost_isSet = false;
    m_base_shipping_cost_isValid = false;

    m_destination_time_zone_isSet = false;
    m_destination_time_zone_isValid = false;

    m_max_estimated_delivery_date_isSet = false;
    m_max_estimated_delivery_date_isValid = false;

    m_min_estimated_delivery_date_isSet = false;
    m_min_estimated_delivery_date_isValid = false;

    m_pickup_networks_isSet = false;
    m_pickup_networks_isValid = false;

    m_pickup_slot_id_isSet = false;
    m_pickup_slot_id_isValid = false;

    m_pickup_type_isSet = false;
    m_pickup_type_isValid = false;

    m_rate_id_isSet = false;
    m_rate_id_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;

    m_shipping_carrier_name_isSet = false;
    m_shipping_carrier_name_isValid = false;

    m_shipping_quote_id_isSet = false;
    m_shipping_quote_id_isValid = false;

    m_shipping_service_code_isSet = false;
    m_shipping_service_code_isValid = false;

    m_shipping_service_name_isSet = false;
    m_shipping_service_name_isValid = false;

    m_total_shipping_cost_isSet = false;
    m_total_shipping_cost_isValid = false;
}

void OAIPurchasedRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchasedRate::fromJsonObject(QJsonObject json) {

    m_additional_options_isValid = ::OpenAPI::fromJsonValue(m_additional_options, json[QString("additionalOptions")]);
    m_additional_options_isSet = !json[QString("additionalOptions")].isNull() && m_additional_options_isValid;

    m_base_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_cost, json[QString("baseShippingCost")]);
    m_base_shipping_cost_isSet = !json[QString("baseShippingCost")].isNull() && m_base_shipping_cost_isValid;

    m_destination_time_zone_isValid = ::OpenAPI::fromJsonValue(m_destination_time_zone, json[QString("destinationTimeZone")]);
    m_destination_time_zone_isSet = !json[QString("destinationTimeZone")].isNull() && m_destination_time_zone_isValid;

    m_max_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_max_estimated_delivery_date, json[QString("maxEstimatedDeliveryDate")]);
    m_max_estimated_delivery_date_isSet = !json[QString("maxEstimatedDeliveryDate")].isNull() && m_max_estimated_delivery_date_isValid;

    m_min_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_min_estimated_delivery_date, json[QString("minEstimatedDeliveryDate")]);
    m_min_estimated_delivery_date_isSet = !json[QString("minEstimatedDeliveryDate")].isNull() && m_min_estimated_delivery_date_isValid;

    m_pickup_networks_isValid = ::OpenAPI::fromJsonValue(m_pickup_networks, json[QString("pickupNetworks")]);
    m_pickup_networks_isSet = !json[QString("pickupNetworks")].isNull() && m_pickup_networks_isValid;

    m_pickup_slot_id_isValid = ::OpenAPI::fromJsonValue(m_pickup_slot_id, json[QString("pickupSlotId")]);
    m_pickup_slot_id_isSet = !json[QString("pickupSlotId")].isNull() && m_pickup_slot_id_isValid;

    m_pickup_type_isValid = ::OpenAPI::fromJsonValue(m_pickup_type, json[QString("pickupType")]);
    m_pickup_type_isSet = !json[QString("pickupType")].isNull() && m_pickup_type_isValid;

    m_rate_id_isValid = ::OpenAPI::fromJsonValue(m_rate_id, json[QString("rateId")]);
    m_rate_id_isSet = !json[QString("rateId")].isNull() && m_rate_id_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;

    m_shipping_carrier_name_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_name, json[QString("shippingCarrierName")]);
    m_shipping_carrier_name_isSet = !json[QString("shippingCarrierName")].isNull() && m_shipping_carrier_name_isValid;

    m_shipping_quote_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_quote_id, json[QString("shippingQuoteId")]);
    m_shipping_quote_id_isSet = !json[QString("shippingQuoteId")].isNull() && m_shipping_quote_id_isValid;

    m_shipping_service_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_service_code, json[QString("shippingServiceCode")]);
    m_shipping_service_code_isSet = !json[QString("shippingServiceCode")].isNull() && m_shipping_service_code_isValid;

    m_shipping_service_name_isValid = ::OpenAPI::fromJsonValue(m_shipping_service_name, json[QString("shippingServiceName")]);
    m_shipping_service_name_isSet = !json[QString("shippingServiceName")].isNull() && m_shipping_service_name_isValid;

    m_total_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_total_shipping_cost, json[QString("totalShippingCost")]);
    m_total_shipping_cost_isSet = !json[QString("totalShippingCost")].isNull() && m_total_shipping_cost_isValid;
}

QString OAIPurchasedRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchasedRate::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_options.size() > 0) {
        obj.insert(QString("additionalOptions"), ::OpenAPI::toJsonValue(m_additional_options));
    }
    if (m_base_shipping_cost.isSet()) {
        obj.insert(QString("baseShippingCost"), ::OpenAPI::toJsonValue(m_base_shipping_cost));
    }
    if (m_destination_time_zone_isSet) {
        obj.insert(QString("destinationTimeZone"), ::OpenAPI::toJsonValue(m_destination_time_zone));
    }
    if (m_max_estimated_delivery_date_isSet) {
        obj.insert(QString("maxEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_max_estimated_delivery_date));
    }
    if (m_min_estimated_delivery_date_isSet) {
        obj.insert(QString("minEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_min_estimated_delivery_date));
    }
    if (m_pickup_networks.size() > 0) {
        obj.insert(QString("pickupNetworks"), ::OpenAPI::toJsonValue(m_pickup_networks));
    }
    if (m_pickup_slot_id_isSet) {
        obj.insert(QString("pickupSlotId"), ::OpenAPI::toJsonValue(m_pickup_slot_id));
    }
    if (m_pickup_type_isSet) {
        obj.insert(QString("pickupType"), ::OpenAPI::toJsonValue(m_pickup_type));
    }
    if (m_rate_id_isSet) {
        obj.insert(QString("rateId"), ::OpenAPI::toJsonValue(m_rate_id));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    if (m_shipping_carrier_name_isSet) {
        obj.insert(QString("shippingCarrierName"), ::OpenAPI::toJsonValue(m_shipping_carrier_name));
    }
    if (m_shipping_quote_id_isSet) {
        obj.insert(QString("shippingQuoteId"), ::OpenAPI::toJsonValue(m_shipping_quote_id));
    }
    if (m_shipping_service_code_isSet) {
        obj.insert(QString("shippingServiceCode"), ::OpenAPI::toJsonValue(m_shipping_service_code));
    }
    if (m_shipping_service_name_isSet) {
        obj.insert(QString("shippingServiceName"), ::OpenAPI::toJsonValue(m_shipping_service_name));
    }
    if (m_total_shipping_cost.isSet()) {
        obj.insert(QString("totalShippingCost"), ::OpenAPI::toJsonValue(m_total_shipping_cost));
    }
    return obj;
}

QList<OAIAdditionalOption> OAIPurchasedRate::getAdditionalOptions() const {
    return m_additional_options;
}
void OAIPurchasedRate::setAdditionalOptions(const QList<OAIAdditionalOption> &additional_options) {
    m_additional_options = additional_options;
    m_additional_options_isSet = true;
}

bool OAIPurchasedRate::is_additional_options_Set() const{
    return m_additional_options_isSet;
}

bool OAIPurchasedRate::is_additional_options_Valid() const{
    return m_additional_options_isValid;
}

OAIAmount OAIPurchasedRate::getBaseShippingCost() const {
    return m_base_shipping_cost;
}
void OAIPurchasedRate::setBaseShippingCost(const OAIAmount &base_shipping_cost) {
    m_base_shipping_cost = base_shipping_cost;
    m_base_shipping_cost_isSet = true;
}

bool OAIPurchasedRate::is_base_shipping_cost_Set() const{
    return m_base_shipping_cost_isSet;
}

bool OAIPurchasedRate::is_base_shipping_cost_Valid() const{
    return m_base_shipping_cost_isValid;
}

QString OAIPurchasedRate::getDestinationTimeZone() const {
    return m_destination_time_zone;
}
void OAIPurchasedRate::setDestinationTimeZone(const QString &destination_time_zone) {
    m_destination_time_zone = destination_time_zone;
    m_destination_time_zone_isSet = true;
}

bool OAIPurchasedRate::is_destination_time_zone_Set() const{
    return m_destination_time_zone_isSet;
}

bool OAIPurchasedRate::is_destination_time_zone_Valid() const{
    return m_destination_time_zone_isValid;
}

QString OAIPurchasedRate::getMaxEstimatedDeliveryDate() const {
    return m_max_estimated_delivery_date;
}
void OAIPurchasedRate::setMaxEstimatedDeliveryDate(const QString &max_estimated_delivery_date) {
    m_max_estimated_delivery_date = max_estimated_delivery_date;
    m_max_estimated_delivery_date_isSet = true;
}

bool OAIPurchasedRate::is_max_estimated_delivery_date_Set() const{
    return m_max_estimated_delivery_date_isSet;
}

bool OAIPurchasedRate::is_max_estimated_delivery_date_Valid() const{
    return m_max_estimated_delivery_date_isValid;
}

QString OAIPurchasedRate::getMinEstimatedDeliveryDate() const {
    return m_min_estimated_delivery_date;
}
void OAIPurchasedRate::setMinEstimatedDeliveryDate(const QString &min_estimated_delivery_date) {
    m_min_estimated_delivery_date = min_estimated_delivery_date;
    m_min_estimated_delivery_date_isSet = true;
}

bool OAIPurchasedRate::is_min_estimated_delivery_date_Set() const{
    return m_min_estimated_delivery_date_isSet;
}

bool OAIPurchasedRate::is_min_estimated_delivery_date_Valid() const{
    return m_min_estimated_delivery_date_isValid;
}

QList<QString> OAIPurchasedRate::getPickupNetworks() const {
    return m_pickup_networks;
}
void OAIPurchasedRate::setPickupNetworks(const QList<QString> &pickup_networks) {
    m_pickup_networks = pickup_networks;
    m_pickup_networks_isSet = true;
}

bool OAIPurchasedRate::is_pickup_networks_Set() const{
    return m_pickup_networks_isSet;
}

bool OAIPurchasedRate::is_pickup_networks_Valid() const{
    return m_pickup_networks_isValid;
}

QString OAIPurchasedRate::getPickupSlotId() const {
    return m_pickup_slot_id;
}
void OAIPurchasedRate::setPickupSlotId(const QString &pickup_slot_id) {
    m_pickup_slot_id = pickup_slot_id;
    m_pickup_slot_id_isSet = true;
}

bool OAIPurchasedRate::is_pickup_slot_id_Set() const{
    return m_pickup_slot_id_isSet;
}

bool OAIPurchasedRate::is_pickup_slot_id_Valid() const{
    return m_pickup_slot_id_isValid;
}

QString OAIPurchasedRate::getPickupType() const {
    return m_pickup_type;
}
void OAIPurchasedRate::setPickupType(const QString &pickup_type) {
    m_pickup_type = pickup_type;
    m_pickup_type_isSet = true;
}

bool OAIPurchasedRate::is_pickup_type_Set() const{
    return m_pickup_type_isSet;
}

bool OAIPurchasedRate::is_pickup_type_Valid() const{
    return m_pickup_type_isValid;
}

QString OAIPurchasedRate::getRateId() const {
    return m_rate_id;
}
void OAIPurchasedRate::setRateId(const QString &rate_id) {
    m_rate_id = rate_id;
    m_rate_id_isSet = true;
}

bool OAIPurchasedRate::is_rate_id_Set() const{
    return m_rate_id_isSet;
}

bool OAIPurchasedRate::is_rate_id_Valid() const{
    return m_rate_id_isValid;
}

QString OAIPurchasedRate::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIPurchasedRate::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIPurchasedRate::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIPurchasedRate::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

QString OAIPurchasedRate::getShippingCarrierName() const {
    return m_shipping_carrier_name;
}
void OAIPurchasedRate::setShippingCarrierName(const QString &shipping_carrier_name) {
    m_shipping_carrier_name = shipping_carrier_name;
    m_shipping_carrier_name_isSet = true;
}

bool OAIPurchasedRate::is_shipping_carrier_name_Set() const{
    return m_shipping_carrier_name_isSet;
}

bool OAIPurchasedRate::is_shipping_carrier_name_Valid() const{
    return m_shipping_carrier_name_isValid;
}

QString OAIPurchasedRate::getShippingQuoteId() const {
    return m_shipping_quote_id;
}
void OAIPurchasedRate::setShippingQuoteId(const QString &shipping_quote_id) {
    m_shipping_quote_id = shipping_quote_id;
    m_shipping_quote_id_isSet = true;
}

bool OAIPurchasedRate::is_shipping_quote_id_Set() const{
    return m_shipping_quote_id_isSet;
}

bool OAIPurchasedRate::is_shipping_quote_id_Valid() const{
    return m_shipping_quote_id_isValid;
}

QString OAIPurchasedRate::getShippingServiceCode() const {
    return m_shipping_service_code;
}
void OAIPurchasedRate::setShippingServiceCode(const QString &shipping_service_code) {
    m_shipping_service_code = shipping_service_code;
    m_shipping_service_code_isSet = true;
}

bool OAIPurchasedRate::is_shipping_service_code_Set() const{
    return m_shipping_service_code_isSet;
}

bool OAIPurchasedRate::is_shipping_service_code_Valid() const{
    return m_shipping_service_code_isValid;
}

QString OAIPurchasedRate::getShippingServiceName() const {
    return m_shipping_service_name;
}
void OAIPurchasedRate::setShippingServiceName(const QString &shipping_service_name) {
    m_shipping_service_name = shipping_service_name;
    m_shipping_service_name_isSet = true;
}

bool OAIPurchasedRate::is_shipping_service_name_Set() const{
    return m_shipping_service_name_isSet;
}

bool OAIPurchasedRate::is_shipping_service_name_Valid() const{
    return m_shipping_service_name_isValid;
}

OAIAmount OAIPurchasedRate::getTotalShippingCost() const {
    return m_total_shipping_cost;
}
void OAIPurchasedRate::setTotalShippingCost(const OAIAmount &total_shipping_cost) {
    m_total_shipping_cost = total_shipping_cost;
    m_total_shipping_cost_isSet = true;
}

bool OAIPurchasedRate::is_total_shipping_cost_Set() const{
    return m_total_shipping_cost_isSet;
}

bool OAIPurchasedRate::is_total_shipping_cost_Valid() const{
    return m_total_shipping_cost_isValid;
}

bool OAIPurchasedRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_slot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchasedRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
