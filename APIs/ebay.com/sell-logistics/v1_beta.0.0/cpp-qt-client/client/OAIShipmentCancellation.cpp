/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentCancellation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentCancellation::OAIShipmentCancellation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentCancellation::OAIShipmentCancellation() {
    this->initializeModel();
}

OAIShipmentCancellation::~OAIShipmentCancellation() {}

void OAIShipmentCancellation::initializeModel() {

    m_cancellation_requested_date_isSet = false;
    m_cancellation_requested_date_isValid = false;

    m_cancellation_status_isSet = false;
    m_cancellation_status_isValid = false;
}

void OAIShipmentCancellation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentCancellation::fromJsonObject(QJsonObject json) {

    m_cancellation_requested_date_isValid = ::OpenAPI::fromJsonValue(m_cancellation_requested_date, json[QString("cancellationRequestedDate")]);
    m_cancellation_requested_date_isSet = !json[QString("cancellationRequestedDate")].isNull() && m_cancellation_requested_date_isValid;

    m_cancellation_status_isValid = ::OpenAPI::fromJsonValue(m_cancellation_status, json[QString("cancellationStatus")]);
    m_cancellation_status_isSet = !json[QString("cancellationStatus")].isNull() && m_cancellation_status_isValid;
}

QString OAIShipmentCancellation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentCancellation::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_requested_date_isSet) {
        obj.insert(QString("cancellationRequestedDate"), ::OpenAPI::toJsonValue(m_cancellation_requested_date));
    }
    if (m_cancellation_status_isSet) {
        obj.insert(QString("cancellationStatus"), ::OpenAPI::toJsonValue(m_cancellation_status));
    }
    return obj;
}

QString OAIShipmentCancellation::getCancellationRequestedDate() const {
    return m_cancellation_requested_date;
}
void OAIShipmentCancellation::setCancellationRequestedDate(const QString &cancellation_requested_date) {
    m_cancellation_requested_date = cancellation_requested_date;
    m_cancellation_requested_date_isSet = true;
}

bool OAIShipmentCancellation::is_cancellation_requested_date_Set() const{
    return m_cancellation_requested_date_isSet;
}

bool OAIShipmentCancellation::is_cancellation_requested_date_Valid() const{
    return m_cancellation_requested_date_isValid;
}

QString OAIShipmentCancellation::getCancellationStatus() const {
    return m_cancellation_status;
}
void OAIShipmentCancellation::setCancellationStatus(const QString &cancellation_status) {
    m_cancellation_status = cancellation_status;
    m_cancellation_status_isSet = true;
}

bool OAIShipmentCancellation::is_cancellation_status_Set() const{
    return m_cancellation_status_isSet;
}

bool OAIShipmentCancellation::is_cancellation_status_Valid() const{
    return m_cancellation_status_isValid;
}

bool OAIShipmentCancellation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_requested_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentCancellation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
