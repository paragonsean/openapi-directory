/**
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShipmentApi_H
#define OAI_OAIShipmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateShipmentFromQuoteRequest.h"
#include "OAIShipment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShipmentApi : public QObject {
    Q_OBJECT

public:
    OAIShipmentApi(const int timeOut = 0);
    ~OAIShipmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  shipment_id QString [required]
    */
    virtual void cancelShipment(const QString &shipment_id);

    /**
    * @param[in]  oai_create_shipment_from_quote_request OAICreateShipmentFromQuoteRequest [required]
    */
    virtual void createFromShippingQuote(const OAICreateShipmentFromQuoteRequest &oai_create_shipment_from_quote_request);

    /**
    * @param[in]  shipment_id QString [required]
    */
    virtual void downloadLabelFile(const QString &shipment_id);

    /**
    * @param[in]  shipment_id QString [required]
    */
    virtual void getShipment(const QString &shipment_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelShipmentCallback(OAIHttpRequestWorker *worker);
    void createFromShippingQuoteCallback(OAIHttpRequestWorker *worker);
    void downloadLabelFileCallback(OAIHttpRequestWorker *worker);
    void getShipmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelShipmentSignal(OAIShipment summary);
    void createFromShippingQuoteSignal(OAIShipment summary);
    void downloadLabelFileSignal(QList<QString> summary);
    void getShipmentSignal(OAIShipment summary);


    void cancelShipmentSignalFull(OAIHttpRequestWorker *worker, OAIShipment summary);
    void createFromShippingQuoteSignalFull(OAIHttpRequestWorker *worker, OAIShipment summary);
    void downloadLabelFileSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getShipmentSignalFull(OAIHttpRequestWorker *worker, OAIShipment summary);

    Q_DECL_DEPRECATED_X("Use cancelShipmentSignalError() instead")
    void cancelShipmentSignalE(OAIShipment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelShipmentSignalError(OAIShipment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFromShippingQuoteSignalError() instead")
    void createFromShippingQuoteSignalE(OAIShipment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFromShippingQuoteSignalError(OAIShipment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadLabelFileSignalError() instead")
    void downloadLabelFileSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadLabelFileSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentSignalError() instead")
    void getShipmentSignalE(OAIShipment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentSignalError(OAIShipment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelShipmentSignalErrorFull() instead")
    void cancelShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFromShippingQuoteSignalErrorFull() instead")
    void createFromShippingQuoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFromShippingQuoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadLabelFileSignalErrorFull() instead")
    void downloadLabelFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadLabelFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentSignalErrorFull() instead")
    void getShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
