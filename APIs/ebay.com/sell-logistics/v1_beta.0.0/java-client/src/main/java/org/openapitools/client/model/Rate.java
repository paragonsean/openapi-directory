/*
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalOption;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.PickupSlot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type contains live quote information about a shipping service that&#39;s available for a given shipping quote request, including the shipping carrier and service, delivery window, shipping cost, and additional shipping options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:50.586675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rate {
  public static final String SERIALIZED_NAME_ADDITIONAL_OPTIONS = "additionalOptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OPTIONS)
  private List<AdditionalOption> additionalOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_SHIPPING_COST = "baseShippingCost";
  @SerializedName(SERIALIZED_NAME_BASE_SHIPPING_COST)
  private Amount baseShippingCost;

  public static final String SERIALIZED_NAME_DESTINATION_TIME_ZONE = "destinationTimeZone";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TIME_ZONE)
  private String destinationTimeZone;

  public static final String SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE = "maxEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE)
  private String maxEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE = "minEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE)
  private String minEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_PICKUP_NETWORKS = "pickupNetworks";
  @SerializedName(SERIALIZED_NAME_PICKUP_NETWORKS)
  private List<String> pickupNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PICKUP_SLOTS = "pickupSlots";
  @SerializedName(SERIALIZED_NAME_PICKUP_SLOTS)
  private List<PickupSlot> pickupSlots = new ArrayList<>();

  public static final String SERIALIZED_NAME_PICKUP_TYPE = "pickupType";
  @SerializedName(SERIALIZED_NAME_PICKUP_TYPE)
  private String pickupType;

  public static final String SERIALIZED_NAME_RATE_ID = "rateId";
  @SerializedName(SERIALIZED_NAME_RATE_ID)
  private String rateId;

  public static final String SERIALIZED_NAME_RATE_RECOMMENDATION = "rateRecommendation";
  @SerializedName(SERIALIZED_NAME_RATE_RECOMMENDATION)
  private List<String> rateRecommendation = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_CARRIER_CODE = "shippingCarrierCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CARRIER_CODE)
  private String shippingCarrierCode;

  public static final String SERIALIZED_NAME_SHIPPING_CARRIER_NAME = "shippingCarrierName";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CARRIER_NAME)
  private String shippingCarrierName;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE_CODE = "shippingServiceCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE_CODE)
  private String shippingServiceCode;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE_NAME = "shippingServiceName";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE_NAME)
  private String shippingServiceName;

  public Rate() {
  }

  public Rate additionalOptions(List<AdditionalOption> additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  public Rate addAdditionalOptionsItem(AdditionalOption additionalOptionsItem) {
    if (this.additionalOptions == null) {
      this.additionalOptions = new ArrayList<>();
    }
    this.additionalOptions.add(additionalOptionsItem);
    return this;
  }

  /**
   * Contains service and pricing information for one or more shipping options that are offered by the carrier and can be purchased in addition to the base shipping service provided by this rate. Shipping options can include items such as &lt;code&gt;INSURANCE&lt;/code&gt; and &lt;code&gt;SIGNATURE&lt;/code&gt;.
   * @return additionalOptions
   */
  @javax.annotation.Nullable
  public List<AdditionalOption> getAdditionalOptions() {
    return additionalOptions;
  }

  public void setAdditionalOptions(List<AdditionalOption> additionalOptions) {
    this.additionalOptions = additionalOptions;
  }


  public Rate baseShippingCost(Amount baseShippingCost) {
    this.baseShippingCost = baseShippingCost;
    return this;
  }

  /**
   * Get baseShippingCost
   * @return baseShippingCost
   */
  @javax.annotation.Nullable
  public Amount getBaseShippingCost() {
    return baseShippingCost;
  }

  public void setBaseShippingCost(Amount baseShippingCost) {
    this.baseShippingCost = baseShippingCost;
  }


  public Rate destinationTimeZone(String destinationTimeZone) {
    this.destinationTimeZone = destinationTimeZone;
    return this;
  }

  /**
   * The name of the time zone region, as defined in the &lt;a href&#x3D;\&quot;http://www.iana.org/time-zones\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;IANA Time Zone Database&lt;/a&gt;, to which the package is being shipped.  &lt;br&gt;&lt;br&gt;Delivery dates are calculated relative to this time zone.  &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is different from a Coordinated Universal Time (UTC) offset. For example, the &lt;i&gt;America/Los_Angeles&lt;/i&gt; time zone identifies a region with the UTC standard time offset of &lt;code&gt;-08:00&lt;/code&gt;, but so do several other time zones, including &lt;i&gt;America/Tijuana&lt;/i&gt;,&lt;i&gt;America/Dawson&lt;/i&gt;, and &lt;i&gt;Pacific/Pitcairn&lt;/i&gt;.&lt;/span&gt;
   * @return destinationTimeZone
   */
  @javax.annotation.Nullable
  public String getDestinationTimeZone() {
    return destinationTimeZone;
  }

  public void setDestinationTimeZone(String destinationTimeZone) {
    this.destinationTimeZone = destinationTimeZone;
  }


  public Rate maxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
    return this;
  }

  /**
   * The latest stated date and time the shipment will be delivered at this rate.  &lt;br&gt;&lt;br&gt;The time stamp is formatted as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot; title&#x3D;\&quot;https://www.iso.org\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2018-08-20T07:09:00.000Z&lt;/code&gt;
   * @return maxEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMaxEstimatedDeliveryDate() {
    return maxEstimatedDeliveryDate;
  }

  public void setMaxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
  }


  public Rate minEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
    return this;
  }

  /**
   * The estimated earliest date and time the shipment will be delivered at this rate. The time stamp is formatted as an ISO 8601 UTC string.
   * @return minEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMinEstimatedDeliveryDate() {
    return minEstimatedDeliveryDate;
  }

  public void setMinEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
  }


  public Rate pickupNetworks(List<String> pickupNetworks) {
    this.pickupNetworks = pickupNetworks;
    return this;
  }

  public Rate addPickupNetworksItem(String pickupNetworksItem) {
    if (this.pickupNetworks == null) {
      this.pickupNetworks = new ArrayList<>();
    }
    this.pickupNetworks.add(pickupNetworksItem);
    return this;
  }

  /**
   * A list of pickup networks compatible with the shipping service.
   * @return pickupNetworks
   */
  @javax.annotation.Nullable
  public List<String> getPickupNetworks() {
    return pickupNetworks;
  }

  public void setPickupNetworks(List<String> pickupNetworks) {
    this.pickupNetworks = pickupNetworks;
  }


  public Rate pickupSlots(List<PickupSlot> pickupSlots) {
    this.pickupSlots = pickupSlots;
    return this;
  }

  public Rate addPickupSlotsItem(PickupSlot pickupSlotsItem) {
    if (this.pickupSlots == null) {
      this.pickupSlots = new ArrayList<>();
    }
    this.pickupSlots.add(pickupSlotsItem);
    return this;
  }

  /**
   * A list of available pickup slots for the package.
   * @return pickupSlots
   */
  @javax.annotation.Nullable
  public List<PickupSlot> getPickupSlots() {
    return pickupSlots;
  }

  public void setPickupSlots(List<PickupSlot> pickupSlots) {
    this.pickupSlots = pickupSlots;
  }


  public Rate pickupType(String pickupType) {
    this.pickupType = pickupType;
    return this;
  }

  /**
   * The type of pickup or drop-off service associated with the &lt;b&gt;pickupSlots&lt;/b&gt; time frames. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/logistics/types/api:PickupTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return pickupType
   */
  @javax.annotation.Nullable
  public String getPickupType() {
    return pickupType;
  }

  public void setPickupType(String pickupType) {
    this.pickupType = pickupType;
  }


  public Rate rateId(String rateId) {
    this.rateId = rateId;
    return this;
  }

  /**
   * The unique eBay-assigned ID for this shipping rate.
   * @return rateId
   */
  @javax.annotation.Nullable
  public String getRateId() {
    return rateId;
  }

  public void setRateId(String rateId) {
    this.rateId = rateId;
  }


  public Rate rateRecommendation(List<String> rateRecommendation) {
    this.rateRecommendation = rateRecommendation;
    return this;
  }

  public Rate addRateRecommendationItem(String rateRecommendationItem) {
    if (this.rateRecommendation == null) {
      this.rateRecommendation = new ArrayList<>();
    }
    this.rateRecommendation.add(rateRecommendationItem);
    return this;
  }

  /**
   * A list of reasons this rate is recommended. Available values are: &lt;ul&gt; &lt;li&gt;&lt;code&gt;BUYER_CHOSEN&lt;/code&gt; &amp;mdash; The rate meets or exceeds the requirements of the buyer&#39;s preferred shipping option.&lt;/li&gt; &lt;li&gt;&lt;code&gt;CHEAPEST_ON_TIME&lt;/code&gt; &amp;mdash; The rate is the cheapest rate available that will provide delivery within the seller&#39;s time frame commitment.&lt;/li&gt;  &lt;li&gt;&lt;code&gt;EBAY_PLUS_OK&lt;/code&gt; &amp;mdash; The rate complies with the shipping requirements of the eBay Plus program.&lt;/li&gt; &lt;li&gt;&lt;code&gt;FASTEST_ON_TIME&lt;/code&gt; &amp;mdash; The rate has the fastest shipping time, and will provide delivery within the seller&#39;s time frame commitment.&lt;/li&gt; &lt;li&gt;&lt;code&gt;GUARANTEED_DELIVERY_OK&lt;/code&gt; &amp;mdash; The rate complies with the shipping requirements of the eBay Guaranteed Delivery program.&lt;/li&gt;&lt;/ul&gt;
   * @return rateRecommendation
   */
  @javax.annotation.Nullable
  public List<String> getRateRecommendation() {
    return rateRecommendation;
  }

  public void setRateRecommendation(List<String> rateRecommendation) {
    this.rateRecommendation = rateRecommendation;
  }


  public Rate shippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
    return this;
  }

  /**
   * The code name of the shipping carrier who will provide the service identified by &lt;b&gt;shippingServiceCode&lt;/b&gt;.
   * @return shippingCarrierCode
   */
  @javax.annotation.Nullable
  public String getShippingCarrierCode() {
    return shippingCarrierCode;
  }

  public void setShippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
  }


  public Rate shippingCarrierName(String shippingCarrierName) {
    this.shippingCarrierName = shippingCarrierName;
    return this;
  }

  /**
   * The common name of the shipping carrier.
   * @return shippingCarrierName
   */
  @javax.annotation.Nullable
  public String getShippingCarrierName() {
    return shippingCarrierName;
  }

  public void setShippingCarrierName(String shippingCarrierName) {
    this.shippingCarrierName = shippingCarrierName;
  }


  public Rate shippingServiceCode(String shippingServiceCode) {
    this.shippingServiceCode = shippingServiceCode;
    return this;
  }

  /**
   * The code name of the shipping service to be provided by the carrier identified by &lt;b&gt;shippingCarrierCode&lt;/b&gt;.
   * @return shippingServiceCode
   */
  @javax.annotation.Nullable
  public String getShippingServiceCode() {
    return shippingServiceCode;
  }

  public void setShippingServiceCode(String shippingServiceCode) {
    this.shippingServiceCode = shippingServiceCode;
  }


  public Rate shippingServiceName(String shippingServiceName) {
    this.shippingServiceName = shippingServiceName;
    return this;
  }

  /**
   * The common name of the shipping service.
   * @return shippingServiceName
   */
  @javax.annotation.Nullable
  public String getShippingServiceName() {
    return shippingServiceName;
  }

  public void setShippingServiceName(String shippingServiceName) {
    this.shippingServiceName = shippingServiceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rate rate = (Rate) o;
    return Objects.equals(this.additionalOptions, rate.additionalOptions) &&
        Objects.equals(this.baseShippingCost, rate.baseShippingCost) &&
        Objects.equals(this.destinationTimeZone, rate.destinationTimeZone) &&
        Objects.equals(this.maxEstimatedDeliveryDate, rate.maxEstimatedDeliveryDate) &&
        Objects.equals(this.minEstimatedDeliveryDate, rate.minEstimatedDeliveryDate) &&
        Objects.equals(this.pickupNetworks, rate.pickupNetworks) &&
        Objects.equals(this.pickupSlots, rate.pickupSlots) &&
        Objects.equals(this.pickupType, rate.pickupType) &&
        Objects.equals(this.rateId, rate.rateId) &&
        Objects.equals(this.rateRecommendation, rate.rateRecommendation) &&
        Objects.equals(this.shippingCarrierCode, rate.shippingCarrierCode) &&
        Objects.equals(this.shippingCarrierName, rate.shippingCarrierName) &&
        Objects.equals(this.shippingServiceCode, rate.shippingServiceCode) &&
        Objects.equals(this.shippingServiceName, rate.shippingServiceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalOptions, baseShippingCost, destinationTimeZone, maxEstimatedDeliveryDate, minEstimatedDeliveryDate, pickupNetworks, pickupSlots, pickupType, rateId, rateRecommendation, shippingCarrierCode, shippingCarrierName, shippingServiceCode, shippingServiceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rate {\n");
    sb.append("    additionalOptions: ").append(toIndentedString(additionalOptions)).append("\n");
    sb.append("    baseShippingCost: ").append(toIndentedString(baseShippingCost)).append("\n");
    sb.append("    destinationTimeZone: ").append(toIndentedString(destinationTimeZone)).append("\n");
    sb.append("    maxEstimatedDeliveryDate: ").append(toIndentedString(maxEstimatedDeliveryDate)).append("\n");
    sb.append("    minEstimatedDeliveryDate: ").append(toIndentedString(minEstimatedDeliveryDate)).append("\n");
    sb.append("    pickupNetworks: ").append(toIndentedString(pickupNetworks)).append("\n");
    sb.append("    pickupSlots: ").append(toIndentedString(pickupSlots)).append("\n");
    sb.append("    pickupType: ").append(toIndentedString(pickupType)).append("\n");
    sb.append("    rateId: ").append(toIndentedString(rateId)).append("\n");
    sb.append("    rateRecommendation: ").append(toIndentedString(rateRecommendation)).append("\n");
    sb.append("    shippingCarrierCode: ").append(toIndentedString(shippingCarrierCode)).append("\n");
    sb.append("    shippingCarrierName: ").append(toIndentedString(shippingCarrierName)).append("\n");
    sb.append("    shippingServiceCode: ").append(toIndentedString(shippingServiceCode)).append("\n");
    sb.append("    shippingServiceName: ").append(toIndentedString(shippingServiceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalOptions");
    openapiFields.add("baseShippingCost");
    openapiFields.add("destinationTimeZone");
    openapiFields.add("maxEstimatedDeliveryDate");
    openapiFields.add("minEstimatedDeliveryDate");
    openapiFields.add("pickupNetworks");
    openapiFields.add("pickupSlots");
    openapiFields.add("pickupType");
    openapiFields.add("rateId");
    openapiFields.add("rateRecommendation");
    openapiFields.add("shippingCarrierCode");
    openapiFields.add("shippingCarrierName");
    openapiFields.add("shippingServiceCode");
    openapiFields.add("shippingServiceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rate is not found in the empty JSON string", Rate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalOptions") != null && !jsonObj.get("additionalOptions").isJsonNull()) {
        JsonArray jsonArrayadditionalOptions = jsonObj.getAsJsonArray("additionalOptions");
        if (jsonArrayadditionalOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalOptions` to be an array in the JSON string but got `%s`", jsonObj.get("additionalOptions").toString()));
          }

          // validate the optional field `additionalOptions` (array)
          for (int i = 0; i < jsonArrayadditionalOptions.size(); i++) {
            AdditionalOption.validateJsonElement(jsonArrayadditionalOptions.get(i));
          };
        }
      }
      // validate the optional field `baseShippingCost`
      if (jsonObj.get("baseShippingCost") != null && !jsonObj.get("baseShippingCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("baseShippingCost"));
      }
      if ((jsonObj.get("destinationTimeZone") != null && !jsonObj.get("destinationTimeZone").isJsonNull()) && !jsonObj.get("destinationTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationTimeZone").toString()));
      }
      if ((jsonObj.get("maxEstimatedDeliveryDate") != null && !jsonObj.get("maxEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("maxEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("minEstimatedDeliveryDate") != null && !jsonObj.get("minEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("minEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minEstimatedDeliveryDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pickupNetworks") != null && !jsonObj.get("pickupNetworks").isJsonNull() && !jsonObj.get("pickupNetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("pickupNetworks").toString()));
      }
      if (jsonObj.get("pickupSlots") != null && !jsonObj.get("pickupSlots").isJsonNull()) {
        JsonArray jsonArraypickupSlots = jsonObj.getAsJsonArray("pickupSlots");
        if (jsonArraypickupSlots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pickupSlots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickupSlots` to be an array in the JSON string but got `%s`", jsonObj.get("pickupSlots").toString()));
          }

          // validate the optional field `pickupSlots` (array)
          for (int i = 0; i < jsonArraypickupSlots.size(); i++) {
            PickupSlot.validateJsonElement(jsonArraypickupSlots.get(i));
          };
        }
      }
      if ((jsonObj.get("pickupType") != null && !jsonObj.get("pickupType").isJsonNull()) && !jsonObj.get("pickupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupType").toString()));
      }
      if ((jsonObj.get("rateId") != null && !jsonObj.get("rateId").isJsonNull()) && !jsonObj.get("rateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rateRecommendation") != null && !jsonObj.get("rateRecommendation").isJsonNull() && !jsonObj.get("rateRecommendation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateRecommendation` to be an array in the JSON string but got `%s`", jsonObj.get("rateRecommendation").toString()));
      }
      if ((jsonObj.get("shippingCarrierCode") != null && !jsonObj.get("shippingCarrierCode").isJsonNull()) && !jsonObj.get("shippingCarrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCarrierCode").toString()));
      }
      if ((jsonObj.get("shippingCarrierName") != null && !jsonObj.get("shippingCarrierName").isJsonNull()) && !jsonObj.get("shippingCarrierName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCarrierName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCarrierName").toString()));
      }
      if ((jsonObj.get("shippingServiceCode") != null && !jsonObj.get("shippingServiceCode").isJsonNull()) && !jsonObj.get("shippingServiceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingServiceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingServiceCode").toString()));
      }
      if ((jsonObj.get("shippingServiceName") != null && !jsonObj.get("shippingServiceName").isJsonNull()) && !jsonObj.get("shippingServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingServiceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rate.class));

       return (TypeAdapter<T>) new TypeAdapter<Rate>() {
           @Override
           public void write(JsonWriter out, Rate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rate
   * @throws IOException if the JSON string is invalid with respect to Rate
   */
  public static Rate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rate.class);
  }

  /**
   * Convert an instance of Rate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

