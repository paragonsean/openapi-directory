/*
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.PackageSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type defines the request body for &lt;b&gt;createShippingQuote&lt;/b&gt;. Sellers &lt;i&gt;request a quote&lt;/i&gt; for a shipment by defining the \&quot;To\&quot; and \&quot;From\&quot; addresses for the package, plus the package&#39;s size.  &lt;br&gt;&lt;br&gt;Carriers respond by offering up a \&quot;rate\&quot; for the service of theirs that best fits seller&#39;s needs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:50.586675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingQuoteRequest {
  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private List<Order> orders = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE_SPECIFICATION = "packageSpecification";
  @SerializedName(SERIALIZED_NAME_PACKAGE_SPECIFICATION)
  private PackageSpecification packageSpecification;

  public static final String SERIALIZED_NAME_SHIP_FROM = "shipFrom";
  @SerializedName(SERIALIZED_NAME_SHIP_FROM)
  private Contact shipFrom;

  public static final String SERIALIZED_NAME_SHIP_TO = "shipTo";
  @SerializedName(SERIALIZED_NAME_SHIP_TO)
  private Contact shipTo;

  public ShippingQuoteRequest() {
  }

  public ShippingQuoteRequest orders(List<Order> orders) {
    this.orders = orders;
    return this;
  }

  public ShippingQuoteRequest addOrdersItem(Order ordersItem) {
    if (this.orders == null) {
      this.orders = new ArrayList<>();
    }
    this.orders.add(ordersItem);
    return this;
  }

  /**
   * A seller-defined list that contains information about the orders in the package. This allows sellers to include information about the line items in the package with the shipment information.  &lt;br&gt;&lt;br&gt;A package can contain any number of line items from one or more orders, providing they all ship in the same package.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Maximum list size:&lt;/b&gt; 10
   * @return orders
   */
  @javax.annotation.Nullable
  public List<Order> getOrders() {
    return orders;
  }

  public void setOrders(List<Order> orders) {
    this.orders = orders;
  }


  public ShippingQuoteRequest packageSpecification(PackageSpecification packageSpecification) {
    this.packageSpecification = packageSpecification;
    return this;
  }

  /**
   * Get packageSpecification
   * @return packageSpecification
   */
  @javax.annotation.Nullable
  public PackageSpecification getPackageSpecification() {
    return packageSpecification;
  }

  public void setPackageSpecification(PackageSpecification packageSpecification) {
    this.packageSpecification = packageSpecification;
  }


  public ShippingQuoteRequest shipFrom(Contact shipFrom) {
    this.shipFrom = shipFrom;
    return this;
  }

  /**
   * Get shipFrom
   * @return shipFrom
   */
  @javax.annotation.Nullable
  public Contact getShipFrom() {
    return shipFrom;
  }

  public void setShipFrom(Contact shipFrom) {
    this.shipFrom = shipFrom;
  }


  public ShippingQuoteRequest shipTo(Contact shipTo) {
    this.shipTo = shipTo;
    return this;
  }

  /**
   * Get shipTo
   * @return shipTo
   */
  @javax.annotation.Nullable
  public Contact getShipTo() {
    return shipTo;
  }

  public void setShipTo(Contact shipTo) {
    this.shipTo = shipTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingQuoteRequest shippingQuoteRequest = (ShippingQuoteRequest) o;
    return Objects.equals(this.orders, shippingQuoteRequest.orders) &&
        Objects.equals(this.packageSpecification, shippingQuoteRequest.packageSpecification) &&
        Objects.equals(this.shipFrom, shippingQuoteRequest.shipFrom) &&
        Objects.equals(this.shipTo, shippingQuoteRequest.shipTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orders, packageSpecification, shipFrom, shipTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingQuoteRequest {\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    packageSpecification: ").append(toIndentedString(packageSpecification)).append("\n");
    sb.append("    shipFrom: ").append(toIndentedString(shipFrom)).append("\n");
    sb.append("    shipTo: ").append(toIndentedString(shipTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orders");
    openapiFields.add("packageSpecification");
    openapiFields.add("shipFrom");
    openapiFields.add("shipTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingQuoteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingQuoteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingQuoteRequest is not found in the empty JSON string", ShippingQuoteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingQuoteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingQuoteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
        JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
        if (jsonArrayorders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orders` to be an array in the JSON string but got `%s`", jsonObj.get("orders").toString()));
          }

          // validate the optional field `orders` (array)
          for (int i = 0; i < jsonArrayorders.size(); i++) {
            Order.validateJsonElement(jsonArrayorders.get(i));
          };
        }
      }
      // validate the optional field `packageSpecification`
      if (jsonObj.get("packageSpecification") != null && !jsonObj.get("packageSpecification").isJsonNull()) {
        PackageSpecification.validateJsonElement(jsonObj.get("packageSpecification"));
      }
      // validate the optional field `shipFrom`
      if (jsonObj.get("shipFrom") != null && !jsonObj.get("shipFrom").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("shipFrom"));
      }
      // validate the optional field `shipTo`
      if (jsonObj.get("shipTo") != null && !jsonObj.get("shipTo").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("shipTo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingQuoteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingQuoteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingQuoteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingQuoteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingQuoteRequest>() {
           @Override
           public void write(JsonWriter out, ShippingQuoteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingQuoteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingQuoteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingQuoteRequest
   * @throws IOException if the JSON string is invalid with respect to ShippingQuoteRequest
   */
  public static ShippingQuoteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingQuoteRequest.class);
  }

  /**
   * Convert an instance of ShippingQuoteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

