/*
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.PackageSpecification;
import org.openapitools.client.model.Rate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type describes a \&quot;shipping quote,\&quot; which contains the parameters for a package shipment. The shipping quote contains a list of \&quot;live quotes\&quot; or &lt;i&gt;rates&lt;/i&gt; for the shipment. Rates are offerd by a carrier for a particular service, of set of services, for shipping the package. Included in the shipping quote are the package specifications, the shipment&#39;s origin and destination addresses, and the shipping parameters specified by the seller.  &lt;br&gt;&lt;br&gt;Use the &lt;b&gt;rateId&lt;/b&gt; value to select the specific service you want when you create a shipment by calling &lt;b&gt;createFromShippingQuote&lt;/b&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:50.586675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingQuote {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private List<Order> orders = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE_SPECIFICATION = "packageSpecification";
  @SerializedName(SERIALIZED_NAME_PACKAGE_SPECIFICATION)
  private PackageSpecification packageSpecification;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private List<Rate> rates = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIP_FROM = "shipFrom";
  @SerializedName(SERIALIZED_NAME_SHIP_FROM)
  private Contact shipFrom;

  public static final String SERIALIZED_NAME_SHIP_TO = "shipTo";
  @SerializedName(SERIALIZED_NAME_SHIP_TO)
  private Contact shipTo;

  public static final String SERIALIZED_NAME_SHIPPING_QUOTE_ID = "shippingQuoteId";
  @SerializedName(SERIALIZED_NAME_SHIPPING_QUOTE_ID)
  private String shippingQuoteId;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public ShippingQuote() {
  }

  public ShippingQuote creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date and time this quote was created, expressed as an ISO 8601 UTC string.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public ShippingQuote expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The last date and time that this quote will be honored, expressed as an ISO 8601 UTC string. After this time the quote expires and the expressed rates can no longer be purchased.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ShippingQuote orders(List<Order> orders) {
    this.orders = orders;
    return this;
  }

  public ShippingQuote addOrdersItem(Order ordersItem) {
    if (this.orders == null) {
      this.orders = new ArrayList<>();
    }
    this.orders.add(ordersItem);
    return this;
  }

  /**
   * This list value is optionally assigned by the seller. When present, each element in the returned list contains seller-assigned information about an order (such as an order number). Because a package can contain all or part of one or more orders, this field provides a way for sellers to identify the packages that contain specific orders.
   * @return orders
   */
  @javax.annotation.Nullable
  public List<Order> getOrders() {
    return orders;
  }

  public void setOrders(List<Order> orders) {
    this.orders = orders;
  }


  public ShippingQuote packageSpecification(PackageSpecification packageSpecification) {
    this.packageSpecification = packageSpecification;
    return this;
  }

  /**
   * Get packageSpecification
   * @return packageSpecification
   */
  @javax.annotation.Nullable
  public PackageSpecification getPackageSpecification() {
    return packageSpecification;
  }

  public void setPackageSpecification(PackageSpecification packageSpecification) {
    this.packageSpecification = packageSpecification;
  }


  public ShippingQuote rates(List<Rate> rates) {
    this.rates = rates;
    return this;
  }

  public ShippingQuote addRatesItem(Rate ratesItem) {
    if (this.rates == null) {
      this.rates = new ArrayList<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

  /**
   * A list of &lt;i&gt;rates&lt;/i&gt; where each rate, as identified by a &lt;b&gt;rateId&lt;/b&gt;, contains information about a specific shipping service offered by a carrier.  Rates include shipping carrier and service, the to and from locations, the pickup and delivery windows, the seller&#39;s shipping parameters, the service constraints, and the cost for the base service and a list of additional shipping options.  &lt;br&gt;&lt;br&gt;Each rate offered is supported by a label service where you can purchase the rate, and associated shipping label, via a call to &lt;b&gt;createFromShippingQuote&lt;/b&gt;.
   * @return rates
   */
  @javax.annotation.Nullable
  public List<Rate> getRates() {
    return rates;
  }

  public void setRates(List<Rate> rates) {
    this.rates = rates;
  }


  public ShippingQuote shipFrom(Contact shipFrom) {
    this.shipFrom = shipFrom;
    return this;
  }

  /**
   * Get shipFrom
   * @return shipFrom
   */
  @javax.annotation.Nullable
  public Contact getShipFrom() {
    return shipFrom;
  }

  public void setShipFrom(Contact shipFrom) {
    this.shipFrom = shipFrom;
  }


  public ShippingQuote shipTo(Contact shipTo) {
    this.shipTo = shipTo;
    return this;
  }

  /**
   * Get shipTo
   * @return shipTo
   */
  @javax.annotation.Nullable
  public Contact getShipTo() {
    return shipTo;
  }

  public void setShipTo(Contact shipTo) {
    this.shipTo = shipTo;
  }


  public ShippingQuote shippingQuoteId(String shippingQuoteId) {
    this.shippingQuoteId = shippingQuoteId;
    return this;
  }

  /**
   * The unique eBay-assigned ID for this shipping quote. The value of this field is associated with a specific package, based on its origin, destination, and size.
   * @return shippingQuoteId
   */
  @javax.annotation.Nullable
  public String getShippingQuoteId() {
    return shippingQuoteId;
  }

  public void setShippingQuoteId(String shippingQuoteId) {
    this.shippingQuoteId = shippingQuoteId;
  }


  public ShippingQuote warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ShippingQuote addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of any warnings triggered by the request.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingQuote shippingQuote = (ShippingQuote) o;
    return Objects.equals(this.creationDate, shippingQuote.creationDate) &&
        Objects.equals(this.expirationDate, shippingQuote.expirationDate) &&
        Objects.equals(this.orders, shippingQuote.orders) &&
        Objects.equals(this.packageSpecification, shippingQuote.packageSpecification) &&
        Objects.equals(this.rates, shippingQuote.rates) &&
        Objects.equals(this.shipFrom, shippingQuote.shipFrom) &&
        Objects.equals(this.shipTo, shippingQuote.shipTo) &&
        Objects.equals(this.shippingQuoteId, shippingQuote.shippingQuoteId) &&
        Objects.equals(this.warnings, shippingQuote.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, expirationDate, orders, packageSpecification, rates, shipFrom, shipTo, shippingQuoteId, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingQuote {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    packageSpecification: ").append(toIndentedString(packageSpecification)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    shipFrom: ").append(toIndentedString(shipFrom)).append("\n");
    sb.append("    shipTo: ").append(toIndentedString(shipTo)).append("\n");
    sb.append("    shippingQuoteId: ").append(toIndentedString(shippingQuoteId)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("expirationDate");
    openapiFields.add("orders");
    openapiFields.add("packageSpecification");
    openapiFields.add("rates");
    openapiFields.add("shipFrom");
    openapiFields.add("shipTo");
    openapiFields.add("shippingQuoteId");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingQuote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingQuote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingQuote is not found in the empty JSON string", ShippingQuote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingQuote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingQuote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) && !jsonObj.get("expirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDate").toString()));
      }
      if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
        JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
        if (jsonArrayorders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orders` to be an array in the JSON string but got `%s`", jsonObj.get("orders").toString()));
          }

          // validate the optional field `orders` (array)
          for (int i = 0; i < jsonArrayorders.size(); i++) {
            Order.validateJsonElement(jsonArrayorders.get(i));
          };
        }
      }
      // validate the optional field `packageSpecification`
      if (jsonObj.get("packageSpecification") != null && !jsonObj.get("packageSpecification").isJsonNull()) {
        PackageSpecification.validateJsonElement(jsonObj.get("packageSpecification"));
      }
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
        if (jsonArrayrates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
          }

          // validate the optional field `rates` (array)
          for (int i = 0; i < jsonArrayrates.size(); i++) {
            Rate.validateJsonElement(jsonArrayrates.get(i));
          };
        }
      }
      // validate the optional field `shipFrom`
      if (jsonObj.get("shipFrom") != null && !jsonObj.get("shipFrom").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("shipFrom"));
      }
      // validate the optional field `shipTo`
      if (jsonObj.get("shipTo") != null && !jsonObj.get("shipTo").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("shipTo"));
      }
      if ((jsonObj.get("shippingQuoteId") != null && !jsonObj.get("shippingQuoteId").isJsonNull()) && !jsonObj.get("shippingQuoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingQuoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingQuoteId").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingQuote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingQuote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingQuote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingQuote.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingQuote>() {
           @Override
           public void write(JsonWriter out, ShippingQuote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingQuote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingQuote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingQuote
   * @throws IOException if the JSON string is invalid with respect to ShippingQuote
   */
  public static ShippingQuote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingQuote.class);
  }

  /**
   * Convert an instance of ShippingQuote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

