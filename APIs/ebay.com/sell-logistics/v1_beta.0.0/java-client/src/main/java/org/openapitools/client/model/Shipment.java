/*
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.PackageSpecification;
import org.openapitools.client.model.PurchasedRate;
import org.openapitools.client.model.ShipmentCancellation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type defines a shipment for a specific package (for example, a box or letter). Shipments are always linked to a purchased shipping label. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:50.586675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shipment {
  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private ShipmentCancellation cancellation;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_LABEL_CUSTOM_MESSAGE = "labelCustomMessage";
  @SerializedName(SERIALIZED_NAME_LABEL_CUSTOM_MESSAGE)
  private String labelCustomMessage;

  public static final String SERIALIZED_NAME_LABEL_DOWNLOAD_URL = "labelDownloadUrl";
  @SerializedName(SERIALIZED_NAME_LABEL_DOWNLOAD_URL)
  private String labelDownloadUrl;

  public static final String SERIALIZED_NAME_LABEL_SIZE = "labelSize";
  @SerializedName(SERIALIZED_NAME_LABEL_SIZE)
  private String labelSize;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private List<Order> orders = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE_SPECIFICATION = "packageSpecification";
  @SerializedName(SERIALIZED_NAME_PACKAGE_SPECIFICATION)
  private PackageSpecification packageSpecification;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private PurchasedRate rate;

  public static final String SERIALIZED_NAME_RETURN_TO = "returnTo";
  @SerializedName(SERIALIZED_NAME_RETURN_TO)
  private Contact returnTo;

  public static final String SERIALIZED_NAME_SHIP_FROM = "shipFrom";
  @SerializedName(SERIALIZED_NAME_SHIP_FROM)
  private Contact shipFrom;

  public static final String SERIALIZED_NAME_SHIP_TO = "shipTo";
  @SerializedName(SERIALIZED_NAME_SHIP_TO)
  private Contact shipTo;

  public static final String SERIALIZED_NAME_SHIPMENT_ID = "shipmentId";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_ID)
  private String shipmentId;

  public static final String SERIALIZED_NAME_SHIPMENT_TRACKING_NUMBER = "shipmentTrackingNumber";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TRACKING_NUMBER)
  private String shipmentTrackingNumber;

  public Shipment() {
  }

  public Shipment cancellation(ShipmentCancellation cancellation) {
    this.cancellation = cancellation;
    return this;
  }

  /**
   * Get cancellation
   * @return cancellation
   */
  @javax.annotation.Nullable
  public ShipmentCancellation getCancellation() {
    return cancellation;
  }

  public void setCancellation(ShipmentCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public Shipment creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date and time the shipment was created, formatted as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot; title&#x3D;\&quot;https://www.iso.org\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[SSS]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2018-08-20T07:09:00.000Z&lt;/code&gt;
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public Shipment labelCustomMessage(String labelCustomMessage) {
    this.labelCustomMessage = labelCustomMessage;
    return this;
  }

  /**
   * If supported by the selected shipping carrier, this field can contain optional seller text to be printed on the shipping label.
   * @return labelCustomMessage
   */
  @javax.annotation.Nullable
  public String getLabelCustomMessage() {
    return labelCustomMessage;
  }

  public void setLabelCustomMessage(String labelCustomMessage) {
    this.labelCustomMessage = labelCustomMessage;
  }


  public Shipment labelDownloadUrl(String labelDownloadUrl) {
    this.labelDownloadUrl = labelDownloadUrl;
    return this;
  }

  /**
   * The direct URL the seller can use to download an image of the shipping label. By default, the file format is PDF. See &lt;a href&#x3D;\&quot;/api-docs/sell/logistics/resources/shipment/methods/downloadLabelFile\&quot;&gt;downloadLabelFile&lt;/a&gt; for requesting different response file formats.
   * @return labelDownloadUrl
   */
  @javax.annotation.Nullable
  public String getLabelDownloadUrl() {
    return labelDownloadUrl;
  }

  public void setLabelDownloadUrl(String labelDownloadUrl) {
    this.labelDownloadUrl = labelDownloadUrl;
  }


  public Shipment labelSize(String labelSize) {
    this.labelSize = labelSize;
    return this;
  }

  /**
   * The seller&#39;s desired label size. The support for multi-sized labels is shipping-carrier specific and if the size requested in the &lt;b&gt;creaateFromShippingQuote&lt;/b&gt; call matches a size the carrier supports, the value will be represented here in the shipment. &lt;br&gt;&lt;br&gt;Currently, the only valid value is: &lt;code&gt;4\&quot;x6\&quot;&lt;/code&gt;
   * @return labelSize
   */
  @javax.annotation.Nullable
  public String getLabelSize() {
    return labelSize;
  }

  public void setLabelSize(String labelSize) {
    this.labelSize = labelSize;
  }


  public Shipment orders(List<Order> orders) {
    this.orders = orders;
    return this;
  }

  public Shipment addOrdersItem(Order ordersItem) {
    if (this.orders == null) {
      this.orders = new ArrayList<>();
    }
    this.orders.add(ordersItem);
    return this;
  }

  /**
   * This list value is optionally assigned by the seller. When present, each element in the returned list contains seller-assigned information about an order (such as an order number). Because a package can contain all or part of one or more orders, this field provides a way for sellers to identify the packages that contain specific orders.
   * @return orders
   */
  @javax.annotation.Nullable
  public List<Order> getOrders() {
    return orders;
  }

  public void setOrders(List<Order> orders) {
    this.orders = orders;
  }


  public Shipment packageSpecification(PackageSpecification packageSpecification) {
    this.packageSpecification = packageSpecification;
    return this;
  }

  /**
   * Get packageSpecification
   * @return packageSpecification
   */
  @javax.annotation.Nullable
  public PackageSpecification getPackageSpecification() {
    return packageSpecification;
  }

  public void setPackageSpecification(PackageSpecification packageSpecification) {
    this.packageSpecification = packageSpecification;
  }


  public Shipment rate(PurchasedRate rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  public PurchasedRate getRate() {
    return rate;
  }

  public void setRate(PurchasedRate rate) {
    this.rate = rate;
  }


  public Shipment returnTo(Contact returnTo) {
    this.returnTo = returnTo;
    return this;
  }

  /**
   * Get returnTo
   * @return returnTo
   */
  @javax.annotation.Nullable
  public Contact getReturnTo() {
    return returnTo;
  }

  public void setReturnTo(Contact returnTo) {
    this.returnTo = returnTo;
  }


  public Shipment shipFrom(Contact shipFrom) {
    this.shipFrom = shipFrom;
    return this;
  }

  /**
   * Get shipFrom
   * @return shipFrom
   */
  @javax.annotation.Nullable
  public Contact getShipFrom() {
    return shipFrom;
  }

  public void setShipFrom(Contact shipFrom) {
    this.shipFrom = shipFrom;
  }


  public Shipment shipTo(Contact shipTo) {
    this.shipTo = shipTo;
    return this;
  }

  /**
   * Get shipTo
   * @return shipTo
   */
  @javax.annotation.Nullable
  public Contact getShipTo() {
    return shipTo;
  }

  public void setShipTo(Contact shipTo) {
    this.shipTo = shipTo;
  }


  public Shipment shipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
    return this;
  }

  /**
   * The unique eBay-assigned ID for the shipment. The ID is generated when the shipment is created by a call to &lt;b&gt;createFromShippingQuote&lt;/b&gt;.
   * @return shipmentId
   */
  @javax.annotation.Nullable
  public String getShipmentId() {
    return shipmentId;
  }

  public void setShipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
  }


  public Shipment shipmentTrackingNumber(String shipmentTrackingNumber) {
    this.shipmentTrackingNumber = shipmentTrackingNumber;
    return this;
  }

  /**
   * A unique carrier-assigned ID string that can be used to track the shipment.
   * @return shipmentTrackingNumber
   */
  @javax.annotation.Nullable
  public String getShipmentTrackingNumber() {
    return shipmentTrackingNumber;
  }

  public void setShipmentTrackingNumber(String shipmentTrackingNumber) {
    this.shipmentTrackingNumber = shipmentTrackingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shipment shipment = (Shipment) o;
    return Objects.equals(this.cancellation, shipment.cancellation) &&
        Objects.equals(this.creationDate, shipment.creationDate) &&
        Objects.equals(this.labelCustomMessage, shipment.labelCustomMessage) &&
        Objects.equals(this.labelDownloadUrl, shipment.labelDownloadUrl) &&
        Objects.equals(this.labelSize, shipment.labelSize) &&
        Objects.equals(this.orders, shipment.orders) &&
        Objects.equals(this.packageSpecification, shipment.packageSpecification) &&
        Objects.equals(this.rate, shipment.rate) &&
        Objects.equals(this.returnTo, shipment.returnTo) &&
        Objects.equals(this.shipFrom, shipment.shipFrom) &&
        Objects.equals(this.shipTo, shipment.shipTo) &&
        Objects.equals(this.shipmentId, shipment.shipmentId) &&
        Objects.equals(this.shipmentTrackingNumber, shipment.shipmentTrackingNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellation, creationDate, labelCustomMessage, labelDownloadUrl, labelSize, orders, packageSpecification, rate, returnTo, shipFrom, shipTo, shipmentId, shipmentTrackingNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shipment {\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    labelCustomMessage: ").append(toIndentedString(labelCustomMessage)).append("\n");
    sb.append("    labelDownloadUrl: ").append(toIndentedString(labelDownloadUrl)).append("\n");
    sb.append("    labelSize: ").append(toIndentedString(labelSize)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    packageSpecification: ").append(toIndentedString(packageSpecification)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    returnTo: ").append(toIndentedString(returnTo)).append("\n");
    sb.append("    shipFrom: ").append(toIndentedString(shipFrom)).append("\n");
    sb.append("    shipTo: ").append(toIndentedString(shipTo)).append("\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    shipmentTrackingNumber: ").append(toIndentedString(shipmentTrackingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellation");
    openapiFields.add("creationDate");
    openapiFields.add("labelCustomMessage");
    openapiFields.add("labelDownloadUrl");
    openapiFields.add("labelSize");
    openapiFields.add("orders");
    openapiFields.add("packageSpecification");
    openapiFields.add("rate");
    openapiFields.add("returnTo");
    openapiFields.add("shipFrom");
    openapiFields.add("shipTo");
    openapiFields.add("shipmentId");
    openapiFields.add("shipmentTrackingNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shipment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shipment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shipment is not found in the empty JSON string", Shipment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shipment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shipment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cancellation`
      if (jsonObj.get("cancellation") != null && !jsonObj.get("cancellation").isJsonNull()) {
        ShipmentCancellation.validateJsonElement(jsonObj.get("cancellation"));
      }
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("labelCustomMessage") != null && !jsonObj.get("labelCustomMessage").isJsonNull()) && !jsonObj.get("labelCustomMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelCustomMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelCustomMessage").toString()));
      }
      if ((jsonObj.get("labelDownloadUrl") != null && !jsonObj.get("labelDownloadUrl").isJsonNull()) && !jsonObj.get("labelDownloadUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelDownloadUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelDownloadUrl").toString()));
      }
      if ((jsonObj.get("labelSize") != null && !jsonObj.get("labelSize").isJsonNull()) && !jsonObj.get("labelSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelSize").toString()));
      }
      if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
        JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
        if (jsonArrayorders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orders` to be an array in the JSON string but got `%s`", jsonObj.get("orders").toString()));
          }

          // validate the optional field `orders` (array)
          for (int i = 0; i < jsonArrayorders.size(); i++) {
            Order.validateJsonElement(jsonArrayorders.get(i));
          };
        }
      }
      // validate the optional field `packageSpecification`
      if (jsonObj.get("packageSpecification") != null && !jsonObj.get("packageSpecification").isJsonNull()) {
        PackageSpecification.validateJsonElement(jsonObj.get("packageSpecification"));
      }
      // validate the optional field `rate`
      if (jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) {
        PurchasedRate.validateJsonElement(jsonObj.get("rate"));
      }
      // validate the optional field `returnTo`
      if (jsonObj.get("returnTo") != null && !jsonObj.get("returnTo").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("returnTo"));
      }
      // validate the optional field `shipFrom`
      if (jsonObj.get("shipFrom") != null && !jsonObj.get("shipFrom").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("shipFrom"));
      }
      // validate the optional field `shipTo`
      if (jsonObj.get("shipTo") != null && !jsonObj.get("shipTo").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("shipTo"));
      }
      if ((jsonObj.get("shipmentId") != null && !jsonObj.get("shipmentId").isJsonNull()) && !jsonObj.get("shipmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentId").toString()));
      }
      if ((jsonObj.get("shipmentTrackingNumber") != null && !jsonObj.get("shipmentTrackingNumber").isJsonNull()) && !jsonObj.get("shipmentTrackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentTrackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentTrackingNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shipment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shipment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shipment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shipment.class));

       return (TypeAdapter<T>) new TypeAdapter<Shipment>() {
           @Override
           public void write(JsonWriter out, Shipment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shipment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shipment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shipment
   * @throws IOException if the JSON string is invalid with respect to Shipment
   */
  public static Shipment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shipment.class);
  }

  /**
   * Convert an instance of Shipment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

