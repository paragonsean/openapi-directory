/*
 * Logistics API
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />The <b>Logistics API</b> resources offer the following capabilities: <ul><li><b>shipping_quote</b> &ndash; Consolidates into a list a set of live shipping rates, or quotes, from which you can select a rate to ship a package.</li> <li><b>shipment</b> &ndash; Creates a \"shipment\" for the selected shipping rate.</li></ul> Call <b>createShippingQuote</b> to get a list of live shipping rates. The rates returned are all valid for a specific time window and all quoted prices are at eBay-negotiated rates. <br><br>Select one of the live rates and using its associated <b>rateId</b>, create a \"shipment\" for the package by calling <b>createFromShippingQuote</b>. Creating a shipment completes an agreement, and the cost of the base service and any added shipping options are summed into the returned <b>totalShippingCost</b> value. This action also generates a shipping label that you can use to ship the package.  The total cost of the shipment is incurred when the package is shipped using the supplied shipping label.  <p class=\"tablenote\"><b>Important!</b> Sellers must set up a payment method via their eBay account before they can use the methods in this API to create a shipment and the associated shipping label.</p>
 *
 * The version of the OpenAPI document: v1_beta.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalOption;
import org.openapitools.client.model.Contact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This complex type contains the request payload for the &lt;b&gt;createFromShippingQuote&lt;/b&gt; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:50.586675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateShipmentFromQuoteRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_OPTIONS = "additionalOptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OPTIONS)
  private List<AdditionalOption> additionalOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL_CUSTOM_MESSAGE = "labelCustomMessage";
  @SerializedName(SERIALIZED_NAME_LABEL_CUSTOM_MESSAGE)
  private String labelCustomMessage;

  public static final String SERIALIZED_NAME_LABEL_SIZE = "labelSize";
  @SerializedName(SERIALIZED_NAME_LABEL_SIZE)
  private String labelSize;

  public static final String SERIALIZED_NAME_RATE_ID = "rateId";
  @SerializedName(SERIALIZED_NAME_RATE_ID)
  private String rateId;

  public static final String SERIALIZED_NAME_RETURN_TO = "returnTo";
  @SerializedName(SERIALIZED_NAME_RETURN_TO)
  private Contact returnTo;

  public static final String SERIALIZED_NAME_SHIPPING_QUOTE_ID = "shippingQuoteId";
  @SerializedName(SERIALIZED_NAME_SHIPPING_QUOTE_ID)
  private String shippingQuoteId;

  public CreateShipmentFromQuoteRequest() {
  }

  public CreateShipmentFromQuoteRequest additionalOptions(List<AdditionalOption> additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  public CreateShipmentFromQuoteRequest addAdditionalOptionsItem(AdditionalOption additionalOptionsItem) {
    if (this.additionalOptions == null) {
      this.additionalOptions = new ArrayList<>();
    }
    this.additionalOptions.add(additionalOptionsItem);
    return this;
  }

  /**
   * Supply a list of one or more shipping options that the seller wants to purchase for this shipment.  &lt;br&gt;&lt;br&gt;The &lt;b&gt;baseShippingCost&lt;/b&gt; field that&#39;s associated with the selected shipping rate is the cost of the base service offered in the rate. In addition to the base service, sellers can add additional shipping services to the base service. Shipping options include things such as shipping insurance or a recipient&#39;s signature upon delivery. The cost of any added services is summed with the base shipping cost to determine the final cost for the shipment. All options added to the shipment must be chosen from the set of shipping options offered with the selected rate.
   * @return additionalOptions
   */
  @javax.annotation.Nullable
  public List<AdditionalOption> getAdditionalOptions() {
    return additionalOptions;
  }

  public void setAdditionalOptions(List<AdditionalOption> additionalOptions) {
    this.additionalOptions = additionalOptions;
  }


  public CreateShipmentFromQuoteRequest labelCustomMessage(String labelCustomMessage) {
    this.labelCustomMessage = labelCustomMessage;
    return this;
  }

  /**
   * Optional text to be printed on the shipping label if the selected shipping carrier supports custom messages on their labels.
   * @return labelCustomMessage
   */
  @javax.annotation.Nullable
  public String getLabelCustomMessage() {
    return labelCustomMessage;
  }

  public void setLabelCustomMessage(String labelCustomMessage) {
    this.labelCustomMessage = labelCustomMessage;
  }


  public CreateShipmentFromQuoteRequest labelSize(String labelSize) {
    this.labelSize = labelSize;
    return this;
  }

  /**
   * The seller&#39;s desired label size. Any supplied value is applied only if the shipping carrier supports multiple label sizes, otherwise the carrier&#39;s default label size is used.  &lt;br&gt;&lt;brCurrently, the only valid value is: &lt;code&gt;4\&quot;x6\&quot;&lt;/code&gt;
   * @return labelSize
   */
  @javax.annotation.Nullable
  public String getLabelSize() {
    return labelSize;
  }

  public void setLabelSize(String labelSize) {
    this.labelSize = labelSize;
  }


  public CreateShipmentFromQuoteRequest rateId(String rateId) {
    this.rateId = rateId;
    return this;
  }

  /**
   * The eBay-assigned ID of the shipping rate that the seller selected for the shipment. This value is generated by a call to &lt;b&gt;createShippingQuote&lt;/b&gt; and is returned in the &lt;b&gt;rates.rateId&lt;/b&gt; field.
   * @return rateId
   */
  @javax.annotation.Nullable
  public String getRateId() {
    return rateId;
  }

  public void setRateId(String rateId) {
    this.rateId = rateId;
  }


  public CreateShipmentFromQuoteRequest returnTo(Contact returnTo) {
    this.returnTo = returnTo;
    return this;
  }

  /**
   * Get returnTo
   * @return returnTo
   */
  @javax.annotation.Nullable
  public Contact getReturnTo() {
    return returnTo;
  }

  public void setReturnTo(Contact returnTo) {
    this.returnTo = returnTo;
  }


  public CreateShipmentFromQuoteRequest shippingQuoteId(String shippingQuoteId) {
    this.shippingQuoteId = shippingQuoteId;
    return this;
  }

  /**
   * The unique eBay-assigned ID of the shipping quote that was generated by a call to &lt;b&gt;createShippingQuote&lt;/b&gt;.
   * @return shippingQuoteId
   */
  @javax.annotation.Nullable
  public String getShippingQuoteId() {
    return shippingQuoteId;
  }

  public void setShippingQuoteId(String shippingQuoteId) {
    this.shippingQuoteId = shippingQuoteId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateShipmentFromQuoteRequest createShipmentFromQuoteRequest = (CreateShipmentFromQuoteRequest) o;
    return Objects.equals(this.additionalOptions, createShipmentFromQuoteRequest.additionalOptions) &&
        Objects.equals(this.labelCustomMessage, createShipmentFromQuoteRequest.labelCustomMessage) &&
        Objects.equals(this.labelSize, createShipmentFromQuoteRequest.labelSize) &&
        Objects.equals(this.rateId, createShipmentFromQuoteRequest.rateId) &&
        Objects.equals(this.returnTo, createShipmentFromQuoteRequest.returnTo) &&
        Objects.equals(this.shippingQuoteId, createShipmentFromQuoteRequest.shippingQuoteId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalOptions, labelCustomMessage, labelSize, rateId, returnTo, shippingQuoteId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateShipmentFromQuoteRequest {\n");
    sb.append("    additionalOptions: ").append(toIndentedString(additionalOptions)).append("\n");
    sb.append("    labelCustomMessage: ").append(toIndentedString(labelCustomMessage)).append("\n");
    sb.append("    labelSize: ").append(toIndentedString(labelSize)).append("\n");
    sb.append("    rateId: ").append(toIndentedString(rateId)).append("\n");
    sb.append("    returnTo: ").append(toIndentedString(returnTo)).append("\n");
    sb.append("    shippingQuoteId: ").append(toIndentedString(shippingQuoteId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalOptions");
    openapiFields.add("labelCustomMessage");
    openapiFields.add("labelSize");
    openapiFields.add("rateId");
    openapiFields.add("returnTo");
    openapiFields.add("shippingQuoteId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateShipmentFromQuoteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateShipmentFromQuoteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateShipmentFromQuoteRequest is not found in the empty JSON string", CreateShipmentFromQuoteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateShipmentFromQuoteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateShipmentFromQuoteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalOptions") != null && !jsonObj.get("additionalOptions").isJsonNull()) {
        JsonArray jsonArrayadditionalOptions = jsonObj.getAsJsonArray("additionalOptions");
        if (jsonArrayadditionalOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalOptions` to be an array in the JSON string but got `%s`", jsonObj.get("additionalOptions").toString()));
          }

          // validate the optional field `additionalOptions` (array)
          for (int i = 0; i < jsonArrayadditionalOptions.size(); i++) {
            AdditionalOption.validateJsonElement(jsonArrayadditionalOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("labelCustomMessage") != null && !jsonObj.get("labelCustomMessage").isJsonNull()) && !jsonObj.get("labelCustomMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelCustomMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelCustomMessage").toString()));
      }
      if ((jsonObj.get("labelSize") != null && !jsonObj.get("labelSize").isJsonNull()) && !jsonObj.get("labelSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelSize").toString()));
      }
      if ((jsonObj.get("rateId") != null && !jsonObj.get("rateId").isJsonNull()) && !jsonObj.get("rateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateId").toString()));
      }
      // validate the optional field `returnTo`
      if (jsonObj.get("returnTo") != null && !jsonObj.get("returnTo").isJsonNull()) {
        Contact.validateJsonElement(jsonObj.get("returnTo"));
      }
      if ((jsonObj.get("shippingQuoteId") != null && !jsonObj.get("shippingQuoteId").isJsonNull()) && !jsonObj.get("shippingQuoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingQuoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingQuoteId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateShipmentFromQuoteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateShipmentFromQuoteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateShipmentFromQuoteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateShipmentFromQuoteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateShipmentFromQuoteRequest>() {
           @Override
           public void write(JsonWriter out, CreateShipmentFromQuoteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateShipmentFromQuoteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateShipmentFromQuoteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateShipmentFromQuoteRequest
   * @throws IOException if the JSON string is invalid with respect to CreateShipmentFromQuoteRequest
   */
  public static CreateShipmentFromQuoteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateShipmentFromQuoteRequest.class);
  }

  /**
   * Convert an instance of CreateShipmentFromQuoteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

