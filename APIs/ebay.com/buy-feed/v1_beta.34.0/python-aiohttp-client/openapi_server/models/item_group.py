# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_image_urls: str=None, image_altering_prohibited: bool=None, image_url: str=None, item_group_id: str=None, item_group_type: str=None, title: str=None, varies_by_localized_aspects: str=None):
        """ItemGroup - a model defined in OpenAPI

        :param additional_image_urls: The additional_image_urls of this ItemGroup.
        :param image_altering_prohibited: The image_altering_prohibited of this ItemGroup.
        :param image_url: The image_url of this ItemGroup.
        :param item_group_id: The item_group_id of this ItemGroup.
        :param item_group_type: The item_group_type of this ItemGroup.
        :param title: The title of this ItemGroup.
        :param varies_by_localized_aspects: The varies_by_localized_aspects of this ItemGroup.
        """
        self.openapi_types = {
            'additional_image_urls': str,
            'image_altering_prohibited': bool,
            'image_url': str,
            'item_group_id': str,
            'item_group_type': str,
            'title': str,
            'varies_by_localized_aspects': str
        }

        self.attribute_map = {
            'additional_image_urls': 'additionalImageUrls',
            'image_altering_prohibited': 'imageAlteringProhibited',
            'image_url': 'imageUrl',
            'item_group_id': 'itemGroupId',
            'item_group_type': 'itemGroupType',
            'title': 'title',
            'varies_by_localized_aspects': 'variesByLocalizedAspects'
        }

        self._additional_image_urls = additional_image_urls
        self._image_altering_prohibited = image_altering_prohibited
        self._image_url = image_url
        self._item_group_id = item_group_id
        self._item_group_type = item_group_type
        self._title = title
        self._varies_by_localized_aspects = varies_by_localized_aspects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemGroup of this ItemGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_image_urls(self):
        """Gets the additional_image_urls of this ItemGroup.

        A pipe separated (<code>|</code>) list of URLs for the additional images for the item group. These images are in addition to the primary image, which is returned in the <b>imageUrl</b> column. <b>Note: </b> This column can contain multiple values.

        :return: The additional_image_urls of this ItemGroup.
        :rtype: str
        """
        return self._additional_image_urls

    @additional_image_urls.setter
    def additional_image_urls(self, additional_image_urls):
        """Sets the additional_image_urls of this ItemGroup.

        A pipe separated (<code>|</code>) list of URLs for the additional images for the item group. These images are in addition to the primary image, which is returned in the <b>imageUrl</b> column. <b>Note: </b> This column can contain multiple values.

        :param additional_image_urls: The additional_image_urls of this ItemGroup.
        :type additional_image_urls: str
        """

        self._additional_image_urls = additional_image_urls

    @property
    def image_altering_prohibited(self):
        """Gets the image_altering_prohibited of this ItemGroup.

        A boolean that indicates whether the images can be altered. If the value is <code>true</code>, you cannot modify the image. <p><span class=\"tablenote\"><b>Note: </b> Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only. </span></p>

        :return: The image_altering_prohibited of this ItemGroup.
        :rtype: bool
        """
        return self._image_altering_prohibited

    @image_altering_prohibited.setter
    def image_altering_prohibited(self, image_altering_prohibited):
        """Sets the image_altering_prohibited of this ItemGroup.

        A boolean that indicates whether the images can be altered. If the value is <code>true</code>, you cannot modify the image. <p><span class=\"tablenote\"><b>Note: </b> Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only. </span></p>

        :param image_altering_prohibited: The image_altering_prohibited of this ItemGroup.
        :type image_altering_prohibited: bool
        """

        self._image_altering_prohibited = image_altering_prohibited

    @property
    def image_url(self):
        """Gets the image_url of this ItemGroup.

        The URL to the primary image of the item. The other images of the item group are returned in the <b> additionalImageUrls</b> column.

        :return: The image_url of this ItemGroup.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ItemGroup.

        The URL to the primary image of the item. The other images of the item group are returned in the <b> additionalImageUrls</b> column.

        :param image_url: The image_url of this ItemGroup.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def item_group_id(self):
        """Gets the item_group_id of this ItemGroup.

        The unique identifier for the item group. This ID is returned in the <b> primaryItemGroupId</b> column of the <a href=\"/api-docs/buy/feed/resources/item/methods/getItemFeed\">Item Feed</a> file.

        :return: The item_group_id of this ItemGroup.
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this ItemGroup.

        The unique identifier for the item group. This ID is returned in the <b> primaryItemGroupId</b> column of the <a href=\"/api-docs/buy/feed/resources/item/methods/getItemFeed\">Item Feed</a> file.

        :param item_group_id: The item_group_id of this ItemGroup.
        :type item_group_id: str
        """

        self._item_group_id = item_group_id

    @property
    def item_group_type(self):
        """Gets the item_group_type of this ItemGroup.

        The item group type. For example:<code> SELLER_DEFINED_VARIATIONS</code>, indicates that the item group was created by the seller. <br><br>Code so that your app gracefully handles any future changes to this list.

        :return: The item_group_type of this ItemGroup.
        :rtype: str
        """
        return self._item_group_type

    @item_group_type.setter
    def item_group_type(self, item_group_type):
        """Sets the item_group_type of this ItemGroup.

        The item group type. For example:<code> SELLER_DEFINED_VARIATIONS</code>, indicates that the item group was created by the seller. <br><br>Code so that your app gracefully handles any future changes to this list.

        :param item_group_type: The item_group_type of this ItemGroup.
        :type item_group_type: str
        """

        self._item_group_type = item_group_type

    @property
    def title(self):
        """Gets the title of this ItemGroup.

        The seller created title of the item group. This text is an escaped string when special characters are present, using the following rules:</p>   <ul>     <li>Double quotes (&#34;) and backslashes (&#92;) in the Title are escaped with a backslash (&#92;) character</li>      <li>If there are any tabs (&#92;t), double quotes (&#34;), or backslashes (&#92;) in the Title, the entire Title will be wrapped in double quotes.</li>   </ul>   <p><b>For example</b></p>   <p>Before:</p>   <p><code>Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W<b>&#92;</b>Tracking</code>   </p>   <p><code>Marvel Legends HULK 8<b>&#34;</b> Figure Avengers Age of Ultron Studios 6<b>&#34;</b> Series</code>   </p>   <p>After:</p>   <p><code>&#34;Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W<b>&#92;&#92;</b> Tracking&#34;</code>   </p>   <p><code>&#34;Marvel Legends HULK 8<b>&#92;&#34;</b> Figure Avengers Age of Ultron Studios 6<b>&#92;&#34;</b> Series<b>&#34;</b> </code>   </p>

        :return: The title of this ItemGroup.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemGroup.

        The seller created title of the item group. This text is an escaped string when special characters are present, using the following rules:</p>   <ul>     <li>Double quotes (&#34;) and backslashes (&#92;) in the Title are escaped with a backslash (&#92;) character</li>      <li>If there are any tabs (&#92;t), double quotes (&#34;), or backslashes (&#92;) in the Title, the entire Title will be wrapped in double quotes.</li>   </ul>   <p><b>For example</b></p>   <p>Before:</p>   <p><code>Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W<b>&#92;</b>Tracking</code>   </p>   <p><code>Marvel Legends HULK 8<b>&#34;</b> Figure Avengers Age of Ultron Studios 6<b>&#34;</b> Series</code>   </p>   <p>After:</p>   <p><code>&#34;Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W<b>&#92;&#92;</b> Tracking&#34;</code>   </p>   <p><code>&#34;Marvel Legends HULK 8<b>&#92;&#34;</b> Figure Avengers Age of Ultron Studios 6<b>&#92;&#34;</b> Series<b>&#34;</b> </code>   </p>

        :param title: The title of this ItemGroup.
        :type title: str
        """

        self._title = title

    @property
    def varies_by_localized_aspects(self):
        """Gets the varies_by_localized_aspects of this ItemGroup.

        A pipe separated (<code>|</code>) list of the aspect (variation) names for this item group. The aspect name is BASE64 encoded. <b>Note: </b> This column can contain multiple values.  <p>&nbsp;&nbsp;<b> Encoded Format:</b> <br>&nbsp;&nbsp;&nbsp;<code><em>aspectName</em>|<em>aspectName</em></code> </p>   <p>&nbsp;&nbsp;<b> Encoded Example</b> (The delimiters are <b style=\"font-family: 'Arial Black';\">emphasized</b>): <br>&nbsp;&nbsp;&nbsp;<code>Q29sb3I=<b style=\"font-family: 'Arial Black';\">|</b>U2l6ZQ==</code> </p>      <p>&nbsp;&nbsp;<b> Decoded: </b> <br>&nbsp;&nbsp;&nbsp;Color|Size </p>

        :return: The varies_by_localized_aspects of this ItemGroup.
        :rtype: str
        """
        return self._varies_by_localized_aspects

    @varies_by_localized_aspects.setter
    def varies_by_localized_aspects(self, varies_by_localized_aspects):
        """Sets the varies_by_localized_aspects of this ItemGroup.

        A pipe separated (<code>|</code>) list of the aspect (variation) names for this item group. The aspect name is BASE64 encoded. <b>Note: </b> This column can contain multiple values.  <p>&nbsp;&nbsp;<b> Encoded Format:</b> <br>&nbsp;&nbsp;&nbsp;<code><em>aspectName</em>|<em>aspectName</em></code> </p>   <p>&nbsp;&nbsp;<b> Encoded Example</b> (The delimiters are <b style=\"font-family: 'Arial Black';\">emphasized</b>): <br>&nbsp;&nbsp;&nbsp;<code>Q29sb3I=<b style=\"font-family: 'Arial Black';\">|</b>U2l6ZQ==</code> </p>      <p>&nbsp;&nbsp;<b> Decoded: </b> <br>&nbsp;&nbsp;&nbsp;Color|Size </p>

        :param varies_by_localized_aspects: The varies_by_localized_aspects of this ItemGroup.
        :type varies_by_localized_aspects: str
        """

        self._varies_by_localized_aspects = varies_by_localized_aspects
