/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ItemFeedService);
  }
}(this, function(expect, ItemFeedService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ItemFeedService.Item();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item', function() {
    it('should create an instance of Item', function() {
      // uncomment below and update the code to test Item
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be.a(ItemFeedService.Item);
    });

    it('should have the property acceptedPaymentMethods (base name: "acceptedPaymentMethods")', function() {
      // uncomment below and update the code to test the property acceptedPaymentMethods
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property additionalImageUrls (base name: "additionalImageUrls")', function() {
      // uncomment below and update the code to test the property additionalImageUrls
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property additionalShippingCostPerUnit (base name: "additionalShippingCostPerUnit")', function() {
      // uncomment below and update the code to test the property additionalShippingCostPerUnit
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property ageGroup (base name: "ageGroup")', function() {
      // uncomment below and update the code to test the property ageGroup
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property alerts (base name: "alerts")', function() {
      // uncomment below and update the code to test the property alerts
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property availability (base name: "availability")', function() {
      // uncomment below and update the code to test the property availability
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property availabilityThreshold (base name: "availabilityThreshold")', function() {
      // uncomment below and update the code to test the property availabilityThreshold
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property availabilityThresholdType (base name: "availabilityThresholdType")', function() {
      // uncomment below and update the code to test the property availabilityThresholdType
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property buyingOptions (base name: "buyingOptions")', function() {
      // uncomment below and update the code to test the property buyingOptions
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "categoryId")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property condition (base name: "condition")', function() {
      // uncomment below and update the code to test the property condition
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property conditionId (base name: "conditionId")', function() {
      // uncomment below and update the code to test the property conditionId
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property defaultImageUrl (base name: "defaultImageUrl")', function() {
      // uncomment below and update the code to test the property defaultImageUrl
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property deliveryOptions (base name: "deliveryOptions")', function() {
      // uncomment below and update the code to test the property deliveryOptions
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property discountAmount (base name: "discountAmount")', function() {
      // uncomment below and update the code to test the property discountAmount
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property discountPercentage (base name: "discountPercentage")', function() {
      // uncomment below and update the code to test the property discountPercentage
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property ecoParticipationFeeCurrency (base name: "ecoParticipationFeeCurrency")', function() {
      // uncomment below and update the code to test the property ecoParticipationFeeCurrency
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property ecoParticipationFeeValue (base name: "ecoParticipationFeeValue")', function() {
      // uncomment below and update the code to test the property ecoParticipationFeeValue
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property energyEfficiencyClass (base name: "energyEfficiencyClass")', function() {
      // uncomment below and update the code to test the property energyEfficiencyClass
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property epid (base name: "epid")', function() {
      // uncomment below and update the code to test the property epid
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property estimatedAvailableQuantity (base name: "estimatedAvailableQuantity")', function() {
      // uncomment below and update the code to test the property estimatedAvailableQuantity
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property gtin (base name: "gtin")', function() {
      // uncomment below and update the code to test the property gtin
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatAdditionalInformation (base name: "hazmatAdditionalInformation")', function() {
      // uncomment below and update the code to test the property hazmatAdditionalInformation
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatPictogramDescriptions (base name: "hazmatPictogramDescriptions")', function() {
      // uncomment below and update the code to test the property hazmatPictogramDescriptions
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatPictogramIds (base name: "hazmatPictogramIds")', function() {
      // uncomment below and update the code to test the property hazmatPictogramIds
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatPictogramImageUrls (base name: "hazmatPictogramImageUrls")', function() {
      // uncomment below and update the code to test the property hazmatPictogramImageUrls
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatSignalWord (base name: "hazmatSignalWord")', function() {
      // uncomment below and update the code to test the property hazmatSignalWord
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatSignalWordId (base name: "hazmatSignalWordId")', function() {
      // uncomment below and update the code to test the property hazmatSignalWordId
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatStatementDescriptions (base name: "hazmatStatementDescriptions")', function() {
      // uncomment below and update the code to test the property hazmatStatementDescriptions
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmatStatementIds (base name: "hazmatStatementIds")', function() {
      // uncomment below and update the code to test the property hazmatStatementIds
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property imageAlteringProhibited (base name: "imageAlteringProhibited")', function() {
      // uncomment below and update the code to test the property imageAlteringProhibited
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "imageUrl")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property inferredBrand (base name: "inferredBrand")', function() {
      // uncomment below and update the code to test the property inferredBrand
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property inferredEpid (base name: "inferredEpid")', function() {
      // uncomment below and update the code to test the property inferredEpid
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property inferredGtin (base name: "inferredGtin")', function() {
      // uncomment below and update the code to test the property inferredGtin
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property inferredLocalizedAspects (base name: "inferredLocalizedAspects")', function() {
      // uncomment below and update the code to test the property inferredLocalizedAspects
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property inferredMpn (base name: "inferredMpn")', function() {
      // uncomment below and update the code to test the property inferredMpn
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemAffiliateWebUrl (base name: "itemAffiliateWebUrl")', function() {
      // uncomment below and update the code to test the property itemAffiliateWebUrl
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemCreationDate (base name: "itemCreationDate")', function() {
      // uncomment below and update the code to test the property itemCreationDate
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemEndDate (base name: "itemEndDate")', function() {
      // uncomment below and update the code to test the property itemEndDate
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemLocationCountry (base name: "itemLocationCountry")', function() {
      // uncomment below and update the code to test the property itemLocationCountry
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemWebUrl (base name: "itemWebUrl")', function() {
      // uncomment below and update the code to test the property itemWebUrl
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property legacyItemId (base name: "legacyItemId")', function() {
      // uncomment below and update the code to test the property legacyItemId
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property lengthUnitOfMeasure (base name: "lengthUnitOfMeasure")', function() {
      // uncomment below and update the code to test the property lengthUnitOfMeasure
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property localizedAspects (base name: "localizedAspects")', function() {
      // uncomment below and update the code to test the property localizedAspects
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property lotSize (base name: "lotSize")', function() {
      // uncomment below and update the code to test the property lotSize
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property material (base name: "material")', function() {
      // uncomment below and update the code to test the property material
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property mpn (base name: "mpn")', function() {
      // uncomment below and update the code to test the property mpn
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property originalPriceCurrency (base name: "originalPriceCurrency")', function() {
      // uncomment below and update the code to test the property originalPriceCurrency
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property originalPriceValue (base name: "originalPriceValue")', function() {
      // uncomment below and update the code to test the property originalPriceValue
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property packageHeight (base name: "packageHeight")', function() {
      // uncomment below and update the code to test the property packageHeight
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property packageLength (base name: "packageLength")', function() {
      // uncomment below and update the code to test the property packageLength
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property packageWeight (base name: "packageWeight")', function() {
      // uncomment below and update the code to test the property packageWeight
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property packageWidth (base name: "packageWidth")', function() {
      // uncomment below and update the code to test the property packageWidth
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property pattern (base name: "pattern")', function() {
      // uncomment below and update the code to test the property pattern
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property priceCurrency (base name: "priceCurrency")', function() {
      // uncomment below and update the code to test the property priceCurrency
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property priceValue (base name: "priceValue")', function() {
      // uncomment below and update the code to test the property priceValue
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property primaryItemGroupId (base name: "primaryItemGroupId")', function() {
      // uncomment below and update the code to test the property primaryItemGroupId
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property primaryItemGroupType (base name: "primaryItemGroupType")', function() {
      // uncomment below and update the code to test the property primaryItemGroupType
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property priorityListingPayload (base name: "priorityListingPayload")', function() {
      // uncomment below and update the code to test the property priorityListingPayload
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property qualifiedPrograms (base name: "qualifiedPrograms")', function() {
      // uncomment below and update the code to test the property qualifiedPrograms
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property quantityUsedForEstimate (base name: "quantityUsedForEstimate")', function() {
      // uncomment below and update the code to test the property quantityUsedForEstimate
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property refundMethod (base name: "refundMethod")', function() {
      // uncomment below and update the code to test the property refundMethod
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property repairScore (base name: "repairScore")', function() {
      // uncomment below and update the code to test the property repairScore
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property returnMethod (base name: "returnMethod")', function() {
      // uncomment below and update the code to test the property returnMethod
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property returnPeriodUnit (base name: "returnPeriodUnit")', function() {
      // uncomment below and update the code to test the property returnPeriodUnit
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property returnPeriodValue (base name: "returnPeriodValue")', function() {
      // uncomment below and update the code to test the property returnPeriodValue
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property returnShippingCostPayer (base name: "returnShippingCostPayer")', function() {
      // uncomment below and update the code to test the property returnShippingCostPayer
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property returnsAccepted (base name: "returnsAccepted")', function() {
      // uncomment below and update the code to test the property returnsAccepted
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerAccountType (base name: "sellerAccountType")', function() {
      // uncomment below and update the code to test the property sellerAccountType
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerFeedbackPercentage (base name: "sellerFeedbackPercentage")', function() {
      // uncomment below and update the code to test the property sellerFeedbackPercentage
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerFeedbackScore (base name: "sellerFeedbackScore")', function() {
      // uncomment below and update the code to test the property sellerFeedbackScore
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerItemRevision (base name: "sellerItemRevision")', function() {
      // uncomment below and update the code to test the property sellerItemRevision
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerTrustLevel (base name: "sellerTrustLevel")', function() {
      // uncomment below and update the code to test the property sellerTrustLevel
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerUsername (base name: "sellerUsername")', function() {
      // uncomment below and update the code to test the property sellerUsername
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shipToExcludedRegions (base name: "shipToExcludedRegions")', function() {
      // uncomment below and update the code to test the property shipToExcludedRegions
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shipToIncludedRegions (base name: "shipToIncludedRegions")', function() {
      // uncomment below and update the code to test the property shipToIncludedRegions
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingCarrierCode (base name: "shippingCarrierCode")', function() {
      // uncomment below and update the code to test the property shippingCarrierCode
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingCost (base name: "shippingCost")', function() {
      // uncomment below and update the code to test the property shippingCost
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingCostType (base name: "shippingCostType")', function() {
      // uncomment below and update the code to test the property shippingCostType
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingServiceCode (base name: "shippingServiceCode")', function() {
      // uncomment below and update the code to test the property shippingServiceCode
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingType (base name: "shippingType")', function() {
      // uncomment below and update the code to test the property shippingType
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property takeBackPolicyDescription (base name: "takeBackPolicyDescription")', function() {
      // uncomment below and update the code to test the property takeBackPolicyDescription
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property takeBackPolicyLabel (base name: "takeBackPolicyLabel")', function() {
      // uncomment below and update the code to test the property takeBackPolicyLabel
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property totalUnits (base name: "totalUnits")', function() {
      // uncomment below and update the code to test the property totalUnits
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property tyreLabelImageUrl (base name: "tyreLabelImageUrl")', function() {
      // uncomment below and update the code to test the property tyreLabelImageUrl
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitPrice (base name: "unitPrice")', function() {
      // uncomment below and update the code to test the property unitPrice
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitPricingMeasure (base name: "unitPricingMeasure")', function() {
      // uncomment below and update the code to test the property unitPricingMeasure
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

    it('should have the property weightUnitOfMeasure (base name: "weightUnitOfMeasure")', function() {
      // uncomment below and update the code to test the property weightUnitOfMeasure
      //var instance = new ItemFeedService.Item();
      //expect(instance).to.be();
    });

  });

}));
