/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Item from './model/Item';
import ItemGroup from './model/ItemGroup';
import ItemGroupResponse from './model/ItemGroupResponse';
import ItemPriority from './model/ItemPriority';
import ItemPriorityResponse from './model/ItemPriorityResponse';
import ItemResponse from './model/ItemResponse';
import ItemSnapshot from './model/ItemSnapshot';
import ItemSnapshotResponse from './model/ItemSnapshotResponse';
import ItemApi from './api/ItemApi';
import ItemGroupApi from './api/ItemGroupApi';
import ItemPriorityApi from './api/ItemPriorityApi';
import ItemSnapshotApi from './api/ItemSnapshotApi';


/**
* &lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; This is a &lt;a href&#x3D;\&quot;https://developer.ebay.com/api-docs/static/versioning.html#limited \&quot; target&#x3D;\&quot;_blank\&quot;&gt; &lt;img src&#x3D;\&quot;/cms/img/docs/partners-api.svg\&quot; class&#x3D;\&quot;legend-icon partners-icon\&quot; title&#x3D;\&quot;Limited Release\&quot;  alt&#x3D;\&quot;Limited Release\&quot; /&gt;(Limited Release)&lt;/a&gt; API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the &lt;a href&#x3D;\&quot;api-docs/buy/static/buy-requirements.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Buy APIs Requirements&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;&lt;br&gt;The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. &lt;p&gt;In addition to the API, there is an open source &lt;a href&#x3D;\&quot;https://github.com/eBay/FeedSDK \&quot; target&#x3D;\&quot;_blank\&quot;&gt;Feed SDK&lt;/a&gt; written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.&lt;/p&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ItemFeedService = require('index'); // See note below*.
* var xxxSvc = new ItemFeedService.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ItemFeedService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ItemFeedService.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ItemFeedService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1_beta.34.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Item model constructor.
     * @property {module:model/Item}
     */
    Item,

    /**
     * The ItemGroup model constructor.
     * @property {module:model/ItemGroup}
     */
    ItemGroup,

    /**
     * The ItemGroupResponse model constructor.
     * @property {module:model/ItemGroupResponse}
     */
    ItemGroupResponse,

    /**
     * The ItemPriority model constructor.
     * @property {module:model/ItemPriority}
     */
    ItemPriority,

    /**
     * The ItemPriorityResponse model constructor.
     * @property {module:model/ItemPriorityResponse}
     */
    ItemPriorityResponse,

    /**
     * The ItemResponse model constructor.
     * @property {module:model/ItemResponse}
     */
    ItemResponse,

    /**
     * The ItemSnapshot model constructor.
     * @property {module:model/ItemSnapshot}
     */
    ItemSnapshot,

    /**
     * The ItemSnapshotResponse model constructor.
     * @property {module:model/ItemSnapshotResponse}
     */
    ItemSnapshotResponse,

    /**
    * The ItemApi service constructor.
    * @property {module:api/ItemApi}
    */
    ItemApi,

    /**
    * The ItemGroupApi service constructor.
    * @property {module:api/ItemGroupApi}
    */
    ItemGroupApi,

    /**
    * The ItemPriorityApi service constructor.
    * @property {module:api/ItemPriorityApi}
    */
    ItemPriorityApi,

    /**
    * The ItemSnapshotApi service constructor.
    * @property {module:api/ItemSnapshotApi}
    */
    ItemSnapshotApi
};
