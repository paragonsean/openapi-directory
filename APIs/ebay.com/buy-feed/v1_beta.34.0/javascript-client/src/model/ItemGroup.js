/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemGroup model module.
 * @module model/ItemGroup
 * @version v1_beta.34.0
 */
class ItemGroup {
    /**
     * Constructs a new <code>ItemGroup</code>.
     * The type that defines the columns returned in the &lt;b&gt;Item Group&lt;/b&gt; feed file.
     * @alias module:model/ItemGroup
     */
    constructor() { 
        
        ItemGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemGroup} obj Optional instance to populate.
     * @return {module:model/ItemGroup} The populated <code>ItemGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemGroup();

            if (data.hasOwnProperty('additionalImageUrls')) {
                obj['additionalImageUrls'] = ApiClient.convertToType(data['additionalImageUrls'], 'String');
            }
            if (data.hasOwnProperty('imageAlteringProhibited')) {
                obj['imageAlteringProhibited'] = ApiClient.convertToType(data['imageAlteringProhibited'], 'Boolean');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('itemGroupId')) {
                obj['itemGroupId'] = ApiClient.convertToType(data['itemGroupId'], 'String');
            }
            if (data.hasOwnProperty('itemGroupType')) {
                obj['itemGroupType'] = ApiClient.convertToType(data['itemGroupType'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('variesByLocalizedAspects')) {
                obj['variesByLocalizedAspects'] = ApiClient.convertToType(data['variesByLocalizedAspects'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalImageUrls'] && !(typeof data['additionalImageUrls'] === 'string' || data['additionalImageUrls'] instanceof String)) {
            throw new Error("Expected the field `additionalImageUrls` to be a primitive type in the JSON string but got " + data['additionalImageUrls']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['itemGroupId'] && !(typeof data['itemGroupId'] === 'string' || data['itemGroupId'] instanceof String)) {
            throw new Error("Expected the field `itemGroupId` to be a primitive type in the JSON string but got " + data['itemGroupId']);
        }
        // ensure the json data is a string
        if (data['itemGroupType'] && !(typeof data['itemGroupType'] === 'string' || data['itemGroupType'] instanceof String)) {
            throw new Error("Expected the field `itemGroupType` to be a primitive type in the JSON string but got " + data['itemGroupType']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['variesByLocalizedAspects'] && !(typeof data['variesByLocalizedAspects'] === 'string' || data['variesByLocalizedAspects'] instanceof String)) {
            throw new Error("Expected the field `variesByLocalizedAspects` to be a primitive type in the JSON string but got " + data['variesByLocalizedAspects']);
        }

        return true;
    }


}



/**
 * A pipe separated (<code>|</code>) list of URLs for the additional images for the item group. These images are in addition to the primary image, which is returned in the <b>imageUrl</b> column. <b>Note: </b> This column can contain multiple values.
 * @member {String} additionalImageUrls
 */
ItemGroup.prototype['additionalImageUrls'] = undefined;

/**
 * A boolean that indicates whether the images can be altered. If the value is <code>true</code>, you cannot modify the image. <p><span class=\"tablenote\"><b>Note: </b> Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only. </span></p>
 * @member {Boolean} imageAlteringProhibited
 */
ItemGroup.prototype['imageAlteringProhibited'] = undefined;

/**
 * The URL to the primary image of the item. The other images of the item group are returned in the <b> additionalImageUrls</b> column.
 * @member {String} imageUrl
 */
ItemGroup.prototype['imageUrl'] = undefined;

/**
 * The unique identifier for the item group. This ID is returned in the <b> primaryItemGroupId</b> column of the <a href=\"/api-docs/buy/feed/resources/item/methods/getItemFeed\">Item Feed</a> file.
 * @member {String} itemGroupId
 */
ItemGroup.prototype['itemGroupId'] = undefined;

/**
 * The item group type. For example:<code> SELLER_DEFINED_VARIATIONS</code>, indicates that the item group was created by the seller. <br><br>Code so that your app gracefully handles any future changes to this list.
 * @member {String} itemGroupType
 */
ItemGroup.prototype['itemGroupType'] = undefined;

/**
 * The seller created title of the item group. This text is an escaped string when special characters are present, using the following rules:</p>   <ul>     <li>Double quotes (&#34;) and backslashes (&#92;) in the Title are escaped with a backslash (&#92;) character</li>      <li>If there are any tabs (&#92;t), double quotes (&#34;), or backslashes (&#92;) in the Title, the entire Title will be wrapped in double quotes.</li>   </ul>   <p><b>For example</b></p>   <p>Before:</p>   <p><code>Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W<b>&#92;</b>Tracking</code>   </p>   <p><code>Marvel Legends HULK 8<b>&#34;</b> Figure Avengers Age of Ultron Studios 6<b>&#34;</b> Series</code>   </p>   <p>After:</p>   <p><code>&#34;Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W<b>&#92;&#92;</b> Tracking&#34;</code>   </p>   <p><code>&#34;Marvel Legends HULK 8<b>&#92;&#34;</b> Figure Avengers Age of Ultron Studios 6<b>&#92;&#34;</b> Series<b>&#34;</b> </code>   </p>
 * @member {String} title
 */
ItemGroup.prototype['title'] = undefined;

/**
 * A pipe separated (<code>|</code>) list of the aspect (variation) names for this item group. The aspect name is BASE64 encoded. <b>Note: </b> This column can contain multiple values.  <p>&nbsp;&nbsp;<b> Encoded Format:</b> <br>&nbsp;&nbsp;&nbsp;<code><em>aspectName</em>|<em>aspectName</em></code> </p>   <p>&nbsp;&nbsp;<b> Encoded Example</b> (The delimiters are <b style=\"font-family: 'Arial Black';\">emphasized</b>): <br>&nbsp;&nbsp;&nbsp;<code>Q29sb3I=<b style=\"font-family: 'Arial Black';\">|</b>U2l6ZQ==</code> </p>      <p>&nbsp;&nbsp;<b> Decoded: </b> <br>&nbsp;&nbsp;&nbsp;Color|Size </p>
 * @member {String} variesByLocalizedAspects
 */
ItemGroup.prototype['variesByLocalizedAspects'] = undefined;






export default ItemGroup;

