/*
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItemPriority
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:11.216954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemPriority {
  public static final String SERIALIZED_NAME_CHANGE_METADATA = "changeMetadata";
  @SerializedName(SERIALIZED_NAME_CHANGE_METADATA)
  private String changeMetadata;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_PRIORITY_LISTING_PAYLOAD = "priorityListingPayload";
  @SerializedName(SERIALIZED_NAME_PRIORITY_LISTING_PAYLOAD)
  private String priorityListingPayload;

  public ItemPriority() {
  }

  public ItemPriority changeMetadata(String changeMetadata) {
    this.changeMetadata = changeMetadata;
    return this;
  }

  /**
   * Status change indicator of the listing.&lt;br&gt;&lt;br&gt;&lt;b&gt;Values:&lt;/b&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;ADDED_TO_CAMPAIGN&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;REMOVED_FROM_CAMPAIGN&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;TRACKING_PAYLOAD_REFRESHED&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; When a listing is removed from the campaign, &lt;b&gt;PriorityListingPayload&lt;/b&gt; will be empty.&lt;/span&gt;&lt;br&gt;&lt;br&gt;When multiple status changes are returned for a listing, the &lt;b&gt;changeMetadata&lt;/b&gt; value will be a pipe-separated string (e.g., &lt;code&gt;ADDED_TO_CAMPAIGN|TRACKING_PAYLOAD_REFRESHED&lt;/code&gt;).&lt;br &gt;&lt;br &gt;To use the returned value, you will need to separate the string by pipe (|).
   * @return changeMetadata
   */
  @javax.annotation.Nullable
  public String getChangeMetadata() {
    return changeMetadata;
  }

  public void setChangeMetadata(String changeMetadata) {
    this.changeMetadata = changeMetadata;
  }


  public ItemPriority itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The unique identifier of an item in eBay RESTful format. An example would be &lt;code&gt;v1|1********2|4********2&lt;/code&gt;.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public ItemPriority priorityListingPayload(String priorityListingPayload) {
    this.priorityListingPayload = priorityListingPayload;
    return this;
  }

  /**
   * EPN (eBay Partner Network) publishers append this value to their affiliate tracking URL when using an EPN tracking link to track changes that occur to Priority Listing items. &lt;br&gt;&lt;br&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;code&gt;_trkparms&#x3D;ispr%3D1&amp;amdata&#x3D;enc%3AAQAFAAAAkB1DmsmXf%2BqZ%2BCEMGdebW6oR75GCMdBmc4MCQ%2FCEPqgKHbT0jdWhPwfY5LdUs6HTaP0eBlwKE7Smy2eDslewF7l3xjwWxjqwzNAnsYgxn2PiGkTKbiQSQytFUiymdtANpk1qOnBOoMGMK%2BWsji7jYlvySSs9o9s24TxD6RqWZpNrltzOU7mfnv3H40SZ3YESzg%3D%3D&lt;/code&gt;&lt;br/&gt;&lt;br&gt;See &lt;a  href&#x3D;\&quot;https://developer.ebay.com/api-docs/buy/static/ref-epn-link.html\&quot;&gt;Creating an EPN Tracking Link&lt;/a&gt; for information on EPN tracking links.
   * @return priorityListingPayload
   */
  @javax.annotation.Nullable
  public String getPriorityListingPayload() {
    return priorityListingPayload;
  }

  public void setPriorityListingPayload(String priorityListingPayload) {
    this.priorityListingPayload = priorityListingPayload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPriority itemPriority = (ItemPriority) o;
    return Objects.equals(this.changeMetadata, itemPriority.changeMetadata) &&
        Objects.equals(this.itemId, itemPriority.itemId) &&
        Objects.equals(this.priorityListingPayload, itemPriority.priorityListingPayload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeMetadata, itemId, priorityListingPayload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPriority {\n");
    sb.append("    changeMetadata: ").append(toIndentedString(changeMetadata)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    priorityListingPayload: ").append(toIndentedString(priorityListingPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeMetadata");
    openapiFields.add("itemId");
    openapiFields.add("priorityListingPayload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemPriority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemPriority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemPriority is not found in the empty JSON string", ItemPriority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemPriority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemPriority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeMetadata") != null && !jsonObj.get("changeMetadata").isJsonNull()) && !jsonObj.get("changeMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeMetadata").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("priorityListingPayload") != null && !jsonObj.get("priorityListingPayload").isJsonNull()) && !jsonObj.get("priorityListingPayload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorityListingPayload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priorityListingPayload").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemPriority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemPriority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemPriority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemPriority.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemPriority>() {
           @Override
           public void write(JsonWriter out, ItemPriority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemPriority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemPriority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemPriority
   * @throws IOException if the JSON string is invalid with respect to ItemPriority
   */
  public static ItemPriority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemPriority.class);
  }

  /**
   * Convert an instance of ItemPriority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

