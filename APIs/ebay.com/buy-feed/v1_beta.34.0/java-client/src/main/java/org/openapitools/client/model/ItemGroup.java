/*
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the columns returned in the &lt;b&gt;Item Group&lt;/b&gt; feed file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:11.216954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemGroup {
  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGE_URLS = "additionalImageUrls";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGE_URLS)
  private String additionalImageUrls;

  public static final String SERIALIZED_NAME_IMAGE_ALTERING_PROHIBITED = "imageAlteringProhibited";
  @SerializedName(SERIALIZED_NAME_IMAGE_ALTERING_PROHIBITED)
  private Boolean imageAlteringProhibited;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID = "itemGroupId";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID)
  private String itemGroupId;

  public static final String SERIALIZED_NAME_ITEM_GROUP_TYPE = "itemGroupType";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_TYPE)
  private String itemGroupType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VARIES_BY_LOCALIZED_ASPECTS = "variesByLocalizedAspects";
  @SerializedName(SERIALIZED_NAME_VARIES_BY_LOCALIZED_ASPECTS)
  private String variesByLocalizedAspects;

  public ItemGroup() {
  }

  public ItemGroup additionalImageUrls(String additionalImageUrls) {
    this.additionalImageUrls = additionalImageUrls;
    return this;
  }

  /**
   * A pipe separated (&lt;code&gt;|&lt;/code&gt;) list of URLs for the additional images for the item group. These images are in addition to the primary image, which is returned in the &lt;b&gt;imageUrl&lt;/b&gt; column. &lt;b&gt;Note: &lt;/b&gt; This column can contain multiple values.
   * @return additionalImageUrls
   */
  @javax.annotation.Nullable
  public String getAdditionalImageUrls() {
    return additionalImageUrls;
  }

  public void setAdditionalImageUrls(String additionalImageUrls) {
    this.additionalImageUrls = additionalImageUrls;
  }


  public ItemGroup imageAlteringProhibited(Boolean imageAlteringProhibited) {
    this.imageAlteringProhibited = imageAlteringProhibited;
    return this;
  }

  /**
   * A boolean that indicates whether the images can be altered. If the value is &lt;code&gt;true&lt;/code&gt;, you cannot modify the image. &lt;p&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt; Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only. &lt;/span&gt;&lt;/p&gt;
   * @return imageAlteringProhibited
   */
  @javax.annotation.Nullable
  public Boolean getImageAlteringProhibited() {
    return imageAlteringProhibited;
  }

  public void setImageAlteringProhibited(Boolean imageAlteringProhibited) {
    this.imageAlteringProhibited = imageAlteringProhibited;
  }


  public ItemGroup imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The URL to the primary image of the item. The other images of the item group are returned in the &lt;b&gt; additionalImageUrls&lt;/b&gt; column.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public ItemGroup itemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
    return this;
  }

  /**
   * The unique identifier for the item group. This ID is returned in the &lt;b&gt; primaryItemGroupId&lt;/b&gt; column of the &lt;a href&#x3D;\&quot;/api-docs/buy/feed/resources/item/methods/getItemFeed\&quot;&gt;Item Feed&lt;/a&gt; file.
   * @return itemGroupId
   */
  @javax.annotation.Nullable
  public String getItemGroupId() {
    return itemGroupId;
  }

  public void setItemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
  }


  public ItemGroup itemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
    return this;
  }

  /**
   * The item group type. For example:&lt;code&gt; SELLER_DEFINED_VARIATIONS&lt;/code&gt;, indicates that the item group was created by the seller. &lt;br&gt;&lt;br&gt;Code so that your app gracefully handles any future changes to this list.
   * @return itemGroupType
   */
  @javax.annotation.Nullable
  public String getItemGroupType() {
    return itemGroupType;
  }

  public void setItemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
  }


  public ItemGroup title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The seller created title of the item group. This text is an escaped string when special characters are present, using the following rules:&lt;/p&gt;   &lt;ul&gt;     &lt;li&gt;Double quotes (&amp;#34;) and backslashes (&amp;#92;) in the Title are escaped with a backslash (&amp;#92;) character&lt;/li&gt;      &lt;li&gt;If there are any tabs (&amp;#92;t), double quotes (&amp;#34;), or backslashes (&amp;#92;) in the Title, the entire Title will be wrapped in double quotes.&lt;/li&gt;   &lt;/ul&gt;   &lt;p&gt;&lt;b&gt;For example&lt;/b&gt;&lt;/p&gt;   &lt;p&gt;Before:&lt;/p&gt;   &lt;p&gt;&lt;code&gt;Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W&lt;b&gt;&amp;#92;&lt;/b&gt;Tracking&lt;/code&gt;   &lt;/p&gt;   &lt;p&gt;&lt;code&gt;Marvel Legends HULK 8&lt;b&gt;&amp;#34;&lt;/b&gt; Figure Avengers Age of Ultron Studios 6&lt;b&gt;&amp;#34;&lt;/b&gt; Series&lt;/code&gt;   &lt;/p&gt;   &lt;p&gt;After:&lt;/p&gt;   &lt;p&gt;&lt;code&gt;&amp;#34;Misty Rainforest Modern Masters 2017 MTG Magic Fetch Land Free Ship W&lt;b&gt;&amp;#92;&amp;#92;&lt;/b&gt; Tracking&amp;#34;&lt;/code&gt;   &lt;/p&gt;   &lt;p&gt;&lt;code&gt;&amp;#34;Marvel Legends HULK 8&lt;b&gt;&amp;#92;&amp;#34;&lt;/b&gt; Figure Avengers Age of Ultron Studios 6&lt;b&gt;&amp;#92;&amp;#34;&lt;/b&gt; Series&lt;b&gt;&amp;#34;&lt;/b&gt; &lt;/code&gt;   &lt;/p&gt;
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ItemGroup variesByLocalizedAspects(String variesByLocalizedAspects) {
    this.variesByLocalizedAspects = variesByLocalizedAspects;
    return this;
  }

  /**
   * A pipe separated (&lt;code&gt;|&lt;/code&gt;) list of the aspect (variation) names for this item group. The aspect name is BASE64 encoded. &lt;b&gt;Note: &lt;/b&gt; This column can contain multiple values.  &lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;b&gt; Encoded Format:&lt;/b&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;&lt;em&gt;aspectName&lt;/em&gt;|&lt;em&gt;aspectName&lt;/em&gt;&lt;/code&gt; &lt;/p&gt;   &lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;b&gt; Encoded Example&lt;/b&gt; (The delimiters are &lt;b style&#x3D;\&quot;font-family: &#39;Arial Black&#39;;\&quot;&gt;emphasized&lt;/b&gt;): &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;Q29sb3I&#x3D;&lt;b style&#x3D;\&quot;font-family: &#39;Arial Black&#39;;\&quot;&gt;|&lt;/b&gt;U2l6ZQ&#x3D;&#x3D;&lt;/code&gt; &lt;/p&gt;      &lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;b&gt; Decoded: &lt;/b&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Color|Size &lt;/p&gt;
   * @return variesByLocalizedAspects
   */
  @javax.annotation.Nullable
  public String getVariesByLocalizedAspects() {
    return variesByLocalizedAspects;
  }

  public void setVariesByLocalizedAspects(String variesByLocalizedAspects) {
    this.variesByLocalizedAspects = variesByLocalizedAspects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemGroup itemGroup = (ItemGroup) o;
    return Objects.equals(this.additionalImageUrls, itemGroup.additionalImageUrls) &&
        Objects.equals(this.imageAlteringProhibited, itemGroup.imageAlteringProhibited) &&
        Objects.equals(this.imageUrl, itemGroup.imageUrl) &&
        Objects.equals(this.itemGroupId, itemGroup.itemGroupId) &&
        Objects.equals(this.itemGroupType, itemGroup.itemGroupType) &&
        Objects.equals(this.title, itemGroup.title) &&
        Objects.equals(this.variesByLocalizedAspects, itemGroup.variesByLocalizedAspects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalImageUrls, imageAlteringProhibited, imageUrl, itemGroupId, itemGroupType, title, variesByLocalizedAspects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemGroup {\n");
    sb.append("    additionalImageUrls: ").append(toIndentedString(additionalImageUrls)).append("\n");
    sb.append("    imageAlteringProhibited: ").append(toIndentedString(imageAlteringProhibited)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    itemGroupId: ").append(toIndentedString(itemGroupId)).append("\n");
    sb.append("    itemGroupType: ").append(toIndentedString(itemGroupType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    variesByLocalizedAspects: ").append(toIndentedString(variesByLocalizedAspects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalImageUrls");
    openapiFields.add("imageAlteringProhibited");
    openapiFields.add("imageUrl");
    openapiFields.add("itemGroupId");
    openapiFields.add("itemGroupType");
    openapiFields.add("title");
    openapiFields.add("variesByLocalizedAspects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemGroup is not found in the empty JSON string", ItemGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalImageUrls") != null && !jsonObj.get("additionalImageUrls").isJsonNull()) && !jsonObj.get("additionalImageUrls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalImageUrls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalImageUrls").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("itemGroupId") != null && !jsonObj.get("itemGroupId").isJsonNull()) && !jsonObj.get("itemGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupId").toString()));
      }
      if ((jsonObj.get("itemGroupType") != null && !jsonObj.get("itemGroupType").isJsonNull()) && !jsonObj.get("itemGroupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupType").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("variesByLocalizedAspects") != null && !jsonObj.get("variesByLocalizedAspects").isJsonNull()) && !jsonObj.get("variesByLocalizedAspects").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variesByLocalizedAspects` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variesByLocalizedAspects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemGroup>() {
           @Override
           public void write(JsonWriter out, ItemGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemGroup
   * @throws IOException if the JSON string is invalid with respect to ItemGroup
   */
  public static ItemGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemGroup.class);
  }

  /**
   * Convert an instance of ItemGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

