/*
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItemPriority;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItemPriorityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:11.216954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemPriorityResponse {
  public static final String SERIALIZED_NAME_ITEM_DELTA = "itemDelta";
  @SerializedName(SERIALIZED_NAME_ITEM_DELTA)
  private List<ItemPriority> itemDelta = new ArrayList<>();

  public ItemPriorityResponse() {
  }

  public ItemPriorityResponse itemDelta(List<ItemPriority> itemDelta) {
    this.itemDelta = itemDelta;
    return this;
  }

  public ItemPriorityResponse addItemDeltaItem(ItemPriority itemDeltaItem) {
    if (this.itemDelta == null) {
      this.itemDelta = new ArrayList<>();
    }
    this.itemDelta.add(itemDeltaItem);
    return this;
  }

  /**
   * The container for the array of items returned by the &lt;b&gt;getItemPriorityFeed&lt;/b&gt; method. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values on each line. The header labels match the fields that are described in the &lt;a href&#x3D;\&quot;/api-docs/buy/feed/resources/item/methods/getItemPriorityFeed#h3-response-fields\&quot;&gt;Response fields&lt;/a&gt; section.
   * @return itemDelta
   */
  @javax.annotation.Nullable
  public List<ItemPriority> getItemDelta() {
    return itemDelta;
  }

  public void setItemDelta(List<ItemPriority> itemDelta) {
    this.itemDelta = itemDelta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPriorityResponse itemPriorityResponse = (ItemPriorityResponse) o;
    return Objects.equals(this.itemDelta, itemPriorityResponse.itemDelta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemDelta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPriorityResponse {\n");
    sb.append("    itemDelta: ").append(toIndentedString(itemDelta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemDelta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemPriorityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemPriorityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemPriorityResponse is not found in the empty JSON string", ItemPriorityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemPriorityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemPriorityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("itemDelta") != null && !jsonObj.get("itemDelta").isJsonNull()) {
        JsonArray jsonArrayitemDelta = jsonObj.getAsJsonArray("itemDelta");
        if (jsonArrayitemDelta != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemDelta").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemDelta` to be an array in the JSON string but got `%s`", jsonObj.get("itemDelta").toString()));
          }

          // validate the optional field `itemDelta` (array)
          for (int i = 0; i < jsonArrayitemDelta.size(); i++) {
            ItemPriority.validateJsonElement(jsonArrayitemDelta.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemPriorityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemPriorityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemPriorityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemPriorityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemPriorityResponse>() {
           @Override
           public void write(JsonWriter out, ItemPriorityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemPriorityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemPriorityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemPriorityResponse
   * @throws IOException if the JSON string is invalid with respect to ItemPriorityResponse
   */
  public static ItemPriorityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemPriorityResponse.class);
  }

  /**
   * Convert an instance of ItemPriorityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

