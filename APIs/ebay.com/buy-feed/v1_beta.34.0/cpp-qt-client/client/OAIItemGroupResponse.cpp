/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemGroupResponse::OAIItemGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemGroupResponse::OAIItemGroupResponse() {
    this->initializeModel();
}

OAIItemGroupResponse::~OAIItemGroupResponse() {}

void OAIItemGroupResponse::initializeModel() {

    m_item_groups_isSet = false;
    m_item_groups_isValid = false;
}

void OAIItemGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemGroupResponse::fromJsonObject(QJsonObject json) {

    m_item_groups_isValid = ::OpenAPI::fromJsonValue(m_item_groups, json[QString("itemGroups")]);
    m_item_groups_isSet = !json[QString("itemGroups")].isNull() && m_item_groups_isValid;
}

QString OAIItemGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_item_groups.size() > 0) {
        obj.insert(QString("itemGroups"), ::OpenAPI::toJsonValue(m_item_groups));
    }
    return obj;
}

QList<OAIItemGroup> OAIItemGroupResponse::getItemGroups() const {
    return m_item_groups;
}
void OAIItemGroupResponse::setItemGroups(const QList<OAIItemGroup> &item_groups) {
    m_item_groups = item_groups;
    m_item_groups_isSet = true;
}

bool OAIItemGroupResponse::is_item_groups_Set() const{
    return m_item_groups_isSet;
}

bool OAIItemGroupResponse::is_item_groups_Valid() const{
    return m_item_groups_isValid;
}

bool OAIItemGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
