/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIItemGroup.h
 *
 * The type that defines the columns returned in the &lt;b&gt;Item Group&lt;/b&gt; feed file.
 */

#ifndef OAIItemGroup_H
#define OAIItemGroup_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIItemGroup : public OAIObject {
public:
    OAIItemGroup();
    OAIItemGroup(QString json);
    ~OAIItemGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdditionalImageUrls() const;
    void setAdditionalImageUrls(const QString &additional_image_urls);
    bool is_additional_image_urls_Set() const;
    bool is_additional_image_urls_Valid() const;

    bool isImageAlteringProhibited() const;
    void setImageAlteringProhibited(const bool &image_altering_prohibited);
    bool is_image_altering_prohibited_Set() const;
    bool is_image_altering_prohibited_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getItemGroupId() const;
    void setItemGroupId(const QString &item_group_id);
    bool is_item_group_id_Set() const;
    bool is_item_group_id_Valid() const;

    QString getItemGroupType() const;
    void setItemGroupType(const QString &item_group_type);
    bool is_item_group_type_Set() const;
    bool is_item_group_type_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getVariesByLocalizedAspects() const;
    void setVariesByLocalizedAspects(const QString &varies_by_localized_aspects);
    bool is_varies_by_localized_aspects_Set() const;
    bool is_varies_by_localized_aspects_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_additional_image_urls;
    bool m_additional_image_urls_isSet;
    bool m_additional_image_urls_isValid;

    bool m_image_altering_prohibited;
    bool m_image_altering_prohibited_isSet;
    bool m_image_altering_prohibited_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_item_group_id;
    bool m_item_group_id_isSet;
    bool m_item_group_id_isValid;

    QString m_item_group_type;
    bool m_item_group_type_isSet;
    bool m_item_group_type_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_varies_by_localized_aspects;
    bool m_varies_by_localized_aspects_isSet;
    bool m_varies_by_localized_aspects_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIItemGroup)

#endif // OAIItemGroup_H
