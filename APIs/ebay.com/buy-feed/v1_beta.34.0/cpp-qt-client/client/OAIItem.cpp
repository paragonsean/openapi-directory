/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_accepted_payment_methods_isSet = false;
    m_accepted_payment_methods_isValid = false;

    m_additional_image_urls_isSet = false;
    m_additional_image_urls_isValid = false;

    m_additional_shipping_cost_per_unit_isSet = false;
    m_additional_shipping_cost_per_unit_isValid = false;

    m_age_group_isSet = false;
    m_age_group_isValid = false;

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_availability_threshold_isSet = false;
    m_availability_threshold_isValid = false;

    m_availability_threshold_type_isSet = false;
    m_availability_threshold_type_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_buying_options_isSet = false;
    m_buying_options_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_condition_id_isSet = false;
    m_condition_id_isValid = false;

    m_default_image_url_isSet = false;
    m_default_image_url_isValid = false;

    m_delivery_options_isSet = false;
    m_delivery_options_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_percentage_isSet = false;
    m_discount_percentage_isValid = false;

    m_eco_participation_fee_currency_isSet = false;
    m_eco_participation_fee_currency_isValid = false;

    m_eco_participation_fee_value_isSet = false;
    m_eco_participation_fee_value_isValid = false;

    m_energy_efficiency_class_isSet = false;
    m_energy_efficiency_class_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_estimated_available_quantity_isSet = false;
    m_estimated_available_quantity_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_hazmat_additional_information_isSet = false;
    m_hazmat_additional_information_isValid = false;

    m_hazmat_pictogram_descriptions_isSet = false;
    m_hazmat_pictogram_descriptions_isValid = false;

    m_hazmat_pictogram_ids_isSet = false;
    m_hazmat_pictogram_ids_isValid = false;

    m_hazmat_pictogram_image_urls_isSet = false;
    m_hazmat_pictogram_image_urls_isValid = false;

    m_hazmat_signal_word_isSet = false;
    m_hazmat_signal_word_isValid = false;

    m_hazmat_signal_word_id_isSet = false;
    m_hazmat_signal_word_id_isValid = false;

    m_hazmat_statement_descriptions_isSet = false;
    m_hazmat_statement_descriptions_isValid = false;

    m_hazmat_statement_ids_isSet = false;
    m_hazmat_statement_ids_isValid = false;

    m_image_altering_prohibited_isSet = false;
    m_image_altering_prohibited_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_inferred_brand_isSet = false;
    m_inferred_brand_isValid = false;

    m_inferred_epid_isSet = false;
    m_inferred_epid_isValid = false;

    m_inferred_gtin_isSet = false;
    m_inferred_gtin_isValid = false;

    m_inferred_localized_aspects_isSet = false;
    m_inferred_localized_aspects_isValid = false;

    m_inferred_mpn_isSet = false;
    m_inferred_mpn_isValid = false;

    m_item_affiliate_web_url_isSet = false;
    m_item_affiliate_web_url_isValid = false;

    m_item_creation_date_isSet = false;
    m_item_creation_date_isValid = false;

    m_item_end_date_isSet = false;
    m_item_end_date_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_location_country_isSet = false;
    m_item_location_country_isValid = false;

    m_item_web_url_isSet = false;
    m_item_web_url_isValid = false;

    m_legacy_item_id_isSet = false;
    m_legacy_item_id_isValid = false;

    m_length_unit_of_measure_isSet = false;
    m_length_unit_of_measure_isValid = false;

    m_localized_aspects_isSet = false;
    m_localized_aspects_isValid = false;

    m_lot_size_isSet = false;
    m_lot_size_isValid = false;

    m_material_isSet = false;
    m_material_isValid = false;

    m_mpn_isSet = false;
    m_mpn_isValid = false;

    m_original_price_currency_isSet = false;
    m_original_price_currency_isValid = false;

    m_original_price_value_isSet = false;
    m_original_price_value_isValid = false;

    m_package_height_isSet = false;
    m_package_height_isValid = false;

    m_package_length_isSet = false;
    m_package_length_isValid = false;

    m_package_weight_isSet = false;
    m_package_weight_isValid = false;

    m_package_width_isSet = false;
    m_package_width_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_price_currency_isSet = false;
    m_price_currency_isValid = false;

    m_price_value_isSet = false;
    m_price_value_isValid = false;

    m_primary_item_group_id_isSet = false;
    m_primary_item_group_id_isValid = false;

    m_primary_item_group_type_isSet = false;
    m_primary_item_group_type_isValid = false;

    m_priority_listing_payload_isSet = false;
    m_priority_listing_payload_isValid = false;

    m_qualified_programs_isSet = false;
    m_qualified_programs_isValid = false;

    m_quantity_used_for_estimate_isSet = false;
    m_quantity_used_for_estimate_isValid = false;

    m_refund_method_isSet = false;
    m_refund_method_isValid = false;

    m_repair_score_isSet = false;
    m_repair_score_isValid = false;

    m_return_method_isSet = false;
    m_return_method_isValid = false;

    m_return_period_unit_isSet = false;
    m_return_period_unit_isValid = false;

    m_return_period_value_isSet = false;
    m_return_period_value_isValid = false;

    m_return_shipping_cost_payer_isSet = false;
    m_return_shipping_cost_payer_isValid = false;

    m_returns_accepted_isSet = false;
    m_returns_accepted_isValid = false;

    m_seller_account_type_isSet = false;
    m_seller_account_type_isValid = false;

    m_seller_feedback_percentage_isSet = false;
    m_seller_feedback_percentage_isValid = false;

    m_seller_feedback_score_isSet = false;
    m_seller_feedback_score_isValid = false;

    m_seller_item_revision_isSet = false;
    m_seller_item_revision_isValid = false;

    m_seller_trust_level_isSet = false;
    m_seller_trust_level_isValid = false;

    m_seller_username_isSet = false;
    m_seller_username_isValid = false;

    m_ship_to_excluded_regions_isSet = false;
    m_ship_to_excluded_regions_isValid = false;

    m_ship_to_included_regions_isSet = false;
    m_ship_to_included_regions_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_cost_type_isSet = false;
    m_shipping_cost_type_isValid = false;

    m_shipping_service_code_isSet = false;
    m_shipping_service_code_isValid = false;

    m_shipping_type_isSet = false;
    m_shipping_type_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_take_back_policy_description_isSet = false;
    m_take_back_policy_description_isValid = false;

    m_take_back_policy_label_isSet = false;
    m_take_back_policy_label_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_units_isSet = false;
    m_total_units_isValid = false;

    m_tyre_label_image_url_isSet = false;
    m_tyre_label_image_url_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_pricing_measure_isSet = false;
    m_unit_pricing_measure_isValid = false;

    m_weight_unit_of_measure_isSet = false;
    m_weight_unit_of_measure_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_accepted_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_accepted_payment_methods, json[QString("acceptedPaymentMethods")]);
    m_accepted_payment_methods_isSet = !json[QString("acceptedPaymentMethods")].isNull() && m_accepted_payment_methods_isValid;

    m_additional_image_urls_isValid = ::OpenAPI::fromJsonValue(m_additional_image_urls, json[QString("additionalImageUrls")]);
    m_additional_image_urls_isSet = !json[QString("additionalImageUrls")].isNull() && m_additional_image_urls_isValid;

    m_additional_shipping_cost_per_unit_isValid = ::OpenAPI::fromJsonValue(m_additional_shipping_cost_per_unit, json[QString("additionalShippingCostPerUnit")]);
    m_additional_shipping_cost_per_unit_isSet = !json[QString("additionalShippingCostPerUnit")].isNull() && m_additional_shipping_cost_per_unit_isValid;

    m_age_group_isValid = ::OpenAPI::fromJsonValue(m_age_group, json[QString("ageGroup")]);
    m_age_group_isSet = !json[QString("ageGroup")].isNull() && m_age_group_isValid;

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_availability_threshold_isValid = ::OpenAPI::fromJsonValue(m_availability_threshold, json[QString("availabilityThreshold")]);
    m_availability_threshold_isSet = !json[QString("availabilityThreshold")].isNull() && m_availability_threshold_isValid;

    m_availability_threshold_type_isValid = ::OpenAPI::fromJsonValue(m_availability_threshold_type, json[QString("availabilityThresholdType")]);
    m_availability_threshold_type_isSet = !json[QString("availabilityThresholdType")].isNull() && m_availability_threshold_type_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_buying_options_isValid = ::OpenAPI::fromJsonValue(m_buying_options, json[QString("buyingOptions")]);
    m_buying_options_isSet = !json[QString("buyingOptions")].isNull() && m_buying_options_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_condition_id_isValid = ::OpenAPI::fromJsonValue(m_condition_id, json[QString("conditionId")]);
    m_condition_id_isSet = !json[QString("conditionId")].isNull() && m_condition_id_isValid;

    m_default_image_url_isValid = ::OpenAPI::fromJsonValue(m_default_image_url, json[QString("defaultImageUrl")]);
    m_default_image_url_isSet = !json[QString("defaultImageUrl")].isNull() && m_default_image_url_isValid;

    m_delivery_options_isValid = ::OpenAPI::fromJsonValue(m_delivery_options, json[QString("deliveryOptions")]);
    m_delivery_options_isSet = !json[QString("deliveryOptions")].isNull() && m_delivery_options_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_percentage_isValid = ::OpenAPI::fromJsonValue(m_discount_percentage, json[QString("discountPercentage")]);
    m_discount_percentage_isSet = !json[QString("discountPercentage")].isNull() && m_discount_percentage_isValid;

    m_eco_participation_fee_currency_isValid = ::OpenAPI::fromJsonValue(m_eco_participation_fee_currency, json[QString("ecoParticipationFeeCurrency")]);
    m_eco_participation_fee_currency_isSet = !json[QString("ecoParticipationFeeCurrency")].isNull() && m_eco_participation_fee_currency_isValid;

    m_eco_participation_fee_value_isValid = ::OpenAPI::fromJsonValue(m_eco_participation_fee_value, json[QString("ecoParticipationFeeValue")]);
    m_eco_participation_fee_value_isSet = !json[QString("ecoParticipationFeeValue")].isNull() && m_eco_participation_fee_value_isValid;

    m_energy_efficiency_class_isValid = ::OpenAPI::fromJsonValue(m_energy_efficiency_class, json[QString("energyEfficiencyClass")]);
    m_energy_efficiency_class_isSet = !json[QString("energyEfficiencyClass")].isNull() && m_energy_efficiency_class_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_estimated_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_estimated_available_quantity, json[QString("estimatedAvailableQuantity")]);
    m_estimated_available_quantity_isSet = !json[QString("estimatedAvailableQuantity")].isNull() && m_estimated_available_quantity_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_hazmat_additional_information_isValid = ::OpenAPI::fromJsonValue(m_hazmat_additional_information, json[QString("hazmatAdditionalInformation")]);
    m_hazmat_additional_information_isSet = !json[QString("hazmatAdditionalInformation")].isNull() && m_hazmat_additional_information_isValid;

    m_hazmat_pictogram_descriptions_isValid = ::OpenAPI::fromJsonValue(m_hazmat_pictogram_descriptions, json[QString("hazmatPictogramDescriptions")]);
    m_hazmat_pictogram_descriptions_isSet = !json[QString("hazmatPictogramDescriptions")].isNull() && m_hazmat_pictogram_descriptions_isValid;

    m_hazmat_pictogram_ids_isValid = ::OpenAPI::fromJsonValue(m_hazmat_pictogram_ids, json[QString("hazmatPictogramIds")]);
    m_hazmat_pictogram_ids_isSet = !json[QString("hazmatPictogramIds")].isNull() && m_hazmat_pictogram_ids_isValid;

    m_hazmat_pictogram_image_urls_isValid = ::OpenAPI::fromJsonValue(m_hazmat_pictogram_image_urls, json[QString("hazmatPictogramImageUrls")]);
    m_hazmat_pictogram_image_urls_isSet = !json[QString("hazmatPictogramImageUrls")].isNull() && m_hazmat_pictogram_image_urls_isValid;

    m_hazmat_signal_word_isValid = ::OpenAPI::fromJsonValue(m_hazmat_signal_word, json[QString("hazmatSignalWord")]);
    m_hazmat_signal_word_isSet = !json[QString("hazmatSignalWord")].isNull() && m_hazmat_signal_word_isValid;

    m_hazmat_signal_word_id_isValid = ::OpenAPI::fromJsonValue(m_hazmat_signal_word_id, json[QString("hazmatSignalWordId")]);
    m_hazmat_signal_word_id_isSet = !json[QString("hazmatSignalWordId")].isNull() && m_hazmat_signal_word_id_isValid;

    m_hazmat_statement_descriptions_isValid = ::OpenAPI::fromJsonValue(m_hazmat_statement_descriptions, json[QString("hazmatStatementDescriptions")]);
    m_hazmat_statement_descriptions_isSet = !json[QString("hazmatStatementDescriptions")].isNull() && m_hazmat_statement_descriptions_isValid;

    m_hazmat_statement_ids_isValid = ::OpenAPI::fromJsonValue(m_hazmat_statement_ids, json[QString("hazmatStatementIds")]);
    m_hazmat_statement_ids_isSet = !json[QString("hazmatStatementIds")].isNull() && m_hazmat_statement_ids_isValid;

    m_image_altering_prohibited_isValid = ::OpenAPI::fromJsonValue(m_image_altering_prohibited, json[QString("imageAlteringProhibited")]);
    m_image_altering_prohibited_isSet = !json[QString("imageAlteringProhibited")].isNull() && m_image_altering_prohibited_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_inferred_brand_isValid = ::OpenAPI::fromJsonValue(m_inferred_brand, json[QString("inferredBrand")]);
    m_inferred_brand_isSet = !json[QString("inferredBrand")].isNull() && m_inferred_brand_isValid;

    m_inferred_epid_isValid = ::OpenAPI::fromJsonValue(m_inferred_epid, json[QString("inferredEpid")]);
    m_inferred_epid_isSet = !json[QString("inferredEpid")].isNull() && m_inferred_epid_isValid;

    m_inferred_gtin_isValid = ::OpenAPI::fromJsonValue(m_inferred_gtin, json[QString("inferredGtin")]);
    m_inferred_gtin_isSet = !json[QString("inferredGtin")].isNull() && m_inferred_gtin_isValid;

    m_inferred_localized_aspects_isValid = ::OpenAPI::fromJsonValue(m_inferred_localized_aspects, json[QString("inferredLocalizedAspects")]);
    m_inferred_localized_aspects_isSet = !json[QString("inferredLocalizedAspects")].isNull() && m_inferred_localized_aspects_isValid;

    m_inferred_mpn_isValid = ::OpenAPI::fromJsonValue(m_inferred_mpn, json[QString("inferredMpn")]);
    m_inferred_mpn_isSet = !json[QString("inferredMpn")].isNull() && m_inferred_mpn_isValid;

    m_item_affiliate_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_affiliate_web_url, json[QString("itemAffiliateWebUrl")]);
    m_item_affiliate_web_url_isSet = !json[QString("itemAffiliateWebUrl")].isNull() && m_item_affiliate_web_url_isValid;

    m_item_creation_date_isValid = ::OpenAPI::fromJsonValue(m_item_creation_date, json[QString("itemCreationDate")]);
    m_item_creation_date_isSet = !json[QString("itemCreationDate")].isNull() && m_item_creation_date_isValid;

    m_item_end_date_isValid = ::OpenAPI::fromJsonValue(m_item_end_date, json[QString("itemEndDate")]);
    m_item_end_date_isSet = !json[QString("itemEndDate")].isNull() && m_item_end_date_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_item_location_country_isValid = ::OpenAPI::fromJsonValue(m_item_location_country, json[QString("itemLocationCountry")]);
    m_item_location_country_isSet = !json[QString("itemLocationCountry")].isNull() && m_item_location_country_isValid;

    m_item_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_web_url, json[QString("itemWebUrl")]);
    m_item_web_url_isSet = !json[QString("itemWebUrl")].isNull() && m_item_web_url_isValid;

    m_legacy_item_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_item_id, json[QString("legacyItemId")]);
    m_legacy_item_id_isSet = !json[QString("legacyItemId")].isNull() && m_legacy_item_id_isValid;

    m_length_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_length_unit_of_measure, json[QString("lengthUnitOfMeasure")]);
    m_length_unit_of_measure_isSet = !json[QString("lengthUnitOfMeasure")].isNull() && m_length_unit_of_measure_isValid;

    m_localized_aspects_isValid = ::OpenAPI::fromJsonValue(m_localized_aspects, json[QString("localizedAspects")]);
    m_localized_aspects_isSet = !json[QString("localizedAspects")].isNull() && m_localized_aspects_isValid;

    m_lot_size_isValid = ::OpenAPI::fromJsonValue(m_lot_size, json[QString("lotSize")]);
    m_lot_size_isSet = !json[QString("lotSize")].isNull() && m_lot_size_isValid;

    m_material_isValid = ::OpenAPI::fromJsonValue(m_material, json[QString("material")]);
    m_material_isSet = !json[QString("material")].isNull() && m_material_isValid;

    m_mpn_isValid = ::OpenAPI::fromJsonValue(m_mpn, json[QString("mpn")]);
    m_mpn_isSet = !json[QString("mpn")].isNull() && m_mpn_isValid;

    m_original_price_currency_isValid = ::OpenAPI::fromJsonValue(m_original_price_currency, json[QString("originalPriceCurrency")]);
    m_original_price_currency_isSet = !json[QString("originalPriceCurrency")].isNull() && m_original_price_currency_isValid;

    m_original_price_value_isValid = ::OpenAPI::fromJsonValue(m_original_price_value, json[QString("originalPriceValue")]);
    m_original_price_value_isSet = !json[QString("originalPriceValue")].isNull() && m_original_price_value_isValid;

    m_package_height_isValid = ::OpenAPI::fromJsonValue(m_package_height, json[QString("packageHeight")]);
    m_package_height_isSet = !json[QString("packageHeight")].isNull() && m_package_height_isValid;

    m_package_length_isValid = ::OpenAPI::fromJsonValue(m_package_length, json[QString("packageLength")]);
    m_package_length_isSet = !json[QString("packageLength")].isNull() && m_package_length_isValid;

    m_package_weight_isValid = ::OpenAPI::fromJsonValue(m_package_weight, json[QString("packageWeight")]);
    m_package_weight_isSet = !json[QString("packageWeight")].isNull() && m_package_weight_isValid;

    m_package_width_isValid = ::OpenAPI::fromJsonValue(m_package_width, json[QString("packageWidth")]);
    m_package_width_isSet = !json[QString("packageWidth")].isNull() && m_package_width_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_price_currency_isValid = ::OpenAPI::fromJsonValue(m_price_currency, json[QString("priceCurrency")]);
    m_price_currency_isSet = !json[QString("priceCurrency")].isNull() && m_price_currency_isValid;

    m_price_value_isValid = ::OpenAPI::fromJsonValue(m_price_value, json[QString("priceValue")]);
    m_price_value_isSet = !json[QString("priceValue")].isNull() && m_price_value_isValid;

    m_primary_item_group_id_isValid = ::OpenAPI::fromJsonValue(m_primary_item_group_id, json[QString("primaryItemGroupId")]);
    m_primary_item_group_id_isSet = !json[QString("primaryItemGroupId")].isNull() && m_primary_item_group_id_isValid;

    m_primary_item_group_type_isValid = ::OpenAPI::fromJsonValue(m_primary_item_group_type, json[QString("primaryItemGroupType")]);
    m_primary_item_group_type_isSet = !json[QString("primaryItemGroupType")].isNull() && m_primary_item_group_type_isValid;

    m_priority_listing_payload_isValid = ::OpenAPI::fromJsonValue(m_priority_listing_payload, json[QString("priorityListingPayload")]);
    m_priority_listing_payload_isSet = !json[QString("priorityListingPayload")].isNull() && m_priority_listing_payload_isValid;

    m_qualified_programs_isValid = ::OpenAPI::fromJsonValue(m_qualified_programs, json[QString("qualifiedPrograms")]);
    m_qualified_programs_isSet = !json[QString("qualifiedPrograms")].isNull() && m_qualified_programs_isValid;

    m_quantity_used_for_estimate_isValid = ::OpenAPI::fromJsonValue(m_quantity_used_for_estimate, json[QString("quantityUsedForEstimate")]);
    m_quantity_used_for_estimate_isSet = !json[QString("quantityUsedForEstimate")].isNull() && m_quantity_used_for_estimate_isValid;

    m_refund_method_isValid = ::OpenAPI::fromJsonValue(m_refund_method, json[QString("refundMethod")]);
    m_refund_method_isSet = !json[QString("refundMethod")].isNull() && m_refund_method_isValid;

    m_repair_score_isValid = ::OpenAPI::fromJsonValue(m_repair_score, json[QString("repairScore")]);
    m_repair_score_isSet = !json[QString("repairScore")].isNull() && m_repair_score_isValid;

    m_return_method_isValid = ::OpenAPI::fromJsonValue(m_return_method, json[QString("returnMethod")]);
    m_return_method_isSet = !json[QString("returnMethod")].isNull() && m_return_method_isValid;

    m_return_period_unit_isValid = ::OpenAPI::fromJsonValue(m_return_period_unit, json[QString("returnPeriodUnit")]);
    m_return_period_unit_isSet = !json[QString("returnPeriodUnit")].isNull() && m_return_period_unit_isValid;

    m_return_period_value_isValid = ::OpenAPI::fromJsonValue(m_return_period_value, json[QString("returnPeriodValue")]);
    m_return_period_value_isSet = !json[QString("returnPeriodValue")].isNull() && m_return_period_value_isValid;

    m_return_shipping_cost_payer_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_cost_payer, json[QString("returnShippingCostPayer")]);
    m_return_shipping_cost_payer_isSet = !json[QString("returnShippingCostPayer")].isNull() && m_return_shipping_cost_payer_isValid;

    m_returns_accepted_isValid = ::OpenAPI::fromJsonValue(m_returns_accepted, json[QString("returnsAccepted")]);
    m_returns_accepted_isSet = !json[QString("returnsAccepted")].isNull() && m_returns_accepted_isValid;

    m_seller_account_type_isValid = ::OpenAPI::fromJsonValue(m_seller_account_type, json[QString("sellerAccountType")]);
    m_seller_account_type_isSet = !json[QString("sellerAccountType")].isNull() && m_seller_account_type_isValid;

    m_seller_feedback_percentage_isValid = ::OpenAPI::fromJsonValue(m_seller_feedback_percentage, json[QString("sellerFeedbackPercentage")]);
    m_seller_feedback_percentage_isSet = !json[QString("sellerFeedbackPercentage")].isNull() && m_seller_feedback_percentage_isValid;

    m_seller_feedback_score_isValid = ::OpenAPI::fromJsonValue(m_seller_feedback_score, json[QString("sellerFeedbackScore")]);
    m_seller_feedback_score_isSet = !json[QString("sellerFeedbackScore")].isNull() && m_seller_feedback_score_isValid;

    m_seller_item_revision_isValid = ::OpenAPI::fromJsonValue(m_seller_item_revision, json[QString("sellerItemRevision")]);
    m_seller_item_revision_isSet = !json[QString("sellerItemRevision")].isNull() && m_seller_item_revision_isValid;

    m_seller_trust_level_isValid = ::OpenAPI::fromJsonValue(m_seller_trust_level, json[QString("sellerTrustLevel")]);
    m_seller_trust_level_isSet = !json[QString("sellerTrustLevel")].isNull() && m_seller_trust_level_isValid;

    m_seller_username_isValid = ::OpenAPI::fromJsonValue(m_seller_username, json[QString("sellerUsername")]);
    m_seller_username_isSet = !json[QString("sellerUsername")].isNull() && m_seller_username_isValid;

    m_ship_to_excluded_regions_isValid = ::OpenAPI::fromJsonValue(m_ship_to_excluded_regions, json[QString("shipToExcludedRegions")]);
    m_ship_to_excluded_regions_isSet = !json[QString("shipToExcludedRegions")].isNull() && m_ship_to_excluded_regions_isValid;

    m_ship_to_included_regions_isValid = ::OpenAPI::fromJsonValue(m_ship_to_included_regions, json[QString("shipToIncludedRegions")]);
    m_ship_to_included_regions_isSet = !json[QString("shipToIncludedRegions")].isNull() && m_ship_to_included_regions_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_cost_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost_type, json[QString("shippingCostType")]);
    m_shipping_cost_type_isSet = !json[QString("shippingCostType")].isNull() && m_shipping_cost_type_isValid;

    m_shipping_service_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_service_code, json[QString("shippingServiceCode")]);
    m_shipping_service_code_isSet = !json[QString("shippingServiceCode")].isNull() && m_shipping_service_code_isValid;

    m_shipping_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_type, json[QString("shippingType")]);
    m_shipping_type_isSet = !json[QString("shippingType")].isNull() && m_shipping_type_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_take_back_policy_description_isValid = ::OpenAPI::fromJsonValue(m_take_back_policy_description, json[QString("takeBackPolicyDescription")]);
    m_take_back_policy_description_isSet = !json[QString("takeBackPolicyDescription")].isNull() && m_take_back_policy_description_isValid;

    m_take_back_policy_label_isValid = ::OpenAPI::fromJsonValue(m_take_back_policy_label, json[QString("takeBackPolicyLabel")]);
    m_take_back_policy_label_isSet = !json[QString("takeBackPolicyLabel")].isNull() && m_take_back_policy_label_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_units_isValid = ::OpenAPI::fromJsonValue(m_total_units, json[QString("totalUnits")]);
    m_total_units_isSet = !json[QString("totalUnits")].isNull() && m_total_units_isValid;

    m_tyre_label_image_url_isValid = ::OpenAPI::fromJsonValue(m_tyre_label_image_url, json[QString("tyreLabelImageUrl")]);
    m_tyre_label_image_url_isSet = !json[QString("tyreLabelImageUrl")].isNull() && m_tyre_label_image_url_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_unit_pricing_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_pricing_measure, json[QString("unitPricingMeasure")]);
    m_unit_pricing_measure_isSet = !json[QString("unitPricingMeasure")].isNull() && m_unit_pricing_measure_isValid;

    m_weight_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_weight_unit_of_measure, json[QString("weightUnitOfMeasure")]);
    m_weight_unit_of_measure_isSet = !json[QString("weightUnitOfMeasure")].isNull() && m_weight_unit_of_measure_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_payment_methods_isSet) {
        obj.insert(QString("acceptedPaymentMethods"), ::OpenAPI::toJsonValue(m_accepted_payment_methods));
    }
    if (m_additional_image_urls_isSet) {
        obj.insert(QString("additionalImageUrls"), ::OpenAPI::toJsonValue(m_additional_image_urls));
    }
    if (m_additional_shipping_cost_per_unit_isSet) {
        obj.insert(QString("additionalShippingCostPerUnit"), ::OpenAPI::toJsonValue(m_additional_shipping_cost_per_unit));
    }
    if (m_age_group_isSet) {
        obj.insert(QString("ageGroup"), ::OpenAPI::toJsonValue(m_age_group));
    }
    if (m_alerts_isSet) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_availability_threshold_isSet) {
        obj.insert(QString("availabilityThreshold"), ::OpenAPI::toJsonValue(m_availability_threshold));
    }
    if (m_availability_threshold_type_isSet) {
        obj.insert(QString("availabilityThresholdType"), ::OpenAPI::toJsonValue(m_availability_threshold_type));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_buying_options_isSet) {
        obj.insert(QString("buyingOptions"), ::OpenAPI::toJsonValue(m_buying_options));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_condition_id_isSet) {
        obj.insert(QString("conditionId"), ::OpenAPI::toJsonValue(m_condition_id));
    }
    if (m_default_image_url_isSet) {
        obj.insert(QString("defaultImageUrl"), ::OpenAPI::toJsonValue(m_default_image_url));
    }
    if (m_delivery_options_isSet) {
        obj.insert(QString("deliveryOptions"), ::OpenAPI::toJsonValue(m_delivery_options));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_percentage_isSet) {
        obj.insert(QString("discountPercentage"), ::OpenAPI::toJsonValue(m_discount_percentage));
    }
    if (m_eco_participation_fee_currency_isSet) {
        obj.insert(QString("ecoParticipationFeeCurrency"), ::OpenAPI::toJsonValue(m_eco_participation_fee_currency));
    }
    if (m_eco_participation_fee_value_isSet) {
        obj.insert(QString("ecoParticipationFeeValue"), ::OpenAPI::toJsonValue(m_eco_participation_fee_value));
    }
    if (m_energy_efficiency_class_isSet) {
        obj.insert(QString("energyEfficiencyClass"), ::OpenAPI::toJsonValue(m_energy_efficiency_class));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_estimated_available_quantity_isSet) {
        obj.insert(QString("estimatedAvailableQuantity"), ::OpenAPI::toJsonValue(m_estimated_available_quantity));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_gtin_isSet) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_hazmat_additional_information_isSet) {
        obj.insert(QString("hazmatAdditionalInformation"), ::OpenAPI::toJsonValue(m_hazmat_additional_information));
    }
    if (m_hazmat_pictogram_descriptions_isSet) {
        obj.insert(QString("hazmatPictogramDescriptions"), ::OpenAPI::toJsonValue(m_hazmat_pictogram_descriptions));
    }
    if (m_hazmat_pictogram_ids_isSet) {
        obj.insert(QString("hazmatPictogramIds"), ::OpenAPI::toJsonValue(m_hazmat_pictogram_ids));
    }
    if (m_hazmat_pictogram_image_urls_isSet) {
        obj.insert(QString("hazmatPictogramImageUrls"), ::OpenAPI::toJsonValue(m_hazmat_pictogram_image_urls));
    }
    if (m_hazmat_signal_word_isSet) {
        obj.insert(QString("hazmatSignalWord"), ::OpenAPI::toJsonValue(m_hazmat_signal_word));
    }
    if (m_hazmat_signal_word_id_isSet) {
        obj.insert(QString("hazmatSignalWordId"), ::OpenAPI::toJsonValue(m_hazmat_signal_word_id));
    }
    if (m_hazmat_statement_descriptions_isSet) {
        obj.insert(QString("hazmatStatementDescriptions"), ::OpenAPI::toJsonValue(m_hazmat_statement_descriptions));
    }
    if (m_hazmat_statement_ids_isSet) {
        obj.insert(QString("hazmatStatementIds"), ::OpenAPI::toJsonValue(m_hazmat_statement_ids));
    }
    if (m_image_altering_prohibited_isSet) {
        obj.insert(QString("imageAlteringProhibited"), ::OpenAPI::toJsonValue(m_image_altering_prohibited));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_inferred_brand_isSet) {
        obj.insert(QString("inferredBrand"), ::OpenAPI::toJsonValue(m_inferred_brand));
    }
    if (m_inferred_epid_isSet) {
        obj.insert(QString("inferredEpid"), ::OpenAPI::toJsonValue(m_inferred_epid));
    }
    if (m_inferred_gtin_isSet) {
        obj.insert(QString("inferredGtin"), ::OpenAPI::toJsonValue(m_inferred_gtin));
    }
    if (m_inferred_localized_aspects_isSet) {
        obj.insert(QString("inferredLocalizedAspects"), ::OpenAPI::toJsonValue(m_inferred_localized_aspects));
    }
    if (m_inferred_mpn_isSet) {
        obj.insert(QString("inferredMpn"), ::OpenAPI::toJsonValue(m_inferred_mpn));
    }
    if (m_item_affiliate_web_url_isSet) {
        obj.insert(QString("itemAffiliateWebUrl"), ::OpenAPI::toJsonValue(m_item_affiliate_web_url));
    }
    if (m_item_creation_date_isSet) {
        obj.insert(QString("itemCreationDate"), ::OpenAPI::toJsonValue(m_item_creation_date));
    }
    if (m_item_end_date_isSet) {
        obj.insert(QString("itemEndDate"), ::OpenAPI::toJsonValue(m_item_end_date));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_location_country_isSet) {
        obj.insert(QString("itemLocationCountry"), ::OpenAPI::toJsonValue(m_item_location_country));
    }
    if (m_item_web_url_isSet) {
        obj.insert(QString("itemWebUrl"), ::OpenAPI::toJsonValue(m_item_web_url));
    }
    if (m_legacy_item_id_isSet) {
        obj.insert(QString("legacyItemId"), ::OpenAPI::toJsonValue(m_legacy_item_id));
    }
    if (m_length_unit_of_measure_isSet) {
        obj.insert(QString("lengthUnitOfMeasure"), ::OpenAPI::toJsonValue(m_length_unit_of_measure));
    }
    if (m_localized_aspects_isSet) {
        obj.insert(QString("localizedAspects"), ::OpenAPI::toJsonValue(m_localized_aspects));
    }
    if (m_lot_size_isSet) {
        obj.insert(QString("lotSize"), ::OpenAPI::toJsonValue(m_lot_size));
    }
    if (m_material_isSet) {
        obj.insert(QString("material"), ::OpenAPI::toJsonValue(m_material));
    }
    if (m_mpn_isSet) {
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(m_mpn));
    }
    if (m_original_price_currency_isSet) {
        obj.insert(QString("originalPriceCurrency"), ::OpenAPI::toJsonValue(m_original_price_currency));
    }
    if (m_original_price_value_isSet) {
        obj.insert(QString("originalPriceValue"), ::OpenAPI::toJsonValue(m_original_price_value));
    }
    if (m_package_height_isSet) {
        obj.insert(QString("packageHeight"), ::OpenAPI::toJsonValue(m_package_height));
    }
    if (m_package_length_isSet) {
        obj.insert(QString("packageLength"), ::OpenAPI::toJsonValue(m_package_length));
    }
    if (m_package_weight_isSet) {
        obj.insert(QString("packageWeight"), ::OpenAPI::toJsonValue(m_package_weight));
    }
    if (m_package_width_isSet) {
        obj.insert(QString("packageWidth"), ::OpenAPI::toJsonValue(m_package_width));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_price_currency_isSet) {
        obj.insert(QString("priceCurrency"), ::OpenAPI::toJsonValue(m_price_currency));
    }
    if (m_price_value_isSet) {
        obj.insert(QString("priceValue"), ::OpenAPI::toJsonValue(m_price_value));
    }
    if (m_primary_item_group_id_isSet) {
        obj.insert(QString("primaryItemGroupId"), ::OpenAPI::toJsonValue(m_primary_item_group_id));
    }
    if (m_primary_item_group_type_isSet) {
        obj.insert(QString("primaryItemGroupType"), ::OpenAPI::toJsonValue(m_primary_item_group_type));
    }
    if (m_priority_listing_payload_isSet) {
        obj.insert(QString("priorityListingPayload"), ::OpenAPI::toJsonValue(m_priority_listing_payload));
    }
    if (m_qualified_programs_isSet) {
        obj.insert(QString("qualifiedPrograms"), ::OpenAPI::toJsonValue(m_qualified_programs));
    }
    if (m_quantity_used_for_estimate_isSet) {
        obj.insert(QString("quantityUsedForEstimate"), ::OpenAPI::toJsonValue(m_quantity_used_for_estimate));
    }
    if (m_refund_method_isSet) {
        obj.insert(QString("refundMethod"), ::OpenAPI::toJsonValue(m_refund_method));
    }
    if (m_repair_score_isSet) {
        obj.insert(QString("repairScore"), ::OpenAPI::toJsonValue(m_repair_score));
    }
    if (m_return_method_isSet) {
        obj.insert(QString("returnMethod"), ::OpenAPI::toJsonValue(m_return_method));
    }
    if (m_return_period_unit_isSet) {
        obj.insert(QString("returnPeriodUnit"), ::OpenAPI::toJsonValue(m_return_period_unit));
    }
    if (m_return_period_value_isSet) {
        obj.insert(QString("returnPeriodValue"), ::OpenAPI::toJsonValue(m_return_period_value));
    }
    if (m_return_shipping_cost_payer_isSet) {
        obj.insert(QString("returnShippingCostPayer"), ::OpenAPI::toJsonValue(m_return_shipping_cost_payer));
    }
    if (m_returns_accepted_isSet) {
        obj.insert(QString("returnsAccepted"), ::OpenAPI::toJsonValue(m_returns_accepted));
    }
    if (m_seller_account_type_isSet) {
        obj.insert(QString("sellerAccountType"), ::OpenAPI::toJsonValue(m_seller_account_type));
    }
    if (m_seller_feedback_percentage_isSet) {
        obj.insert(QString("sellerFeedbackPercentage"), ::OpenAPI::toJsonValue(m_seller_feedback_percentage));
    }
    if (m_seller_feedback_score_isSet) {
        obj.insert(QString("sellerFeedbackScore"), ::OpenAPI::toJsonValue(m_seller_feedback_score));
    }
    if (m_seller_item_revision_isSet) {
        obj.insert(QString("sellerItemRevision"), ::OpenAPI::toJsonValue(m_seller_item_revision));
    }
    if (m_seller_trust_level_isSet) {
        obj.insert(QString("sellerTrustLevel"), ::OpenAPI::toJsonValue(m_seller_trust_level));
    }
    if (m_seller_username_isSet) {
        obj.insert(QString("sellerUsername"), ::OpenAPI::toJsonValue(m_seller_username));
    }
    if (m_ship_to_excluded_regions_isSet) {
        obj.insert(QString("shipToExcludedRegions"), ::OpenAPI::toJsonValue(m_ship_to_excluded_regions));
    }
    if (m_ship_to_included_regions_isSet) {
        obj.insert(QString("shipToIncludedRegions"), ::OpenAPI::toJsonValue(m_ship_to_included_regions));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    if (m_shipping_cost_isSet) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_cost_type_isSet) {
        obj.insert(QString("shippingCostType"), ::OpenAPI::toJsonValue(m_shipping_cost_type));
    }
    if (m_shipping_service_code_isSet) {
        obj.insert(QString("shippingServiceCode"), ::OpenAPI::toJsonValue(m_shipping_service_code));
    }
    if (m_shipping_type_isSet) {
        obj.insert(QString("shippingType"), ::OpenAPI::toJsonValue(m_shipping_type));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_take_back_policy_description_isSet) {
        obj.insert(QString("takeBackPolicyDescription"), ::OpenAPI::toJsonValue(m_take_back_policy_description));
    }
    if (m_take_back_policy_label_isSet) {
        obj.insert(QString("takeBackPolicyLabel"), ::OpenAPI::toJsonValue(m_take_back_policy_label));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_units_isSet) {
        obj.insert(QString("totalUnits"), ::OpenAPI::toJsonValue(m_total_units));
    }
    if (m_tyre_label_image_url_isSet) {
        obj.insert(QString("tyreLabelImageUrl"), ::OpenAPI::toJsonValue(m_tyre_label_image_url));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_pricing_measure_isSet) {
        obj.insert(QString("unitPricingMeasure"), ::OpenAPI::toJsonValue(m_unit_pricing_measure));
    }
    if (m_weight_unit_of_measure_isSet) {
        obj.insert(QString("weightUnitOfMeasure"), ::OpenAPI::toJsonValue(m_weight_unit_of_measure));
    }
    return obj;
}

QString OAIItem::getAcceptedPaymentMethods() const {
    return m_accepted_payment_methods;
}
void OAIItem::setAcceptedPaymentMethods(const QString &accepted_payment_methods) {
    m_accepted_payment_methods = accepted_payment_methods;
    m_accepted_payment_methods_isSet = true;
}

bool OAIItem::is_accepted_payment_methods_Set() const{
    return m_accepted_payment_methods_isSet;
}

bool OAIItem::is_accepted_payment_methods_Valid() const{
    return m_accepted_payment_methods_isValid;
}

QString OAIItem::getAdditionalImageUrls() const {
    return m_additional_image_urls;
}
void OAIItem::setAdditionalImageUrls(const QString &additional_image_urls) {
    m_additional_image_urls = additional_image_urls;
    m_additional_image_urls_isSet = true;
}

bool OAIItem::is_additional_image_urls_Set() const{
    return m_additional_image_urls_isSet;
}

bool OAIItem::is_additional_image_urls_Valid() const{
    return m_additional_image_urls_isValid;
}

QString OAIItem::getAdditionalShippingCostPerUnit() const {
    return m_additional_shipping_cost_per_unit;
}
void OAIItem::setAdditionalShippingCostPerUnit(const QString &additional_shipping_cost_per_unit) {
    m_additional_shipping_cost_per_unit = additional_shipping_cost_per_unit;
    m_additional_shipping_cost_per_unit_isSet = true;
}

bool OAIItem::is_additional_shipping_cost_per_unit_Set() const{
    return m_additional_shipping_cost_per_unit_isSet;
}

bool OAIItem::is_additional_shipping_cost_per_unit_Valid() const{
    return m_additional_shipping_cost_per_unit_isValid;
}

QString OAIItem::getAgeGroup() const {
    return m_age_group;
}
void OAIItem::setAgeGroup(const QString &age_group) {
    m_age_group = age_group;
    m_age_group_isSet = true;
}

bool OAIItem::is_age_group_Set() const{
    return m_age_group_isSet;
}

bool OAIItem::is_age_group_Valid() const{
    return m_age_group_isValid;
}

QString OAIItem::getAlerts() const {
    return m_alerts;
}
void OAIItem::setAlerts(const QString &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIItem::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIItem::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QString OAIItem::getAvailability() const {
    return m_availability;
}
void OAIItem::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIItem::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIItem::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAIItem::getAvailabilityThreshold() const {
    return m_availability_threshold;
}
void OAIItem::setAvailabilityThreshold(const qint32 &availability_threshold) {
    m_availability_threshold = availability_threshold;
    m_availability_threshold_isSet = true;
}

bool OAIItem::is_availability_threshold_Set() const{
    return m_availability_threshold_isSet;
}

bool OAIItem::is_availability_threshold_Valid() const{
    return m_availability_threshold_isValid;
}

QString OAIItem::getAvailabilityThresholdType() const {
    return m_availability_threshold_type;
}
void OAIItem::setAvailabilityThresholdType(const QString &availability_threshold_type) {
    m_availability_threshold_type = availability_threshold_type;
    m_availability_threshold_type_isSet = true;
}

bool OAIItem::is_availability_threshold_type_Set() const{
    return m_availability_threshold_type_isSet;
}

bool OAIItem::is_availability_threshold_type_Valid() const{
    return m_availability_threshold_type_isValid;
}

QString OAIItem::getBrand() const {
    return m_brand;
}
void OAIItem::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIItem::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIItem::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIItem::getBuyingOptions() const {
    return m_buying_options;
}
void OAIItem::setBuyingOptions(const QString &buying_options) {
    m_buying_options = buying_options;
    m_buying_options_isSet = true;
}

bool OAIItem::is_buying_options_Set() const{
    return m_buying_options_isSet;
}

bool OAIItem::is_buying_options_Valid() const{
    return m_buying_options_isValid;
}

QString OAIItem::getCategory() const {
    return m_category;
}
void OAIItem::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIItem::is_category_Set() const{
    return m_category_isSet;
}

bool OAIItem::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIItem::getCategoryId() const {
    return m_category_id;
}
void OAIItem::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIItem::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIItem::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIItem::getColor() const {
    return m_color;
}
void OAIItem::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIItem::is_color_Set() const{
    return m_color_isSet;
}

bool OAIItem::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIItem::getCondition() const {
    return m_condition;
}
void OAIItem::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIItem::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIItem::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIItem::getConditionId() const {
    return m_condition_id;
}
void OAIItem::setConditionId(const QString &condition_id) {
    m_condition_id = condition_id;
    m_condition_id_isSet = true;
}

bool OAIItem::is_condition_id_Set() const{
    return m_condition_id_isSet;
}

bool OAIItem::is_condition_id_Valid() const{
    return m_condition_id_isValid;
}

QString OAIItem::getDefaultImageUrl() const {
    return m_default_image_url;
}
void OAIItem::setDefaultImageUrl(const QString &default_image_url) {
    m_default_image_url = default_image_url;
    m_default_image_url_isSet = true;
}

bool OAIItem::is_default_image_url_Set() const{
    return m_default_image_url_isSet;
}

bool OAIItem::is_default_image_url_Valid() const{
    return m_default_image_url_isValid;
}

QString OAIItem::getDeliveryOptions() const {
    return m_delivery_options;
}
void OAIItem::setDeliveryOptions(const QString &delivery_options) {
    m_delivery_options = delivery_options;
    m_delivery_options_isSet = true;
}

bool OAIItem::is_delivery_options_Set() const{
    return m_delivery_options_isSet;
}

bool OAIItem::is_delivery_options_Valid() const{
    return m_delivery_options_isValid;
}

QString OAIItem::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIItem::setDiscountAmount(const QString &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIItem::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIItem::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAIItem::getDiscountPercentage() const {
    return m_discount_percentage;
}
void OAIItem::setDiscountPercentage(const QString &discount_percentage) {
    m_discount_percentage = discount_percentage;
    m_discount_percentage_isSet = true;
}

bool OAIItem::is_discount_percentage_Set() const{
    return m_discount_percentage_isSet;
}

bool OAIItem::is_discount_percentage_Valid() const{
    return m_discount_percentage_isValid;
}

QString OAIItem::getEcoParticipationFeeCurrency() const {
    return m_eco_participation_fee_currency;
}
void OAIItem::setEcoParticipationFeeCurrency(const QString &eco_participation_fee_currency) {
    m_eco_participation_fee_currency = eco_participation_fee_currency;
    m_eco_participation_fee_currency_isSet = true;
}

bool OAIItem::is_eco_participation_fee_currency_Set() const{
    return m_eco_participation_fee_currency_isSet;
}

bool OAIItem::is_eco_participation_fee_currency_Valid() const{
    return m_eco_participation_fee_currency_isValid;
}

QString OAIItem::getEcoParticipationFeeValue() const {
    return m_eco_participation_fee_value;
}
void OAIItem::setEcoParticipationFeeValue(const QString &eco_participation_fee_value) {
    m_eco_participation_fee_value = eco_participation_fee_value;
    m_eco_participation_fee_value_isSet = true;
}

bool OAIItem::is_eco_participation_fee_value_Set() const{
    return m_eco_participation_fee_value_isSet;
}

bool OAIItem::is_eco_participation_fee_value_Valid() const{
    return m_eco_participation_fee_value_isValid;
}

QString OAIItem::getEnergyEfficiencyClass() const {
    return m_energy_efficiency_class;
}
void OAIItem::setEnergyEfficiencyClass(const QString &energy_efficiency_class) {
    m_energy_efficiency_class = energy_efficiency_class;
    m_energy_efficiency_class_isSet = true;
}

bool OAIItem::is_energy_efficiency_class_Set() const{
    return m_energy_efficiency_class_isSet;
}

bool OAIItem::is_energy_efficiency_class_Valid() const{
    return m_energy_efficiency_class_isValid;
}

QString OAIItem::getEpid() const {
    return m_epid;
}
void OAIItem::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIItem::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIItem::is_epid_Valid() const{
    return m_epid_isValid;
}

qint32 OAIItem::getEstimatedAvailableQuantity() const {
    return m_estimated_available_quantity;
}
void OAIItem::setEstimatedAvailableQuantity(const qint32 &estimated_available_quantity) {
    m_estimated_available_quantity = estimated_available_quantity;
    m_estimated_available_quantity_isSet = true;
}

bool OAIItem::is_estimated_available_quantity_Set() const{
    return m_estimated_available_quantity_isSet;
}

bool OAIItem::is_estimated_available_quantity_Valid() const{
    return m_estimated_available_quantity_isValid;
}

QString OAIItem::getGender() const {
    return m_gender;
}
void OAIItem::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIItem::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIItem::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIItem::getGtin() const {
    return m_gtin;
}
void OAIItem::setGtin(const QString &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIItem::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIItem::is_gtin_Valid() const{
    return m_gtin_isValid;
}

QString OAIItem::getHazmatAdditionalInformation() const {
    return m_hazmat_additional_information;
}
void OAIItem::setHazmatAdditionalInformation(const QString &hazmat_additional_information) {
    m_hazmat_additional_information = hazmat_additional_information;
    m_hazmat_additional_information_isSet = true;
}

bool OAIItem::is_hazmat_additional_information_Set() const{
    return m_hazmat_additional_information_isSet;
}

bool OAIItem::is_hazmat_additional_information_Valid() const{
    return m_hazmat_additional_information_isValid;
}

QString OAIItem::getHazmatPictogramDescriptions() const {
    return m_hazmat_pictogram_descriptions;
}
void OAIItem::setHazmatPictogramDescriptions(const QString &hazmat_pictogram_descriptions) {
    m_hazmat_pictogram_descriptions = hazmat_pictogram_descriptions;
    m_hazmat_pictogram_descriptions_isSet = true;
}

bool OAIItem::is_hazmat_pictogram_descriptions_Set() const{
    return m_hazmat_pictogram_descriptions_isSet;
}

bool OAIItem::is_hazmat_pictogram_descriptions_Valid() const{
    return m_hazmat_pictogram_descriptions_isValid;
}

QString OAIItem::getHazmatPictogramIds() const {
    return m_hazmat_pictogram_ids;
}
void OAIItem::setHazmatPictogramIds(const QString &hazmat_pictogram_ids) {
    m_hazmat_pictogram_ids = hazmat_pictogram_ids;
    m_hazmat_pictogram_ids_isSet = true;
}

bool OAIItem::is_hazmat_pictogram_ids_Set() const{
    return m_hazmat_pictogram_ids_isSet;
}

bool OAIItem::is_hazmat_pictogram_ids_Valid() const{
    return m_hazmat_pictogram_ids_isValid;
}

QString OAIItem::getHazmatPictogramImageUrls() const {
    return m_hazmat_pictogram_image_urls;
}
void OAIItem::setHazmatPictogramImageUrls(const QString &hazmat_pictogram_image_urls) {
    m_hazmat_pictogram_image_urls = hazmat_pictogram_image_urls;
    m_hazmat_pictogram_image_urls_isSet = true;
}

bool OAIItem::is_hazmat_pictogram_image_urls_Set() const{
    return m_hazmat_pictogram_image_urls_isSet;
}

bool OAIItem::is_hazmat_pictogram_image_urls_Valid() const{
    return m_hazmat_pictogram_image_urls_isValid;
}

QString OAIItem::getHazmatSignalWord() const {
    return m_hazmat_signal_word;
}
void OAIItem::setHazmatSignalWord(const QString &hazmat_signal_word) {
    m_hazmat_signal_word = hazmat_signal_word;
    m_hazmat_signal_word_isSet = true;
}

bool OAIItem::is_hazmat_signal_word_Set() const{
    return m_hazmat_signal_word_isSet;
}

bool OAIItem::is_hazmat_signal_word_Valid() const{
    return m_hazmat_signal_word_isValid;
}

QString OAIItem::getHazmatSignalWordId() const {
    return m_hazmat_signal_word_id;
}
void OAIItem::setHazmatSignalWordId(const QString &hazmat_signal_word_id) {
    m_hazmat_signal_word_id = hazmat_signal_word_id;
    m_hazmat_signal_word_id_isSet = true;
}

bool OAIItem::is_hazmat_signal_word_id_Set() const{
    return m_hazmat_signal_word_id_isSet;
}

bool OAIItem::is_hazmat_signal_word_id_Valid() const{
    return m_hazmat_signal_word_id_isValid;
}

QString OAIItem::getHazmatStatementDescriptions() const {
    return m_hazmat_statement_descriptions;
}
void OAIItem::setHazmatStatementDescriptions(const QString &hazmat_statement_descriptions) {
    m_hazmat_statement_descriptions = hazmat_statement_descriptions;
    m_hazmat_statement_descriptions_isSet = true;
}

bool OAIItem::is_hazmat_statement_descriptions_Set() const{
    return m_hazmat_statement_descriptions_isSet;
}

bool OAIItem::is_hazmat_statement_descriptions_Valid() const{
    return m_hazmat_statement_descriptions_isValid;
}

QString OAIItem::getHazmatStatementIds() const {
    return m_hazmat_statement_ids;
}
void OAIItem::setHazmatStatementIds(const QString &hazmat_statement_ids) {
    m_hazmat_statement_ids = hazmat_statement_ids;
    m_hazmat_statement_ids_isSet = true;
}

bool OAIItem::is_hazmat_statement_ids_Set() const{
    return m_hazmat_statement_ids_isSet;
}

bool OAIItem::is_hazmat_statement_ids_Valid() const{
    return m_hazmat_statement_ids_isValid;
}

bool OAIItem::isImageAlteringProhibited() const {
    return m_image_altering_prohibited;
}
void OAIItem::setImageAlteringProhibited(const bool &image_altering_prohibited) {
    m_image_altering_prohibited = image_altering_prohibited;
    m_image_altering_prohibited_isSet = true;
}

bool OAIItem::is_image_altering_prohibited_Set() const{
    return m_image_altering_prohibited_isSet;
}

bool OAIItem::is_image_altering_prohibited_Valid() const{
    return m_image_altering_prohibited_isValid;
}

QString OAIItem::getImageUrl() const {
    return m_image_url;
}
void OAIItem::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIItem::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIItem::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIItem::getInferredBrand() const {
    return m_inferred_brand;
}
void OAIItem::setInferredBrand(const QString &inferred_brand) {
    m_inferred_brand = inferred_brand;
    m_inferred_brand_isSet = true;
}

bool OAIItem::is_inferred_brand_Set() const{
    return m_inferred_brand_isSet;
}

bool OAIItem::is_inferred_brand_Valid() const{
    return m_inferred_brand_isValid;
}

QString OAIItem::getInferredEpid() const {
    return m_inferred_epid;
}
void OAIItem::setInferredEpid(const QString &inferred_epid) {
    m_inferred_epid = inferred_epid;
    m_inferred_epid_isSet = true;
}

bool OAIItem::is_inferred_epid_Set() const{
    return m_inferred_epid_isSet;
}

bool OAIItem::is_inferred_epid_Valid() const{
    return m_inferred_epid_isValid;
}

QString OAIItem::getInferredGtin() const {
    return m_inferred_gtin;
}
void OAIItem::setInferredGtin(const QString &inferred_gtin) {
    m_inferred_gtin = inferred_gtin;
    m_inferred_gtin_isSet = true;
}

bool OAIItem::is_inferred_gtin_Set() const{
    return m_inferred_gtin_isSet;
}

bool OAIItem::is_inferred_gtin_Valid() const{
    return m_inferred_gtin_isValid;
}

QString OAIItem::getInferredLocalizedAspects() const {
    return m_inferred_localized_aspects;
}
void OAIItem::setInferredLocalizedAspects(const QString &inferred_localized_aspects) {
    m_inferred_localized_aspects = inferred_localized_aspects;
    m_inferred_localized_aspects_isSet = true;
}

bool OAIItem::is_inferred_localized_aspects_Set() const{
    return m_inferred_localized_aspects_isSet;
}

bool OAIItem::is_inferred_localized_aspects_Valid() const{
    return m_inferred_localized_aspects_isValid;
}

QString OAIItem::getInferredMpn() const {
    return m_inferred_mpn;
}
void OAIItem::setInferredMpn(const QString &inferred_mpn) {
    m_inferred_mpn = inferred_mpn;
    m_inferred_mpn_isSet = true;
}

bool OAIItem::is_inferred_mpn_Set() const{
    return m_inferred_mpn_isSet;
}

bool OAIItem::is_inferred_mpn_Valid() const{
    return m_inferred_mpn_isValid;
}

QString OAIItem::getItemAffiliateWebUrl() const {
    return m_item_affiliate_web_url;
}
void OAIItem::setItemAffiliateWebUrl(const QString &item_affiliate_web_url) {
    m_item_affiliate_web_url = item_affiliate_web_url;
    m_item_affiliate_web_url_isSet = true;
}

bool OAIItem::is_item_affiliate_web_url_Set() const{
    return m_item_affiliate_web_url_isSet;
}

bool OAIItem::is_item_affiliate_web_url_Valid() const{
    return m_item_affiliate_web_url_isValid;
}

QString OAIItem::getItemCreationDate() const {
    return m_item_creation_date;
}
void OAIItem::setItemCreationDate(const QString &item_creation_date) {
    m_item_creation_date = item_creation_date;
    m_item_creation_date_isSet = true;
}

bool OAIItem::is_item_creation_date_Set() const{
    return m_item_creation_date_isSet;
}

bool OAIItem::is_item_creation_date_Valid() const{
    return m_item_creation_date_isValid;
}

QString OAIItem::getItemEndDate() const {
    return m_item_end_date;
}
void OAIItem::setItemEndDate(const QString &item_end_date) {
    m_item_end_date = item_end_date;
    m_item_end_date_isSet = true;
}

bool OAIItem::is_item_end_date_Set() const{
    return m_item_end_date_isSet;
}

bool OAIItem::is_item_end_date_Valid() const{
    return m_item_end_date_isValid;
}

QString OAIItem::getItemId() const {
    return m_item_id;
}
void OAIItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIItem::getItemLocationCountry() const {
    return m_item_location_country;
}
void OAIItem::setItemLocationCountry(const QString &item_location_country) {
    m_item_location_country = item_location_country;
    m_item_location_country_isSet = true;
}

bool OAIItem::is_item_location_country_Set() const{
    return m_item_location_country_isSet;
}

bool OAIItem::is_item_location_country_Valid() const{
    return m_item_location_country_isValid;
}

QString OAIItem::getItemWebUrl() const {
    return m_item_web_url;
}
void OAIItem::setItemWebUrl(const QString &item_web_url) {
    m_item_web_url = item_web_url;
    m_item_web_url_isSet = true;
}

bool OAIItem::is_item_web_url_Set() const{
    return m_item_web_url_isSet;
}

bool OAIItem::is_item_web_url_Valid() const{
    return m_item_web_url_isValid;
}

QString OAIItem::getLegacyItemId() const {
    return m_legacy_item_id;
}
void OAIItem::setLegacyItemId(const QString &legacy_item_id) {
    m_legacy_item_id = legacy_item_id;
    m_legacy_item_id_isSet = true;
}

bool OAIItem::is_legacy_item_id_Set() const{
    return m_legacy_item_id_isSet;
}

bool OAIItem::is_legacy_item_id_Valid() const{
    return m_legacy_item_id_isValid;
}

QString OAIItem::getLengthUnitOfMeasure() const {
    return m_length_unit_of_measure;
}
void OAIItem::setLengthUnitOfMeasure(const QString &length_unit_of_measure) {
    m_length_unit_of_measure = length_unit_of_measure;
    m_length_unit_of_measure_isSet = true;
}

bool OAIItem::is_length_unit_of_measure_Set() const{
    return m_length_unit_of_measure_isSet;
}

bool OAIItem::is_length_unit_of_measure_Valid() const{
    return m_length_unit_of_measure_isValid;
}

QString OAIItem::getLocalizedAspects() const {
    return m_localized_aspects;
}
void OAIItem::setLocalizedAspects(const QString &localized_aspects) {
    m_localized_aspects = localized_aspects;
    m_localized_aspects_isSet = true;
}

bool OAIItem::is_localized_aspects_Set() const{
    return m_localized_aspects_isSet;
}

bool OAIItem::is_localized_aspects_Valid() const{
    return m_localized_aspects_isValid;
}

qint32 OAIItem::getLotSize() const {
    return m_lot_size;
}
void OAIItem::setLotSize(const qint32 &lot_size) {
    m_lot_size = lot_size;
    m_lot_size_isSet = true;
}

bool OAIItem::is_lot_size_Set() const{
    return m_lot_size_isSet;
}

bool OAIItem::is_lot_size_Valid() const{
    return m_lot_size_isValid;
}

QString OAIItem::getMaterial() const {
    return m_material;
}
void OAIItem::setMaterial(const QString &material) {
    m_material = material;
    m_material_isSet = true;
}

bool OAIItem::is_material_Set() const{
    return m_material_isSet;
}

bool OAIItem::is_material_Valid() const{
    return m_material_isValid;
}

QString OAIItem::getMpn() const {
    return m_mpn;
}
void OAIItem::setMpn(const QString &mpn) {
    m_mpn = mpn;
    m_mpn_isSet = true;
}

bool OAIItem::is_mpn_Set() const{
    return m_mpn_isSet;
}

bool OAIItem::is_mpn_Valid() const{
    return m_mpn_isValid;
}

QString OAIItem::getOriginalPriceCurrency() const {
    return m_original_price_currency;
}
void OAIItem::setOriginalPriceCurrency(const QString &original_price_currency) {
    m_original_price_currency = original_price_currency;
    m_original_price_currency_isSet = true;
}

bool OAIItem::is_original_price_currency_Set() const{
    return m_original_price_currency_isSet;
}

bool OAIItem::is_original_price_currency_Valid() const{
    return m_original_price_currency_isValid;
}

QString OAIItem::getOriginalPriceValue() const {
    return m_original_price_value;
}
void OAIItem::setOriginalPriceValue(const QString &original_price_value) {
    m_original_price_value = original_price_value;
    m_original_price_value_isSet = true;
}

bool OAIItem::is_original_price_value_Set() const{
    return m_original_price_value_isSet;
}

bool OAIItem::is_original_price_value_Valid() const{
    return m_original_price_value_isValid;
}

QString OAIItem::getPackageHeight() const {
    return m_package_height;
}
void OAIItem::setPackageHeight(const QString &package_height) {
    m_package_height = package_height;
    m_package_height_isSet = true;
}

bool OAIItem::is_package_height_Set() const{
    return m_package_height_isSet;
}

bool OAIItem::is_package_height_Valid() const{
    return m_package_height_isValid;
}

QString OAIItem::getPackageLength() const {
    return m_package_length;
}
void OAIItem::setPackageLength(const QString &package_length) {
    m_package_length = package_length;
    m_package_length_isSet = true;
}

bool OAIItem::is_package_length_Set() const{
    return m_package_length_isSet;
}

bool OAIItem::is_package_length_Valid() const{
    return m_package_length_isValid;
}

QString OAIItem::getPackageWeight() const {
    return m_package_weight;
}
void OAIItem::setPackageWeight(const QString &package_weight) {
    m_package_weight = package_weight;
    m_package_weight_isSet = true;
}

bool OAIItem::is_package_weight_Set() const{
    return m_package_weight_isSet;
}

bool OAIItem::is_package_weight_Valid() const{
    return m_package_weight_isValid;
}

QString OAIItem::getPackageWidth() const {
    return m_package_width;
}
void OAIItem::setPackageWidth(const QString &package_width) {
    m_package_width = package_width;
    m_package_width_isSet = true;
}

bool OAIItem::is_package_width_Set() const{
    return m_package_width_isSet;
}

bool OAIItem::is_package_width_Valid() const{
    return m_package_width_isValid;
}

QString OAIItem::getPattern() const {
    return m_pattern;
}
void OAIItem::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIItem::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIItem::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QString OAIItem::getPriceCurrency() const {
    return m_price_currency;
}
void OAIItem::setPriceCurrency(const QString &price_currency) {
    m_price_currency = price_currency;
    m_price_currency_isSet = true;
}

bool OAIItem::is_price_currency_Set() const{
    return m_price_currency_isSet;
}

bool OAIItem::is_price_currency_Valid() const{
    return m_price_currency_isValid;
}

QString OAIItem::getPriceValue() const {
    return m_price_value;
}
void OAIItem::setPriceValue(const QString &price_value) {
    m_price_value = price_value;
    m_price_value_isSet = true;
}

bool OAIItem::is_price_value_Set() const{
    return m_price_value_isSet;
}

bool OAIItem::is_price_value_Valid() const{
    return m_price_value_isValid;
}

QString OAIItem::getPrimaryItemGroupId() const {
    return m_primary_item_group_id;
}
void OAIItem::setPrimaryItemGroupId(const QString &primary_item_group_id) {
    m_primary_item_group_id = primary_item_group_id;
    m_primary_item_group_id_isSet = true;
}

bool OAIItem::is_primary_item_group_id_Set() const{
    return m_primary_item_group_id_isSet;
}

bool OAIItem::is_primary_item_group_id_Valid() const{
    return m_primary_item_group_id_isValid;
}

QString OAIItem::getPrimaryItemGroupType() const {
    return m_primary_item_group_type;
}
void OAIItem::setPrimaryItemGroupType(const QString &primary_item_group_type) {
    m_primary_item_group_type = primary_item_group_type;
    m_primary_item_group_type_isSet = true;
}

bool OAIItem::is_primary_item_group_type_Set() const{
    return m_primary_item_group_type_isSet;
}

bool OAIItem::is_primary_item_group_type_Valid() const{
    return m_primary_item_group_type_isValid;
}

QString OAIItem::getPriorityListingPayload() const {
    return m_priority_listing_payload;
}
void OAIItem::setPriorityListingPayload(const QString &priority_listing_payload) {
    m_priority_listing_payload = priority_listing_payload;
    m_priority_listing_payload_isSet = true;
}

bool OAIItem::is_priority_listing_payload_Set() const{
    return m_priority_listing_payload_isSet;
}

bool OAIItem::is_priority_listing_payload_Valid() const{
    return m_priority_listing_payload_isValid;
}

QString OAIItem::getQualifiedPrograms() const {
    return m_qualified_programs;
}
void OAIItem::setQualifiedPrograms(const QString &qualified_programs) {
    m_qualified_programs = qualified_programs;
    m_qualified_programs_isSet = true;
}

bool OAIItem::is_qualified_programs_Set() const{
    return m_qualified_programs_isSet;
}

bool OAIItem::is_qualified_programs_Valid() const{
    return m_qualified_programs_isValid;
}

qint32 OAIItem::getQuantityUsedForEstimate() const {
    return m_quantity_used_for_estimate;
}
void OAIItem::setQuantityUsedForEstimate(const qint32 &quantity_used_for_estimate) {
    m_quantity_used_for_estimate = quantity_used_for_estimate;
    m_quantity_used_for_estimate_isSet = true;
}

bool OAIItem::is_quantity_used_for_estimate_Set() const{
    return m_quantity_used_for_estimate_isSet;
}

bool OAIItem::is_quantity_used_for_estimate_Valid() const{
    return m_quantity_used_for_estimate_isValid;
}

QString OAIItem::getRefundMethod() const {
    return m_refund_method;
}
void OAIItem::setRefundMethod(const QString &refund_method) {
    m_refund_method = refund_method;
    m_refund_method_isSet = true;
}

bool OAIItem::is_refund_method_Set() const{
    return m_refund_method_isSet;
}

bool OAIItem::is_refund_method_Valid() const{
    return m_refund_method_isValid;
}

QString OAIItem::getRepairScore() const {
    return m_repair_score;
}
void OAIItem::setRepairScore(const QString &repair_score) {
    m_repair_score = repair_score;
    m_repair_score_isSet = true;
}

bool OAIItem::is_repair_score_Set() const{
    return m_repair_score_isSet;
}

bool OAIItem::is_repair_score_Valid() const{
    return m_repair_score_isValid;
}

QString OAIItem::getReturnMethod() const {
    return m_return_method;
}
void OAIItem::setReturnMethod(const QString &return_method) {
    m_return_method = return_method;
    m_return_method_isSet = true;
}

bool OAIItem::is_return_method_Set() const{
    return m_return_method_isSet;
}

bool OAIItem::is_return_method_Valid() const{
    return m_return_method_isValid;
}

QString OAIItem::getReturnPeriodUnit() const {
    return m_return_period_unit;
}
void OAIItem::setReturnPeriodUnit(const QString &return_period_unit) {
    m_return_period_unit = return_period_unit;
    m_return_period_unit_isSet = true;
}

bool OAIItem::is_return_period_unit_Set() const{
    return m_return_period_unit_isSet;
}

bool OAIItem::is_return_period_unit_Valid() const{
    return m_return_period_unit_isValid;
}

qint32 OAIItem::getReturnPeriodValue() const {
    return m_return_period_value;
}
void OAIItem::setReturnPeriodValue(const qint32 &return_period_value) {
    m_return_period_value = return_period_value;
    m_return_period_value_isSet = true;
}

bool OAIItem::is_return_period_value_Set() const{
    return m_return_period_value_isSet;
}

bool OAIItem::is_return_period_value_Valid() const{
    return m_return_period_value_isValid;
}

QString OAIItem::getReturnShippingCostPayer() const {
    return m_return_shipping_cost_payer;
}
void OAIItem::setReturnShippingCostPayer(const QString &return_shipping_cost_payer) {
    m_return_shipping_cost_payer = return_shipping_cost_payer;
    m_return_shipping_cost_payer_isSet = true;
}

bool OAIItem::is_return_shipping_cost_payer_Set() const{
    return m_return_shipping_cost_payer_isSet;
}

bool OAIItem::is_return_shipping_cost_payer_Valid() const{
    return m_return_shipping_cost_payer_isValid;
}

bool OAIItem::isReturnsAccepted() const {
    return m_returns_accepted;
}
void OAIItem::setReturnsAccepted(const bool &returns_accepted) {
    m_returns_accepted = returns_accepted;
    m_returns_accepted_isSet = true;
}

bool OAIItem::is_returns_accepted_Set() const{
    return m_returns_accepted_isSet;
}

bool OAIItem::is_returns_accepted_Valid() const{
    return m_returns_accepted_isValid;
}

QString OAIItem::getSellerAccountType() const {
    return m_seller_account_type;
}
void OAIItem::setSellerAccountType(const QString &seller_account_type) {
    m_seller_account_type = seller_account_type;
    m_seller_account_type_isSet = true;
}

bool OAIItem::is_seller_account_type_Set() const{
    return m_seller_account_type_isSet;
}

bool OAIItem::is_seller_account_type_Valid() const{
    return m_seller_account_type_isValid;
}

QString OAIItem::getSellerFeedbackPercentage() const {
    return m_seller_feedback_percentage;
}
void OAIItem::setSellerFeedbackPercentage(const QString &seller_feedback_percentage) {
    m_seller_feedback_percentage = seller_feedback_percentage;
    m_seller_feedback_percentage_isSet = true;
}

bool OAIItem::is_seller_feedback_percentage_Set() const{
    return m_seller_feedback_percentage_isSet;
}

bool OAIItem::is_seller_feedback_percentage_Valid() const{
    return m_seller_feedback_percentage_isValid;
}

QString OAIItem::getSellerFeedbackScore() const {
    return m_seller_feedback_score;
}
void OAIItem::setSellerFeedbackScore(const QString &seller_feedback_score) {
    m_seller_feedback_score = seller_feedback_score;
    m_seller_feedback_score_isSet = true;
}

bool OAIItem::is_seller_feedback_score_Set() const{
    return m_seller_feedback_score_isSet;
}

bool OAIItem::is_seller_feedback_score_Valid() const{
    return m_seller_feedback_score_isValid;
}

QString OAIItem::getSellerItemRevision() const {
    return m_seller_item_revision;
}
void OAIItem::setSellerItemRevision(const QString &seller_item_revision) {
    m_seller_item_revision = seller_item_revision;
    m_seller_item_revision_isSet = true;
}

bool OAIItem::is_seller_item_revision_Set() const{
    return m_seller_item_revision_isSet;
}

bool OAIItem::is_seller_item_revision_Valid() const{
    return m_seller_item_revision_isValid;
}

QString OAIItem::getSellerTrustLevel() const {
    return m_seller_trust_level;
}
void OAIItem::setSellerTrustLevel(const QString &seller_trust_level) {
    m_seller_trust_level = seller_trust_level;
    m_seller_trust_level_isSet = true;
}

bool OAIItem::is_seller_trust_level_Set() const{
    return m_seller_trust_level_isSet;
}

bool OAIItem::is_seller_trust_level_Valid() const{
    return m_seller_trust_level_isValid;
}

QString OAIItem::getSellerUsername() const {
    return m_seller_username;
}
void OAIItem::setSellerUsername(const QString &seller_username) {
    m_seller_username = seller_username;
    m_seller_username_isSet = true;
}

bool OAIItem::is_seller_username_Set() const{
    return m_seller_username_isSet;
}

bool OAIItem::is_seller_username_Valid() const{
    return m_seller_username_isValid;
}

QString OAIItem::getShipToExcludedRegions() const {
    return m_ship_to_excluded_regions;
}
void OAIItem::setShipToExcludedRegions(const QString &ship_to_excluded_regions) {
    m_ship_to_excluded_regions = ship_to_excluded_regions;
    m_ship_to_excluded_regions_isSet = true;
}

bool OAIItem::is_ship_to_excluded_regions_Set() const{
    return m_ship_to_excluded_regions_isSet;
}

bool OAIItem::is_ship_to_excluded_regions_Valid() const{
    return m_ship_to_excluded_regions_isValid;
}

QString OAIItem::getShipToIncludedRegions() const {
    return m_ship_to_included_regions;
}
void OAIItem::setShipToIncludedRegions(const QString &ship_to_included_regions) {
    m_ship_to_included_regions = ship_to_included_regions;
    m_ship_to_included_regions_isSet = true;
}

bool OAIItem::is_ship_to_included_regions_Set() const{
    return m_ship_to_included_regions_isSet;
}

bool OAIItem::is_ship_to_included_regions_Valid() const{
    return m_ship_to_included_regions_isValid;
}

QString OAIItem::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIItem::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIItem::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIItem::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

QString OAIItem::getShippingCost() const {
    return m_shipping_cost;
}
void OAIItem::setShippingCost(const QString &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIItem::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIItem::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIItem::getShippingCostType() const {
    return m_shipping_cost_type;
}
void OAIItem::setShippingCostType(const QString &shipping_cost_type) {
    m_shipping_cost_type = shipping_cost_type;
    m_shipping_cost_type_isSet = true;
}

bool OAIItem::is_shipping_cost_type_Set() const{
    return m_shipping_cost_type_isSet;
}

bool OAIItem::is_shipping_cost_type_Valid() const{
    return m_shipping_cost_type_isValid;
}

QString OAIItem::getShippingServiceCode() const {
    return m_shipping_service_code;
}
void OAIItem::setShippingServiceCode(const QString &shipping_service_code) {
    m_shipping_service_code = shipping_service_code;
    m_shipping_service_code_isSet = true;
}

bool OAIItem::is_shipping_service_code_Set() const{
    return m_shipping_service_code_isSet;
}

bool OAIItem::is_shipping_service_code_Valid() const{
    return m_shipping_service_code_isValid;
}

QString OAIItem::getShippingType() const {
    return m_shipping_type;
}
void OAIItem::setShippingType(const QString &shipping_type) {
    m_shipping_type = shipping_type;
    m_shipping_type_isSet = true;
}

bool OAIItem::is_shipping_type_Set() const{
    return m_shipping_type_isSet;
}

bool OAIItem::is_shipping_type_Valid() const{
    return m_shipping_type_isValid;
}

QString OAIItem::getSize() const {
    return m_size;
}
void OAIItem::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIItem::is_size_Set() const{
    return m_size_isSet;
}

bool OAIItem::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIItem::getTakeBackPolicyDescription() const {
    return m_take_back_policy_description;
}
void OAIItem::setTakeBackPolicyDescription(const QString &take_back_policy_description) {
    m_take_back_policy_description = take_back_policy_description;
    m_take_back_policy_description_isSet = true;
}

bool OAIItem::is_take_back_policy_description_Set() const{
    return m_take_back_policy_description_isSet;
}

bool OAIItem::is_take_back_policy_description_Valid() const{
    return m_take_back_policy_description_isValid;
}

QString OAIItem::getTakeBackPolicyLabel() const {
    return m_take_back_policy_label;
}
void OAIItem::setTakeBackPolicyLabel(const QString &take_back_policy_label) {
    m_take_back_policy_label = take_back_policy_label;
    m_take_back_policy_label_isSet = true;
}

bool OAIItem::is_take_back_policy_label_Set() const{
    return m_take_back_policy_label_isSet;
}

bool OAIItem::is_take_back_policy_label_Valid() const{
    return m_take_back_policy_label_isValid;
}

QString OAIItem::getTitle() const {
    return m_title;
}
void OAIItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItem::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIItem::getTotalUnits() const {
    return m_total_units;
}
void OAIItem::setTotalUnits(const QString &total_units) {
    m_total_units = total_units;
    m_total_units_isSet = true;
}

bool OAIItem::is_total_units_Set() const{
    return m_total_units_isSet;
}

bool OAIItem::is_total_units_Valid() const{
    return m_total_units_isValid;
}

QString OAIItem::getTyreLabelImageUrl() const {
    return m_tyre_label_image_url;
}
void OAIItem::setTyreLabelImageUrl(const QString &tyre_label_image_url) {
    m_tyre_label_image_url = tyre_label_image_url;
    m_tyre_label_image_url_isSet = true;
}

bool OAIItem::is_tyre_label_image_url_Set() const{
    return m_tyre_label_image_url_isSet;
}

bool OAIItem::is_tyre_label_image_url_Valid() const{
    return m_tyre_label_image_url_isValid;
}

QString OAIItem::getUnitPrice() const {
    return m_unit_price;
}
void OAIItem::setUnitPrice(const QString &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIItem::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIItem::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

QString OAIItem::getUnitPricingMeasure() const {
    return m_unit_pricing_measure;
}
void OAIItem::setUnitPricingMeasure(const QString &unit_pricing_measure) {
    m_unit_pricing_measure = unit_pricing_measure;
    m_unit_pricing_measure_isSet = true;
}

bool OAIItem::is_unit_pricing_measure_Set() const{
    return m_unit_pricing_measure_isSet;
}

bool OAIItem::is_unit_pricing_measure_Valid() const{
    return m_unit_pricing_measure_isValid;
}

QString OAIItem::getWeightUnitOfMeasure() const {
    return m_weight_unit_of_measure;
}
void OAIItem::setWeightUnitOfMeasure(const QString &weight_unit_of_measure) {
    m_weight_unit_of_measure = weight_unit_of_measure;
    m_weight_unit_of_measure_isSet = true;
}

bool OAIItem::is_weight_unit_of_measure_Set() const{
    return m_weight_unit_of_measure_isSet;
}

bool OAIItem::is_weight_unit_of_measure_Valid() const{
    return m_weight_unit_of_measure_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_payment_methods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_image_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_shipping_cost_per_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_threshold_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buying_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_participation_fee_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_participation_fee_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficiency_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_pictogram_descriptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_pictogram_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_pictogram_image_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_signal_word_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_signal_word_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_statement_descriptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hazmat_statement_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_altering_prohibited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_gtin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_localized_aspects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_mpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_affiliate_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_location_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_aspects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_price_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_price_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_listing_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_programs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_used_for_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_period_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_period_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_cost_payer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returns_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_feedback_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_feedback_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_item_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_excluded_regions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_included_regions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_back_policy_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_back_policy_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tyre_label_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_pricing_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
