/**
 * Item Feed Service
 * <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited \" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\"api-docs/buy/static/buy-requirements.html\" target=\"_blank\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\"https://github.com/eBay/FeedSDK \" target=\"_blank\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>
 *
 * The version of the OpenAPI document: v1_beta.34.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemGroup::OAIItemGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemGroup::OAIItemGroup() {
    this->initializeModel();
}

OAIItemGroup::~OAIItemGroup() {}

void OAIItemGroup::initializeModel() {

    m_additional_image_urls_isSet = false;
    m_additional_image_urls_isValid = false;

    m_image_altering_prohibited_isSet = false;
    m_image_altering_prohibited_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_item_group_id_isSet = false;
    m_item_group_id_isValid = false;

    m_item_group_type_isSet = false;
    m_item_group_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_varies_by_localized_aspects_isSet = false;
    m_varies_by_localized_aspects_isValid = false;
}

void OAIItemGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemGroup::fromJsonObject(QJsonObject json) {

    m_additional_image_urls_isValid = ::OpenAPI::fromJsonValue(m_additional_image_urls, json[QString("additionalImageUrls")]);
    m_additional_image_urls_isSet = !json[QString("additionalImageUrls")].isNull() && m_additional_image_urls_isValid;

    m_image_altering_prohibited_isValid = ::OpenAPI::fromJsonValue(m_image_altering_prohibited, json[QString("imageAlteringProhibited")]);
    m_image_altering_prohibited_isSet = !json[QString("imageAlteringProhibited")].isNull() && m_image_altering_prohibited_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_item_group_id_isValid = ::OpenAPI::fromJsonValue(m_item_group_id, json[QString("itemGroupId")]);
    m_item_group_id_isSet = !json[QString("itemGroupId")].isNull() && m_item_group_id_isValid;

    m_item_group_type_isValid = ::OpenAPI::fromJsonValue(m_item_group_type, json[QString("itemGroupType")]);
    m_item_group_type_isSet = !json[QString("itemGroupType")].isNull() && m_item_group_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_varies_by_localized_aspects_isValid = ::OpenAPI::fromJsonValue(m_varies_by_localized_aspects, json[QString("variesByLocalizedAspects")]);
    m_varies_by_localized_aspects_isSet = !json[QString("variesByLocalizedAspects")].isNull() && m_varies_by_localized_aspects_isValid;
}

QString OAIItemGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_image_urls_isSet) {
        obj.insert(QString("additionalImageUrls"), ::OpenAPI::toJsonValue(m_additional_image_urls));
    }
    if (m_image_altering_prohibited_isSet) {
        obj.insert(QString("imageAlteringProhibited"), ::OpenAPI::toJsonValue(m_image_altering_prohibited));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_item_group_id_isSet) {
        obj.insert(QString("itemGroupId"), ::OpenAPI::toJsonValue(m_item_group_id));
    }
    if (m_item_group_type_isSet) {
        obj.insert(QString("itemGroupType"), ::OpenAPI::toJsonValue(m_item_group_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_varies_by_localized_aspects_isSet) {
        obj.insert(QString("variesByLocalizedAspects"), ::OpenAPI::toJsonValue(m_varies_by_localized_aspects));
    }
    return obj;
}

QString OAIItemGroup::getAdditionalImageUrls() const {
    return m_additional_image_urls;
}
void OAIItemGroup::setAdditionalImageUrls(const QString &additional_image_urls) {
    m_additional_image_urls = additional_image_urls;
    m_additional_image_urls_isSet = true;
}

bool OAIItemGroup::is_additional_image_urls_Set() const{
    return m_additional_image_urls_isSet;
}

bool OAIItemGroup::is_additional_image_urls_Valid() const{
    return m_additional_image_urls_isValid;
}

bool OAIItemGroup::isImageAlteringProhibited() const {
    return m_image_altering_prohibited;
}
void OAIItemGroup::setImageAlteringProhibited(const bool &image_altering_prohibited) {
    m_image_altering_prohibited = image_altering_prohibited;
    m_image_altering_prohibited_isSet = true;
}

bool OAIItemGroup::is_image_altering_prohibited_Set() const{
    return m_image_altering_prohibited_isSet;
}

bool OAIItemGroup::is_image_altering_prohibited_Valid() const{
    return m_image_altering_prohibited_isValid;
}

QString OAIItemGroup::getImageUrl() const {
    return m_image_url;
}
void OAIItemGroup::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIItemGroup::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIItemGroup::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIItemGroup::getItemGroupId() const {
    return m_item_group_id;
}
void OAIItemGroup::setItemGroupId(const QString &item_group_id) {
    m_item_group_id = item_group_id;
    m_item_group_id_isSet = true;
}

bool OAIItemGroup::is_item_group_id_Set() const{
    return m_item_group_id_isSet;
}

bool OAIItemGroup::is_item_group_id_Valid() const{
    return m_item_group_id_isValid;
}

QString OAIItemGroup::getItemGroupType() const {
    return m_item_group_type;
}
void OAIItemGroup::setItemGroupType(const QString &item_group_type) {
    m_item_group_type = item_group_type;
    m_item_group_type_isSet = true;
}

bool OAIItemGroup::is_item_group_type_Set() const{
    return m_item_group_type_isSet;
}

bool OAIItemGroup::is_item_group_type_Valid() const{
    return m_item_group_type_isValid;
}

QString OAIItemGroup::getTitle() const {
    return m_title;
}
void OAIItemGroup::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItemGroup::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItemGroup::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIItemGroup::getVariesByLocalizedAspects() const {
    return m_varies_by_localized_aspects;
}
void OAIItemGroup::setVariesByLocalizedAspects(const QString &varies_by_localized_aspects) {
    m_varies_by_localized_aspects = varies_by_localized_aspects;
    m_varies_by_localized_aspects_isSet = true;
}

bool OAIItemGroup::is_varies_by_localized_aspects_Set() const{
    return m_varies_by_localized_aspects_isSet;
}

bool OAIItemGroup::is_varies_by_localized_aspects_Valid() const{
    return m_varies_by_localized_aspects_isValid;
}

bool OAIItemGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_image_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_altering_prohibited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_varies_by_localized_aspects_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
