/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about the eBay programs under which a line item was listed and sold.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItemProperties {
  public static final String SERIALIZED_NAME_BUYER_PROTECTION = "buyerProtection";
  @SerializedName(SERIALIZED_NAME_BUYER_PROTECTION)
  private Boolean buyerProtection;

  public static final String SERIALIZED_NAME_FROM_BEST_OFFER = "fromBestOffer";
  @SerializedName(SERIALIZED_NAME_FROM_BEST_OFFER)
  private Boolean fromBestOffer;

  public static final String SERIALIZED_NAME_SOLD_VIA_AD_CAMPAIGN = "soldViaAdCampaign";
  @SerializedName(SERIALIZED_NAME_SOLD_VIA_AD_CAMPAIGN)
  private Boolean soldViaAdCampaign;

  public LineItemProperties() {
  }

  public LineItemProperties buyerProtection(Boolean buyerProtection) {
    this.buyerProtection = buyerProtection;
    return this;
  }

  /**
   * A value of &lt;code&gt;true&lt;/code&gt; indicates that the line item is covered by eBay&#39;s Buyer Protection program.
   * @return buyerProtection
   */
  @javax.annotation.Nullable
  public Boolean getBuyerProtection() {
    return buyerProtection;
  }

  public void setBuyerProtection(Boolean buyerProtection) {
    this.buyerProtection = buyerProtection;
  }


  public LineItemProperties fromBestOffer(Boolean fromBestOffer) {
    this.fromBestOffer = fromBestOffer;
    return this;
  }

  /**
   * This field is only returned if &lt;code&gt;true&lt;/code&gt; and indicates that the purchase occurred by the buyer and seller mutually agreeing on a Best Offer amount. The Best Offer feature can be set up for any listing type, but if this feature is set up for an auction listing, it will no longer be available once a bid has been placed on the listing.
   * @return fromBestOffer
   */
  @javax.annotation.Nullable
  public Boolean getFromBestOffer() {
    return fromBestOffer;
  }

  public void setFromBestOffer(Boolean fromBestOffer) {
    this.fromBestOffer = fromBestOffer;
  }


  public LineItemProperties soldViaAdCampaign(Boolean soldViaAdCampaign) {
    this.soldViaAdCampaign = soldViaAdCampaign;
    return this;
  }

  /**
   * This field is only returned if &lt;code&gt;true&lt;/code&gt; and indicates that the line item was sold as a result of a seller&#39;s ad campaign.
   * @return soldViaAdCampaign
   */
  @javax.annotation.Nullable
  public Boolean getSoldViaAdCampaign() {
    return soldViaAdCampaign;
  }

  public void setSoldViaAdCampaign(Boolean soldViaAdCampaign) {
    this.soldViaAdCampaign = soldViaAdCampaign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemProperties lineItemProperties = (LineItemProperties) o;
    return Objects.equals(this.buyerProtection, lineItemProperties.buyerProtection) &&
        Objects.equals(this.fromBestOffer, lineItemProperties.fromBestOffer) &&
        Objects.equals(this.soldViaAdCampaign, lineItemProperties.soldViaAdCampaign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyerProtection, fromBestOffer, soldViaAdCampaign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemProperties {\n");
    sb.append("    buyerProtection: ").append(toIndentedString(buyerProtection)).append("\n");
    sb.append("    fromBestOffer: ").append(toIndentedString(fromBestOffer)).append("\n");
    sb.append("    soldViaAdCampaign: ").append(toIndentedString(soldViaAdCampaign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyerProtection");
    openapiFields.add("fromBestOffer");
    openapiFields.add("soldViaAdCampaign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItemProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItemProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemProperties is not found in the empty JSON string", LineItemProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItemProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemProperties>() {
           @Override
           public void write(JsonWriter out, LineItemProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItemProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItemProperties
   * @throws IOException if the JSON string is invalid with respect to LineItemProperties
   */
  public static LineItemProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemProperties.class);
  }

  /**
   * Convert an instance of LineItemProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

