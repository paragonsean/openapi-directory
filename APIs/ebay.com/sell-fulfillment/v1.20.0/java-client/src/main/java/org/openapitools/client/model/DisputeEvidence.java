/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileInfo;
import org.openapitools.client.model.OrderLineItems;
import org.openapitools.client.model.TrackingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;strong&gt;evidence&lt;/strong&gt; array that is returned in the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; response if one or more evidential documents are associated with the payment dispute. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisputeEvidence {
  public static final String SERIALIZED_NAME_EVIDENCE_ID = "evidenceId";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_ID)
  private String evidenceId;

  public static final String SERIALIZED_NAME_EVIDENCE_TYPE = "evidenceType";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_TYPE)
  private String evidenceType;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<FileInfo> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderLineItems> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDED_DATE = "providedDate";
  @SerializedName(SERIALIZED_NAME_PROVIDED_DATE)
  private String providedDate;

  public static final String SERIALIZED_NAME_REQUEST_DATE = "requestDate";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATE)
  private String requestDate;

  public static final String SERIALIZED_NAME_RESPOND_BY_DATE = "respondByDate";
  @SerializedName(SERIALIZED_NAME_RESPOND_BY_DATE)
  private String respondByDate;

  public static final String SERIALIZED_NAME_SHIPMENT_TRACKING = "shipmentTracking";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TRACKING)
  private List<TrackingInfo> shipmentTracking = new ArrayList<>();

  public DisputeEvidence() {
  }

  public DisputeEvidence evidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
    return this;
  }

  /**
   * Unique identifier of the evidential file set. Potentially, each evidential file set can have more than one file, that is why there is this file set identifier, and then an identifier for each file within this file set.
   * @return evidenceId
   */
  @javax.annotation.Nullable
  public String getEvidenceId() {
    return evidenceId;
  }

  public void setEvidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
  }


  public DisputeEvidence evidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
    return this;
  }

  /**
   * This enumeration value shows the type of evidential file provided. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return evidenceType
   */
  @javax.annotation.Nullable
  public String getEvidenceType() {
    return evidenceType;
  }

  public void setEvidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
  }


  public DisputeEvidence files(List<FileInfo> files) {
    this.files = files;
    return this;
  }

  public DisputeEvidence addFilesItem(FileInfo filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * This array shows the name, ID, file type, and upload date for each provided file.
   * @return files
   */
  @javax.annotation.Nullable
  public List<FileInfo> getFiles() {
    return files;
  }

  public void setFiles(List<FileInfo> files) {
    this.files = files;
  }


  public DisputeEvidence lineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public DisputeEvidence addLineItemsItem(OrderLineItems lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * This array shows one or more order line items associated with the evidential document that has been provided.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItems> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
  }


  public DisputeEvidence providedDate(String providedDate) {
    this.providedDate = providedDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the seller provided a requested evidential document to eBay. &lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return providedDate
   */
  @javax.annotation.Nullable
  public String getProvidedDate() {
    return providedDate;
  }

  public void setProvidedDate(String providedDate) {
    this.providedDate = providedDate;
  }


  public DisputeEvidence requestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when eBay requested the evidential document from the seller in response to a payment dispute. &lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return requestDate
   */
  @javax.annotation.Nullable
  public String getRequestDate() {
    return requestDate;
  }

  public void setRequestDate(String requestDate) {
    this.requestDate = requestDate;
  }


  public DisputeEvidence respondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the seller was expected to provide a requested evidential document to eBay.  &lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return respondByDate
   */
  @javax.annotation.Nullable
  public String getRespondByDate() {
    return respondByDate;
  }

  public void setRespondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
  }


  public DisputeEvidence shipmentTracking(List<TrackingInfo> shipmentTracking) {
    this.shipmentTracking = shipmentTracking;
    return this;
  }

  public DisputeEvidence addShipmentTrackingItem(TrackingInfo shipmentTrackingItem) {
    if (this.shipmentTracking == null) {
      this.shipmentTracking = new ArrayList<>();
    }
    this.shipmentTracking.add(shipmentTrackingItem);
    return this;
  }

  /**
   * This array shows the shipping carrier and shipment tracking number associated with each shipment package of the order. This array is returned under the &lt;strong&gt;evidence&lt;/strong&gt; container if the seller has provided shipment tracking information as evidence to support &lt;code&gt;PROOF_OF_DELIVERY&lt;/code&gt; for an INR-related payment dispute.
   * @return shipmentTracking
   */
  @javax.annotation.Nullable
  public List<TrackingInfo> getShipmentTracking() {
    return shipmentTracking;
  }

  public void setShipmentTracking(List<TrackingInfo> shipmentTracking) {
    this.shipmentTracking = shipmentTracking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisputeEvidence disputeEvidence = (DisputeEvidence) o;
    return Objects.equals(this.evidenceId, disputeEvidence.evidenceId) &&
        Objects.equals(this.evidenceType, disputeEvidence.evidenceType) &&
        Objects.equals(this.files, disputeEvidence.files) &&
        Objects.equals(this.lineItems, disputeEvidence.lineItems) &&
        Objects.equals(this.providedDate, disputeEvidence.providedDate) &&
        Objects.equals(this.requestDate, disputeEvidence.requestDate) &&
        Objects.equals(this.respondByDate, disputeEvidence.respondByDate) &&
        Objects.equals(this.shipmentTracking, disputeEvidence.shipmentTracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidenceId, evidenceType, files, lineItems, providedDate, requestDate, respondByDate, shipmentTracking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisputeEvidence {\n");
    sb.append("    evidenceId: ").append(toIndentedString(evidenceId)).append("\n");
    sb.append("    evidenceType: ").append(toIndentedString(evidenceType)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    providedDate: ").append(toIndentedString(providedDate)).append("\n");
    sb.append("    requestDate: ").append(toIndentedString(requestDate)).append("\n");
    sb.append("    respondByDate: ").append(toIndentedString(respondByDate)).append("\n");
    sb.append("    shipmentTracking: ").append(toIndentedString(shipmentTracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evidenceId");
    openapiFields.add("evidenceType");
    openapiFields.add("files");
    openapiFields.add("lineItems");
    openapiFields.add("providedDate");
    openapiFields.add("requestDate");
    openapiFields.add("respondByDate");
    openapiFields.add("shipmentTracking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisputeEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisputeEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisputeEvidence is not found in the empty JSON string", DisputeEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisputeEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisputeEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evidenceId") != null && !jsonObj.get("evidenceId").isJsonNull()) && !jsonObj.get("evidenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceId").toString()));
      }
      if ((jsonObj.get("evidenceType") != null && !jsonObj.get("evidenceType").isJsonNull()) && !jsonObj.get("evidenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceType").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            FileInfo.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItems.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("providedDate") != null && !jsonObj.get("providedDate").isJsonNull()) && !jsonObj.get("providedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providedDate").toString()));
      }
      if ((jsonObj.get("requestDate") != null && !jsonObj.get("requestDate").isJsonNull()) && !jsonObj.get("requestDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestDate").toString()));
      }
      if ((jsonObj.get("respondByDate") != null && !jsonObj.get("respondByDate").isJsonNull()) && !jsonObj.get("respondByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respondByDate").toString()));
      }
      if (jsonObj.get("shipmentTracking") != null && !jsonObj.get("shipmentTracking").isJsonNull()) {
        JsonArray jsonArrayshipmentTracking = jsonObj.getAsJsonArray("shipmentTracking");
        if (jsonArrayshipmentTracking != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipmentTracking").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipmentTracking` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentTracking").toString()));
          }

          // validate the optional field `shipmentTracking` (array)
          for (int i = 0; i < jsonArrayshipmentTracking.size(); i++) {
            TrackingInfo.validateJsonElement(jsonArrayshipmentTracking.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisputeEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisputeEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisputeEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisputeEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DisputeEvidence>() {
           @Override
           public void write(JsonWriter out, DisputeEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisputeEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisputeEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisputeEvidence
   * @throws IOException if the JSON string is invalid with respect to DisputeEvidence
   */
  public static DisputeEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisputeEvidence.class);
  }

  /**
   * Convert an instance of DisputeEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

