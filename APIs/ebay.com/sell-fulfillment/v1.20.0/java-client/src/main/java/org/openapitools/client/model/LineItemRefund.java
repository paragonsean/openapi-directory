/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains refund information for a line item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItemRefund {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_REFUND_DATE = "refundDate";
  @SerializedName(SERIALIZED_NAME_REFUND_DATE)
  private String refundDate;

  public static final String SERIALIZED_NAME_REFUND_ID = "refundId";
  @SerializedName(SERIALIZED_NAME_REFUND_ID)
  private String refundId;

  public static final String SERIALIZED_NAME_REFUND_REFERENCE_ID = "refundReferenceId";
  @SerializedName(SERIALIZED_NAME_REFUND_REFERENCE_ID)
  private String refundReferenceId;

  public LineItemRefund() {
  }

  public LineItemRefund amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public LineItemRefund refundDate(String refundDate) {
    this.refundDate = refundDate;
    return this;
  }

  /**
   * The date and time that the refund was issued for the line item. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the refund has been issued. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;
   * @return refundDate
   */
  @javax.annotation.Nullable
  public String getRefundDate() {
    return refundDate;
  }

  public void setRefundDate(String refundDate) {
    this.refundDate = refundDate;
  }


  public LineItemRefund refundId(String refundId) {
    this.refundId = refundId;
    return this;
  }

  /**
   * Unique identifier of a refund that was initiated for an order&#39;s line item through the &lt;b&gt;issueRefund&lt;/b&gt; method. If the &lt;b&gt;issueRefund&lt;/b&gt; method was used to issue a refund at the order level, this identifier is returned at the order level instead (&lt;b&gt;paymentSummary.refunds.refundId&lt;/b&gt; field).&lt;br&gt;&lt;br&gt; A &lt;b&gt;refundId&lt;/b&gt; value is returned in the response of the &lt;b&gt;issueRefund&lt;/b&gt; method, and this same value will be returned in the &lt;b&gt;getOrder&lt;/b&gt; and &lt;b&gt;getOrders&lt;/b&gt; responses for pending and completed refunds.
   * @return refundId
   */
  @javax.annotation.Nullable
  public String getRefundId() {
    return refundId;
  }

  public void setRefundId(String refundId) {
    this.refundId = refundId;
  }


  public LineItemRefund refundReferenceId(String refundReferenceId) {
    this.refundReferenceId = refundReferenceId;
    return this;
  }

  /**
   * This field is reserved for internal or future use.
   * @return refundReferenceId
   */
  @javax.annotation.Nullable
  public String getRefundReferenceId() {
    return refundReferenceId;
  }

  public void setRefundReferenceId(String refundReferenceId) {
    this.refundReferenceId = refundReferenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemRefund lineItemRefund = (LineItemRefund) o;
    return Objects.equals(this.amount, lineItemRefund.amount) &&
        Objects.equals(this.refundDate, lineItemRefund.refundDate) &&
        Objects.equals(this.refundId, lineItemRefund.refundId) &&
        Objects.equals(this.refundReferenceId, lineItemRefund.refundReferenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, refundDate, refundId, refundReferenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemRefund {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    refundDate: ").append(toIndentedString(refundDate)).append("\n");
    sb.append("    refundId: ").append(toIndentedString(refundId)).append("\n");
    sb.append("    refundReferenceId: ").append(toIndentedString(refundReferenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("refundDate");
    openapiFields.add("refundId");
    openapiFields.add("refundReferenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItemRefund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItemRefund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemRefund is not found in the empty JSON string", LineItemRefund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItemRefund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemRefund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amount"));
      }
      if ((jsonObj.get("refundDate") != null && !jsonObj.get("refundDate").isJsonNull()) && !jsonObj.get("refundDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundDate").toString()));
      }
      if ((jsonObj.get("refundId") != null && !jsonObj.get("refundId").isJsonNull()) && !jsonObj.get("refundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundId").toString()));
      }
      if ((jsonObj.get("refundReferenceId") != null && !jsonObj.get("refundReferenceId").isJsonNull()) && !jsonObj.get("refundReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReferenceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemRefund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemRefund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemRefund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemRefund.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemRefund>() {
           @Override
           public void write(JsonWriter out, LineItemRefund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemRefund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItemRefund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItemRefund
   * @throws IOException if the JSON string is invalid with respect to LineItemRefund
   */
  public static LineItemRefund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemRefund.class);
  }

  /**
   * Convert an instance of LineItemRefund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

