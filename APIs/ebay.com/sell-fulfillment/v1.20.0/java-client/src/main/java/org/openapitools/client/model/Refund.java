/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the base type of the &lt;b&gt;issueRefund&lt;/b&gt; response payload. As long as the &lt;b&gt;issueRefund&lt;/b&gt; method does not trigger an error, a response payload will be returned.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Refund {
  public static final String SERIALIZED_NAME_REFUND_ID = "refundId";
  @SerializedName(SERIALIZED_NAME_REFUND_ID)
  private String refundId;

  public static final String SERIALIZED_NAME_REFUND_STATUS = "refundStatus";
  @SerializedName(SERIALIZED_NAME_REFUND_STATUS)
  private String refundStatus;

  public Refund() {
  }

  public Refund refundId(String refundId) {
    this.refundId = refundId;
    return this;
  }

  /**
   * The unique identifier of the order refund. This value is returned unless the refund operation fails (&lt;b&gt;refundStatus&lt;/b&gt; value shows &lt;code&gt;FAILED&lt;/code&gt;). This identifier can be used to track the status of the refund through a &lt;b&gt;getOrder&lt;/b&gt; or &lt;b&gt;getOrders&lt;/b&gt; call. For order-level refunds, check the &lt;b&gt;paymentSummary.refunds.refundId&lt;/b&gt; field in the &lt;b&gt;getOrder&lt;/b&gt;/&lt;b&gt;getOrders&lt;/b&gt; response, and for line item level refunds, check the &lt;b&gt;lineItems.refunds.refundId&lt;/b&gt; field(s) in the &lt;b&gt;getOrder&lt;/b&gt;/&lt;b&gt;getOrders&lt;/b&gt; response.
   * @return refundId
   */
  @javax.annotation.Nullable
  public String getRefundId() {
    return refundId;
  }

  public void setRefundId(String refundId) {
    this.refundId = refundId;
  }


  public Refund refundStatus(String refundStatus) {
    this.refundStatus = refundStatus;
    return this;
  }

  /**
   * The value returned in this field indicates the success or failure of the refund operation. A successful &lt;b&gt;issueRefund&lt;/b&gt; operation should result in a value of &lt;code&gt;PENDING&lt;/code&gt;. A failed &lt;b&gt;issueRefund&lt;/b&gt; operation should result in a value of &lt;code&gt;FAILED&lt;/code&gt;, and an HTTP status code and/or and API error code may also get returned to possibly indicate the issue.&lt;br&gt;&lt;br&gt;The refunds issued through this method are processed asynchronously, so the refund will not show as &#39;Refunded&#39; right away. A seller will have to make a subsequent &lt;a href&#x3D;\&quot;https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrder\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; call to check the status of the refund.  The status of an order refund can be found in the &lt;a href&#x3D;\&quot;https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrder#response.paymentSummary.refunds.refundStatus\&quot; target&#x3D;\&quot;_blank\&quot;&gt;paymentSummary.refunds.refundStatus&lt;/a&gt; field of the &lt;a href&#x3D;\&quot;https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrder\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getOrder&lt;/a&gt; response. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:RefundStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return refundStatus
   */
  @javax.annotation.Nullable
  public String getRefundStatus() {
    return refundStatus;
  }

  public void setRefundStatus(String refundStatus) {
    this.refundStatus = refundStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refund refund = (Refund) o;
    return Objects.equals(this.refundId, refund.refundId) &&
        Objects.equals(this.refundStatus, refund.refundStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(refundId, refundStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refund {\n");
    sb.append("    refundId: ").append(toIndentedString(refundId)).append("\n");
    sb.append("    refundStatus: ").append(toIndentedString(refundStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("refundId");
    openapiFields.add("refundStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Refund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Refund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Refund is not found in the empty JSON string", Refund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Refund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Refund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refundId") != null && !jsonObj.get("refundId").isJsonNull()) && !jsonObj.get("refundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundId").toString()));
      }
      if ((jsonObj.get("refundStatus") != null && !jsonObj.get("refundStatus").isJsonNull()) && !jsonObj.get("refundStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Refund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Refund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Refund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Refund.class));

       return (TypeAdapter<T>) new TypeAdapter<Refund>() {
           @Override
           public void write(JsonWriter out, Refund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Refund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Refund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Refund
   * @throws IOException if the JSON string is invalid with respect to Refund
   */
  public static Refund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Refund.class);
  }

  /**
   * Convert an instance of Refund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

