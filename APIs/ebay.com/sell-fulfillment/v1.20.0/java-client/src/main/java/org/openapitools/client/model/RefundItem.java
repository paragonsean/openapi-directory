/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LegacyReference;
import org.openapitools.client.model.SimpleAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the &lt;b&gt;orderLevelRefundAmount&lt;/b&gt; container to specify the amount of the refund for the entire order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RefundItem {
  public static final String SERIALIZED_NAME_LEGACY_REFERENCE = "legacyReference";
  @SerializedName(SERIALIZED_NAME_LEGACY_REFERENCE)
  private LegacyReference legacyReference;

  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_REFUND_AMOUNT = "refundAmount";
  @SerializedName(SERIALIZED_NAME_REFUND_AMOUNT)
  private SimpleAmount refundAmount;

  public RefundItem() {
  }

  public RefundItem legacyReference(LegacyReference legacyReference) {
    this.legacyReference = legacyReference;
    return this;
  }

  /**
   * Get legacyReference
   * @return legacyReference
   */
  @javax.annotation.Nullable
  public LegacyReference getLegacyReference() {
    return legacyReference;
  }

  public void setLegacyReference(LegacyReference legacyReference) {
    this.legacyReference = legacyReference;
  }


  public RefundItem lineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
    return this;
  }

  /**
   * The unique identifier of an order line item. This identifier is created once a buyer purchases a &#39;Buy It Now&#39; item or if an auction listing ends with a winning bidder. Either this field or the &lt;b&gt;legacyReference&lt;/b&gt; container is needed to identify an individual order line item that will receive a refund.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;b&gt;lineItemId&lt;/b&gt; field is used to identify an order line item in REST API format, and the  &lt;b&gt;legacyReference&lt;/b&gt; container is used to identify an order line item in Trading/legacy API format. Both legacy and REST API identifiers are returned in &lt;b&gt;getOrder&lt;/b&gt; (Fulfillment API) and &lt;b&gt;GetOrders&lt;/b&gt; (Trading API).&lt;/span&gt;
   * @return lineItemId
   */
  @javax.annotation.Nullable
  public String getLineItemId() {
    return lineItemId;
  }

  public void setLineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
  }


  public RefundItem refundAmount(SimpleAmount refundAmount) {
    this.refundAmount = refundAmount;
    return this;
  }

  /**
   * Get refundAmount
   * @return refundAmount
   */
  @javax.annotation.Nullable
  public SimpleAmount getRefundAmount() {
    return refundAmount;
  }

  public void setRefundAmount(SimpleAmount refundAmount) {
    this.refundAmount = refundAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundItem refundItem = (RefundItem) o;
    return Objects.equals(this.legacyReference, refundItem.legacyReference) &&
        Objects.equals(this.lineItemId, refundItem.lineItemId) &&
        Objects.equals(this.refundAmount, refundItem.refundAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legacyReference, lineItemId, refundAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundItem {\n");
    sb.append("    legacyReference: ").append(toIndentedString(legacyReference)).append("\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    refundAmount: ").append(toIndentedString(refundAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legacyReference");
    openapiFields.add("lineItemId");
    openapiFields.add("refundAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RefundItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefundItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundItem is not found in the empty JSON string", RefundItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefundItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefundItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `legacyReference`
      if (jsonObj.get("legacyReference") != null && !jsonObj.get("legacyReference").isJsonNull()) {
        LegacyReference.validateJsonElement(jsonObj.get("legacyReference"));
      }
      if ((jsonObj.get("lineItemId") != null && !jsonObj.get("lineItemId").isJsonNull()) && !jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      // validate the optional field `refundAmount`
      if (jsonObj.get("refundAmount") != null && !jsonObj.get("refundAmount").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("refundAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundItem>() {
           @Override
           public void write(JsonWriter out, RefundItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RefundItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RefundItem
   * @throws IOException if the JSON string is invalid with respect to RefundItem
   */
  public static RefundItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundItem.class);
  }

  /**
   * Convert an instance of RefundItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

