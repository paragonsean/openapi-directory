/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to state possible action(s) that a seller can take to release a payment hold placed against an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SellerActionsToRelease {
  public static final String SERIALIZED_NAME_SELLER_ACTION_TO_RELEASE = "sellerActionToRelease";
  @SerializedName(SERIALIZED_NAME_SELLER_ACTION_TO_RELEASE)
  private String sellerActionToRelease;

  public SellerActionsToRelease() {
  }

  public SellerActionsToRelease sellerActionToRelease(String sellerActionToRelease) {
    this.sellerActionToRelease = sellerActionToRelease;
    return this;
  }

  /**
   * A possible action that the seller can take to expedite the release of a payment hold. A &lt;strong&gt;sellerActionToRelease&lt;/strong&gt; field is returned for each possible action that a seller may take. Possible actions may include providing shipping/tracking information, issuing a refund, providing refund information, contacting customer support, etc.
   * @return sellerActionToRelease
   */
  @javax.annotation.Nullable
  public String getSellerActionToRelease() {
    return sellerActionToRelease;
  }

  public void setSellerActionToRelease(String sellerActionToRelease) {
    this.sellerActionToRelease = sellerActionToRelease;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellerActionsToRelease sellerActionsToRelease = (SellerActionsToRelease) o;
    return Objects.equals(this.sellerActionToRelease, sellerActionsToRelease.sellerActionToRelease);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sellerActionToRelease);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellerActionsToRelease {\n");
    sb.append("    sellerActionToRelease: ").append(toIndentedString(sellerActionToRelease)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sellerActionToRelease");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SellerActionsToRelease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SellerActionsToRelease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellerActionsToRelease is not found in the empty JSON string", SellerActionsToRelease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SellerActionsToRelease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SellerActionsToRelease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sellerActionToRelease") != null && !jsonObj.get("sellerActionToRelease").isJsonNull()) && !jsonObj.get("sellerActionToRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerActionToRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerActionToRelease").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellerActionsToRelease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellerActionsToRelease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellerActionsToRelease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellerActionsToRelease.class));

       return (TypeAdapter<T>) new TypeAdapter<SellerActionsToRelease>() {
           @Override
           public void write(JsonWriter out, SellerActionsToRelease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SellerActionsToRelease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SellerActionsToRelease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SellerActionsToRelease
   * @throws IOException if the JSON string is invalid with respect to SellerActionsToRelease
   */
  public static SellerActionsToRelease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellerActionsToRelease.class);
  }

  /**
   * Convert an instance of SellerActionsToRelease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

