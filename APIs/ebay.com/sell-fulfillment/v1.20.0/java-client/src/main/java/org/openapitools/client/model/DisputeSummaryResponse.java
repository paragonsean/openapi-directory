/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PaymentDisputeSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the base response payload of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method. Each payment dispute that matches the input criteria is returned under the &lt;strong&gt;paymentDisputeSummaries&lt;/strong&gt; array.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisputeSummaryResponse {
  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PAYMENT_DISPUTE_SUMMARIES = "paymentDisputeSummaries";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DISPUTE_SUMMARIES)
  private List<PaymentDisputeSummary> paymentDisputeSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public DisputeSummaryResponse() {
  }

  public DisputeSummaryResponse href(String href) {
    this.href = href;
    return this;
  }

  /**
   * The URI of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call request that produced the current page of the result set.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public DisputeSummaryResponse limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * This value shows the maximum number of payment disputes that will appear on one page of the result set. The &lt;strong&gt;limit&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;200&lt;/code&gt;. If the value in the &lt;strong&gt;total&lt;/strong&gt; field exceeds this &lt;strong&gt;limit&lt;/strong&gt; value, there are multiple pages in the current result set.&lt;br&gt;&lt;br&gt;&lt;b&gt;Min&lt;/b&gt;: 1; &lt;b&gt;Max&lt;/b&gt;: 200; &lt;b&gt;Default&lt;/b&gt;: 200
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public DisputeSummaryResponse next(String next) {
    this.next = next;
    return this;
  }

  /**
   * The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;10&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a next page of results to view based on the current input criteria.
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public DisputeSummaryResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The &lt;strong&gt;offset&lt;/strong&gt; value can be passed in as a query parameter in the request, or if it is not used, it defaults to &lt;code&gt;0&lt;/code&gt; and the first payment dispute of the result set is shown at the top of the response.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public DisputeSummaryResponse paymentDisputeSummaries(List<PaymentDisputeSummary> paymentDisputeSummaries) {
    this.paymentDisputeSummaries = paymentDisputeSummaries;
    return this;
  }

  public DisputeSummaryResponse addPaymentDisputeSummariesItem(PaymentDisputeSummary paymentDisputeSummariesItem) {
    if (this.paymentDisputeSummaries == null) {
      this.paymentDisputeSummaries = new ArrayList<>();
    }
    this.paymentDisputeSummaries.add(paymentDisputeSummariesItem);
    return this;
  }

  /**
   * Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned.
   * @return paymentDisputeSummaries
   */
  @javax.annotation.Nullable
  public List<PaymentDisputeSummary> getPaymentDisputeSummaries() {
    return paymentDisputeSummaries;
  }

  public void setPaymentDisputeSummaries(List<PaymentDisputeSummary> paymentDisputeSummaries) {
    this.paymentDisputeSummaries = paymentDisputeSummaries;
  }


  public DisputeSummaryResponse prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * The &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:&lt;br&gt;&lt;br&gt;&lt;code&gt;path/payment_dispute_summary?limit&#x3D;10&amp;offset&#x3D;0&lt;/code&gt;&lt;br&gt;&lt;br&gt;This field is only returned if there is a previous page of results to view based on the current input criteria.
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public DisputeSummaryResponse total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for &lt;strong&gt;limit&lt;/strong&gt; in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is &lt;code&gt;0&lt;/code&gt;.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisputeSummaryResponse disputeSummaryResponse = (DisputeSummaryResponse) o;
    return Objects.equals(this.href, disputeSummaryResponse.href) &&
        Objects.equals(this.limit, disputeSummaryResponse.limit) &&
        Objects.equals(this.next, disputeSummaryResponse.next) &&
        Objects.equals(this.offset, disputeSummaryResponse.offset) &&
        Objects.equals(this.paymentDisputeSummaries, disputeSummaryResponse.paymentDisputeSummaries) &&
        Objects.equals(this.prev, disputeSummaryResponse.prev) &&
        Objects.equals(this.total, disputeSummaryResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, limit, next, offset, paymentDisputeSummaries, prev, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisputeSummaryResponse {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    paymentDisputeSummaries: ").append(toIndentedString(paymentDisputeSummaries)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("href");
    openapiFields.add("limit");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("paymentDisputeSummaries");
    openapiFields.add("prev");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisputeSummaryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisputeSummaryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisputeSummaryResponse is not found in the empty JSON string", DisputeSummaryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisputeSummaryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisputeSummaryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if (jsonObj.get("paymentDisputeSummaries") != null && !jsonObj.get("paymentDisputeSummaries").isJsonNull()) {
        JsonArray jsonArraypaymentDisputeSummaries = jsonObj.getAsJsonArray("paymentDisputeSummaries");
        if (jsonArraypaymentDisputeSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentDisputeSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentDisputeSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("paymentDisputeSummaries").toString()));
          }

          // validate the optional field `paymentDisputeSummaries` (array)
          for (int i = 0; i < jsonArraypaymentDisputeSummaries.size(); i++) {
            PaymentDisputeSummary.validateJsonElement(jsonArraypaymentDisputeSummaries.get(i));
          };
        }
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisputeSummaryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisputeSummaryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisputeSummaryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisputeSummaryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DisputeSummaryResponse>() {
           @Override
           public void write(JsonWriter out, DisputeSummaryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisputeSummaryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisputeSummaryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisputeSummaryResponse
   * @throws IOException if the JSON string is invalid with respect to DisputeSummaryResponse
   */
  public static DisputeSummaryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisputeSummaryResponse.class);
  }

  /**
   * Convert an instance of DisputeSummaryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

