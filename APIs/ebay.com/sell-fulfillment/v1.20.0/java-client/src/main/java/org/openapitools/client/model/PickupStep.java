/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to indicate the merchant&#39;s store where the buyer will pickup their In-Store Pickup order. The &lt;b&gt;pickupStep&lt;/b&gt; container is only returned for In-Store Pickup orders. The In-Store Pickup feature is supported in the US, Canada, UK, Germany, and Australia marketplaces.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PickupStep {
  public static final String SERIALIZED_NAME_MERCHANT_LOCATION_KEY = "merchantLocationKey";
  @SerializedName(SERIALIZED_NAME_MERCHANT_LOCATION_KEY)
  private String merchantLocationKey;

  public PickupStep() {
  }

  public PickupStep merchantLocationKey(String merchantLocationKey) {
    this.merchantLocationKey = merchantLocationKey;
    return this;
  }

  /**
   * A merchant-defined unique identifier of the merchant&#39;s store where the buyer will pick up their In-Store Pickup order.&lt;br&gt;&lt;br&gt; This field is always returned with the &lt;b&gt;pickupStep&lt;/b&gt; container.
   * @return merchantLocationKey
   */
  @javax.annotation.Nullable
  public String getMerchantLocationKey() {
    return merchantLocationKey;
  }

  public void setMerchantLocationKey(String merchantLocationKey) {
    this.merchantLocationKey = merchantLocationKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickupStep pickupStep = (PickupStep) o;
    return Objects.equals(this.merchantLocationKey, pickupStep.merchantLocationKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantLocationKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickupStep {\n");
    sb.append("    merchantLocationKey: ").append(toIndentedString(merchantLocationKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchantLocationKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PickupStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PickupStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PickupStep is not found in the empty JSON string", PickupStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PickupStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PickupStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("merchantLocationKey") != null && !jsonObj.get("merchantLocationKey").isJsonNull()) && !jsonObj.get("merchantLocationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantLocationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantLocationKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PickupStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PickupStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PickupStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PickupStep.class));

       return (TypeAdapter<T>) new TypeAdapter<PickupStep>() {
           @Override
           public void write(JsonWriter out, PickupStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PickupStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PickupStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PickupStep
   * @throws IOException if the JSON string is invalid with respect to PickupStep
   */
  public static PickupStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PickupStep.class);
  }

  /**
   * Convert an instance of PickupStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

