/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SimpleAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;strong&gt;resolution&lt;/strong&gt; container that is returned for payment disputes that have been resolved.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentDisputeOutcomeDetail {
  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private SimpleAmount fees;

  public static final String SERIALIZED_NAME_PROTECTED_AMOUNT = "protectedAmount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_AMOUNT)
  private SimpleAmount protectedAmount;

  public static final String SERIALIZED_NAME_PROTECTION_STATUS = "protectionStatus";
  @SerializedName(SERIALIZED_NAME_PROTECTION_STATUS)
  private String protectionStatus;

  public static final String SERIALIZED_NAME_REASON_FOR_CLOSURE = "reasonForClosure";
  @SerializedName(SERIALIZED_NAME_REASON_FOR_CLOSURE)
  private String reasonForClosure;

  public static final String SERIALIZED_NAME_RECOUP_AMOUNT = "recoupAmount";
  @SerializedName(SERIALIZED_NAME_RECOUP_AMOUNT)
  private SimpleAmount recoupAmount;

  public static final String SERIALIZED_NAME_TOTAL_FEE_CREDIT = "totalFeeCredit";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEE_CREDIT)
  private SimpleAmount totalFeeCredit;

  public PaymentDisputeOutcomeDetail() {
  }

  public PaymentDisputeOutcomeDetail fees(SimpleAmount fees) {
    this.fees = fees;
    return this;
  }

  /**
   * Get fees
   * @return fees
   */
  @javax.annotation.Nullable
  public SimpleAmount getFees() {
    return fees;
  }

  public void setFees(SimpleAmount fees) {
    this.fees = fees;
  }


  public PaymentDisputeOutcomeDetail protectedAmount(SimpleAmount protectedAmount) {
    this.protectedAmount = protectedAmount;
    return this;
  }

  /**
   * Get protectedAmount
   * @return protectedAmount
   */
  @javax.annotation.Nullable
  public SimpleAmount getProtectedAmount() {
    return protectedAmount;
  }

  public void setProtectedAmount(SimpleAmount protectedAmount) {
    this.protectedAmount = protectedAmount;
  }


  public PaymentDisputeOutcomeDetail protectionStatus(String protectionStatus) {
    this.protectionStatus = protectionStatus;
    return this;
  }

  /**
   * This enumeration value indicates if the seller is fully protected, partially protected, or not protected by eBay for the payment dispute. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ProtectionStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return protectionStatus
   */
  @javax.annotation.Nullable
  public String getProtectionStatus() {
    return protectionStatus;
  }

  public void setProtectionStatus(String protectionStatus) {
    this.protectionStatus = protectionStatus;
  }


  public PaymentDisputeOutcomeDetail reasonForClosure(String reasonForClosure) {
    this.reasonForClosure = reasonForClosure;
    return this;
  }

  /**
   * The enumeration value returned in this field indicates the outcome of the payment dispute for the seller. This field is always returned once the payment dispute is resolved. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:OutcomeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reasonForClosure
   */
  @javax.annotation.Nullable
  public String getReasonForClosure() {
    return reasonForClosure;
  }

  public void setReasonForClosure(String reasonForClosure) {
    this.reasonForClosure = reasonForClosure;
  }


  public PaymentDisputeOutcomeDetail recoupAmount(SimpleAmount recoupAmount) {
    this.recoupAmount = recoupAmount;
    return this;
  }

  /**
   * Get recoupAmount
   * @return recoupAmount
   */
  @javax.annotation.Nullable
  public SimpleAmount getRecoupAmount() {
    return recoupAmount;
  }

  public void setRecoupAmount(SimpleAmount recoupAmount) {
    this.recoupAmount = recoupAmount;
  }


  public PaymentDisputeOutcomeDetail totalFeeCredit(SimpleAmount totalFeeCredit) {
    this.totalFeeCredit = totalFeeCredit;
    return this;
  }

  /**
   * Get totalFeeCredit
   * @return totalFeeCredit
   */
  @javax.annotation.Nullable
  public SimpleAmount getTotalFeeCredit() {
    return totalFeeCredit;
  }

  public void setTotalFeeCredit(SimpleAmount totalFeeCredit) {
    this.totalFeeCredit = totalFeeCredit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDisputeOutcomeDetail paymentDisputeOutcomeDetail = (PaymentDisputeOutcomeDetail) o;
    return Objects.equals(this.fees, paymentDisputeOutcomeDetail.fees) &&
        Objects.equals(this.protectedAmount, paymentDisputeOutcomeDetail.protectedAmount) &&
        Objects.equals(this.protectionStatus, paymentDisputeOutcomeDetail.protectionStatus) &&
        Objects.equals(this.reasonForClosure, paymentDisputeOutcomeDetail.reasonForClosure) &&
        Objects.equals(this.recoupAmount, paymentDisputeOutcomeDetail.recoupAmount) &&
        Objects.equals(this.totalFeeCredit, paymentDisputeOutcomeDetail.totalFeeCredit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fees, protectedAmount, protectionStatus, reasonForClosure, recoupAmount, totalFeeCredit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDisputeOutcomeDetail {\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    protectedAmount: ").append(toIndentedString(protectedAmount)).append("\n");
    sb.append("    protectionStatus: ").append(toIndentedString(protectionStatus)).append("\n");
    sb.append("    reasonForClosure: ").append(toIndentedString(reasonForClosure)).append("\n");
    sb.append("    recoupAmount: ").append(toIndentedString(recoupAmount)).append("\n");
    sb.append("    totalFeeCredit: ").append(toIndentedString(totalFeeCredit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fees");
    openapiFields.add("protectedAmount");
    openapiFields.add("protectionStatus");
    openapiFields.add("reasonForClosure");
    openapiFields.add("recoupAmount");
    openapiFields.add("totalFeeCredit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentDisputeOutcomeDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentDisputeOutcomeDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentDisputeOutcomeDetail is not found in the empty JSON string", PaymentDisputeOutcomeDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentDisputeOutcomeDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentDisputeOutcomeDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fees`
      if (jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("fees"));
      }
      // validate the optional field `protectedAmount`
      if (jsonObj.get("protectedAmount") != null && !jsonObj.get("protectedAmount").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("protectedAmount"));
      }
      if ((jsonObj.get("protectionStatus") != null && !jsonObj.get("protectionStatus").isJsonNull()) && !jsonObj.get("protectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionStatus").toString()));
      }
      if ((jsonObj.get("reasonForClosure") != null && !jsonObj.get("reasonForClosure").isJsonNull()) && !jsonObj.get("reasonForClosure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonForClosure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonForClosure").toString()));
      }
      // validate the optional field `recoupAmount`
      if (jsonObj.get("recoupAmount") != null && !jsonObj.get("recoupAmount").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("recoupAmount"));
      }
      // validate the optional field `totalFeeCredit`
      if (jsonObj.get("totalFeeCredit") != null && !jsonObj.get("totalFeeCredit").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("totalFeeCredit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentDisputeOutcomeDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentDisputeOutcomeDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentDisputeOutcomeDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentDisputeOutcomeDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentDisputeOutcomeDetail>() {
           @Override
           public void write(JsonWriter out, PaymentDisputeOutcomeDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentDisputeOutcomeDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentDisputeOutcomeDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentDisputeOutcomeDetail
   * @throws IOException if the JSON string is invalid with respect to PaymentDisputeOutcomeDetail
   */
  public static PaymentDisputeOutcomeDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDisputeOutcomeDetail.class);
  }

  /**
   * Convert an instance of PaymentDisputeOutcomeDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

