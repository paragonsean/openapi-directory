/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SimpleAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by each payment dispute that is returned with the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentDisputeSummary {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private SimpleAmount amount;

  public static final String SERIALIZED_NAME_BUYER_USERNAME = "buyerUsername";
  @SerializedName(SERIALIZED_NAME_BUYER_USERNAME)
  private String buyerUsername;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "closedDate";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private String closedDate;

  public static final String SERIALIZED_NAME_OPEN_DATE = "openDate";
  @SerializedName(SERIALIZED_NAME_OPEN_DATE)
  private String openDate;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PAYMENT_DISPUTE_ID = "paymentDisputeId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DISPUTE_ID)
  private String paymentDisputeId;

  public static final String SERIALIZED_NAME_PAYMENT_DISPUTE_STATUS = "paymentDisputeStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DISPUTE_STATUS)
  private String paymentDisputeStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RESPOND_BY_DATE = "respondByDate";
  @SerializedName(SERIALIZED_NAME_RESPOND_BY_DATE)
  private String respondByDate;

  public PaymentDisputeSummary() {
  }

  public PaymentDisputeSummary amount(SimpleAmount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public SimpleAmount getAmount() {
    return amount;
  }

  public void setAmount(SimpleAmount amount) {
    this.amount = amount;
  }


  public PaymentDisputeSummary buyerUsername(String buyerUsername) {
    this.buyerUsername = buyerUsername;
    return this;
  }

  /**
   * This is the buyer&#39;s eBay user ID. This field is returned for all payment disputes returned in the response.
   * @return buyerUsername
   */
  @javax.annotation.Nullable
  public String getBuyerUsername() {
    return buyerUsername;
  }

  public void setBuyerUsername(String buyerUsername) {
    this.buyerUsername = buyerUsername;
  }


  public PaymentDisputeSummary closedDate(String closedDate) {
    this.closedDate = closedDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the &lt;code&gt;CLOSED&lt;/code&gt; state.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return closedDate
   */
  @javax.annotation.Nullable
  public String getClosedDate() {
    return closedDate;
  }

  public void setClosedDate(String closedDate) {
    this.closedDate = closedDate;
  }


  public PaymentDisputeSummary openDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return openDate
   */
  @javax.annotation.Nullable
  public String getOpenDate() {
    return openDate;
  }

  public void setOpenDate(String openDate) {
    this.openDate = openDate;
  }


  public PaymentDisputeSummary orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * This is the unique identifier of the order involved in the payment dispute.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PaymentDisputeSummary paymentDisputeId(String paymentDisputeId) {
    this.paymentDisputeId = paymentDisputeId;
    return this;
  }

  /**
   * This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; call URI to retrieve a specific payment dispute. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method returns more details about a payment dispute than the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method.
   * @return paymentDisputeId
   */
  @javax.annotation.Nullable
  public String getPaymentDisputeId() {
    return paymentDisputeId;
  }

  public void setPaymentDisputeId(String paymentDisputeId) {
    this.paymentDisputeId = paymentDisputeId;
  }


  public PaymentDisputeSummary paymentDisputeStatus(String paymentDisputeStatus) {
    this.paymentDisputeStatus = paymentDisputeStatus;
    return this;
  }

  /**
   * The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return paymentDisputeStatus
   */
  @javax.annotation.Nullable
  public String getPaymentDisputeStatus() {
    return paymentDisputeStatus;
  }

  public void setPaymentDisputeStatus(String paymentDisputeStatus) {
    this.paymentDisputeStatus = paymentDisputeStatus;
  }


  public PaymentDisputeSummary reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See &lt;strong&gt;DisputeReasonEnum&lt;/strong&gt; type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public PaymentDisputeSummary respondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the &lt;code&gt;ACTION_NEEDED&lt;/code&gt; state. For payment disputes that require action by the seller, that same seller must call &lt;strong&gt;getPaymentDispute&lt;/strong&gt; to see the next action(s) that they can take against the payment dispute.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return respondByDate
   */
  @javax.annotation.Nullable
  public String getRespondByDate() {
    return respondByDate;
  }

  public void setRespondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDisputeSummary paymentDisputeSummary = (PaymentDisputeSummary) o;
    return Objects.equals(this.amount, paymentDisputeSummary.amount) &&
        Objects.equals(this.buyerUsername, paymentDisputeSummary.buyerUsername) &&
        Objects.equals(this.closedDate, paymentDisputeSummary.closedDate) &&
        Objects.equals(this.openDate, paymentDisputeSummary.openDate) &&
        Objects.equals(this.orderId, paymentDisputeSummary.orderId) &&
        Objects.equals(this.paymentDisputeId, paymentDisputeSummary.paymentDisputeId) &&
        Objects.equals(this.paymentDisputeStatus, paymentDisputeSummary.paymentDisputeStatus) &&
        Objects.equals(this.reason, paymentDisputeSummary.reason) &&
        Objects.equals(this.respondByDate, paymentDisputeSummary.respondByDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, buyerUsername, closedDate, openDate, orderId, paymentDisputeId, paymentDisputeStatus, reason, respondByDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDisputeSummary {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    buyerUsername: ").append(toIndentedString(buyerUsername)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("    openDate: ").append(toIndentedString(openDate)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentDisputeId: ").append(toIndentedString(paymentDisputeId)).append("\n");
    sb.append("    paymentDisputeStatus: ").append(toIndentedString(paymentDisputeStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    respondByDate: ").append(toIndentedString(respondByDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("buyerUsername");
    openapiFields.add("closedDate");
    openapiFields.add("openDate");
    openapiFields.add("orderId");
    openapiFields.add("paymentDisputeId");
    openapiFields.add("paymentDisputeStatus");
    openapiFields.add("reason");
    openapiFields.add("respondByDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentDisputeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentDisputeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentDisputeSummary is not found in the empty JSON string", PaymentDisputeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentDisputeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentDisputeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("amount"));
      }
      if ((jsonObj.get("buyerUsername") != null && !jsonObj.get("buyerUsername").isJsonNull()) && !jsonObj.get("buyerUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerUsername").toString()));
      }
      if ((jsonObj.get("closedDate") != null && !jsonObj.get("closedDate").isJsonNull()) && !jsonObj.get("closedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedDate").toString()));
      }
      if ((jsonObj.get("openDate") != null && !jsonObj.get("openDate").isJsonNull()) && !jsonObj.get("openDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openDate").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("paymentDisputeId") != null && !jsonObj.get("paymentDisputeId").isJsonNull()) && !jsonObj.get("paymentDisputeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentDisputeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentDisputeId").toString()));
      }
      if ((jsonObj.get("paymentDisputeStatus") != null && !jsonObj.get("paymentDisputeStatus").isJsonNull()) && !jsonObj.get("paymentDisputeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentDisputeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentDisputeStatus").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("respondByDate") != null && !jsonObj.get("respondByDate").isJsonNull()) && !jsonObj.get("respondByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respondByDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentDisputeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentDisputeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentDisputeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentDisputeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentDisputeSummary>() {
           @Override
           public void write(JsonWriter out, PaymentDisputeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentDisputeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentDisputeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentDisputeSummary
   * @throws IOException if the JSON string is invalid with respect to PaymentDisputeSummary
   */
  public static PaymentDisputeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDisputeSummary.class);
  }

  /**
   * Convert an instance of PaymentDisputeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

