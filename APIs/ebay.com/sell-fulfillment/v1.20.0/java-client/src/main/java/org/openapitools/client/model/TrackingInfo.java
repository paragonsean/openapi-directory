/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used for seller provided shipment tracking information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackingInfo {
  public static final String SERIALIZED_NAME_SHIPMENT_TRACKING_NUMBER = "shipmentTrackingNumber";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TRACKING_NUMBER)
  private String shipmentTrackingNumber;

  public static final String SERIALIZED_NAME_SHIPPING_CARRIER_CODE = "shippingCarrierCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CARRIER_CODE)
  private String shippingCarrierCode;

  public TrackingInfo() {
  }

  public TrackingInfo shipmentTrackingNumber(String shipmentTrackingNumber) {
    this.shipmentTrackingNumber = shipmentTrackingNumber;
    return this;
  }

  /**
   * This string value represents the shipment tracking number of the package.
   * @return shipmentTrackingNumber
   */
  @javax.annotation.Nullable
  public String getShipmentTrackingNumber() {
    return shipmentTrackingNumber;
  }

  public void setShipmentTrackingNumber(String shipmentTrackingNumber) {
    this.shipmentTrackingNumber = shipmentTrackingNumber;
  }


  public TrackingInfo shippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
    return this;
  }

  /**
   * This string value represents the shipping carrier used to ship the package.
   * @return shippingCarrierCode
   */
  @javax.annotation.Nullable
  public String getShippingCarrierCode() {
    return shippingCarrierCode;
  }

  public void setShippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingInfo trackingInfo = (TrackingInfo) o;
    return Objects.equals(this.shipmentTrackingNumber, trackingInfo.shipmentTrackingNumber) &&
        Objects.equals(this.shippingCarrierCode, trackingInfo.shippingCarrierCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipmentTrackingNumber, shippingCarrierCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingInfo {\n");
    sb.append("    shipmentTrackingNumber: ").append(toIndentedString(shipmentTrackingNumber)).append("\n");
    sb.append("    shippingCarrierCode: ").append(toIndentedString(shippingCarrierCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shipmentTrackingNumber");
    openapiFields.add("shippingCarrierCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackingInfo is not found in the empty JSON string", TrackingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("shipmentTrackingNumber") != null && !jsonObj.get("shipmentTrackingNumber").isJsonNull()) && !jsonObj.get("shipmentTrackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentTrackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentTrackingNumber").toString()));
      }
      if ((jsonObj.get("shippingCarrierCode") != null && !jsonObj.get("shippingCarrierCode").isJsonNull()) && !jsonObj.get("shippingCarrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCarrierCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackingInfo>() {
           @Override
           public void write(JsonWriter out, TrackingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackingInfo
   * @throws IOException if the JSON string is invalid with respect to TrackingInfo
   */
  public static TrackingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackingInfo.class);
  }

  /**
   * Convert an instance of TrackingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

