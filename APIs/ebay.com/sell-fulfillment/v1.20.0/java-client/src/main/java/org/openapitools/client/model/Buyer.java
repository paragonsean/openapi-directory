/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExtendedContact;
import org.openapitools.client.model.TaxAddress;
import org.openapitools.client.model.TaxIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about the order&#39;s buyer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Buyer {
  public static final String SERIALIZED_NAME_BUYER_REGISTRATION_ADDRESS = "buyerRegistrationAddress";
  @SerializedName(SERIALIZED_NAME_BUYER_REGISTRATION_ADDRESS)
  private ExtendedContact buyerRegistrationAddress;

  public static final String SERIALIZED_NAME_TAX_ADDRESS = "taxAddress";
  @SerializedName(SERIALIZED_NAME_TAX_ADDRESS)
  private TaxAddress taxAddress;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIER = "taxIdentifier";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIER)
  private TaxIdentifier taxIdentifier;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public Buyer() {
  }

  public Buyer buyerRegistrationAddress(ExtendedContact buyerRegistrationAddress) {
    this.buyerRegistrationAddress = buyerRegistrationAddress;
    return this;
  }

  /**
   * Get buyerRegistrationAddress
   * @return buyerRegistrationAddress
   */
  @javax.annotation.Nullable
  public ExtendedContact getBuyerRegistrationAddress() {
    return buyerRegistrationAddress;
  }

  public void setBuyerRegistrationAddress(ExtendedContact buyerRegistrationAddress) {
    this.buyerRegistrationAddress = buyerRegistrationAddress;
  }


  public Buyer taxAddress(TaxAddress taxAddress) {
    this.taxAddress = taxAddress;
    return this;
  }

  /**
   * Get taxAddress
   * @return taxAddress
   */
  @javax.annotation.Nullable
  public TaxAddress getTaxAddress() {
    return taxAddress;
  }

  public void setTaxAddress(TaxAddress taxAddress) {
    this.taxAddress = taxAddress;
  }


  public Buyer taxIdentifier(TaxIdentifier taxIdentifier) {
    this.taxIdentifier = taxIdentifier;
    return this;
  }

  /**
   * Get taxIdentifier
   * @return taxIdentifier
   */
  @javax.annotation.Nullable
  public TaxIdentifier getTaxIdentifier() {
    return taxIdentifier;
  }

  public void setTaxIdentifier(TaxIdentifier taxIdentifier) {
    this.taxIdentifier = taxIdentifier;
  }


  public Buyer username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The buyer&#39;s eBay user ID.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Buyer buyer = (Buyer) o;
    return Objects.equals(this.buyerRegistrationAddress, buyer.buyerRegistrationAddress) &&
        Objects.equals(this.taxAddress, buyer.taxAddress) &&
        Objects.equals(this.taxIdentifier, buyer.taxIdentifier) &&
        Objects.equals(this.username, buyer.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyerRegistrationAddress, taxAddress, taxIdentifier, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Buyer {\n");
    sb.append("    buyerRegistrationAddress: ").append(toIndentedString(buyerRegistrationAddress)).append("\n");
    sb.append("    taxAddress: ").append(toIndentedString(taxAddress)).append("\n");
    sb.append("    taxIdentifier: ").append(toIndentedString(taxIdentifier)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyerRegistrationAddress");
    openapiFields.add("taxAddress");
    openapiFields.add("taxIdentifier");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Buyer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Buyer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Buyer is not found in the empty JSON string", Buyer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Buyer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Buyer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buyerRegistrationAddress`
      if (jsonObj.get("buyerRegistrationAddress") != null && !jsonObj.get("buyerRegistrationAddress").isJsonNull()) {
        ExtendedContact.validateJsonElement(jsonObj.get("buyerRegistrationAddress"));
      }
      // validate the optional field `taxAddress`
      if (jsonObj.get("taxAddress") != null && !jsonObj.get("taxAddress").isJsonNull()) {
        TaxAddress.validateJsonElement(jsonObj.get("taxAddress"));
      }
      // validate the optional field `taxIdentifier`
      if (jsonObj.get("taxIdentifier") != null && !jsonObj.get("taxIdentifier").isJsonNull()) {
        TaxIdentifier.validateJsonElement(jsonObj.get("taxIdentifier"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Buyer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Buyer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Buyer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Buyer.class));

       return (TypeAdapter<T>) new TypeAdapter<Buyer>() {
           @Override
           public void write(JsonWriter out, Buyer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Buyer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Buyer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Buyer
   * @throws IOException if the JSON string is invalid with respect to Buyer
   */
  public static Buyer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Buyer.class);
  }

  /**
   * Convert an instance of Buyer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

