/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.AppliedPromotion;
import org.openapitools.client.model.DeliveryCost;
import org.openapitools.client.model.EbayCollectAndRemitTax;
import org.openapitools.client.model.EbayCollectedCharges;
import org.openapitools.client.model.GiftDetails;
import org.openapitools.client.model.ItemLocation;
import org.openapitools.client.model.LineItemFulfillmentInstructions;
import org.openapitools.client.model.LineItemProperties;
import org.openapitools.client.model.LineItemRefund;
import org.openapitools.client.model.LinkedOrderLineItem;
import org.openapitools.client.model.NameValuePair;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains the details of each line item in an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItem {
  public static final String SERIALIZED_NAME_APPLIED_PROMOTIONS = "appliedPromotions";
  @SerializedName(SERIALIZED_NAME_APPLIED_PROMOTIONS)
  private List<AppliedPromotion> appliedPromotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY_COST = "deliveryCost";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COST)
  private DeliveryCost deliveryCost;

  public static final String SERIALIZED_NAME_DISCOUNTED_LINE_ITEM_COST = "discountedLineItemCost";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_LINE_ITEM_COST)
  private Amount discountedLineItemCost;

  public static final String SERIALIZED_NAME_EBAY_COLLECT_AND_REMIT_TAXES = "ebayCollectAndRemitTaxes";
  @SerializedName(SERIALIZED_NAME_EBAY_COLLECT_AND_REMIT_TAXES)
  private List<EbayCollectAndRemitTax> ebayCollectAndRemitTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EBAY_COLLECTED_CHARGES = "ebayCollectedCharges";
  @SerializedName(SERIALIZED_NAME_EBAY_COLLECTED_CHARGES)
  private EbayCollectedCharges ebayCollectedCharges;

  public static final String SERIALIZED_NAME_GIFT_DETAILS = "giftDetails";
  @SerializedName(SERIALIZED_NAME_GIFT_DETAILS)
  private GiftDetails giftDetails;

  public static final String SERIALIZED_NAME_ITEM_LOCATION = "itemLocation";
  @SerializedName(SERIALIZED_NAME_ITEM_LOCATION)
  private ItemLocation itemLocation;

  public static final String SERIALIZED_NAME_LEGACY_ITEM_ID = "legacyItemId";
  @SerializedName(SERIALIZED_NAME_LEGACY_ITEM_ID)
  private String legacyItemId;

  public static final String SERIALIZED_NAME_LEGACY_VARIATION_ID = "legacyVariationId";
  @SerializedName(SERIALIZED_NAME_LEGACY_VARIATION_ID)
  private String legacyVariationId;

  public static final String SERIALIZED_NAME_LINE_ITEM_COST = "lineItemCost";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_COST)
  private Amount lineItemCost;

  public static final String SERIALIZED_NAME_LINE_ITEM_FULFILLMENT_INSTRUCTIONS = "lineItemFulfillmentInstructions";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_FULFILLMENT_INSTRUCTIONS)
  private LineItemFulfillmentInstructions lineItemFulfillmentInstructions;

  public static final String SERIALIZED_NAME_LINE_ITEM_FULFILLMENT_STATUS = "lineItemFulfillmentStatus";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_FULFILLMENT_STATUS)
  private String lineItemFulfillmentStatus;

  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_LINKED_ORDER_LINE_ITEMS = "linkedOrderLineItems";
  @SerializedName(SERIALIZED_NAME_LINKED_ORDER_LINE_ITEMS)
  private List<LinkedOrderLineItem> linkedOrderLineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTING_MARKETPLACE_ID = "listingMarketplaceId";
  @SerializedName(SERIALIZED_NAME_LISTING_MARKETPLACE_ID)
  private String listingMarketplaceId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private LineItemProperties properties;

  public static final String SERIALIZED_NAME_PURCHASE_MARKETPLACE_ID = "purchaseMarketplaceId";
  @SerializedName(SERIALIZED_NAME_PURCHASE_MARKETPLACE_ID)
  private String purchaseMarketplaceId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<LineItemRefund> refunds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SOLD_FORMAT = "soldFormat";
  @SerializedName(SERIALIZED_NAME_SOLD_FORMAT)
  private String soldFormat;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<Tax> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Amount total;

  public static final String SERIALIZED_NAME_VARIATION_ASPECTS = "variationAspects";
  @SerializedName(SERIALIZED_NAME_VARIATION_ASPECTS)
  private List<NameValuePair> variationAspects = new ArrayList<>();

  public LineItem() {
  }

  public LineItem appliedPromotions(List<AppliedPromotion> appliedPromotions) {
    this.appliedPromotions = appliedPromotions;
    return this;
  }

  public LineItem addAppliedPromotionsItem(AppliedPromotion appliedPromotionsItem) {
    if (this.appliedPromotions == null) {
      this.appliedPromotions = new ArrayList<>();
    }
    this.appliedPromotions.add(appliedPromotionsItem);
    return this;
  }

  /**
   * This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item.
   * @return appliedPromotions
   */
  @javax.annotation.Nullable
  public List<AppliedPromotion> getAppliedPromotions() {
    return appliedPromotions;
  }

  public void setAppliedPromotions(List<AppliedPromotion> appliedPromotions) {
    this.appliedPromotions = appliedPromotions;
  }


  public LineItem deliveryCost(DeliveryCost deliveryCost) {
    this.deliveryCost = deliveryCost;
    return this;
  }

  /**
   * Get deliveryCost
   * @return deliveryCost
   */
  @javax.annotation.Nullable
  public DeliveryCost getDeliveryCost() {
    return deliveryCost;
  }

  public void setDeliveryCost(DeliveryCost deliveryCost) {
    this.deliveryCost = deliveryCost;
  }


  public LineItem discountedLineItemCost(Amount discountedLineItemCost) {
    this.discountedLineItemCost = discountedLineItemCost;
    return this;
  }

  /**
   * Get discountedLineItemCost
   * @return discountedLineItemCost
   */
  @javax.annotation.Nullable
  public Amount getDiscountedLineItemCost() {
    return discountedLineItemCost;
  }

  public void setDiscountedLineItemCost(Amount discountedLineItemCost) {
    this.discountedLineItemCost = discountedLineItemCost;
  }


  public LineItem ebayCollectAndRemitTaxes(List<EbayCollectAndRemitTax> ebayCollectAndRemitTaxes) {
    this.ebayCollectAndRemitTaxes = ebayCollectAndRemitTaxes;
    return this;
  }

  public LineItem addEbayCollectAndRemitTaxesItem(EbayCollectAndRemitTax ebayCollectAndRemitTaxesItem) {
    if (this.ebayCollectAndRemitTaxes == null) {
      this.ebayCollectAndRemitTaxes = new ArrayList<>();
    }
    this.ebayCollectAndRemitTaxes.add(ebayCollectAndRemitTaxesItem);
    return this;
  }

  /**
   * This container will be returned if the order line item is subject to a &#39;Collect and Remit&#39; tax that eBay will collect and remit to the proper taxing authority on the buyer&#39;s behalf.&lt;br&gt;&lt;br&gt;&#39;Collect and Remit&#39; tax includes:&lt;ul&gt;&lt;li&gt;US state-mandated sales tax&lt;/li&gt;&lt;li&gt;Federal and Provincial Sales Tax in Canada&lt;/li&gt;&lt;li&gt;&#39;Goods and Services&#39; tax in Canada, Australia, and New Zealand&lt;/li&gt;&lt;li&gt;VAT collected for the UK and EU countries&lt;/li&gt;&lt;/ul&gt;The amount of this tax is shown in the &lt;strong&gt;amount&lt;/strong&gt; field, and the type of tax is shown in the &lt;strong&gt;taxType&lt;/strong&gt; field.&lt;br&gt;&lt;br&gt;eBay will display the tax type and amount during checkout in accordance with the buyer&#39;s address, and handle collection and remittance of the tax without requiring the seller to take any action.
   * @return ebayCollectAndRemitTaxes
   */
  @javax.annotation.Nullable
  public List<EbayCollectAndRemitTax> getEbayCollectAndRemitTaxes() {
    return ebayCollectAndRemitTaxes;
  }

  public void setEbayCollectAndRemitTaxes(List<EbayCollectAndRemitTax> ebayCollectAndRemitTaxes) {
    this.ebayCollectAndRemitTaxes = ebayCollectAndRemitTaxes;
  }


  public LineItem ebayCollectedCharges(EbayCollectedCharges ebayCollectedCharges) {
    this.ebayCollectedCharges = ebayCollectedCharges;
    return this;
  }

  /**
   * Get ebayCollectedCharges
   * @return ebayCollectedCharges
   */
  @javax.annotation.Nullable
  public EbayCollectedCharges getEbayCollectedCharges() {
    return ebayCollectedCharges;
  }

  public void setEbayCollectedCharges(EbayCollectedCharges ebayCollectedCharges) {
    this.ebayCollectedCharges = ebayCollectedCharges;
  }


  public LineItem giftDetails(GiftDetails giftDetails) {
    this.giftDetails = giftDetails;
    return this;
  }

  /**
   * Get giftDetails
   * @return giftDetails
   */
  @javax.annotation.Nullable
  public GiftDetails getGiftDetails() {
    return giftDetails;
  }

  public void setGiftDetails(GiftDetails giftDetails) {
    this.giftDetails = giftDetails;
  }


  public LineItem itemLocation(ItemLocation itemLocation) {
    this.itemLocation = itemLocation;
    return this;
  }

  /**
   * Get itemLocation
   * @return itemLocation
   */
  @javax.annotation.Nullable
  public ItemLocation getItemLocation() {
    return itemLocation;
  }

  public void setItemLocation(ItemLocation itemLocation) {
    this.itemLocation = itemLocation;
  }


  public LineItem legacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
    return this;
  }

  /**
   * The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the &lt;strong&gt;listingId&lt;/strong&gt; instead.
   * @return legacyItemId
   */
  @javax.annotation.Nullable
  public String getLegacyItemId() {
    return legacyItemId;
  }

  public void setLegacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
  }


  public LineItem legacyVariationId(String legacyVariationId) {
    this.legacyVariationId = legacyVariationId;
    return this;
  }

  /**
   * The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing.
   * @return legacyVariationId
   */
  @javax.annotation.Nullable
  public String getLegacyVariationId() {
    return legacyVariationId;
  }

  public void setLegacyVariationId(String legacyVariationId) {
    this.legacyVariationId = legacyVariationId;
  }


  public LineItem lineItemCost(Amount lineItemCost) {
    this.lineItemCost = lineItemCost;
    return this;
  }

  /**
   * Get lineItemCost
   * @return lineItemCost
   */
  @javax.annotation.Nullable
  public Amount getLineItemCost() {
    return lineItemCost;
  }

  public void setLineItemCost(Amount lineItemCost) {
    this.lineItemCost = lineItemCost;
  }


  public LineItem lineItemFulfillmentInstructions(LineItemFulfillmentInstructions lineItemFulfillmentInstructions) {
    this.lineItemFulfillmentInstructions = lineItemFulfillmentInstructions;
    return this;
  }

  /**
   * Get lineItemFulfillmentInstructions
   * @return lineItemFulfillmentInstructions
   */
  @javax.annotation.Nullable
  public LineItemFulfillmentInstructions getLineItemFulfillmentInstructions() {
    return lineItemFulfillmentInstructions;
  }

  public void setLineItemFulfillmentInstructions(LineItemFulfillmentInstructions lineItemFulfillmentInstructions) {
    this.lineItemFulfillmentInstructions = lineItemFulfillmentInstructions;
  }


  public LineItem lineItemFulfillmentStatus(String lineItemFulfillmentStatus) {
    this.lineItemFulfillmentStatus = lineItemFulfillmentStatus;
    return this;
  }

  /**
   * This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:LineItemFulfillmentStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return lineItemFulfillmentStatus
   */
  @javax.annotation.Nullable
  public String getLineItemFulfillmentStatus() {
    return lineItemFulfillmentStatus;
  }

  public void setLineItemFulfillmentStatus(String lineItemFulfillmentStatus) {
    this.lineItemFulfillmentStatus = lineItemFulfillmentStatus;
  }


  public LineItem lineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
    return this;
  }

  /**
   * This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller.
   * @return lineItemId
   */
  @javax.annotation.Nullable
  public String getLineItemId() {
    return lineItemId;
  }

  public void setLineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
  }


  public LineItem linkedOrderLineItems(List<LinkedOrderLineItem> linkedOrderLineItems) {
    this.linkedOrderLineItems = linkedOrderLineItems;
    return this;
  }

  public LineItem addLinkedOrderLineItemsItem(LinkedOrderLineItem linkedOrderLineItemsItem) {
    if (this.linkedOrderLineItems == null) {
      this.linkedOrderLineItems = new ArrayList<>();
    }
    this.linkedOrderLineItems.add(linkedOrderLineItemsItem);
    return this;
  }

  /**
   * An array of one or more line items related to the corresponding order, but not a part of that order. Details include the order ID, line item ID, and title of the linked line item, the seller of that item, item specifics, estimated delivery times, and shipment tracking (if available).
   * @return linkedOrderLineItems
   */
  @javax.annotation.Nullable
  public List<LinkedOrderLineItem> getLinkedOrderLineItems() {
    return linkedOrderLineItems;
  }

  public void setLinkedOrderLineItems(List<LinkedOrderLineItem> linkedOrderLineItems) {
    this.linkedOrderLineItems = linkedOrderLineItems;
  }


  public LineItem listingMarketplaceId(String listingMarketplaceId) {
    this.listingMarketplaceId = listingMarketplaceId;
    return this;
  }

  /**
   * The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return listingMarketplaceId
   */
  @javax.annotation.Nullable
  public String getListingMarketplaceId() {
    return listingMarketplaceId;
  }

  public void setListingMarketplaceId(String listingMarketplaceId) {
    this.listingMarketplaceId = listingMarketplaceId;
  }


  public LineItem properties(LineItemProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public LineItemProperties getProperties() {
    return properties;
  }

  public void setProperties(LineItemProperties properties) {
    this.properties = properties;
  }


  public LineItem purchaseMarketplaceId(String purchaseMarketplaceId) {
    this.purchaseMarketplaceId = purchaseMarketplaceId;
    return this;
  }

  /**
   * The unique identifier of the eBay marketplace where the line item was listed. Often, the &lt;strong&gt;listingMarketplaceId&lt;/strong&gt; and the &lt;strong&gt;purchaseMarketplaceId&lt;/strong&gt; identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return purchaseMarketplaceId
   */
  @javax.annotation.Nullable
  public String getPurchaseMarketplaceId() {
    return purchaseMarketplaceId;
  }

  public void setPurchaseMarketplaceId(String purchaseMarketplaceId) {
    this.purchaseMarketplaceId = purchaseMarketplaceId;
  }


  public LineItem quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of units of the line item in the order. These are represented as a group by a single &lt;b&gt;lineItemId&lt;/b&gt;.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public LineItem refunds(List<LineItemRefund> refunds) {
    this.refunds = refunds;
    return this;
  }

  public LineItem addRefundsItem(LineItemRefund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

  /**
   * This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.
   * @return refunds
   */
  @javax.annotation.Nullable
  public List<LineItemRefund> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<LineItemRefund> refunds) {
    this.refunds = refunds;
  }


  public LineItem sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller&#39;s eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public LineItem soldFormat(String soldFormat) {
    this.soldFormat = soldFormat;
    return this;
  }

  /**
   * The eBay listing type of the line item. The most common listing types are &lt;code&gt;AUCTION&lt;/code&gt; and &lt;code&gt;FIXED_PRICE&lt;/code&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:SoldFormatEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return soldFormat
   */
  @javax.annotation.Nullable
  public String getSoldFormat() {
    return soldFormat;
  }

  public void setSoldFormat(String soldFormat) {
    this.soldFormat = soldFormat;
  }


  public LineItem taxes(List<Tax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public LineItem addTaxesItem(Tax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item.
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<Tax> taxes) {
    this.taxes = taxes;
  }


  public LineItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the listing.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LineItem total(Amount total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Amount getTotal() {
    return total;
  }

  public void setTotal(Amount total) {
    this.total = total;
  }


  public LineItem variationAspects(List<NameValuePair> variationAspects) {
    this.variationAspects = variationAspects;
    return this;
  }

  public LineItem addVariationAspectsItem(NameValuePair variationAspectsItem) {
    if (this.variationAspects == null) {
      this.variationAspects = new ArrayList<>();
    }
    this.variationAspects.add(variationAspectsItem);
    return this;
  }

  /**
   * An array of aspect name-value pairs that identifies the specific variation of a multi-variation listing. This array can contain multiple name-value pairs, such as &lt;code&gt;color:blue&lt;/code&gt; and &lt;code&gt;size:large&lt;/code&gt;, and will only be returned for orders created from a multiple-variation listing.
   * @return variationAspects
   */
  @javax.annotation.Nullable
  public List<NameValuePair> getVariationAspects() {
    return variationAspects;
  }

  public void setVariationAspects(List<NameValuePair> variationAspects) {
    this.variationAspects = variationAspects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItem lineItem = (LineItem) o;
    return Objects.equals(this.appliedPromotions, lineItem.appliedPromotions) &&
        Objects.equals(this.deliveryCost, lineItem.deliveryCost) &&
        Objects.equals(this.discountedLineItemCost, lineItem.discountedLineItemCost) &&
        Objects.equals(this.ebayCollectAndRemitTaxes, lineItem.ebayCollectAndRemitTaxes) &&
        Objects.equals(this.ebayCollectedCharges, lineItem.ebayCollectedCharges) &&
        Objects.equals(this.giftDetails, lineItem.giftDetails) &&
        Objects.equals(this.itemLocation, lineItem.itemLocation) &&
        Objects.equals(this.legacyItemId, lineItem.legacyItemId) &&
        Objects.equals(this.legacyVariationId, lineItem.legacyVariationId) &&
        Objects.equals(this.lineItemCost, lineItem.lineItemCost) &&
        Objects.equals(this.lineItemFulfillmentInstructions, lineItem.lineItemFulfillmentInstructions) &&
        Objects.equals(this.lineItemFulfillmentStatus, lineItem.lineItemFulfillmentStatus) &&
        Objects.equals(this.lineItemId, lineItem.lineItemId) &&
        Objects.equals(this.linkedOrderLineItems, lineItem.linkedOrderLineItems) &&
        Objects.equals(this.listingMarketplaceId, lineItem.listingMarketplaceId) &&
        Objects.equals(this.properties, lineItem.properties) &&
        Objects.equals(this.purchaseMarketplaceId, lineItem.purchaseMarketplaceId) &&
        Objects.equals(this.quantity, lineItem.quantity) &&
        Objects.equals(this.refunds, lineItem.refunds) &&
        Objects.equals(this.sku, lineItem.sku) &&
        Objects.equals(this.soldFormat, lineItem.soldFormat) &&
        Objects.equals(this.taxes, lineItem.taxes) &&
        Objects.equals(this.title, lineItem.title) &&
        Objects.equals(this.total, lineItem.total) &&
        Objects.equals(this.variationAspects, lineItem.variationAspects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedPromotions, deliveryCost, discountedLineItemCost, ebayCollectAndRemitTaxes, ebayCollectedCharges, giftDetails, itemLocation, legacyItemId, legacyVariationId, lineItemCost, lineItemFulfillmentInstructions, lineItemFulfillmentStatus, lineItemId, linkedOrderLineItems, listingMarketplaceId, properties, purchaseMarketplaceId, quantity, refunds, sku, soldFormat, taxes, title, total, variationAspects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItem {\n");
    sb.append("    appliedPromotions: ").append(toIndentedString(appliedPromotions)).append("\n");
    sb.append("    deliveryCost: ").append(toIndentedString(deliveryCost)).append("\n");
    sb.append("    discountedLineItemCost: ").append(toIndentedString(discountedLineItemCost)).append("\n");
    sb.append("    ebayCollectAndRemitTaxes: ").append(toIndentedString(ebayCollectAndRemitTaxes)).append("\n");
    sb.append("    ebayCollectedCharges: ").append(toIndentedString(ebayCollectedCharges)).append("\n");
    sb.append("    giftDetails: ").append(toIndentedString(giftDetails)).append("\n");
    sb.append("    itemLocation: ").append(toIndentedString(itemLocation)).append("\n");
    sb.append("    legacyItemId: ").append(toIndentedString(legacyItemId)).append("\n");
    sb.append("    legacyVariationId: ").append(toIndentedString(legacyVariationId)).append("\n");
    sb.append("    lineItemCost: ").append(toIndentedString(lineItemCost)).append("\n");
    sb.append("    lineItemFulfillmentInstructions: ").append(toIndentedString(lineItemFulfillmentInstructions)).append("\n");
    sb.append("    lineItemFulfillmentStatus: ").append(toIndentedString(lineItemFulfillmentStatus)).append("\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    linkedOrderLineItems: ").append(toIndentedString(linkedOrderLineItems)).append("\n");
    sb.append("    listingMarketplaceId: ").append(toIndentedString(listingMarketplaceId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    purchaseMarketplaceId: ").append(toIndentedString(purchaseMarketplaceId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    soldFormat: ").append(toIndentedString(soldFormat)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    variationAspects: ").append(toIndentedString(variationAspects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appliedPromotions");
    openapiFields.add("deliveryCost");
    openapiFields.add("discountedLineItemCost");
    openapiFields.add("ebayCollectAndRemitTaxes");
    openapiFields.add("ebayCollectedCharges");
    openapiFields.add("giftDetails");
    openapiFields.add("itemLocation");
    openapiFields.add("legacyItemId");
    openapiFields.add("legacyVariationId");
    openapiFields.add("lineItemCost");
    openapiFields.add("lineItemFulfillmentInstructions");
    openapiFields.add("lineItemFulfillmentStatus");
    openapiFields.add("lineItemId");
    openapiFields.add("linkedOrderLineItems");
    openapiFields.add("listingMarketplaceId");
    openapiFields.add("properties");
    openapiFields.add("purchaseMarketplaceId");
    openapiFields.add("quantity");
    openapiFields.add("refunds");
    openapiFields.add("sku");
    openapiFields.add("soldFormat");
    openapiFields.add("taxes");
    openapiFields.add("title");
    openapiFields.add("total");
    openapiFields.add("variationAspects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItem is not found in the empty JSON string", LineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("appliedPromotions") != null && !jsonObj.get("appliedPromotions").isJsonNull()) {
        JsonArray jsonArrayappliedPromotions = jsonObj.getAsJsonArray("appliedPromotions");
        if (jsonArrayappliedPromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appliedPromotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appliedPromotions` to be an array in the JSON string but got `%s`", jsonObj.get("appliedPromotions").toString()));
          }

          // validate the optional field `appliedPromotions` (array)
          for (int i = 0; i < jsonArrayappliedPromotions.size(); i++) {
            AppliedPromotion.validateJsonElement(jsonArrayappliedPromotions.get(i));
          };
        }
      }
      // validate the optional field `deliveryCost`
      if (jsonObj.get("deliveryCost") != null && !jsonObj.get("deliveryCost").isJsonNull()) {
        DeliveryCost.validateJsonElement(jsonObj.get("deliveryCost"));
      }
      // validate the optional field `discountedLineItemCost`
      if (jsonObj.get("discountedLineItemCost") != null && !jsonObj.get("discountedLineItemCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("discountedLineItemCost"));
      }
      if (jsonObj.get("ebayCollectAndRemitTaxes") != null && !jsonObj.get("ebayCollectAndRemitTaxes").isJsonNull()) {
        JsonArray jsonArrayebayCollectAndRemitTaxes = jsonObj.getAsJsonArray("ebayCollectAndRemitTaxes");
        if (jsonArrayebayCollectAndRemitTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ebayCollectAndRemitTaxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ebayCollectAndRemitTaxes` to be an array in the JSON string but got `%s`", jsonObj.get("ebayCollectAndRemitTaxes").toString()));
          }

          // validate the optional field `ebayCollectAndRemitTaxes` (array)
          for (int i = 0; i < jsonArrayebayCollectAndRemitTaxes.size(); i++) {
            EbayCollectAndRemitTax.validateJsonElement(jsonArrayebayCollectAndRemitTaxes.get(i));
          };
        }
      }
      // validate the optional field `ebayCollectedCharges`
      if (jsonObj.get("ebayCollectedCharges") != null && !jsonObj.get("ebayCollectedCharges").isJsonNull()) {
        EbayCollectedCharges.validateJsonElement(jsonObj.get("ebayCollectedCharges"));
      }
      // validate the optional field `giftDetails`
      if (jsonObj.get("giftDetails") != null && !jsonObj.get("giftDetails").isJsonNull()) {
        GiftDetails.validateJsonElement(jsonObj.get("giftDetails"));
      }
      // validate the optional field `itemLocation`
      if (jsonObj.get("itemLocation") != null && !jsonObj.get("itemLocation").isJsonNull()) {
        ItemLocation.validateJsonElement(jsonObj.get("itemLocation"));
      }
      if ((jsonObj.get("legacyItemId") != null && !jsonObj.get("legacyItemId").isJsonNull()) && !jsonObj.get("legacyItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyItemId").toString()));
      }
      if ((jsonObj.get("legacyVariationId") != null && !jsonObj.get("legacyVariationId").isJsonNull()) && !jsonObj.get("legacyVariationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyVariationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyVariationId").toString()));
      }
      // validate the optional field `lineItemCost`
      if (jsonObj.get("lineItemCost") != null && !jsonObj.get("lineItemCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("lineItemCost"));
      }
      // validate the optional field `lineItemFulfillmentInstructions`
      if (jsonObj.get("lineItemFulfillmentInstructions") != null && !jsonObj.get("lineItemFulfillmentInstructions").isJsonNull()) {
        LineItemFulfillmentInstructions.validateJsonElement(jsonObj.get("lineItemFulfillmentInstructions"));
      }
      if ((jsonObj.get("lineItemFulfillmentStatus") != null && !jsonObj.get("lineItemFulfillmentStatus").isJsonNull()) && !jsonObj.get("lineItemFulfillmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemFulfillmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemFulfillmentStatus").toString()));
      }
      if ((jsonObj.get("lineItemId") != null && !jsonObj.get("lineItemId").isJsonNull()) && !jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      if (jsonObj.get("linkedOrderLineItems") != null && !jsonObj.get("linkedOrderLineItems").isJsonNull()) {
        JsonArray jsonArraylinkedOrderLineItems = jsonObj.getAsJsonArray("linkedOrderLineItems");
        if (jsonArraylinkedOrderLineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedOrderLineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedOrderLineItems` to be an array in the JSON string but got `%s`", jsonObj.get("linkedOrderLineItems").toString()));
          }

          // validate the optional field `linkedOrderLineItems` (array)
          for (int i = 0; i < jsonArraylinkedOrderLineItems.size(); i++) {
            LinkedOrderLineItem.validateJsonElement(jsonArraylinkedOrderLineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("listingMarketplaceId") != null && !jsonObj.get("listingMarketplaceId").isJsonNull()) && !jsonObj.get("listingMarketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingMarketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingMarketplaceId").toString()));
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        LineItemProperties.validateJsonElement(jsonObj.get("properties"));
      }
      if ((jsonObj.get("purchaseMarketplaceId") != null && !jsonObj.get("purchaseMarketplaceId").isJsonNull()) && !jsonObj.get("purchaseMarketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseMarketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseMarketplaceId").toString()));
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            LineItemRefund.validateJsonElement(jsonArrayrefunds.get(i));
          };
        }
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("soldFormat") != null && !jsonObj.get("soldFormat").isJsonNull()) && !jsonObj.get("soldFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soldFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soldFormat").toString()));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("total"));
      }
      if (jsonObj.get("variationAspects") != null && !jsonObj.get("variationAspects").isJsonNull()) {
        JsonArray jsonArrayvariationAspects = jsonObj.getAsJsonArray("variationAspects");
        if (jsonArrayvariationAspects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variationAspects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variationAspects` to be an array in the JSON string but got `%s`", jsonObj.get("variationAspects").toString()));
          }

          // validate the optional field `variationAspects` (array)
          for (int i = 0; i < jsonArrayvariationAspects.size(); i++) {
            NameValuePair.validateJsonElement(jsonArrayvariationAspects.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItem>() {
           @Override
           public void write(JsonWriter out, LineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItem
   * @throws IOException if the JSON string is invalid with respect to LineItem
   */
  public static LineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItem.class);
  }

  /**
   * Convert an instance of LineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

