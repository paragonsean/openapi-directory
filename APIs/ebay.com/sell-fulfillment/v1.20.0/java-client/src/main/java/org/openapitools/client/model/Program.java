/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EbayFulfillmentProgram;
import org.openapitools.client.model.EbayInternationalShipping;
import org.openapitools.client.model.EbayShipping;
import org.openapitools.client.model.EbayVaultProgram;
import org.openapitools.client.model.PostSaleAuthenticationProgram;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is returned for order line items eligible for the Authenticity Guarantee service and/or for order line items fulfilled by the eBay Fulfillment program or eBay shipping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Program {
  public static final String SERIALIZED_NAME_AUTHENTICITY_VERIFICATION = "authenticityVerification";
  @SerializedName(SERIALIZED_NAME_AUTHENTICITY_VERIFICATION)
  private PostSaleAuthenticationProgram authenticityVerification;

  public static final String SERIALIZED_NAME_EBAY_INTERNATIONAL_SHIPPING = "ebayInternationalShipping";
  @SerializedName(SERIALIZED_NAME_EBAY_INTERNATIONAL_SHIPPING)
  private EbayInternationalShipping ebayInternationalShipping;

  public static final String SERIALIZED_NAME_EBAY_SHIPPING = "ebayShipping";
  @SerializedName(SERIALIZED_NAME_EBAY_SHIPPING)
  private EbayShipping ebayShipping;

  public static final String SERIALIZED_NAME_EBAY_VAULT = "ebayVault";
  @SerializedName(SERIALIZED_NAME_EBAY_VAULT)
  private EbayVaultProgram ebayVault;

  public static final String SERIALIZED_NAME_FULFILLMENT_PROGRAM = "fulfillmentProgram";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_PROGRAM)
  private EbayFulfillmentProgram fulfillmentProgram;

  public Program() {
  }

  public Program authenticityVerification(PostSaleAuthenticationProgram authenticityVerification) {
    this.authenticityVerification = authenticityVerification;
    return this;
  }

  /**
   * Get authenticityVerification
   * @return authenticityVerification
   */
  @javax.annotation.Nullable
  public PostSaleAuthenticationProgram getAuthenticityVerification() {
    return authenticityVerification;
  }

  public void setAuthenticityVerification(PostSaleAuthenticationProgram authenticityVerification) {
    this.authenticityVerification = authenticityVerification;
  }


  public Program ebayInternationalShipping(EbayInternationalShipping ebayInternationalShipping) {
    this.ebayInternationalShipping = ebayInternationalShipping;
    return this;
  }

  /**
   * Get ebayInternationalShipping
   * @return ebayInternationalShipping
   */
  @javax.annotation.Nullable
  public EbayInternationalShipping getEbayInternationalShipping() {
    return ebayInternationalShipping;
  }

  public void setEbayInternationalShipping(EbayInternationalShipping ebayInternationalShipping) {
    this.ebayInternationalShipping = ebayInternationalShipping;
  }


  public Program ebayShipping(EbayShipping ebayShipping) {
    this.ebayShipping = ebayShipping;
    return this;
  }

  /**
   * Get ebayShipping
   * @return ebayShipping
   */
  @javax.annotation.Nullable
  public EbayShipping getEbayShipping() {
    return ebayShipping;
  }

  public void setEbayShipping(EbayShipping ebayShipping) {
    this.ebayShipping = ebayShipping;
  }


  public Program ebayVault(EbayVaultProgram ebayVault) {
    this.ebayVault = ebayVault;
    return this;
  }

  /**
   * Get ebayVault
   * @return ebayVault
   */
  @javax.annotation.Nullable
  public EbayVaultProgram getEbayVault() {
    return ebayVault;
  }

  public void setEbayVault(EbayVaultProgram ebayVault) {
    this.ebayVault = ebayVault;
  }


  public Program fulfillmentProgram(EbayFulfillmentProgram fulfillmentProgram) {
    this.fulfillmentProgram = fulfillmentProgram;
    return this;
  }

  /**
   * Get fulfillmentProgram
   * @return fulfillmentProgram
   */
  @javax.annotation.Nullable
  public EbayFulfillmentProgram getFulfillmentProgram() {
    return fulfillmentProgram;
  }

  public void setFulfillmentProgram(EbayFulfillmentProgram fulfillmentProgram) {
    this.fulfillmentProgram = fulfillmentProgram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Program program = (Program) o;
    return Objects.equals(this.authenticityVerification, program.authenticityVerification) &&
        Objects.equals(this.ebayInternationalShipping, program.ebayInternationalShipping) &&
        Objects.equals(this.ebayShipping, program.ebayShipping) &&
        Objects.equals(this.ebayVault, program.ebayVault) &&
        Objects.equals(this.fulfillmentProgram, program.fulfillmentProgram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticityVerification, ebayInternationalShipping, ebayShipping, ebayVault, fulfillmentProgram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Program {\n");
    sb.append("    authenticityVerification: ").append(toIndentedString(authenticityVerification)).append("\n");
    sb.append("    ebayInternationalShipping: ").append(toIndentedString(ebayInternationalShipping)).append("\n");
    sb.append("    ebayShipping: ").append(toIndentedString(ebayShipping)).append("\n");
    sb.append("    ebayVault: ").append(toIndentedString(ebayVault)).append("\n");
    sb.append("    fulfillmentProgram: ").append(toIndentedString(fulfillmentProgram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticityVerification");
    openapiFields.add("ebayInternationalShipping");
    openapiFields.add("ebayShipping");
    openapiFields.add("ebayVault");
    openapiFields.add("fulfillmentProgram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Program
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Program.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Program is not found in the empty JSON string", Program.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Program.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Program` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authenticityVerification`
      if (jsonObj.get("authenticityVerification") != null && !jsonObj.get("authenticityVerification").isJsonNull()) {
        PostSaleAuthenticationProgram.validateJsonElement(jsonObj.get("authenticityVerification"));
      }
      // validate the optional field `ebayInternationalShipping`
      if (jsonObj.get("ebayInternationalShipping") != null && !jsonObj.get("ebayInternationalShipping").isJsonNull()) {
        EbayInternationalShipping.validateJsonElement(jsonObj.get("ebayInternationalShipping"));
      }
      // validate the optional field `ebayShipping`
      if (jsonObj.get("ebayShipping") != null && !jsonObj.get("ebayShipping").isJsonNull()) {
        EbayShipping.validateJsonElement(jsonObj.get("ebayShipping"));
      }
      // validate the optional field `ebayVault`
      if (jsonObj.get("ebayVault") != null && !jsonObj.get("ebayVault").isJsonNull()) {
        EbayVaultProgram.validateJsonElement(jsonObj.get("ebayVault"));
      }
      // validate the optional field `fulfillmentProgram`
      if (jsonObj.get("fulfillmentProgram") != null && !jsonObj.get("fulfillmentProgram").isJsonNull()) {
        EbayFulfillmentProgram.validateJsonElement(jsonObj.get("fulfillmentProgram"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Program.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Program' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Program> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Program.class));

       return (TypeAdapter<T>) new TypeAdapter<Program>() {
           @Override
           public void write(JsonWriter out, Program value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Program read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Program given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Program
   * @throws IOException if the JSON string is invalid with respect to Program
   */
  public static Program fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Program.class);
  }

  /**
   * Convert an instance of Program to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

