/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileEvidence;
import org.openapitools.client.model.OrderLineItems;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the request payload of the &lt;strong&gt;updateEvidence&lt;/strong&gt; method. The &lt;strong&gt;updateEvidence&lt;/strong&gt; method is used to update an existing evidence set against a payment dispute with one or more evidence files.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateEvidencePaymentDisputeRequest {
  public static final String SERIALIZED_NAME_EVIDENCE_ID = "evidenceId";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_ID)
  private String evidenceId;

  public static final String SERIALIZED_NAME_EVIDENCE_TYPE = "evidenceType";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_TYPE)
  private String evidenceType;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<FileEvidence> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderLineItems> lineItems = new ArrayList<>();

  public UpdateEvidencePaymentDisputeRequest() {
  }

  public UpdateEvidencePaymentDisputeRequest evidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
    return this;
  }

  /**
   * The unique identifier of the evidence set that is being updated with new evidence files.
   * @return evidenceId
   */
  @javax.annotation.Nullable
  public String getEvidenceId() {
    return evidenceId;
  }

  public void setEvidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
  }


  public UpdateEvidencePaymentDisputeRequest evidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
    return this;
  }

  /**
   * This field is used to indicate the type of evidence being provided through one or more evidence files. All evidence files (if more than one) should be associated with the evidence type passed in this field. See the &lt;strong&gt;EvidenceTypeEnum&lt;/strong&gt; type for the supported evidence types. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return evidenceType
   */
  @javax.annotation.Nullable
  public String getEvidenceType() {
    return evidenceType;
  }

  public void setEvidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
  }


  public UpdateEvidencePaymentDisputeRequest files(List<FileEvidence> files) {
    this.files = files;
    return this;
  }

  public UpdateEvidencePaymentDisputeRequest addFilesItem(FileEvidence filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * This array is used to specify one or more evidence files that will be added to the evidence set associated with a payment dispute. At least one evidence file must be specified in the &lt;strong&gt;files&lt;/strong&gt; array.&lt;br&gt;&lt;br&gt; The unique identifier of an evidence file is returned in the response payload of the &lt;strong&gt;uploadEvidence&lt;/strong&gt; method.
   * @return files
   */
  @javax.annotation.Nullable
  public List<FileEvidence> getFiles() {
    return files;
  }

  public void setFiles(List<FileEvidence> files) {
    this.files = files;
  }


  public UpdateEvidencePaymentDisputeRequest lineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public UpdateEvidencePaymentDisputeRequest addLineItemsItem(OrderLineItems lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * This required array identifies the order line item(s) for which the evidence file(s) will be applicable. Both the &lt;strong&gt;itemId&lt;/strong&gt; and &lt;strong&gt;lineItemID&lt;/strong&gt; fields are needed to identify each order line item, and both of these values are returned under the &lt;strong&gt;evidenceRequests.lineItems&lt;/strong&gt; array in the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; response.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItems> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEvidencePaymentDisputeRequest updateEvidencePaymentDisputeRequest = (UpdateEvidencePaymentDisputeRequest) o;
    return Objects.equals(this.evidenceId, updateEvidencePaymentDisputeRequest.evidenceId) &&
        Objects.equals(this.evidenceType, updateEvidencePaymentDisputeRequest.evidenceType) &&
        Objects.equals(this.files, updateEvidencePaymentDisputeRequest.files) &&
        Objects.equals(this.lineItems, updateEvidencePaymentDisputeRequest.lineItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidenceId, evidenceType, files, lineItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEvidencePaymentDisputeRequest {\n");
    sb.append("    evidenceId: ").append(toIndentedString(evidenceId)).append("\n");
    sb.append("    evidenceType: ").append(toIndentedString(evidenceType)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evidenceId");
    openapiFields.add("evidenceType");
    openapiFields.add("files");
    openapiFields.add("lineItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEvidencePaymentDisputeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEvidencePaymentDisputeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEvidencePaymentDisputeRequest is not found in the empty JSON string", UpdateEvidencePaymentDisputeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEvidencePaymentDisputeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEvidencePaymentDisputeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evidenceId") != null && !jsonObj.get("evidenceId").isJsonNull()) && !jsonObj.get("evidenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceId").toString()));
      }
      if ((jsonObj.get("evidenceType") != null && !jsonObj.get("evidenceType").isJsonNull()) && !jsonObj.get("evidenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceType").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            FileEvidence.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItems.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEvidencePaymentDisputeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEvidencePaymentDisputeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEvidencePaymentDisputeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEvidencePaymentDisputeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEvidencePaymentDisputeRequest>() {
           @Override
           public void write(JsonWriter out, UpdateEvidencePaymentDisputeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEvidencePaymentDisputeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEvidencePaymentDisputeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEvidencePaymentDisputeRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateEvidencePaymentDisputeRequest
   */
  public static UpdateEvidencePaymentDisputeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEvidencePaymentDisputeRequest.class);
  }

  /**
   * Convert an instance of UpdateEvidencePaymentDisputeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

