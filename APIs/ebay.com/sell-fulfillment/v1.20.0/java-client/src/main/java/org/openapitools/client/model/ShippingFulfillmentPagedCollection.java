/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ShippingFulfillment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains the specifications for the entire collection of shipping fulfillments that are associated with the order specified by a &lt;b&gt;getShippingFulfillments&lt;/b&gt; call. The &lt;b&gt;fulfillments&lt;/b&gt; container returns an array of all the fulfillments in the collection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingFulfillmentPagedCollection {
  public static final String SERIALIZED_NAME_FULFILLMENTS = "fulfillments";
  @SerializedName(SERIALIZED_NAME_FULFILLMENTS)
  private List<ShippingFulfillment> fulfillments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public ShippingFulfillmentPagedCollection() {
  }

  public ShippingFulfillmentPagedCollection fulfillments(List<ShippingFulfillment> fulfillments) {
    this.fulfillments = fulfillments;
    return this;
  }

  public ShippingFulfillmentPagedCollection addFulfillmentsItem(ShippingFulfillment fulfillmentsItem) {
    if (this.fulfillments == null) {
      this.fulfillments = new ArrayList<>();
    }
    this.fulfillments.add(fulfillmentsItem);
    return this;
  }

  /**
   * This array contains one or more fulfillments required for the order that was specified in method endpoint.
   * @return fulfillments
   */
  @javax.annotation.Nullable
  public List<ShippingFulfillment> getFulfillments() {
    return fulfillments;
  }

  public void setFulfillments(List<ShippingFulfillment> fulfillments) {
    this.fulfillments = fulfillments;
  }


  public ShippingFulfillmentPagedCollection total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of fulfillments in the specified order.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If no fulfillments are found for the order, this field is returned with a value of &lt;code&gt;0&lt;/code&gt;.&lt;/span&gt;
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public ShippingFulfillmentPagedCollection warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ShippingFulfillmentPagedCollection addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * This array is only returned if one or more errors or warnings occur with the call request.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingFulfillmentPagedCollection shippingFulfillmentPagedCollection = (ShippingFulfillmentPagedCollection) o;
    return Objects.equals(this.fulfillments, shippingFulfillmentPagedCollection.fulfillments) &&
        Objects.equals(this.total, shippingFulfillmentPagedCollection.total) &&
        Objects.equals(this.warnings, shippingFulfillmentPagedCollection.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fulfillments, total, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingFulfillmentPagedCollection {\n");
    sb.append("    fulfillments: ").append(toIndentedString(fulfillments)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fulfillments");
    openapiFields.add("total");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingFulfillmentPagedCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingFulfillmentPagedCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingFulfillmentPagedCollection is not found in the empty JSON string", ShippingFulfillmentPagedCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingFulfillmentPagedCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingFulfillmentPagedCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fulfillments") != null && !jsonObj.get("fulfillments").isJsonNull()) {
        JsonArray jsonArrayfulfillments = jsonObj.getAsJsonArray("fulfillments");
        if (jsonArrayfulfillments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillments` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillments").toString()));
          }

          // validate the optional field `fulfillments` (array)
          for (int i = 0; i < jsonArrayfulfillments.size(); i++) {
            ShippingFulfillment.validateJsonElement(jsonArrayfulfillments.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingFulfillmentPagedCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingFulfillmentPagedCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingFulfillmentPagedCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingFulfillmentPagedCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingFulfillmentPagedCollection>() {
           @Override
           public void write(JsonWriter out, ShippingFulfillmentPagedCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingFulfillmentPagedCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingFulfillmentPagedCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingFulfillmentPagedCollection
   * @throws IOException if the JSON string is invalid with respect to ShippingFulfillmentPagedCollection
   */
  public static ShippingFulfillmentPagedCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingFulfillmentPagedCollection.class);
  }

  /**
   * Convert an instance of ShippingFulfillmentPagedCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

