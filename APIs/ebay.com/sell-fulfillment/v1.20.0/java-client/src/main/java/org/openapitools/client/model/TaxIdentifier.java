/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;strong&gt;taxIdentifier&lt;/strong&gt; container that is returned in &lt;strong&gt;getOrder&lt;/strong&gt;. The &lt;strong&gt;taxIdentifier&lt;/strong&gt; container consists of taxpayer identification information for buyers from Italy, Spain, or Guatemala. It is currently only returned for orders occurring on the eBay Italy or eBay Spain marketplaces.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, the &lt;strong&gt;taxIdentifier&lt;/strong&gt; container is only returned in &lt;strong&gt;getOrder&lt;/strong&gt; and not in &lt;strong&gt;getOrders&lt;/strong&gt;. So, if a seller wanted to view a buyer&#39;s tax information for a particular order returned in &lt;strong&gt;getOrders&lt;/strong&gt;, that seller would need to use the &lt;strong&gt;orderId&lt;/strong&gt; value for that particular order, and then run a &lt;strong&gt;getOrder&lt;/strong&gt; call against that order ID. &lt;/span&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxIdentifier {
  public static final String SERIALIZED_NAME_ISSUING_COUNTRY = "issuingCountry";
  @SerializedName(SERIALIZED_NAME_ISSUING_COUNTRY)
  private String issuingCountry;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIER_TYPE = "taxIdentifierType";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIER_TYPE)
  private String taxIdentifierType;

  public static final String SERIALIZED_NAME_TAXPAYER_ID = "taxpayerId";
  @SerializedName(SERIALIZED_NAME_TAXPAYER_ID)
  private String taxpayerId;

  public TaxIdentifier() {
  }

  public TaxIdentifier issuingCountry(String issuingCountry) {
    this.issuingCountry = issuingCountry;
    return this;
  }

  /**
   * This two-letter code indicates the country that issued the buyer&#39;s tax ID. The country that the two-letter code represents can be found in the &lt;strong&gt;CountryCodeEnum&lt;/strong&gt; type, or in the  &lt;a href&#x3D;\&quot;https://www.iso.org/iso-3166-country-codes.html \&quot;&gt;ISO 3166&lt;/a&gt; standard. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return issuingCountry
   */
  @javax.annotation.Nullable
  public String getIssuingCountry() {
    return issuingCountry;
  }

  public void setIssuingCountry(String issuingCountry) {
    this.issuingCountry = issuingCountry;
  }


  public TaxIdentifier taxIdentifierType(String taxIdentifierType) {
    this.taxIdentifierType = taxIdentifierType;
    return this;
  }

  /**
   * This enumeration value indicates the type of tax identification being used for the buyer. The different tax types are defined in the &lt;strong&gt;TaxIdentifierTypeEnum&lt;/strong&gt; type. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:TaxIdentifierTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return taxIdentifierType
   */
  @javax.annotation.Nullable
  public String getTaxIdentifierType() {
    return taxIdentifierType;
  }

  public void setTaxIdentifierType(String taxIdentifierType) {
    this.taxIdentifierType = taxIdentifierType;
  }


  public TaxIdentifier taxpayerId(String taxpayerId) {
    this.taxpayerId = taxpayerId;
    return this;
  }

  /**
   * This value is the unique tax ID associated with the buyer. The type of tax identification is shown in the &lt;strong&gt;taxIdentifierType&lt;/strong&gt; field.
   * @return taxpayerId
   */
  @javax.annotation.Nullable
  public String getTaxpayerId() {
    return taxpayerId;
  }

  public void setTaxpayerId(String taxpayerId) {
    this.taxpayerId = taxpayerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxIdentifier taxIdentifier = (TaxIdentifier) o;
    return Objects.equals(this.issuingCountry, taxIdentifier.issuingCountry) &&
        Objects.equals(this.taxIdentifierType, taxIdentifier.taxIdentifierType) &&
        Objects.equals(this.taxpayerId, taxIdentifier.taxpayerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuingCountry, taxIdentifierType, taxpayerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxIdentifier {\n");
    sb.append("    issuingCountry: ").append(toIndentedString(issuingCountry)).append("\n");
    sb.append("    taxIdentifierType: ").append(toIndentedString(taxIdentifierType)).append("\n");
    sb.append("    taxpayerId: ").append(toIndentedString(taxpayerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issuingCountry");
    openapiFields.add("taxIdentifierType");
    openapiFields.add("taxpayerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxIdentifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxIdentifier is not found in the empty JSON string", TaxIdentifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxIdentifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxIdentifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("issuingCountry") != null && !jsonObj.get("issuingCountry").isJsonNull()) && !jsonObj.get("issuingCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingCountry").toString()));
      }
      if ((jsonObj.get("taxIdentifierType") != null && !jsonObj.get("taxIdentifierType").isJsonNull()) && !jsonObj.get("taxIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxIdentifierType").toString()));
      }
      if ((jsonObj.get("taxpayerId") != null && !jsonObj.get("taxpayerId").isJsonNull()) && !jsonObj.get("taxpayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxpayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxpayerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxIdentifier>() {
           @Override
           public void write(JsonWriter out, TaxIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxIdentifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxIdentifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxIdentifier
   * @throws IOException if the JSON string is invalid with respect to TaxIdentifier
   */
  public static TaxIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxIdentifier.class);
  }

  /**
   * Convert an instance of TaxIdentifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

