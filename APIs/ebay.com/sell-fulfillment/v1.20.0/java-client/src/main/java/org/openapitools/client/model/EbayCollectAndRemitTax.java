/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.EbayTaxReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about the type and amount of tax that eBay will collect and remit to the state, province, country, or other taxing authority in the buyer&#39;s location, as required by that taxing authority.&lt;br&gt;&lt;br&gt;&#39;Collect and Remit&#39; tax includes:&lt;ul&gt;&lt;li&gt;US state-mandated sales tax&lt;/li&gt;&lt;li&gt;Federal and Provincial Sales Tax in Canada&lt;/li&gt;&lt;li&gt;&#39;Goods and Services&#39; tax in Canada, Australia, and New Zealand&lt;/li&gt;&lt;li&gt;VAT collected for the UK and EU countries&lt;/li&gt;&lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EbayCollectAndRemitTax {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_COLLECTION_METHOD = "collectionMethod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_METHOD)
  private String collectionMethod;

  public static final String SERIALIZED_NAME_EBAY_REFERENCE = "ebayReference";
  @SerializedName(SERIALIZED_NAME_EBAY_REFERENCE)
  private EbayTaxReference ebayReference;

  public static final String SERIALIZED_NAME_TAX_TYPE = "taxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public EbayCollectAndRemitTax() {
  }

  public EbayCollectAndRemitTax amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public EbayCollectAndRemitTax collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

  /**
   * This field indicates the collection method used to collect the &#39;Collect and Remit&#39; tax for the order. This field is always returned for orders subject to &#39;Collect and Remit&#39; tax, and its value is always &lt;code&gt;NET&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although the &lt;strong&gt;collectionMethod&lt;/strong&gt; field is returned for all orders subject to &#39;Collect and Remit&#39; tax, the &lt;strong&gt;collectionMethod&lt;/strong&gt; field and the &lt;strong&gt;CollectionMethodEnum&lt;/strong&gt; type are not currently of any practical use, although this field may have use in the future. If and when the logic of this field is changed, this note will be updated and a note will also be added to the Release Notes.&lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CollectionMethodEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return collectionMethod
   */
  @javax.annotation.Nullable
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  public EbayCollectAndRemitTax ebayReference(EbayTaxReference ebayReference) {
    this.ebayReference = ebayReference;
    return this;
  }

  /**
   * Get ebayReference
   * @return ebayReference
   */
  @javax.annotation.Nullable
  public EbayTaxReference getEbayReference() {
    return ebayReference;
  }

  public void setEbayReference(EbayTaxReference ebayReference) {
    this.ebayReference = ebayReference;
  }


  public EbayCollectAndRemitTax taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * The type of tax and fees that eBay will collect and remit to the taxing or fee authority. See the &lt;strong&gt;TaxTypeEnum&lt;/strong&gt; type definition for more information about each tax or fee type. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:TaxTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EbayCollectAndRemitTax ebayCollectAndRemitTax = (EbayCollectAndRemitTax) o;
    return Objects.equals(this.amount, ebayCollectAndRemitTax.amount) &&
        Objects.equals(this.collectionMethod, ebayCollectAndRemitTax.collectionMethod) &&
        Objects.equals(this.ebayReference, ebayCollectAndRemitTax.ebayReference) &&
        Objects.equals(this.taxType, ebayCollectAndRemitTax.taxType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, collectionMethod, ebayReference, taxType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EbayCollectAndRemitTax {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("    ebayReference: ").append(toIndentedString(ebayReference)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("collectionMethod");
    openapiFields.add("ebayReference");
    openapiFields.add("taxType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EbayCollectAndRemitTax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EbayCollectAndRemitTax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EbayCollectAndRemitTax is not found in the empty JSON string", EbayCollectAndRemitTax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EbayCollectAndRemitTax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EbayCollectAndRemitTax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amount"));
      }
      if ((jsonObj.get("collectionMethod") != null && !jsonObj.get("collectionMethod").isJsonNull()) && !jsonObj.get("collectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionMethod").toString()));
      }
      // validate the optional field `ebayReference`
      if (jsonObj.get("ebayReference") != null && !jsonObj.get("ebayReference").isJsonNull()) {
        EbayTaxReference.validateJsonElement(jsonObj.get("ebayReference"));
      }
      if ((jsonObj.get("taxType") != null && !jsonObj.get("taxType").isJsonNull()) && !jsonObj.get("taxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EbayCollectAndRemitTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EbayCollectAndRemitTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EbayCollectAndRemitTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EbayCollectAndRemitTax.class));

       return (TypeAdapter<T>) new TypeAdapter<EbayCollectAndRemitTax>() {
           @Override
           public void write(JsonWriter out, EbayCollectAndRemitTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EbayCollectAndRemitTax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EbayCollectAndRemitTax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EbayCollectAndRemitTax
   * @throws IOException if the JSON string is invalid with respect to EbayCollectAndRemitTax
   */
  public static EbayCollectAndRemitTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EbayCollectAndRemitTax.class);
  }

  /**
   * Convert an instance of EbayCollectAndRemitTax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

