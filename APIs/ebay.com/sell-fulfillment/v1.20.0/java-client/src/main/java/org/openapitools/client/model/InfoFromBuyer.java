/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrackingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This container is returned if the buyer is returning one or more line items in an order that is associated with the payment dispute, and that buyer has provided return shipping tracking information and/or a note about the return.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfoFromBuyer {
  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_RETURN_SHIPMENT_TRACKING = "returnShipmentTracking";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPMENT_TRACKING)
  private List<TrackingInfo> returnShipmentTracking = new ArrayList<>();

  public InfoFromBuyer() {
  }

  public InfoFromBuyer note(String note) {
    this.note = note;
    return this;
  }

  /**
   * This field shows any note that was left by the buyer in regard to the dispute.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public InfoFromBuyer returnShipmentTracking(List<TrackingInfo> returnShipmentTracking) {
    this.returnShipmentTracking = returnShipmentTracking;
    return this;
  }

  public InfoFromBuyer addReturnShipmentTrackingItem(TrackingInfo returnShipmentTrackingItem) {
    if (this.returnShipmentTracking == null) {
      this.returnShipmentTracking = new ArrayList<>();
    }
    this.returnShipmentTracking.add(returnShipmentTrackingItem);
    return this;
  }

  /**
   * This array shows shipment tracking information for one or more shipping packages being returned to the buyer after a payment dispute.
   * @return returnShipmentTracking
   */
  @javax.annotation.Nullable
  public List<TrackingInfo> getReturnShipmentTracking() {
    return returnShipmentTracking;
  }

  public void setReturnShipmentTracking(List<TrackingInfo> returnShipmentTracking) {
    this.returnShipmentTracking = returnShipmentTracking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoFromBuyer infoFromBuyer = (InfoFromBuyer) o;
    return Objects.equals(this.note, infoFromBuyer.note) &&
        Objects.equals(this.returnShipmentTracking, infoFromBuyer.returnShipmentTracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(note, returnShipmentTracking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoFromBuyer {\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    returnShipmentTracking: ").append(toIndentedString(returnShipmentTracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("note");
    openapiFields.add("returnShipmentTracking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoFromBuyer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoFromBuyer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoFromBuyer is not found in the empty JSON string", InfoFromBuyer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoFromBuyer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoFromBuyer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (jsonObj.get("returnShipmentTracking") != null && !jsonObj.get("returnShipmentTracking").isJsonNull()) {
        JsonArray jsonArrayreturnShipmentTracking = jsonObj.getAsJsonArray("returnShipmentTracking");
        if (jsonArrayreturnShipmentTracking != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnShipmentTracking").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnShipmentTracking` to be an array in the JSON string but got `%s`", jsonObj.get("returnShipmentTracking").toString()));
          }

          // validate the optional field `returnShipmentTracking` (array)
          for (int i = 0; i < jsonArrayreturnShipmentTracking.size(); i++) {
            TrackingInfo.validateJsonElement(jsonArrayreturnShipmentTracking.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoFromBuyer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoFromBuyer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoFromBuyer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoFromBuyer.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoFromBuyer>() {
           @Override
           public void write(JsonWriter out, InfoFromBuyer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoFromBuyer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoFromBuyer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoFromBuyer
   * @throws IOException if the JSON string is invalid with respect to InfoFromBuyer
   */
  public static InfoFromBuyer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoFromBuyer.class);
  }

  /**
   * Convert an instance of InfoFromBuyer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

