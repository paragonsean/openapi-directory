/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains the specifications for processing the fulfillment of a line item, including the handling window and the delivery window. These fields provide guidance for &lt;i&gt;eBay Guaranteed Delivery&lt;/i&gt; as well as for non-guaranteed delivery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItemFulfillmentInstructions {
  public static final String SERIALIZED_NAME_GUARANTEED_DELIVERY = "guaranteedDelivery";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_DELIVERY)
  private Boolean guaranteedDelivery;

  public static final String SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE = "maxEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE)
  private String maxEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE = "minEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE)
  private String minEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_SHIP_BY_DATE = "shipByDate";
  @SerializedName(SERIALIZED_NAME_SHIP_BY_DATE)
  private String shipByDate;

  public LineItemFulfillmentInstructions() {
  }

  public LineItemFulfillmentInstructions guaranteedDelivery(Boolean guaranteedDelivery) {
    this.guaranteedDelivery = guaranteedDelivery;
    return this;
  }

  /**
   * This field is returned as &lt;code&gt;true&lt;/code&gt; if the order line item is qualified for eBay Guaranteed Delivery, or &lt;code&gt;false&lt;/code&gt; if it is not eligible. Only domestic shipments are available for eBay Guaranteed Delivery. At this time, eBay Guaranteed Delivery is only available to a select number of sellers on the US and Australia sites, but this feature will be enabled on more eBay sites in 2019.&lt;br&gt;&lt;br&gt;  There are two different eBay Guaranteed Delivery options - &#39;Handling time&#39; option and &#39;Door-to-Door&#39; option. With both options, the seller is commiting to getting the order delivered to the buyer within three business days after purchase. &lt;br&gt;&lt;br&gt; With the &#39;Handling time&#39; option, the seller&#39;s stated handling time for a listing must be &#39;same-day&#39; or &#39;1-day&#39;, and at least one of the available shipping service options should have a shipping time that guarantees that the buyer receives the order on time. With this option, eBay will set the &#39;ship-by date&#39; and expected delivery window for the seller, and the seller should just make sure they physically ship the order by the &lt;strong&gt;shipToDate&lt;/strong&gt;.&lt;br&gt;&lt;br&gt; With the &#39;Door-to-door&#39; option, the seller must create regional shipping rate tables (with shipping costs and delivery times based on destination regions), and then apply these regional shipping rates/delivery times to the listing. &lt;br&gt;&lt;br&gt; If a &#39;Door-to-door&#39; order does not arrive on time, the seller must refund the buyer the full shipping cost (if any), and the buyer also has the option of returning the item for a full refund, and the seller will also have to pay the return shipping cost. With &#39;Handling time&#39; option, as long as the seller meets the stated handling time, and ships using the correct shipping service option, eBay will refund the buyer the shipping cost and pay for return shipping label (if buyer wants to return item) if the order arrives after the expected delivery time. &lt;br&gt;&lt;br&gt; For more information on the details and requirements of eBay Guaranteed Delivery, see the &lt;a href&#x3D;\&quot;https://www.ebay.com/help/selling/shipping-items/offering-ebay-guaranteed-delivery?id&#x3D;4645 \&quot; target&#x3D;\&quot;_blank\&quot;&gt;Offering eBay Guaranteed Delivery&lt;/a&gt; help topic.&lt;br&gt;&lt;br&gt; This field will always be returned regardless of whether the listing site offers eBay Guaranteed Delivery or if the seller is opted in to the feature.
   * @return guaranteedDelivery
   */
  @javax.annotation.Nullable
  public Boolean getGuaranteedDelivery() {
    return guaranteedDelivery;
  }

  public void setGuaranteedDelivery(Boolean guaranteedDelivery) {
    this.guaranteedDelivery = guaranteedDelivery;
  }


  public LineItemFulfillmentInstructions maxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
    return this;
  }

  /**
   * The estimated latest date and time that the buyer can expect to receive the line item based on the seller&#39;s stated handling time and the transit times of the available shipping service options. If the listing is eligible for eBay Guaranteed Delivery (value of &lt;b&gt;guaranteedDelivery&lt;/b&gt; field is &lt;code&gt;true&lt;/code&gt;, the seller must pay extra attention to this date, as a failure to deliver by this date/time can result in a &#39;Late shipment&#39; seller defect, and can affect seller level and Top-Rated Seller status. In addition to the seller defect, buyers will be eligible for a shipping cost refund, and will also be eligible to return the item for a full refund (with no return shipping charge) if they choose. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;&lt;/span&gt;
   * @return maxEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMaxEstimatedDeliveryDate() {
    return maxEstimatedDeliveryDate;
  }

  public void setMaxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
  }


  public LineItemFulfillmentInstructions minEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
    return this;
  }

  /**
   * The estimated earliest date and time that the buyer can expect to receive the line item based on the seller&#39;s stated handling time and the transit times of the available shipping service options.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;&lt;/span&gt;
   * @return minEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMinEstimatedDeliveryDate() {
    return minEstimatedDeliveryDate;
  }

  public void setMinEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
  }


  public LineItemFulfillmentInstructions shipByDate(String shipByDate) {
    this.shipByDate = shipByDate;
    return this;
  }

  /**
   * The latest date and time by which the seller should ship line item in order to meet the expected delivery window. This timestamp will be set by eBay based on time of purchase and the seller&#39;s stated handling time. If the listing is eligible for eBay Guaranteed Delivery (value of &lt;b&gt;guaranteedDelivery&lt;/b&gt; field is &lt;code&gt;true&lt;/code&gt;, the seller must pay extra attention to this date, as a failure to physically ship the line item by this date/time can result in a &#39;Late shipment&#39; seller defect, and can affect seller level and Top-Rated Seller status. In addition to the seller defect, buyers will be eligible for a shipping cost refund, and will also be eligible to return the item for a full refund (with no return shipping charge) if they choose. &lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;&lt;/span&gt;
   * @return shipByDate
   */
  @javax.annotation.Nullable
  public String getShipByDate() {
    return shipByDate;
  }

  public void setShipByDate(String shipByDate) {
    this.shipByDate = shipByDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemFulfillmentInstructions lineItemFulfillmentInstructions = (LineItemFulfillmentInstructions) o;
    return Objects.equals(this.guaranteedDelivery, lineItemFulfillmentInstructions.guaranteedDelivery) &&
        Objects.equals(this.maxEstimatedDeliveryDate, lineItemFulfillmentInstructions.maxEstimatedDeliveryDate) &&
        Objects.equals(this.minEstimatedDeliveryDate, lineItemFulfillmentInstructions.minEstimatedDeliveryDate) &&
        Objects.equals(this.shipByDate, lineItemFulfillmentInstructions.shipByDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guaranteedDelivery, maxEstimatedDeliveryDate, minEstimatedDeliveryDate, shipByDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemFulfillmentInstructions {\n");
    sb.append("    guaranteedDelivery: ").append(toIndentedString(guaranteedDelivery)).append("\n");
    sb.append("    maxEstimatedDeliveryDate: ").append(toIndentedString(maxEstimatedDeliveryDate)).append("\n");
    sb.append("    minEstimatedDeliveryDate: ").append(toIndentedString(minEstimatedDeliveryDate)).append("\n");
    sb.append("    shipByDate: ").append(toIndentedString(shipByDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guaranteedDelivery");
    openapiFields.add("maxEstimatedDeliveryDate");
    openapiFields.add("minEstimatedDeliveryDate");
    openapiFields.add("shipByDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItemFulfillmentInstructions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItemFulfillmentInstructions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemFulfillmentInstructions is not found in the empty JSON string", LineItemFulfillmentInstructions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItemFulfillmentInstructions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemFulfillmentInstructions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxEstimatedDeliveryDate") != null && !jsonObj.get("maxEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("maxEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("minEstimatedDeliveryDate") != null && !jsonObj.get("minEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("minEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("shipByDate") != null && !jsonObj.get("shipByDate").isJsonNull()) && !jsonObj.get("shipByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipByDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemFulfillmentInstructions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemFulfillmentInstructions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemFulfillmentInstructions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemFulfillmentInstructions.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemFulfillmentInstructions>() {
           @Override
           public void write(JsonWriter out, LineItemFulfillmentInstructions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemFulfillmentInstructions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItemFulfillmentInstructions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItemFulfillmentInstructions
   * @throws IOException if the JSON string is invalid with respect to LineItemFulfillmentInstructions
   */
  public static LineItemFulfillmentInstructions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemFulfillmentInstructions.class);
  }

  /**
   * Convert an instance of LineItemFulfillmentInstructions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

