/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about a sales promotion that is applied to a line item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppliedPromotion {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Amount discountAmount;

  public static final String SERIALIZED_NAME_PROMOTION_ID = "promotionId";
  @SerializedName(SERIALIZED_NAME_PROMOTION_ID)
  private String promotionId;

  public AppliedPromotion() {
  }

  public AppliedPromotion description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the applied sales promotion.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AppliedPromotion discountAmount(Amount discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Get discountAmount
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public Amount getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Amount discountAmount) {
    this.discountAmount = discountAmount;
  }


  public AppliedPromotion promotionId(String promotionId) {
    this.promotionId = promotionId;
    return this;
  }

  /**
   * An eBay-generated unique identifier of the sales promotion.&lt;br&gt;&lt;br&gt; Multiple types of sales promotions are available to eBay Store owners, including order size/volume discounts, shipping discounts, special coupons, and price markdowns. Sales promotions can be managed through the Marketing tab of Seller Hub in My eBay, or by using the Trading API&#39;s &lt;b&gt;SetPromotionalSale&lt;/b&gt; call or the Marketing API&#39;s &lt;b&gt;createItemPromotion&lt;/b&gt; method.
   * @return promotionId
   */
  @javax.annotation.Nullable
  public String getPromotionId() {
    return promotionId;
  }

  public void setPromotionId(String promotionId) {
    this.promotionId = promotionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppliedPromotion appliedPromotion = (AppliedPromotion) o;
    return Objects.equals(this.description, appliedPromotion.description) &&
        Objects.equals(this.discountAmount, appliedPromotion.discountAmount) &&
        Objects.equals(this.promotionId, appliedPromotion.promotionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, discountAmount, promotionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppliedPromotion {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    promotionId: ").append(toIndentedString(promotionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("discountAmount");
    openapiFields.add("promotionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppliedPromotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppliedPromotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppliedPromotion is not found in the empty JSON string", AppliedPromotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppliedPromotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppliedPromotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `discountAmount`
      if (jsonObj.get("discountAmount") != null && !jsonObj.get("discountAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("discountAmount"));
      }
      if ((jsonObj.get("promotionId") != null && !jsonObj.get("promotionId").isJsonNull()) && !jsonObj.get("promotionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppliedPromotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppliedPromotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppliedPromotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppliedPromotion.class));

       return (TypeAdapter<T>) new TypeAdapter<AppliedPromotion>() {
           @Override
           public void write(JsonWriter out, AppliedPromotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppliedPromotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppliedPromotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppliedPromotion
   * @throws IOException if the JSON string is invalid with respect to AppliedPromotion
   */
  public static AppliedPromotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppliedPromotion.class);
  }

  /**
   * Convert an instance of AppliedPromotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

