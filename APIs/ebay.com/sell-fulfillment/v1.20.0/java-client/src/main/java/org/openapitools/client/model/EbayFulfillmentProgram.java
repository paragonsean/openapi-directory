/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used to provide details about an order line item being fulfilled by eBay or an eBay fulfillment partner.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EbayFulfillmentProgram {
  public static final String SERIALIZED_NAME_FULFILLED_BY = "fulfilledBy";
  @SerializedName(SERIALIZED_NAME_FULFILLED_BY)
  private String fulfilledBy;

  public EbayFulfillmentProgram() {
  }

  public EbayFulfillmentProgram fulfilledBy(String fulfilledBy) {
    this.fulfilledBy = fulfilledBy;
    return this;
  }

  /**
   * The value returned in this field indicates the party that is handling fulfillment of the order line item. &lt;br&gt;&lt;br&gt;Valid value: &lt;code&gt;EBAY&lt;/code&gt;
   * @return fulfilledBy
   */
  @javax.annotation.Nullable
  public String getFulfilledBy() {
    return fulfilledBy;
  }

  public void setFulfilledBy(String fulfilledBy) {
    this.fulfilledBy = fulfilledBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EbayFulfillmentProgram ebayFulfillmentProgram = (EbayFulfillmentProgram) o;
    return Objects.equals(this.fulfilledBy, ebayFulfillmentProgram.fulfilledBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fulfilledBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EbayFulfillmentProgram {\n");
    sb.append("    fulfilledBy: ").append(toIndentedString(fulfilledBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fulfilledBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EbayFulfillmentProgram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EbayFulfillmentProgram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EbayFulfillmentProgram is not found in the empty JSON string", EbayFulfillmentProgram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EbayFulfillmentProgram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EbayFulfillmentProgram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fulfilledBy") != null && !jsonObj.get("fulfilledBy").isJsonNull()) && !jsonObj.get("fulfilledBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfilledBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfilledBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EbayFulfillmentProgram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EbayFulfillmentProgram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EbayFulfillmentProgram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EbayFulfillmentProgram.class));

       return (TypeAdapter<T>) new TypeAdapter<EbayFulfillmentProgram>() {
           @Override
           public void write(JsonWriter out, EbayFulfillmentProgram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EbayFulfillmentProgram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EbayFulfillmentProgram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EbayFulfillmentProgram
   * @throws IOException if the JSON string is invalid with respect to EbayFulfillmentProgram
   */
  public static EbayFulfillmentProgram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EbayFulfillmentProgram.class);
  }

  /**
   * Convert an instance of EbayFulfillmentProgram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

