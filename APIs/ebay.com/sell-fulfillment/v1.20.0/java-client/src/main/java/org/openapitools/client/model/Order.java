/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.Buyer;
import org.openapitools.client.model.CancelStatus;
import org.openapitools.client.model.FulfillmentStartInstruction;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.PaymentSummary;
import org.openapitools.client.model.PricingSummary;
import org.openapitools.client.model.Program;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains the details of an order, including information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private Buyer buyer;

  public static final String SERIALIZED_NAME_BUYER_CHECKOUT_NOTES = "buyerCheckoutNotes";
  @SerializedName(SERIALIZED_NAME_BUYER_CHECKOUT_NOTES)
  private String buyerCheckoutNotes;

  public static final String SERIALIZED_NAME_CANCEL_STATUS = "cancelStatus";
  @SerializedName(SERIALIZED_NAME_CANCEL_STATUS)
  private CancelStatus cancelStatus;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_EBAY_COLLECT_AND_REMIT_TAX = "ebayCollectAndRemitTax";
  @SerializedName(SERIALIZED_NAME_EBAY_COLLECT_AND_REMIT_TAX)
  private Boolean ebayCollectAndRemitTax;

  public static final String SERIALIZED_NAME_FULFILLMENT_HREFS = "fulfillmentHrefs";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_HREFS)
  private List<String> fulfillmentHrefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULFILLMENT_START_INSTRUCTIONS = "fulfillmentStartInstructions";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_START_INSTRUCTIONS)
  private List<FulfillmentStartInstruction> fulfillmentStartInstructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_LEGACY_ORDER_ID = "legacyOrderId";
  @SerializedName(SERIALIZED_NAME_LEGACY_ORDER_ID)
  private String legacyOrderId;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_FULFILLMENT_STATUS = "orderFulfillmentStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_FULFILLMENT_STATUS)
  private String orderFulfillmentStatus;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_PAYMENT_STATUS = "orderPaymentStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_PAYMENT_STATUS)
  private String orderPaymentStatus;

  public static final String SERIALIZED_NAME_PAYMENT_SUMMARY = "paymentSummary";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SUMMARY)
  private PaymentSummary paymentSummary;

  public static final String SERIALIZED_NAME_PRICING_SUMMARY = "pricingSummary";
  @SerializedName(SERIALIZED_NAME_PRICING_SUMMARY)
  private PricingSummary pricingSummary;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private Program program;

  public static final String SERIALIZED_NAME_SALES_RECORD_REFERENCE = "salesRecordReference";
  @SerializedName(SERIALIZED_NAME_SALES_RECORD_REFERENCE)
  private String salesRecordReference;

  public static final String SERIALIZED_NAME_SELLER_ID = "sellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_TOTAL_FEE_BASIS_AMOUNT = "totalFeeBasisAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEE_BASIS_AMOUNT)
  private Amount totalFeeBasisAmount;

  public static final String SERIALIZED_NAME_TOTAL_MARKETPLACE_FEE = "totalMarketplaceFee";
  @SerializedName(SERIALIZED_NAME_TOTAL_MARKETPLACE_FEE)
  private Amount totalMarketplaceFee;

  public Order() {
  }

  public Order buyer(Buyer buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public Buyer getBuyer() {
    return buyer;
  }

  public void setBuyer(Buyer buyer) {
    this.buyer = buyer;
  }


  public Order buyerCheckoutNotes(String buyerCheckoutNotes) {
    this.buyerCheckoutNotes = buyerCheckoutNotes;
    return this;
  }

  /**
   * This field contains any comments that the buyer left for the seller about the order during checkout process. This field is only returned if a buyer left comments at checkout time. 
   * @return buyerCheckoutNotes
   */
  @javax.annotation.Nullable
  public String getBuyerCheckoutNotes() {
    return buyerCheckoutNotes;
  }

  public void setBuyerCheckoutNotes(String buyerCheckoutNotes) {
    this.buyerCheckoutNotes = buyerCheckoutNotes;
  }


  public Order cancelStatus(CancelStatus cancelStatus) {
    this.cancelStatus = cancelStatus;
    return this;
  }

  /**
   * Get cancelStatus
   * @return cancelStatus
   */
  @javax.annotation.Nullable
  public CancelStatus getCancelStatus() {
    return cancelStatus;
  }

  public void setCancelStatus(CancelStatus cancelStatus) {
    this.cancelStatus = cancelStatus;
  }


  public Order creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date and time that the order was created. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public Order ebayCollectAndRemitTax(Boolean ebayCollectAndRemitTax) {
    this.ebayCollectAndRemitTax = ebayCollectAndRemitTax;
    return this;
  }

  /**
   * This field is only returned if &lt;code&gt;true&lt;/code&gt;, and indicates that eBay will collect tax (US state-mandated sales tax, Federal and Provincial Sales Tax in Canada, &#39;Goods and Services&#39; tax in Canada, Australia, and New Zealand, and VAT collected for UK and EU countries,) for at least one line item in the order, and remit the tax to the taxing authority of the buyer&#39;s residence. If this field is returned, the seller should search for one or more &lt;strong&gt;ebayCollectAndRemitTaxes&lt;/strong&gt; containers at the line item level to get more information about the type of tax and the amount.
   * @return ebayCollectAndRemitTax
   */
  @javax.annotation.Nullable
  public Boolean getEbayCollectAndRemitTax() {
    return ebayCollectAndRemitTax;
  }

  public void setEbayCollectAndRemitTax(Boolean ebayCollectAndRemitTax) {
    this.ebayCollectAndRemitTax = ebayCollectAndRemitTax;
  }


  public Order fulfillmentHrefs(List<String> fulfillmentHrefs) {
    this.fulfillmentHrefs = fulfillmentHrefs;
    return this;
  }

  public Order addFulfillmentHrefsItem(String fulfillmentHrefsItem) {
    if (this.fulfillmentHrefs == null) {
      this.fulfillmentHrefs = new ArrayList<>();
    }
    this.fulfillmentHrefs.add(fulfillmentHrefsItem);
    return this;
  }

  /**
   * This array contains a list of one or more &lt;strong&gt;getShippingFulfillment&lt;/strong&gt; call URIs that can be used to retrieve shipping fulfillments that have been set up for the order.
   * @return fulfillmentHrefs
   */
  @javax.annotation.Nullable
  public List<String> getFulfillmentHrefs() {
    return fulfillmentHrefs;
  }

  public void setFulfillmentHrefs(List<String> fulfillmentHrefs) {
    this.fulfillmentHrefs = fulfillmentHrefs;
  }


  public Order fulfillmentStartInstructions(List<FulfillmentStartInstruction> fulfillmentStartInstructions) {
    this.fulfillmentStartInstructions = fulfillmentStartInstructions;
    return this;
  }

  public Order addFulfillmentStartInstructionsItem(FulfillmentStartInstruction fulfillmentStartInstructionsItem) {
    if (this.fulfillmentStartInstructions == null) {
      this.fulfillmentStartInstructions = new ArrayList<>();
    }
    this.fulfillmentStartInstructions.add(fulfillmentStartInstructionsItem);
    return this;
  }

  /**
   * This container consists of a set of specifications for fulfilling the order, including the type of fulfillment, shipping carrier and service, shipping address, and estimated delivery window. These instructions are derived from the buyer&#39;s and seller&#39;s eBay account preferences, the listing parameters, and the buyer&#39;s checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although this container is presented as an array, it currently returns only one set of fulfillment specifications. Additional array members will be supported in future functionality.&lt;/span&gt;
   * @return fulfillmentStartInstructions
   */
  @javax.annotation.Nullable
  public List<FulfillmentStartInstruction> getFulfillmentStartInstructions() {
    return fulfillmentStartInstructions;
  }

  public void setFulfillmentStartInstructions(List<FulfillmentStartInstruction> fulfillmentStartInstructions) {
    this.fulfillmentStartInstructions = fulfillmentStartInstructions;
  }


  public Order lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * The date and time that the order was last modified. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public Order legacyOrderId(String legacyOrderId) {
    this.legacyOrderId = legacyOrderId;
    return this;
  }

  /**
   * The unique identifier of the order in legacy format, as traditionally used by the Trading API (and other legacy APIs). Both the &lt;b&gt;orderId&lt;/b&gt; field and this field are always returned.
   * @return legacyOrderId
   */
  @javax.annotation.Nullable
  public String getLegacyOrderId() {
    return legacyOrderId;
  }

  public void setLegacyOrderId(String legacyOrderId) {
    this.legacyOrderId = legacyOrderId;
  }


  public Order lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Order addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * This array contains the details for all line items that comprise the order.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public Order orderFulfillmentStatus(String orderFulfillmentStatus) {
    this.orderFulfillmentStatus = orderFulfillmentStatus;
    return this;
  }

  /**
   * The degree to which fulfillment of the order is complete. See the &lt;strong&gt;OrderFulfillmentStatus&lt;/strong&gt; type definition for more information about each possible fulfillment state. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:OrderFulfillmentStatus&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return orderFulfillmentStatus
   */
  @javax.annotation.Nullable
  public String getOrderFulfillmentStatus() {
    return orderFulfillmentStatus;
  }

  public void setOrderFulfillmentStatus(String orderFulfillmentStatus) {
    this.orderFulfillmentStatus = orderFulfillmentStatus;
  }


  public Order orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The unique identifier of the order. Both the &lt;b&gt;legacyOrderId&lt;/b&gt; field (traditionally used by Trading and other legacy APIS) and this field are always returned.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Order orderPaymentStatus(String orderPaymentStatus) {
    this.orderPaymentStatus = orderPaymentStatus;
    return this;
  }

  /**
   * The enumeration value returned in this field indicates the current payment status of an order, or in case of a refund request, the current status of the refund. See the &lt;strong&gt;OrderPaymentStatusEnum&lt;/strong&gt; type definition for more information about each possible payment/refund state. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:OrderPaymentStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return orderPaymentStatus
   */
  @javax.annotation.Nullable
  public String getOrderPaymentStatus() {
    return orderPaymentStatus;
  }

  public void setOrderPaymentStatus(String orderPaymentStatus) {
    this.orderPaymentStatus = orderPaymentStatus;
  }


  public Order paymentSummary(PaymentSummary paymentSummary) {
    this.paymentSummary = paymentSummary;
    return this;
  }

  /**
   * Get paymentSummary
   * @return paymentSummary
   */
  @javax.annotation.Nullable
  public PaymentSummary getPaymentSummary() {
    return paymentSummary;
  }

  public void setPaymentSummary(PaymentSummary paymentSummary) {
    this.paymentSummary = paymentSummary;
  }


  public Order pricingSummary(PricingSummary pricingSummary) {
    this.pricingSummary = pricingSummary;
    return this;
  }

  /**
   * Get pricingSummary
   * @return pricingSummary
   */
  @javax.annotation.Nullable
  public PricingSummary getPricingSummary() {
    return pricingSummary;
  }

  public void setPricingSummary(PricingSummary pricingSummary) {
    this.pricingSummary = pricingSummary;
  }


  public Order program(Program program) {
    this.program = program;
    return this;
  }

  /**
   * Get program
   * @return program
   */
  @javax.annotation.Nullable
  public Program getProgram() {
    return program;
  }

  public void setProgram(Program program) {
    this.program = program;
  }


  public Order salesRecordReference(String salesRecordReference) {
    this.salesRecordReference = salesRecordReference;
    return this;
  }

  /**
   * An eBay-generated identifier that is used to identify and manage orders through the Selling Manager and Selling Manager Pro tools. This order identifier can also be found on the Orders grid page and in the Sales Record pages in Seller Hub. A &lt;strong&gt;salesRecordReference&lt;/strong&gt; number is only generated and returned at the order level, and not at the order line item level.&lt;br&gt;&lt;br&gt; In cases where the seller does not have a Selling Manager or Selling Manager Pro subscription nor access to Seller Hub, this field may not be returned.
   * @return salesRecordReference
   */
  @javax.annotation.Nullable
  public String getSalesRecordReference() {
    return salesRecordReference;
  }

  public void setSalesRecordReference(String salesRecordReference) {
    this.salesRecordReference = salesRecordReference;
  }


  public Order sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * The unique eBay user ID of the seller who sold the order.
   * @return sellerId
   */
  @javax.annotation.Nullable
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public Order totalFeeBasisAmount(Amount totalFeeBasisAmount) {
    this.totalFeeBasisAmount = totalFeeBasisAmount;
    return this;
  }

  /**
   * Get totalFeeBasisAmount
   * @return totalFeeBasisAmount
   */
  @javax.annotation.Nullable
  public Amount getTotalFeeBasisAmount() {
    return totalFeeBasisAmount;
  }

  public void setTotalFeeBasisAmount(Amount totalFeeBasisAmount) {
    this.totalFeeBasisAmount = totalFeeBasisAmount;
  }


  public Order totalMarketplaceFee(Amount totalMarketplaceFee) {
    this.totalMarketplaceFee = totalMarketplaceFee;
    return this;
  }

  /**
   * Get totalMarketplaceFee
   * @return totalMarketplaceFee
   */
  @javax.annotation.Nullable
  public Amount getTotalMarketplaceFee() {
    return totalMarketplaceFee;
  }

  public void setTotalMarketplaceFee(Amount totalMarketplaceFee) {
    this.totalMarketplaceFee = totalMarketplaceFee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.buyer, order.buyer) &&
        Objects.equals(this.buyerCheckoutNotes, order.buyerCheckoutNotes) &&
        Objects.equals(this.cancelStatus, order.cancelStatus) &&
        Objects.equals(this.creationDate, order.creationDate) &&
        Objects.equals(this.ebayCollectAndRemitTax, order.ebayCollectAndRemitTax) &&
        Objects.equals(this.fulfillmentHrefs, order.fulfillmentHrefs) &&
        Objects.equals(this.fulfillmentStartInstructions, order.fulfillmentStartInstructions) &&
        Objects.equals(this.lastModifiedDate, order.lastModifiedDate) &&
        Objects.equals(this.legacyOrderId, order.legacyOrderId) &&
        Objects.equals(this.lineItems, order.lineItems) &&
        Objects.equals(this.orderFulfillmentStatus, order.orderFulfillmentStatus) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.orderPaymentStatus, order.orderPaymentStatus) &&
        Objects.equals(this.paymentSummary, order.paymentSummary) &&
        Objects.equals(this.pricingSummary, order.pricingSummary) &&
        Objects.equals(this.program, order.program) &&
        Objects.equals(this.salesRecordReference, order.salesRecordReference) &&
        Objects.equals(this.sellerId, order.sellerId) &&
        Objects.equals(this.totalFeeBasisAmount, order.totalFeeBasisAmount) &&
        Objects.equals(this.totalMarketplaceFee, order.totalMarketplaceFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyer, buyerCheckoutNotes, cancelStatus, creationDate, ebayCollectAndRemitTax, fulfillmentHrefs, fulfillmentStartInstructions, lastModifiedDate, legacyOrderId, lineItems, orderFulfillmentStatus, orderId, orderPaymentStatus, paymentSummary, pricingSummary, program, salesRecordReference, sellerId, totalFeeBasisAmount, totalMarketplaceFee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    buyerCheckoutNotes: ").append(toIndentedString(buyerCheckoutNotes)).append("\n");
    sb.append("    cancelStatus: ").append(toIndentedString(cancelStatus)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    ebayCollectAndRemitTax: ").append(toIndentedString(ebayCollectAndRemitTax)).append("\n");
    sb.append("    fulfillmentHrefs: ").append(toIndentedString(fulfillmentHrefs)).append("\n");
    sb.append("    fulfillmentStartInstructions: ").append(toIndentedString(fulfillmentStartInstructions)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    legacyOrderId: ").append(toIndentedString(legacyOrderId)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    orderFulfillmentStatus: ").append(toIndentedString(orderFulfillmentStatus)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderPaymentStatus: ").append(toIndentedString(orderPaymentStatus)).append("\n");
    sb.append("    paymentSummary: ").append(toIndentedString(paymentSummary)).append("\n");
    sb.append("    pricingSummary: ").append(toIndentedString(pricingSummary)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    salesRecordReference: ").append(toIndentedString(salesRecordReference)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    totalFeeBasisAmount: ").append(toIndentedString(totalFeeBasisAmount)).append("\n");
    sb.append("    totalMarketplaceFee: ").append(toIndentedString(totalMarketplaceFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyer");
    openapiFields.add("buyerCheckoutNotes");
    openapiFields.add("cancelStatus");
    openapiFields.add("creationDate");
    openapiFields.add("ebayCollectAndRemitTax");
    openapiFields.add("fulfillmentHrefs");
    openapiFields.add("fulfillmentStartInstructions");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("legacyOrderId");
    openapiFields.add("lineItems");
    openapiFields.add("orderFulfillmentStatus");
    openapiFields.add("orderId");
    openapiFields.add("orderPaymentStatus");
    openapiFields.add("paymentSummary");
    openapiFields.add("pricingSummary");
    openapiFields.add("program");
    openapiFields.add("salesRecordReference");
    openapiFields.add("sellerId");
    openapiFields.add("totalFeeBasisAmount");
    openapiFields.add("totalMarketplaceFee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buyer`
      if (jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) {
        Buyer.validateJsonElement(jsonObj.get("buyer"));
      }
      if ((jsonObj.get("buyerCheckoutNotes") != null && !jsonObj.get("buyerCheckoutNotes").isJsonNull()) && !jsonObj.get("buyerCheckoutNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerCheckoutNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerCheckoutNotes").toString()));
      }
      // validate the optional field `cancelStatus`
      if (jsonObj.get("cancelStatus") != null && !jsonObj.get("cancelStatus").isJsonNull()) {
        CancelStatus.validateJsonElement(jsonObj.get("cancelStatus"));
      }
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fulfillmentHrefs") != null && !jsonObj.get("fulfillmentHrefs").isJsonNull() && !jsonObj.get("fulfillmentHrefs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentHrefs` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentHrefs").toString()));
      }
      if (jsonObj.get("fulfillmentStartInstructions") != null && !jsonObj.get("fulfillmentStartInstructions").isJsonNull()) {
        JsonArray jsonArrayfulfillmentStartInstructions = jsonObj.getAsJsonArray("fulfillmentStartInstructions");
        if (jsonArrayfulfillmentStartInstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillmentStartInstructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillmentStartInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentStartInstructions").toString()));
          }

          // validate the optional field `fulfillmentStartInstructions` (array)
          for (int i = 0; i < jsonArrayfulfillmentStartInstructions.size(); i++) {
            FulfillmentStartInstruction.validateJsonElement(jsonArrayfulfillmentStartInstructions.get(i));
          };
        }
      }
      if ((jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) && !jsonObj.get("lastModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedDate").toString()));
      }
      if ((jsonObj.get("legacyOrderId") != null && !jsonObj.get("legacyOrderId").isJsonNull()) && !jsonObj.get("legacyOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyOrderId").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("orderFulfillmentStatus") != null && !jsonObj.get("orderFulfillmentStatus").isJsonNull()) && !jsonObj.get("orderFulfillmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderFulfillmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderFulfillmentStatus").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("orderPaymentStatus") != null && !jsonObj.get("orderPaymentStatus").isJsonNull()) && !jsonObj.get("orderPaymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderPaymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderPaymentStatus").toString()));
      }
      // validate the optional field `paymentSummary`
      if (jsonObj.get("paymentSummary") != null && !jsonObj.get("paymentSummary").isJsonNull()) {
        PaymentSummary.validateJsonElement(jsonObj.get("paymentSummary"));
      }
      // validate the optional field `pricingSummary`
      if (jsonObj.get("pricingSummary") != null && !jsonObj.get("pricingSummary").isJsonNull()) {
        PricingSummary.validateJsonElement(jsonObj.get("pricingSummary"));
      }
      // validate the optional field `program`
      if (jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) {
        Program.validateJsonElement(jsonObj.get("program"));
      }
      if ((jsonObj.get("salesRecordReference") != null && !jsonObj.get("salesRecordReference").isJsonNull()) && !jsonObj.get("salesRecordReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesRecordReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesRecordReference").toString()));
      }
      if ((jsonObj.get("sellerId") != null && !jsonObj.get("sellerId").isJsonNull()) && !jsonObj.get("sellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerId").toString()));
      }
      // validate the optional field `totalFeeBasisAmount`
      if (jsonObj.get("totalFeeBasisAmount") != null && !jsonObj.get("totalFeeBasisAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("totalFeeBasisAmount"));
      }
      // validate the optional field `totalMarketplaceFee`
      if (jsonObj.get("totalMarketplaceFee") != null && !jsonObj.get("totalMarketplaceFee").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("totalMarketplaceFee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

