/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains a summary of cumulative costs and charges for all line items of an order, including item price, price adjustments, sales taxes, delivery costs, and order discounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingSummary {
  public static final String SERIALIZED_NAME_ADJUSTMENT = "adjustment";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT)
  private Amount adjustment;

  public static final String SERIALIZED_NAME_DELIVERY_COST = "deliveryCost";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COST)
  private Amount deliveryCost;

  public static final String SERIALIZED_NAME_DELIVERY_DISCOUNT = "deliveryDiscount";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DISCOUNT)
  private Amount deliveryDiscount;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private Amount fee;

  public static final String SERIALIZED_NAME_PRICE_DISCOUNT = "priceDiscount";
  @SerializedName(SERIALIZED_NAME_PRICE_DISCOUNT)
  private Amount priceDiscount;

  public static final String SERIALIZED_NAME_PRICE_SUBTOTAL = "priceSubtotal";
  @SerializedName(SERIALIZED_NAME_PRICE_SUBTOTAL)
  private Amount priceSubtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Amount tax;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Amount total;

  public PricingSummary() {
  }

  public PricingSummary adjustment(Amount adjustment) {
    this.adjustment = adjustment;
    return this;
  }

  /**
   * Get adjustment
   * @return adjustment
   */
  @javax.annotation.Nullable
  public Amount getAdjustment() {
    return adjustment;
  }

  public void setAdjustment(Amount adjustment) {
    this.adjustment = adjustment;
  }


  public PricingSummary deliveryCost(Amount deliveryCost) {
    this.deliveryCost = deliveryCost;
    return this;
  }

  /**
   * Get deliveryCost
   * @return deliveryCost
   */
  @javax.annotation.Nullable
  public Amount getDeliveryCost() {
    return deliveryCost;
  }

  public void setDeliveryCost(Amount deliveryCost) {
    this.deliveryCost = deliveryCost;
  }


  public PricingSummary deliveryDiscount(Amount deliveryDiscount) {
    this.deliveryDiscount = deliveryDiscount;
    return this;
  }

  /**
   * Get deliveryDiscount
   * @return deliveryDiscount
   */
  @javax.annotation.Nullable
  public Amount getDeliveryDiscount() {
    return deliveryDiscount;
  }

  public void setDeliveryDiscount(Amount deliveryDiscount) {
    this.deliveryDiscount = deliveryDiscount;
  }


  public PricingSummary fee(Amount fee) {
    this.fee = fee;
    return this;
  }

  /**
   * Get fee
   * @return fee
   */
  @javax.annotation.Nullable
  public Amount getFee() {
    return fee;
  }

  public void setFee(Amount fee) {
    this.fee = fee;
  }


  public PricingSummary priceDiscount(Amount priceDiscount) {
    this.priceDiscount = priceDiscount;
    return this;
  }

  /**
   * Get priceDiscount
   * @return priceDiscount
   */
  @javax.annotation.Nullable
  public Amount getPriceDiscount() {
    return priceDiscount;
  }

  public void setPriceDiscount(Amount priceDiscount) {
    this.priceDiscount = priceDiscount;
  }


  public PricingSummary priceSubtotal(Amount priceSubtotal) {
    this.priceSubtotal = priceSubtotal;
    return this;
  }

  /**
   * Get priceSubtotal
   * @return priceSubtotal
   */
  @javax.annotation.Nullable
  public Amount getPriceSubtotal() {
    return priceSubtotal;
  }

  public void setPriceSubtotal(Amount priceSubtotal) {
    this.priceSubtotal = priceSubtotal;
  }


  public PricingSummary tax(Amount tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Amount getTax() {
    return tax;
  }

  public void setTax(Amount tax) {
    this.tax = tax;
  }


  public PricingSummary total(Amount total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Amount getTotal() {
    return total;
  }

  public void setTotal(Amount total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingSummary pricingSummary = (PricingSummary) o;
    return Objects.equals(this.adjustment, pricingSummary.adjustment) &&
        Objects.equals(this.deliveryCost, pricingSummary.deliveryCost) &&
        Objects.equals(this.deliveryDiscount, pricingSummary.deliveryDiscount) &&
        Objects.equals(this.fee, pricingSummary.fee) &&
        Objects.equals(this.priceDiscount, pricingSummary.priceDiscount) &&
        Objects.equals(this.priceSubtotal, pricingSummary.priceSubtotal) &&
        Objects.equals(this.tax, pricingSummary.tax) &&
        Objects.equals(this.total, pricingSummary.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustment, deliveryCost, deliveryDiscount, fee, priceDiscount, priceSubtotal, tax, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingSummary {\n");
    sb.append("    adjustment: ").append(toIndentedString(adjustment)).append("\n");
    sb.append("    deliveryCost: ").append(toIndentedString(deliveryCost)).append("\n");
    sb.append("    deliveryDiscount: ").append(toIndentedString(deliveryDiscount)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    priceDiscount: ").append(toIndentedString(priceDiscount)).append("\n");
    sb.append("    priceSubtotal: ").append(toIndentedString(priceSubtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustment");
    openapiFields.add("deliveryCost");
    openapiFields.add("deliveryDiscount");
    openapiFields.add("fee");
    openapiFields.add("priceDiscount");
    openapiFields.add("priceSubtotal");
    openapiFields.add("tax");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingSummary is not found in the empty JSON string", PricingSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustment`
      if (jsonObj.get("adjustment") != null && !jsonObj.get("adjustment").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("adjustment"));
      }
      // validate the optional field `deliveryCost`
      if (jsonObj.get("deliveryCost") != null && !jsonObj.get("deliveryCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("deliveryCost"));
      }
      // validate the optional field `deliveryDiscount`
      if (jsonObj.get("deliveryDiscount") != null && !jsonObj.get("deliveryDiscount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("deliveryDiscount"));
      }
      // validate the optional field `fee`
      if (jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("fee"));
      }
      // validate the optional field `priceDiscount`
      if (jsonObj.get("priceDiscount") != null && !jsonObj.get("priceDiscount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("priceDiscount"));
      }
      // validate the optional field `priceSubtotal`
      if (jsonObj.get("priceSubtotal") != null && !jsonObj.get("priceSubtotal").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("priceSubtotal"));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("tax"));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("total"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingSummary>() {
           @Override
           public void write(JsonWriter out, PricingSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingSummary
   * @throws IOException if the JSON string is invalid with respect to PricingSummary
   */
  public static PricingSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingSummary.class);
  }

  /**
   * Convert an instance of PricingSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

