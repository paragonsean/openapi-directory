/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EbayVaultProgram
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EbayVaultProgram {
  public static final String SERIALIZED_NAME_FULFILLMENT_TYPE = "fulfillmentType";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TYPE)
  private String fulfillmentType;

  public EbayVaultProgram() {
  }

  public EbayVaultProgram fulfillmentType(String fulfillmentType) {
    this.fulfillmentType = fulfillmentType;
    return this;
  }

  /**
   * This field specifies how an eBay vault order will be fulfilled. Supported options are:&lt;ul&gt;&lt;li&gt;&lt;b&gt;Seller to Vault&lt;/b&gt;: the order will be shipped by the seller to an authenticator.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Vault to Vault&lt;/b&gt;: the order will be shipped from an eBay vault to the buyer&#39;s vault.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Vault to Buyer&lt;/b&gt;: the order will be shipped from an eBay vault to the buyer&#39;s shipping address.&lt;/li&gt;&lt;/ul&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:EbayVaultFulfillmentTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return fulfillmentType
   */
  @javax.annotation.Nullable
  public String getFulfillmentType() {
    return fulfillmentType;
  }

  public void setFulfillmentType(String fulfillmentType) {
    this.fulfillmentType = fulfillmentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EbayVaultProgram ebayVaultProgram = (EbayVaultProgram) o;
    return Objects.equals(this.fulfillmentType, ebayVaultProgram.fulfillmentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fulfillmentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EbayVaultProgram {\n");
    sb.append("    fulfillmentType: ").append(toIndentedString(fulfillmentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fulfillmentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EbayVaultProgram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EbayVaultProgram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EbayVaultProgram is not found in the empty JSON string", EbayVaultProgram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EbayVaultProgram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EbayVaultProgram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fulfillmentType") != null && !jsonObj.get("fulfillmentType").isJsonNull()) && !jsonObj.get("fulfillmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EbayVaultProgram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EbayVaultProgram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EbayVaultProgram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EbayVaultProgram.class));

       return (TypeAdapter<T>) new TypeAdapter<EbayVaultProgram>() {
           @Override
           public void write(JsonWriter out, EbayVaultProgram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EbayVaultProgram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EbayVaultProgram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EbayVaultProgram
   * @throws IOException if the JSON string is invalid with respect to EbayVaultProgram
   */
  public static EbayVaultProgram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EbayVaultProgram.class);
  }

  /**
   * Convert an instance of EbayVaultProgram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

