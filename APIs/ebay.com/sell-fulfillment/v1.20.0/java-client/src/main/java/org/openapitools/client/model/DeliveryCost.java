/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains a breakdown of all costs associated with the fulfillment of a line item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryCost {
  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Amount discountAmount;

  public static final String SERIALIZED_NAME_HANDLING_COST = "handlingCost";
  @SerializedName(SERIALIZED_NAME_HANDLING_COST)
  private Amount handlingCost;

  public static final String SERIALIZED_NAME_IMPORT_CHARGES = "importCharges";
  @SerializedName(SERIALIZED_NAME_IMPORT_CHARGES)
  private Amount importCharges;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private Amount shippingCost;

  public static final String SERIALIZED_NAME_SHIPPING_INTERMEDIATION_FEE = "shippingIntermediationFee";
  @SerializedName(SERIALIZED_NAME_SHIPPING_INTERMEDIATION_FEE)
  private Amount shippingIntermediationFee;

  public DeliveryCost() {
  }

  public DeliveryCost discountAmount(Amount discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Get discountAmount
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public Amount getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Amount discountAmount) {
    this.discountAmount = discountAmount;
  }


  public DeliveryCost handlingCost(Amount handlingCost) {
    this.handlingCost = handlingCost;
    return this;
  }

  /**
   * Get handlingCost
   * @return handlingCost
   */
  @javax.annotation.Nullable
  public Amount getHandlingCost() {
    return handlingCost;
  }

  public void setHandlingCost(Amount handlingCost) {
    this.handlingCost = handlingCost;
  }


  public DeliveryCost importCharges(Amount importCharges) {
    this.importCharges = importCharges;
    return this;
  }

  /**
   * Get importCharges
   * @return importCharges
   */
  @javax.annotation.Nullable
  public Amount getImportCharges() {
    return importCharges;
  }

  public void setImportCharges(Amount importCharges) {
    this.importCharges = importCharges;
  }


  public DeliveryCost shippingCost(Amount shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Get shippingCost
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public Amount getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(Amount shippingCost) {
    this.shippingCost = shippingCost;
  }


  public DeliveryCost shippingIntermediationFee(Amount shippingIntermediationFee) {
    this.shippingIntermediationFee = shippingIntermediationFee;
    return this;
  }

  /**
   * Get shippingIntermediationFee
   * @return shippingIntermediationFee
   */
  @javax.annotation.Nullable
  public Amount getShippingIntermediationFee() {
    return shippingIntermediationFee;
  }

  public void setShippingIntermediationFee(Amount shippingIntermediationFee) {
    this.shippingIntermediationFee = shippingIntermediationFee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryCost deliveryCost = (DeliveryCost) o;
    return Objects.equals(this.discountAmount, deliveryCost.discountAmount) &&
        Objects.equals(this.handlingCost, deliveryCost.handlingCost) &&
        Objects.equals(this.importCharges, deliveryCost.importCharges) &&
        Objects.equals(this.shippingCost, deliveryCost.shippingCost) &&
        Objects.equals(this.shippingIntermediationFee, deliveryCost.shippingIntermediationFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountAmount, handlingCost, importCharges, shippingCost, shippingIntermediationFee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryCost {\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    handlingCost: ").append(toIndentedString(handlingCost)).append("\n");
    sb.append("    importCharges: ").append(toIndentedString(importCharges)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingIntermediationFee: ").append(toIndentedString(shippingIntermediationFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discountAmount");
    openapiFields.add("handlingCost");
    openapiFields.add("importCharges");
    openapiFields.add("shippingCost");
    openapiFields.add("shippingIntermediationFee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryCost is not found in the empty JSON string", DeliveryCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `discountAmount`
      if (jsonObj.get("discountAmount") != null && !jsonObj.get("discountAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("discountAmount"));
      }
      // validate the optional field `handlingCost`
      if (jsonObj.get("handlingCost") != null && !jsonObj.get("handlingCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("handlingCost"));
      }
      // validate the optional field `importCharges`
      if (jsonObj.get("importCharges") != null && !jsonObj.get("importCharges").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("importCharges"));
      }
      // validate the optional field `shippingCost`
      if (jsonObj.get("shippingCost") != null && !jsonObj.get("shippingCost").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("shippingCost"));
      }
      // validate the optional field `shippingIntermediationFee`
      if (jsonObj.get("shippingIntermediationFee") != null && !jsonObj.get("shippingIntermediationFee").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("shippingIntermediationFee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryCost.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryCost>() {
           @Override
           public void write(JsonWriter out, DeliveryCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryCost
   * @throws IOException if the JSON string is invalid with respect to DeliveryCost
   */
  public static DeliveryCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryCost.class);
  }

  /**
   * Convert an instance of DeliveryCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

