/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the response payload of the &lt;strong&gt;addEvidence&lt;/strong&gt; method. Its only field is an unique identifier of an evidence set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddEvidencePaymentDisputeResponse {
  public static final String SERIALIZED_NAME_EVIDENCE_ID = "evidenceId";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_ID)
  private String evidenceId;

  public AddEvidencePaymentDisputeResponse() {
  }

  public AddEvidencePaymentDisputeResponse evidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
    return this;
  }

  /**
   * The value returned in this field is the unique identifier of the newly-created evidence set. Upon a successful call, this value is automatically genererated. This new evidence set for the payment dispute includes the evidence file(s) that were passed in to the &lt;strong&gt;fileId&lt;/strong&gt; array in the request payload. The &lt;strong&gt;evidenceId&lt;/strong&gt; value will be needed if the seller wishes to add to the evidence set by using the &lt;strong&gt;updateEvidence&lt;/strong&gt; method, or if they want to retrieve a specific evidence file within the evidence set by using the &lt;strong&gt;fetchEvidenceContent&lt;/strong&gt; method.
   * @return evidenceId
   */
  @javax.annotation.Nullable
  public String getEvidenceId() {
    return evidenceId;
  }

  public void setEvidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddEvidencePaymentDisputeResponse addEvidencePaymentDisputeResponse = (AddEvidencePaymentDisputeResponse) o;
    return Objects.equals(this.evidenceId, addEvidencePaymentDisputeResponse.evidenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddEvidencePaymentDisputeResponse {\n");
    sb.append("    evidenceId: ").append(toIndentedString(evidenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evidenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddEvidencePaymentDisputeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddEvidencePaymentDisputeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddEvidencePaymentDisputeResponse is not found in the empty JSON string", AddEvidencePaymentDisputeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddEvidencePaymentDisputeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddEvidencePaymentDisputeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evidenceId") != null && !jsonObj.get("evidenceId").isJsonNull()) && !jsonObj.get("evidenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddEvidencePaymentDisputeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddEvidencePaymentDisputeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddEvidencePaymentDisputeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddEvidencePaymentDisputeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AddEvidencePaymentDisputeResponse>() {
           @Override
           public void write(JsonWriter out, AddEvidencePaymentDisputeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddEvidencePaymentDisputeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddEvidencePaymentDisputeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddEvidencePaymentDisputeResponse
   * @throws IOException if the JSON string is invalid with respect to AddEvidencePaymentDisputeResponse
   */
  public static AddEvidencePaymentDisputeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddEvidencePaymentDisputeResponse.class);
  }

  /**
   * Convert an instance of AddEvidencePaymentDisputeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

