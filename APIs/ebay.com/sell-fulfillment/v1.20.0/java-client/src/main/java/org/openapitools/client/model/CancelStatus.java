/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CancelRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains information about any requests that have been made to cancel an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CancelStatus {
  public static final String SERIALIZED_NAME_CANCEL_REQUESTS = "cancelRequests";
  @SerializedName(SERIALIZED_NAME_CANCEL_REQUESTS)
  private List<CancelRequest> cancelRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCEL_STATE = "cancelState";
  @SerializedName(SERIALIZED_NAME_CANCEL_STATE)
  private String cancelState;

  public static final String SERIALIZED_NAME_CANCELLED_DATE = "cancelledDate";
  @SerializedName(SERIALIZED_NAME_CANCELLED_DATE)
  private String cancelledDate;

  public CancelStatus() {
  }

  public CancelStatus cancelRequests(List<CancelRequest> cancelRequests) {
    this.cancelRequests = cancelRequests;
    return this;
  }

  public CancelStatus addCancelRequestsItem(CancelRequest cancelRequestsItem) {
    if (this.cancelRequests == null) {
      this.cancelRequests = new ArrayList<>();
    }
    this.cancelRequests.add(cancelRequestsItem);
    return this;
  }

  /**
   * This array contains details of one or more buyer requests to cancel the order. &lt;br&gt;&lt;br&gt;&lt;b&gt;For the getOrders call:&lt;/b&gt;  This array is returned but is always empty.&lt;br&gt;&lt;b&gt;For the getOrder call:&lt;/b&gt; This array is returned fully populated with information about any cancellation requests.
   * @return cancelRequests
   */
  @javax.annotation.Nullable
  public List<CancelRequest> getCancelRequests() {
    return cancelRequests;
  }

  public void setCancelRequests(List<CancelRequest> cancelRequests) {
    this.cancelRequests = cancelRequests;
  }


  public CancelStatus cancelState(String cancelState) {
    this.cancelState = cancelState;
    return this;
  }

  /**
   * The state of the order with regard to cancellation. This field is always returned, and if there are no cancellation requests, a value of &lt;code&gt;NONE_REQUESTED&lt;/code&gt; is returned.  For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CancelStateEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return cancelState
   */
  @javax.annotation.Nullable
  public String getCancelState() {
    return cancelState;
  }

  public void setCancelState(String cancelState) {
    this.cancelState = cancelState;
  }


  public CancelStatus cancelledDate(String cancelledDate) {
    this.cancelledDate = cancelledDate;
    return this;
  }

  /**
   * The date and time the order was cancelled, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;
   * @return cancelledDate
   */
  @javax.annotation.Nullable
  public String getCancelledDate() {
    return cancelledDate;
  }

  public void setCancelledDate(String cancelledDate) {
    this.cancelledDate = cancelledDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CancelStatus cancelStatus = (CancelStatus) o;
    return Objects.equals(this.cancelRequests, cancelStatus.cancelRequests) &&
        Objects.equals(this.cancelState, cancelStatus.cancelState) &&
        Objects.equals(this.cancelledDate, cancelStatus.cancelledDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelRequests, cancelState, cancelledDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CancelStatus {\n");
    sb.append("    cancelRequests: ").append(toIndentedString(cancelRequests)).append("\n");
    sb.append("    cancelState: ").append(toIndentedString(cancelState)).append("\n");
    sb.append("    cancelledDate: ").append(toIndentedString(cancelledDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelRequests");
    openapiFields.add("cancelState");
    openapiFields.add("cancelledDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CancelStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CancelStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CancelStatus is not found in the empty JSON string", CancelStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CancelStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CancelStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cancelRequests") != null && !jsonObj.get("cancelRequests").isJsonNull()) {
        JsonArray jsonArraycancelRequests = jsonObj.getAsJsonArray("cancelRequests");
        if (jsonArraycancelRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cancelRequests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancelRequests` to be an array in the JSON string but got `%s`", jsonObj.get("cancelRequests").toString()));
          }

          // validate the optional field `cancelRequests` (array)
          for (int i = 0; i < jsonArraycancelRequests.size(); i++) {
            CancelRequest.validateJsonElement(jsonArraycancelRequests.get(i));
          };
        }
      }
      if ((jsonObj.get("cancelState") != null && !jsonObj.get("cancelState").isJsonNull()) && !jsonObj.get("cancelState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelState").toString()));
      }
      if ((jsonObj.get("cancelledDate") != null && !jsonObj.get("cancelledDate").isJsonNull()) && !jsonObj.get("cancelledDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelledDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelledDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CancelStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CancelStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CancelStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CancelStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<CancelStatus>() {
           @Override
           public void write(JsonWriter out, CancelStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CancelStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CancelStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CancelStatus
   * @throws IOException if the JSON string is invalid with respect to CancelStatus
   */
  public static CancelStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CancelStatus.class);
  }

  /**
   * Convert an instance of CancelStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

