/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderLineItems;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the &lt;strong&gt;evidenceRequests&lt;/strong&gt; array that is returned in the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; response if one or more evidential documents are being requested to help resolve the payment dispute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvidenceRequest {
  public static final String SERIALIZED_NAME_EVIDENCE_ID = "evidenceId";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_ID)
  private String evidenceId;

  public static final String SERIALIZED_NAME_EVIDENCE_TYPE = "evidenceType";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_TYPE)
  private String evidenceType;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderLineItems> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_DATE = "requestDate";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATE)
  private String requestDate;

  public static final String SERIALIZED_NAME_RESPOND_BY_DATE = "respondByDate";
  @SerializedName(SERIALIZED_NAME_RESPOND_BY_DATE)
  private String respondByDate;

  public EvidenceRequest() {
  }

  public EvidenceRequest evidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
    return this;
  }

  /**
   * Unique identifier of the evidential file set. Potentially, each evidential file set can have more than one file, that is why there is this file set identifier, and then an identifier for each file within this file set.
   * @return evidenceId
   */
  @javax.annotation.Nullable
  public String getEvidenceId() {
    return evidenceId;
  }

  public void setEvidenceId(String evidenceId) {
    this.evidenceId = evidenceId;
  }


  public EvidenceRequest evidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
    return this;
  }

  /**
   * This enumeration value shows the type of evidential document provided. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return evidenceType
   */
  @javax.annotation.Nullable
  public String getEvidenceType() {
    return evidenceType;
  }

  public void setEvidenceType(String evidenceType) {
    this.evidenceType = evidenceType;
  }


  public EvidenceRequest lineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public EvidenceRequest addLineItemsItem(OrderLineItems lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * This array shows one or more order line items associated with the evidential document that has been provided.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItems> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
  }


  public EvidenceRequest requestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when eBay requested the evidential document from the seller in response to a payment dispute. &lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return requestDate
   */
  @javax.annotation.Nullable
  public String getRequestDate() {
    return requestDate;
  }

  public void setRequestDate(String requestDate) {
    this.requestDate = requestDate;
  }


  public EvidenceRequest respondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the seller is expected to provide a requested evidential document to eBay.  &lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return respondByDate
   */
  @javax.annotation.Nullable
  public String getRespondByDate() {
    return respondByDate;
  }

  public void setRespondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvidenceRequest evidenceRequest = (EvidenceRequest) o;
    return Objects.equals(this.evidenceId, evidenceRequest.evidenceId) &&
        Objects.equals(this.evidenceType, evidenceRequest.evidenceType) &&
        Objects.equals(this.lineItems, evidenceRequest.lineItems) &&
        Objects.equals(this.requestDate, evidenceRequest.requestDate) &&
        Objects.equals(this.respondByDate, evidenceRequest.respondByDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidenceId, evidenceType, lineItems, requestDate, respondByDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvidenceRequest {\n");
    sb.append("    evidenceId: ").append(toIndentedString(evidenceId)).append("\n");
    sb.append("    evidenceType: ").append(toIndentedString(evidenceType)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    requestDate: ").append(toIndentedString(requestDate)).append("\n");
    sb.append("    respondByDate: ").append(toIndentedString(respondByDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evidenceId");
    openapiFields.add("evidenceType");
    openapiFields.add("lineItems");
    openapiFields.add("requestDate");
    openapiFields.add("respondByDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvidenceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvidenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvidenceRequest is not found in the empty JSON string", EvidenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvidenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvidenceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evidenceId") != null && !jsonObj.get("evidenceId").isJsonNull()) && !jsonObj.get("evidenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceId").toString()));
      }
      if ((jsonObj.get("evidenceType") != null && !jsonObj.get("evidenceType").isJsonNull()) && !jsonObj.get("evidenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evidenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evidenceType").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItems.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("requestDate") != null && !jsonObj.get("requestDate").isJsonNull()) && !jsonObj.get("requestDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestDate").toString()));
      }
      if ((jsonObj.get("respondByDate") != null && !jsonObj.get("respondByDate").isJsonNull()) && !jsonObj.get("respondByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respondByDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvidenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvidenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvidenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvidenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EvidenceRequest>() {
           @Override
           public void write(JsonWriter out, EvidenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvidenceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvidenceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvidenceRequest
   * @throws IOException if the JSON string is invalid with respect to EvidenceRequest
   */
  public static EvidenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvidenceRequest.class);
  }

  /**
   * Convert an instance of EvidenceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

