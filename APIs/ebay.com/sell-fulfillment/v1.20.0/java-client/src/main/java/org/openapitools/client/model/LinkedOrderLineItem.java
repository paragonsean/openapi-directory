/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NameValuePair;
import org.openapitools.client.model.TrackingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type contains data on a line item that is related to, but not a part of the order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkedOrderLineItem {
  public static final String SERIALIZED_NAME_LINE_ITEM_ASPECTS = "lineItemAspects";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ASPECTS)
  private List<NameValuePair> lineItemAspects = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE = "maxEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE)
  private String maxEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE = "minEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE)
  private String minEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_SELLER_ID = "sellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<TrackingInfo> shipments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public LinkedOrderLineItem() {
  }

  public LinkedOrderLineItem lineItemAspects(List<NameValuePair> lineItemAspects) {
    this.lineItemAspects = lineItemAspects;
    return this;
  }

  public LinkedOrderLineItem addLineItemAspectsItem(NameValuePair lineItemAspectsItem) {
    if (this.lineItemAspects == null) {
      this.lineItemAspects = new ArrayList<>();
    }
    this.lineItemAspects.add(lineItemAspectsItem);
    return this;
  }

  /**
   * This array contains the complete set of items aspects for the linked line item. For example:&lt;br&gt;&lt;pre&gt;\&quot;lineItemAspects\&quot;: [&lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Tire Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;All Season\&quot;&lt;br&gt;    },&lt;br&gt;&lt;br&gt;    ...&lt;br&gt; &lt;br&gt;    {&lt;br&gt;        \&quot;name\&quot;: \&quot;Car Type\&quot;,&lt;br&gt;        \&quot;value\&quot;: \&quot;Performance\&quot;&lt;br&gt;    }&lt;br&gt;]&lt;/pre&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; All item specifics for the listing are returned. The name/value pairs returned are in the language of the linked line item&#39;s listing site, which may vary from the seller&#39;s language.&lt;/span&gt;
   * @return lineItemAspects
   */
  @javax.annotation.Nullable
  public List<NameValuePair> getLineItemAspects() {
    return lineItemAspects;
  }

  public void setLineItemAspects(List<NameValuePair> lineItemAspects) {
    this.lineItemAspects = lineItemAspects;
  }


  public LinkedOrderLineItem lineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
    return this;
  }

  /**
   * The unique identifier of the linked order line item.
   * @return lineItemId
   */
  @javax.annotation.Nullable
  public String getLineItemId() {
    return lineItemId;
  }

  public void setLineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
  }


  public LinkedOrderLineItem maxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
    return this;
  }

  /**
   * The end of the date range in which the linked line item is expected to be delivered to the shipping address.
   * @return maxEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMaxEstimatedDeliveryDate() {
    return maxEstimatedDeliveryDate;
  }

  public void setMaxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
  }


  public LinkedOrderLineItem minEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
    return this;
  }

  /**
   * The beginning of the date range in which the linked line item is expected to be delivered to the shipping address.
   * @return minEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMinEstimatedDeliveryDate() {
    return minEstimatedDeliveryDate;
  }

  public void setMinEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
  }


  public LinkedOrderLineItem orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The unique identifier of the order to which the linked line item belongs.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public LinkedOrderLineItem sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * The eBay user ID of the seller who sold the linked line item. For example, the user ID of the tire seller.
   * @return sellerId
   */
  @javax.annotation.Nullable
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public LinkedOrderLineItem shipments(List<TrackingInfo> shipments) {
    this.shipments = shipments;
    return this;
  }

  public LinkedOrderLineItem addShipmentsItem(TrackingInfo shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

  /**
   * An array containing any shipment tracking information available for the linked line item.
   * @return shipments
   */
  @javax.annotation.Nullable
  public List<TrackingInfo> getShipments() {
    return shipments;
  }

  public void setShipments(List<TrackingInfo> shipments) {
    this.shipments = shipments;
  }


  public LinkedOrderLineItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The listing title of the linked line item.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkedOrderLineItem linkedOrderLineItem = (LinkedOrderLineItem) o;
    return Objects.equals(this.lineItemAspects, linkedOrderLineItem.lineItemAspects) &&
        Objects.equals(this.lineItemId, linkedOrderLineItem.lineItemId) &&
        Objects.equals(this.maxEstimatedDeliveryDate, linkedOrderLineItem.maxEstimatedDeliveryDate) &&
        Objects.equals(this.minEstimatedDeliveryDate, linkedOrderLineItem.minEstimatedDeliveryDate) &&
        Objects.equals(this.orderId, linkedOrderLineItem.orderId) &&
        Objects.equals(this.sellerId, linkedOrderLineItem.sellerId) &&
        Objects.equals(this.shipments, linkedOrderLineItem.shipments) &&
        Objects.equals(this.title, linkedOrderLineItem.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineItemAspects, lineItemId, maxEstimatedDeliveryDate, minEstimatedDeliveryDate, orderId, sellerId, shipments, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkedOrderLineItem {\n");
    sb.append("    lineItemAspects: ").append(toIndentedString(lineItemAspects)).append("\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    maxEstimatedDeliveryDate: ").append(toIndentedString(maxEstimatedDeliveryDate)).append("\n");
    sb.append("    minEstimatedDeliveryDate: ").append(toIndentedString(minEstimatedDeliveryDate)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lineItemAspects");
    openapiFields.add("lineItemId");
    openapiFields.add("maxEstimatedDeliveryDate");
    openapiFields.add("minEstimatedDeliveryDate");
    openapiFields.add("orderId");
    openapiFields.add("sellerId");
    openapiFields.add("shipments");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkedOrderLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkedOrderLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkedOrderLineItem is not found in the empty JSON string", LinkedOrderLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkedOrderLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkedOrderLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("lineItemAspects") != null && !jsonObj.get("lineItemAspects").isJsonNull()) {
        JsonArray jsonArraylineItemAspects = jsonObj.getAsJsonArray("lineItemAspects");
        if (jsonArraylineItemAspects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItemAspects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItemAspects` to be an array in the JSON string but got `%s`", jsonObj.get("lineItemAspects").toString()));
          }

          // validate the optional field `lineItemAspects` (array)
          for (int i = 0; i < jsonArraylineItemAspects.size(); i++) {
            NameValuePair.validateJsonElement(jsonArraylineItemAspects.get(i));
          };
        }
      }
      if ((jsonObj.get("lineItemId") != null && !jsonObj.get("lineItemId").isJsonNull()) && !jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      if ((jsonObj.get("maxEstimatedDeliveryDate") != null && !jsonObj.get("maxEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("maxEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("minEstimatedDeliveryDate") != null && !jsonObj.get("minEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("minEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("sellerId") != null && !jsonObj.get("sellerId").isJsonNull()) && !jsonObj.get("sellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerId").toString()));
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            TrackingInfo.validateJsonElement(jsonArrayshipments.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkedOrderLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkedOrderLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkedOrderLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkedOrderLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkedOrderLineItem>() {
           @Override
           public void write(JsonWriter out, LinkedOrderLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkedOrderLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkedOrderLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkedOrderLineItem
   * @throws IOException if the JSON string is invalid with respect to LinkedOrderLineItem
   */
  public static LinkedOrderLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkedOrderLineItem.class);
  }

  /**
   * Convert an instance of LinkedOrderLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

