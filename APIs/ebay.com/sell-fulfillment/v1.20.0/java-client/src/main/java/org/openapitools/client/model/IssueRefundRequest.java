/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RefundItem;
import org.openapitools.client.model.SimpleAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base type used by the request payload of the &lt;b&gt;issueRefund&lt;/b&gt; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueRefundRequest {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_ORDER_LEVEL_REFUND_AMOUNT = "orderLevelRefundAmount";
  @SerializedName(SERIALIZED_NAME_ORDER_LEVEL_REFUND_AMOUNT)
  private SimpleAmount orderLevelRefundAmount;

  public static final String SERIALIZED_NAME_REASON_FOR_REFUND = "reasonForRefund";
  @SerializedName(SERIALIZED_NAME_REASON_FOR_REFUND)
  private String reasonForRefund;

  public static final String SERIALIZED_NAME_REFUND_ITEMS = "refundItems";
  @SerializedName(SERIALIZED_NAME_REFUND_ITEMS)
  private List<RefundItem> refundItems = new ArrayList<>();

  public IssueRefundRequest() {
  }

  public IssueRefundRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * This free-text field allows the seller to clarify why the refund is being issued to the buyer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Max Length&lt;/b&gt;: 100
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public IssueRefundRequest orderLevelRefundAmount(SimpleAmount orderLevelRefundAmount) {
    this.orderLevelRefundAmount = orderLevelRefundAmount;
    return this;
  }

  /**
   * Get orderLevelRefundAmount
   * @return orderLevelRefundAmount
   */
  @javax.annotation.Nullable
  public SimpleAmount getOrderLevelRefundAmount() {
    return orderLevelRefundAmount;
  }

  public void setOrderLevelRefundAmount(SimpleAmount orderLevelRefundAmount) {
    this.orderLevelRefundAmount = orderLevelRefundAmount;
  }


  public IssueRefundRequest reasonForRefund(String reasonForRefund) {
    this.reasonForRefund = reasonForRefund;
    return this;
  }

  /**
   * The enumeration value passed into this field indicates the reason for the refund. One of the defined enumeration values in the &lt;b&gt;ReasonForRefundEnum&lt;/b&gt; type must be used.&lt;br&gt;&lt;br&gt;This field is required, and it is highly recommended that sellers use the correct refund reason, especially in the case of a buyer-requested cancellation or &#39;buyer remorse&#39; return to indicate that there was nothing wrong with the item(s) or with the shipment of the order.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If issuing refunds for more than one order line item, keep in mind that the refund reason must be the same for each of the order line items. If the refund reason is different for one or more order line items in an order, the seller would need to make separate &lt;b&gt;issueRefund&lt;/b&gt; calls, one for each refund reason. &lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ReasonForRefundEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reasonForRefund
   */
  @javax.annotation.Nullable
  public String getReasonForRefund() {
    return reasonForRefund;
  }

  public void setReasonForRefund(String reasonForRefund) {
    this.reasonForRefund = reasonForRefund;
  }


  public IssueRefundRequest refundItems(List<RefundItem> refundItems) {
    this.refundItems = refundItems;
    return this;
  }

  public IssueRefundRequest addRefundItemsItem(RefundItem refundItemsItem) {
    if (this.refundItems == null) {
      this.refundItems = new ArrayList<>();
    }
    this.refundItems.add(refundItemsItem);
    return this;
  }

  /**
   * The &lt;b&gt;refundItems&lt;/b&gt; array is only required if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the &lt;b&gt;orderLevelRefundAmount&lt;/b&gt; container to specify the amount of the refund for the entire order.
   * @return refundItems
   */
  @javax.annotation.Nullable
  public List<RefundItem> getRefundItems() {
    return refundItems;
  }

  public void setRefundItems(List<RefundItem> refundItems) {
    this.refundItems = refundItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueRefundRequest issueRefundRequest = (IssueRefundRequest) o;
    return Objects.equals(this.comment, issueRefundRequest.comment) &&
        Objects.equals(this.orderLevelRefundAmount, issueRefundRequest.orderLevelRefundAmount) &&
        Objects.equals(this.reasonForRefund, issueRefundRequest.reasonForRefund) &&
        Objects.equals(this.refundItems, issueRefundRequest.refundItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, orderLevelRefundAmount, reasonForRefund, refundItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueRefundRequest {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    orderLevelRefundAmount: ").append(toIndentedString(orderLevelRefundAmount)).append("\n");
    sb.append("    reasonForRefund: ").append(toIndentedString(reasonForRefund)).append("\n");
    sb.append("    refundItems: ").append(toIndentedString(refundItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("orderLevelRefundAmount");
    openapiFields.add("reasonForRefund");
    openapiFields.add("refundItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueRefundRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueRefundRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueRefundRequest is not found in the empty JSON string", IssueRefundRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueRefundRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueRefundRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `orderLevelRefundAmount`
      if (jsonObj.get("orderLevelRefundAmount") != null && !jsonObj.get("orderLevelRefundAmount").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("orderLevelRefundAmount"));
      }
      if ((jsonObj.get("reasonForRefund") != null && !jsonObj.get("reasonForRefund").isJsonNull()) && !jsonObj.get("reasonForRefund").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonForRefund` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonForRefund").toString()));
      }
      if (jsonObj.get("refundItems") != null && !jsonObj.get("refundItems").isJsonNull()) {
        JsonArray jsonArrayrefundItems = jsonObj.getAsJsonArray("refundItems");
        if (jsonArrayrefundItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refundItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refundItems` to be an array in the JSON string but got `%s`", jsonObj.get("refundItems").toString()));
          }

          // validate the optional field `refundItems` (array)
          for (int i = 0; i < jsonArrayrefundItems.size(); i++) {
            RefundItem.validateJsonElement(jsonArrayrefundItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueRefundRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueRefundRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueRefundRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueRefundRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueRefundRequest>() {
           @Override
           public void write(JsonWriter out, IssueRefundRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueRefundRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueRefundRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueRefundRequest
   * @throws IOException if the JSON string is invalid with respect to IssueRefundRequest
   */
  public static IssueRefundRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueRefundRequest.class);
  }

  /**
   * Convert an instance of IssueRefundRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

