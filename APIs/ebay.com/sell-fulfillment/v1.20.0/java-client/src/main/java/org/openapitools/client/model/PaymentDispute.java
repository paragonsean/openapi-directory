/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DisputeEvidence;
import org.openapitools.client.model.EvidenceRequest;
import org.openapitools.client.model.InfoFromBuyer;
import org.openapitools.client.model.MonetaryTransaction;
import org.openapitools.client.model.OrderLineItems;
import org.openapitools.client.model.PaymentDisputeOutcomeDetail;
import org.openapitools.client.model.ReturnAddress;
import org.openapitools.client.model.SimpleAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type is used by the base response of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method retrieves detailed information on a specific payment dispute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:33.190773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentDispute {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private SimpleAmount amount;

  public static final String SERIALIZED_NAME_AVAILABLE_CHOICES = "availableChoices";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CHOICES)
  private List<String> availableChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYER_PROVIDED = "buyerProvided";
  @SerializedName(SERIALIZED_NAME_BUYER_PROVIDED)
  private InfoFromBuyer buyerProvided;

  public static final String SERIALIZED_NAME_BUYER_USERNAME = "buyerUsername";
  @SerializedName(SERIALIZED_NAME_BUYER_USERNAME)
  private String buyerUsername;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "closedDate";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private String closedDate;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private List<DisputeEvidence> evidence = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVIDENCE_REQUESTS = "evidenceRequests";
  @SerializedName(SERIALIZED_NAME_EVIDENCE_REQUESTS)
  private List<EvidenceRequest> evidenceRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderLineItems> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONETARY_TRANSACTIONS = "monetaryTransactions";
  @SerializedName(SERIALIZED_NAME_MONETARY_TRANSACTIONS)
  private List<MonetaryTransaction> monetaryTransactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OPEN_DATE = "openDate";
  @SerializedName(SERIALIZED_NAME_OPEN_DATE)
  private String openDate;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PAYMENT_DISPUTE_ID = "paymentDisputeId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DISPUTE_ID)
  private String paymentDisputeId;

  public static final String SERIALIZED_NAME_PAYMENT_DISPUTE_STATUS = "paymentDisputeStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DISPUTE_STATUS)
  private String paymentDisputeStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private PaymentDisputeOutcomeDetail resolution;

  public static final String SERIALIZED_NAME_RESPOND_BY_DATE = "respondByDate";
  @SerializedName(SERIALIZED_NAME_RESPOND_BY_DATE)
  private String respondByDate;

  public static final String SERIALIZED_NAME_RETURN_ADDRESS = "returnAddress";
  @SerializedName(SERIALIZED_NAME_RETURN_ADDRESS)
  private ReturnAddress returnAddress;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_SELLER_RESPONSE = "sellerResponse";
  @SerializedName(SERIALIZED_NAME_SELLER_RESPONSE)
  private String sellerResponse;

  public PaymentDispute() {
  }

  public PaymentDispute amount(SimpleAmount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public SimpleAmount getAmount() {
    return amount;
  }

  public void setAmount(SimpleAmount amount) {
    this.amount = amount;
  }


  public PaymentDispute availableChoices(List<String> availableChoices) {
    this.availableChoices = availableChoices;
    return this;
  }

  public PaymentDispute addAvailableChoicesItem(String availableChoicesItem) {
    if (this.availableChoices == null) {
      this.availableChoices = new ArrayList<>();
    }
    this.availableChoices.add(availableChoicesItem);
    return this;
  }

  /**
   * The value(s) returned in this array indicate the choices that the seller has when responding to the payment dispute. Once the seller has responded to the payment dispute, this field will no longer be shown, and instead, the &lt;strong&gt;sellerResponse&lt;/strong&gt; field will show the decision that the seller made.
   * @return availableChoices
   */
  @javax.annotation.Nullable
  public List<String> getAvailableChoices() {
    return availableChoices;
  }

  public void setAvailableChoices(List<String> availableChoices) {
    this.availableChoices = availableChoices;
  }


  public PaymentDispute buyerProvided(InfoFromBuyer buyerProvided) {
    this.buyerProvided = buyerProvided;
    return this;
  }

  /**
   * Get buyerProvided
   * @return buyerProvided
   */
  @javax.annotation.Nullable
  public InfoFromBuyer getBuyerProvided() {
    return buyerProvided;
  }

  public void setBuyerProvided(InfoFromBuyer buyerProvided) {
    this.buyerProvided = buyerProvided;
  }


  public PaymentDispute buyerUsername(String buyerUsername) {
    this.buyerUsername = buyerUsername;
    return this;
  }

  /**
   * This is the eBay user ID of the buyer that initiated the payment dispute.
   * @return buyerUsername
   */
  @javax.annotation.Nullable
  public String getBuyerUsername() {
    return buyerUsername;
  }

  public void setBuyerUsername(String buyerUsername) {
    this.buyerUsername = buyerUsername;
  }


  public PaymentDispute closedDate(String closedDate) {
    this.closedDate = closedDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the &lt;code&gt;CLOSED&lt;/code&gt; state.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return closedDate
   */
  @javax.annotation.Nullable
  public String getClosedDate() {
    return closedDate;
  }

  public void setClosedDate(String closedDate) {
    this.closedDate = closedDate;
  }


  public PaymentDispute evidence(List<DisputeEvidence> evidence) {
    this.evidence = evidence;
    return this;
  }

  public PaymentDispute addEvidenceItem(DisputeEvidence evidenceItem) {
    if (this.evidence == null) {
      this.evidence = new ArrayList<>();
    }
    this.evidence.add(evidenceItem);
    return this;
  }

  /**
   * This container shows any evidence that has been provided by the seller to contest the payment dispute. Evidence may include shipment tracking information, proof of authentication documentation, image(s) to proof that an item is as described, or financial documentation/invoice.&lt;br&gt;&lt;br&gt;This container is only returned if the seller has provided at least one document used as evidence against the payment dispute.
   * @return evidence
   */
  @javax.annotation.Nullable
  public List<DisputeEvidence> getEvidence() {
    return evidence;
  }

  public void setEvidence(List<DisputeEvidence> evidence) {
    this.evidence = evidence;
  }


  public PaymentDispute evidenceRequests(List<EvidenceRequest> evidenceRequests) {
    this.evidenceRequests = evidenceRequests;
    return this;
  }

  public PaymentDispute addEvidenceRequestsItem(EvidenceRequest evidenceRequestsItem) {
    if (this.evidenceRequests == null) {
      this.evidenceRequests = new ArrayList<>();
    }
    this.evidenceRequests.add(evidenceRequestsItem);
    return this;
  }

  /**
   * This container is returned if one or more evidence documents are being requested from the seller.
   * @return evidenceRequests
   */
  @javax.annotation.Nullable
  public List<EvidenceRequest> getEvidenceRequests() {
    return evidenceRequests;
  }

  public void setEvidenceRequests(List<EvidenceRequest> evidenceRequests) {
    this.evidenceRequests = evidenceRequests;
  }


  public PaymentDispute lineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public PaymentDispute addLineItemsItem(OrderLineItems lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * This array is used to identify one or more order line items associated with the payment dispute. There will always be at least one &lt;b&gt;itemId&lt;/b&gt;/&lt;b&gt;lineItemId&lt;/b&gt; pair returned in this array.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItems> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderLineItems> lineItems) {
    this.lineItems = lineItems;
  }


  public PaymentDispute monetaryTransactions(List<MonetaryTransaction> monetaryTransactions) {
    this.monetaryTransactions = monetaryTransactions;
    return this;
  }

  public PaymentDispute addMonetaryTransactionsItem(MonetaryTransaction monetaryTransactionsItem) {
    if (this.monetaryTransactions == null) {
      this.monetaryTransactions = new ArrayList<>();
    }
    this.monetaryTransactions.add(monetaryTransactionsItem);
    return this;
  }

  /**
   * This array provide details about one or more monetary transactions that occur as part of a payment dispute. This array is only returned once one or more monetary transacations occur with a payment dispute.
   * @return monetaryTransactions
   */
  @javax.annotation.Nullable
  public List<MonetaryTransaction> getMonetaryTransactions() {
    return monetaryTransactions;
  }

  public void setMonetaryTransactions(List<MonetaryTransaction> monetaryTransactions) {
    this.monetaryTransactions = monetaryTransactions;
  }


  public PaymentDispute note(String note) {
    this.note = note;
    return this;
  }

  /**
   * This field shows information that the seller provides about the dispute, such as the basis for the dispute, any relevant evidence, tracking numbers, and so forth.&lt;br&gt;&lt;br&gt;This field is limited to 1000 characters.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public PaymentDispute openDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return openDate
   */
  @javax.annotation.Nullable
  public String getOpenDate() {
    return openDate;
  }

  public void setOpenDate(String openDate) {
    this.openDate = openDate;
  }


  public PaymentDispute orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * This is the unique identifier of the order involved in the payment dispute.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PaymentDispute paymentDisputeId(String paymentDisputeId) {
    this.paymentDisputeId = paymentDisputeId;
    return this;
  }

  /**
   * This is the unique identifier of the payment dispute. This is the same identifier that is passed in to the call URI. This identifier is automatically created by eBay once the payment dispute comes into the eBay system.
   * @return paymentDisputeId
   */
  @javax.annotation.Nullable
  public String getPaymentDisputeId() {
    return paymentDisputeId;
  }

  public void setPaymentDisputeId(String paymentDisputeId) {
    this.paymentDisputeId = paymentDisputeId;
  }


  public PaymentDispute paymentDisputeStatus(String paymentDisputeStatus) {
    this.paymentDisputeStatus = paymentDisputeStatus;
    return this;
  }

  /**
   * The enumeration value in this field gives the current status of the payment dispute. The status of a payment dispute partially determines other fields that are returned in the response. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return paymentDisputeStatus
   */
  @javax.annotation.Nullable
  public String getPaymentDisputeStatus() {
    return paymentDisputeStatus;
  }

  public void setPaymentDisputeStatus(String paymentDisputeStatus) {
    this.paymentDisputeStatus = paymentDisputeStatus;
  }


  public PaymentDispute reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See &lt;strong&gt;DisputeReasonEnum&lt;/strong&gt; type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public PaymentDispute resolution(PaymentDisputeOutcomeDetail resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public PaymentDisputeOutcomeDetail getResolution() {
    return resolution;
  }

  public void setResolution(PaymentDisputeOutcomeDetail resolution) {
    this.resolution = resolution;
  }


  public PaymentDispute respondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
    return this;
  }

  /**
   * The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the &lt;code&gt;ACTION_NEEDED&lt;/code&gt; state. For payment disputes that currently require action by the seller, that same seller should look at the &lt;strong&gt;availableChoices&lt;/strong&gt; array to see the available actions.&lt;br&gt;&lt;br&gt;The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: &lt;em&gt;yyyy-MM-ddThh:mm.ss.sssZ&lt;/em&gt;. An example would be &lt;code&gt;2019-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return respondByDate
   */
  @javax.annotation.Nullable
  public String getRespondByDate() {
    return respondByDate;
  }

  public void setRespondByDate(String respondByDate) {
    this.respondByDate = respondByDate;
  }


  public PaymentDispute returnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
    return this;
  }

  /**
   * Get returnAddress
   * @return returnAddress
   */
  @javax.annotation.Nullable
  public ReturnAddress getReturnAddress() {
    return returnAddress;
  }

  public void setReturnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
  }


  public PaymentDispute revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * This integer value indicates the revision number of the payment dispute. Each time an action is taken against a payment dispute, this integer value increases by 1.
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public PaymentDispute sellerResponse(String sellerResponse) {
    this.sellerResponse = sellerResponse;
    return this;
  }

  /**
   * The enumeration value returned in this field indicates how the seller has responded to the payment dispute. The seller has the option of accepting the payment dispute and agreeing to issue a refund, accepting the payment dispute and agreeing to issue a refund as long as the buyer returns the item, or contesting the payment dispute. This field is returned as soon as the seller makes an initial decision on the payment dispute. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/api:SellerResponseEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return sellerResponse
   */
  @javax.annotation.Nullable
  public String getSellerResponse() {
    return sellerResponse;
  }

  public void setSellerResponse(String sellerResponse) {
    this.sellerResponse = sellerResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDispute paymentDispute = (PaymentDispute) o;
    return Objects.equals(this.amount, paymentDispute.amount) &&
        Objects.equals(this.availableChoices, paymentDispute.availableChoices) &&
        Objects.equals(this.buyerProvided, paymentDispute.buyerProvided) &&
        Objects.equals(this.buyerUsername, paymentDispute.buyerUsername) &&
        Objects.equals(this.closedDate, paymentDispute.closedDate) &&
        Objects.equals(this.evidence, paymentDispute.evidence) &&
        Objects.equals(this.evidenceRequests, paymentDispute.evidenceRequests) &&
        Objects.equals(this.lineItems, paymentDispute.lineItems) &&
        Objects.equals(this.monetaryTransactions, paymentDispute.monetaryTransactions) &&
        Objects.equals(this.note, paymentDispute.note) &&
        Objects.equals(this.openDate, paymentDispute.openDate) &&
        Objects.equals(this.orderId, paymentDispute.orderId) &&
        Objects.equals(this.paymentDisputeId, paymentDispute.paymentDisputeId) &&
        Objects.equals(this.paymentDisputeStatus, paymentDispute.paymentDisputeStatus) &&
        Objects.equals(this.reason, paymentDispute.reason) &&
        Objects.equals(this.resolution, paymentDispute.resolution) &&
        Objects.equals(this.respondByDate, paymentDispute.respondByDate) &&
        Objects.equals(this.returnAddress, paymentDispute.returnAddress) &&
        Objects.equals(this.revision, paymentDispute.revision) &&
        Objects.equals(this.sellerResponse, paymentDispute.sellerResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, availableChoices, buyerProvided, buyerUsername, closedDate, evidence, evidenceRequests, lineItems, monetaryTransactions, note, openDate, orderId, paymentDisputeId, paymentDisputeStatus, reason, resolution, respondByDate, returnAddress, revision, sellerResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDispute {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    availableChoices: ").append(toIndentedString(availableChoices)).append("\n");
    sb.append("    buyerProvided: ").append(toIndentedString(buyerProvided)).append("\n");
    sb.append("    buyerUsername: ").append(toIndentedString(buyerUsername)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    evidenceRequests: ").append(toIndentedString(evidenceRequests)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    monetaryTransactions: ").append(toIndentedString(monetaryTransactions)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    openDate: ").append(toIndentedString(openDate)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentDisputeId: ").append(toIndentedString(paymentDisputeId)).append("\n");
    sb.append("    paymentDisputeStatus: ").append(toIndentedString(paymentDisputeStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    respondByDate: ").append(toIndentedString(respondByDate)).append("\n");
    sb.append("    returnAddress: ").append(toIndentedString(returnAddress)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    sellerResponse: ").append(toIndentedString(sellerResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("availableChoices");
    openapiFields.add("buyerProvided");
    openapiFields.add("buyerUsername");
    openapiFields.add("closedDate");
    openapiFields.add("evidence");
    openapiFields.add("evidenceRequests");
    openapiFields.add("lineItems");
    openapiFields.add("monetaryTransactions");
    openapiFields.add("note");
    openapiFields.add("openDate");
    openapiFields.add("orderId");
    openapiFields.add("paymentDisputeId");
    openapiFields.add("paymentDisputeStatus");
    openapiFields.add("reason");
    openapiFields.add("resolution");
    openapiFields.add("respondByDate");
    openapiFields.add("returnAddress");
    openapiFields.add("revision");
    openapiFields.add("sellerResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentDispute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentDispute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentDispute is not found in the empty JSON string", PaymentDispute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentDispute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentDispute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        SimpleAmount.validateJsonElement(jsonObj.get("amount"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableChoices") != null && !jsonObj.get("availableChoices").isJsonNull() && !jsonObj.get("availableChoices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableChoices` to be an array in the JSON string but got `%s`", jsonObj.get("availableChoices").toString()));
      }
      // validate the optional field `buyerProvided`
      if (jsonObj.get("buyerProvided") != null && !jsonObj.get("buyerProvided").isJsonNull()) {
        InfoFromBuyer.validateJsonElement(jsonObj.get("buyerProvided"));
      }
      if ((jsonObj.get("buyerUsername") != null && !jsonObj.get("buyerUsername").isJsonNull()) && !jsonObj.get("buyerUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerUsername").toString()));
      }
      if ((jsonObj.get("closedDate") != null && !jsonObj.get("closedDate").isJsonNull()) && !jsonObj.get("closedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedDate").toString()));
      }
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        JsonArray jsonArrayevidence = jsonObj.getAsJsonArray("evidence");
        if (jsonArrayevidence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("evidence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `evidence` to be an array in the JSON string but got `%s`", jsonObj.get("evidence").toString()));
          }

          // validate the optional field `evidence` (array)
          for (int i = 0; i < jsonArrayevidence.size(); i++) {
            DisputeEvidence.validateJsonElement(jsonArrayevidence.get(i));
          };
        }
      }
      if (jsonObj.get("evidenceRequests") != null && !jsonObj.get("evidenceRequests").isJsonNull()) {
        JsonArray jsonArrayevidenceRequests = jsonObj.getAsJsonArray("evidenceRequests");
        if (jsonArrayevidenceRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("evidenceRequests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `evidenceRequests` to be an array in the JSON string but got `%s`", jsonObj.get("evidenceRequests").toString()));
          }

          // validate the optional field `evidenceRequests` (array)
          for (int i = 0; i < jsonArrayevidenceRequests.size(); i++) {
            EvidenceRequest.validateJsonElement(jsonArrayevidenceRequests.get(i));
          };
        }
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItems.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if (jsonObj.get("monetaryTransactions") != null && !jsonObj.get("monetaryTransactions").isJsonNull()) {
        JsonArray jsonArraymonetaryTransactions = jsonObj.getAsJsonArray("monetaryTransactions");
        if (jsonArraymonetaryTransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monetaryTransactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monetaryTransactions` to be an array in the JSON string but got `%s`", jsonObj.get("monetaryTransactions").toString()));
          }

          // validate the optional field `monetaryTransactions` (array)
          for (int i = 0; i < jsonArraymonetaryTransactions.size(); i++) {
            MonetaryTransaction.validateJsonElement(jsonArraymonetaryTransactions.get(i));
          };
        }
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("openDate") != null && !jsonObj.get("openDate").isJsonNull()) && !jsonObj.get("openDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openDate").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("paymentDisputeId") != null && !jsonObj.get("paymentDisputeId").isJsonNull()) && !jsonObj.get("paymentDisputeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentDisputeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentDisputeId").toString()));
      }
      if ((jsonObj.get("paymentDisputeStatus") != null && !jsonObj.get("paymentDisputeStatus").isJsonNull()) && !jsonObj.get("paymentDisputeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentDisputeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentDisputeStatus").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        PaymentDisputeOutcomeDetail.validateJsonElement(jsonObj.get("resolution"));
      }
      if ((jsonObj.get("respondByDate") != null && !jsonObj.get("respondByDate").isJsonNull()) && !jsonObj.get("respondByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respondByDate").toString()));
      }
      // validate the optional field `returnAddress`
      if (jsonObj.get("returnAddress") != null && !jsonObj.get("returnAddress").isJsonNull()) {
        ReturnAddress.validateJsonElement(jsonObj.get("returnAddress"));
      }
      if ((jsonObj.get("sellerResponse") != null && !jsonObj.get("sellerResponse").isJsonNull()) && !jsonObj.get("sellerResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerResponse").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentDispute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentDispute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentDispute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentDispute.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentDispute>() {
           @Override
           public void write(JsonWriter out, PaymentDispute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentDispute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentDispute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentDispute
   * @throws IOException if the JSON string is invalid with respect to PaymentDispute
   */
  public static PaymentDispute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDispute.class);
  }

  /**
   * Convert an instance of PaymentDispute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

