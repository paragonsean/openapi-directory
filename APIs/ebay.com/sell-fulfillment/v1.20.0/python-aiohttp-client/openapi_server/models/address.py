# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country_code: str=None, county: str=None, postal_code: str=None, state_or_province: str=None):
        """Address - a model defined in OpenAPI

        :param address_line1: The address_line1 of this Address.
        :param address_line2: The address_line2 of this Address.
        :param city: The city of this Address.
        :param country_code: The country_code of this Address.
        :param county: The county of this Address.
        :param postal_code: The postal_code of this Address.
        :param state_or_province: The state_or_province of this Address.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country_code': str,
            'county': str,
            'postal_code': str,
            'state_or_province': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'country_code': 'countryCode',
            'county': 'county',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country_code = country_code
        self._county = county
        self._postal_code = postal_code
        self._state_or_province = state_or_province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.

        The first line of the street address.<br><br><span class=\"tablenote\"><strong>Note:</strong> <b>addressLine1</b> will not be returned for any order that is more than 90 days old.</span>

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        The first line of the street address.<br><br><span class=\"tablenote\"><strong>Note:</strong> <b>addressLine1</b> will not be returned for any order that is more than 90 days old.</span>

        :param address_line1: The address_line1 of this Address.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.

        The second line of the street address. This field can be used for additional address information, such as a suite or apartment number. This field will be returned if defined for the shipping address.<br><br><span class=\"tablenote\"><strong>Note:</strong> <b>addressLine2</b> will not be returned for any order that is more than 90 days old.</span><br><span class=\"tablenote\"><b>Note:</b> As of January 31, 2022, <b>addressLine2</b> no longer returns EU VAT tax information. To determine line-item level VAT tax information, refer to <a href=\"#response.orders.lineItems.ebayCollectAndRemitTaxes.ebayReference\">eBayReference</a>.</span>

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        The second line of the street address. This field can be used for additional address information, such as a suite or apartment number. This field will be returned if defined for the shipping address.<br><br><span class=\"tablenote\"><strong>Note:</strong> <b>addressLine2</b> will not be returned for any order that is more than 90 days old.</span><br><span class=\"tablenote\"><b>Note:</b> As of January 31, 2022, <b>addressLine2</b> no longer returns EU VAT tax information. To determine line-item level VAT tax information, refer to <a href=\"#response.orders.lineItems.ebayCollectAndRemitTaxes.ebayReference\">eBayReference</a>.</span>

        :param address_line2: The address_line2 of this Address.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Address.

        The city of the shipping destination.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city of the shipping destination.

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Address.

        The country of the shipping destination, represented as a two-letter ISO 3166-1 alpha-2 country code. For example, <code>US</code> represents the United States, and <code>DE</code> represents Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        The country of the shipping destination, represented as a two-letter ISO 3166-1 alpha-2 country code. For example, <code>US</code> represents the United States, and <code>DE</code> represents Germany. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :param country_code: The country_code of this Address.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def county(self):
        """Gets the county of this Address.

        The county of the shipping destination. Counties typically, but not always, contain multiple cities or towns. This field is returned if known/available.

        :return: The county of this Address.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.

        The county of the shipping destination. Counties typically, but not always, contain multiple cities or towns. This field is returned if known/available.

        :param county: The county of this Address.
        :type county: str
        """

        self._county = county

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        The postal code of the shipping destination. Usually referred to as Zip codes in the US. Most countries have postal codes, but not all. The postal code will be returned if applicable.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code of the shipping destination. Usually referred to as Zip codes in the US. Most countries have postal codes, but not all. The postal code will be returned if applicable.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this Address.

        The state or province of the shipping destination. Most countries have states or provinces, but not all. The state or province will be returned if applicable.

        :return: The state_or_province of this Address.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this Address.

        The state or province of the shipping destination. Most countries have states or provinces, but not all. The state or province will be returned if applicable.

        :param state_or_province: The state_or_province of this Address.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province
