# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.payment_hold import PaymentHold
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, payment_date: str=None, payment_holds: List[PaymentHold]=None, payment_method: str=None, payment_reference_id: str=None, payment_status: str=None):
        """Payment - a model defined in OpenAPI

        :param amount: The amount of this Payment.
        :param payment_date: The payment_date of this Payment.
        :param payment_holds: The payment_holds of this Payment.
        :param payment_method: The payment_method of this Payment.
        :param payment_reference_id: The payment_reference_id of this Payment.
        :param payment_status: The payment_status of this Payment.
        """
        self.openapi_types = {
            'amount': Amount,
            'payment_date': str,
            'payment_holds': List[PaymentHold],
            'payment_method': str,
            'payment_reference_id': str,
            'payment_status': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'payment_date': 'paymentDate',
            'payment_holds': 'paymentHolds',
            'payment_method': 'paymentMethod',
            'payment_reference_id': 'paymentReferenceId',
            'payment_status': 'paymentStatus'
        }

        self._amount = amount
        self._payment_date = payment_date
        self._payment_holds = payment_holds
        self._payment_method = payment_method
        self._payment_reference_id = payment_reference_id
        self._payment_status = payment_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Payment.


        :return: The amount of this Payment.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.


        :param amount: The amount of this Payment.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def payment_date(self):
        """Gets the payment_date of this Payment.

        The date and time that the payment was received by the seller. This field will not be returned if buyer has yet to pay for the order. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>

        :return: The payment_date of this Payment.
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Payment.

        The date and time that the payment was received by the seller. This field will not be returned if buyer has yet to pay for the order. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>

        :param payment_date: The payment_date of this Payment.
        :type payment_date: str
        """

        self._payment_date = payment_date

    @property
    def payment_holds(self):
        """Gets the payment_holds of this Payment.

        This container is only returned if eBay is temporarily holding the seller's funds for the order. If a payment hold has been placed on the order, this container includes the reason for the payment hold, the expected release date of the funds into the seller's account, the current state of the hold, and as soon as the payment hold has been released, the actual release date.

        :return: The payment_holds of this Payment.
        :rtype: List[PaymentHold]
        """
        return self._payment_holds

    @payment_holds.setter
    def payment_holds(self, payment_holds):
        """Sets the payment_holds of this Payment.

        This container is only returned if eBay is temporarily holding the seller's funds for the order. If a payment hold has been placed on the order, this container includes the reason for the payment hold, the expected release date of the funds into the seller's account, the current state of the hold, and as soon as the payment hold has been released, the actual release date.

        :param payment_holds: The payment_holds of this Payment.
        :type payment_holds: List[PaymentHold]
        """

        self._payment_holds = payment_holds

    @property
    def payment_method(self):
        """Gets the payment_method of this Payment.

        The payment method used to pay for the order. See the <strong>PaymentMethodTypeEnum</strong> type for more information on the payment methods. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentMethodTypeEnum'>eBay API documentation</a>

        :return: The payment_method of this Payment.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Payment.

        The payment method used to pay for the order. See the <strong>PaymentMethodTypeEnum</strong> type for more information on the payment methods. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentMethodTypeEnum'>eBay API documentation</a>

        :param payment_method: The payment_method of this Payment.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payment_reference_id(self):
        """Gets the payment_reference_id of this Payment.

        This field is only returned if payment has been made by the buyer, and the <strong>paymentMethod</strong> is <code>ESCROW</code>. This field contains a special ID for ESCROW.

        :return: The payment_reference_id of this Payment.
        :rtype: str
        """
        return self._payment_reference_id

    @payment_reference_id.setter
    def payment_reference_id(self, payment_reference_id):
        """Sets the payment_reference_id of this Payment.

        This field is only returned if payment has been made by the buyer, and the <strong>paymentMethod</strong> is <code>ESCROW</code>. This field contains a special ID for ESCROW.

        :param payment_reference_id: The payment_reference_id of this Payment.
        :type payment_reference_id: str
        """

        self._payment_reference_id = payment_reference_id

    @property
    def payment_status(self):
        """Gets the payment_status of this Payment.

        The enumeration value returned in this field indicates the status of the payment for the order. See the <strong>PaymentStatusEnum</strong> type definition for more information on the possible payment states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentStatusEnum'>eBay API documentation</a>

        :return: The payment_status of this Payment.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Payment.

        The enumeration value returned in this field indicates the status of the payment for the order. See the <strong>PaymentStatusEnum</strong> type definition for more information on the possible payment states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentStatusEnum'>eBay API documentation</a>

        :param payment_status: The payment_status of this Payment.
        :type payment_status: str
        """

        self._payment_status = payment_status
