# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.order import Order
from openapi_server import util


class OrderSearchPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, orders: List[Order]=None, prev: str=None, total: int=None, warnings: List[Error]=None):
        """OrderSearchPagedCollection - a model defined in OpenAPI

        :param href: The href of this OrderSearchPagedCollection.
        :param limit: The limit of this OrderSearchPagedCollection.
        :param next: The next of this OrderSearchPagedCollection.
        :param offset: The offset of this OrderSearchPagedCollection.
        :param orders: The orders of this OrderSearchPagedCollection.
        :param prev: The prev of this OrderSearchPagedCollection.
        :param total: The total of this OrderSearchPagedCollection.
        :param warnings: The warnings of this OrderSearchPagedCollection.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'orders': List[Order],
            'prev': str,
            'total': int,
            'warnings': List[Error]
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'orders': 'orders',
            'prev': 'prev',
            'total': 'total',
            'warnings': 'warnings'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._orders = orders
        self._prev = prev
        self._total = total
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderSearchPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderSearchPagedCollection of this OrderSearchPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this OrderSearchPagedCollection.

        The URI of the <b>getOrders</b> call request that produced the current page of the result set.

        :return: The href of this OrderSearchPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this OrderSearchPagedCollection.

        The URI of the <b>getOrders</b> call request that produced the current page of the result set.

        :param href: The href of this OrderSearchPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this OrderSearchPagedCollection.

        The maximum number of orders returned per page of the result set. The <strong>limit</strong> value can be passed in as a query parameter, or if omitted, its value defaults to <code>50</code>. <br><br><span class=\"tablenote\"><strong>Note:</strong> If this is the last or only page of the result set, the page may contain fewer orders than the <strong>limit</strong> value.  To determine the number of pages in a result set, divide the <b>total</b> value (total number of orders matching input criteria) by this <strong>limit</strong> value, and then round up to the next integer. For example, if the <b>total</b> value was <code>120</code> (120 total orders) and the <strong>limit</strong> value was <code>50</code> (show 50 orders per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getOrders</strong> calls to view all orders matching the input criteria. </span><b>Default:</b> <code>50</code>

        :return: The limit of this OrderSearchPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this OrderSearchPagedCollection.

        The maximum number of orders returned per page of the result set. The <strong>limit</strong> value can be passed in as a query parameter, or if omitted, its value defaults to <code>50</code>. <br><br><span class=\"tablenote\"><strong>Note:</strong> If this is the last or only page of the result set, the page may contain fewer orders than the <strong>limit</strong> value.  To determine the number of pages in a result set, divide the <b>total</b> value (total number of orders matching input criteria) by this <strong>limit</strong> value, and then round up to the next integer. For example, if the <b>total</b> value was <code>120</code> (120 total orders) and the <strong>limit</strong> value was <code>50</code> (show 50 orders per page), the total number of pages in the result set is three, so the seller would have to make three separate <strong>getOrders</strong> calls to view all orders matching the input criteria. </span><b>Default:</b> <code>50</code>

        :param limit: The limit of this OrderSearchPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this OrderSearchPagedCollection.

        The <b>getOrders</b> call URI to use if you wish to view the  next page of the result set. For example, the following URI returns records 41 thru 50 from the collection of orders: <br><br><code><i>path</i>/order?limit=10&offset=40 </code><br><br>This field is only returned if there is a next page of results to view based on the current input criteria.<br>

        :return: The next of this OrderSearchPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this OrderSearchPagedCollection.

        The <b>getOrders</b> call URI to use if you wish to view the  next page of the result set. For example, the following URI returns records 41 thru 50 from the collection of orders: <br><br><code><i>path</i>/order?limit=10&offset=40 </code><br><br>This field is only returned if there is a next page of results to view based on the current input criteria.<br>

        :param next: The next of this OrderSearchPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this OrderSearchPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :return: The offset of this OrderSearchPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this OrderSearchPagedCollection.

        The number of results skipped in the result set before listing the first returned result. This value can be set in the request with the <b>offset</b> query parameter. <p class=\"tablenote\"><strong>Note: </strong>The items in a paginated result set use a zero-based list where the first item in the list has an offset of <code>0</code>.</p>

        :param offset: The offset of this OrderSearchPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def orders(self):
        """Gets the orders of this OrderSearchPagedCollection.

        This array contains one or more orders that are part of the current result set, that is controlled by the input criteria. The details of each order include information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status. <br><br>By default, orders are returned according to creation date (oldest to newest), but the order will vary according to any filter that is set in request.

        :return: The orders of this OrderSearchPagedCollection.
        :rtype: List[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this OrderSearchPagedCollection.

        This array contains one or more orders that are part of the current result set, that is controlled by the input criteria. The details of each order include information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status. <br><br>By default, orders are returned according to creation date (oldest to newest), but the order will vary according to any filter that is set in request.

        :param orders: The orders of this OrderSearchPagedCollection.
        :type orders: List[Order]
        """

        self._orders = orders

    @property
    def prev(self):
        """Gets the prev of this OrderSearchPagedCollection.

        The <b>getOrders</b> call URI for the previous result set. For example, the following URI returns orders 21 thru 30 from the collection of orders: <br><br><code><i>path</i>/order?limit=10&offset=20</code><br><br>This field is only returned if there is a previous page of results to view based on the current input criteria.

        :return: The prev of this OrderSearchPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this OrderSearchPagedCollection.

        The <b>getOrders</b> call URI for the previous result set. For example, the following URI returns orders 21 thru 30 from the collection of orders: <br><br><code><i>path</i>/order?limit=10&offset=20</code><br><br>This field is only returned if there is a previous page of results to view based on the current input criteria.

        :param prev: The prev of this OrderSearchPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this OrderSearchPagedCollection.

        The total number of orders in the results set based on the current input criteria.<br><br><span class=\"tablenote\"><strong>Note:</strong> If no orders are found, this field is returned with a value of <code>0</code>.</span>

        :return: The total of this OrderSearchPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderSearchPagedCollection.

        The total number of orders in the results set based on the current input criteria.<br><br><span class=\"tablenote\"><strong>Note:</strong> If no orders are found, this field is returned with a value of <code>0</code>.</span>

        :param total: The total of this OrderSearchPagedCollection.
        :type total: int
        """

        self._total = total

    @property
    def warnings(self):
        """Gets the warnings of this OrderSearchPagedCollection.

        This array is returned if one or more errors or warnings occur with the call request.

        :return: The warnings of this OrderSearchPagedCollection.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this OrderSearchPagedCollection.

        This array is returned if one or more errors or warnings occur with the call request.

        :param warnings: The warnings of this OrderSearchPagedCollection.
        :type warnings: List[Error]
        """

        self._warnings = warnings
