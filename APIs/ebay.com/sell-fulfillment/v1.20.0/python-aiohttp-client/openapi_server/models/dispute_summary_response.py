# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_dispute_summary import PaymentDisputeSummary
from openapi_server import util


class DisputeSummaryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, limit: int=None, next: str=None, offset: int=None, payment_dispute_summaries: List[PaymentDisputeSummary]=None, prev: str=None, total: int=None):
        """DisputeSummaryResponse - a model defined in OpenAPI

        :param href: The href of this DisputeSummaryResponse.
        :param limit: The limit of this DisputeSummaryResponse.
        :param next: The next of this DisputeSummaryResponse.
        :param offset: The offset of this DisputeSummaryResponse.
        :param payment_dispute_summaries: The payment_dispute_summaries of this DisputeSummaryResponse.
        :param prev: The prev of this DisputeSummaryResponse.
        :param total: The total of this DisputeSummaryResponse.
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'offset': int,
            'payment_dispute_summaries': List[PaymentDisputeSummary],
            'prev': str,
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'payment_dispute_summaries': 'paymentDisputeSummaries',
            'prev': 'prev',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._offset = offset
        self._payment_dispute_summaries = payment_dispute_summaries
        self._prev = prev
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputeSummaryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisputeSummaryResponse of this DisputeSummaryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this DisputeSummaryResponse.

        The URI of the <strong>getPaymentDisputeSummaries</strong> call request that produced the current page of the result set.

        :return: The href of this DisputeSummaryResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DisputeSummaryResponse.

        The URI of the <strong>getPaymentDisputeSummaries</strong> call request that produced the current page of the result set.

        :param href: The href of this DisputeSummaryResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this DisputeSummaryResponse.

        This value shows the maximum number of payment disputes that will appear on one page of the result set. The <strong>limit</strong> value can be passed in as a query parameter in the request, or if it is not used, it defaults to <code>200</code>. If the value in the <strong>total</strong> field exceeds this <strong>limit</strong> value, there are multiple pages in the current result set.<br><br><b>Min</b>: 1; <b>Max</b>: 200; <b>Default</b>: 200

        :return: The limit of this DisputeSummaryResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DisputeSummaryResponse.

        This value shows the maximum number of payment disputes that will appear on one page of the result set. The <strong>limit</strong> value can be passed in as a query parameter in the request, or if it is not used, it defaults to <code>200</code>. If the value in the <strong>total</strong> field exceeds this <strong>limit</strong> value, there are multiple pages in the current result set.<br><br><b>Min</b>: 1; <b>Max</b>: 200; <b>Default</b>: 200

        :param limit: The limit of this DisputeSummaryResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this DisputeSummaryResponse.

        The <strong>getPaymentDisputeSummaries</strong> call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:<br><br><code>path/payment_dispute_summary?limit=10&offset=10</code><br><br>This field is only returned if there is a next page of results to view based on the current input criteria.

        :return: The next of this DisputeSummaryResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this DisputeSummaryResponse.

        The <strong>getPaymentDisputeSummaries</strong> call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:<br><br><code>path/payment_dispute_summary?limit=10&offset=10</code><br><br>This field is only returned if there is a next page of results to view based on the current input criteria.

        :param next: The next of this DisputeSummaryResponse.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this DisputeSummaryResponse.

        This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The <strong>offset</strong> value can be passed in as a query parameter in the request, or if it is not used, it defaults to <code>0</code> and the first payment dispute of the result set is shown at the top of the response.

        :return: The offset of this DisputeSummaryResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DisputeSummaryResponse.

        This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The <strong>offset</strong> value can be passed in as a query parameter in the request, or if it is not used, it defaults to <code>0</code> and the first payment dispute of the result set is shown at the top of the response.

        :param offset: The offset of this DisputeSummaryResponse.
        :type offset: int
        """

        self._offset = offset

    @property
    def payment_dispute_summaries(self):
        """Gets the payment_dispute_summaries of this DisputeSummaryResponse.

        Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned.

        :return: The payment_dispute_summaries of this DisputeSummaryResponse.
        :rtype: List[PaymentDisputeSummary]
        """
        return self._payment_dispute_summaries

    @payment_dispute_summaries.setter
    def payment_dispute_summaries(self, payment_dispute_summaries):
        """Sets the payment_dispute_summaries of this DisputeSummaryResponse.

        Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned.

        :param payment_dispute_summaries: The payment_dispute_summaries of this DisputeSummaryResponse.
        :type payment_dispute_summaries: List[PaymentDisputeSummary]
        """

        self._payment_dispute_summaries = payment_dispute_summaries

    @property
    def prev(self):
        """Gets the prev of this DisputeSummaryResponse.

        The <strong>getPaymentDisputeSummaries</strong> call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:<br><br><code>path/payment_dispute_summary?limit=10&offset=0</code><br><br>This field is only returned if there is a previous page of results to view based on the current input criteria.

        :return: The prev of this DisputeSummaryResponse.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this DisputeSummaryResponse.

        The <strong>getPaymentDisputeSummaries</strong> call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:<br><br><code>path/payment_dispute_summary?limit=10&offset=0</code><br><br>This field is only returned if there is a previous page of results to view based on the current input criteria.

        :param prev: The prev of this DisputeSummaryResponse.
        :type prev: str
        """

        self._prev = prev

    @property
    def total(self):
        """Gets the total of this DisputeSummaryResponse.

        This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for <strong>limit</strong> in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is <code>0</code>.

        :return: The total of this DisputeSummaryResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DisputeSummaryResponse.

        This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for <strong>limit</strong> in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is <code>0</code>.

        :param total: The total of this DisputeSummaryResponse.
        :type total: int
        """

        self._total = total
