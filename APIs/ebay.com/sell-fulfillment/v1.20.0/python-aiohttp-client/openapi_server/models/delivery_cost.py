# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class DeliveryCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_amount: Amount=None, handling_cost: Amount=None, import_charges: Amount=None, shipping_cost: Amount=None, shipping_intermediation_fee: Amount=None):
        """DeliveryCost - a model defined in OpenAPI

        :param discount_amount: The discount_amount of this DeliveryCost.
        :param handling_cost: The handling_cost of this DeliveryCost.
        :param import_charges: The import_charges of this DeliveryCost.
        :param shipping_cost: The shipping_cost of this DeliveryCost.
        :param shipping_intermediation_fee: The shipping_intermediation_fee of this DeliveryCost.
        """
        self.openapi_types = {
            'discount_amount': Amount,
            'handling_cost': Amount,
            'import_charges': Amount,
            'shipping_cost': Amount,
            'shipping_intermediation_fee': Amount
        }

        self.attribute_map = {
            'discount_amount': 'discountAmount',
            'handling_cost': 'handlingCost',
            'import_charges': 'importCharges',
            'shipping_cost': 'shippingCost',
            'shipping_intermediation_fee': 'shippingIntermediationFee'
        }

        self._discount_amount = discount_amount
        self._handling_cost = handling_cost
        self._import_charges = import_charges
        self._shipping_cost = shipping_cost
        self._shipping_intermediation_fee = shipping_intermediation_fee

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryCost of this DeliveryCost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_amount(self):
        """Gets the discount_amount of this DeliveryCost.


        :return: The discount_amount of this DeliveryCost.
        :rtype: Amount
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this DeliveryCost.


        :param discount_amount: The discount_amount of this DeliveryCost.
        :type discount_amount: Amount
        """

        self._discount_amount = discount_amount

    @property
    def handling_cost(self):
        """Gets the handling_cost of this DeliveryCost.


        :return: The handling_cost of this DeliveryCost.
        :rtype: Amount
        """
        return self._handling_cost

    @handling_cost.setter
    def handling_cost(self, handling_cost):
        """Sets the handling_cost of this DeliveryCost.


        :param handling_cost: The handling_cost of this DeliveryCost.
        :type handling_cost: Amount
        """

        self._handling_cost = handling_cost

    @property
    def import_charges(self):
        """Gets the import_charges of this DeliveryCost.


        :return: The import_charges of this DeliveryCost.
        :rtype: Amount
        """
        return self._import_charges

    @import_charges.setter
    def import_charges(self, import_charges):
        """Sets the import_charges of this DeliveryCost.


        :param import_charges: The import_charges of this DeliveryCost.
        :type import_charges: Amount
        """

        self._import_charges = import_charges

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this DeliveryCost.


        :return: The shipping_cost of this DeliveryCost.
        :rtype: Amount
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this DeliveryCost.


        :param shipping_cost: The shipping_cost of this DeliveryCost.
        :type shipping_cost: Amount
        """

        self._shipping_cost = shipping_cost

    @property
    def shipping_intermediation_fee(self):
        """Gets the shipping_intermediation_fee of this DeliveryCost.


        :return: The shipping_intermediation_fee of this DeliveryCost.
        :rtype: Amount
        """
        return self._shipping_intermediation_fee

    @shipping_intermediation_fee.setter
    def shipping_intermediation_fee(self, shipping_intermediation_fee):
        """Sets the shipping_intermediation_fee of this DeliveryCost.


        :param shipping_intermediation_fee: The shipping_intermediation_fee of this DeliveryCost.
        :type shipping_intermediation_fee: Amount
        """

        self._shipping_intermediation_fee = shipping_intermediation_fee
