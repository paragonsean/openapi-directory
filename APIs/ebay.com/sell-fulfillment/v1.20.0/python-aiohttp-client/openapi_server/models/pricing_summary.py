# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class PricingSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: Amount=None, delivery_cost: Amount=None, delivery_discount: Amount=None, fee: Amount=None, price_discount: Amount=None, price_subtotal: Amount=None, tax: Amount=None, total: Amount=None):
        """PricingSummary - a model defined in OpenAPI

        :param adjustment: The adjustment of this PricingSummary.
        :param delivery_cost: The delivery_cost of this PricingSummary.
        :param delivery_discount: The delivery_discount of this PricingSummary.
        :param fee: The fee of this PricingSummary.
        :param price_discount: The price_discount of this PricingSummary.
        :param price_subtotal: The price_subtotal of this PricingSummary.
        :param tax: The tax of this PricingSummary.
        :param total: The total of this PricingSummary.
        """
        self.openapi_types = {
            'adjustment': Amount,
            'delivery_cost': Amount,
            'delivery_discount': Amount,
            'fee': Amount,
            'price_discount': Amount,
            'price_subtotal': Amount,
            'tax': Amount,
            'total': Amount
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'delivery_cost': 'deliveryCost',
            'delivery_discount': 'deliveryDiscount',
            'fee': 'fee',
            'price_discount': 'priceDiscount',
            'price_subtotal': 'priceSubtotal',
            'tax': 'tax',
            'total': 'total'
        }

        self._adjustment = adjustment
        self._delivery_cost = delivery_cost
        self._delivery_discount = delivery_discount
        self._fee = fee
        self._price_discount = price_discount
        self._price_subtotal = price_subtotal
        self._tax = tax
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingSummary of this PricingSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this PricingSummary.


        :return: The adjustment of this PricingSummary.
        :rtype: Amount
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this PricingSummary.


        :param adjustment: The adjustment of this PricingSummary.
        :type adjustment: Amount
        """

        self._adjustment = adjustment

    @property
    def delivery_cost(self):
        """Gets the delivery_cost of this PricingSummary.


        :return: The delivery_cost of this PricingSummary.
        :rtype: Amount
        """
        return self._delivery_cost

    @delivery_cost.setter
    def delivery_cost(self, delivery_cost):
        """Sets the delivery_cost of this PricingSummary.


        :param delivery_cost: The delivery_cost of this PricingSummary.
        :type delivery_cost: Amount
        """

        self._delivery_cost = delivery_cost

    @property
    def delivery_discount(self):
        """Gets the delivery_discount of this PricingSummary.


        :return: The delivery_discount of this PricingSummary.
        :rtype: Amount
        """
        return self._delivery_discount

    @delivery_discount.setter
    def delivery_discount(self, delivery_discount):
        """Sets the delivery_discount of this PricingSummary.


        :param delivery_discount: The delivery_discount of this PricingSummary.
        :type delivery_discount: Amount
        """

        self._delivery_discount = delivery_discount

    @property
    def fee(self):
        """Gets the fee of this PricingSummary.


        :return: The fee of this PricingSummary.
        :rtype: Amount
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this PricingSummary.


        :param fee: The fee of this PricingSummary.
        :type fee: Amount
        """

        self._fee = fee

    @property
    def price_discount(self):
        """Gets the price_discount of this PricingSummary.


        :return: The price_discount of this PricingSummary.
        :rtype: Amount
        """
        return self._price_discount

    @price_discount.setter
    def price_discount(self, price_discount):
        """Sets the price_discount of this PricingSummary.


        :param price_discount: The price_discount of this PricingSummary.
        :type price_discount: Amount
        """

        self._price_discount = price_discount

    @property
    def price_subtotal(self):
        """Gets the price_subtotal of this PricingSummary.


        :return: The price_subtotal of this PricingSummary.
        :rtype: Amount
        """
        return self._price_subtotal

    @price_subtotal.setter
    def price_subtotal(self, price_subtotal):
        """Sets the price_subtotal of this PricingSummary.


        :param price_subtotal: The price_subtotal of this PricingSummary.
        :type price_subtotal: Amount
        """

        self._price_subtotal = price_subtotal

    @property
    def tax(self):
        """Gets the tax of this PricingSummary.


        :return: The tax of this PricingSummary.
        :rtype: Amount
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this PricingSummary.


        :param tax: The tax of this PricingSummary.
        :type tax: Amount
        """

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this PricingSummary.


        :return: The total of this PricingSummary.
        :rtype: Amount
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PricingSummary.


        :param total: The total of this PricingSummary.
        :type total: Amount
        """

        self._total = total
