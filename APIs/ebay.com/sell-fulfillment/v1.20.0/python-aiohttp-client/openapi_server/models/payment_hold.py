# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.seller_actions_to_release import SellerActionsToRelease
from openapi_server import util


class PaymentHold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_release_date: str=None, hold_amount: Amount=None, hold_reason: str=None, hold_state: str=None, release_date: str=None, seller_actions_to_release: List[SellerActionsToRelease]=None):
        """PaymentHold - a model defined in OpenAPI

        :param expected_release_date: The expected_release_date of this PaymentHold.
        :param hold_amount: The hold_amount of this PaymentHold.
        :param hold_reason: The hold_reason of this PaymentHold.
        :param hold_state: The hold_state of this PaymentHold.
        :param release_date: The release_date of this PaymentHold.
        :param seller_actions_to_release: The seller_actions_to_release of this PaymentHold.
        """
        self.openapi_types = {
            'expected_release_date': str,
            'hold_amount': Amount,
            'hold_reason': str,
            'hold_state': str,
            'release_date': str,
            'seller_actions_to_release': List[SellerActionsToRelease]
        }

        self.attribute_map = {
            'expected_release_date': 'expectedReleaseDate',
            'hold_amount': 'holdAmount',
            'hold_reason': 'holdReason',
            'hold_state': 'holdState',
            'release_date': 'releaseDate',
            'seller_actions_to_release': 'sellerActionsToRelease'
        }

        self._expected_release_date = expected_release_date
        self._hold_amount = hold_amount
        self._hold_reason = hold_reason
        self._hold_state = hold_state
        self._release_date = release_date
        self._seller_actions_to_release = seller_actions_to_release

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentHold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentHold of this PaymentHold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_release_date(self):
        """Gets the expected_release_date of this PaymentHold.

        The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field will be returned if known by eBay. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>

        :return: The expected_release_date of this PaymentHold.
        :rtype: str
        """
        return self._expected_release_date

    @expected_release_date.setter
    def expected_release_date(self, expected_release_date):
        """Sets the expected_release_date of this PaymentHold.

        The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field will be returned if known by eBay. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>

        :param expected_release_date: The expected_release_date of this PaymentHold.
        :type expected_release_date: str
        """

        self._expected_release_date = expected_release_date

    @property
    def hold_amount(self):
        """Gets the hold_amount of this PaymentHold.


        :return: The hold_amount of this PaymentHold.
        :rtype: Amount
        """
        return self._hold_amount

    @hold_amount.setter
    def hold_amount(self, hold_amount):
        """Sets the hold_amount of this PaymentHold.


        :param hold_amount: The hold_amount of this PaymentHold.
        :type hold_amount: Amount
        """

        self._hold_amount = hold_amount

    @property
    def hold_reason(self):
        """Gets the hold_reason of this PaymentHold.

        The reason that the payment is being held. A seller's payment may be held for a number of reasons, including when the seller is new, the seller's level is below standard, or if a return case or 'Significantly not as described' case is pending against the seller. This field is always returned with the <strong>paymentHolds</strong> array.

        :return: The hold_reason of this PaymentHold.
        :rtype: str
        """
        return self._hold_reason

    @hold_reason.setter
    def hold_reason(self, hold_reason):
        """Sets the hold_reason of this PaymentHold.

        The reason that the payment is being held. A seller's payment may be held for a number of reasons, including when the seller is new, the seller's level is below standard, or if a return case or 'Significantly not as described' case is pending against the seller. This field is always returned with the <strong>paymentHolds</strong> array.

        :param hold_reason: The hold_reason of this PaymentHold.
        :type hold_reason: str
        """

        self._hold_reason = hold_reason

    @property
    def hold_state(self):
        """Gets the hold_state of this PaymentHold.

        The current stage or condition of the hold. This field is always returned with the <strong>paymentHolds</strong> array.<br><br><b>Applicable values:</b><ul><li><code>HELD</code></li><li><code>HELD_PENDING</code></li><li><code>NOT_HELD</code></li><li><code>RELEASE_CONFIRMED</code></li><li><code>RELEASE_FAILED</code></li><li><code>RELEASE_PENDING</code></li><li><code>RELEASED</code></li></ul>

        :return: The hold_state of this PaymentHold.
        :rtype: str
        """
        return self._hold_state

    @hold_state.setter
    def hold_state(self, hold_state):
        """Sets the hold_state of this PaymentHold.

        The current stage or condition of the hold. This field is always returned with the <strong>paymentHolds</strong> array.<br><br><b>Applicable values:</b><ul><li><code>HELD</code></li><li><code>HELD_PENDING</code></li><li><code>NOT_HELD</code></li><li><code>RELEASE_CONFIRMED</code></li><li><code>RELEASE_FAILED</code></li><li><code>RELEASE_PENDING</code></li><li><code>RELEASED</code></li></ul>

        :param hold_state: The hold_state of this PaymentHold.
        :type hold_state: str
        """

        self._hold_state = hold_state

    @property
    def release_date(self):
        """Gets the release_date of this PaymentHold.

        The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the seller's payment is actually released into the seller's account.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>

        :return: The release_date of this PaymentHold.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this PaymentHold.

        The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the seller's payment is actually released into the seller's account.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>

        :param release_date: The release_date of this PaymentHold.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def seller_actions_to_release(self):
        """Gets the seller_actions_to_release of this PaymentHold.

        A list of one or more possible actions that the seller can take to expedite the release of the payment hold.

        :return: The seller_actions_to_release of this PaymentHold.
        :rtype: List[SellerActionsToRelease]
        """
        return self._seller_actions_to_release

    @seller_actions_to_release.setter
    def seller_actions_to_release(self, seller_actions_to_release):
        """Sets the seller_actions_to_release of this PaymentHold.

        A list of one or more possible actions that the seller can take to expedite the release of the payment hold.

        :param seller_actions_to_release: The seller_actions_to_release of this PaymentHold.
        :type seller_actions_to_release: List[SellerActionsToRelease]
        """

        self._seller_actions_to_release = seller_actions_to_release
