# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_amount import SimpleAmount
from openapi_server import util


class PaymentDisputeSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: SimpleAmount=None, buyer_username: str=None, closed_date: str=None, open_date: str=None, order_id: str=None, payment_dispute_id: str=None, payment_dispute_status: str=None, reason: str=None, respond_by_date: str=None):
        """PaymentDisputeSummary - a model defined in OpenAPI

        :param amount: The amount of this PaymentDisputeSummary.
        :param buyer_username: The buyer_username of this PaymentDisputeSummary.
        :param closed_date: The closed_date of this PaymentDisputeSummary.
        :param open_date: The open_date of this PaymentDisputeSummary.
        :param order_id: The order_id of this PaymentDisputeSummary.
        :param payment_dispute_id: The payment_dispute_id of this PaymentDisputeSummary.
        :param payment_dispute_status: The payment_dispute_status of this PaymentDisputeSummary.
        :param reason: The reason of this PaymentDisputeSummary.
        :param respond_by_date: The respond_by_date of this PaymentDisputeSummary.
        """
        self.openapi_types = {
            'amount': SimpleAmount,
            'buyer_username': str,
            'closed_date': str,
            'open_date': str,
            'order_id': str,
            'payment_dispute_id': str,
            'payment_dispute_status': str,
            'reason': str,
            'respond_by_date': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'buyer_username': 'buyerUsername',
            'closed_date': 'closedDate',
            'open_date': 'openDate',
            'order_id': 'orderId',
            'payment_dispute_id': 'paymentDisputeId',
            'payment_dispute_status': 'paymentDisputeStatus',
            'reason': 'reason',
            'respond_by_date': 'respondByDate'
        }

        self._amount = amount
        self._buyer_username = buyer_username
        self._closed_date = closed_date
        self._open_date = open_date
        self._order_id = order_id
        self._payment_dispute_id = payment_dispute_id
        self._payment_dispute_status = payment_dispute_status
        self._reason = reason
        self._respond_by_date = respond_by_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDisputeSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDisputeSummary of this PaymentDisputeSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentDisputeSummary.


        :return: The amount of this PaymentDisputeSummary.
        :rtype: SimpleAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentDisputeSummary.


        :param amount: The amount of this PaymentDisputeSummary.
        :type amount: SimpleAmount
        """

        self._amount = amount

    @property
    def buyer_username(self):
        """Gets the buyer_username of this PaymentDisputeSummary.

        This is the buyer's eBay user ID. This field is returned for all payment disputes returned in the response.

        :return: The buyer_username of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._buyer_username

    @buyer_username.setter
    def buyer_username(self, buyer_username):
        """Sets the buyer_username of this PaymentDisputeSummary.

        This is the buyer's eBay user ID. This field is returned for all payment disputes returned in the response.

        :param buyer_username: The buyer_username of this PaymentDisputeSummary.
        :type buyer_username: str
        """

        self._buyer_username = buyer_username

    @property
    def closed_date(self):
        """Gets the closed_date of this PaymentDisputeSummary.

        The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The closed_date of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this PaymentDisputeSummary.

        The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param closed_date: The closed_date of this PaymentDisputeSummary.
        :type closed_date: str
        """

        self._closed_date = closed_date

    @property
    def open_date(self):
        """Gets the open_date of this PaymentDisputeSummary.

        The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The open_date of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this PaymentDisputeSummary.

        The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param open_date: The open_date of this PaymentDisputeSummary.
        :type open_date: str
        """

        self._open_date = open_date

    @property
    def order_id(self):
        """Gets the order_id of this PaymentDisputeSummary.

        This is the unique identifier of the order involved in the payment dispute.

        :return: The order_id of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentDisputeSummary.

        This is the unique identifier of the order involved in the payment dispute.

        :param order_id: The order_id of this PaymentDisputeSummary.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payment_dispute_id(self):
        """Gets the payment_dispute_id of this PaymentDisputeSummary.

        This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the <strong>getPaymentDispute</strong> call URI to retrieve a specific payment dispute. The <strong>getPaymentDispute</strong> method returns more details about a payment dispute than the <strong>getPaymentDisputeSummaries</strong> method.

        :return: The payment_dispute_id of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._payment_dispute_id

    @payment_dispute_id.setter
    def payment_dispute_id(self, payment_dispute_id):
        """Sets the payment_dispute_id of this PaymentDisputeSummary.

        This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the <strong>getPaymentDispute</strong> call URI to retrieve a specific payment dispute. The <strong>getPaymentDispute</strong> method returns more details about a payment dispute than the <strong>getPaymentDisputeSummaries</strong> method.

        :param payment_dispute_id: The payment_dispute_id of this PaymentDisputeSummary.
        :type payment_dispute_id: str
        """

        self._payment_dispute_id = payment_dispute_id

    @property
    def payment_dispute_status(self):
        """Gets the payment_dispute_status of this PaymentDisputeSummary.

        The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>

        :return: The payment_dispute_status of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._payment_dispute_status

    @payment_dispute_status.setter
    def payment_dispute_status(self, payment_dispute_status):
        """Sets the payment_dispute_status of this PaymentDisputeSummary.

        The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>

        :param payment_dispute_status: The payment_dispute_status of this PaymentDisputeSummary.
        :type payment_dispute_status: str
        """

        self._payment_dispute_status = payment_dispute_status

    @property
    def reason(self):
        """Gets the reason of this PaymentDisputeSummary.

        The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>

        :return: The reason of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PaymentDisputeSummary.

        The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>

        :param reason: The reason of this PaymentDisputeSummary.
        :type reason: str
        """

        self._reason = reason

    @property
    def respond_by_date(self):
        """Gets the respond_by_date of this PaymentDisputeSummary.

        The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that require action by the seller, that same seller must call <strong>getPaymentDispute</strong> to see the next action(s) that they can take against the payment dispute.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The respond_by_date of this PaymentDisputeSummary.
        :rtype: str
        """
        return self._respond_by_date

    @respond_by_date.setter
    def respond_by_date(self, respond_by_date):
        """Sets the respond_by_date of this PaymentDisputeSummary.

        The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that require action by the seller, that same seller must call <strong>getPaymentDispute</strong> to see the next action(s) that they can take against the payment dispute.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param respond_by_date: The respond_by_date of this PaymentDisputeSummary.
        :type respond_by_date: str
        """

        self._respond_by_date = respond_by_date
