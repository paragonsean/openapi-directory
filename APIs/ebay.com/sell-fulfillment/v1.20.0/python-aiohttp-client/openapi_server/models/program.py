# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ebay_fulfillment_program import EbayFulfillmentProgram
from openapi_server.models.ebay_international_shipping import EbayInternationalShipping
from openapi_server.models.ebay_shipping import EbayShipping
from openapi_server.models.ebay_vault_program import EbayVaultProgram
from openapi_server.models.post_sale_authentication_program import PostSaleAuthenticationProgram
from openapi_server import util


class Program(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticity_verification: PostSaleAuthenticationProgram=None, ebay_international_shipping: EbayInternationalShipping=None, ebay_shipping: EbayShipping=None, ebay_vault: EbayVaultProgram=None, fulfillment_program: EbayFulfillmentProgram=None):
        """Program - a model defined in OpenAPI

        :param authenticity_verification: The authenticity_verification of this Program.
        :param ebay_international_shipping: The ebay_international_shipping of this Program.
        :param ebay_shipping: The ebay_shipping of this Program.
        :param ebay_vault: The ebay_vault of this Program.
        :param fulfillment_program: The fulfillment_program of this Program.
        """
        self.openapi_types = {
            'authenticity_verification': PostSaleAuthenticationProgram,
            'ebay_international_shipping': EbayInternationalShipping,
            'ebay_shipping': EbayShipping,
            'ebay_vault': EbayVaultProgram,
            'fulfillment_program': EbayFulfillmentProgram
        }

        self.attribute_map = {
            'authenticity_verification': 'authenticityVerification',
            'ebay_international_shipping': 'ebayInternationalShipping',
            'ebay_shipping': 'ebayShipping',
            'ebay_vault': 'ebayVault',
            'fulfillment_program': 'fulfillmentProgram'
        }

        self._authenticity_verification = authenticity_verification
        self._ebay_international_shipping = ebay_international_shipping
        self._ebay_shipping = ebay_shipping
        self._ebay_vault = ebay_vault
        self._fulfillment_program = fulfillment_program

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Program':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Program of this Program.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticity_verification(self):
        """Gets the authenticity_verification of this Program.


        :return: The authenticity_verification of this Program.
        :rtype: PostSaleAuthenticationProgram
        """
        return self._authenticity_verification

    @authenticity_verification.setter
    def authenticity_verification(self, authenticity_verification):
        """Sets the authenticity_verification of this Program.


        :param authenticity_verification: The authenticity_verification of this Program.
        :type authenticity_verification: PostSaleAuthenticationProgram
        """

        self._authenticity_verification = authenticity_verification

    @property
    def ebay_international_shipping(self):
        """Gets the ebay_international_shipping of this Program.


        :return: The ebay_international_shipping of this Program.
        :rtype: EbayInternationalShipping
        """
        return self._ebay_international_shipping

    @ebay_international_shipping.setter
    def ebay_international_shipping(self, ebay_international_shipping):
        """Sets the ebay_international_shipping of this Program.


        :param ebay_international_shipping: The ebay_international_shipping of this Program.
        :type ebay_international_shipping: EbayInternationalShipping
        """

        self._ebay_international_shipping = ebay_international_shipping

    @property
    def ebay_shipping(self):
        """Gets the ebay_shipping of this Program.


        :return: The ebay_shipping of this Program.
        :rtype: EbayShipping
        """
        return self._ebay_shipping

    @ebay_shipping.setter
    def ebay_shipping(self, ebay_shipping):
        """Sets the ebay_shipping of this Program.


        :param ebay_shipping: The ebay_shipping of this Program.
        :type ebay_shipping: EbayShipping
        """

        self._ebay_shipping = ebay_shipping

    @property
    def ebay_vault(self):
        """Gets the ebay_vault of this Program.


        :return: The ebay_vault of this Program.
        :rtype: EbayVaultProgram
        """
        return self._ebay_vault

    @ebay_vault.setter
    def ebay_vault(self, ebay_vault):
        """Sets the ebay_vault of this Program.


        :param ebay_vault: The ebay_vault of this Program.
        :type ebay_vault: EbayVaultProgram
        """

        self._ebay_vault = ebay_vault

    @property
    def fulfillment_program(self):
        """Gets the fulfillment_program of this Program.


        :return: The fulfillment_program of this Program.
        :rtype: EbayFulfillmentProgram
        """
        return self._fulfillment_program

    @fulfillment_program.setter
    def fulfillment_program(self, fulfillment_program):
        """Sets the fulfillment_program of this Program.


        :param fulfillment_program: The fulfillment_program of this Program.
        :type fulfillment_program: EbayFulfillmentProgram
        """

        self._fulfillment_program = fulfillment_program
