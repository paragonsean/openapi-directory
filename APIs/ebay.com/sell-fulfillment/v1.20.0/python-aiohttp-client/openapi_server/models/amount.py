# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Amount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, converted_from_currency: str=None, converted_from_value: str=None, currency: str=None, value: str=None):
        """Amount - a model defined in OpenAPI

        :param converted_from_currency: The converted_from_currency of this Amount.
        :param converted_from_value: The converted_from_value of this Amount.
        :param currency: The currency of this Amount.
        :param value: The value of this Amount.
        """
        self.openapi_types = {
            'converted_from_currency': str,
            'converted_from_value': str,
            'currency': str,
            'value': str
        }

        self.attribute_map = {
            'converted_from_currency': 'convertedFromCurrency',
            'converted_from_value': 'convertedFromValue',
            'currency': 'currency',
            'value': 'value'
        }

        self._converted_from_currency = converted_from_currency
        self._converted_from_value = converted_from_value
        self._currency = currency
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Amount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Amount of this Amount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def converted_from_currency(self):
        """Gets the converted_from_currency of this Amount.

        A three-letter ISO 4217 code that indicates the currency of the amount in the <b>convertedFromValue</b> field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :return: The converted_from_currency of this Amount.
        :rtype: str
        """
        return self._converted_from_currency

    @converted_from_currency.setter
    def converted_from_currency(self, converted_from_currency):
        """Sets the converted_from_currency of this Amount.

        A three-letter ISO 4217 code that indicates the currency of the amount in the <b>convertedFromValue</b> field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :param converted_from_currency: The converted_from_currency of this Amount.
        :type converted_from_currency: str
        """

        self._converted_from_currency = converted_from_currency

    @property
    def converted_from_value(self):
        """Gets the converted_from_value of this Amount.

        The monetary amount before any conversion is performed, in the currency specified by the <b>convertedFromCurrency</b> field. This value is required or returned only if currency conversion/localization is required. The <b>value</b> field contains the converted amount of this value, in the currency specified by the <b>currency</b> field.

        :return: The converted_from_value of this Amount.
        :rtype: str
        """
        return self._converted_from_value

    @converted_from_value.setter
    def converted_from_value(self, converted_from_value):
        """Sets the converted_from_value of this Amount.

        The monetary amount before any conversion is performed, in the currency specified by the <b>convertedFromCurrency</b> field. This value is required or returned only if currency conversion/localization is required. The <b>value</b> field contains the converted amount of this value, in the currency specified by the <b>currency</b> field.

        :param converted_from_value: The converted_from_value of this Amount.
        :type converted_from_value: str
        """

        self._converted_from_value = converted_from_value

    @property
    def currency(self):
        """Gets the currency of this Amount.

        A three-letter ISO 4217 code that indicates the currency of the amount in the <b>value</b> field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the <b>value</b> field.<br><br><b>Default:</b> The default currency of the eBay marketplace that hosts the listing. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :return: The currency of this Amount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Amount.

        A three-letter ISO 4217 code that indicates the currency of the amount in the <b>value</b> field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the <b>value</b> field.<br><br><b>Default:</b> The default currency of the eBay marketplace that hosts the listing. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :param currency: The currency of this Amount.
        :type currency: str
        """

        self._currency = currency

    @property
    def value(self):
        """Gets the value of this Amount.

        The monetary amount, in the currency specified by the <b>currency</b> field. If currency conversion/localization is required, this value is the converted amount, and the <b>convertedFromValue</b> field contains the amount in the original currency.  <br><br><i>Required in</i> the <b>amount</b> type.

        :return: The value of this Amount.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Amount.

        The monetary amount, in the currency specified by the <b>currency</b> field. If currency conversion/localization is required, this value is the converted amount, and the <b>convertedFromValue</b> field contains the amount in the original currency.  <br><br><i>Required in</i> the <b>amount</b> type.

        :param value: The value of this Amount.
        :type value: str
        """

        self._value = value
