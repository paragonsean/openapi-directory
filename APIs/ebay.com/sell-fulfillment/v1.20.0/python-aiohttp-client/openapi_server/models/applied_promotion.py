# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class AppliedPromotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, discount_amount: Amount=None, promotion_id: str=None):
        """AppliedPromotion - a model defined in OpenAPI

        :param description: The description of this AppliedPromotion.
        :param discount_amount: The discount_amount of this AppliedPromotion.
        :param promotion_id: The promotion_id of this AppliedPromotion.
        """
        self.openapi_types = {
            'description': str,
            'discount_amount': Amount,
            'promotion_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'discount_amount': 'discountAmount',
            'promotion_id': 'promotionId'
        }

        self._description = description
        self._discount_amount = discount_amount
        self._promotion_id = promotion_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppliedPromotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppliedPromotion of this AppliedPromotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AppliedPromotion.

        A description of the applied sales promotion.

        :return: The description of this AppliedPromotion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppliedPromotion.

        A description of the applied sales promotion.

        :param description: The description of this AppliedPromotion.
        :type description: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this AppliedPromotion.


        :return: The discount_amount of this AppliedPromotion.
        :rtype: Amount
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this AppliedPromotion.


        :param discount_amount: The discount_amount of this AppliedPromotion.
        :type discount_amount: Amount
        """

        self._discount_amount = discount_amount

    @property
    def promotion_id(self):
        """Gets the promotion_id of this AppliedPromotion.

        An eBay-generated unique identifier of the sales promotion.<br><br> Multiple types of sales promotions are available to eBay Store owners, including order size/volume discounts, shipping discounts, special coupons, and price markdowns. Sales promotions can be managed through the Marketing tab of Seller Hub in My eBay, or by using the Trading API's <b>SetPromotionalSale</b> call or the Marketing API's <b>createItemPromotion</b> method.

        :return: The promotion_id of this AppliedPromotion.
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id):
        """Sets the promotion_id of this AppliedPromotion.

        An eBay-generated unique identifier of the sales promotion.<br><br> Multiple types of sales promotions are available to eBay Store owners, including order size/volume discounts, shipping discounts, special coupons, and price markdowns. Sales promotions can be managed through the Marketing tab of Seller Hub in My eBay, or by using the Trading API's <b>SetPromotionalSale</b> call or the Marketing API's <b>createItemPromotion</b> method.

        :param promotion_id: The promotion_id of this AppliedPromotion.
        :type promotion_id: str
        """

        self._promotion_id = promotion_id
