# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_info import FileInfo
from openapi_server.models.order_line_items import OrderLineItems
from openapi_server.models.tracking_info import TrackingInfo
from openapi_server import util


class DisputeEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_id: str=None, evidence_type: str=None, files: List[FileInfo]=None, line_items: List[OrderLineItems]=None, provided_date: str=None, request_date: str=None, respond_by_date: str=None, shipment_tracking: List[TrackingInfo]=None):
        """DisputeEvidence - a model defined in OpenAPI

        :param evidence_id: The evidence_id of this DisputeEvidence.
        :param evidence_type: The evidence_type of this DisputeEvidence.
        :param files: The files of this DisputeEvidence.
        :param line_items: The line_items of this DisputeEvidence.
        :param provided_date: The provided_date of this DisputeEvidence.
        :param request_date: The request_date of this DisputeEvidence.
        :param respond_by_date: The respond_by_date of this DisputeEvidence.
        :param shipment_tracking: The shipment_tracking of this DisputeEvidence.
        """
        self.openapi_types = {
            'evidence_id': str,
            'evidence_type': str,
            'files': List[FileInfo],
            'line_items': List[OrderLineItems],
            'provided_date': str,
            'request_date': str,
            'respond_by_date': str,
            'shipment_tracking': List[TrackingInfo]
        }

        self.attribute_map = {
            'evidence_id': 'evidenceId',
            'evidence_type': 'evidenceType',
            'files': 'files',
            'line_items': 'lineItems',
            'provided_date': 'providedDate',
            'request_date': 'requestDate',
            'respond_by_date': 'respondByDate',
            'shipment_tracking': 'shipmentTracking'
        }

        self._evidence_id = evidence_id
        self._evidence_type = evidence_type
        self._files = files
        self._line_items = line_items
        self._provided_date = provided_date
        self._request_date = request_date
        self._respond_by_date = respond_by_date
        self._shipment_tracking = shipment_tracking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputeEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisputeEvidence of this DisputeEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_id(self):
        """Gets the evidence_id of this DisputeEvidence.

        Unique identifier of the evidential file set. Potentially, each evidential file set can have more than one file, that is why there is this file set identifier, and then an identifier for each file within this file set.

        :return: The evidence_id of this DisputeEvidence.
        :rtype: str
        """
        return self._evidence_id

    @evidence_id.setter
    def evidence_id(self, evidence_id):
        """Sets the evidence_id of this DisputeEvidence.

        Unique identifier of the evidential file set. Potentially, each evidential file set can have more than one file, that is why there is this file set identifier, and then an identifier for each file within this file set.

        :param evidence_id: The evidence_id of this DisputeEvidence.
        :type evidence_id: str
        """

        self._evidence_id = evidence_id

    @property
    def evidence_type(self):
        """Gets the evidence_type of this DisputeEvidence.

        This enumeration value shows the type of evidential file provided. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum'>eBay API documentation</a>

        :return: The evidence_type of this DisputeEvidence.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this DisputeEvidence.

        This enumeration value shows the type of evidential file provided. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum'>eBay API documentation</a>

        :param evidence_type: The evidence_type of this DisputeEvidence.
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def files(self):
        """Gets the files of this DisputeEvidence.

        This array shows the name, ID, file type, and upload date for each provided file.

        :return: The files of this DisputeEvidence.
        :rtype: List[FileInfo]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this DisputeEvidence.

        This array shows the name, ID, file type, and upload date for each provided file.

        :param files: The files of this DisputeEvidence.
        :type files: List[FileInfo]
        """

        self._files = files

    @property
    def line_items(self):
        """Gets the line_items of this DisputeEvidence.

        This array shows one or more order line items associated with the evidential document that has been provided.

        :return: The line_items of this DisputeEvidence.
        :rtype: List[OrderLineItems]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this DisputeEvidence.

        This array shows one or more order line items associated with the evidential document that has been provided.

        :param line_items: The line_items of this DisputeEvidence.
        :type line_items: List[OrderLineItems]
        """

        self._line_items = line_items

    @property
    def provided_date(self):
        """Gets the provided_date of this DisputeEvidence.

        The timestamp in this field shows the date/time when the seller provided a requested evidential document to eBay. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The provided_date of this DisputeEvidence.
        :rtype: str
        """
        return self._provided_date

    @provided_date.setter
    def provided_date(self, provided_date):
        """Sets the provided_date of this DisputeEvidence.

        The timestamp in this field shows the date/time when the seller provided a requested evidential document to eBay. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param provided_date: The provided_date of this DisputeEvidence.
        :type provided_date: str
        """

        self._provided_date = provided_date

    @property
    def request_date(self):
        """Gets the request_date of this DisputeEvidence.

        The timestamp in this field shows the date/time when eBay requested the evidential document from the seller in response to a payment dispute. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The request_date of this DisputeEvidence.
        :rtype: str
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this DisputeEvidence.

        The timestamp in this field shows the date/time when eBay requested the evidential document from the seller in response to a payment dispute. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param request_date: The request_date of this DisputeEvidence.
        :type request_date: str
        """

        self._request_date = request_date

    @property
    def respond_by_date(self):
        """Gets the respond_by_date of this DisputeEvidence.

        The timestamp in this field shows the date/time when the seller was expected to provide a requested evidential document to eBay.  <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The respond_by_date of this DisputeEvidence.
        :rtype: str
        """
        return self._respond_by_date

    @respond_by_date.setter
    def respond_by_date(self, respond_by_date):
        """Sets the respond_by_date of this DisputeEvidence.

        The timestamp in this field shows the date/time when the seller was expected to provide a requested evidential document to eBay.  <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param respond_by_date: The respond_by_date of this DisputeEvidence.
        :type respond_by_date: str
        """

        self._respond_by_date = respond_by_date

    @property
    def shipment_tracking(self):
        """Gets the shipment_tracking of this DisputeEvidence.

        This array shows the shipping carrier and shipment tracking number associated with each shipment package of the order. This array is returned under the <strong>evidence</strong> container if the seller has provided shipment tracking information as evidence to support <code>PROOF_OF_DELIVERY</code> for an INR-related payment dispute.

        :return: The shipment_tracking of this DisputeEvidence.
        :rtype: List[TrackingInfo]
        """
        return self._shipment_tracking

    @shipment_tracking.setter
    def shipment_tracking(self, shipment_tracking):
        """Sets the shipment_tracking of this DisputeEvidence.

        This array shows the shipping carrier and shipment tracking number associated with each shipment package of the order. This array is returned under the <strong>evidence</strong> container if the seller has provided shipment tracking information as evidence to support <code>PROOF_OF_DELIVERY</code> for an INR-related payment dispute.

        :param shipment_tracking: The shipment_tracking of this DisputeEvidence.
        :type shipment_tracking: List[TrackingInfo]
        """

        self._shipment_tracking = shipment_tracking
