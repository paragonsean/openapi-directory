# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_contact import ExtendedContact
from openapi_server.models.tax_address import TaxAddress
from openapi_server.models.tax_identifier import TaxIdentifier
from openapi_server import util


class Buyer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buyer_registration_address: ExtendedContact=None, tax_address: TaxAddress=None, tax_identifier: TaxIdentifier=None, username: str=None):
        """Buyer - a model defined in OpenAPI

        :param buyer_registration_address: The buyer_registration_address of this Buyer.
        :param tax_address: The tax_address of this Buyer.
        :param tax_identifier: The tax_identifier of this Buyer.
        :param username: The username of this Buyer.
        """
        self.openapi_types = {
            'buyer_registration_address': ExtendedContact,
            'tax_address': TaxAddress,
            'tax_identifier': TaxIdentifier,
            'username': str
        }

        self.attribute_map = {
            'buyer_registration_address': 'buyerRegistrationAddress',
            'tax_address': 'taxAddress',
            'tax_identifier': 'taxIdentifier',
            'username': 'username'
        }

        self._buyer_registration_address = buyer_registration_address
        self._tax_address = tax_address
        self._tax_identifier = tax_identifier
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Buyer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Buyer of this Buyer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buyer_registration_address(self):
        """Gets the buyer_registration_address of this Buyer.


        :return: The buyer_registration_address of this Buyer.
        :rtype: ExtendedContact
        """
        return self._buyer_registration_address

    @buyer_registration_address.setter
    def buyer_registration_address(self, buyer_registration_address):
        """Sets the buyer_registration_address of this Buyer.


        :param buyer_registration_address: The buyer_registration_address of this Buyer.
        :type buyer_registration_address: ExtendedContact
        """

        self._buyer_registration_address = buyer_registration_address

    @property
    def tax_address(self):
        """Gets the tax_address of this Buyer.


        :return: The tax_address of this Buyer.
        :rtype: TaxAddress
        """
        return self._tax_address

    @tax_address.setter
    def tax_address(self, tax_address):
        """Sets the tax_address of this Buyer.


        :param tax_address: The tax_address of this Buyer.
        :type tax_address: TaxAddress
        """

        self._tax_address = tax_address

    @property
    def tax_identifier(self):
        """Gets the tax_identifier of this Buyer.


        :return: The tax_identifier of this Buyer.
        :rtype: TaxIdentifier
        """
        return self._tax_identifier

    @tax_identifier.setter
    def tax_identifier(self, tax_identifier):
        """Sets the tax_identifier of this Buyer.


        :param tax_identifier: The tax_identifier of this Buyer.
        :type tax_identifier: TaxIdentifier
        """

        self._tax_identifier = tax_identifier

    @property
    def username(self):
        """Gets the username of this Buyer.

        The buyer's eBay user ID.

        :return: The username of this Buyer.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Buyer.

        The buyer's eBay user ID.

        :param username: The username of this Buyer.
        :type username: str
        """

        self._username = username
