# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegacyReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legacy_item_id: str=None, legacy_transaction_id: str=None):
        """LegacyReference - a model defined in OpenAPI

        :param legacy_item_id: The legacy_item_id of this LegacyReference.
        :param legacy_transaction_id: The legacy_transaction_id of this LegacyReference.
        """
        self.openapi_types = {
            'legacy_item_id': str,
            'legacy_transaction_id': str
        }

        self.attribute_map = {
            'legacy_item_id': 'legacyItemId',
            'legacy_transaction_id': 'legacyTransactionId'
        }

        self._legacy_item_id = legacy_item_id
        self._legacy_transaction_id = legacy_transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegacyReference of this LegacyReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this LegacyReference.

        The unique identifier of a listing in legacy/Trading API format. <br><br><span class=\"tablenote\"><strong>Note:</strong> Both <b>legacyItemId</b> and <b>legacyTransactionId</b> are needed to identify an order line item. </span>

        :return: The legacy_item_id of this LegacyReference.
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this LegacyReference.

        The unique identifier of a listing in legacy/Trading API format. <br><br><span class=\"tablenote\"><strong>Note:</strong> Both <b>legacyItemId</b> and <b>legacyTransactionId</b> are needed to identify an order line item. </span>

        :param legacy_item_id: The legacy_item_id of this LegacyReference.
        :type legacy_item_id: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def legacy_transaction_id(self):
        """Gets the legacy_transaction_id of this LegacyReference.

        The unique identifier of a sale/transaction in legacy/Trading API format. A 'transaction ID' is created once a buyer purchases a 'Buy It Now' item or if an auction listing ends with a winning bidder. <br><br><span class=\"tablenote\"><strong>Note:</strong> Both <b>legacyItemId</b> and <b>legacyTransactionId</b> are needed to identify an order line item. </span>

        :return: The legacy_transaction_id of this LegacyReference.
        :rtype: str
        """
        return self._legacy_transaction_id

    @legacy_transaction_id.setter
    def legacy_transaction_id(self, legacy_transaction_id):
        """Sets the legacy_transaction_id of this LegacyReference.

        The unique identifier of a sale/transaction in legacy/Trading API format. A 'transaction ID' is created once a buyer purchases a 'Buy It Now' item or if an auction listing ends with a winning bidder. <br><br><span class=\"tablenote\"><strong>Note:</strong> Both <b>legacyItemId</b> and <b>legacyTransactionId</b> are needed to identify an order line item. </span>

        :param legacy_transaction_id: The legacy_transaction_id of this LegacyReference.
        :type legacy_transaction_id: str
        """

        self._legacy_transaction_id = legacy_transaction_id
