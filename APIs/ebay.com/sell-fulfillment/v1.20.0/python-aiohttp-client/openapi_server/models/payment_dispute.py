# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dispute_evidence import DisputeEvidence
from openapi_server.models.evidence_request import EvidenceRequest
from openapi_server.models.info_from_buyer import InfoFromBuyer
from openapi_server.models.monetary_transaction import MonetaryTransaction
from openapi_server.models.order_line_items import OrderLineItems
from openapi_server.models.payment_dispute_outcome_detail import PaymentDisputeOutcomeDetail
from openapi_server.models.return_address import ReturnAddress
from openapi_server.models.simple_amount import SimpleAmount
from openapi_server import util


class PaymentDispute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: SimpleAmount=None, available_choices: List[str]=None, buyer_provided: InfoFromBuyer=None, buyer_username: str=None, closed_date: str=None, evidence: List[DisputeEvidence]=None, evidence_requests: List[EvidenceRequest]=None, line_items: List[OrderLineItems]=None, monetary_transactions: List[MonetaryTransaction]=None, note: str=None, open_date: str=None, order_id: str=None, payment_dispute_id: str=None, payment_dispute_status: str=None, reason: str=None, resolution: PaymentDisputeOutcomeDetail=None, respond_by_date: str=None, return_address: ReturnAddress=None, revision: int=None, seller_response: str=None):
        """PaymentDispute - a model defined in OpenAPI

        :param amount: The amount of this PaymentDispute.
        :param available_choices: The available_choices of this PaymentDispute.
        :param buyer_provided: The buyer_provided of this PaymentDispute.
        :param buyer_username: The buyer_username of this PaymentDispute.
        :param closed_date: The closed_date of this PaymentDispute.
        :param evidence: The evidence of this PaymentDispute.
        :param evidence_requests: The evidence_requests of this PaymentDispute.
        :param line_items: The line_items of this PaymentDispute.
        :param monetary_transactions: The monetary_transactions of this PaymentDispute.
        :param note: The note of this PaymentDispute.
        :param open_date: The open_date of this PaymentDispute.
        :param order_id: The order_id of this PaymentDispute.
        :param payment_dispute_id: The payment_dispute_id of this PaymentDispute.
        :param payment_dispute_status: The payment_dispute_status of this PaymentDispute.
        :param reason: The reason of this PaymentDispute.
        :param resolution: The resolution of this PaymentDispute.
        :param respond_by_date: The respond_by_date of this PaymentDispute.
        :param return_address: The return_address of this PaymentDispute.
        :param revision: The revision of this PaymentDispute.
        :param seller_response: The seller_response of this PaymentDispute.
        """
        self.openapi_types = {
            'amount': SimpleAmount,
            'available_choices': List[str],
            'buyer_provided': InfoFromBuyer,
            'buyer_username': str,
            'closed_date': str,
            'evidence': List[DisputeEvidence],
            'evidence_requests': List[EvidenceRequest],
            'line_items': List[OrderLineItems],
            'monetary_transactions': List[MonetaryTransaction],
            'note': str,
            'open_date': str,
            'order_id': str,
            'payment_dispute_id': str,
            'payment_dispute_status': str,
            'reason': str,
            'resolution': PaymentDisputeOutcomeDetail,
            'respond_by_date': str,
            'return_address': ReturnAddress,
            'revision': int,
            'seller_response': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'available_choices': 'availableChoices',
            'buyer_provided': 'buyerProvided',
            'buyer_username': 'buyerUsername',
            'closed_date': 'closedDate',
            'evidence': 'evidence',
            'evidence_requests': 'evidenceRequests',
            'line_items': 'lineItems',
            'monetary_transactions': 'monetaryTransactions',
            'note': 'note',
            'open_date': 'openDate',
            'order_id': 'orderId',
            'payment_dispute_id': 'paymentDisputeId',
            'payment_dispute_status': 'paymentDisputeStatus',
            'reason': 'reason',
            'resolution': 'resolution',
            'respond_by_date': 'respondByDate',
            'return_address': 'returnAddress',
            'revision': 'revision',
            'seller_response': 'sellerResponse'
        }

        self._amount = amount
        self._available_choices = available_choices
        self._buyer_provided = buyer_provided
        self._buyer_username = buyer_username
        self._closed_date = closed_date
        self._evidence = evidence
        self._evidence_requests = evidence_requests
        self._line_items = line_items
        self._monetary_transactions = monetary_transactions
        self._note = note
        self._open_date = open_date
        self._order_id = order_id
        self._payment_dispute_id = payment_dispute_id
        self._payment_dispute_status = payment_dispute_status
        self._reason = reason
        self._resolution = resolution
        self._respond_by_date = respond_by_date
        self._return_address = return_address
        self._revision = revision
        self._seller_response = seller_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDispute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDispute of this PaymentDispute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentDispute.


        :return: The amount of this PaymentDispute.
        :rtype: SimpleAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentDispute.


        :param amount: The amount of this PaymentDispute.
        :type amount: SimpleAmount
        """

        self._amount = amount

    @property
    def available_choices(self):
        """Gets the available_choices of this PaymentDispute.

        The value(s) returned in this array indicate the choices that the seller has when responding to the payment dispute. Once the seller has responded to the payment dispute, this field will no longer be shown, and instead, the <strong>sellerResponse</strong> field will show the decision that the seller made.

        :return: The available_choices of this PaymentDispute.
        :rtype: List[str]
        """
        return self._available_choices

    @available_choices.setter
    def available_choices(self, available_choices):
        """Sets the available_choices of this PaymentDispute.

        The value(s) returned in this array indicate the choices that the seller has when responding to the payment dispute. Once the seller has responded to the payment dispute, this field will no longer be shown, and instead, the <strong>sellerResponse</strong> field will show the decision that the seller made.

        :param available_choices: The available_choices of this PaymentDispute.
        :type available_choices: List[str]
        """

        self._available_choices = available_choices

    @property
    def buyer_provided(self):
        """Gets the buyer_provided of this PaymentDispute.


        :return: The buyer_provided of this PaymentDispute.
        :rtype: InfoFromBuyer
        """
        return self._buyer_provided

    @buyer_provided.setter
    def buyer_provided(self, buyer_provided):
        """Sets the buyer_provided of this PaymentDispute.


        :param buyer_provided: The buyer_provided of this PaymentDispute.
        :type buyer_provided: InfoFromBuyer
        """

        self._buyer_provided = buyer_provided

    @property
    def buyer_username(self):
        """Gets the buyer_username of this PaymentDispute.

        This is the eBay user ID of the buyer that initiated the payment dispute.

        :return: The buyer_username of this PaymentDispute.
        :rtype: str
        """
        return self._buyer_username

    @buyer_username.setter
    def buyer_username(self, buyer_username):
        """Sets the buyer_username of this PaymentDispute.

        This is the eBay user ID of the buyer that initiated the payment dispute.

        :param buyer_username: The buyer_username of this PaymentDispute.
        :type buyer_username: str
        """

        self._buyer_username = buyer_username

    @property
    def closed_date(self):
        """Gets the closed_date of this PaymentDispute.

        The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The closed_date of this PaymentDispute.
        :rtype: str
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this PaymentDispute.

        The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param closed_date: The closed_date of this PaymentDispute.
        :type closed_date: str
        """

        self._closed_date = closed_date

    @property
    def evidence(self):
        """Gets the evidence of this PaymentDispute.

        This container shows any evidence that has been provided by the seller to contest the payment dispute. Evidence may include shipment tracking information, proof of authentication documentation, image(s) to proof that an item is as described, or financial documentation/invoice.<br><br>This container is only returned if the seller has provided at least one document used as evidence against the payment dispute.

        :return: The evidence of this PaymentDispute.
        :rtype: List[DisputeEvidence]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this PaymentDispute.

        This container shows any evidence that has been provided by the seller to contest the payment dispute. Evidence may include shipment tracking information, proof of authentication documentation, image(s) to proof that an item is as described, or financial documentation/invoice.<br><br>This container is only returned if the seller has provided at least one document used as evidence against the payment dispute.

        :param evidence: The evidence of this PaymentDispute.
        :type evidence: List[DisputeEvidence]
        """

        self._evidence = evidence

    @property
    def evidence_requests(self):
        """Gets the evidence_requests of this PaymentDispute.

        This container is returned if one or more evidence documents are being requested from the seller.

        :return: The evidence_requests of this PaymentDispute.
        :rtype: List[EvidenceRequest]
        """
        return self._evidence_requests

    @evidence_requests.setter
    def evidence_requests(self, evidence_requests):
        """Sets the evidence_requests of this PaymentDispute.

        This container is returned if one or more evidence documents are being requested from the seller.

        :param evidence_requests: The evidence_requests of this PaymentDispute.
        :type evidence_requests: List[EvidenceRequest]
        """

        self._evidence_requests = evidence_requests

    @property
    def line_items(self):
        """Gets the line_items of this PaymentDispute.

        This array is used to identify one or more order line items associated with the payment dispute. There will always be at least one <b>itemId</b>/<b>lineItemId</b> pair returned in this array.

        :return: The line_items of this PaymentDispute.
        :rtype: List[OrderLineItems]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this PaymentDispute.

        This array is used to identify one or more order line items associated with the payment dispute. There will always be at least one <b>itemId</b>/<b>lineItemId</b> pair returned in this array.

        :param line_items: The line_items of this PaymentDispute.
        :type line_items: List[OrderLineItems]
        """

        self._line_items = line_items

    @property
    def monetary_transactions(self):
        """Gets the monetary_transactions of this PaymentDispute.

        This array provide details about one or more monetary transactions that occur as part of a payment dispute. This array is only returned once one or more monetary transacations occur with a payment dispute.

        :return: The monetary_transactions of this PaymentDispute.
        :rtype: List[MonetaryTransaction]
        """
        return self._monetary_transactions

    @monetary_transactions.setter
    def monetary_transactions(self, monetary_transactions):
        """Sets the monetary_transactions of this PaymentDispute.

        This array provide details about one or more monetary transactions that occur as part of a payment dispute. This array is only returned once one or more monetary transacations occur with a payment dispute.

        :param monetary_transactions: The monetary_transactions of this PaymentDispute.
        :type monetary_transactions: List[MonetaryTransaction]
        """

        self._monetary_transactions = monetary_transactions

    @property
    def note(self):
        """Gets the note of this PaymentDispute.

        This field shows information that the seller provides about the dispute, such as the basis for the dispute, any relevant evidence, tracking numbers, and so forth.<br><br>This field is limited to 1000 characters.

        :return: The note of this PaymentDispute.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PaymentDispute.

        This field shows information that the seller provides about the dispute, such as the basis for the dispute, any relevant evidence, tracking numbers, and so forth.<br><br>This field is limited to 1000 characters.

        :param note: The note of this PaymentDispute.
        :type note: str
        """

        self._note = note

    @property
    def open_date(self):
        """Gets the open_date of this PaymentDispute.

        The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The open_date of this PaymentDispute.
        :rtype: str
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this PaymentDispute.

        The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param open_date: The open_date of this PaymentDispute.
        :type open_date: str
        """

        self._open_date = open_date

    @property
    def order_id(self):
        """Gets the order_id of this PaymentDispute.

        This is the unique identifier of the order involved in the payment dispute.

        :return: The order_id of this PaymentDispute.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentDispute.

        This is the unique identifier of the order involved in the payment dispute.

        :param order_id: The order_id of this PaymentDispute.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payment_dispute_id(self):
        """Gets the payment_dispute_id of this PaymentDispute.

        This is the unique identifier of the payment dispute. This is the same identifier that is passed in to the call URI. This identifier is automatically created by eBay once the payment dispute comes into the eBay system.

        :return: The payment_dispute_id of this PaymentDispute.
        :rtype: str
        """
        return self._payment_dispute_id

    @payment_dispute_id.setter
    def payment_dispute_id(self, payment_dispute_id):
        """Sets the payment_dispute_id of this PaymentDispute.

        This is the unique identifier of the payment dispute. This is the same identifier that is passed in to the call URI. This identifier is automatically created by eBay once the payment dispute comes into the eBay system.

        :param payment_dispute_id: The payment_dispute_id of this PaymentDispute.
        :type payment_dispute_id: str
        """

        self._payment_dispute_id = payment_dispute_id

    @property
    def payment_dispute_status(self):
        """Gets the payment_dispute_status of this PaymentDispute.

        The enumeration value in this field gives the current status of the payment dispute. The status of a payment dispute partially determines other fields that are returned in the response. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>

        :return: The payment_dispute_status of this PaymentDispute.
        :rtype: str
        """
        return self._payment_dispute_status

    @payment_dispute_status.setter
    def payment_dispute_status(self, payment_dispute_status):
        """Sets the payment_dispute_status of this PaymentDispute.

        The enumeration value in this field gives the current status of the payment dispute. The status of a payment dispute partially determines other fields that are returned in the response. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>

        :param payment_dispute_status: The payment_dispute_status of this PaymentDispute.
        :type payment_dispute_status: str
        """

        self._payment_dispute_status = payment_dispute_status

    @property
    def reason(self):
        """Gets the reason of this PaymentDispute.

        The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>

        :return: The reason of this PaymentDispute.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PaymentDispute.

        The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>

        :param reason: The reason of this PaymentDispute.
        :type reason: str
        """

        self._reason = reason

    @property
    def resolution(self):
        """Gets the resolution of this PaymentDispute.


        :return: The resolution of this PaymentDispute.
        :rtype: PaymentDisputeOutcomeDetail
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this PaymentDispute.


        :param resolution: The resolution of this PaymentDispute.
        :type resolution: PaymentDisputeOutcomeDetail
        """

        self._resolution = resolution

    @property
    def respond_by_date(self):
        """Gets the respond_by_date of this PaymentDispute.

        The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that currently require action by the seller, that same seller should look at the <strong>availableChoices</strong> array to see the available actions.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :return: The respond_by_date of this PaymentDispute.
        :rtype: str
        """
        return self._respond_by_date

    @respond_by_date.setter
    def respond_by_date(self, respond_by_date):
        """Sets the respond_by_date of this PaymentDispute.

        The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that currently require action by the seller, that same seller should look at the <strong>availableChoices</strong> array to see the available actions.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.

        :param respond_by_date: The respond_by_date of this PaymentDispute.
        :type respond_by_date: str
        """

        self._respond_by_date = respond_by_date

    @property
    def return_address(self):
        """Gets the return_address of this PaymentDispute.


        :return: The return_address of this PaymentDispute.
        :rtype: ReturnAddress
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this PaymentDispute.


        :param return_address: The return_address of this PaymentDispute.
        :type return_address: ReturnAddress
        """

        self._return_address = return_address

    @property
    def revision(self):
        """Gets the revision of this PaymentDispute.

        This integer value indicates the revision number of the payment dispute. Each time an action is taken against a payment dispute, this integer value increases by 1.

        :return: The revision of this PaymentDispute.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this PaymentDispute.

        This integer value indicates the revision number of the payment dispute. Each time an action is taken against a payment dispute, this integer value increases by 1.

        :param revision: The revision of this PaymentDispute.
        :type revision: int
        """

        self._revision = revision

    @property
    def seller_response(self):
        """Gets the seller_response of this PaymentDispute.

        The enumeration value returned in this field indicates how the seller has responded to the payment dispute. The seller has the option of accepting the payment dispute and agreeing to issue a refund, accepting the payment dispute and agreeing to issue a refund as long as the buyer returns the item, or contesting the payment dispute. This field is returned as soon as the seller makes an initial decision on the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:SellerResponseEnum'>eBay API documentation</a>

        :return: The seller_response of this PaymentDispute.
        :rtype: str
        """
        return self._seller_response

    @seller_response.setter
    def seller_response(self, seller_response):
        """Sets the seller_response of this PaymentDispute.

        The enumeration value returned in this field indicates how the seller has responded to the payment dispute. The seller has the option of accepting the payment dispute and agreeing to issue a refund, accepting the payment dispute and agreeing to issue a refund as long as the buyer returns the item, or contesting the payment dispute. This field is returned as soon as the seller makes an initial decision on the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:SellerResponseEnum'>eBay API documentation</a>

        :param seller_response: The seller_response of this PaymentDispute.
        :type seller_response: str
        """

        self._seller_response = seller_response
