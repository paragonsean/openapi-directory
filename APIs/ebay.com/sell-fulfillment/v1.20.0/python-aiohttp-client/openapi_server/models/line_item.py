# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.applied_promotion import AppliedPromotion
from openapi_server.models.delivery_cost import DeliveryCost
from openapi_server.models.ebay_collect_and_remit_tax import EbayCollectAndRemitTax
from openapi_server.models.ebay_collected_charges import EbayCollectedCharges
from openapi_server.models.gift_details import GiftDetails
from openapi_server.models.item_location import ItemLocation
from openapi_server.models.line_item_fulfillment_instructions import LineItemFulfillmentInstructions
from openapi_server.models.line_item_properties import LineItemProperties
from openapi_server.models.line_item_refund import LineItemRefund
from openapi_server.models.linked_order_line_item import LinkedOrderLineItem
from openapi_server.models.name_value_pair import NameValuePair
from openapi_server.models.tax import Tax
from openapi_server import util


class LineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_promotions: List[AppliedPromotion]=None, delivery_cost: DeliveryCost=None, discounted_line_item_cost: Amount=None, ebay_collect_and_remit_taxes: List[EbayCollectAndRemitTax]=None, ebay_collected_charges: EbayCollectedCharges=None, gift_details: GiftDetails=None, item_location: ItemLocation=None, legacy_item_id: str=None, legacy_variation_id: str=None, line_item_cost: Amount=None, line_item_fulfillment_instructions: LineItemFulfillmentInstructions=None, line_item_fulfillment_status: str=None, line_item_id: str=None, linked_order_line_items: List[LinkedOrderLineItem]=None, listing_marketplace_id: str=None, properties: LineItemProperties=None, purchase_marketplace_id: str=None, quantity: int=None, refunds: List[LineItemRefund]=None, sku: str=None, sold_format: str=None, taxes: List[Tax]=None, title: str=None, total: Amount=None, variation_aspects: List[NameValuePair]=None):
        """LineItem - a model defined in OpenAPI

        :param applied_promotions: The applied_promotions of this LineItem.
        :param delivery_cost: The delivery_cost of this LineItem.
        :param discounted_line_item_cost: The discounted_line_item_cost of this LineItem.
        :param ebay_collect_and_remit_taxes: The ebay_collect_and_remit_taxes of this LineItem.
        :param ebay_collected_charges: The ebay_collected_charges of this LineItem.
        :param gift_details: The gift_details of this LineItem.
        :param item_location: The item_location of this LineItem.
        :param legacy_item_id: The legacy_item_id of this LineItem.
        :param legacy_variation_id: The legacy_variation_id of this LineItem.
        :param line_item_cost: The line_item_cost of this LineItem.
        :param line_item_fulfillment_instructions: The line_item_fulfillment_instructions of this LineItem.
        :param line_item_fulfillment_status: The line_item_fulfillment_status of this LineItem.
        :param line_item_id: The line_item_id of this LineItem.
        :param linked_order_line_items: The linked_order_line_items of this LineItem.
        :param listing_marketplace_id: The listing_marketplace_id of this LineItem.
        :param properties: The properties of this LineItem.
        :param purchase_marketplace_id: The purchase_marketplace_id of this LineItem.
        :param quantity: The quantity of this LineItem.
        :param refunds: The refunds of this LineItem.
        :param sku: The sku of this LineItem.
        :param sold_format: The sold_format of this LineItem.
        :param taxes: The taxes of this LineItem.
        :param title: The title of this LineItem.
        :param total: The total of this LineItem.
        :param variation_aspects: The variation_aspects of this LineItem.
        """
        self.openapi_types = {
            'applied_promotions': List[AppliedPromotion],
            'delivery_cost': DeliveryCost,
            'discounted_line_item_cost': Amount,
            'ebay_collect_and_remit_taxes': List[EbayCollectAndRemitTax],
            'ebay_collected_charges': EbayCollectedCharges,
            'gift_details': GiftDetails,
            'item_location': ItemLocation,
            'legacy_item_id': str,
            'legacy_variation_id': str,
            'line_item_cost': Amount,
            'line_item_fulfillment_instructions': LineItemFulfillmentInstructions,
            'line_item_fulfillment_status': str,
            'line_item_id': str,
            'linked_order_line_items': List[LinkedOrderLineItem],
            'listing_marketplace_id': str,
            'properties': LineItemProperties,
            'purchase_marketplace_id': str,
            'quantity': int,
            'refunds': List[LineItemRefund],
            'sku': str,
            'sold_format': str,
            'taxes': List[Tax],
            'title': str,
            'total': Amount,
            'variation_aspects': List[NameValuePair]
        }

        self.attribute_map = {
            'applied_promotions': 'appliedPromotions',
            'delivery_cost': 'deliveryCost',
            'discounted_line_item_cost': 'discountedLineItemCost',
            'ebay_collect_and_remit_taxes': 'ebayCollectAndRemitTaxes',
            'ebay_collected_charges': 'ebayCollectedCharges',
            'gift_details': 'giftDetails',
            'item_location': 'itemLocation',
            'legacy_item_id': 'legacyItemId',
            'legacy_variation_id': 'legacyVariationId',
            'line_item_cost': 'lineItemCost',
            'line_item_fulfillment_instructions': 'lineItemFulfillmentInstructions',
            'line_item_fulfillment_status': 'lineItemFulfillmentStatus',
            'line_item_id': 'lineItemId',
            'linked_order_line_items': 'linkedOrderLineItems',
            'listing_marketplace_id': 'listingMarketplaceId',
            'properties': 'properties',
            'purchase_marketplace_id': 'purchaseMarketplaceId',
            'quantity': 'quantity',
            'refunds': 'refunds',
            'sku': 'sku',
            'sold_format': 'soldFormat',
            'taxes': 'taxes',
            'title': 'title',
            'total': 'total',
            'variation_aspects': 'variationAspects'
        }

        self._applied_promotions = applied_promotions
        self._delivery_cost = delivery_cost
        self._discounted_line_item_cost = discounted_line_item_cost
        self._ebay_collect_and_remit_taxes = ebay_collect_and_remit_taxes
        self._ebay_collected_charges = ebay_collected_charges
        self._gift_details = gift_details
        self._item_location = item_location
        self._legacy_item_id = legacy_item_id
        self._legacy_variation_id = legacy_variation_id
        self._line_item_cost = line_item_cost
        self._line_item_fulfillment_instructions = line_item_fulfillment_instructions
        self._line_item_fulfillment_status = line_item_fulfillment_status
        self._line_item_id = line_item_id
        self._linked_order_line_items = linked_order_line_items
        self._listing_marketplace_id = listing_marketplace_id
        self._properties = properties
        self._purchase_marketplace_id = purchase_marketplace_id
        self._quantity = quantity
        self._refunds = refunds
        self._sku = sku
        self._sold_format = sold_format
        self._taxes = taxes
        self._title = title
        self._total = total
        self._variation_aspects = variation_aspects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem of this LineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_promotions(self):
        """Gets the applied_promotions of this LineItem.

        This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item.

        :return: The applied_promotions of this LineItem.
        :rtype: List[AppliedPromotion]
        """
        return self._applied_promotions

    @applied_promotions.setter
    def applied_promotions(self, applied_promotions):
        """Sets the applied_promotions of this LineItem.

        This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item.

        :param applied_promotions: The applied_promotions of this LineItem.
        :type applied_promotions: List[AppliedPromotion]
        """

        self._applied_promotions = applied_promotions

    @property
    def delivery_cost(self):
        """Gets the delivery_cost of this LineItem.


        :return: The delivery_cost of this LineItem.
        :rtype: DeliveryCost
        """
        return self._delivery_cost

    @delivery_cost.setter
    def delivery_cost(self, delivery_cost):
        """Sets the delivery_cost of this LineItem.


        :param delivery_cost: The delivery_cost of this LineItem.
        :type delivery_cost: DeliveryCost
        """

        self._delivery_cost = delivery_cost

    @property
    def discounted_line_item_cost(self):
        """Gets the discounted_line_item_cost of this LineItem.


        :return: The discounted_line_item_cost of this LineItem.
        :rtype: Amount
        """
        return self._discounted_line_item_cost

    @discounted_line_item_cost.setter
    def discounted_line_item_cost(self, discounted_line_item_cost):
        """Sets the discounted_line_item_cost of this LineItem.


        :param discounted_line_item_cost: The discounted_line_item_cost of this LineItem.
        :type discounted_line_item_cost: Amount
        """

        self._discounted_line_item_cost = discounted_line_item_cost

    @property
    def ebay_collect_and_remit_taxes(self):
        """Gets the ebay_collect_and_remit_taxes of this LineItem.

        This container will be returned if the order line item is subject to a 'Collect and Remit' tax that eBay will collect and remit to the proper taxing authority on the buyer's behalf.<br><br>'Collect and Remit' tax includes:<ul><li>US state-mandated sales tax</li><li>Federal and Provincial Sales Tax in Canada</li><li>'Goods and Services' tax in Canada, Australia, and New Zealand</li><li>VAT collected for the UK and EU countries</li></ul>The amount of this tax is shown in the <strong>amount</strong> field, and the type of tax is shown in the <strong>taxType</strong> field.<br><br>eBay will display the tax type and amount during checkout in accordance with the buyer's address, and handle collection and remittance of the tax without requiring the seller to take any action.

        :return: The ebay_collect_and_remit_taxes of this LineItem.
        :rtype: List[EbayCollectAndRemitTax]
        """
        return self._ebay_collect_and_remit_taxes

    @ebay_collect_and_remit_taxes.setter
    def ebay_collect_and_remit_taxes(self, ebay_collect_and_remit_taxes):
        """Sets the ebay_collect_and_remit_taxes of this LineItem.

        This container will be returned if the order line item is subject to a 'Collect and Remit' tax that eBay will collect and remit to the proper taxing authority on the buyer's behalf.<br><br>'Collect and Remit' tax includes:<ul><li>US state-mandated sales tax</li><li>Federal and Provincial Sales Tax in Canada</li><li>'Goods and Services' tax in Canada, Australia, and New Zealand</li><li>VAT collected for the UK and EU countries</li></ul>The amount of this tax is shown in the <strong>amount</strong> field, and the type of tax is shown in the <strong>taxType</strong> field.<br><br>eBay will display the tax type and amount during checkout in accordance with the buyer's address, and handle collection and remittance of the tax without requiring the seller to take any action.

        :param ebay_collect_and_remit_taxes: The ebay_collect_and_remit_taxes of this LineItem.
        :type ebay_collect_and_remit_taxes: List[EbayCollectAndRemitTax]
        """

        self._ebay_collect_and_remit_taxes = ebay_collect_and_remit_taxes

    @property
    def ebay_collected_charges(self):
        """Gets the ebay_collected_charges of this LineItem.


        :return: The ebay_collected_charges of this LineItem.
        :rtype: EbayCollectedCharges
        """
        return self._ebay_collected_charges

    @ebay_collected_charges.setter
    def ebay_collected_charges(self, ebay_collected_charges):
        """Sets the ebay_collected_charges of this LineItem.


        :param ebay_collected_charges: The ebay_collected_charges of this LineItem.
        :type ebay_collected_charges: EbayCollectedCharges
        """

        self._ebay_collected_charges = ebay_collected_charges

    @property
    def gift_details(self):
        """Gets the gift_details of this LineItem.


        :return: The gift_details of this LineItem.
        :rtype: GiftDetails
        """
        return self._gift_details

    @gift_details.setter
    def gift_details(self, gift_details):
        """Sets the gift_details of this LineItem.


        :param gift_details: The gift_details of this LineItem.
        :type gift_details: GiftDetails
        """

        self._gift_details = gift_details

    @property
    def item_location(self):
        """Gets the item_location of this LineItem.


        :return: The item_location of this LineItem.
        :rtype: ItemLocation
        """
        return self._item_location

    @item_location.setter
    def item_location(self, item_location):
        """Sets the item_location of this LineItem.


        :param item_location: The item_location of this LineItem.
        :type item_location: ItemLocation
        """

        self._item_location = item_location

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this LineItem.

        The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the <strong>listingId</strong> instead.

        :return: The legacy_item_id of this LineItem.
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this LineItem.

        The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the <strong>listingId</strong> instead.

        :param legacy_item_id: The legacy_item_id of this LineItem.
        :type legacy_item_id: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def legacy_variation_id(self):
        """Gets the legacy_variation_id of this LineItem.

        The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing.

        :return: The legacy_variation_id of this LineItem.
        :rtype: str
        """
        return self._legacy_variation_id

    @legacy_variation_id.setter
    def legacy_variation_id(self, legacy_variation_id):
        """Sets the legacy_variation_id of this LineItem.

        The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing.

        :param legacy_variation_id: The legacy_variation_id of this LineItem.
        :type legacy_variation_id: str
        """

        self._legacy_variation_id = legacy_variation_id

    @property
    def line_item_cost(self):
        """Gets the line_item_cost of this LineItem.


        :return: The line_item_cost of this LineItem.
        :rtype: Amount
        """
        return self._line_item_cost

    @line_item_cost.setter
    def line_item_cost(self, line_item_cost):
        """Sets the line_item_cost of this LineItem.


        :param line_item_cost: The line_item_cost of this LineItem.
        :type line_item_cost: Amount
        """

        self._line_item_cost = line_item_cost

    @property
    def line_item_fulfillment_instructions(self):
        """Gets the line_item_fulfillment_instructions of this LineItem.


        :return: The line_item_fulfillment_instructions of this LineItem.
        :rtype: LineItemFulfillmentInstructions
        """
        return self._line_item_fulfillment_instructions

    @line_item_fulfillment_instructions.setter
    def line_item_fulfillment_instructions(self, line_item_fulfillment_instructions):
        """Sets the line_item_fulfillment_instructions of this LineItem.


        :param line_item_fulfillment_instructions: The line_item_fulfillment_instructions of this LineItem.
        :type line_item_fulfillment_instructions: LineItemFulfillmentInstructions
        """

        self._line_item_fulfillment_instructions = line_item_fulfillment_instructions

    @property
    def line_item_fulfillment_status(self):
        """Gets the line_item_fulfillment_status of this LineItem.

        This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:LineItemFulfillmentStatusEnum'>eBay API documentation</a>

        :return: The line_item_fulfillment_status of this LineItem.
        :rtype: str
        """
        return self._line_item_fulfillment_status

    @line_item_fulfillment_status.setter
    def line_item_fulfillment_status(self, line_item_fulfillment_status):
        """Sets the line_item_fulfillment_status of this LineItem.

        This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:LineItemFulfillmentStatusEnum'>eBay API documentation</a>

        :param line_item_fulfillment_status: The line_item_fulfillment_status of this LineItem.
        :type line_item_fulfillment_status: str
        """

        self._line_item_fulfillment_status = line_item_fulfillment_status

    @property
    def line_item_id(self):
        """Gets the line_item_id of this LineItem.

        This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller.

        :return: The line_item_id of this LineItem.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this LineItem.

        This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller.

        :param line_item_id: The line_item_id of this LineItem.
        :type line_item_id: str
        """

        self._line_item_id = line_item_id

    @property
    def linked_order_line_items(self):
        """Gets the linked_order_line_items of this LineItem.

        An array of one or more line items related to the corresponding order, but not a part of that order. Details include the order ID, line item ID, and title of the linked line item, the seller of that item, item specifics, estimated delivery times, and shipment tracking (if available).

        :return: The linked_order_line_items of this LineItem.
        :rtype: List[LinkedOrderLineItem]
        """
        return self._linked_order_line_items

    @linked_order_line_items.setter
    def linked_order_line_items(self, linked_order_line_items):
        """Sets the linked_order_line_items of this LineItem.

        An array of one or more line items related to the corresponding order, but not a part of that order. Details include the order ID, line item ID, and title of the linked line item, the seller of that item, item specifics, estimated delivery times, and shipment tracking (if available).

        :param linked_order_line_items: The linked_order_line_items of this LineItem.
        :type linked_order_line_items: List[LinkedOrderLineItem]
        """

        self._linked_order_line_items = linked_order_line_items

    @property
    def listing_marketplace_id(self):
        """Gets the listing_marketplace_id of this LineItem.

        The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :return: The listing_marketplace_id of this LineItem.
        :rtype: str
        """
        return self._listing_marketplace_id

    @listing_marketplace_id.setter
    def listing_marketplace_id(self, listing_marketplace_id):
        """Sets the listing_marketplace_id of this LineItem.

        The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :param listing_marketplace_id: The listing_marketplace_id of this LineItem.
        :type listing_marketplace_id: str
        """

        self._listing_marketplace_id = listing_marketplace_id

    @property
    def properties(self):
        """Gets the properties of this LineItem.


        :return: The properties of this LineItem.
        :rtype: LineItemProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this LineItem.


        :param properties: The properties of this LineItem.
        :type properties: LineItemProperties
        """

        self._properties = properties

    @property
    def purchase_marketplace_id(self):
        """Gets the purchase_marketplace_id of this LineItem.

        The unique identifier of the eBay marketplace where the line item was listed. Often, the <strong>listingMarketplaceId</strong> and the <strong>purchaseMarketplaceId</strong> identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :return: The purchase_marketplace_id of this LineItem.
        :rtype: str
        """
        return self._purchase_marketplace_id

    @purchase_marketplace_id.setter
    def purchase_marketplace_id(self, purchase_marketplace_id):
        """Sets the purchase_marketplace_id of this LineItem.

        The unique identifier of the eBay marketplace where the line item was listed. Often, the <strong>listingMarketplaceId</strong> and the <strong>purchaseMarketplaceId</strong> identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum'>eBay API documentation</a>

        :param purchase_marketplace_id: The purchase_marketplace_id of this LineItem.
        :type purchase_marketplace_id: str
        """

        self._purchase_marketplace_id = purchase_marketplace_id

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.

        The number of units of the line item in the order. These are represented as a group by a single <b>lineItemId</b>.

        :return: The quantity of this LineItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.

        The number of units of the line item in the order. These are represented as a group by a single <b>lineItemId</b>.

        :param quantity: The quantity of this LineItem.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def refunds(self):
        """Gets the refunds of this LineItem.

        This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.

        :return: The refunds of this LineItem.
        :rtype: List[LineItemRefund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this LineItem.

        This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.

        :param refunds: The refunds of this LineItem.
        :type refunds: List[LineItemRefund]
        """

        self._refunds = refunds

    @property
    def sku(self):
        """Gets the sku of this LineItem.

        Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller's eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model.

        :return: The sku of this LineItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this LineItem.

        Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller's eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model.

        :param sku: The sku of this LineItem.
        :type sku: str
        """

        self._sku = sku

    @property
    def sold_format(self):
        """Gets the sold_format of this LineItem.

        The eBay listing type of the line item. The most common listing types are <code>AUCTION</code> and <code>FIXED_PRICE</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:SoldFormatEnum'>eBay API documentation</a>

        :return: The sold_format of this LineItem.
        :rtype: str
        """
        return self._sold_format

    @sold_format.setter
    def sold_format(self, sold_format):
        """Sets the sold_format of this LineItem.

        The eBay listing type of the line item. The most common listing types are <code>AUCTION</code> and <code>FIXED_PRICE</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:SoldFormatEnum'>eBay API documentation</a>

        :param sold_format: The sold_format of this LineItem.
        :type sold_format: str
        """

        self._sold_format = sold_format

    @property
    def taxes(self):
        """Gets the taxes of this LineItem.

        Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item.

        :return: The taxes of this LineItem.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this LineItem.

        Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item.

        :param taxes: The taxes of this LineItem.
        :type taxes: List[Tax]
        """

        self._taxes = taxes

    @property
    def title(self):
        """Gets the title of this LineItem.

        The title of the listing.

        :return: The title of this LineItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LineItem.

        The title of the listing.

        :param title: The title of this LineItem.
        :type title: str
        """

        self._title = title

    @property
    def total(self):
        """Gets the total of this LineItem.


        :return: The total of this LineItem.
        :rtype: Amount
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LineItem.


        :param total: The total of this LineItem.
        :type total: Amount
        """

        self._total = total

    @property
    def variation_aspects(self):
        """Gets the variation_aspects of this LineItem.

        An array of aspect name-value pairs that identifies the specific variation of a multi-variation listing. This array can contain multiple name-value pairs, such as <code>color:blue</code> and <code>size:large</code>, and will only be returned for orders created from a multiple-variation listing.

        :return: The variation_aspects of this LineItem.
        :rtype: List[NameValuePair]
        """
        return self._variation_aspects

    @variation_aspects.setter
    def variation_aspects(self, variation_aspects):
        """Sets the variation_aspects of this LineItem.

        An array of aspect name-value pairs that identifies the specific variation of a multi-variation listing. This array can contain multiple name-value pairs, such as <code>color:blue</code> and <code>size:large</code>, and will only be returned for orders created from a multiple-variation listing.

        :param variation_aspects: The variation_aspects of this LineItem.
        :type variation_aspects: List[NameValuePair]
        """

        self._variation_aspects = variation_aspects
