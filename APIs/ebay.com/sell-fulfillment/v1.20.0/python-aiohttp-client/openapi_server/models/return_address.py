# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phone import Phone
from openapi_server import util


class ReturnAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country: str=None, county: str=None, full_name: str=None, postal_code: str=None, primary_phone: Phone=None, state_or_province: str=None):
        """ReturnAddress - a model defined in OpenAPI

        :param address_line1: The address_line1 of this ReturnAddress.
        :param address_line2: The address_line2 of this ReturnAddress.
        :param city: The city of this ReturnAddress.
        :param country: The country of this ReturnAddress.
        :param county: The county of this ReturnAddress.
        :param full_name: The full_name of this ReturnAddress.
        :param postal_code: The postal_code of this ReturnAddress.
        :param primary_phone: The primary_phone of this ReturnAddress.
        :param state_or_province: The state_or_province of this ReturnAddress.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country': str,
            'county': str,
            'full_name': str,
            'postal_code': str,
            'primary_phone': Phone,
            'state_or_province': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'full_name': 'fullName',
            'postal_code': 'postalCode',
            'primary_phone': 'primaryPhone',
            'state_or_province': 'stateOrProvince'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country = country
        self._county = county
        self._full_name = full_name
        self._postal_code = postal_code
        self._primary_phone = primary_phone
        self._state_or_province = state_or_province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnAddress of this ReturnAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this ReturnAddress.

        The first line of the street address.

        :return: The address_line1 of this ReturnAddress.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this ReturnAddress.

        The first line of the street address.

        :param address_line1: The address_line1 of this ReturnAddress.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this ReturnAddress.

        The second line of the street address. This line is not always necessarily, but is often used for apartment number or suite number, or other relevant information that can not fit on the first line.

        :return: The address_line2 of this ReturnAddress.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this ReturnAddress.

        The second line of the street address. This line is not always necessarily, but is often used for apartment number or suite number, or other relevant information that can not fit on the first line.

        :param address_line2: The address_line2 of this ReturnAddress.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this ReturnAddress.

        The city of the return address.

        :return: The city of this ReturnAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ReturnAddress.

        The city of the return address.

        :param city: The city of this ReturnAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this ReturnAddress.

        The country's two-digt, ISO 3166-1 country code. See the enumeration type for a country's value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :return: The country of this ReturnAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ReturnAddress.

        The country's two-digt, ISO 3166-1 country code. See the enumeration type for a country's value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :param country: The country of this ReturnAddress.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this ReturnAddress.

        The county of the return address. Counties are not applicable to all countries.

        :return: The county of this ReturnAddress.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this ReturnAddress.

        The county of the return address. Counties are not applicable to all countries.

        :param county: The county of this ReturnAddress.
        :type county: str
        """

        self._county = county

    @property
    def full_name(self):
        """Gets the full_name of this ReturnAddress.

        The full name of return address owner.

        :return: The full_name of this ReturnAddress.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ReturnAddress.

        The full name of return address owner.

        :param full_name: The full_name of this ReturnAddress.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def postal_code(self):
        """Gets the postal_code of this ReturnAddress.

        The postal code of the return address.

        :return: The postal_code of this ReturnAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ReturnAddress.

        The postal code of the return address.

        :param postal_code: The postal_code of this ReturnAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def primary_phone(self):
        """Gets the primary_phone of this ReturnAddress.


        :return: The primary_phone of this ReturnAddress.
        :rtype: Phone
        """
        return self._primary_phone

    @primary_phone.setter
    def primary_phone(self, primary_phone):
        """Sets the primary_phone of this ReturnAddress.


        :param primary_phone: The primary_phone of this ReturnAddress.
        :type primary_phone: Phone
        """

        self._primary_phone = primary_phone

    @property
    def state_or_province(self):
        """Gets the state_or_province of this ReturnAddress.

        The state or province of the return address.

        :return: The state_or_province of this ReturnAddress.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this ReturnAddress.

        The state or province of the return address.

        :param state_or_province: The state_or_province of this ReturnAddress.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province
