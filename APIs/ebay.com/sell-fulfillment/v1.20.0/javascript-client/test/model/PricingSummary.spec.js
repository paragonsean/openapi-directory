/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FulfillmentApi);
  }
}(this, function(expect, FulfillmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FulfillmentApi.PricingSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PricingSummary', function() {
    it('should create an instance of PricingSummary', function() {
      // uncomment below and update the code to test PricingSummary
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be.a(FulfillmentApi.PricingSummary);
    });

    it('should have the property adjustment (base name: "adjustment")', function() {
      // uncomment below and update the code to test the property adjustment
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property deliveryCost (base name: "deliveryCost")', function() {
      // uncomment below and update the code to test the property deliveryCost
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property deliveryDiscount (base name: "deliveryDiscount")', function() {
      // uncomment below and update the code to test the property deliveryDiscount
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property fee (base name: "fee")', function() {
      // uncomment below and update the code to test the property fee
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property priceDiscount (base name: "priceDiscount")', function() {
      // uncomment below and update the code to test the property priceDiscount
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property priceSubtotal (base name: "priceSubtotal")', function() {
      // uncomment below and update the code to test the property priceSubtotal
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

  });

}));
