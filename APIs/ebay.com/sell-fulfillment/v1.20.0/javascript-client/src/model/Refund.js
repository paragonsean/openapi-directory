/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Refund model module.
 * @module model/Refund
 * @version v1.20.0
 */
class Refund {
    /**
     * Constructs a new <code>Refund</code>.
     * This is the base type of the &lt;b&gt;issueRefund&lt;/b&gt; response payload. As long as the &lt;b&gt;issueRefund&lt;/b&gt; method does not trigger an error, a response payload will be returned.
     * @alias module:model/Refund
     */
    constructor() { 
        
        Refund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Refund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Refund} obj Optional instance to populate.
     * @return {module:model/Refund} The populated <code>Refund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Refund();

            if (data.hasOwnProperty('refundId')) {
                obj['refundId'] = ApiClient.convertToType(data['refundId'], 'String');
            }
            if (data.hasOwnProperty('refundStatus')) {
                obj['refundStatus'] = ApiClient.convertToType(data['refundStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Refund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Refund</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['refundId'] && !(typeof data['refundId'] === 'string' || data['refundId'] instanceof String)) {
            throw new Error("Expected the field `refundId` to be a primitive type in the JSON string but got " + data['refundId']);
        }
        // ensure the json data is a string
        if (data['refundStatus'] && !(typeof data['refundStatus'] === 'string' || data['refundStatus'] instanceof String)) {
            throw new Error("Expected the field `refundStatus` to be a primitive type in the JSON string but got " + data['refundStatus']);
        }

        return true;
    }


}



/**
 * The unique identifier of the order refund. This value is returned unless the refund operation fails (<b>refundStatus</b> value shows <code>FAILED</code>). This identifier can be used to track the status of the refund through a <b>getOrder</b> or <b>getOrders</b> call. For order-level refunds, check the <b>paymentSummary.refunds.refundId</b> field in the <b>getOrder</b>/<b>getOrders</b> response, and for line item level refunds, check the <b>lineItems.refunds.refundId</b> field(s) in the <b>getOrder</b>/<b>getOrders</b> response.
 * @member {String} refundId
 */
Refund.prototype['refundId'] = undefined;

/**
 * The value returned in this field indicates the success or failure of the refund operation. A successful <b>issueRefund</b> operation should result in a value of <code>PENDING</code>. A failed <b>issueRefund</b> operation should result in a value of <code>FAILED</code>, and an HTTP status code and/or and API error code may also get returned to possibly indicate the issue.<br><br>The refunds issued through this method are processed asynchronously, so the refund will not show as 'Refunded' right away. A seller will have to make a subsequent <a href=\"https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrder\" target=\"_blank\">getOrder</a> call to check the status of the refund.  The status of an order refund can be found in the <a href=\"https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrder#response.paymentSummary.refunds.refundStatus\" target=\"_blank\">paymentSummary.refunds.refundStatus</a> field of the <a href=\"https://developer.ebay.com/api-docs/sell/fulfillment/resources/order/methods/getOrder\" target=\"_blank\">getOrder</a> response. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:RefundStatusEnum'>eBay API documentation</a>
 * @member {String} refundStatus
 */
Refund.prototype['refundStatus'] = undefined;






export default Refund;

