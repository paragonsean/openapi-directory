/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LegacyReference from './LegacyReference';
import SimpleAmount from './SimpleAmount';

/**
 * The RefundItem model module.
 * @module model/RefundItem
 * @version v1.20.0
 */
class RefundItem {
    /**
     * Constructs a new <code>RefundItem</code>.
     * This type is used if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the &lt;b&gt;orderLevelRefundAmount&lt;/b&gt; container to specify the amount of the refund for the entire order.
     * @alias module:model/RefundItem
     */
    constructor() { 
        
        RefundItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RefundItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RefundItem} obj Optional instance to populate.
     * @return {module:model/RefundItem} The populated <code>RefundItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RefundItem();

            if (data.hasOwnProperty('legacyReference')) {
                obj['legacyReference'] = LegacyReference.constructFromObject(data['legacyReference']);
            }
            if (data.hasOwnProperty('lineItemId')) {
                obj['lineItemId'] = ApiClient.convertToType(data['lineItemId'], 'String');
            }
            if (data.hasOwnProperty('refundAmount')) {
                obj['refundAmount'] = SimpleAmount.constructFromObject(data['refundAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RefundItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RefundItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `legacyReference`
        if (data['legacyReference']) { // data not null
          LegacyReference.validateJSON(data['legacyReference']);
        }
        // ensure the json data is a string
        if (data['lineItemId'] && !(typeof data['lineItemId'] === 'string' || data['lineItemId'] instanceof String)) {
            throw new Error("Expected the field `lineItemId` to be a primitive type in the JSON string but got " + data['lineItemId']);
        }
        // validate the optional field `refundAmount`
        if (data['refundAmount']) { // data not null
          SimpleAmount.validateJSON(data['refundAmount']);
        }

        return true;
    }


}



/**
 * @member {module:model/LegacyReference} legacyReference
 */
RefundItem.prototype['legacyReference'] = undefined;

/**
 * The unique identifier of an order line item. This identifier is created once a buyer purchases a 'Buy It Now' item or if an auction listing ends with a winning bidder. Either this field or the <b>legacyReference</b> container is needed to identify an individual order line item that will receive a refund.<br><br><span class=\"tablenote\"><strong>Note:</strong> The <b>lineItemId</b> field is used to identify an order line item in REST API format, and the  <b>legacyReference</b> container is used to identify an order line item in Trading/legacy API format. Both legacy and REST API identifiers are returned in <b>getOrder</b> (Fulfillment API) and <b>GetOrders</b> (Trading API).</span>
 * @member {String} lineItemId
 */
RefundItem.prototype['lineItemId'] = undefined;

/**
 * @member {module:model/SimpleAmount} refundAmount
 */
RefundItem.prototype['refundAmount'] = undefined;






export default RefundItem;

