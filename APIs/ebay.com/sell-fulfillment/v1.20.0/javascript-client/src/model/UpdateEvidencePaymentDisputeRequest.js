/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileEvidence from './FileEvidence';
import OrderLineItems from './OrderLineItems';

/**
 * The UpdateEvidencePaymentDisputeRequest model module.
 * @module model/UpdateEvidencePaymentDisputeRequest
 * @version v1.20.0
 */
class UpdateEvidencePaymentDisputeRequest {
    /**
     * Constructs a new <code>UpdateEvidencePaymentDisputeRequest</code>.
     * This type is used by the request payload of the &lt;strong&gt;updateEvidence&lt;/strong&gt; method. The &lt;strong&gt;updateEvidence&lt;/strong&gt; method is used to update an existing evidence set against a payment dispute with one or more evidence files.
     * @alias module:model/UpdateEvidencePaymentDisputeRequest
     */
    constructor() { 
        
        UpdateEvidencePaymentDisputeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateEvidencePaymentDisputeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateEvidencePaymentDisputeRequest} obj Optional instance to populate.
     * @return {module:model/UpdateEvidencePaymentDisputeRequest} The populated <code>UpdateEvidencePaymentDisputeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateEvidencePaymentDisputeRequest();

            if (data.hasOwnProperty('evidenceId')) {
                obj['evidenceId'] = ApiClient.convertToType(data['evidenceId'], 'String');
            }
            if (data.hasOwnProperty('evidenceType')) {
                obj['evidenceType'] = ApiClient.convertToType(data['evidenceType'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [FileEvidence]);
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderLineItems]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateEvidencePaymentDisputeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateEvidencePaymentDisputeRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evidenceId'] && !(typeof data['evidenceId'] === 'string' || data['evidenceId'] instanceof String)) {
            throw new Error("Expected the field `evidenceId` to be a primitive type in the JSON string but got " + data['evidenceId']);
        }
        // ensure the json data is a string
        if (data['evidenceType'] && !(typeof data['evidenceType'] === 'string' || data['evidenceType'] instanceof String)) {
            throw new Error("Expected the field `evidenceType` to be a primitive type in the JSON string but got " + data['evidenceType']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                FileEvidence.validateJSON(item);
            };
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderLineItems.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The unique identifier of the evidence set that is being updated with new evidence files.
 * @member {String} evidenceId
 */
UpdateEvidencePaymentDisputeRequest.prototype['evidenceId'] = undefined;

/**
 * This field is used to indicate the type of evidence being provided through one or more evidence files. All evidence files (if more than one) should be associated with the evidence type passed in this field. See the <strong>EvidenceTypeEnum</strong> type for the supported evidence types. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum'>eBay API documentation</a>
 * @member {String} evidenceType
 */
UpdateEvidencePaymentDisputeRequest.prototype['evidenceType'] = undefined;

/**
 * This array is used to specify one or more evidence files that will be added to the evidence set associated with a payment dispute. At least one evidence file must be specified in the <strong>files</strong> array.<br><br> The unique identifier of an evidence file is returned in the response payload of the <strong>uploadEvidence</strong> method.
 * @member {Array.<module:model/FileEvidence>} files
 */
UpdateEvidencePaymentDisputeRequest.prototype['files'] = undefined;

/**
 * This required array identifies the order line item(s) for which the evidence file(s) will be applicable. Both the <strong>itemId</strong> and <strong>lineItemID</strong> fields are needed to identify each order line item, and both of these values are returned under the <strong>evidenceRequests.lineItems</strong> array in the <strong>getPaymentDispute</strong> response.
 * @member {Array.<module:model/OrderLineItems>} lineItems
 */
UpdateEvidencePaymentDisputeRequest.prototype['lineItems'] = undefined;






export default UpdateEvidencePaymentDisputeRequest;

