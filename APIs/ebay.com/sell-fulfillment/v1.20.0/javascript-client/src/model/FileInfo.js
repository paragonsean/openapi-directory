/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileInfo model module.
 * @module model/FileInfo
 * @version v1.20.0
 */
class FileInfo {
    /**
     * Constructs a new <code>FileInfo</code>.
     * This type is used by the &lt;strong&gt;files&lt;/strong&gt; array, which shows the name, ID, file type, and upload date for each provided evidential file.
     * @alias module:model/FileInfo
     */
    constructor() { 
        
        FileInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileInfo} obj Optional instance to populate.
     * @return {module:model/FileInfo} The populated <code>FileInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileInfo();

            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uploadedDate')) {
                obj['uploadedDate'] = ApiClient.convertToType(data['uploadedDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uploadedDate'] && !(typeof data['uploadedDate'] === 'string' || data['uploadedDate'] instanceof String)) {
            throw new Error("Expected the field `uploadedDate` to be a primitive type in the JSON string but got " + data['uploadedDate']);
        }

        return true;
    }


}



/**
 * The unique identifier of the evidence file.
 * @member {String} fileId
 */
FileInfo.prototype['fileId'] = undefined;

/**
 * The type of file uploaded. Supported file extensions are .JPEG, .JPG, and .PNG., and maximum file size allowed is 1.5 MB.
 * @member {String} fileType
 */
FileInfo.prototype['fileType'] = undefined;

/**
 * The seller-provided name of the evidence file.
 * @member {String} name
 */
FileInfo.prototype['name'] = undefined;

/**
 * The timestamp in this field shows the date/time when the seller uploaded the evidential document to eBay. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} uploadedDate
 */
FileInfo.prototype['uploadedDate'] = undefined;






export default FileInfo;

