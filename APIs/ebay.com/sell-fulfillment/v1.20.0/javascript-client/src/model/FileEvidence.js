/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileEvidence model module.
 * @module model/FileEvidence
 * @version v1.20.0
 */
class FileEvidence {
    /**
     * Constructs a new <code>FileEvidence</code>.
     * This type is used to store the unique identifier of an evidence file. Evidence files are used by seller to contest a payment dispute.
     * @alias module:model/FileEvidence
     */
    constructor() { 
        
        FileEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileEvidence} obj Optional instance to populate.
     * @return {module:model/FileEvidence} The populated <code>FileEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileEvidence();

            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileEvidence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }

        return true;
    }


}



/**
 * If an <strong>uploadEvidenceFile</strong> call is successful, a unique identifier of this evidence file will be returned in the <strong>uploadEvidenceFile</strong> response payload.  This unique <strong>fileId</strong> value is then used to either add this evidence file to a new evidence set using the <strong>addEvidence</strong> method, or to add this file to an existing evidence set using the <strong>updateEvidence</strong> method.<br><br>Note that if an evidence set already exists for a payment dispute, the <strong>getPaymentDispute</strong> method will return both the <strong>evidenceId</strong> (unique identifier of evidence set) value, and the <strong>fileId</strong> (unique identifier of a file within that evidence set) value(s).
 * @member {String} fileId
 */
FileEvidence.prototype['fileId'] = undefined;






export default FileEvidence;

