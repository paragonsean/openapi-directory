/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RefundItem from './RefundItem';
import SimpleAmount from './SimpleAmount';

/**
 * The IssueRefundRequest model module.
 * @module model/IssueRefundRequest
 * @version v1.20.0
 */
class IssueRefundRequest {
    /**
     * Constructs a new <code>IssueRefundRequest</code>.
     * The base type used by the request payload of the &lt;b&gt;issueRefund&lt;/b&gt; method.
     * @alias module:model/IssueRefundRequest
     */
    constructor() { 
        
        IssueRefundRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueRefundRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueRefundRequest} obj Optional instance to populate.
     * @return {module:model/IssueRefundRequest} The populated <code>IssueRefundRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueRefundRequest();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('orderLevelRefundAmount')) {
                obj['orderLevelRefundAmount'] = SimpleAmount.constructFromObject(data['orderLevelRefundAmount']);
            }
            if (data.hasOwnProperty('reasonForRefund')) {
                obj['reasonForRefund'] = ApiClient.convertToType(data['reasonForRefund'], 'String');
            }
            if (data.hasOwnProperty('refundItems')) {
                obj['refundItems'] = ApiClient.convertToType(data['refundItems'], [RefundItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueRefundRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueRefundRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `orderLevelRefundAmount`
        if (data['orderLevelRefundAmount']) { // data not null
          SimpleAmount.validateJSON(data['orderLevelRefundAmount']);
        }
        // ensure the json data is a string
        if (data['reasonForRefund'] && !(typeof data['reasonForRefund'] === 'string' || data['reasonForRefund'] instanceof String)) {
            throw new Error("Expected the field `reasonForRefund` to be a primitive type in the JSON string but got " + data['reasonForRefund']);
        }
        if (data['refundItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refundItems'])) {
                throw new Error("Expected the field `refundItems` to be an array in the JSON data but got " + data['refundItems']);
            }
            // validate the optional field `refundItems` (array)
            for (const item of data['refundItems']) {
                RefundItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This free-text field allows the seller to clarify why the refund is being issued to the buyer.<br><br><b>Max Length</b>: 100
 * @member {String} comment
 */
IssueRefundRequest.prototype['comment'] = undefined;

/**
 * @member {module:model/SimpleAmount} orderLevelRefundAmount
 */
IssueRefundRequest.prototype['orderLevelRefundAmount'] = undefined;

/**
 * The enumeration value passed into this field indicates the reason for the refund. One of the defined enumeration values in the <b>ReasonForRefundEnum</b> type must be used.<br><br>This field is required, and it is highly recommended that sellers use the correct refund reason, especially in the case of a buyer-requested cancellation or 'buyer remorse' return to indicate that there was nothing wrong with the item(s) or with the shipment of the order.<br><br><span class=\"tablenote\"><strong>Note:</strong> If issuing refunds for more than one order line item, keep in mind that the refund reason must be the same for each of the order line items. If the refund reason is different for one or more order line items in an order, the seller would need to make separate <b>issueRefund</b> calls, one for each refund reason. </span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ReasonForRefundEnum'>eBay API documentation</a>
 * @member {String} reasonForRefund
 */
IssueRefundRequest.prototype['reasonForRefund'] = undefined;

/**
 * The <b>refundItems</b> array is only required if the seller is issuing a refund for one or more individual order line items in a multiple line item order. Otherwise, the seller just uses the <b>orderLevelRefundAmount</b> container to specify the amount of the refund for the entire order.
 * @member {Array.<module:model/RefundItem>} refundItems
 */
IssueRefundRequest.prototype['refundItems'] = undefined;






export default IssueRefundRequest;

