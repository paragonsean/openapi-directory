/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentDisputeActivity model module.
 * @module model/PaymentDisputeActivity
 * @version v1.20.0
 */
class PaymentDisputeActivity {
    /**
     * Constructs a new <code>PaymentDisputeActivity</code>.
     * This type is used by each recorded activity on a payment dispute, from creation to resolution.
     * @alias module:model/PaymentDisputeActivity
     */
    constructor() { 
        
        PaymentDisputeActivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentDisputeActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentDisputeActivity} obj Optional instance to populate.
     * @return {module:model/PaymentDisputeActivity} The populated <code>PaymentDisputeActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentDisputeActivity();

            if (data.hasOwnProperty('activityDate')) {
                obj['activityDate'] = ApiClient.convertToType(data['activityDate'], 'String');
            }
            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ApiClient.convertToType(data['activityType'], 'String');
            }
            if (data.hasOwnProperty('actor')) {
                obj['actor'] = ApiClient.convertToType(data['actor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentDisputeActivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentDisputeActivity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activityDate'] && !(typeof data['activityDate'] === 'string' || data['activityDate'] instanceof String)) {
            throw new Error("Expected the field `activityDate` to be a primitive type in the JSON string but got " + data['activityDate']);
        }
        // ensure the json data is a string
        if (data['activityType'] && !(typeof data['activityType'] === 'string' || data['activityType'] instanceof String)) {
            throw new Error("Expected the field `activityType` to be a primitive type in the JSON string but got " + data['activityType']);
        }
        // ensure the json data is a string
        if (data['actor'] && !(typeof data['actor'] === 'string' || data['actor'] instanceof String)) {
            throw new Error("Expected the field `actor` to be a primitive type in the JSON string but got " + data['actor']);
        }

        return true;
    }


}



/**
 * The timestamp in this field shows the date/time of the payment dispute activity.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} activityDate
 */
PaymentDisputeActivity.prototype['activityDate'] = undefined;

/**
 * This enumeration value indicates the type of activity that occured on the payment dispute. For example, a value of <code>DISPUTE_OPENED</code> is returned when a payment disute is first created,  a value indicating the seller's decision on the dispute, such as <code>SELLER_CONTEST</code>, is returned when seller makes a decision to accept or contest dispute, and a value of <code>DISPUTE_CLOSED</code> is returned when a payment disute is resolved. See <strong>ActivityEnum</strong> for an explanation of each of the values that may be returned here. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ActivityEnum'>eBay API documentation</a>
 * @member {String} activityType
 */
PaymentDisputeActivity.prototype['activityType'] = undefined;

/**
 * This enumeration value indicates the actor that performed the action. Possible values include the <code>BUYER</code>, <code>SELLER</code>, <code>CS_AGENT</code> (eBay customer service), or <code>SYSTEM</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:ActorEnum'>eBay API documentation</a>
 * @member {String} actor
 */
PaymentDisputeActivity.prototype['actor'] = undefined;






export default PaymentDisputeActivity;

