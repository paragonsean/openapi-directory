/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentDisputeSummary from './PaymentDisputeSummary';

/**
 * The DisputeSummaryResponse model module.
 * @module model/DisputeSummaryResponse
 * @version v1.20.0
 */
class DisputeSummaryResponse {
    /**
     * Constructs a new <code>DisputeSummaryResponse</code>.
     * This type defines the base response payload of the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method. Each payment dispute that matches the input criteria is returned under the &lt;strong&gt;paymentDisputeSummaries&lt;/strong&gt; array.
     * @alias module:model/DisputeSummaryResponse
     */
    constructor() { 
        
        DisputeSummaryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisputeSummaryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisputeSummaryResponse} obj Optional instance to populate.
     * @return {module:model/DisputeSummaryResponse} The populated <code>DisputeSummaryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisputeSummaryResponse();

            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('paymentDisputeSummaries')) {
                obj['paymentDisputeSummaries'] = ApiClient.convertToType(data['paymentDisputeSummaries'], [PaymentDisputeSummary]);
            }
            if (data.hasOwnProperty('prev')) {
                obj['prev'] = ApiClient.convertToType(data['prev'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisputeSummaryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisputeSummaryResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        if (data['paymentDisputeSummaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentDisputeSummaries'])) {
                throw new Error("Expected the field `paymentDisputeSummaries` to be an array in the JSON data but got " + data['paymentDisputeSummaries']);
            }
            // validate the optional field `paymentDisputeSummaries` (array)
            for (const item of data['paymentDisputeSummaries']) {
                PaymentDisputeSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['prev'] && !(typeof data['prev'] === 'string' || data['prev'] instanceof String)) {
            throw new Error("Expected the field `prev` to be a primitive type in the JSON string but got " + data['prev']);
        }

        return true;
    }


}



/**
 * The URI of the <strong>getPaymentDisputeSummaries</strong> call request that produced the current page of the result set.
 * @member {String} href
 */
DisputeSummaryResponse.prototype['href'] = undefined;

/**
 * This value shows the maximum number of payment disputes that will appear on one page of the result set. The <strong>limit</strong> value can be passed in as a query parameter in the request, or if it is not used, it defaults to <code>200</code>. If the value in the <strong>total</strong> field exceeds this <strong>limit</strong> value, there are multiple pages in the current result set.<br><br><b>Min</b>: 1; <b>Max</b>: 200; <b>Default</b>: 200
 * @member {Number} limit
 */
DisputeSummaryResponse.prototype['limit'] = undefined;

/**
 * The <strong>getPaymentDisputeSummaries</strong> call URI to use if you wish to view the next page of the result set. For example, the following URI returns records 11 thru 20 from the collection of payment disputes:<br><br><code>path/payment_dispute_summary?limit=10&offset=10</code><br><br>This field is only returned if there is a next page of results to view based on the current input criteria.
 * @member {String} next
 */
DisputeSummaryResponse.prototype['next'] = undefined;

/**
 * This integer value indicates the number of payment disputes skipped before listing the first payment dispute from the result set. The <strong>offset</strong> value can be passed in as a query parameter in the request, or if it is not used, it defaults to <code>0</code> and the first payment dispute of the result set is shown at the top of the response.
 * @member {Number} offset
 */
DisputeSummaryResponse.prototype['offset'] = undefined;

/**
 * Each payment dispute that matches the input criteria is returned under this array. If no payment disputes are found, an empty array is returned.
 * @member {Array.<module:model/PaymentDisputeSummary>} paymentDisputeSummaries
 */
DisputeSummaryResponse.prototype['paymentDisputeSummaries'] = undefined;

/**
 * The <strong>getPaymentDisputeSummaries</strong> call URI to use if you wish to view the previous page of the result set. For example, the following URI returns records 1 thru 10 from the collection of payment disputes:<br><br><code>path/payment_dispute_summary?limit=10&offset=0</code><br><br>This field is only returned if there is a previous page of results to view based on the current input criteria.
 * @member {String} prev
 */
DisputeSummaryResponse.prototype['prev'] = undefined;

/**
 * This integer value is the total number of payment disputes that matched the input criteria. If the total number of entries exceeds the value that was set for <strong>limit</strong> in the request payload, you will have to make multiple API calls to see all pages of the results set. This field is returned even if it is <code>0</code>.
 * @member {Number} total
 */
DisputeSummaryResponse.prototype['total'] = undefined;






export default DisputeSummaryResponse;

