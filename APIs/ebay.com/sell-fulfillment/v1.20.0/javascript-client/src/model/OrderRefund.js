/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The OrderRefund model module.
 * @module model/OrderRefund
 * @version v1.20.0
 */
class OrderRefund {
    /**
     * Constructs a new <code>OrderRefund</code>.
     * This type contains information about a refund issued for an order. This does not include line item level refunds.
     * @alias module:model/OrderRefund
     */
    constructor() { 
        
        OrderRefund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderRefund} obj Optional instance to populate.
     * @return {module:model/OrderRefund} The populated <code>OrderRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderRefund();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('refundDate')) {
                obj['refundDate'] = ApiClient.convertToType(data['refundDate'], 'String');
            }
            if (data.hasOwnProperty('refundId')) {
                obj['refundId'] = ApiClient.convertToType(data['refundId'], 'String');
            }
            if (data.hasOwnProperty('refundReferenceId')) {
                obj['refundReferenceId'] = ApiClient.convertToType(data['refundReferenceId'], 'String');
            }
            if (data.hasOwnProperty('refundStatus')) {
                obj['refundStatus'] = ApiClient.convertToType(data['refundStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderRefund</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['refundDate'] && !(typeof data['refundDate'] === 'string' || data['refundDate'] instanceof String)) {
            throw new Error("Expected the field `refundDate` to be a primitive type in the JSON string but got " + data['refundDate']);
        }
        // ensure the json data is a string
        if (data['refundId'] && !(typeof data['refundId'] === 'string' || data['refundId'] instanceof String)) {
            throw new Error("Expected the field `refundId` to be a primitive type in the JSON string but got " + data['refundId']);
        }
        // ensure the json data is a string
        if (data['refundReferenceId'] && !(typeof data['refundReferenceId'] === 'string' || data['refundReferenceId'] instanceof String)) {
            throw new Error("Expected the field `refundReferenceId` to be a primitive type in the JSON string but got " + data['refundReferenceId']);
        }
        // ensure the json data is a string
        if (data['refundStatus'] && !(typeof data['refundStatus'] === 'string' || data['refundStatus'] instanceof String)) {
            throw new Error("Expected the field `refundStatus` to be a primitive type in the JSON string but got " + data['refundStatus']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amount
 */
OrderRefund.prototype['amount'] = undefined;

/**
 * The date and time that the refund was issued. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the refund has been issued. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} refundDate
 */
OrderRefund.prototype['refundDate'] = undefined;

/**
 * Unique identifier of a refund that was initiated for an order through the <b>issueRefund</b> method. If the <b>issueRefund</b> method was used to issue one or more refunds at the line item level, these refund identifiers are returned at the line item level instead (<b>lineItems.refunds.refundId</b> field).<br><br> A <b>refundId</b> value is returned in the response of the <b>issueRefund</b> method, and this same value will be returned in the <b>getOrders</b> and <b>getOrders</b> responses for pending and completed refunds. For other refunds, see the <b>refundReferenceId</b> field.
 * @member {String} refundId
 */
OrderRefund.prototype['refundId'] = undefined;

/**
 * The eBay-generated unique identifier for the refund. This field is not returned until the refund has been issued.
 * @member {String} refundReferenceId
 */
OrderRefund.prototype['refundReferenceId'] = undefined;

/**
 * This enumeration value indicates the current status of the refund to the buyer. This container is always returned for each refund. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:RefundStatusEnum'>eBay API documentation</a>
 * @member {String} refundStatus
 */
OrderRefund.prototype['refundStatus'] = undefined;






export default OrderRefund;

