/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileInfo from './FileInfo';
import OrderLineItems from './OrderLineItems';
import TrackingInfo from './TrackingInfo';

/**
 * The DisputeEvidence model module.
 * @module model/DisputeEvidence
 * @version v1.20.0
 */
class DisputeEvidence {
    /**
     * Constructs a new <code>DisputeEvidence</code>.
     * This type is used by the &lt;strong&gt;evidence&lt;/strong&gt; array that is returned in the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; response if one or more evidential documents are associated with the payment dispute. 
     * @alias module:model/DisputeEvidence
     */
    constructor() { 
        
        DisputeEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisputeEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisputeEvidence} obj Optional instance to populate.
     * @return {module:model/DisputeEvidence} The populated <code>DisputeEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisputeEvidence();

            if (data.hasOwnProperty('evidenceId')) {
                obj['evidenceId'] = ApiClient.convertToType(data['evidenceId'], 'String');
            }
            if (data.hasOwnProperty('evidenceType')) {
                obj['evidenceType'] = ApiClient.convertToType(data['evidenceType'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [FileInfo]);
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderLineItems]);
            }
            if (data.hasOwnProperty('providedDate')) {
                obj['providedDate'] = ApiClient.convertToType(data['providedDate'], 'String');
            }
            if (data.hasOwnProperty('requestDate')) {
                obj['requestDate'] = ApiClient.convertToType(data['requestDate'], 'String');
            }
            if (data.hasOwnProperty('respondByDate')) {
                obj['respondByDate'] = ApiClient.convertToType(data['respondByDate'], 'String');
            }
            if (data.hasOwnProperty('shipmentTracking')) {
                obj['shipmentTracking'] = ApiClient.convertToType(data['shipmentTracking'], [TrackingInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisputeEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisputeEvidence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evidenceId'] && !(typeof data['evidenceId'] === 'string' || data['evidenceId'] instanceof String)) {
            throw new Error("Expected the field `evidenceId` to be a primitive type in the JSON string but got " + data['evidenceId']);
        }
        // ensure the json data is a string
        if (data['evidenceType'] && !(typeof data['evidenceType'] === 'string' || data['evidenceType'] instanceof String)) {
            throw new Error("Expected the field `evidenceType` to be a primitive type in the JSON string but got " + data['evidenceType']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                FileInfo.validateJSON(item);
            };
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderLineItems.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['providedDate'] && !(typeof data['providedDate'] === 'string' || data['providedDate'] instanceof String)) {
            throw new Error("Expected the field `providedDate` to be a primitive type in the JSON string but got " + data['providedDate']);
        }
        // ensure the json data is a string
        if (data['requestDate'] && !(typeof data['requestDate'] === 'string' || data['requestDate'] instanceof String)) {
            throw new Error("Expected the field `requestDate` to be a primitive type in the JSON string but got " + data['requestDate']);
        }
        // ensure the json data is a string
        if (data['respondByDate'] && !(typeof data['respondByDate'] === 'string' || data['respondByDate'] instanceof String)) {
            throw new Error("Expected the field `respondByDate` to be a primitive type in the JSON string but got " + data['respondByDate']);
        }
        if (data['shipmentTracking']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipmentTracking'])) {
                throw new Error("Expected the field `shipmentTracking` to be an array in the JSON data but got " + data['shipmentTracking']);
            }
            // validate the optional field `shipmentTracking` (array)
            for (const item of data['shipmentTracking']) {
                TrackingInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique identifier of the evidential file set. Potentially, each evidential file set can have more than one file, that is why there is this file set identifier, and then an identifier for each file within this file set.
 * @member {String} evidenceId
 */
DisputeEvidence.prototype['evidenceId'] = undefined;

/**
 * This enumeration value shows the type of evidential file provided. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:EvidenceTypeEnum'>eBay API documentation</a>
 * @member {String} evidenceType
 */
DisputeEvidence.prototype['evidenceType'] = undefined;

/**
 * This array shows the name, ID, file type, and upload date for each provided file.
 * @member {Array.<module:model/FileInfo>} files
 */
DisputeEvidence.prototype['files'] = undefined;

/**
 * This array shows one or more order line items associated with the evidential document that has been provided.
 * @member {Array.<module:model/OrderLineItems>} lineItems
 */
DisputeEvidence.prototype['lineItems'] = undefined;

/**
 * The timestamp in this field shows the date/time when the seller provided a requested evidential document to eBay. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} providedDate
 */
DisputeEvidence.prototype['providedDate'] = undefined;

/**
 * The timestamp in this field shows the date/time when eBay requested the evidential document from the seller in response to a payment dispute. <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} requestDate
 */
DisputeEvidence.prototype['requestDate'] = undefined;

/**
 * The timestamp in this field shows the date/time when the seller was expected to provide a requested evidential document to eBay.  <br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} respondByDate
 */
DisputeEvidence.prototype['respondByDate'] = undefined;

/**
 * This array shows the shipping carrier and shipment tracking number associated with each shipment package of the order. This array is returned under the <strong>evidence</strong> container if the seller has provided shipment tracking information as evidence to support <code>PROOF_OF_DELIVERY</code> for an INR-related payment dispute.
 * @member {Array.<module:model/TrackingInfo>} shipmentTracking
 */
DisputeEvidence.prototype['shipmentTracking'] = undefined;






export default DisputeEvidence;

