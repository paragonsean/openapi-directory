/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import EbayTaxReference from './EbayTaxReference';

/**
 * The EbayCollectAndRemitTax model module.
 * @module model/EbayCollectAndRemitTax
 * @version v1.20.0
 */
class EbayCollectAndRemitTax {
    /**
     * Constructs a new <code>EbayCollectAndRemitTax</code>.
     * This type contains information about the type and amount of tax that eBay will collect and remit to the state, province, country, or other taxing authority in the buyer&#39;s location, as required by that taxing authority.&lt;br&gt;&lt;br&gt;&#39;Collect and Remit&#39; tax includes:&lt;ul&gt;&lt;li&gt;US state-mandated sales tax&lt;/li&gt;&lt;li&gt;Federal and Provincial Sales Tax in Canada&lt;/li&gt;&lt;li&gt;&#39;Goods and Services&#39; tax in Canada, Australia, and New Zealand&lt;/li&gt;&lt;li&gt;VAT collected for the UK and EU countries&lt;/li&gt;&lt;/ul&gt;
     * @alias module:model/EbayCollectAndRemitTax
     */
    constructor() { 
        
        EbayCollectAndRemitTax.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EbayCollectAndRemitTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EbayCollectAndRemitTax} obj Optional instance to populate.
     * @return {module:model/EbayCollectAndRemitTax} The populated <code>EbayCollectAndRemitTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EbayCollectAndRemitTax();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('collectionMethod')) {
                obj['collectionMethod'] = ApiClient.convertToType(data['collectionMethod'], 'String');
            }
            if (data.hasOwnProperty('ebayReference')) {
                obj['ebayReference'] = EbayTaxReference.constructFromObject(data['ebayReference']);
            }
            if (data.hasOwnProperty('taxType')) {
                obj['taxType'] = ApiClient.convertToType(data['taxType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EbayCollectAndRemitTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EbayCollectAndRemitTax</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['collectionMethod'] && !(typeof data['collectionMethod'] === 'string' || data['collectionMethod'] instanceof String)) {
            throw new Error("Expected the field `collectionMethod` to be a primitive type in the JSON string but got " + data['collectionMethod']);
        }
        // validate the optional field `ebayReference`
        if (data['ebayReference']) { // data not null
          EbayTaxReference.validateJSON(data['ebayReference']);
        }
        // ensure the json data is a string
        if (data['taxType'] && !(typeof data['taxType'] === 'string' || data['taxType'] instanceof String)) {
            throw new Error("Expected the field `taxType` to be a primitive type in the JSON string but got " + data['taxType']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amount
 */
EbayCollectAndRemitTax.prototype['amount'] = undefined;

/**
 * This field indicates the collection method used to collect the 'Collect and Remit' tax for the order. This field is always returned for orders subject to 'Collect and Remit' tax, and its value is always <code>NET</code>.<br><br><span class=\"tablenote\"><strong>Note:</strong> Although the <strong>collectionMethod</strong> field is returned for all orders subject to 'Collect and Remit' tax, the <strong>collectionMethod</strong> field and the <strong>CollectionMethodEnum</strong> type are not currently of any practical use, although this field may have use in the future. If and when the logic of this field is changed, this note will be updated and a note will also be added to the Release Notes.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CollectionMethodEnum'>eBay API documentation</a>
 * @member {String} collectionMethod
 */
EbayCollectAndRemitTax.prototype['collectionMethod'] = undefined;

/**
 * @member {module:model/EbayTaxReference} ebayReference
 */
EbayCollectAndRemitTax.prototype['ebayReference'] = undefined;

/**
 * The type of tax and fees that eBay will collect and remit to the taxing or fee authority. See the <strong>TaxTypeEnum</strong> type definition for more information about each tax or fee type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:TaxTypeEnum'>eBay API documentation</a>
 * @member {String} taxType
 */
EbayCollectAndRemitTax.prototype['taxType'] = undefined;






export default EbayCollectAndRemitTax;

