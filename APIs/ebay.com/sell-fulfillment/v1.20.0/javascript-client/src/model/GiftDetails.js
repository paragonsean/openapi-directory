/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GiftDetails model module.
 * @module model/GiftDetails
 * @version v1.20.0
 */
class GiftDetails {
    /**
     * Constructs a new <code>GiftDetails</code>.
     * This type contains information about a digital gift card line item that was purchased as a gift and sent to the recipient by email.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;b&gt;GiftDetails&lt;/b&gt; will not be returned for any order that is more than 90 days old.&lt;/span&gt;
     * @alias module:model/GiftDetails
     */
    constructor() { 
        
        GiftDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GiftDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GiftDetails} obj Optional instance to populate.
     * @return {module:model/GiftDetails} The populated <code>GiftDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GiftDetails();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('recipientEmail')) {
                obj['recipientEmail'] = ApiClient.convertToType(data['recipientEmail'], 'String');
            }
            if (data.hasOwnProperty('senderName')) {
                obj['senderName'] = ApiClient.convertToType(data['senderName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GiftDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GiftDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['recipientEmail'] && !(typeof data['recipientEmail'] === 'string' || data['recipientEmail'] instanceof String)) {
            throw new Error("Expected the field `recipientEmail` to be a primitive type in the JSON string but got " + data['recipientEmail']);
        }
        // ensure the json data is a string
        if (data['senderName'] && !(typeof data['senderName'] === 'string' || data['senderName'] instanceof String)) {
            throw new Error("Expected the field `senderName` to be a primitive type in the JSON string but got " + data['senderName']);
        }

        return true;
    }


}



/**
 * This field contains the gift message from the buyer to the gift recipient. This field is only returned if the buyer of the gift included a message for the gift.<br><br><span class=\"tablenote\"><strong>Note:</strong> The <b>message</b> will not be returned for any order that is more than 90 days old.</span>
 * @member {String} message
 */
GiftDetails.prototype['message'] = undefined;

/**
 * The email address of the gift recipient. The seller will send the digital gift card to this email address.<br><br><span class=\"tablenote\"><strong>Note:</strong> The <b>recipientEmail</b> will not be returned for any order that is more than 90 days old.</span>
 * @member {String} recipientEmail
 */
GiftDetails.prototype['recipientEmail'] = undefined;

/**
 * The name of the buyer, which will appear on the email that is sent to the gift recipient.<br><br><span class=\"tablenote\"><strong>Note:</strong> The <b>senderName</b> will not be returned for any order that is more than 90 days old.</span>
 * @member {String} senderName
 */
GiftDetails.prototype['senderName'] = undefined;






export default GiftDetails;

