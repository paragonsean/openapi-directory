/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CancelRequest model module.
 * @module model/CancelRequest
 * @version v1.20.0
 */
class CancelRequest {
    /**
     * Constructs a new <code>CancelRequest</code>.
     * This type contains information about a buyer request to cancel an order.
     * @alias module:model/CancelRequest
     */
    constructor() { 
        
        CancelRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CancelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CancelRequest} obj Optional instance to populate.
     * @return {module:model/CancelRequest} The populated <code>CancelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CancelRequest();

            if (data.hasOwnProperty('cancelCompletedDate')) {
                obj['cancelCompletedDate'] = ApiClient.convertToType(data['cancelCompletedDate'], 'String');
            }
            if (data.hasOwnProperty('cancelInitiator')) {
                obj['cancelInitiator'] = ApiClient.convertToType(data['cancelInitiator'], 'String');
            }
            if (data.hasOwnProperty('cancelReason')) {
                obj['cancelReason'] = ApiClient.convertToType(data['cancelReason'], 'String');
            }
            if (data.hasOwnProperty('cancelRequestId')) {
                obj['cancelRequestId'] = ApiClient.convertToType(data['cancelRequestId'], 'String');
            }
            if (data.hasOwnProperty('cancelRequestState')) {
                obj['cancelRequestState'] = ApiClient.convertToType(data['cancelRequestState'], 'String');
            }
            if (data.hasOwnProperty('cancelRequestedDate')) {
                obj['cancelRequestedDate'] = ApiClient.convertToType(data['cancelRequestedDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CancelRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CancelRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cancelCompletedDate'] && !(typeof data['cancelCompletedDate'] === 'string' || data['cancelCompletedDate'] instanceof String)) {
            throw new Error("Expected the field `cancelCompletedDate` to be a primitive type in the JSON string but got " + data['cancelCompletedDate']);
        }
        // ensure the json data is a string
        if (data['cancelInitiator'] && !(typeof data['cancelInitiator'] === 'string' || data['cancelInitiator'] instanceof String)) {
            throw new Error("Expected the field `cancelInitiator` to be a primitive type in the JSON string but got " + data['cancelInitiator']);
        }
        // ensure the json data is a string
        if (data['cancelReason'] && !(typeof data['cancelReason'] === 'string' || data['cancelReason'] instanceof String)) {
            throw new Error("Expected the field `cancelReason` to be a primitive type in the JSON string but got " + data['cancelReason']);
        }
        // ensure the json data is a string
        if (data['cancelRequestId'] && !(typeof data['cancelRequestId'] === 'string' || data['cancelRequestId'] instanceof String)) {
            throw new Error("Expected the field `cancelRequestId` to be a primitive type in the JSON string but got " + data['cancelRequestId']);
        }
        // ensure the json data is a string
        if (data['cancelRequestState'] && !(typeof data['cancelRequestState'] === 'string' || data['cancelRequestState'] instanceof String)) {
            throw new Error("Expected the field `cancelRequestState` to be a primitive type in the JSON string but got " + data['cancelRequestState']);
        }
        // ensure the json data is a string
        if (data['cancelRequestedDate'] && !(typeof data['cancelRequestedDate'] === 'string' || data['cancelRequestedDate'] instanceof String)) {
            throw new Error("Expected the field `cancelRequestedDate` to be a primitive type in the JSON string but got " + data['cancelRequestedDate']);
        }

        return true;
    }


}



/**
 * The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the cancellation request has actually been approved by the seller.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} cancelCompletedDate
 */
CancelRequest.prototype['cancelCompletedDate'] = undefined;

/**
 * This string value indicates the party who made the initial cancellation request. Typically, either the 'Buyer' or 'Seller'. If a cancellation request has been made, this field should be returned.
 * @member {String} cancelInitiator
 */
CancelRequest.prototype['cancelInitiator'] = undefined;

/**
 * The reason why the <b>cancelInitiator</b> initiated the cancellation request. Cancellation reasons for a buyer might include 'order placed by mistake' or 'order won't arrive in time'. For a seller, a typical cancellation reason is 'out of stock'. If a cancellation request has been made, this field should be returned.
 * @member {String} cancelReason
 */
CancelRequest.prototype['cancelReason'] = undefined;

/**
 * The unique identifier of the order cancellation request. This field is returned for each cancellation request.
 * @member {String} cancelRequestId
 */
CancelRequest.prototype['cancelRequestId'] = undefined;

/**
 * The current stage or condition of the cancellation request. This field is returned for each cancellation request. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CancelRequestStateEnum'>eBay API documentation</a>
 * @member {String} cancelRequestState
 */
CancelRequest.prototype['cancelRequestState'] = undefined;

/**
 * The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is returned for each cancellation request.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} cancelRequestedDate
 */
CancelRequest.prototype['cancelRequestedDate'] = undefined;






export default CancelRequest;

