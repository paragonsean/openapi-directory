/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleAmount from './SimpleAmount';

/**
 * The PaymentDisputeSummary model module.
 * @module model/PaymentDisputeSummary
 * @version v1.20.0
 */
class PaymentDisputeSummary {
    /**
     * Constructs a new <code>PaymentDisputeSummary</code>.
     * This type is used by each payment dispute that is returned with the &lt;strong&gt;getPaymentDisputeSummaries&lt;/strong&gt; method.
     * @alias module:model/PaymentDisputeSummary
     */
    constructor() { 
        
        PaymentDisputeSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentDisputeSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentDisputeSummary} obj Optional instance to populate.
     * @return {module:model/PaymentDisputeSummary} The populated <code>PaymentDisputeSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentDisputeSummary();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = SimpleAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('buyerUsername')) {
                obj['buyerUsername'] = ApiClient.convertToType(data['buyerUsername'], 'String');
            }
            if (data.hasOwnProperty('closedDate')) {
                obj['closedDate'] = ApiClient.convertToType(data['closedDate'], 'String');
            }
            if (data.hasOwnProperty('openDate')) {
                obj['openDate'] = ApiClient.convertToType(data['openDate'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('paymentDisputeId')) {
                obj['paymentDisputeId'] = ApiClient.convertToType(data['paymentDisputeId'], 'String');
            }
            if (data.hasOwnProperty('paymentDisputeStatus')) {
                obj['paymentDisputeStatus'] = ApiClient.convertToType(data['paymentDisputeStatus'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('respondByDate')) {
                obj['respondByDate'] = ApiClient.convertToType(data['respondByDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentDisputeSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentDisputeSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          SimpleAmount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['buyerUsername'] && !(typeof data['buyerUsername'] === 'string' || data['buyerUsername'] instanceof String)) {
            throw new Error("Expected the field `buyerUsername` to be a primitive type in the JSON string but got " + data['buyerUsername']);
        }
        // ensure the json data is a string
        if (data['closedDate'] && !(typeof data['closedDate'] === 'string' || data['closedDate'] instanceof String)) {
            throw new Error("Expected the field `closedDate` to be a primitive type in the JSON string but got " + data['closedDate']);
        }
        // ensure the json data is a string
        if (data['openDate'] && !(typeof data['openDate'] === 'string' || data['openDate'] instanceof String)) {
            throw new Error("Expected the field `openDate` to be a primitive type in the JSON string but got " + data['openDate']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['paymentDisputeId'] && !(typeof data['paymentDisputeId'] === 'string' || data['paymentDisputeId'] instanceof String)) {
            throw new Error("Expected the field `paymentDisputeId` to be a primitive type in the JSON string but got " + data['paymentDisputeId']);
        }
        // ensure the json data is a string
        if (data['paymentDisputeStatus'] && !(typeof data['paymentDisputeStatus'] === 'string' || data['paymentDisputeStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentDisputeStatus` to be a primitive type in the JSON string but got " + data['paymentDisputeStatus']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['respondByDate'] && !(typeof data['respondByDate'] === 'string' || data['respondByDate'] instanceof String)) {
            throw new Error("Expected the field `respondByDate` to be a primitive type in the JSON string but got " + data['respondByDate']);
        }

        return true;
    }


}



/**
 * @member {module:model/SimpleAmount} amount
 */
PaymentDisputeSummary.prototype['amount'] = undefined;

/**
 * This is the buyer's eBay user ID. This field is returned for all payment disputes returned in the response.
 * @member {String} buyerUsername
 */
PaymentDisputeSummary.prototype['buyerUsername'] = undefined;

/**
 * The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} closedDate
 */
PaymentDisputeSummary.prototype['closedDate'] = undefined;

/**
 * The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} openDate
 */
PaymentDisputeSummary.prototype['openDate'] = undefined;

/**
 * This is the unique identifier of the order involved in the payment dispute.
 * @member {String} orderId
 */
PaymentDisputeSummary.prototype['orderId'] = undefined;

/**
 * This is the unique identifier of the payment dispute. This identifier is automatically created by eBay once the payment dispute comes into the eBay system. This identifier is passed in at the end of the <strong>getPaymentDispute</strong> call URI to retrieve a specific payment dispute. The <strong>getPaymentDispute</strong> method returns more details about a payment dispute than the <strong>getPaymentDisputeSummaries</strong> method.
 * @member {String} paymentDisputeId
 */
PaymentDisputeSummary.prototype['paymentDisputeId'] = undefined;

/**
 * The enumeration value in this field gives the current status of the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>
 * @member {String} paymentDisputeStatus
 */
PaymentDisputeSummary.prototype['paymentDisputeStatus'] = undefined;

/**
 * The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>
 * @member {String} reason
 */
PaymentDisputeSummary.prototype['reason'] = undefined;

/**
 * The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that require action by the seller, that same seller must call <strong>getPaymentDispute</strong> to see the next action(s) that they can take against the payment dispute.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} respondByDate
 */
PaymentDisputeSummary.prototype['respondByDate'] = undefined;






export default PaymentDisputeSummary;

