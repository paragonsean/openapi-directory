/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PhoneNumber from './PhoneNumber';

/**
 * The ExtendedContact model module.
 * @module model/ExtendedContact
 * @version v1.20.0
 */
class ExtendedContact {
    /**
     * Constructs a new <code>ExtendedContact</code>.
     * This type contains shipping and contact information for a buyer or an eBay shipping partner.
     * @alias module:model/ExtendedContact
     */
    constructor() { 
        
        ExtendedContact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedContact} obj Optional instance to populate.
     * @return {module:model/ExtendedContact} The populated <code>ExtendedContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedContact();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('contactAddress')) {
                obj['contactAddress'] = Address.constructFromObject(data['contactAddress']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('primaryPhone')) {
                obj['primaryPhone'] = PhoneNumber.constructFromObject(data['primaryPhone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedContact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // validate the optional field `contactAddress`
        if (data['contactAddress']) { // data not null
          Address.validateJSON(data['contactAddress']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // validate the optional field `primaryPhone`
        if (data['primaryPhone']) { // data not null
          PhoneNumber.validateJSON(data['primaryPhone']);
        }

        return true;
    }


}



/**
 * The company name associated with the buyer or eBay shipping partner. This field is only returned if defined/applicable to the buyer or eBay shipping partner.
 * @member {String} companyName
 */
ExtendedContact.prototype['companyName'] = undefined;

/**
 * @member {module:model/Address} contactAddress
 */
ExtendedContact.prototype['contactAddress'] = undefined;

/**
 * This field contains the email address of the buyer. This address will be returned for up to 14 days from order creation. If an order is more than 14 days old, no address is returned.<br><br><span class=\"tablenote\"> <strong>Note:</strong> If returned, this field contains the email address of the buyer, even for Global Shipping Program shipments.<br><br>The <b>email</b> will not be returned for any order that is more than 90 days old.</span>
 * @member {String} email
 */
ExtendedContact.prototype['email'] = undefined;

/**
 * The full name of the buyer or eBay shipping partner.<br><br><span class=\"tablenote\"><strong>Note:</strong> The <b>fullName</b> will not be returned for any order that is more than 90 days old.</span>
 * @member {String} fullName
 */
ExtendedContact.prototype['fullName'] = undefined;

/**
 * @member {module:model/PhoneNumber} primaryPhone
 */
ExtendedContact.prototype['primaryPhone'] = undefined;






export default ExtendedContact;

