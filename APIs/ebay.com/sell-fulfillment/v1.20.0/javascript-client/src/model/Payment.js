/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import PaymentHold from './PaymentHold';

/**
 * The Payment model module.
 * @module model/Payment
 * @version v1.20.0
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * This type is used to provide details about the seller payments for an order.
     * @alias module:model/Payment
     */
    constructor() { 
        
        Payment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('paymentDate')) {
                obj['paymentDate'] = ApiClient.convertToType(data['paymentDate'], 'String');
            }
            if (data.hasOwnProperty('paymentHolds')) {
                obj['paymentHolds'] = ApiClient.convertToType(data['paymentHolds'], [PaymentHold]);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('paymentReferenceId')) {
                obj['paymentReferenceId'] = ApiClient.convertToType(data['paymentReferenceId'], 'String');
            }
            if (data.hasOwnProperty('paymentStatus')) {
                obj['paymentStatus'] = ApiClient.convertToType(data['paymentStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['paymentDate'] && !(typeof data['paymentDate'] === 'string' || data['paymentDate'] instanceof String)) {
            throw new Error("Expected the field `paymentDate` to be a primitive type in the JSON string but got " + data['paymentDate']);
        }
        if (data['paymentHolds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentHolds'])) {
                throw new Error("Expected the field `paymentHolds` to be an array in the JSON data but got " + data['paymentHolds']);
            }
            // validate the optional field `paymentHolds` (array)
            for (const item of data['paymentHolds']) {
                PaymentHold.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['paymentReferenceId'] && !(typeof data['paymentReferenceId'] === 'string' || data['paymentReferenceId'] instanceof String)) {
            throw new Error("Expected the field `paymentReferenceId` to be a primitive type in the JSON string but got " + data['paymentReferenceId']);
        }
        // ensure the json data is a string
        if (data['paymentStatus'] && !(typeof data['paymentStatus'] === 'string' || data['paymentStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentStatus` to be a primitive type in the JSON string but got " + data['paymentStatus']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amount
 */
Payment.prototype['amount'] = undefined;

/**
 * The date and time that the payment was received by the seller. This field will not be returned if buyer has yet to pay for the order. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} paymentDate
 */
Payment.prototype['paymentDate'] = undefined;

/**
 * This container is only returned if eBay is temporarily holding the seller's funds for the order. If a payment hold has been placed on the order, this container includes the reason for the payment hold, the expected release date of the funds into the seller's account, the current state of the hold, and as soon as the payment hold has been released, the actual release date.
 * @member {Array.<module:model/PaymentHold>} paymentHolds
 */
Payment.prototype['paymentHolds'] = undefined;

/**
 * The payment method used to pay for the order. See the <strong>PaymentMethodTypeEnum</strong> type for more information on the payment methods. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentMethodTypeEnum'>eBay API documentation</a>
 * @member {String} paymentMethod
 */
Payment.prototype['paymentMethod'] = undefined;

/**
 * This field is only returned if payment has been made by the buyer, and the <strong>paymentMethod</strong> is <code>ESCROW</code>. This field contains a special ID for ESCROW.
 * @member {String} paymentReferenceId
 */
Payment.prototype['paymentReferenceId'] = undefined;

/**
 * The enumeration value returned in this field indicates the status of the payment for the order. See the <strong>PaymentStatusEnum</strong> type definition for more information on the possible payment states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:PaymentStatusEnum'>eBay API documentation</a>
 * @member {String} paymentStatus
 */
Payment.prototype['paymentStatus'] = undefined;






export default Payment;

