/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The LineItemRefund model module.
 * @module model/LineItemRefund
 * @version v1.20.0
 */
class LineItemRefund {
    /**
     * Constructs a new <code>LineItemRefund</code>.
     * This type contains refund information for a line item.
     * @alias module:model/LineItemRefund
     */
    constructor() { 
        
        LineItemRefund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineItemRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineItemRefund} obj Optional instance to populate.
     * @return {module:model/LineItemRefund} The populated <code>LineItemRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineItemRefund();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('refundDate')) {
                obj['refundDate'] = ApiClient.convertToType(data['refundDate'], 'String');
            }
            if (data.hasOwnProperty('refundId')) {
                obj['refundId'] = ApiClient.convertToType(data['refundId'], 'String');
            }
            if (data.hasOwnProperty('refundReferenceId')) {
                obj['refundReferenceId'] = ApiClient.convertToType(data['refundReferenceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineItemRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineItemRefund</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['refundDate'] && !(typeof data['refundDate'] === 'string' || data['refundDate'] instanceof String)) {
            throw new Error("Expected the field `refundDate` to be a primitive type in the JSON string but got " + data['refundDate']);
        }
        // ensure the json data is a string
        if (data['refundId'] && !(typeof data['refundId'] === 'string' || data['refundId'] instanceof String)) {
            throw new Error("Expected the field `refundId` to be a primitive type in the JSON string but got " + data['refundId']);
        }
        // ensure the json data is a string
        if (data['refundReferenceId'] && !(typeof data['refundReferenceId'] === 'string' || data['refundReferenceId'] instanceof String)) {
            throw new Error("Expected the field `refundReferenceId` to be a primitive type in the JSON string but got " + data['refundReferenceId']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amount
 */
LineItemRefund.prototype['amount'] = undefined;

/**
 * The date and time that the refund was issued for the line item. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the refund has been issued. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} refundDate
 */
LineItemRefund.prototype['refundDate'] = undefined;

/**
 * Unique identifier of a refund that was initiated for an order's line item through the <b>issueRefund</b> method. If the <b>issueRefund</b> method was used to issue a refund at the order level, this identifier is returned at the order level instead (<b>paymentSummary.refunds.refundId</b> field).<br><br> A <b>refundId</b> value is returned in the response of the <b>issueRefund</b> method, and this same value will be returned in the <b>getOrder</b> and <b>getOrders</b> responses for pending and completed refunds.
 * @member {String} refundId
 */
LineItemRefund.prototype['refundId'] = undefined;

/**
 * This field is reserved for internal or future use.
 * @member {String} refundReferenceId
 */
LineItemRefund.prototype['refundReferenceId'] = undefined;






export default LineItemRefund;

