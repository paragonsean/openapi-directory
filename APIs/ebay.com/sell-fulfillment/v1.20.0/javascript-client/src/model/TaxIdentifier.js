/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxIdentifier model module.
 * @module model/TaxIdentifier
 * @version v1.20.0
 */
class TaxIdentifier {
    /**
     * Constructs a new <code>TaxIdentifier</code>.
     * This type is used by the &lt;strong&gt;taxIdentifier&lt;/strong&gt; container that is returned in &lt;strong&gt;getOrder&lt;/strong&gt;. The &lt;strong&gt;taxIdentifier&lt;/strong&gt; container consists of taxpayer identification information for buyers from Italy, Spain, or Guatemala. It is currently only returned for orders occurring on the eBay Italy or eBay Spain marketplaces.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, the &lt;strong&gt;taxIdentifier&lt;/strong&gt; container is only returned in &lt;strong&gt;getOrder&lt;/strong&gt; and not in &lt;strong&gt;getOrders&lt;/strong&gt;. So, if a seller wanted to view a buyer&#39;s tax information for a particular order returned in &lt;strong&gt;getOrders&lt;/strong&gt;, that seller would need to use the &lt;strong&gt;orderId&lt;/strong&gt; value for that particular order, and then run a &lt;strong&gt;getOrder&lt;/strong&gt; call against that order ID. &lt;/span&gt;
     * @alias module:model/TaxIdentifier
     */
    constructor() { 
        
        TaxIdentifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxIdentifier} obj Optional instance to populate.
     * @return {module:model/TaxIdentifier} The populated <code>TaxIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxIdentifier();

            if (data.hasOwnProperty('issuingCountry')) {
                obj['issuingCountry'] = ApiClient.convertToType(data['issuingCountry'], 'String');
            }
            if (data.hasOwnProperty('taxIdentifierType')) {
                obj['taxIdentifierType'] = ApiClient.convertToType(data['taxIdentifierType'], 'String');
            }
            if (data.hasOwnProperty('taxpayerId')) {
                obj['taxpayerId'] = ApiClient.convertToType(data['taxpayerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxIdentifier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['issuingCountry'] && !(typeof data['issuingCountry'] === 'string' || data['issuingCountry'] instanceof String)) {
            throw new Error("Expected the field `issuingCountry` to be a primitive type in the JSON string but got " + data['issuingCountry']);
        }
        // ensure the json data is a string
        if (data['taxIdentifierType'] && !(typeof data['taxIdentifierType'] === 'string' || data['taxIdentifierType'] instanceof String)) {
            throw new Error("Expected the field `taxIdentifierType` to be a primitive type in the JSON string but got " + data['taxIdentifierType']);
        }
        // ensure the json data is a string
        if (data['taxpayerId'] && !(typeof data['taxpayerId'] === 'string' || data['taxpayerId'] instanceof String)) {
            throw new Error("Expected the field `taxpayerId` to be a primitive type in the JSON string but got " + data['taxpayerId']);
        }

        return true;
    }


}



/**
 * This two-letter code indicates the country that issued the buyer's tax ID. The country that the two-letter code represents can be found in the <strong>CountryCodeEnum</strong> type, or in the  <a href=\"https://www.iso.org/iso-3166-country-codes.html \">ISO 3166</a> standard. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>
 * @member {String} issuingCountry
 */
TaxIdentifier.prototype['issuingCountry'] = undefined;

/**
 * This enumeration value indicates the type of tax identification being used for the buyer. The different tax types are defined in the <strong>TaxIdentifierTypeEnum</strong> type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:TaxIdentifierTypeEnum'>eBay API documentation</a>
 * @member {String} taxIdentifierType
 */
TaxIdentifier.prototype['taxIdentifierType'] = undefined;

/**
 * This value is the unique tax ID associated with the buyer. The type of tax identification is shown in the <strong>taxIdentifierType</strong> field.
 * @member {String} taxpayerId
 */
TaxIdentifier.prototype['taxpayerId'] = undefined;






export default TaxIdentifier;

