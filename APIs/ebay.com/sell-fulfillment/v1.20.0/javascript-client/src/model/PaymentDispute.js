/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisputeEvidence from './DisputeEvidence';
import EvidenceRequest from './EvidenceRequest';
import InfoFromBuyer from './InfoFromBuyer';
import MonetaryTransaction from './MonetaryTransaction';
import OrderLineItems from './OrderLineItems';
import PaymentDisputeOutcomeDetail from './PaymentDisputeOutcomeDetail';
import ReturnAddress from './ReturnAddress';
import SimpleAmount from './SimpleAmount';

/**
 * The PaymentDispute model module.
 * @module model/PaymentDispute
 * @version v1.20.0
 */
class PaymentDispute {
    /**
     * Constructs a new <code>PaymentDispute</code>.
     * This type is used by the base response of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method retrieves detailed information on a specific payment dispute.
     * @alias module:model/PaymentDispute
     */
    constructor() { 
        
        PaymentDispute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentDispute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentDispute} obj Optional instance to populate.
     * @return {module:model/PaymentDispute} The populated <code>PaymentDispute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentDispute();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = SimpleAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('availableChoices')) {
                obj['availableChoices'] = ApiClient.convertToType(data['availableChoices'], ['String']);
            }
            if (data.hasOwnProperty('buyerProvided')) {
                obj['buyerProvided'] = InfoFromBuyer.constructFromObject(data['buyerProvided']);
            }
            if (data.hasOwnProperty('buyerUsername')) {
                obj['buyerUsername'] = ApiClient.convertToType(data['buyerUsername'], 'String');
            }
            if (data.hasOwnProperty('closedDate')) {
                obj['closedDate'] = ApiClient.convertToType(data['closedDate'], 'String');
            }
            if (data.hasOwnProperty('evidence')) {
                obj['evidence'] = ApiClient.convertToType(data['evidence'], [DisputeEvidence]);
            }
            if (data.hasOwnProperty('evidenceRequests')) {
                obj['evidenceRequests'] = ApiClient.convertToType(data['evidenceRequests'], [EvidenceRequest]);
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderLineItems]);
            }
            if (data.hasOwnProperty('monetaryTransactions')) {
                obj['monetaryTransactions'] = ApiClient.convertToType(data['monetaryTransactions'], [MonetaryTransaction]);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('openDate')) {
                obj['openDate'] = ApiClient.convertToType(data['openDate'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('paymentDisputeId')) {
                obj['paymentDisputeId'] = ApiClient.convertToType(data['paymentDisputeId'], 'String');
            }
            if (data.hasOwnProperty('paymentDisputeStatus')) {
                obj['paymentDisputeStatus'] = ApiClient.convertToType(data['paymentDisputeStatus'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = PaymentDisputeOutcomeDetail.constructFromObject(data['resolution']);
            }
            if (data.hasOwnProperty('respondByDate')) {
                obj['respondByDate'] = ApiClient.convertToType(data['respondByDate'], 'String');
            }
            if (data.hasOwnProperty('returnAddress')) {
                obj['returnAddress'] = ReturnAddress.constructFromObject(data['returnAddress']);
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('sellerResponse')) {
                obj['sellerResponse'] = ApiClient.convertToType(data['sellerResponse'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentDispute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentDispute</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          SimpleAmount.validateJSON(data['amount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['availableChoices'])) {
            throw new Error("Expected the field `availableChoices` to be an array in the JSON data but got " + data['availableChoices']);
        }
        // validate the optional field `buyerProvided`
        if (data['buyerProvided']) { // data not null
          InfoFromBuyer.validateJSON(data['buyerProvided']);
        }
        // ensure the json data is a string
        if (data['buyerUsername'] && !(typeof data['buyerUsername'] === 'string' || data['buyerUsername'] instanceof String)) {
            throw new Error("Expected the field `buyerUsername` to be a primitive type in the JSON string but got " + data['buyerUsername']);
        }
        // ensure the json data is a string
        if (data['closedDate'] && !(typeof data['closedDate'] === 'string' || data['closedDate'] instanceof String)) {
            throw new Error("Expected the field `closedDate` to be a primitive type in the JSON string but got " + data['closedDate']);
        }
        if (data['evidence']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['evidence'])) {
                throw new Error("Expected the field `evidence` to be an array in the JSON data but got " + data['evidence']);
            }
            // validate the optional field `evidence` (array)
            for (const item of data['evidence']) {
                DisputeEvidence.validateJSON(item);
            };
        }
        if (data['evidenceRequests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['evidenceRequests'])) {
                throw new Error("Expected the field `evidenceRequests` to be an array in the JSON data but got " + data['evidenceRequests']);
            }
            // validate the optional field `evidenceRequests` (array)
            for (const item of data['evidenceRequests']) {
                EvidenceRequest.validateJSON(item);
            };
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderLineItems.validateJSON(item);
            };
        }
        if (data['monetaryTransactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monetaryTransactions'])) {
                throw new Error("Expected the field `monetaryTransactions` to be an array in the JSON data but got " + data['monetaryTransactions']);
            }
            // validate the optional field `monetaryTransactions` (array)
            for (const item of data['monetaryTransactions']) {
                MonetaryTransaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['openDate'] && !(typeof data['openDate'] === 'string' || data['openDate'] instanceof String)) {
            throw new Error("Expected the field `openDate` to be a primitive type in the JSON string but got " + data['openDate']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['paymentDisputeId'] && !(typeof data['paymentDisputeId'] === 'string' || data['paymentDisputeId'] instanceof String)) {
            throw new Error("Expected the field `paymentDisputeId` to be a primitive type in the JSON string but got " + data['paymentDisputeId']);
        }
        // ensure the json data is a string
        if (data['paymentDisputeStatus'] && !(typeof data['paymentDisputeStatus'] === 'string' || data['paymentDisputeStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentDisputeStatus` to be a primitive type in the JSON string but got " + data['paymentDisputeStatus']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // validate the optional field `resolution`
        if (data['resolution']) { // data not null
          PaymentDisputeOutcomeDetail.validateJSON(data['resolution']);
        }
        // ensure the json data is a string
        if (data['respondByDate'] && !(typeof data['respondByDate'] === 'string' || data['respondByDate'] instanceof String)) {
            throw new Error("Expected the field `respondByDate` to be a primitive type in the JSON string but got " + data['respondByDate']);
        }
        // validate the optional field `returnAddress`
        if (data['returnAddress']) { // data not null
          ReturnAddress.validateJSON(data['returnAddress']);
        }
        // ensure the json data is a string
        if (data['sellerResponse'] && !(typeof data['sellerResponse'] === 'string' || data['sellerResponse'] instanceof String)) {
            throw new Error("Expected the field `sellerResponse` to be a primitive type in the JSON string but got " + data['sellerResponse']);
        }

        return true;
    }


}



/**
 * @member {module:model/SimpleAmount} amount
 */
PaymentDispute.prototype['amount'] = undefined;

/**
 * The value(s) returned in this array indicate the choices that the seller has when responding to the payment dispute. Once the seller has responded to the payment dispute, this field will no longer be shown, and instead, the <strong>sellerResponse</strong> field will show the decision that the seller made.
 * @member {Array.<String>} availableChoices
 */
PaymentDispute.prototype['availableChoices'] = undefined;

/**
 * @member {module:model/InfoFromBuyer} buyerProvided
 */
PaymentDispute.prototype['buyerProvided'] = undefined;

/**
 * This is the eBay user ID of the buyer that initiated the payment dispute.
 * @member {String} buyerUsername
 */
PaymentDispute.prototype['buyerUsername'] = undefined;

/**
 * The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} closedDate
 */
PaymentDispute.prototype['closedDate'] = undefined;

/**
 * This container shows any evidence that has been provided by the seller to contest the payment dispute. Evidence may include shipment tracking information, proof of authentication documentation, image(s) to proof that an item is as described, or financial documentation/invoice.<br><br>This container is only returned if the seller has provided at least one document used as evidence against the payment dispute.
 * @member {Array.<module:model/DisputeEvidence>} evidence
 */
PaymentDispute.prototype['evidence'] = undefined;

/**
 * This container is returned if one or more evidence documents are being requested from the seller.
 * @member {Array.<module:model/EvidenceRequest>} evidenceRequests
 */
PaymentDispute.prototype['evidenceRequests'] = undefined;

/**
 * This array is used to identify one or more order line items associated with the payment dispute. There will always be at least one <b>itemId</b>/<b>lineItemId</b> pair returned in this array.
 * @member {Array.<module:model/OrderLineItems>} lineItems
 */
PaymentDispute.prototype['lineItems'] = undefined;

/**
 * This array provide details about one or more monetary transactions that occur as part of a payment dispute. This array is only returned once one or more monetary transacations occur with a payment dispute.
 * @member {Array.<module:model/MonetaryTransaction>} monetaryTransactions
 */
PaymentDispute.prototype['monetaryTransactions'] = undefined;

/**
 * This field shows information that the seller provides about the dispute, such as the basis for the dispute, any relevant evidence, tracking numbers, and so forth.<br><br>This field is limited to 1000 characters.
 * @member {String} note
 */
PaymentDispute.prototype['note'] = undefined;

/**
 * The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} openDate
 */
PaymentDispute.prototype['openDate'] = undefined;

/**
 * This is the unique identifier of the order involved in the payment dispute.
 * @member {String} orderId
 */
PaymentDispute.prototype['orderId'] = undefined;

/**
 * This is the unique identifier of the payment dispute. This is the same identifier that is passed in to the call URI. This identifier is automatically created by eBay once the payment dispute comes into the eBay system.
 * @member {String} paymentDisputeId
 */
PaymentDispute.prototype['paymentDisputeId'] = undefined;

/**
 * The enumeration value in this field gives the current status of the payment dispute. The status of a payment dispute partially determines other fields that are returned in the response. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>
 * @member {String} paymentDisputeStatus
 */
PaymentDispute.prototype['paymentDisputeStatus'] = undefined;

/**
 * The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>
 * @member {String} reason
 */
PaymentDispute.prototype['reason'] = undefined;

/**
 * @member {module:model/PaymentDisputeOutcomeDetail} resolution
 */
PaymentDispute.prototype['resolution'] = undefined;

/**
 * The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that currently require action by the seller, that same seller should look at the <strong>availableChoices</strong> array to see the available actions.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
 * @member {String} respondByDate
 */
PaymentDispute.prototype['respondByDate'] = undefined;

/**
 * @member {module:model/ReturnAddress} returnAddress
 */
PaymentDispute.prototype['returnAddress'] = undefined;

/**
 * This integer value indicates the revision number of the payment dispute. Each time an action is taken against a payment dispute, this integer value increases by 1.
 * @member {Number} revision
 */
PaymentDispute.prototype['revision'] = undefined;

/**
 * The enumeration value returned in this field indicates how the seller has responded to the payment dispute. The seller has the option of accepting the payment dispute and agreeing to issue a refund, accepting the payment dispute and agreeing to issue a refund as long as the buyer returns the item, or contesting the payment dispute. This field is returned as soon as the seller makes an initial decision on the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:SellerResponseEnum'>eBay API documentation</a>
 * @member {String} sellerResponse
 */
PaymentDispute.prototype['sellerResponse'] = undefined;






export default PaymentDispute;

