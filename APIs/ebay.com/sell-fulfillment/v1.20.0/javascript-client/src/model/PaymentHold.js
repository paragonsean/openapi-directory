/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import SellerActionsToRelease from './SellerActionsToRelease';

/**
 * The PaymentHold model module.
 * @module model/PaymentHold
 * @version v1.20.0
 */
class PaymentHold {
    /**
     * Constructs a new <code>PaymentHold</code>.
     * This type contains information about a hold placed on a payment to a seller for an order, including the reason why the buyer&#39;s payment for the order is being held, the expected release date of the funds into the seller&#39;s account, the current state of the hold, and the actual release date if the payment has been released, and possible actions the seller can take to expedite the payout of funds into their account.
     * @alias module:model/PaymentHold
     */
    constructor() { 
        
        PaymentHold.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentHold</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentHold} obj Optional instance to populate.
     * @return {module:model/PaymentHold} The populated <code>PaymentHold</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentHold();

            if (data.hasOwnProperty('expectedReleaseDate')) {
                obj['expectedReleaseDate'] = ApiClient.convertToType(data['expectedReleaseDate'], 'String');
            }
            if (data.hasOwnProperty('holdAmount')) {
                obj['holdAmount'] = Amount.constructFromObject(data['holdAmount']);
            }
            if (data.hasOwnProperty('holdReason')) {
                obj['holdReason'] = ApiClient.convertToType(data['holdReason'], 'String');
            }
            if (data.hasOwnProperty('holdState')) {
                obj['holdState'] = ApiClient.convertToType(data['holdState'], 'String');
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = ApiClient.convertToType(data['releaseDate'], 'String');
            }
            if (data.hasOwnProperty('sellerActionsToRelease')) {
                obj['sellerActionsToRelease'] = ApiClient.convertToType(data['sellerActionsToRelease'], [SellerActionsToRelease]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentHold</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentHold</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expectedReleaseDate'] && !(typeof data['expectedReleaseDate'] === 'string' || data['expectedReleaseDate'] instanceof String)) {
            throw new Error("Expected the field `expectedReleaseDate` to be a primitive type in the JSON string but got " + data['expectedReleaseDate']);
        }
        // validate the optional field `holdAmount`
        if (data['holdAmount']) { // data not null
          Amount.validateJSON(data['holdAmount']);
        }
        // ensure the json data is a string
        if (data['holdReason'] && !(typeof data['holdReason'] === 'string' || data['holdReason'] instanceof String)) {
            throw new Error("Expected the field `holdReason` to be a primitive type in the JSON string but got " + data['holdReason']);
        }
        // ensure the json data is a string
        if (data['holdState'] && !(typeof data['holdState'] === 'string' || data['holdState'] instanceof String)) {
            throw new Error("Expected the field `holdState` to be a primitive type in the JSON string but got " + data['holdState']);
        }
        // ensure the json data is a string
        if (data['releaseDate'] && !(typeof data['releaseDate'] === 'string' || data['releaseDate'] instanceof String)) {
            throw new Error("Expected the field `releaseDate` to be a primitive type in the JSON string but got " + data['releaseDate']);
        }
        if (data['sellerActionsToRelease']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellerActionsToRelease'])) {
                throw new Error("Expected the field `sellerActionsToRelease` to be an array in the JSON data but got " + data['sellerActionsToRelease']);
            }
            // validate the optional field `sellerActionsToRelease` (array)
            for (const item of data['sellerActionsToRelease']) {
                SellerActionsToRelease.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field will be returned if known by eBay. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} expectedReleaseDate
 */
PaymentHold.prototype['expectedReleaseDate'] = undefined;

/**
 * @member {module:model/Amount} holdAmount
 */
PaymentHold.prototype['holdAmount'] = undefined;

/**
 * The reason that the payment is being held. A seller's payment may be held for a number of reasons, including when the seller is new, the seller's level is below standard, or if a return case or 'Significantly not as described' case is pending against the seller. This field is always returned with the <strong>paymentHolds</strong> array.
 * @member {String} holdReason
 */
PaymentHold.prototype['holdReason'] = undefined;

/**
 * The current stage or condition of the hold. This field is always returned with the <strong>paymentHolds</strong> array.<br><br><b>Applicable values:</b><ul><li><code>HELD</code></li><li><code>HELD_PENDING</code></li><li><code>NOT_HELD</code></li><li><code>RELEASE_CONFIRMED</code></li><li><code>RELEASE_FAILED</code></li><li><code>RELEASE_PENDING</code></li><li><code>RELEASED</code></li></ul>
 * @member {String} holdState
 */
PaymentHold.prototype['holdState'] = undefined;

/**
 * The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the seller's payment is actually released into the seller's account.<br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
 * @member {String} releaseDate
 */
PaymentHold.prototype['releaseDate'] = undefined;

/**
 * A list of one or more possible actions that the seller can take to expedite the release of the payment hold.
 * @member {Array.<module:model/SellerActionsToRelease>} sellerActionsToRelease
 */
PaymentHold.prototype['sellerActionsToRelease'] = undefined;






export default PaymentHold;

