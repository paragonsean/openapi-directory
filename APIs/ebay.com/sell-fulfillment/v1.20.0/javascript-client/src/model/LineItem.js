/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import AppliedPromotion from './AppliedPromotion';
import DeliveryCost from './DeliveryCost';
import EbayCollectAndRemitTax from './EbayCollectAndRemitTax';
import EbayCollectedCharges from './EbayCollectedCharges';
import GiftDetails from './GiftDetails';
import ItemLocation from './ItemLocation';
import LineItemFulfillmentInstructions from './LineItemFulfillmentInstructions';
import LineItemProperties from './LineItemProperties';
import LineItemRefund from './LineItemRefund';
import LinkedOrderLineItem from './LinkedOrderLineItem';
import NameValuePair from './NameValuePair';
import Tax from './Tax';

/**
 * The LineItem model module.
 * @module model/LineItem
 * @version v1.20.0
 */
class LineItem {
    /**
     * Constructs a new <code>LineItem</code>.
     * This type contains the details of each line item in an order.
     * @alias module:model/LineItem
     */
    constructor() { 
        
        LineItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineItem} obj Optional instance to populate.
     * @return {module:model/LineItem} The populated <code>LineItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineItem();

            if (data.hasOwnProperty('appliedPromotions')) {
                obj['appliedPromotions'] = ApiClient.convertToType(data['appliedPromotions'], [AppliedPromotion]);
            }
            if (data.hasOwnProperty('deliveryCost')) {
                obj['deliveryCost'] = DeliveryCost.constructFromObject(data['deliveryCost']);
            }
            if (data.hasOwnProperty('discountedLineItemCost')) {
                obj['discountedLineItemCost'] = Amount.constructFromObject(data['discountedLineItemCost']);
            }
            if (data.hasOwnProperty('ebayCollectAndRemitTaxes')) {
                obj['ebayCollectAndRemitTaxes'] = ApiClient.convertToType(data['ebayCollectAndRemitTaxes'], [EbayCollectAndRemitTax]);
            }
            if (data.hasOwnProperty('ebayCollectedCharges')) {
                obj['ebayCollectedCharges'] = EbayCollectedCharges.constructFromObject(data['ebayCollectedCharges']);
            }
            if (data.hasOwnProperty('giftDetails')) {
                obj['giftDetails'] = GiftDetails.constructFromObject(data['giftDetails']);
            }
            if (data.hasOwnProperty('itemLocation')) {
                obj['itemLocation'] = ItemLocation.constructFromObject(data['itemLocation']);
            }
            if (data.hasOwnProperty('legacyItemId')) {
                obj['legacyItemId'] = ApiClient.convertToType(data['legacyItemId'], 'String');
            }
            if (data.hasOwnProperty('legacyVariationId')) {
                obj['legacyVariationId'] = ApiClient.convertToType(data['legacyVariationId'], 'String');
            }
            if (data.hasOwnProperty('lineItemCost')) {
                obj['lineItemCost'] = Amount.constructFromObject(data['lineItemCost']);
            }
            if (data.hasOwnProperty('lineItemFulfillmentInstructions')) {
                obj['lineItemFulfillmentInstructions'] = LineItemFulfillmentInstructions.constructFromObject(data['lineItemFulfillmentInstructions']);
            }
            if (data.hasOwnProperty('lineItemFulfillmentStatus')) {
                obj['lineItemFulfillmentStatus'] = ApiClient.convertToType(data['lineItemFulfillmentStatus'], 'String');
            }
            if (data.hasOwnProperty('lineItemId')) {
                obj['lineItemId'] = ApiClient.convertToType(data['lineItemId'], 'String');
            }
            if (data.hasOwnProperty('linkedOrderLineItems')) {
                obj['linkedOrderLineItems'] = ApiClient.convertToType(data['linkedOrderLineItems'], [LinkedOrderLineItem]);
            }
            if (data.hasOwnProperty('listingMarketplaceId')) {
                obj['listingMarketplaceId'] = ApiClient.convertToType(data['listingMarketplaceId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = LineItemProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('purchaseMarketplaceId')) {
                obj['purchaseMarketplaceId'] = ApiClient.convertToType(data['purchaseMarketplaceId'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [LineItemRefund]);
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('soldFormat')) {
                obj['soldFormat'] = ApiClient.convertToType(data['soldFormat'], 'String');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [Tax]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = Amount.constructFromObject(data['total']);
            }
            if (data.hasOwnProperty('variationAspects')) {
                obj['variationAspects'] = ApiClient.convertToType(data['variationAspects'], [NameValuePair]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineItem</code>.
     */
    static validateJSON(data) {
        if (data['appliedPromotions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appliedPromotions'])) {
                throw new Error("Expected the field `appliedPromotions` to be an array in the JSON data but got " + data['appliedPromotions']);
            }
            // validate the optional field `appliedPromotions` (array)
            for (const item of data['appliedPromotions']) {
                AppliedPromotion.validateJSON(item);
            };
        }
        // validate the optional field `deliveryCost`
        if (data['deliveryCost']) { // data not null
          DeliveryCost.validateJSON(data['deliveryCost']);
        }
        // validate the optional field `discountedLineItemCost`
        if (data['discountedLineItemCost']) { // data not null
          Amount.validateJSON(data['discountedLineItemCost']);
        }
        if (data['ebayCollectAndRemitTaxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ebayCollectAndRemitTaxes'])) {
                throw new Error("Expected the field `ebayCollectAndRemitTaxes` to be an array in the JSON data but got " + data['ebayCollectAndRemitTaxes']);
            }
            // validate the optional field `ebayCollectAndRemitTaxes` (array)
            for (const item of data['ebayCollectAndRemitTaxes']) {
                EbayCollectAndRemitTax.validateJSON(item);
            };
        }
        // validate the optional field `ebayCollectedCharges`
        if (data['ebayCollectedCharges']) { // data not null
          EbayCollectedCharges.validateJSON(data['ebayCollectedCharges']);
        }
        // validate the optional field `giftDetails`
        if (data['giftDetails']) { // data not null
          GiftDetails.validateJSON(data['giftDetails']);
        }
        // validate the optional field `itemLocation`
        if (data['itemLocation']) { // data not null
          ItemLocation.validateJSON(data['itemLocation']);
        }
        // ensure the json data is a string
        if (data['legacyItemId'] && !(typeof data['legacyItemId'] === 'string' || data['legacyItemId'] instanceof String)) {
            throw new Error("Expected the field `legacyItemId` to be a primitive type in the JSON string but got " + data['legacyItemId']);
        }
        // ensure the json data is a string
        if (data['legacyVariationId'] && !(typeof data['legacyVariationId'] === 'string' || data['legacyVariationId'] instanceof String)) {
            throw new Error("Expected the field `legacyVariationId` to be a primitive type in the JSON string but got " + data['legacyVariationId']);
        }
        // validate the optional field `lineItemCost`
        if (data['lineItemCost']) { // data not null
          Amount.validateJSON(data['lineItemCost']);
        }
        // validate the optional field `lineItemFulfillmentInstructions`
        if (data['lineItemFulfillmentInstructions']) { // data not null
          LineItemFulfillmentInstructions.validateJSON(data['lineItemFulfillmentInstructions']);
        }
        // ensure the json data is a string
        if (data['lineItemFulfillmentStatus'] && !(typeof data['lineItemFulfillmentStatus'] === 'string' || data['lineItemFulfillmentStatus'] instanceof String)) {
            throw new Error("Expected the field `lineItemFulfillmentStatus` to be a primitive type in the JSON string but got " + data['lineItemFulfillmentStatus']);
        }
        // ensure the json data is a string
        if (data['lineItemId'] && !(typeof data['lineItemId'] === 'string' || data['lineItemId'] instanceof String)) {
            throw new Error("Expected the field `lineItemId` to be a primitive type in the JSON string but got " + data['lineItemId']);
        }
        if (data['linkedOrderLineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkedOrderLineItems'])) {
                throw new Error("Expected the field `linkedOrderLineItems` to be an array in the JSON data but got " + data['linkedOrderLineItems']);
            }
            // validate the optional field `linkedOrderLineItems` (array)
            for (const item of data['linkedOrderLineItems']) {
                LinkedOrderLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['listingMarketplaceId'] && !(typeof data['listingMarketplaceId'] === 'string' || data['listingMarketplaceId'] instanceof String)) {
            throw new Error("Expected the field `listingMarketplaceId` to be a primitive type in the JSON string but got " + data['listingMarketplaceId']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          LineItemProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['purchaseMarketplaceId'] && !(typeof data['purchaseMarketplaceId'] === 'string' || data['purchaseMarketplaceId'] instanceof String)) {
            throw new Error("Expected the field `purchaseMarketplaceId` to be a primitive type in the JSON string but got " + data['purchaseMarketplaceId']);
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                LineItemRefund.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['soldFormat'] && !(typeof data['soldFormat'] === 'string' || data['soldFormat'] instanceof String)) {
            throw new Error("Expected the field `soldFormat` to be a primitive type in the JSON string but got " + data['soldFormat']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                Tax.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `total`
        if (data['total']) { // data not null
          Amount.validateJSON(data['total']);
        }
        if (data['variationAspects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variationAspects'])) {
                throw new Error("Expected the field `variationAspects` to be an array in the JSON data but got " + data['variationAspects']);
            }
            // validate the optional field `variationAspects` (array)
            for (const item of data['variationAspects']) {
                NameValuePair.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item.
 * @member {Array.<module:model/AppliedPromotion>} appliedPromotions
 */
LineItem.prototype['appliedPromotions'] = undefined;

/**
 * @member {module:model/DeliveryCost} deliveryCost
 */
LineItem.prototype['deliveryCost'] = undefined;

/**
 * @member {module:model/Amount} discountedLineItemCost
 */
LineItem.prototype['discountedLineItemCost'] = undefined;

/**
 * This container will be returned if the order line item is subject to a 'Collect and Remit' tax that eBay will collect and remit to the proper taxing authority on the buyer's behalf.<br><br>'Collect and Remit' tax includes:<ul><li>US state-mandated sales tax</li><li>Federal and Provincial Sales Tax in Canada</li><li>'Goods and Services' tax in Canada, Australia, and New Zealand</li><li>VAT collected for the UK and EU countries</li></ul>The amount of this tax is shown in the <strong>amount</strong> field, and the type of tax is shown in the <strong>taxType</strong> field.<br><br>eBay will display the tax type and amount during checkout in accordance with the buyer's address, and handle collection and remittance of the tax without requiring the seller to take any action.
 * @member {Array.<module:model/EbayCollectAndRemitTax>} ebayCollectAndRemitTaxes
 */
LineItem.prototype['ebayCollectAndRemitTaxes'] = undefined;

/**
 * @member {module:model/EbayCollectedCharges} ebayCollectedCharges
 */
LineItem.prototype['ebayCollectedCharges'] = undefined;

/**
 * @member {module:model/GiftDetails} giftDetails
 */
LineItem.prototype['giftDetails'] = undefined;

/**
 * @member {module:model/ItemLocation} itemLocation
 */
LineItem.prototype['itemLocation'] = undefined;

/**
 * The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the <strong>listingId</strong> instead.
 * @member {String} legacyItemId
 */
LineItem.prototype['legacyItemId'] = undefined;

/**
 * The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing.
 * @member {String} legacyVariationId
 */
LineItem.prototype['legacyVariationId'] = undefined;

/**
 * @member {module:model/Amount} lineItemCost
 */
LineItem.prototype['lineItemCost'] = undefined;

/**
 * @member {module:model/LineItemFulfillmentInstructions} lineItemFulfillmentInstructions
 */
LineItem.prototype['lineItemFulfillmentInstructions'] = undefined;

/**
 * This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:LineItemFulfillmentStatusEnum'>eBay API documentation</a>
 * @member {String} lineItemFulfillmentStatus
 */
LineItem.prototype['lineItemFulfillmentStatus'] = undefined;

/**
 * This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller.
 * @member {String} lineItemId
 */
LineItem.prototype['lineItemId'] = undefined;

/**
 * An array of one or more line items related to the corresponding order, but not a part of that order. Details include the order ID, line item ID, and title of the linked line item, the seller of that item, item specifics, estimated delivery times, and shipment tracking (if available).
 * @member {Array.<module:model/LinkedOrderLineItem>} linkedOrderLineItems
 */
LineItem.prototype['linkedOrderLineItems'] = undefined;

/**
 * The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} listingMarketplaceId
 */
LineItem.prototype['listingMarketplaceId'] = undefined;

/**
 * @member {module:model/LineItemProperties} properties
 */
LineItem.prototype['properties'] = undefined;

/**
 * The unique identifier of the eBay marketplace where the line item was listed. Often, the <strong>listingMarketplaceId</strong> and the <strong>purchaseMarketplaceId</strong> identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
 * @member {String} purchaseMarketplaceId
 */
LineItem.prototype['purchaseMarketplaceId'] = undefined;

/**
 * The number of units of the line item in the order. These are represented as a group by a single <b>lineItemId</b>.
 * @member {Number} quantity
 */
LineItem.prototype['quantity'] = undefined;

/**
 * This array is always returned, but is returned as an empty array unless the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.
 * @member {Array.<module:model/LineItemRefund>} refunds
 */
LineItem.prototype['refunds'] = undefined;

/**
 * Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller's eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model.
 * @member {String} sku
 */
LineItem.prototype['sku'] = undefined;

/**
 * The eBay listing type of the line item. The most common listing types are <code>AUCTION</code> and <code>FIXED_PRICE</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:SoldFormatEnum'>eBay API documentation</a>
 * @member {String} soldFormat
 */
LineItem.prototype['soldFormat'] = undefined;

/**
 * Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item.
 * @member {Array.<module:model/Tax>} taxes
 */
LineItem.prototype['taxes'] = undefined;

/**
 * The title of the listing.
 * @member {String} title
 */
LineItem.prototype['title'] = undefined;

/**
 * @member {module:model/Amount} total
 */
LineItem.prototype['total'] = undefined;

/**
 * An array of aspect name-value pairs that identifies the specific variation of a multi-variation listing. This array can contain multiple name-value pairs, such as <code>color:blue</code> and <code>size:large</code>, and will only be returned for orders created from a multiple-variation listing.
 * @member {Array.<module:model/NameValuePair>} variationAspects
 */
LineItem.prototype['variationAspects'] = undefined;






export default LineItem;

