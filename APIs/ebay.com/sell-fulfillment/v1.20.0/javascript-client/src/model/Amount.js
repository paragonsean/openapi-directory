/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Amount model module.
 * @module model/Amount
 * @version v1.20.0
 */
class Amount {
    /**
     * Constructs a new <code>Amount</code>.
     * This type defines the monetary value of an amount. It can provide the amount in both the currency used on the eBay site where an item is being offered and the conversion of that value into another currency, if applicable.
     * @alias module:model/Amount
     */
    constructor() { 
        
        Amount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Amount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Amount} obj Optional instance to populate.
     * @return {module:model/Amount} The populated <code>Amount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Amount();

            if (data.hasOwnProperty('convertedFromCurrency')) {
                obj['convertedFromCurrency'] = ApiClient.convertToType(data['convertedFromCurrency'], 'String');
            }
            if (data.hasOwnProperty('convertedFromValue')) {
                obj['convertedFromValue'] = ApiClient.convertToType(data['convertedFromValue'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Amount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Amount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['convertedFromCurrency'] && !(typeof data['convertedFromCurrency'] === 'string' || data['convertedFromCurrency'] instanceof String)) {
            throw new Error("Expected the field `convertedFromCurrency` to be a primitive type in the JSON string but got " + data['convertedFromCurrency']);
        }
        // ensure the json data is a string
        if (data['convertedFromValue'] && !(typeof data['convertedFromValue'] === 'string' || data['convertedFromValue'] instanceof String)) {
            throw new Error("Expected the field `convertedFromValue` to be a primitive type in the JSON string but got " + data['convertedFromValue']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * A three-letter ISO 4217 code that indicates the currency of the amount in the <b>convertedFromValue</b> field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>
 * @member {String} convertedFromCurrency
 */
Amount.prototype['convertedFromCurrency'] = undefined;

/**
 * The monetary amount before any conversion is performed, in the currency specified by the <b>convertedFromCurrency</b> field. This value is required or returned only if currency conversion/localization is required. The <b>value</b> field contains the converted amount of this value, in the currency specified by the <b>currency</b> field.
 * @member {String} convertedFromValue
 */
Amount.prototype['convertedFromValue'] = undefined;

/**
 * A three-letter ISO 4217 code that indicates the currency of the amount in the <b>value</b> field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the <b>value</b> field.<br><br><b>Default:</b> The default currency of the eBay marketplace that hosts the listing. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>
 * @member {String} currency
 */
Amount.prototype['currency'] = undefined;

/**
 * The monetary amount, in the currency specified by the <b>currency</b> field. If currency conversion/localization is required, this value is the converted amount, and the <b>convertedFromValue</b> field contains the amount in the original currency.  <br><br><i>Required in</i> the <b>amount</b> type.
 * @member {String} value
 */
Amount.prototype['value'] = undefined;






export default Amount;

