/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NameValuePair from './NameValuePair';
import TrackingInfo from './TrackingInfo';

/**
 * The LinkedOrderLineItem model module.
 * @module model/LinkedOrderLineItem
 * @version v1.20.0
 */
class LinkedOrderLineItem {
    /**
     * Constructs a new <code>LinkedOrderLineItem</code>.
     * This type contains data on a line item that is related to, but not a part of the order.
     * @alias module:model/LinkedOrderLineItem
     */
    constructor() { 
        
        LinkedOrderLineItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkedOrderLineItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkedOrderLineItem} obj Optional instance to populate.
     * @return {module:model/LinkedOrderLineItem} The populated <code>LinkedOrderLineItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkedOrderLineItem();

            if (data.hasOwnProperty('lineItemAspects')) {
                obj['lineItemAspects'] = ApiClient.convertToType(data['lineItemAspects'], [NameValuePair]);
            }
            if (data.hasOwnProperty('lineItemId')) {
                obj['lineItemId'] = ApiClient.convertToType(data['lineItemId'], 'String');
            }
            if (data.hasOwnProperty('maxEstimatedDeliveryDate')) {
                obj['maxEstimatedDeliveryDate'] = ApiClient.convertToType(data['maxEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('minEstimatedDeliveryDate')) {
                obj['minEstimatedDeliveryDate'] = ApiClient.convertToType(data['minEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('sellerId')) {
                obj['sellerId'] = ApiClient.convertToType(data['sellerId'], 'String');
            }
            if (data.hasOwnProperty('shipments')) {
                obj['shipments'] = ApiClient.convertToType(data['shipments'], [TrackingInfo]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkedOrderLineItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkedOrderLineItem</code>.
     */
    static validateJSON(data) {
        if (data['lineItemAspects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItemAspects'])) {
                throw new Error("Expected the field `lineItemAspects` to be an array in the JSON data but got " + data['lineItemAspects']);
            }
            // validate the optional field `lineItemAspects` (array)
            for (const item of data['lineItemAspects']) {
                NameValuePair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lineItemId'] && !(typeof data['lineItemId'] === 'string' || data['lineItemId'] instanceof String)) {
            throw new Error("Expected the field `lineItemId` to be a primitive type in the JSON string but got " + data['lineItemId']);
        }
        // ensure the json data is a string
        if (data['maxEstimatedDeliveryDate'] && !(typeof data['maxEstimatedDeliveryDate'] === 'string' || data['maxEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['maxEstimatedDeliveryDate']);
        }
        // ensure the json data is a string
        if (data['minEstimatedDeliveryDate'] && !(typeof data['minEstimatedDeliveryDate'] === 'string' || data['minEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['minEstimatedDeliveryDate']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['sellerId'] && !(typeof data['sellerId'] === 'string' || data['sellerId'] instanceof String)) {
            throw new Error("Expected the field `sellerId` to be a primitive type in the JSON string but got " + data['sellerId']);
        }
        if (data['shipments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipments'])) {
                throw new Error("Expected the field `shipments` to be an array in the JSON data but got " + data['shipments']);
            }
            // validate the optional field `shipments` (array)
            for (const item of data['shipments']) {
                TrackingInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * This array contains the complete set of items aspects for the linked line item. For example:<br><pre>\"lineItemAspects\": [<br>    {<br>        \"name\": \"Tire Type\",<br>        \"value\": \"All Season\"<br>    },<br><br>    ...<br> <br>    {<br>        \"name\": \"Car Type\",<br>        \"value\": \"Performance\"<br>    }<br>]</pre><span class=\"tablenote\"><strong>Note:</strong> All item specifics for the listing are returned. The name/value pairs returned are in the language of the linked line item's listing site, which may vary from the seller's language.</span>
 * @member {Array.<module:model/NameValuePair>} lineItemAspects
 */
LinkedOrderLineItem.prototype['lineItemAspects'] = undefined;

/**
 * The unique identifier of the linked order line item.
 * @member {String} lineItemId
 */
LinkedOrderLineItem.prototype['lineItemId'] = undefined;

/**
 * The end of the date range in which the linked line item is expected to be delivered to the shipping address.
 * @member {String} maxEstimatedDeliveryDate
 */
LinkedOrderLineItem.prototype['maxEstimatedDeliveryDate'] = undefined;

/**
 * The beginning of the date range in which the linked line item is expected to be delivered to the shipping address.
 * @member {String} minEstimatedDeliveryDate
 */
LinkedOrderLineItem.prototype['minEstimatedDeliveryDate'] = undefined;

/**
 * The unique identifier of the order to which the linked line item belongs.
 * @member {String} orderId
 */
LinkedOrderLineItem.prototype['orderId'] = undefined;

/**
 * The eBay user ID of the seller who sold the linked line item. For example, the user ID of the tire seller.
 * @member {String} sellerId
 */
LinkedOrderLineItem.prototype['sellerId'] = undefined;

/**
 * An array containing any shipment tracking information available for the linked line item.
 * @member {Array.<module:model/TrackingInfo>} shipments
 */
LinkedOrderLineItem.prototype['shipments'] = undefined;

/**
 * The listing title of the linked line item.
 * @member {String} title
 */
LinkedOrderLineItem.prototype['title'] = undefined;






export default LinkedOrderLineItem;

