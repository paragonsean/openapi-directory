/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Phone from './Phone';

/**
 * The ReturnAddress model module.
 * @module model/ReturnAddress
 * @version v1.20.0
 */
class ReturnAddress {
    /**
     * Constructs a new <code>ReturnAddress</code>.
     * This type is used by the payment dispute methods, and is relevant if the buyer will be returning the item to the seller.
     * @alias module:model/ReturnAddress
     */
    constructor() { 
        
        ReturnAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnAddress} obj Optional instance to populate.
     * @return {module:model/ReturnAddress} The populated <code>ReturnAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnAddress();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('addressLine2')) {
                obj['addressLine2'] = ApiClient.convertToType(data['addressLine2'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('primaryPhone')) {
                obj['primaryPhone'] = Phone.constructFromObject(data['primaryPhone']);
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['addressLine2'] && !(typeof data['addressLine2'] === 'string' || data['addressLine2'] instanceof String)) {
            throw new Error("Expected the field `addressLine2` to be a primitive type in the JSON string but got " + data['addressLine2']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // validate the optional field `primaryPhone`
        if (data['primaryPhone']) { // data not null
          Phone.validateJSON(data['primaryPhone']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }

        return true;
    }


}



/**
 * The first line of the street address.
 * @member {String} addressLine1
 */
ReturnAddress.prototype['addressLine1'] = undefined;

/**
 * The second line of the street address. This line is not always necessarily, but is often used for apartment number or suite number, or other relevant information that can not fit on the first line.
 * @member {String} addressLine2
 */
ReturnAddress.prototype['addressLine2'] = undefined;

/**
 * The city of the return address.
 * @member {String} city
 */
ReturnAddress.prototype['city'] = undefined;

/**
 * The country's two-digt, ISO 3166-1 country code. See the enumeration type for a country's value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CountryCodeEnum'>eBay API documentation</a>
 * @member {String} country
 */
ReturnAddress.prototype['country'] = undefined;

/**
 * The county of the return address. Counties are not applicable to all countries.
 * @member {String} county
 */
ReturnAddress.prototype['county'] = undefined;

/**
 * The full name of return address owner.
 * @member {String} fullName
 */
ReturnAddress.prototype['fullName'] = undefined;

/**
 * The postal code of the return address.
 * @member {String} postalCode
 */
ReturnAddress.prototype['postalCode'] = undefined;

/**
 * @member {module:model/Phone} primaryPhone
 */
ReturnAddress.prototype['primaryPhone'] = undefined;

/**
 * The state or province of the return address.
 * @member {String} stateOrProvince
 */
ReturnAddress.prototype['stateOrProvince'] = undefined;






export default ReturnAddress;

