/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LegacyReference model module.
 * @module model/LegacyReference
 * @version v1.20.0
 */
class LegacyReference {
    /**
     * Constructs a new <code>LegacyReference</code>.
     * Type defining the &lt;b&gt;legacyReference&lt;/b&gt; container. This container is needed if the seller is issuing a refund for an individual order line item, and wishes to use an item ID and transaction ID to identify the order line item.
     * @alias module:model/LegacyReference
     */
    constructor() { 
        
        LegacyReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegacyReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegacyReference} obj Optional instance to populate.
     * @return {module:model/LegacyReference} The populated <code>LegacyReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegacyReference();

            if (data.hasOwnProperty('legacyItemId')) {
                obj['legacyItemId'] = ApiClient.convertToType(data['legacyItemId'], 'String');
            }
            if (data.hasOwnProperty('legacyTransactionId')) {
                obj['legacyTransactionId'] = ApiClient.convertToType(data['legacyTransactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegacyReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegacyReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['legacyItemId'] && !(typeof data['legacyItemId'] === 'string' || data['legacyItemId'] instanceof String)) {
            throw new Error("Expected the field `legacyItemId` to be a primitive type in the JSON string but got " + data['legacyItemId']);
        }
        // ensure the json data is a string
        if (data['legacyTransactionId'] && !(typeof data['legacyTransactionId'] === 'string' || data['legacyTransactionId'] instanceof String)) {
            throw new Error("Expected the field `legacyTransactionId` to be a primitive type in the JSON string but got " + data['legacyTransactionId']);
        }

        return true;
    }


}



/**
 * The unique identifier of a listing in legacy/Trading API format. <br><br><span class=\"tablenote\"><strong>Note:</strong> Both <b>legacyItemId</b> and <b>legacyTransactionId</b> are needed to identify an order line item. </span>
 * @member {String} legacyItemId
 */
LegacyReference.prototype['legacyItemId'] = undefined;

/**
 * The unique identifier of a sale/transaction in legacy/Trading API format. A 'transaction ID' is created once a buyer purchases a 'Buy It Now' item or if an auction listing ends with a winning bidder. <br><br><span class=\"tablenote\"><strong>Note:</strong> Both <b>legacyItemId</b> and <b>legacyTransactionId</b> are needed to identify an order line item. </span>
 * @member {String} legacyTransactionId
 */
LegacyReference.prototype['legacyTransactionId'] = undefined;






export default LegacyReference;

