/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackingInfo from './TrackingInfo';

/**
 * The InfoFromBuyer model module.
 * @module model/InfoFromBuyer
 * @version v1.20.0
 */
class InfoFromBuyer {
    /**
     * Constructs a new <code>InfoFromBuyer</code>.
     * This container is returned if the buyer is returning one or more line items in an order that is associated with the payment dispute, and that buyer has provided return shipping tracking information and/or a note about the return.
     * @alias module:model/InfoFromBuyer
     */
    constructor() { 
        
        InfoFromBuyer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InfoFromBuyer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InfoFromBuyer} obj Optional instance to populate.
     * @return {module:model/InfoFromBuyer} The populated <code>InfoFromBuyer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InfoFromBuyer();

            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('returnShipmentTracking')) {
                obj['returnShipmentTracking'] = ApiClient.convertToType(data['returnShipmentTracking'], [TrackingInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InfoFromBuyer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InfoFromBuyer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        if (data['returnShipmentTracking']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['returnShipmentTracking'])) {
                throw new Error("Expected the field `returnShipmentTracking` to be an array in the JSON data but got " + data['returnShipmentTracking']);
            }
            // validate the optional field `returnShipmentTracking` (array)
            for (const item of data['returnShipmentTracking']) {
                TrackingInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This field shows any note that was left by the buyer in regard to the dispute.
 * @member {String} note
 */
InfoFromBuyer.prototype['note'] = undefined;

/**
 * This array shows shipment tracking information for one or more shipping packages being returned to the buyer after a payment dispute.
 * @member {Array.<module:model/TrackingInfo>} returnShipmentTracking
 */
InfoFromBuyer.prototype['returnShipmentTracking'] = undefined;






export default InfoFromBuyer;

