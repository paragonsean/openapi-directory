/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingFulfillmentPagedCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingFulfillmentPagedCollection::OAIShippingFulfillmentPagedCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingFulfillmentPagedCollection::OAIShippingFulfillmentPagedCollection() {
    this->initializeModel();
}

OAIShippingFulfillmentPagedCollection::~OAIShippingFulfillmentPagedCollection() {}

void OAIShippingFulfillmentPagedCollection::initializeModel() {

    m_fulfillments_isSet = false;
    m_fulfillments_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIShippingFulfillmentPagedCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingFulfillmentPagedCollection::fromJsonObject(QJsonObject json) {

    m_fulfillments_isValid = ::OpenAPI::fromJsonValue(m_fulfillments, json[QString("fulfillments")]);
    m_fulfillments_isSet = !json[QString("fulfillments")].isNull() && m_fulfillments_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIShippingFulfillmentPagedCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingFulfillmentPagedCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_fulfillments.size() > 0) {
        obj.insert(QString("fulfillments"), ::OpenAPI::toJsonValue(m_fulfillments));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIShippingFulfillment> OAIShippingFulfillmentPagedCollection::getFulfillments() const {
    return m_fulfillments;
}
void OAIShippingFulfillmentPagedCollection::setFulfillments(const QList<OAIShippingFulfillment> &fulfillments) {
    m_fulfillments = fulfillments;
    m_fulfillments_isSet = true;
}

bool OAIShippingFulfillmentPagedCollection::is_fulfillments_Set() const{
    return m_fulfillments_isSet;
}

bool OAIShippingFulfillmentPagedCollection::is_fulfillments_Valid() const{
    return m_fulfillments_isValid;
}

qint32 OAIShippingFulfillmentPagedCollection::getTotal() const {
    return m_total;
}
void OAIShippingFulfillmentPagedCollection::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIShippingFulfillmentPagedCollection::is_total_Set() const{
    return m_total_isSet;
}

bool OAIShippingFulfillmentPagedCollection::is_total_Valid() const{
    return m_total_isValid;
}

QList<OAIError> OAIShippingFulfillmentPagedCollection::getWarnings() const {
    return m_warnings;
}
void OAIShippingFulfillmentPagedCollection::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIShippingFulfillmentPagedCollection::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIShippingFulfillmentPagedCollection::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIShippingFulfillmentPagedCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fulfillments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingFulfillmentPagedCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
