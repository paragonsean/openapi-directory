/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueRefundRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueRefundRequest::OAIIssueRefundRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueRefundRequest::OAIIssueRefundRequest() {
    this->initializeModel();
}

OAIIssueRefundRequest::~OAIIssueRefundRequest() {}

void OAIIssueRefundRequest::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_order_level_refund_amount_isSet = false;
    m_order_level_refund_amount_isValid = false;

    m_reason_for_refund_isSet = false;
    m_reason_for_refund_isValid = false;

    m_refund_items_isSet = false;
    m_refund_items_isValid = false;
}

void OAIIssueRefundRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueRefundRequest::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_order_level_refund_amount_isValid = ::OpenAPI::fromJsonValue(m_order_level_refund_amount, json[QString("orderLevelRefundAmount")]);
    m_order_level_refund_amount_isSet = !json[QString("orderLevelRefundAmount")].isNull() && m_order_level_refund_amount_isValid;

    m_reason_for_refund_isValid = ::OpenAPI::fromJsonValue(m_reason_for_refund, json[QString("reasonForRefund")]);
    m_reason_for_refund_isSet = !json[QString("reasonForRefund")].isNull() && m_reason_for_refund_isValid;

    m_refund_items_isValid = ::OpenAPI::fromJsonValue(m_refund_items, json[QString("refundItems")]);
    m_refund_items_isSet = !json[QString("refundItems")].isNull() && m_refund_items_isValid;
}

QString OAIIssueRefundRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueRefundRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_order_level_refund_amount.isSet()) {
        obj.insert(QString("orderLevelRefundAmount"), ::OpenAPI::toJsonValue(m_order_level_refund_amount));
    }
    if (m_reason_for_refund_isSet) {
        obj.insert(QString("reasonForRefund"), ::OpenAPI::toJsonValue(m_reason_for_refund));
    }
    if (m_refund_items.size() > 0) {
        obj.insert(QString("refundItems"), ::OpenAPI::toJsonValue(m_refund_items));
    }
    return obj;
}

QString OAIIssueRefundRequest::getComment() const {
    return m_comment;
}
void OAIIssueRefundRequest::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIIssueRefundRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIIssueRefundRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

OAISimpleAmount OAIIssueRefundRequest::getOrderLevelRefundAmount() const {
    return m_order_level_refund_amount;
}
void OAIIssueRefundRequest::setOrderLevelRefundAmount(const OAISimpleAmount &order_level_refund_amount) {
    m_order_level_refund_amount = order_level_refund_amount;
    m_order_level_refund_amount_isSet = true;
}

bool OAIIssueRefundRequest::is_order_level_refund_amount_Set() const{
    return m_order_level_refund_amount_isSet;
}

bool OAIIssueRefundRequest::is_order_level_refund_amount_Valid() const{
    return m_order_level_refund_amount_isValid;
}

QString OAIIssueRefundRequest::getReasonForRefund() const {
    return m_reason_for_refund;
}
void OAIIssueRefundRequest::setReasonForRefund(const QString &reason_for_refund) {
    m_reason_for_refund = reason_for_refund;
    m_reason_for_refund_isSet = true;
}

bool OAIIssueRefundRequest::is_reason_for_refund_Set() const{
    return m_reason_for_refund_isSet;
}

bool OAIIssueRefundRequest::is_reason_for_refund_Valid() const{
    return m_reason_for_refund_isValid;
}

QList<OAIRefundItem> OAIIssueRefundRequest::getRefundItems() const {
    return m_refund_items;
}
void OAIIssueRefundRequest::setRefundItems(const QList<OAIRefundItem> &refund_items) {
    m_refund_items = refund_items;
    m_refund_items_isSet = true;
}

bool OAIIssueRefundRequest::is_refund_items_Set() const{
    return m_refund_items_isSet;
}

bool OAIIssueRefundRequest::is_refund_items_Valid() const{
    return m_refund_items_isValid;
}

bool OAIIssueRefundRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_level_refund_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueRefundRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
