/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContestPaymentDisputeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContestPaymentDisputeRequest::OAIContestPaymentDisputeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContestPaymentDisputeRequest::OAIContestPaymentDisputeRequest() {
    this->initializeModel();
}

OAIContestPaymentDisputeRequest::~OAIContestPaymentDisputeRequest() {}

void OAIContestPaymentDisputeRequest::initializeModel() {

    m_note_isSet = false;
    m_note_isValid = false;

    m_return_address_isSet = false;
    m_return_address_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIContestPaymentDisputeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContestPaymentDisputeRequest::fromJsonObject(QJsonObject json) {

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_return_address_isValid = ::OpenAPI::fromJsonValue(m_return_address, json[QString("returnAddress")]);
    m_return_address_isSet = !json[QString("returnAddress")].isNull() && m_return_address_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIContestPaymentDisputeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContestPaymentDisputeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_return_address.isSet()) {
        obj.insert(QString("returnAddress"), ::OpenAPI::toJsonValue(m_return_address));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

QString OAIContestPaymentDisputeRequest::getNote() const {
    return m_note;
}
void OAIContestPaymentDisputeRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIContestPaymentDisputeRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAIContestPaymentDisputeRequest::is_note_Valid() const{
    return m_note_isValid;
}

OAIReturnAddress OAIContestPaymentDisputeRequest::getReturnAddress() const {
    return m_return_address;
}
void OAIContestPaymentDisputeRequest::setReturnAddress(const OAIReturnAddress &return_address) {
    m_return_address = return_address;
    m_return_address_isSet = true;
}

bool OAIContestPaymentDisputeRequest::is_return_address_Set() const{
    return m_return_address_isSet;
}

bool OAIContestPaymentDisputeRequest::is_return_address_Valid() const{
    return m_return_address_isValid;
}

qint32 OAIContestPaymentDisputeRequest::getRevision() const {
    return m_revision;
}
void OAIContestPaymentDisputeRequest::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIContestPaymentDisputeRequest::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIContestPaymentDisputeRequest::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIContestPaymentDisputeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContestPaymentDisputeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
