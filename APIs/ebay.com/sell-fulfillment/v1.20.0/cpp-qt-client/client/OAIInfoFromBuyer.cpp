/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfoFromBuyer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfoFromBuyer::OAIInfoFromBuyer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfoFromBuyer::OAIInfoFromBuyer() {
    this->initializeModel();
}

OAIInfoFromBuyer::~OAIInfoFromBuyer() {}

void OAIInfoFromBuyer::initializeModel() {

    m_note_isSet = false;
    m_note_isValid = false;

    m_return_shipment_tracking_isSet = false;
    m_return_shipment_tracking_isValid = false;
}

void OAIInfoFromBuyer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfoFromBuyer::fromJsonObject(QJsonObject json) {

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_return_shipment_tracking_isValid = ::OpenAPI::fromJsonValue(m_return_shipment_tracking, json[QString("returnShipmentTracking")]);
    m_return_shipment_tracking_isSet = !json[QString("returnShipmentTracking")].isNull() && m_return_shipment_tracking_isValid;
}

QString OAIInfoFromBuyer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfoFromBuyer::asJsonObject() const {
    QJsonObject obj;
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_return_shipment_tracking.size() > 0) {
        obj.insert(QString("returnShipmentTracking"), ::OpenAPI::toJsonValue(m_return_shipment_tracking));
    }
    return obj;
}

QString OAIInfoFromBuyer::getNote() const {
    return m_note;
}
void OAIInfoFromBuyer::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIInfoFromBuyer::is_note_Set() const{
    return m_note_isSet;
}

bool OAIInfoFromBuyer::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAITrackingInfo> OAIInfoFromBuyer::getReturnShipmentTracking() const {
    return m_return_shipment_tracking;
}
void OAIInfoFromBuyer::setReturnShipmentTracking(const QList<OAITrackingInfo> &return_shipment_tracking) {
    m_return_shipment_tracking = return_shipment_tracking;
    m_return_shipment_tracking_isSet = true;
}

bool OAIInfoFromBuyer::is_return_shipment_tracking_Set() const{
    return m_return_shipment_tracking_isSet;
}

bool OAIInfoFromBuyer::is_return_shipment_tracking_Valid() const{
    return m_return_shipment_tracking_isValid;
}

bool OAIInfoFromBuyer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipment_tracking.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfoFromBuyer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
