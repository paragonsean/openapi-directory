/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrderSearchPagedCollection.h
 *
 * This type contains the specifications for the collection of orders that match the search or filter criteria of a &lt;b&gt;getOrders&lt;/b&gt; call. The collection is grouped into a result set, and based on the query parameters that are set (including the &lt;strong&gt;limit&lt;/strong&gt; and &lt;strong&gt;offset&lt;/strong&gt; parameters), the result set may included multiple pages, but only one page of the result set can be viewed at a time.
 */

#ifndef OAIOrderSearchPagedCollection_H
#define OAIOrderSearchPagedCollection_H

#include <QJsonObject>

#include "OAIError.h"
#include "OAIOrder.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrder;
class OAIError;

class OAIOrderSearchPagedCollection : public OAIObject {
public:
    OAIOrderSearchPagedCollection();
    OAIOrderSearchPagedCollection(QString json);
    ~OAIOrderSearchPagedCollection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    QString getNext() const;
    void setNext(const QString &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<OAIOrder> getOrders() const;
    void setOrders(const QList<OAIOrder> &orders);
    bool is_orders_Set() const;
    bool is_orders_Valid() const;

    QString getPrev() const;
    void setPrev(const QString &prev);
    bool is_prev_Set() const;
    bool is_prev_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    QList<OAIError> getWarnings() const;
    void setWarnings(const QList<OAIError> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    QString m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<OAIOrder> m_orders;
    bool m_orders_isSet;
    bool m_orders_isValid;

    QString m_prev;
    bool m_prev_isSet;
    bool m_prev_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    QList<OAIError> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrderSearchPagedCollection)

#endif // OAIOrderSearchPagedCollection_H
