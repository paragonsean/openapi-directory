/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegacyReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegacyReference::OAILegacyReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegacyReference::OAILegacyReference() {
    this->initializeModel();
}

OAILegacyReference::~OAILegacyReference() {}

void OAILegacyReference::initializeModel() {

    m_legacy_item_id_isSet = false;
    m_legacy_item_id_isValid = false;

    m_legacy_transaction_id_isSet = false;
    m_legacy_transaction_id_isValid = false;
}

void OAILegacyReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegacyReference::fromJsonObject(QJsonObject json) {

    m_legacy_item_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_item_id, json[QString("legacyItemId")]);
    m_legacy_item_id_isSet = !json[QString("legacyItemId")].isNull() && m_legacy_item_id_isValid;

    m_legacy_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_transaction_id, json[QString("legacyTransactionId")]);
    m_legacy_transaction_id_isSet = !json[QString("legacyTransactionId")].isNull() && m_legacy_transaction_id_isValid;
}

QString OAILegacyReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegacyReference::asJsonObject() const {
    QJsonObject obj;
    if (m_legacy_item_id_isSet) {
        obj.insert(QString("legacyItemId"), ::OpenAPI::toJsonValue(m_legacy_item_id));
    }
    if (m_legacy_transaction_id_isSet) {
        obj.insert(QString("legacyTransactionId"), ::OpenAPI::toJsonValue(m_legacy_transaction_id));
    }
    return obj;
}

QString OAILegacyReference::getLegacyItemId() const {
    return m_legacy_item_id;
}
void OAILegacyReference::setLegacyItemId(const QString &legacy_item_id) {
    m_legacy_item_id = legacy_item_id;
    m_legacy_item_id_isSet = true;
}

bool OAILegacyReference::is_legacy_item_id_Set() const{
    return m_legacy_item_id_isSet;
}

bool OAILegacyReference::is_legacy_item_id_Valid() const{
    return m_legacy_item_id_isValid;
}

QString OAILegacyReference::getLegacyTransactionId() const {
    return m_legacy_transaction_id;
}
void OAILegacyReference::setLegacyTransactionId(const QString &legacy_transaction_id) {
    m_legacy_transaction_id = legacy_transaction_id;
    m_legacy_transaction_id_isSet = true;
}

bool OAILegacyReference::is_legacy_transaction_id_Set() const{
    return m_legacy_transaction_id_isSet;
}

bool OAILegacyReference::is_legacy_transaction_id_Valid() const{
    return m_legacy_transaction_id_isValid;
}

bool OAILegacyReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_legacy_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegacyReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
