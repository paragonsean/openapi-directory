/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddEvidencePaymentDisputeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddEvidencePaymentDisputeResponse::OAIAddEvidencePaymentDisputeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddEvidencePaymentDisputeResponse::OAIAddEvidencePaymentDisputeResponse() {
    this->initializeModel();
}

OAIAddEvidencePaymentDisputeResponse::~OAIAddEvidencePaymentDisputeResponse() {}

void OAIAddEvidencePaymentDisputeResponse::initializeModel() {

    m_evidence_id_isSet = false;
    m_evidence_id_isValid = false;
}

void OAIAddEvidencePaymentDisputeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddEvidencePaymentDisputeResponse::fromJsonObject(QJsonObject json) {

    m_evidence_id_isValid = ::OpenAPI::fromJsonValue(m_evidence_id, json[QString("evidenceId")]);
    m_evidence_id_isSet = !json[QString("evidenceId")].isNull() && m_evidence_id_isValid;
}

QString OAIAddEvidencePaymentDisputeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddEvidencePaymentDisputeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_id_isSet) {
        obj.insert(QString("evidenceId"), ::OpenAPI::toJsonValue(m_evidence_id));
    }
    return obj;
}

QString OAIAddEvidencePaymentDisputeResponse::getEvidenceId() const {
    return m_evidence_id;
}
void OAIAddEvidencePaymentDisputeResponse::setEvidenceId(const QString &evidence_id) {
    m_evidence_id = evidence_id;
    m_evidence_id_isSet = true;
}

bool OAIAddEvidencePaymentDisputeResponse::is_evidence_id_Set() const{
    return m_evidence_id_isSet;
}

bool OAIAddEvidencePaymentDisputeResponse::is_evidence_id_Valid() const{
    return m_evidence_id_isValid;
}

bool OAIAddEvidencePaymentDisputeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddEvidencePaymentDisputeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
