/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelRequest::OAICancelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelRequest::OAICancelRequest() {
    this->initializeModel();
}

OAICancelRequest::~OAICancelRequest() {}

void OAICancelRequest::initializeModel() {

    m_cancel_completed_date_isSet = false;
    m_cancel_completed_date_isValid = false;

    m_cancel_initiator_isSet = false;
    m_cancel_initiator_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_cancel_request_id_isSet = false;
    m_cancel_request_id_isValid = false;

    m_cancel_request_state_isSet = false;
    m_cancel_request_state_isValid = false;

    m_cancel_requested_date_isSet = false;
    m_cancel_requested_date_isValid = false;
}

void OAICancelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelRequest::fromJsonObject(QJsonObject json) {

    m_cancel_completed_date_isValid = ::OpenAPI::fromJsonValue(m_cancel_completed_date, json[QString("cancelCompletedDate")]);
    m_cancel_completed_date_isSet = !json[QString("cancelCompletedDate")].isNull() && m_cancel_completed_date_isValid;

    m_cancel_initiator_isValid = ::OpenAPI::fromJsonValue(m_cancel_initiator, json[QString("cancelInitiator")]);
    m_cancel_initiator_isSet = !json[QString("cancelInitiator")].isNull() && m_cancel_initiator_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancelReason")]);
    m_cancel_reason_isSet = !json[QString("cancelReason")].isNull() && m_cancel_reason_isValid;

    m_cancel_request_id_isValid = ::OpenAPI::fromJsonValue(m_cancel_request_id, json[QString("cancelRequestId")]);
    m_cancel_request_id_isSet = !json[QString("cancelRequestId")].isNull() && m_cancel_request_id_isValid;

    m_cancel_request_state_isValid = ::OpenAPI::fromJsonValue(m_cancel_request_state, json[QString("cancelRequestState")]);
    m_cancel_request_state_isSet = !json[QString("cancelRequestState")].isNull() && m_cancel_request_state_isValid;

    m_cancel_requested_date_isValid = ::OpenAPI::fromJsonValue(m_cancel_requested_date, json[QString("cancelRequestedDate")]);
    m_cancel_requested_date_isSet = !json[QString("cancelRequestedDate")].isNull() && m_cancel_requested_date_isValid;
}

QString OAICancelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel_completed_date_isSet) {
        obj.insert(QString("cancelCompletedDate"), ::OpenAPI::toJsonValue(m_cancel_completed_date));
    }
    if (m_cancel_initiator_isSet) {
        obj.insert(QString("cancelInitiator"), ::OpenAPI::toJsonValue(m_cancel_initiator));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancelReason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_cancel_request_id_isSet) {
        obj.insert(QString("cancelRequestId"), ::OpenAPI::toJsonValue(m_cancel_request_id));
    }
    if (m_cancel_request_state_isSet) {
        obj.insert(QString("cancelRequestState"), ::OpenAPI::toJsonValue(m_cancel_request_state));
    }
    if (m_cancel_requested_date_isSet) {
        obj.insert(QString("cancelRequestedDate"), ::OpenAPI::toJsonValue(m_cancel_requested_date));
    }
    return obj;
}

QString OAICancelRequest::getCancelCompletedDate() const {
    return m_cancel_completed_date;
}
void OAICancelRequest::setCancelCompletedDate(const QString &cancel_completed_date) {
    m_cancel_completed_date = cancel_completed_date;
    m_cancel_completed_date_isSet = true;
}

bool OAICancelRequest::is_cancel_completed_date_Set() const{
    return m_cancel_completed_date_isSet;
}

bool OAICancelRequest::is_cancel_completed_date_Valid() const{
    return m_cancel_completed_date_isValid;
}

QString OAICancelRequest::getCancelInitiator() const {
    return m_cancel_initiator;
}
void OAICancelRequest::setCancelInitiator(const QString &cancel_initiator) {
    m_cancel_initiator = cancel_initiator;
    m_cancel_initiator_isSet = true;
}

bool OAICancelRequest::is_cancel_initiator_Set() const{
    return m_cancel_initiator_isSet;
}

bool OAICancelRequest::is_cancel_initiator_Valid() const{
    return m_cancel_initiator_isValid;
}

QString OAICancelRequest::getCancelReason() const {
    return m_cancel_reason;
}
void OAICancelRequest::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAICancelRequest::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAICancelRequest::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

QString OAICancelRequest::getCancelRequestId() const {
    return m_cancel_request_id;
}
void OAICancelRequest::setCancelRequestId(const QString &cancel_request_id) {
    m_cancel_request_id = cancel_request_id;
    m_cancel_request_id_isSet = true;
}

bool OAICancelRequest::is_cancel_request_id_Set() const{
    return m_cancel_request_id_isSet;
}

bool OAICancelRequest::is_cancel_request_id_Valid() const{
    return m_cancel_request_id_isValid;
}

QString OAICancelRequest::getCancelRequestState() const {
    return m_cancel_request_state;
}
void OAICancelRequest::setCancelRequestState(const QString &cancel_request_state) {
    m_cancel_request_state = cancel_request_state;
    m_cancel_request_state_isSet = true;
}

bool OAICancelRequest::is_cancel_request_state_Set() const{
    return m_cancel_request_state_isSet;
}

bool OAICancelRequest::is_cancel_request_state_Valid() const{
    return m_cancel_request_state_isValid;
}

QString OAICancelRequest::getCancelRequestedDate() const {
    return m_cancel_requested_date;
}
void OAICancelRequest::setCancelRequestedDate(const QString &cancel_requested_date) {
    m_cancel_requested_date = cancel_requested_date;
    m_cancel_requested_date_isSet = true;
}

bool OAICancelRequest::is_cancel_requested_date_Set() const{
    return m_cancel_requested_date_isSet;
}

bool OAICancelRequest::is_cancel_requested_date_Valid() const{
    return m_cancel_requested_date_isValid;
}

bool OAICancelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel_completed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_request_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_requested_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
