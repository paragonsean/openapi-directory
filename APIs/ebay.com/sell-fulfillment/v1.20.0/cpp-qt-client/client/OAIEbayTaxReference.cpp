/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEbayTaxReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEbayTaxReference::OAIEbayTaxReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEbayTaxReference::OAIEbayTaxReference() {
    this->initializeModel();
}

OAIEbayTaxReference::~OAIEbayTaxReference() {}

void OAIEbayTaxReference::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEbayTaxReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEbayTaxReference::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIEbayTaxReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEbayTaxReference::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIEbayTaxReference::getName() const {
    return m_name;
}
void OAIEbayTaxReference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEbayTaxReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEbayTaxReference::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEbayTaxReference::getValue() const {
    return m_value;
}
void OAIEbayTaxReference::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEbayTaxReference::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEbayTaxReference::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEbayTaxReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEbayTaxReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
