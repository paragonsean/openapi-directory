/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment::OAIPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment::OAIPayment() {
    this->initializeModel();
}

OAIPayment::~OAIPayment() {}

void OAIPayment::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_payment_holds_isSet = false;
    m_payment_holds_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_reference_id_isSet = false;
    m_payment_reference_id_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;
}

void OAIPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("paymentDate")]);
    m_payment_date_isSet = !json[QString("paymentDate")].isNull() && m_payment_date_isValid;

    m_payment_holds_isValid = ::OpenAPI::fromJsonValue(m_payment_holds, json[QString("paymentHolds")]);
    m_payment_holds_isSet = !json[QString("paymentHolds")].isNull() && m_payment_holds_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_reference_id_isValid = ::OpenAPI::fromJsonValue(m_payment_reference_id, json[QString("paymentReferenceId")]);
    m_payment_reference_id_isSet = !json[QString("paymentReferenceId")].isNull() && m_payment_reference_id_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("paymentStatus")]);
    m_payment_status_isSet = !json[QString("paymentStatus")].isNull() && m_payment_status_isValid;
}

QString OAIPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("paymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_payment_holds.size() > 0) {
        obj.insert(QString("paymentHolds"), ::OpenAPI::toJsonValue(m_payment_holds));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_reference_id_isSet) {
        obj.insert(QString("paymentReferenceId"), ::OpenAPI::toJsonValue(m_payment_reference_id));
    }
    if (m_payment_status_isSet) {
        obj.insert(QString("paymentStatus"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    return obj;
}

OAIAmount OAIPayment::getAmount() const {
    return m_amount;
}
void OAIPayment::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPayment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPayment::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPayment::getPaymentDate() const {
    return m_payment_date;
}
void OAIPayment::setPaymentDate(const QString &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPayment::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPayment::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QList<OAIPaymentHold> OAIPayment::getPaymentHolds() const {
    return m_payment_holds;
}
void OAIPayment::setPaymentHolds(const QList<OAIPaymentHold> &payment_holds) {
    m_payment_holds = payment_holds;
    m_payment_holds_isSet = true;
}

bool OAIPayment::is_payment_holds_Set() const{
    return m_payment_holds_isSet;
}

bool OAIPayment::is_payment_holds_Valid() const{
    return m_payment_holds_isValid;
}

QString OAIPayment::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPayment::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPayment::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPayment::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIPayment::getPaymentReferenceId() const {
    return m_payment_reference_id;
}
void OAIPayment::setPaymentReferenceId(const QString &payment_reference_id) {
    m_payment_reference_id = payment_reference_id;
    m_payment_reference_id_isSet = true;
}

bool OAIPayment::is_payment_reference_id_Set() const{
    return m_payment_reference_id_isSet;
}

bool OAIPayment::is_payment_reference_id_Valid() const{
    return m_payment_reference_id_isValid;
}

QString OAIPayment::getPaymentStatus() const {
    return m_payment_status;
}
void OAIPayment::setPaymentStatus(const QString &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIPayment::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIPayment::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

bool OAIPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_holds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
