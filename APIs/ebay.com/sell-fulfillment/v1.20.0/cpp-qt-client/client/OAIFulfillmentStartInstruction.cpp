/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFulfillmentStartInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFulfillmentStartInstruction::OAIFulfillmentStartInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFulfillmentStartInstruction::OAIFulfillmentStartInstruction() {
    this->initializeModel();
}

OAIFulfillmentStartInstruction::~OAIFulfillmentStartInstruction() {}

void OAIFulfillmentStartInstruction::initializeModel() {

    m_ebay_supported_fulfillment_isSet = false;
    m_ebay_supported_fulfillment_isValid = false;

    m_final_destination_address_isSet = false;
    m_final_destination_address_isValid = false;

    m_fulfillment_instructions_type_isSet = false;
    m_fulfillment_instructions_type_isValid = false;

    m_max_estimated_delivery_date_isSet = false;
    m_max_estimated_delivery_date_isValid = false;

    m_min_estimated_delivery_date_isSet = false;
    m_min_estimated_delivery_date_isValid = false;

    m_pickup_step_isSet = false;
    m_pickup_step_isValid = false;

    m_shipping_step_isSet = false;
    m_shipping_step_isValid = false;
}

void OAIFulfillmentStartInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFulfillmentStartInstruction::fromJsonObject(QJsonObject json) {

    m_ebay_supported_fulfillment_isValid = ::OpenAPI::fromJsonValue(m_ebay_supported_fulfillment, json[QString("ebaySupportedFulfillment")]);
    m_ebay_supported_fulfillment_isSet = !json[QString("ebaySupportedFulfillment")].isNull() && m_ebay_supported_fulfillment_isValid;

    m_final_destination_address_isValid = ::OpenAPI::fromJsonValue(m_final_destination_address, json[QString("finalDestinationAddress")]);
    m_final_destination_address_isSet = !json[QString("finalDestinationAddress")].isNull() && m_final_destination_address_isValid;

    m_fulfillment_instructions_type_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_instructions_type, json[QString("fulfillmentInstructionsType")]);
    m_fulfillment_instructions_type_isSet = !json[QString("fulfillmentInstructionsType")].isNull() && m_fulfillment_instructions_type_isValid;

    m_max_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_max_estimated_delivery_date, json[QString("maxEstimatedDeliveryDate")]);
    m_max_estimated_delivery_date_isSet = !json[QString("maxEstimatedDeliveryDate")].isNull() && m_max_estimated_delivery_date_isValid;

    m_min_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_min_estimated_delivery_date, json[QString("minEstimatedDeliveryDate")]);
    m_min_estimated_delivery_date_isSet = !json[QString("minEstimatedDeliveryDate")].isNull() && m_min_estimated_delivery_date_isValid;

    m_pickup_step_isValid = ::OpenAPI::fromJsonValue(m_pickup_step, json[QString("pickupStep")]);
    m_pickup_step_isSet = !json[QString("pickupStep")].isNull() && m_pickup_step_isValid;

    m_shipping_step_isValid = ::OpenAPI::fromJsonValue(m_shipping_step, json[QString("shippingStep")]);
    m_shipping_step_isSet = !json[QString("shippingStep")].isNull() && m_shipping_step_isValid;
}

QString OAIFulfillmentStartInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFulfillmentStartInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_ebay_supported_fulfillment_isSet) {
        obj.insert(QString("ebaySupportedFulfillment"), ::OpenAPI::toJsonValue(m_ebay_supported_fulfillment));
    }
    if (m_final_destination_address.isSet()) {
        obj.insert(QString("finalDestinationAddress"), ::OpenAPI::toJsonValue(m_final_destination_address));
    }
    if (m_fulfillment_instructions_type_isSet) {
        obj.insert(QString("fulfillmentInstructionsType"), ::OpenAPI::toJsonValue(m_fulfillment_instructions_type));
    }
    if (m_max_estimated_delivery_date_isSet) {
        obj.insert(QString("maxEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_max_estimated_delivery_date));
    }
    if (m_min_estimated_delivery_date_isSet) {
        obj.insert(QString("minEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_min_estimated_delivery_date));
    }
    if (m_pickup_step.isSet()) {
        obj.insert(QString("pickupStep"), ::OpenAPI::toJsonValue(m_pickup_step));
    }
    if (m_shipping_step.isSet()) {
        obj.insert(QString("shippingStep"), ::OpenAPI::toJsonValue(m_shipping_step));
    }
    return obj;
}

bool OAIFulfillmentStartInstruction::isEbaySupportedFulfillment() const {
    return m_ebay_supported_fulfillment;
}
void OAIFulfillmentStartInstruction::setEbaySupportedFulfillment(const bool &ebay_supported_fulfillment) {
    m_ebay_supported_fulfillment = ebay_supported_fulfillment;
    m_ebay_supported_fulfillment_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_ebay_supported_fulfillment_Set() const{
    return m_ebay_supported_fulfillment_isSet;
}

bool OAIFulfillmentStartInstruction::is_ebay_supported_fulfillment_Valid() const{
    return m_ebay_supported_fulfillment_isValid;
}

OAIAddress OAIFulfillmentStartInstruction::getFinalDestinationAddress() const {
    return m_final_destination_address;
}
void OAIFulfillmentStartInstruction::setFinalDestinationAddress(const OAIAddress &final_destination_address) {
    m_final_destination_address = final_destination_address;
    m_final_destination_address_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_final_destination_address_Set() const{
    return m_final_destination_address_isSet;
}

bool OAIFulfillmentStartInstruction::is_final_destination_address_Valid() const{
    return m_final_destination_address_isValid;
}

QString OAIFulfillmentStartInstruction::getFulfillmentInstructionsType() const {
    return m_fulfillment_instructions_type;
}
void OAIFulfillmentStartInstruction::setFulfillmentInstructionsType(const QString &fulfillment_instructions_type) {
    m_fulfillment_instructions_type = fulfillment_instructions_type;
    m_fulfillment_instructions_type_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_fulfillment_instructions_type_Set() const{
    return m_fulfillment_instructions_type_isSet;
}

bool OAIFulfillmentStartInstruction::is_fulfillment_instructions_type_Valid() const{
    return m_fulfillment_instructions_type_isValid;
}

QString OAIFulfillmentStartInstruction::getMaxEstimatedDeliveryDate() const {
    return m_max_estimated_delivery_date;
}
void OAIFulfillmentStartInstruction::setMaxEstimatedDeliveryDate(const QString &max_estimated_delivery_date) {
    m_max_estimated_delivery_date = max_estimated_delivery_date;
    m_max_estimated_delivery_date_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_max_estimated_delivery_date_Set() const{
    return m_max_estimated_delivery_date_isSet;
}

bool OAIFulfillmentStartInstruction::is_max_estimated_delivery_date_Valid() const{
    return m_max_estimated_delivery_date_isValid;
}

QString OAIFulfillmentStartInstruction::getMinEstimatedDeliveryDate() const {
    return m_min_estimated_delivery_date;
}
void OAIFulfillmentStartInstruction::setMinEstimatedDeliveryDate(const QString &min_estimated_delivery_date) {
    m_min_estimated_delivery_date = min_estimated_delivery_date;
    m_min_estimated_delivery_date_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_min_estimated_delivery_date_Set() const{
    return m_min_estimated_delivery_date_isSet;
}

bool OAIFulfillmentStartInstruction::is_min_estimated_delivery_date_Valid() const{
    return m_min_estimated_delivery_date_isValid;
}

OAIPickupStep OAIFulfillmentStartInstruction::getPickupStep() const {
    return m_pickup_step;
}
void OAIFulfillmentStartInstruction::setPickupStep(const OAIPickupStep &pickup_step) {
    m_pickup_step = pickup_step;
    m_pickup_step_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_pickup_step_Set() const{
    return m_pickup_step_isSet;
}

bool OAIFulfillmentStartInstruction::is_pickup_step_Valid() const{
    return m_pickup_step_isValid;
}

OAIShippingStep OAIFulfillmentStartInstruction::getShippingStep() const {
    return m_shipping_step;
}
void OAIFulfillmentStartInstruction::setShippingStep(const OAIShippingStep &shipping_step) {
    m_shipping_step = shipping_step;
    m_shipping_step_isSet = true;
}

bool OAIFulfillmentStartInstruction::is_shipping_step_Set() const{
    return m_shipping_step_isSet;
}

bool OAIFulfillmentStartInstruction::is_shipping_step_Valid() const{
    return m_shipping_step_isValid;
}

bool OAIFulfillmentStartInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ebay_supported_fulfillment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_destination_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_instructions_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_step.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFulfillmentStartInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
