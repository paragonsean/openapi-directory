/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingStep::OAIShippingStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingStep::OAIShippingStep() {
    this->initializeModel();
}

OAIShippingStep::~OAIShippingStep() {}

void OAIShippingStep::initializeModel() {

    m_ship_to_isSet = false;
    m_ship_to_isValid = false;

    m_ship_to_reference_id_isSet = false;
    m_ship_to_reference_id_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;

    m_shipping_service_code_isSet = false;
    m_shipping_service_code_isValid = false;
}

void OAIShippingStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingStep::fromJsonObject(QJsonObject json) {

    m_ship_to_isValid = ::OpenAPI::fromJsonValue(m_ship_to, json[QString("shipTo")]);
    m_ship_to_isSet = !json[QString("shipTo")].isNull() && m_ship_to_isValid;

    m_ship_to_reference_id_isValid = ::OpenAPI::fromJsonValue(m_ship_to_reference_id, json[QString("shipToReferenceId")]);
    m_ship_to_reference_id_isSet = !json[QString("shipToReferenceId")].isNull() && m_ship_to_reference_id_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;

    m_shipping_service_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_service_code, json[QString("shippingServiceCode")]);
    m_shipping_service_code_isSet = !json[QString("shippingServiceCode")].isNull() && m_shipping_service_code_isValid;
}

QString OAIShippingStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingStep::asJsonObject() const {
    QJsonObject obj;
    if (m_ship_to.isSet()) {
        obj.insert(QString("shipTo"), ::OpenAPI::toJsonValue(m_ship_to));
    }
    if (m_ship_to_reference_id_isSet) {
        obj.insert(QString("shipToReferenceId"), ::OpenAPI::toJsonValue(m_ship_to_reference_id));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    if (m_shipping_service_code_isSet) {
        obj.insert(QString("shippingServiceCode"), ::OpenAPI::toJsonValue(m_shipping_service_code));
    }
    return obj;
}

OAIExtendedContact OAIShippingStep::getShipTo() const {
    return m_ship_to;
}
void OAIShippingStep::setShipTo(const OAIExtendedContact &ship_to) {
    m_ship_to = ship_to;
    m_ship_to_isSet = true;
}

bool OAIShippingStep::is_ship_to_Set() const{
    return m_ship_to_isSet;
}

bool OAIShippingStep::is_ship_to_Valid() const{
    return m_ship_to_isValid;
}

QString OAIShippingStep::getShipToReferenceId() const {
    return m_ship_to_reference_id;
}
void OAIShippingStep::setShipToReferenceId(const QString &ship_to_reference_id) {
    m_ship_to_reference_id = ship_to_reference_id;
    m_ship_to_reference_id_isSet = true;
}

bool OAIShippingStep::is_ship_to_reference_id_Set() const{
    return m_ship_to_reference_id_isSet;
}

bool OAIShippingStep::is_ship_to_reference_id_Valid() const{
    return m_ship_to_reference_id_isValid;
}

QString OAIShippingStep::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIShippingStep::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIShippingStep::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIShippingStep::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

QString OAIShippingStep::getShippingServiceCode() const {
    return m_shipping_service_code;
}
void OAIShippingStep::setShippingServiceCode(const QString &shipping_service_code) {
    m_shipping_service_code = shipping_service_code;
    m_shipping_service_code_isSet = true;
}

bool OAIShippingStep::is_shipping_service_code_Set() const{
    return m_shipping_service_code_isSet;
}

bool OAIShippingStep::is_shipping_service_code_Valid() const{
    return m_shipping_service_code_isValid;
}

bool OAIShippingStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ship_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
