/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingSummary::OAIPricingSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingSummary::OAIPricingSummary() {
    this->initializeModel();
}

OAIPricingSummary::~OAIPricingSummary() {}

void OAIPricingSummary::initializeModel() {

    m_adjustment_isSet = false;
    m_adjustment_isValid = false;

    m_delivery_cost_isSet = false;
    m_delivery_cost_isValid = false;

    m_delivery_discount_isSet = false;
    m_delivery_discount_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_price_discount_isSet = false;
    m_price_discount_isValid = false;

    m_price_subtotal_isSet = false;
    m_price_subtotal_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPricingSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingSummary::fromJsonObject(QJsonObject json) {

    m_adjustment_isValid = ::OpenAPI::fromJsonValue(m_adjustment, json[QString("adjustment")]);
    m_adjustment_isSet = !json[QString("adjustment")].isNull() && m_adjustment_isValid;

    m_delivery_cost_isValid = ::OpenAPI::fromJsonValue(m_delivery_cost, json[QString("deliveryCost")]);
    m_delivery_cost_isSet = !json[QString("deliveryCost")].isNull() && m_delivery_cost_isValid;

    m_delivery_discount_isValid = ::OpenAPI::fromJsonValue(m_delivery_discount, json[QString("deliveryDiscount")]);
    m_delivery_discount_isSet = !json[QString("deliveryDiscount")].isNull() && m_delivery_discount_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_price_discount_isValid = ::OpenAPI::fromJsonValue(m_price_discount, json[QString("priceDiscount")]);
    m_price_discount_isSet = !json[QString("priceDiscount")].isNull() && m_price_discount_isValid;

    m_price_subtotal_isValid = ::OpenAPI::fromJsonValue(m_price_subtotal, json[QString("priceSubtotal")]);
    m_price_subtotal_isSet = !json[QString("priceSubtotal")].isNull() && m_price_subtotal_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPricingSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment.isSet()) {
        obj.insert(QString("adjustment"), ::OpenAPI::toJsonValue(m_adjustment));
    }
    if (m_delivery_cost.isSet()) {
        obj.insert(QString("deliveryCost"), ::OpenAPI::toJsonValue(m_delivery_cost));
    }
    if (m_delivery_discount.isSet()) {
        obj.insert(QString("deliveryDiscount"), ::OpenAPI::toJsonValue(m_delivery_discount));
    }
    if (m_fee.isSet()) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_price_discount.isSet()) {
        obj.insert(QString("priceDiscount"), ::OpenAPI::toJsonValue(m_price_discount));
    }
    if (m_price_subtotal.isSet()) {
        obj.insert(QString("priceSubtotal"), ::OpenAPI::toJsonValue(m_price_subtotal));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAIAmount OAIPricingSummary::getAdjustment() const {
    return m_adjustment;
}
void OAIPricingSummary::setAdjustment(const OAIAmount &adjustment) {
    m_adjustment = adjustment;
    m_adjustment_isSet = true;
}

bool OAIPricingSummary::is_adjustment_Set() const{
    return m_adjustment_isSet;
}

bool OAIPricingSummary::is_adjustment_Valid() const{
    return m_adjustment_isValid;
}

OAIAmount OAIPricingSummary::getDeliveryCost() const {
    return m_delivery_cost;
}
void OAIPricingSummary::setDeliveryCost(const OAIAmount &delivery_cost) {
    m_delivery_cost = delivery_cost;
    m_delivery_cost_isSet = true;
}

bool OAIPricingSummary::is_delivery_cost_Set() const{
    return m_delivery_cost_isSet;
}

bool OAIPricingSummary::is_delivery_cost_Valid() const{
    return m_delivery_cost_isValid;
}

OAIAmount OAIPricingSummary::getDeliveryDiscount() const {
    return m_delivery_discount;
}
void OAIPricingSummary::setDeliveryDiscount(const OAIAmount &delivery_discount) {
    m_delivery_discount = delivery_discount;
    m_delivery_discount_isSet = true;
}

bool OAIPricingSummary::is_delivery_discount_Set() const{
    return m_delivery_discount_isSet;
}

bool OAIPricingSummary::is_delivery_discount_Valid() const{
    return m_delivery_discount_isValid;
}

OAIAmount OAIPricingSummary::getFee() const {
    return m_fee;
}
void OAIPricingSummary::setFee(const OAIAmount &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIPricingSummary::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIPricingSummary::is_fee_Valid() const{
    return m_fee_isValid;
}

OAIAmount OAIPricingSummary::getPriceDiscount() const {
    return m_price_discount;
}
void OAIPricingSummary::setPriceDiscount(const OAIAmount &price_discount) {
    m_price_discount = price_discount;
    m_price_discount_isSet = true;
}

bool OAIPricingSummary::is_price_discount_Set() const{
    return m_price_discount_isSet;
}

bool OAIPricingSummary::is_price_discount_Valid() const{
    return m_price_discount_isValid;
}

OAIAmount OAIPricingSummary::getPriceSubtotal() const {
    return m_price_subtotal;
}
void OAIPricingSummary::setPriceSubtotal(const OAIAmount &price_subtotal) {
    m_price_subtotal = price_subtotal;
    m_price_subtotal_isSet = true;
}

bool OAIPricingSummary::is_price_subtotal_Set() const{
    return m_price_subtotal_isSet;
}

bool OAIPricingSummary::is_price_subtotal_Valid() const{
    return m_price_subtotal_isValid;
}

OAIAmount OAIPricingSummary::getTax() const {
    return m_tax;
}
void OAIPricingSummary::setTax(const OAIAmount &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIPricingSummary::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIPricingSummary::is_tax_Valid() const{
    return m_tax_isValid;
}

OAIAmount OAIPricingSummary::getTotal() const {
    return m_total;
}
void OAIPricingSummary::setTotal(const OAIAmount &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPricingSummary::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPricingSummary::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPricingSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_subtotal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
