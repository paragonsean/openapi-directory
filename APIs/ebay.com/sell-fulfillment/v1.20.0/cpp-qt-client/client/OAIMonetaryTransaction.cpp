/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonetaryTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonetaryTransaction::OAIMonetaryTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonetaryTransaction::OAIMonetaryTransaction() {
    this->initializeModel();
}

OAIMonetaryTransaction::~OAIMonetaryTransaction() {}

void OAIMonetaryTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMonetaryTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonetaryTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMonetaryTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonetaryTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIDisputeAmount OAIMonetaryTransaction::getAmount() const {
    return m_amount;
}
void OAIMonetaryTransaction::setAmount(const OAIDisputeAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIMonetaryTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIMonetaryTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIMonetaryTransaction::getDate() const {
    return m_date;
}
void OAIMonetaryTransaction::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIMonetaryTransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAIMonetaryTransaction::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIMonetaryTransaction::getReason() const {
    return m_reason;
}
void OAIMonetaryTransaction::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIMonetaryTransaction::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIMonetaryTransaction::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIMonetaryTransaction::getType() const {
    return m_type;
}
void OAIMonetaryTransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMonetaryTransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMonetaryTransaction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMonetaryTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonetaryTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
