/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItemReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItemReference::OAILineItemReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItemReference::OAILineItemReference() {
    this->initializeModel();
}

OAILineItemReference::~OAILineItemReference() {}

void OAILineItemReference::initializeModel() {

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAILineItemReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItemReference::fromJsonObject(QJsonObject json) {

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("lineItemId")]);
    m_line_item_id_isSet = !json[QString("lineItemId")].isNull() && m_line_item_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAILineItemReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItemReference::asJsonObject() const {
    QJsonObject obj;
    if (m_line_item_id_isSet) {
        obj.insert(QString("lineItemId"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAILineItemReference::getLineItemId() const {
    return m_line_item_id;
}
void OAILineItemReference::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAILineItemReference::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAILineItemReference::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

qint32 OAILineItemReference::getQuantity() const {
    return m_quantity;
}
void OAILineItemReference::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILineItemReference::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILineItemReference::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAILineItemReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItemReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
