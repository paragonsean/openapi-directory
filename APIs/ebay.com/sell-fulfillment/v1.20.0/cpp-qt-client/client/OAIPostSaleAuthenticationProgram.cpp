/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostSaleAuthenticationProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostSaleAuthenticationProgram::OAIPostSaleAuthenticationProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostSaleAuthenticationProgram::OAIPostSaleAuthenticationProgram() {
    this->initializeModel();
}

OAIPostSaleAuthenticationProgram::~OAIPostSaleAuthenticationProgram() {}

void OAIPostSaleAuthenticationProgram::initializeModel() {

    m_outcome_reason_isSet = false;
    m_outcome_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPostSaleAuthenticationProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostSaleAuthenticationProgram::fromJsonObject(QJsonObject json) {

    m_outcome_reason_isValid = ::OpenAPI::fromJsonValue(m_outcome_reason, json[QString("outcomeReason")]);
    m_outcome_reason_isSet = !json[QString("outcomeReason")].isNull() && m_outcome_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPostSaleAuthenticationProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostSaleAuthenticationProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_outcome_reason_isSet) {
        obj.insert(QString("outcomeReason"), ::OpenAPI::toJsonValue(m_outcome_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPostSaleAuthenticationProgram::getOutcomeReason() const {
    return m_outcome_reason;
}
void OAIPostSaleAuthenticationProgram::setOutcomeReason(const QString &outcome_reason) {
    m_outcome_reason = outcome_reason;
    m_outcome_reason_isSet = true;
}

bool OAIPostSaleAuthenticationProgram::is_outcome_reason_Set() const{
    return m_outcome_reason_isSet;
}

bool OAIPostSaleAuthenticationProgram::is_outcome_reason_Valid() const{
    return m_outcome_reason_isValid;
}

QString OAIPostSaleAuthenticationProgram::getStatus() const {
    return m_status;
}
void OAIPostSaleAuthenticationProgram::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPostSaleAuthenticationProgram::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPostSaleAuthenticationProgram::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPostSaleAuthenticationProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outcome_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostSaleAuthenticationProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
