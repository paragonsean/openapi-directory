/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeEvidence::OAIDisputeEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeEvidence::OAIDisputeEvidence() {
    this->initializeModel();
}

OAIDisputeEvidence::~OAIDisputeEvidence() {}

void OAIDisputeEvidence::initializeModel() {

    m_evidence_id_isSet = false;
    m_evidence_id_isValid = false;

    m_evidence_type_isSet = false;
    m_evidence_type_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_provided_date_isSet = false;
    m_provided_date_isValid = false;

    m_request_date_isSet = false;
    m_request_date_isValid = false;

    m_respond_by_date_isSet = false;
    m_respond_by_date_isValid = false;

    m_shipment_tracking_isSet = false;
    m_shipment_tracking_isValid = false;
}

void OAIDisputeEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisputeEvidence::fromJsonObject(QJsonObject json) {

    m_evidence_id_isValid = ::OpenAPI::fromJsonValue(m_evidence_id, json[QString("evidenceId")]);
    m_evidence_id_isSet = !json[QString("evidenceId")].isNull() && m_evidence_id_isValid;

    m_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_type, json[QString("evidenceType")]);
    m_evidence_type_isSet = !json[QString("evidenceType")].isNull() && m_evidence_type_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_provided_date_isValid = ::OpenAPI::fromJsonValue(m_provided_date, json[QString("providedDate")]);
    m_provided_date_isSet = !json[QString("providedDate")].isNull() && m_provided_date_isValid;

    m_request_date_isValid = ::OpenAPI::fromJsonValue(m_request_date, json[QString("requestDate")]);
    m_request_date_isSet = !json[QString("requestDate")].isNull() && m_request_date_isValid;

    m_respond_by_date_isValid = ::OpenAPI::fromJsonValue(m_respond_by_date, json[QString("respondByDate")]);
    m_respond_by_date_isSet = !json[QString("respondByDate")].isNull() && m_respond_by_date_isValid;

    m_shipment_tracking_isValid = ::OpenAPI::fromJsonValue(m_shipment_tracking, json[QString("shipmentTracking")]);
    m_shipment_tracking_isSet = !json[QString("shipmentTracking")].isNull() && m_shipment_tracking_isValid;
}

QString OAIDisputeEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisputeEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_id_isSet) {
        obj.insert(QString("evidenceId"), ::OpenAPI::toJsonValue(m_evidence_id));
    }
    if (m_evidence_type_isSet) {
        obj.insert(QString("evidenceType"), ::OpenAPI::toJsonValue(m_evidence_type));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_provided_date_isSet) {
        obj.insert(QString("providedDate"), ::OpenAPI::toJsonValue(m_provided_date));
    }
    if (m_request_date_isSet) {
        obj.insert(QString("requestDate"), ::OpenAPI::toJsonValue(m_request_date));
    }
    if (m_respond_by_date_isSet) {
        obj.insert(QString("respondByDate"), ::OpenAPI::toJsonValue(m_respond_by_date));
    }
    if (m_shipment_tracking.size() > 0) {
        obj.insert(QString("shipmentTracking"), ::OpenAPI::toJsonValue(m_shipment_tracking));
    }
    return obj;
}

QString OAIDisputeEvidence::getEvidenceId() const {
    return m_evidence_id;
}
void OAIDisputeEvidence::setEvidenceId(const QString &evidence_id) {
    m_evidence_id = evidence_id;
    m_evidence_id_isSet = true;
}

bool OAIDisputeEvidence::is_evidence_id_Set() const{
    return m_evidence_id_isSet;
}

bool OAIDisputeEvidence::is_evidence_id_Valid() const{
    return m_evidence_id_isValid;
}

QString OAIDisputeEvidence::getEvidenceType() const {
    return m_evidence_type;
}
void OAIDisputeEvidence::setEvidenceType(const QString &evidence_type) {
    m_evidence_type = evidence_type;
    m_evidence_type_isSet = true;
}

bool OAIDisputeEvidence::is_evidence_type_Set() const{
    return m_evidence_type_isSet;
}

bool OAIDisputeEvidence::is_evidence_type_Valid() const{
    return m_evidence_type_isValid;
}

QList<OAIFileInfo> OAIDisputeEvidence::getFiles() const {
    return m_files;
}
void OAIDisputeEvidence::setFiles(const QList<OAIFileInfo> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIDisputeEvidence::is_files_Set() const{
    return m_files_isSet;
}

bool OAIDisputeEvidence::is_files_Valid() const{
    return m_files_isValid;
}

QList<OAIOrderLineItems> OAIDisputeEvidence::getLineItems() const {
    return m_line_items;
}
void OAIDisputeEvidence::setLineItems(const QList<OAIOrderLineItems> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIDisputeEvidence::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIDisputeEvidence::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIDisputeEvidence::getProvidedDate() const {
    return m_provided_date;
}
void OAIDisputeEvidence::setProvidedDate(const QString &provided_date) {
    m_provided_date = provided_date;
    m_provided_date_isSet = true;
}

bool OAIDisputeEvidence::is_provided_date_Set() const{
    return m_provided_date_isSet;
}

bool OAIDisputeEvidence::is_provided_date_Valid() const{
    return m_provided_date_isValid;
}

QString OAIDisputeEvidence::getRequestDate() const {
    return m_request_date;
}
void OAIDisputeEvidence::setRequestDate(const QString &request_date) {
    m_request_date = request_date;
    m_request_date_isSet = true;
}

bool OAIDisputeEvidence::is_request_date_Set() const{
    return m_request_date_isSet;
}

bool OAIDisputeEvidence::is_request_date_Valid() const{
    return m_request_date_isValid;
}

QString OAIDisputeEvidence::getRespondByDate() const {
    return m_respond_by_date;
}
void OAIDisputeEvidence::setRespondByDate(const QString &respond_by_date) {
    m_respond_by_date = respond_by_date;
    m_respond_by_date_isSet = true;
}

bool OAIDisputeEvidence::is_respond_by_date_Set() const{
    return m_respond_by_date_isSet;
}

bool OAIDisputeEvidence::is_respond_by_date_Valid() const{
    return m_respond_by_date_isValid;
}

QList<OAITrackingInfo> OAIDisputeEvidence::getShipmentTracking() const {
    return m_shipment_tracking;
}
void OAIDisputeEvidence::setShipmentTracking(const QList<OAITrackingInfo> &shipment_tracking) {
    m_shipment_tracking = shipment_tracking;
    m_shipment_tracking_isSet = true;
}

bool OAIDisputeEvidence::is_shipment_tracking_Set() const{
    return m_shipment_tracking_isSet;
}

bool OAIDisputeEvidence::is_shipment_tracking_Valid() const{
    return m_shipment_tracking_isValid;
}

bool OAIDisputeEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provided_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respond_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_tracking.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisputeEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
