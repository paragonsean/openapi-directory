/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentHold.h
 *
 * This type contains information about a hold placed on a payment to a seller for an order, including the reason why the buyer&#39;s payment for the order is being held, the expected release date of the funds into the seller&#39;s account, the current state of the hold, and the actual release date if the payment has been released, and possible actions the seller can take to expedite the payout of funds into their account.
 */

#ifndef OAIPaymentHold_H
#define OAIPaymentHold_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAISellerActionsToRelease.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;
class OAISellerActionsToRelease;

class OAIPaymentHold : public OAIObject {
public:
    OAIPaymentHold();
    OAIPaymentHold(QString json);
    ~OAIPaymentHold() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExpectedReleaseDate() const;
    void setExpectedReleaseDate(const QString &expected_release_date);
    bool is_expected_release_date_Set() const;
    bool is_expected_release_date_Valid() const;

    OAIAmount getHoldAmount() const;
    void setHoldAmount(const OAIAmount &hold_amount);
    bool is_hold_amount_Set() const;
    bool is_hold_amount_Valid() const;

    QString getHoldReason() const;
    void setHoldReason(const QString &hold_reason);
    bool is_hold_reason_Set() const;
    bool is_hold_reason_Valid() const;

    QString getHoldState() const;
    void setHoldState(const QString &hold_state);
    bool is_hold_state_Set() const;
    bool is_hold_state_Valid() const;

    QString getReleaseDate() const;
    void setReleaseDate(const QString &release_date);
    bool is_release_date_Set() const;
    bool is_release_date_Valid() const;

    QList<OAISellerActionsToRelease> getSellerActionsToRelease() const;
    void setSellerActionsToRelease(const QList<OAISellerActionsToRelease> &seller_actions_to_release);
    bool is_seller_actions_to_release_Set() const;
    bool is_seller_actions_to_release_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_expected_release_date;
    bool m_expected_release_date_isSet;
    bool m_expected_release_date_isValid;

    OAIAmount m_hold_amount;
    bool m_hold_amount_isSet;
    bool m_hold_amount_isValid;

    QString m_hold_reason;
    bool m_hold_reason_isSet;
    bool m_hold_reason_isValid;

    QString m_hold_state;
    bool m_hold_state_isSet;
    bool m_hold_state_isValid;

    QString m_release_date;
    bool m_release_date_isSet;
    bool m_release_date_isValid;

    QList<OAISellerActionsToRelease> m_seller_actions_to_release;
    bool m_seller_actions_to_release_isSet;
    bool m_seller_actions_to_release_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentHold)

#endif // OAIPaymentHold_H
