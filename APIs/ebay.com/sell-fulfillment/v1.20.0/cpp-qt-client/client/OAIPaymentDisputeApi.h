/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentDisputeApi_H
#define OAI_OAIPaymentDisputeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptPaymentDisputeRequest.h"
#include "OAIAddEvidencePaymentDisputeRequest.h"
#include "OAIAddEvidencePaymentDisputeResponse.h"
#include "OAIContestPaymentDisputeRequest.h"
#include "OAIDisputeSummaryResponse.h"
#include "OAIFileEvidence.h"
#include "OAIPaymentDispute.h"
#include "OAIPaymentDisputeActivityHistory.h"
#include "OAIUpdateEvidencePaymentDisputeRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentDisputeApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentDisputeApi(const int timeOut = 0);
    ~OAIPaymentDisputeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payment_dispute_id QString [required]
    * @param[in]  oai_accept_payment_dispute_request OAIAcceptPaymentDisputeRequest [optional]
    */
    virtual void acceptPaymentDispute(const QString &payment_dispute_id, const ::OpenAPI::OptionalParam<OAIAcceptPaymentDisputeRequest> &oai_accept_payment_dispute_request = ::OpenAPI::OptionalParam<OAIAcceptPaymentDisputeRequest>());

    /**
    * @param[in]  payment_dispute_id QString [required]
    * @param[in]  oai_add_evidence_payment_dispute_request OAIAddEvidencePaymentDisputeRequest [optional]
    */
    virtual void addEvidence(const QString &payment_dispute_id, const ::OpenAPI::OptionalParam<OAIAddEvidencePaymentDisputeRequest> &oai_add_evidence_payment_dispute_request = ::OpenAPI::OptionalParam<OAIAddEvidencePaymentDisputeRequest>());

    /**
    * @param[in]  payment_dispute_id QString [required]
    * @param[in]  oai_contest_payment_dispute_request OAIContestPaymentDisputeRequest [optional]
    */
    virtual void contestPaymentDispute(const QString &payment_dispute_id, const ::OpenAPI::OptionalParam<OAIContestPaymentDisputeRequest> &oai_contest_payment_dispute_request = ::OpenAPI::OptionalParam<OAIContestPaymentDisputeRequest>());

    /**
    * @param[in]  payment_dispute_id QString [required]
    * @param[in]  evidence_id QString [required]
    * @param[in]  file_id QString [required]
    */
    virtual void fetchEvidenceContent(const QString &payment_dispute_id, const QString &evidence_id, const QString &file_id);

    /**
    * @param[in]  payment_dispute_id QString [required]
    */
    virtual void getActivities(const QString &payment_dispute_id);

    /**
    * @param[in]  payment_dispute_id QString [required]
    */
    virtual void getPaymentDispute(const QString &payment_dispute_id);

    /**
    * @param[in]  order_id QString [optional]
    * @param[in]  buyer_username QString [optional]
    * @param[in]  open_date_from QString [optional]
    * @param[in]  open_date_to QString [optional]
    * @param[in]  payment_dispute_status QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getPaymentDisputeSummaries(const ::OpenAPI::OptionalParam<QString> &order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &buyer_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &open_date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &open_date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_dispute_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payment_dispute_id QString [required]
    * @param[in]  oai_update_evidence_payment_dispute_request OAIUpdateEvidencePaymentDisputeRequest [optional]
    */
    virtual void updateEvidence(const QString &payment_dispute_id, const ::OpenAPI::OptionalParam<OAIUpdateEvidencePaymentDisputeRequest> &oai_update_evidence_payment_dispute_request = ::OpenAPI::OptionalParam<OAIUpdateEvidencePaymentDisputeRequest>());

    /**
    * @param[in]  payment_dispute_id QString [required]
    */
    virtual void uploadEvidenceFile(const QString &payment_dispute_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptPaymentDisputeCallback(OAIHttpRequestWorker *worker);
    void addEvidenceCallback(OAIHttpRequestWorker *worker);
    void contestPaymentDisputeCallback(OAIHttpRequestWorker *worker);
    void fetchEvidenceContentCallback(OAIHttpRequestWorker *worker);
    void getActivitiesCallback(OAIHttpRequestWorker *worker);
    void getPaymentDisputeCallback(OAIHttpRequestWorker *worker);
    void getPaymentDisputeSummariesCallback(OAIHttpRequestWorker *worker);
    void updateEvidenceCallback(OAIHttpRequestWorker *worker);
    void uploadEvidenceFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptPaymentDisputeSignal();
    void addEvidenceSignal(OAIAddEvidencePaymentDisputeResponse summary);
    void contestPaymentDisputeSignal();
    void fetchEvidenceContentSignal(QList<QString> summary);
    void getActivitiesSignal(OAIPaymentDisputeActivityHistory summary);
    void getPaymentDisputeSignal(OAIPaymentDispute summary);
    void getPaymentDisputeSummariesSignal(OAIDisputeSummaryResponse summary);
    void updateEvidenceSignal();
    void uploadEvidenceFileSignal(OAIFileEvidence summary);


    void acceptPaymentDisputeSignalFull(OAIHttpRequestWorker *worker);
    void addEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIAddEvidencePaymentDisputeResponse summary);
    void contestPaymentDisputeSignalFull(OAIHttpRequestWorker *worker);
    void fetchEvidenceContentSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getActivitiesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentDisputeActivityHistory summary);
    void getPaymentDisputeSignalFull(OAIHttpRequestWorker *worker, OAIPaymentDispute summary);
    void getPaymentDisputeSummariesSignalFull(OAIHttpRequestWorker *worker, OAIDisputeSummaryResponse summary);
    void updateEvidenceSignalFull(OAIHttpRequestWorker *worker);
    void uploadEvidenceFileSignalFull(OAIHttpRequestWorker *worker, OAIFileEvidence summary);

    Q_DECL_DEPRECATED_X("Use acceptPaymentDisputeSignalError() instead")
    void acceptPaymentDisputeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void acceptPaymentDisputeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addEvidenceSignalError() instead")
    void addEvidenceSignalE(OAIAddEvidencePaymentDisputeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addEvidenceSignalError(OAIAddEvidencePaymentDisputeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contestPaymentDisputeSignalError() instead")
    void contestPaymentDisputeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contestPaymentDisputeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchEvidenceContentSignalError() instead")
    void fetchEvidenceContentSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchEvidenceContentSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivitiesSignalError() instead")
    void getActivitiesSignalE(OAIPaymentDisputeActivityHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivitiesSignalError(OAIPaymentDisputeActivityHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentDisputeSignalError() instead")
    void getPaymentDisputeSignalE(OAIPaymentDispute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentDisputeSignalError(OAIPaymentDispute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentDisputeSummariesSignalError() instead")
    void getPaymentDisputeSummariesSignalE(OAIDisputeSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentDisputeSummariesSignalError(OAIDisputeSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEvidenceSignalError() instead")
    void updateEvidenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateEvidenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadEvidenceFileSignalError() instead")
    void uploadEvidenceFileSignalE(OAIFileEvidence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadEvidenceFileSignalError(OAIFileEvidence summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptPaymentDisputeSignalErrorFull() instead")
    void acceptPaymentDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptPaymentDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addEvidenceSignalErrorFull() instead")
    void addEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contestPaymentDisputeSignalErrorFull() instead")
    void contestPaymentDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contestPaymentDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchEvidenceContentSignalErrorFull() instead")
    void fetchEvidenceContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchEvidenceContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivitiesSignalErrorFull() instead")
    void getActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentDisputeSignalErrorFull() instead")
    void getPaymentDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentDisputeSummariesSignalErrorFull() instead")
    void getPaymentDisputeSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentDisputeSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEvidenceSignalErrorFull() instead")
    void updateEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadEvidenceFileSignalErrorFull() instead")
    void uploadEvidenceFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadEvidenceFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
