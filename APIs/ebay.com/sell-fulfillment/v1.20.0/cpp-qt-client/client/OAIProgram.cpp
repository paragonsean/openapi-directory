/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgram::OAIProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgram::OAIProgram() {
    this->initializeModel();
}

OAIProgram::~OAIProgram() {}

void OAIProgram::initializeModel() {

    m_authenticity_verification_isSet = false;
    m_authenticity_verification_isValid = false;

    m_ebay_international_shipping_isSet = false;
    m_ebay_international_shipping_isValid = false;

    m_ebay_shipping_isSet = false;
    m_ebay_shipping_isValid = false;

    m_ebay_vault_isSet = false;
    m_ebay_vault_isValid = false;

    m_fulfillment_program_isSet = false;
    m_fulfillment_program_isValid = false;
}

void OAIProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgram::fromJsonObject(QJsonObject json) {

    m_authenticity_verification_isValid = ::OpenAPI::fromJsonValue(m_authenticity_verification, json[QString("authenticityVerification")]);
    m_authenticity_verification_isSet = !json[QString("authenticityVerification")].isNull() && m_authenticity_verification_isValid;

    m_ebay_international_shipping_isValid = ::OpenAPI::fromJsonValue(m_ebay_international_shipping, json[QString("ebayInternationalShipping")]);
    m_ebay_international_shipping_isSet = !json[QString("ebayInternationalShipping")].isNull() && m_ebay_international_shipping_isValid;

    m_ebay_shipping_isValid = ::OpenAPI::fromJsonValue(m_ebay_shipping, json[QString("ebayShipping")]);
    m_ebay_shipping_isSet = !json[QString("ebayShipping")].isNull() && m_ebay_shipping_isValid;

    m_ebay_vault_isValid = ::OpenAPI::fromJsonValue(m_ebay_vault, json[QString("ebayVault")]);
    m_ebay_vault_isSet = !json[QString("ebayVault")].isNull() && m_ebay_vault_isValid;

    m_fulfillment_program_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_program, json[QString("fulfillmentProgram")]);
    m_fulfillment_program_isSet = !json[QString("fulfillmentProgram")].isNull() && m_fulfillment_program_isValid;
}

QString OAIProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticity_verification.isSet()) {
        obj.insert(QString("authenticityVerification"), ::OpenAPI::toJsonValue(m_authenticity_verification));
    }
    if (m_ebay_international_shipping.isSet()) {
        obj.insert(QString("ebayInternationalShipping"), ::OpenAPI::toJsonValue(m_ebay_international_shipping));
    }
    if (m_ebay_shipping.isSet()) {
        obj.insert(QString("ebayShipping"), ::OpenAPI::toJsonValue(m_ebay_shipping));
    }
    if (m_ebay_vault.isSet()) {
        obj.insert(QString("ebayVault"), ::OpenAPI::toJsonValue(m_ebay_vault));
    }
    if (m_fulfillment_program.isSet()) {
        obj.insert(QString("fulfillmentProgram"), ::OpenAPI::toJsonValue(m_fulfillment_program));
    }
    return obj;
}

OAIPostSaleAuthenticationProgram OAIProgram::getAuthenticityVerification() const {
    return m_authenticity_verification;
}
void OAIProgram::setAuthenticityVerification(const OAIPostSaleAuthenticationProgram &authenticity_verification) {
    m_authenticity_verification = authenticity_verification;
    m_authenticity_verification_isSet = true;
}

bool OAIProgram::is_authenticity_verification_Set() const{
    return m_authenticity_verification_isSet;
}

bool OAIProgram::is_authenticity_verification_Valid() const{
    return m_authenticity_verification_isValid;
}

OAIEbayInternationalShipping OAIProgram::getEbayInternationalShipping() const {
    return m_ebay_international_shipping;
}
void OAIProgram::setEbayInternationalShipping(const OAIEbayInternationalShipping &ebay_international_shipping) {
    m_ebay_international_shipping = ebay_international_shipping;
    m_ebay_international_shipping_isSet = true;
}

bool OAIProgram::is_ebay_international_shipping_Set() const{
    return m_ebay_international_shipping_isSet;
}

bool OAIProgram::is_ebay_international_shipping_Valid() const{
    return m_ebay_international_shipping_isValid;
}

OAIEbayShipping OAIProgram::getEbayShipping() const {
    return m_ebay_shipping;
}
void OAIProgram::setEbayShipping(const OAIEbayShipping &ebay_shipping) {
    m_ebay_shipping = ebay_shipping;
    m_ebay_shipping_isSet = true;
}

bool OAIProgram::is_ebay_shipping_Set() const{
    return m_ebay_shipping_isSet;
}

bool OAIProgram::is_ebay_shipping_Valid() const{
    return m_ebay_shipping_isValid;
}

OAIEbayVaultProgram OAIProgram::getEbayVault() const {
    return m_ebay_vault;
}
void OAIProgram::setEbayVault(const OAIEbayVaultProgram &ebay_vault) {
    m_ebay_vault = ebay_vault;
    m_ebay_vault_isSet = true;
}

bool OAIProgram::is_ebay_vault_Set() const{
    return m_ebay_vault_isSet;
}

bool OAIProgram::is_ebay_vault_Valid() const{
    return m_ebay_vault_isValid;
}

OAIEbayFulfillmentProgram OAIProgram::getFulfillmentProgram() const {
    return m_fulfillment_program;
}
void OAIProgram::setFulfillmentProgram(const OAIEbayFulfillmentProgram &fulfillment_program) {
    m_fulfillment_program = fulfillment_program;
    m_fulfillment_program_isSet = true;
}

bool OAIProgram::is_fulfillment_program_Set() const{
    return m_fulfillment_program_isSet;
}

bool OAIProgram::is_fulfillment_program_Valid() const{
    return m_fulfillment_program_isValid;
}

bool OAIProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticity_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_international_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_program.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
