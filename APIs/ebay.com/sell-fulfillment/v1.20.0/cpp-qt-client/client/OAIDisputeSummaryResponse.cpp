/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeSummaryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeSummaryResponse::OAIDisputeSummaryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeSummaryResponse::OAIDisputeSummaryResponse() {
    this->initializeModel();
}

OAIDisputeSummaryResponse::~OAIDisputeSummaryResponse() {}

void OAIDisputeSummaryResponse::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_payment_dispute_summaries_isSet = false;
    m_payment_dispute_summaries_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIDisputeSummaryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisputeSummaryResponse::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_payment_dispute_summaries_isValid = ::OpenAPI::fromJsonValue(m_payment_dispute_summaries, json[QString("paymentDisputeSummaries")]);
    m_payment_dispute_summaries_isSet = !json[QString("paymentDisputeSummaries")].isNull() && m_payment_dispute_summaries_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIDisputeSummaryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisputeSummaryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_payment_dispute_summaries.size() > 0) {
        obj.insert(QString("paymentDisputeSummaries"), ::OpenAPI::toJsonValue(m_payment_dispute_summaries));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAIDisputeSummaryResponse::getHref() const {
    return m_href;
}
void OAIDisputeSummaryResponse::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIDisputeSummaryResponse::is_href_Set() const{
    return m_href_isSet;
}

bool OAIDisputeSummaryResponse::is_href_Valid() const{
    return m_href_isValid;
}

qint32 OAIDisputeSummaryResponse::getLimit() const {
    return m_limit;
}
void OAIDisputeSummaryResponse::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIDisputeSummaryResponse::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIDisputeSummaryResponse::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIDisputeSummaryResponse::getNext() const {
    return m_next;
}
void OAIDisputeSummaryResponse::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIDisputeSummaryResponse::is_next_Set() const{
    return m_next_isSet;
}

bool OAIDisputeSummaryResponse::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAIDisputeSummaryResponse::getOffset() const {
    return m_offset;
}
void OAIDisputeSummaryResponse::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIDisputeSummaryResponse::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIDisputeSummaryResponse::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAIPaymentDisputeSummary> OAIDisputeSummaryResponse::getPaymentDisputeSummaries() const {
    return m_payment_dispute_summaries;
}
void OAIDisputeSummaryResponse::setPaymentDisputeSummaries(const QList<OAIPaymentDisputeSummary> &payment_dispute_summaries) {
    m_payment_dispute_summaries = payment_dispute_summaries;
    m_payment_dispute_summaries_isSet = true;
}

bool OAIDisputeSummaryResponse::is_payment_dispute_summaries_Set() const{
    return m_payment_dispute_summaries_isSet;
}

bool OAIDisputeSummaryResponse::is_payment_dispute_summaries_Valid() const{
    return m_payment_dispute_summaries_isValid;
}

QString OAIDisputeSummaryResponse::getPrev() const {
    return m_prev;
}
void OAIDisputeSummaryResponse::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAIDisputeSummaryResponse::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAIDisputeSummaryResponse::is_prev_Valid() const{
    return m_prev_isValid;
}

qint32 OAIDisputeSummaryResponse::getTotal() const {
    return m_total;
}
void OAIDisputeSummaryResponse::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDisputeSummaryResponse::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDisputeSummaryResponse::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIDisputeSummaryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_dispute_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisputeSummaryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
