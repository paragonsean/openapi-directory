/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItem::OAILineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItem::OAILineItem() {
    this->initializeModel();
}

OAILineItem::~OAILineItem() {}

void OAILineItem::initializeModel() {

    m_applied_promotions_isSet = false;
    m_applied_promotions_isValid = false;

    m_delivery_cost_isSet = false;
    m_delivery_cost_isValid = false;

    m_discounted_line_item_cost_isSet = false;
    m_discounted_line_item_cost_isValid = false;

    m_ebay_collect_and_remit_taxes_isSet = false;
    m_ebay_collect_and_remit_taxes_isValid = false;

    m_ebay_collected_charges_isSet = false;
    m_ebay_collected_charges_isValid = false;

    m_gift_details_isSet = false;
    m_gift_details_isValid = false;

    m_item_location_isSet = false;
    m_item_location_isValid = false;

    m_legacy_item_id_isSet = false;
    m_legacy_item_id_isValid = false;

    m_legacy_variation_id_isSet = false;
    m_legacy_variation_id_isValid = false;

    m_line_item_cost_isSet = false;
    m_line_item_cost_isValid = false;

    m_line_item_fulfillment_instructions_isSet = false;
    m_line_item_fulfillment_instructions_isValid = false;

    m_line_item_fulfillment_status_isSet = false;
    m_line_item_fulfillment_status_isValid = false;

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;

    m_linked_order_line_items_isSet = false;
    m_linked_order_line_items_isValid = false;

    m_listing_marketplace_id_isSet = false;
    m_listing_marketplace_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_purchase_marketplace_id_isSet = false;
    m_purchase_marketplace_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_sold_format_isSet = false;
    m_sold_format_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_variation_aspects_isSet = false;
    m_variation_aspects_isValid = false;
}

void OAILineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItem::fromJsonObject(QJsonObject json) {

    m_applied_promotions_isValid = ::OpenAPI::fromJsonValue(m_applied_promotions, json[QString("appliedPromotions")]);
    m_applied_promotions_isSet = !json[QString("appliedPromotions")].isNull() && m_applied_promotions_isValid;

    m_delivery_cost_isValid = ::OpenAPI::fromJsonValue(m_delivery_cost, json[QString("deliveryCost")]);
    m_delivery_cost_isSet = !json[QString("deliveryCost")].isNull() && m_delivery_cost_isValid;

    m_discounted_line_item_cost_isValid = ::OpenAPI::fromJsonValue(m_discounted_line_item_cost, json[QString("discountedLineItemCost")]);
    m_discounted_line_item_cost_isSet = !json[QString("discountedLineItemCost")].isNull() && m_discounted_line_item_cost_isValid;

    m_ebay_collect_and_remit_taxes_isValid = ::OpenAPI::fromJsonValue(m_ebay_collect_and_remit_taxes, json[QString("ebayCollectAndRemitTaxes")]);
    m_ebay_collect_and_remit_taxes_isSet = !json[QString("ebayCollectAndRemitTaxes")].isNull() && m_ebay_collect_and_remit_taxes_isValid;

    m_ebay_collected_charges_isValid = ::OpenAPI::fromJsonValue(m_ebay_collected_charges, json[QString("ebayCollectedCharges")]);
    m_ebay_collected_charges_isSet = !json[QString("ebayCollectedCharges")].isNull() && m_ebay_collected_charges_isValid;

    m_gift_details_isValid = ::OpenAPI::fromJsonValue(m_gift_details, json[QString("giftDetails")]);
    m_gift_details_isSet = !json[QString("giftDetails")].isNull() && m_gift_details_isValid;

    m_item_location_isValid = ::OpenAPI::fromJsonValue(m_item_location, json[QString("itemLocation")]);
    m_item_location_isSet = !json[QString("itemLocation")].isNull() && m_item_location_isValid;

    m_legacy_item_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_item_id, json[QString("legacyItemId")]);
    m_legacy_item_id_isSet = !json[QString("legacyItemId")].isNull() && m_legacy_item_id_isValid;

    m_legacy_variation_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_variation_id, json[QString("legacyVariationId")]);
    m_legacy_variation_id_isSet = !json[QString("legacyVariationId")].isNull() && m_legacy_variation_id_isValid;

    m_line_item_cost_isValid = ::OpenAPI::fromJsonValue(m_line_item_cost, json[QString("lineItemCost")]);
    m_line_item_cost_isSet = !json[QString("lineItemCost")].isNull() && m_line_item_cost_isValid;

    m_line_item_fulfillment_instructions_isValid = ::OpenAPI::fromJsonValue(m_line_item_fulfillment_instructions, json[QString("lineItemFulfillmentInstructions")]);
    m_line_item_fulfillment_instructions_isSet = !json[QString("lineItemFulfillmentInstructions")].isNull() && m_line_item_fulfillment_instructions_isValid;

    m_line_item_fulfillment_status_isValid = ::OpenAPI::fromJsonValue(m_line_item_fulfillment_status, json[QString("lineItemFulfillmentStatus")]);
    m_line_item_fulfillment_status_isSet = !json[QString("lineItemFulfillmentStatus")].isNull() && m_line_item_fulfillment_status_isValid;

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("lineItemId")]);
    m_line_item_id_isSet = !json[QString("lineItemId")].isNull() && m_line_item_id_isValid;

    m_linked_order_line_items_isValid = ::OpenAPI::fromJsonValue(m_linked_order_line_items, json[QString("linkedOrderLineItems")]);
    m_linked_order_line_items_isSet = !json[QString("linkedOrderLineItems")].isNull() && m_linked_order_line_items_isValid;

    m_listing_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_listing_marketplace_id, json[QString("listingMarketplaceId")]);
    m_listing_marketplace_id_isSet = !json[QString("listingMarketplaceId")].isNull() && m_listing_marketplace_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_purchase_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_purchase_marketplace_id, json[QString("purchaseMarketplaceId")]);
    m_purchase_marketplace_id_isSet = !json[QString("purchaseMarketplaceId")].isNull() && m_purchase_marketplace_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_sold_format_isValid = ::OpenAPI::fromJsonValue(m_sold_format, json[QString("soldFormat")]);
    m_sold_format_isSet = !json[QString("soldFormat")].isNull() && m_sold_format_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_variation_aspects_isValid = ::OpenAPI::fromJsonValue(m_variation_aspects, json[QString("variationAspects")]);
    m_variation_aspects_isSet = !json[QString("variationAspects")].isNull() && m_variation_aspects_isValid;
}

QString OAILineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_promotions.size() > 0) {
        obj.insert(QString("appliedPromotions"), ::OpenAPI::toJsonValue(m_applied_promotions));
    }
    if (m_delivery_cost.isSet()) {
        obj.insert(QString("deliveryCost"), ::OpenAPI::toJsonValue(m_delivery_cost));
    }
    if (m_discounted_line_item_cost.isSet()) {
        obj.insert(QString("discountedLineItemCost"), ::OpenAPI::toJsonValue(m_discounted_line_item_cost));
    }
    if (m_ebay_collect_and_remit_taxes.size() > 0) {
        obj.insert(QString("ebayCollectAndRemitTaxes"), ::OpenAPI::toJsonValue(m_ebay_collect_and_remit_taxes));
    }
    if (m_ebay_collected_charges.isSet()) {
        obj.insert(QString("ebayCollectedCharges"), ::OpenAPI::toJsonValue(m_ebay_collected_charges));
    }
    if (m_gift_details.isSet()) {
        obj.insert(QString("giftDetails"), ::OpenAPI::toJsonValue(m_gift_details));
    }
    if (m_item_location.isSet()) {
        obj.insert(QString("itemLocation"), ::OpenAPI::toJsonValue(m_item_location));
    }
    if (m_legacy_item_id_isSet) {
        obj.insert(QString("legacyItemId"), ::OpenAPI::toJsonValue(m_legacy_item_id));
    }
    if (m_legacy_variation_id_isSet) {
        obj.insert(QString("legacyVariationId"), ::OpenAPI::toJsonValue(m_legacy_variation_id));
    }
    if (m_line_item_cost.isSet()) {
        obj.insert(QString("lineItemCost"), ::OpenAPI::toJsonValue(m_line_item_cost));
    }
    if (m_line_item_fulfillment_instructions.isSet()) {
        obj.insert(QString("lineItemFulfillmentInstructions"), ::OpenAPI::toJsonValue(m_line_item_fulfillment_instructions));
    }
    if (m_line_item_fulfillment_status_isSet) {
        obj.insert(QString("lineItemFulfillmentStatus"), ::OpenAPI::toJsonValue(m_line_item_fulfillment_status));
    }
    if (m_line_item_id_isSet) {
        obj.insert(QString("lineItemId"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    if (m_linked_order_line_items.size() > 0) {
        obj.insert(QString("linkedOrderLineItems"), ::OpenAPI::toJsonValue(m_linked_order_line_items));
    }
    if (m_listing_marketplace_id_isSet) {
        obj.insert(QString("listingMarketplaceId"), ::OpenAPI::toJsonValue(m_listing_marketplace_id));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_purchase_marketplace_id_isSet) {
        obj.insert(QString("purchaseMarketplaceId"), ::OpenAPI::toJsonValue(m_purchase_marketplace_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_sold_format_isSet) {
        obj.insert(QString("soldFormat"), ::OpenAPI::toJsonValue(m_sold_format));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_variation_aspects.size() > 0) {
        obj.insert(QString("variationAspects"), ::OpenAPI::toJsonValue(m_variation_aspects));
    }
    return obj;
}

QList<OAIAppliedPromotion> OAILineItem::getAppliedPromotions() const {
    return m_applied_promotions;
}
void OAILineItem::setAppliedPromotions(const QList<OAIAppliedPromotion> &applied_promotions) {
    m_applied_promotions = applied_promotions;
    m_applied_promotions_isSet = true;
}

bool OAILineItem::is_applied_promotions_Set() const{
    return m_applied_promotions_isSet;
}

bool OAILineItem::is_applied_promotions_Valid() const{
    return m_applied_promotions_isValid;
}

OAIDeliveryCost OAILineItem::getDeliveryCost() const {
    return m_delivery_cost;
}
void OAILineItem::setDeliveryCost(const OAIDeliveryCost &delivery_cost) {
    m_delivery_cost = delivery_cost;
    m_delivery_cost_isSet = true;
}

bool OAILineItem::is_delivery_cost_Set() const{
    return m_delivery_cost_isSet;
}

bool OAILineItem::is_delivery_cost_Valid() const{
    return m_delivery_cost_isValid;
}

OAIAmount OAILineItem::getDiscountedLineItemCost() const {
    return m_discounted_line_item_cost;
}
void OAILineItem::setDiscountedLineItemCost(const OAIAmount &discounted_line_item_cost) {
    m_discounted_line_item_cost = discounted_line_item_cost;
    m_discounted_line_item_cost_isSet = true;
}

bool OAILineItem::is_discounted_line_item_cost_Set() const{
    return m_discounted_line_item_cost_isSet;
}

bool OAILineItem::is_discounted_line_item_cost_Valid() const{
    return m_discounted_line_item_cost_isValid;
}

QList<OAIEbayCollectAndRemitTax> OAILineItem::getEbayCollectAndRemitTaxes() const {
    return m_ebay_collect_and_remit_taxes;
}
void OAILineItem::setEbayCollectAndRemitTaxes(const QList<OAIEbayCollectAndRemitTax> &ebay_collect_and_remit_taxes) {
    m_ebay_collect_and_remit_taxes = ebay_collect_and_remit_taxes;
    m_ebay_collect_and_remit_taxes_isSet = true;
}

bool OAILineItem::is_ebay_collect_and_remit_taxes_Set() const{
    return m_ebay_collect_and_remit_taxes_isSet;
}

bool OAILineItem::is_ebay_collect_and_remit_taxes_Valid() const{
    return m_ebay_collect_and_remit_taxes_isValid;
}

OAIEbayCollectedCharges OAILineItem::getEbayCollectedCharges() const {
    return m_ebay_collected_charges;
}
void OAILineItem::setEbayCollectedCharges(const OAIEbayCollectedCharges &ebay_collected_charges) {
    m_ebay_collected_charges = ebay_collected_charges;
    m_ebay_collected_charges_isSet = true;
}

bool OAILineItem::is_ebay_collected_charges_Set() const{
    return m_ebay_collected_charges_isSet;
}

bool OAILineItem::is_ebay_collected_charges_Valid() const{
    return m_ebay_collected_charges_isValid;
}

OAIGiftDetails OAILineItem::getGiftDetails() const {
    return m_gift_details;
}
void OAILineItem::setGiftDetails(const OAIGiftDetails &gift_details) {
    m_gift_details = gift_details;
    m_gift_details_isSet = true;
}

bool OAILineItem::is_gift_details_Set() const{
    return m_gift_details_isSet;
}

bool OAILineItem::is_gift_details_Valid() const{
    return m_gift_details_isValid;
}

OAIItemLocation OAILineItem::getItemLocation() const {
    return m_item_location;
}
void OAILineItem::setItemLocation(const OAIItemLocation &item_location) {
    m_item_location = item_location;
    m_item_location_isSet = true;
}

bool OAILineItem::is_item_location_Set() const{
    return m_item_location_isSet;
}

bool OAILineItem::is_item_location_Valid() const{
    return m_item_location_isValid;
}

QString OAILineItem::getLegacyItemId() const {
    return m_legacy_item_id;
}
void OAILineItem::setLegacyItemId(const QString &legacy_item_id) {
    m_legacy_item_id = legacy_item_id;
    m_legacy_item_id_isSet = true;
}

bool OAILineItem::is_legacy_item_id_Set() const{
    return m_legacy_item_id_isSet;
}

bool OAILineItem::is_legacy_item_id_Valid() const{
    return m_legacy_item_id_isValid;
}

QString OAILineItem::getLegacyVariationId() const {
    return m_legacy_variation_id;
}
void OAILineItem::setLegacyVariationId(const QString &legacy_variation_id) {
    m_legacy_variation_id = legacy_variation_id;
    m_legacy_variation_id_isSet = true;
}

bool OAILineItem::is_legacy_variation_id_Set() const{
    return m_legacy_variation_id_isSet;
}

bool OAILineItem::is_legacy_variation_id_Valid() const{
    return m_legacy_variation_id_isValid;
}

OAIAmount OAILineItem::getLineItemCost() const {
    return m_line_item_cost;
}
void OAILineItem::setLineItemCost(const OAIAmount &line_item_cost) {
    m_line_item_cost = line_item_cost;
    m_line_item_cost_isSet = true;
}

bool OAILineItem::is_line_item_cost_Set() const{
    return m_line_item_cost_isSet;
}

bool OAILineItem::is_line_item_cost_Valid() const{
    return m_line_item_cost_isValid;
}

OAILineItemFulfillmentInstructions OAILineItem::getLineItemFulfillmentInstructions() const {
    return m_line_item_fulfillment_instructions;
}
void OAILineItem::setLineItemFulfillmentInstructions(const OAILineItemFulfillmentInstructions &line_item_fulfillment_instructions) {
    m_line_item_fulfillment_instructions = line_item_fulfillment_instructions;
    m_line_item_fulfillment_instructions_isSet = true;
}

bool OAILineItem::is_line_item_fulfillment_instructions_Set() const{
    return m_line_item_fulfillment_instructions_isSet;
}

bool OAILineItem::is_line_item_fulfillment_instructions_Valid() const{
    return m_line_item_fulfillment_instructions_isValid;
}

QString OAILineItem::getLineItemFulfillmentStatus() const {
    return m_line_item_fulfillment_status;
}
void OAILineItem::setLineItemFulfillmentStatus(const QString &line_item_fulfillment_status) {
    m_line_item_fulfillment_status = line_item_fulfillment_status;
    m_line_item_fulfillment_status_isSet = true;
}

bool OAILineItem::is_line_item_fulfillment_status_Set() const{
    return m_line_item_fulfillment_status_isSet;
}

bool OAILineItem::is_line_item_fulfillment_status_Valid() const{
    return m_line_item_fulfillment_status_isValid;
}

QString OAILineItem::getLineItemId() const {
    return m_line_item_id;
}
void OAILineItem::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAILineItem::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAILineItem::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

QList<OAILinkedOrderLineItem> OAILineItem::getLinkedOrderLineItems() const {
    return m_linked_order_line_items;
}
void OAILineItem::setLinkedOrderLineItems(const QList<OAILinkedOrderLineItem> &linked_order_line_items) {
    m_linked_order_line_items = linked_order_line_items;
    m_linked_order_line_items_isSet = true;
}

bool OAILineItem::is_linked_order_line_items_Set() const{
    return m_linked_order_line_items_isSet;
}

bool OAILineItem::is_linked_order_line_items_Valid() const{
    return m_linked_order_line_items_isValid;
}

QString OAILineItem::getListingMarketplaceId() const {
    return m_listing_marketplace_id;
}
void OAILineItem::setListingMarketplaceId(const QString &listing_marketplace_id) {
    m_listing_marketplace_id = listing_marketplace_id;
    m_listing_marketplace_id_isSet = true;
}

bool OAILineItem::is_listing_marketplace_id_Set() const{
    return m_listing_marketplace_id_isSet;
}

bool OAILineItem::is_listing_marketplace_id_Valid() const{
    return m_listing_marketplace_id_isValid;
}

OAILineItemProperties OAILineItem::getProperties() const {
    return m_properties;
}
void OAILineItem::setProperties(const OAILineItemProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAILineItem::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAILineItem::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAILineItem::getPurchaseMarketplaceId() const {
    return m_purchase_marketplace_id;
}
void OAILineItem::setPurchaseMarketplaceId(const QString &purchase_marketplace_id) {
    m_purchase_marketplace_id = purchase_marketplace_id;
    m_purchase_marketplace_id_isSet = true;
}

bool OAILineItem::is_purchase_marketplace_id_Set() const{
    return m_purchase_marketplace_id_isSet;
}

bool OAILineItem::is_purchase_marketplace_id_Valid() const{
    return m_purchase_marketplace_id_isValid;
}

qint32 OAILineItem::getQuantity() const {
    return m_quantity;
}
void OAILineItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILineItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILineItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QList<OAILineItemRefund> OAILineItem::getRefunds() const {
    return m_refunds;
}
void OAILineItem::setRefunds(const QList<OAILineItemRefund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAILineItem::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAILineItem::is_refunds_Valid() const{
    return m_refunds_isValid;
}

QString OAILineItem::getSku() const {
    return m_sku;
}
void OAILineItem::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAILineItem::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAILineItem::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAILineItem::getSoldFormat() const {
    return m_sold_format;
}
void OAILineItem::setSoldFormat(const QString &sold_format) {
    m_sold_format = sold_format;
    m_sold_format_isSet = true;
}

bool OAILineItem::is_sold_format_Set() const{
    return m_sold_format_isSet;
}

bool OAILineItem::is_sold_format_Valid() const{
    return m_sold_format_isValid;
}

QList<OAITax> OAILineItem::getTaxes() const {
    return m_taxes;
}
void OAILineItem::setTaxes(const QList<OAITax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAILineItem::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAILineItem::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAILineItem::getTitle() const {
    return m_title;
}
void OAILineItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILineItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAILineItem::is_title_Valid() const{
    return m_title_isValid;
}

OAIAmount OAILineItem::getTotal() const {
    return m_total;
}
void OAILineItem::setTotal(const OAIAmount &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAILineItem::is_total_Set() const{
    return m_total_isSet;
}

bool OAILineItem::is_total_Valid() const{
    return m_total_isValid;
}

QList<OAINameValuePair> OAILineItem::getVariationAspects() const {
    return m_variation_aspects;
}
void OAILineItem::setVariationAspects(const QList<OAINameValuePair> &variation_aspects) {
    m_variation_aspects = variation_aspects;
    m_variation_aspects_isSet = true;
}

bool OAILineItem::is_variation_aspects_Set() const{
    return m_variation_aspects_isSet;
}

bool OAILineItem::is_variation_aspects_Valid() const{
    return m_variation_aspects_isValid;
}

bool OAILineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_promotions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounted_line_item_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_collect_and_remit_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_collected_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_variation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_fulfillment_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_fulfillment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_order_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sold_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
