/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelStatus::OAICancelStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelStatus::OAICancelStatus() {
    this->initializeModel();
}

OAICancelStatus::~OAICancelStatus() {}

void OAICancelStatus::initializeModel() {

    m_cancel_requests_isSet = false;
    m_cancel_requests_isValid = false;

    m_cancel_state_isSet = false;
    m_cancel_state_isValid = false;

    m_cancelled_date_isSet = false;
    m_cancelled_date_isValid = false;
}

void OAICancelStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelStatus::fromJsonObject(QJsonObject json) {

    m_cancel_requests_isValid = ::OpenAPI::fromJsonValue(m_cancel_requests, json[QString("cancelRequests")]);
    m_cancel_requests_isSet = !json[QString("cancelRequests")].isNull() && m_cancel_requests_isValid;

    m_cancel_state_isValid = ::OpenAPI::fromJsonValue(m_cancel_state, json[QString("cancelState")]);
    m_cancel_state_isSet = !json[QString("cancelState")].isNull() && m_cancel_state_isValid;

    m_cancelled_date_isValid = ::OpenAPI::fromJsonValue(m_cancelled_date, json[QString("cancelledDate")]);
    m_cancelled_date_isSet = !json[QString("cancelledDate")].isNull() && m_cancelled_date_isValid;
}

QString OAICancelStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel_requests.size() > 0) {
        obj.insert(QString("cancelRequests"), ::OpenAPI::toJsonValue(m_cancel_requests));
    }
    if (m_cancel_state_isSet) {
        obj.insert(QString("cancelState"), ::OpenAPI::toJsonValue(m_cancel_state));
    }
    if (m_cancelled_date_isSet) {
        obj.insert(QString("cancelledDate"), ::OpenAPI::toJsonValue(m_cancelled_date));
    }
    return obj;
}

QList<OAICancelRequest> OAICancelStatus::getCancelRequests() const {
    return m_cancel_requests;
}
void OAICancelStatus::setCancelRequests(const QList<OAICancelRequest> &cancel_requests) {
    m_cancel_requests = cancel_requests;
    m_cancel_requests_isSet = true;
}

bool OAICancelStatus::is_cancel_requests_Set() const{
    return m_cancel_requests_isSet;
}

bool OAICancelStatus::is_cancel_requests_Valid() const{
    return m_cancel_requests_isValid;
}

QString OAICancelStatus::getCancelState() const {
    return m_cancel_state;
}
void OAICancelStatus::setCancelState(const QString &cancel_state) {
    m_cancel_state = cancel_state;
    m_cancel_state_isSet = true;
}

bool OAICancelStatus::is_cancel_state_Set() const{
    return m_cancel_state_isSet;
}

bool OAICancelStatus::is_cancel_state_Valid() const{
    return m_cancel_state_isValid;
}

QString OAICancelStatus::getCancelledDate() const {
    return m_cancelled_date;
}
void OAICancelStatus::setCancelledDate(const QString &cancelled_date) {
    m_cancelled_date = cancelled_date;
    m_cancelled_date_isSet = true;
}

bool OAICancelStatus::is_cancelled_date_Set() const{
    return m_cancelled_date_isSet;
}

bool OAICancelStatus::is_cancelled_date_Valid() const{
    return m_cancelled_date_isValid;
}

bool OAICancelStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelled_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
