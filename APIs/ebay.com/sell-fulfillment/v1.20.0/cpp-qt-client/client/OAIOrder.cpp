/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_buyer_checkout_notes_isSet = false;
    m_buyer_checkout_notes_isValid = false;

    m_cancel_status_isSet = false;
    m_cancel_status_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_ebay_collect_and_remit_tax_isSet = false;
    m_ebay_collect_and_remit_tax_isValid = false;

    m_fulfillment_hrefs_isSet = false;
    m_fulfillment_hrefs_isValid = false;

    m_fulfillment_start_instructions_isSet = false;
    m_fulfillment_start_instructions_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_legacy_order_id_isSet = false;
    m_legacy_order_id_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_order_fulfillment_status_isSet = false;
    m_order_fulfillment_status_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_payment_status_isSet = false;
    m_order_payment_status_isValid = false;

    m_payment_summary_isSet = false;
    m_payment_summary_isValid = false;

    m_pricing_summary_isSet = false;
    m_pricing_summary_isValid = false;

    m_program_isSet = false;
    m_program_isValid = false;

    m_sales_record_reference_isSet = false;
    m_sales_record_reference_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_total_fee_basis_amount_isSet = false;
    m_total_fee_basis_amount_isValid = false;

    m_total_marketplace_fee_isSet = false;
    m_total_marketplace_fee_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_buyer_checkout_notes_isValid = ::OpenAPI::fromJsonValue(m_buyer_checkout_notes, json[QString("buyerCheckoutNotes")]);
    m_buyer_checkout_notes_isSet = !json[QString("buyerCheckoutNotes")].isNull() && m_buyer_checkout_notes_isValid;

    m_cancel_status_isValid = ::OpenAPI::fromJsonValue(m_cancel_status, json[QString("cancelStatus")]);
    m_cancel_status_isSet = !json[QString("cancelStatus")].isNull() && m_cancel_status_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_ebay_collect_and_remit_tax_isValid = ::OpenAPI::fromJsonValue(m_ebay_collect_and_remit_tax, json[QString("ebayCollectAndRemitTax")]);
    m_ebay_collect_and_remit_tax_isSet = !json[QString("ebayCollectAndRemitTax")].isNull() && m_ebay_collect_and_remit_tax_isValid;

    m_fulfillment_hrefs_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_hrefs, json[QString("fulfillmentHrefs")]);
    m_fulfillment_hrefs_isSet = !json[QString("fulfillmentHrefs")].isNull() && m_fulfillment_hrefs_isValid;

    m_fulfillment_start_instructions_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_start_instructions, json[QString("fulfillmentStartInstructions")]);
    m_fulfillment_start_instructions_isSet = !json[QString("fulfillmentStartInstructions")].isNull() && m_fulfillment_start_instructions_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_legacy_order_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_order_id, json[QString("legacyOrderId")]);
    m_legacy_order_id_isSet = !json[QString("legacyOrderId")].isNull() && m_legacy_order_id_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_order_fulfillment_status_isValid = ::OpenAPI::fromJsonValue(m_order_fulfillment_status, json[QString("orderFulfillmentStatus")]);
    m_order_fulfillment_status_isSet = !json[QString("orderFulfillmentStatus")].isNull() && m_order_fulfillment_status_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_order_payment_status_isValid = ::OpenAPI::fromJsonValue(m_order_payment_status, json[QString("orderPaymentStatus")]);
    m_order_payment_status_isSet = !json[QString("orderPaymentStatus")].isNull() && m_order_payment_status_isValid;

    m_payment_summary_isValid = ::OpenAPI::fromJsonValue(m_payment_summary, json[QString("paymentSummary")]);
    m_payment_summary_isSet = !json[QString("paymentSummary")].isNull() && m_payment_summary_isValid;

    m_pricing_summary_isValid = ::OpenAPI::fromJsonValue(m_pricing_summary, json[QString("pricingSummary")]);
    m_pricing_summary_isSet = !json[QString("pricingSummary")].isNull() && m_pricing_summary_isValid;

    m_program_isValid = ::OpenAPI::fromJsonValue(m_program, json[QString("program")]);
    m_program_isSet = !json[QString("program")].isNull() && m_program_isValid;

    m_sales_record_reference_isValid = ::OpenAPI::fromJsonValue(m_sales_record_reference, json[QString("salesRecordReference")]);
    m_sales_record_reference_isSet = !json[QString("salesRecordReference")].isNull() && m_sales_record_reference_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("sellerId")]);
    m_seller_id_isSet = !json[QString("sellerId")].isNull() && m_seller_id_isValid;

    m_total_fee_basis_amount_isValid = ::OpenAPI::fromJsonValue(m_total_fee_basis_amount, json[QString("totalFeeBasisAmount")]);
    m_total_fee_basis_amount_isSet = !json[QString("totalFeeBasisAmount")].isNull() && m_total_fee_basis_amount_isValid;

    m_total_marketplace_fee_isValid = ::OpenAPI::fromJsonValue(m_total_marketplace_fee, json[QString("totalMarketplaceFee")]);
    m_total_marketplace_fee_isSet = !json[QString("totalMarketplaceFee")].isNull() && m_total_marketplace_fee_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_buyer_checkout_notes_isSet) {
        obj.insert(QString("buyerCheckoutNotes"), ::OpenAPI::toJsonValue(m_buyer_checkout_notes));
    }
    if (m_cancel_status.isSet()) {
        obj.insert(QString("cancelStatus"), ::OpenAPI::toJsonValue(m_cancel_status));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_ebay_collect_and_remit_tax_isSet) {
        obj.insert(QString("ebayCollectAndRemitTax"), ::OpenAPI::toJsonValue(m_ebay_collect_and_remit_tax));
    }
    if (m_fulfillment_hrefs.size() > 0) {
        obj.insert(QString("fulfillmentHrefs"), ::OpenAPI::toJsonValue(m_fulfillment_hrefs));
    }
    if (m_fulfillment_start_instructions.size() > 0) {
        obj.insert(QString("fulfillmentStartInstructions"), ::OpenAPI::toJsonValue(m_fulfillment_start_instructions));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_legacy_order_id_isSet) {
        obj.insert(QString("legacyOrderId"), ::OpenAPI::toJsonValue(m_legacy_order_id));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_order_fulfillment_status_isSet) {
        obj.insert(QString("orderFulfillmentStatus"), ::OpenAPI::toJsonValue(m_order_fulfillment_status));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_payment_status_isSet) {
        obj.insert(QString("orderPaymentStatus"), ::OpenAPI::toJsonValue(m_order_payment_status));
    }
    if (m_payment_summary.isSet()) {
        obj.insert(QString("paymentSummary"), ::OpenAPI::toJsonValue(m_payment_summary));
    }
    if (m_pricing_summary.isSet()) {
        obj.insert(QString("pricingSummary"), ::OpenAPI::toJsonValue(m_pricing_summary));
    }
    if (m_program.isSet()) {
        obj.insert(QString("program"), ::OpenAPI::toJsonValue(m_program));
    }
    if (m_sales_record_reference_isSet) {
        obj.insert(QString("salesRecordReference"), ::OpenAPI::toJsonValue(m_sales_record_reference));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("sellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_total_fee_basis_amount.isSet()) {
        obj.insert(QString("totalFeeBasisAmount"), ::OpenAPI::toJsonValue(m_total_fee_basis_amount));
    }
    if (m_total_marketplace_fee.isSet()) {
        obj.insert(QString("totalMarketplaceFee"), ::OpenAPI::toJsonValue(m_total_marketplace_fee));
    }
    return obj;
}

OAIBuyer OAIOrder::getBuyer() const {
    return m_buyer;
}
void OAIOrder::setBuyer(const OAIBuyer &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIOrder::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIOrder::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QString OAIOrder::getBuyerCheckoutNotes() const {
    return m_buyer_checkout_notes;
}
void OAIOrder::setBuyerCheckoutNotes(const QString &buyer_checkout_notes) {
    m_buyer_checkout_notes = buyer_checkout_notes;
    m_buyer_checkout_notes_isSet = true;
}

bool OAIOrder::is_buyer_checkout_notes_Set() const{
    return m_buyer_checkout_notes_isSet;
}

bool OAIOrder::is_buyer_checkout_notes_Valid() const{
    return m_buyer_checkout_notes_isValid;
}

OAICancelStatus OAIOrder::getCancelStatus() const {
    return m_cancel_status;
}
void OAIOrder::setCancelStatus(const OAICancelStatus &cancel_status) {
    m_cancel_status = cancel_status;
    m_cancel_status_isSet = true;
}

bool OAIOrder::is_cancel_status_Set() const{
    return m_cancel_status_isSet;
}

bool OAIOrder::is_cancel_status_Valid() const{
    return m_cancel_status_isValid;
}

QString OAIOrder::getCreationDate() const {
    return m_creation_date;
}
void OAIOrder::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIOrder::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIOrder::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIOrder::isEbayCollectAndRemitTax() const {
    return m_ebay_collect_and_remit_tax;
}
void OAIOrder::setEbayCollectAndRemitTax(const bool &ebay_collect_and_remit_tax) {
    m_ebay_collect_and_remit_tax = ebay_collect_and_remit_tax;
    m_ebay_collect_and_remit_tax_isSet = true;
}

bool OAIOrder::is_ebay_collect_and_remit_tax_Set() const{
    return m_ebay_collect_and_remit_tax_isSet;
}

bool OAIOrder::is_ebay_collect_and_remit_tax_Valid() const{
    return m_ebay_collect_and_remit_tax_isValid;
}

QList<QString> OAIOrder::getFulfillmentHrefs() const {
    return m_fulfillment_hrefs;
}
void OAIOrder::setFulfillmentHrefs(const QList<QString> &fulfillment_hrefs) {
    m_fulfillment_hrefs = fulfillment_hrefs;
    m_fulfillment_hrefs_isSet = true;
}

bool OAIOrder::is_fulfillment_hrefs_Set() const{
    return m_fulfillment_hrefs_isSet;
}

bool OAIOrder::is_fulfillment_hrefs_Valid() const{
    return m_fulfillment_hrefs_isValid;
}

QList<OAIFulfillmentStartInstruction> OAIOrder::getFulfillmentStartInstructions() const {
    return m_fulfillment_start_instructions;
}
void OAIOrder::setFulfillmentStartInstructions(const QList<OAIFulfillmentStartInstruction> &fulfillment_start_instructions) {
    m_fulfillment_start_instructions = fulfillment_start_instructions;
    m_fulfillment_start_instructions_isSet = true;
}

bool OAIOrder::is_fulfillment_start_instructions_Set() const{
    return m_fulfillment_start_instructions_isSet;
}

bool OAIOrder::is_fulfillment_start_instructions_Valid() const{
    return m_fulfillment_start_instructions_isValid;
}

QString OAIOrder::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIOrder::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIOrder::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIOrder::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIOrder::getLegacyOrderId() const {
    return m_legacy_order_id;
}
void OAIOrder::setLegacyOrderId(const QString &legacy_order_id) {
    m_legacy_order_id = legacy_order_id;
    m_legacy_order_id_isSet = true;
}

bool OAIOrder::is_legacy_order_id_Set() const{
    return m_legacy_order_id_isSet;
}

bool OAIOrder::is_legacy_order_id_Valid() const{
    return m_legacy_order_id_isValid;
}

QList<OAILineItem> OAIOrder::getLineItems() const {
    return m_line_items;
}
void OAIOrder::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIOrder::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIOrder::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIOrder::getOrderFulfillmentStatus() const {
    return m_order_fulfillment_status;
}
void OAIOrder::setOrderFulfillmentStatus(const QString &order_fulfillment_status) {
    m_order_fulfillment_status = order_fulfillment_status;
    m_order_fulfillment_status_isSet = true;
}

bool OAIOrder::is_order_fulfillment_status_Set() const{
    return m_order_fulfillment_status_isSet;
}

bool OAIOrder::is_order_fulfillment_status_Valid() const{
    return m_order_fulfillment_status_isValid;
}

QString OAIOrder::getOrderId() const {
    return m_order_id;
}
void OAIOrder::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrder::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrder::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIOrder::getOrderPaymentStatus() const {
    return m_order_payment_status;
}
void OAIOrder::setOrderPaymentStatus(const QString &order_payment_status) {
    m_order_payment_status = order_payment_status;
    m_order_payment_status_isSet = true;
}

bool OAIOrder::is_order_payment_status_Set() const{
    return m_order_payment_status_isSet;
}

bool OAIOrder::is_order_payment_status_Valid() const{
    return m_order_payment_status_isValid;
}

OAIPaymentSummary OAIOrder::getPaymentSummary() const {
    return m_payment_summary;
}
void OAIOrder::setPaymentSummary(const OAIPaymentSummary &payment_summary) {
    m_payment_summary = payment_summary;
    m_payment_summary_isSet = true;
}

bool OAIOrder::is_payment_summary_Set() const{
    return m_payment_summary_isSet;
}

bool OAIOrder::is_payment_summary_Valid() const{
    return m_payment_summary_isValid;
}

OAIPricingSummary OAIOrder::getPricingSummary() const {
    return m_pricing_summary;
}
void OAIOrder::setPricingSummary(const OAIPricingSummary &pricing_summary) {
    m_pricing_summary = pricing_summary;
    m_pricing_summary_isSet = true;
}

bool OAIOrder::is_pricing_summary_Set() const{
    return m_pricing_summary_isSet;
}

bool OAIOrder::is_pricing_summary_Valid() const{
    return m_pricing_summary_isValid;
}

OAIProgram OAIOrder::getProgram() const {
    return m_program;
}
void OAIOrder::setProgram(const OAIProgram &program) {
    m_program = program;
    m_program_isSet = true;
}

bool OAIOrder::is_program_Set() const{
    return m_program_isSet;
}

bool OAIOrder::is_program_Valid() const{
    return m_program_isValid;
}

QString OAIOrder::getSalesRecordReference() const {
    return m_sales_record_reference;
}
void OAIOrder::setSalesRecordReference(const QString &sales_record_reference) {
    m_sales_record_reference = sales_record_reference;
    m_sales_record_reference_isSet = true;
}

bool OAIOrder::is_sales_record_reference_Set() const{
    return m_sales_record_reference_isSet;
}

bool OAIOrder::is_sales_record_reference_Valid() const{
    return m_sales_record_reference_isValid;
}

QString OAIOrder::getSellerId() const {
    return m_seller_id;
}
void OAIOrder::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAIOrder::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAIOrder::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

OAIAmount OAIOrder::getTotalFeeBasisAmount() const {
    return m_total_fee_basis_amount;
}
void OAIOrder::setTotalFeeBasisAmount(const OAIAmount &total_fee_basis_amount) {
    m_total_fee_basis_amount = total_fee_basis_amount;
    m_total_fee_basis_amount_isSet = true;
}

bool OAIOrder::is_total_fee_basis_amount_Set() const{
    return m_total_fee_basis_amount_isSet;
}

bool OAIOrder::is_total_fee_basis_amount_Valid() const{
    return m_total_fee_basis_amount_isValid;
}

OAIAmount OAIOrder::getTotalMarketplaceFee() const {
    return m_total_marketplace_fee;
}
void OAIOrder::setTotalMarketplaceFee(const OAIAmount &total_marketplace_fee) {
    m_total_marketplace_fee = total_marketplace_fee;
    m_total_marketplace_fee_isSet = true;
}

bool OAIOrder::is_total_marketplace_fee_Set() const{
    return m_total_marketplace_fee_isSet;
}

bool OAIOrder::is_total_marketplace_fee_Valid() const{
    return m_total_marketplace_fee_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_checkout_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_collect_and_remit_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_hrefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_start_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_fulfillment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_record_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_fee_basis_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_marketplace_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
