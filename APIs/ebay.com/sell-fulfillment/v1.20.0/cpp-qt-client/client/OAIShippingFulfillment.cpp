/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingFulfillment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingFulfillment::OAIShippingFulfillment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingFulfillment::OAIShippingFulfillment() {
    this->initializeModel();
}

OAIShippingFulfillment::~OAIShippingFulfillment() {}

void OAIShippingFulfillment::initializeModel() {

    m_fulfillment_id_isSet = false;
    m_fulfillment_id_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_shipment_tracking_number_isSet = false;
    m_shipment_tracking_number_isValid = false;

    m_shipped_date_isSet = false;
    m_shipped_date_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;
}

void OAIShippingFulfillment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingFulfillment::fromJsonObject(QJsonObject json) {

    m_fulfillment_id_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_id, json[QString("fulfillmentId")]);
    m_fulfillment_id_isSet = !json[QString("fulfillmentId")].isNull() && m_fulfillment_id_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_shipment_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_shipment_tracking_number, json[QString("shipmentTrackingNumber")]);
    m_shipment_tracking_number_isSet = !json[QString("shipmentTrackingNumber")].isNull() && m_shipment_tracking_number_isValid;

    m_shipped_date_isValid = ::OpenAPI::fromJsonValue(m_shipped_date, json[QString("shippedDate")]);
    m_shipped_date_isSet = !json[QString("shippedDate")].isNull() && m_shipped_date_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;
}

QString OAIShippingFulfillment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingFulfillment::asJsonObject() const {
    QJsonObject obj;
    if (m_fulfillment_id_isSet) {
        obj.insert(QString("fulfillmentId"), ::OpenAPI::toJsonValue(m_fulfillment_id));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_shipment_tracking_number_isSet) {
        obj.insert(QString("shipmentTrackingNumber"), ::OpenAPI::toJsonValue(m_shipment_tracking_number));
    }
    if (m_shipped_date_isSet) {
        obj.insert(QString("shippedDate"), ::OpenAPI::toJsonValue(m_shipped_date));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    return obj;
}

QString OAIShippingFulfillment::getFulfillmentId() const {
    return m_fulfillment_id;
}
void OAIShippingFulfillment::setFulfillmentId(const QString &fulfillment_id) {
    m_fulfillment_id = fulfillment_id;
    m_fulfillment_id_isSet = true;
}

bool OAIShippingFulfillment::is_fulfillment_id_Set() const{
    return m_fulfillment_id_isSet;
}

bool OAIShippingFulfillment::is_fulfillment_id_Valid() const{
    return m_fulfillment_id_isValid;
}

QList<OAILineItemReference> OAIShippingFulfillment::getLineItems() const {
    return m_line_items;
}
void OAIShippingFulfillment::setLineItems(const QList<OAILineItemReference> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIShippingFulfillment::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIShippingFulfillment::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIShippingFulfillment::getShipmentTrackingNumber() const {
    return m_shipment_tracking_number;
}
void OAIShippingFulfillment::setShipmentTrackingNumber(const QString &shipment_tracking_number) {
    m_shipment_tracking_number = shipment_tracking_number;
    m_shipment_tracking_number_isSet = true;
}

bool OAIShippingFulfillment::is_shipment_tracking_number_Set() const{
    return m_shipment_tracking_number_isSet;
}

bool OAIShippingFulfillment::is_shipment_tracking_number_Valid() const{
    return m_shipment_tracking_number_isValid;
}

QString OAIShippingFulfillment::getShippedDate() const {
    return m_shipped_date;
}
void OAIShippingFulfillment::setShippedDate(const QString &shipped_date) {
    m_shipped_date = shipped_date;
    m_shipped_date_isSet = true;
}

bool OAIShippingFulfillment::is_shipped_date_Set() const{
    return m_shipped_date_isSet;
}

bool OAIShippingFulfillment::is_shipped_date_Valid() const{
    return m_shipped_date_isValid;
}

QString OAIShippingFulfillment::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIShippingFulfillment::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIShippingFulfillment::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIShippingFulfillment::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

bool OAIShippingFulfillment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fulfillment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingFulfillment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
