/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryCost::OAIDeliveryCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryCost::OAIDeliveryCost() {
    this->initializeModel();
}

OAIDeliveryCost::~OAIDeliveryCost() {}

void OAIDeliveryCost::initializeModel() {

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_handling_cost_isSet = false;
    m_handling_cost_isValid = false;

    m_import_charges_isSet = false;
    m_import_charges_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_intermediation_fee_isSet = false;
    m_shipping_intermediation_fee_isValid = false;
}

void OAIDeliveryCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryCost::fromJsonObject(QJsonObject json) {

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_handling_cost_isValid = ::OpenAPI::fromJsonValue(m_handling_cost, json[QString("handlingCost")]);
    m_handling_cost_isSet = !json[QString("handlingCost")].isNull() && m_handling_cost_isValid;

    m_import_charges_isValid = ::OpenAPI::fromJsonValue(m_import_charges, json[QString("importCharges")]);
    m_import_charges_isSet = !json[QString("importCharges")].isNull() && m_import_charges_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_intermediation_fee_isValid = ::OpenAPI::fromJsonValue(m_shipping_intermediation_fee, json[QString("shippingIntermediationFee")]);
    m_shipping_intermediation_fee_isSet = !json[QString("shippingIntermediationFee")].isNull() && m_shipping_intermediation_fee_isValid;
}

QString OAIDeliveryCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryCost::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_handling_cost.isSet()) {
        obj.insert(QString("handlingCost"), ::OpenAPI::toJsonValue(m_handling_cost));
    }
    if (m_import_charges.isSet()) {
        obj.insert(QString("importCharges"), ::OpenAPI::toJsonValue(m_import_charges));
    }
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_intermediation_fee.isSet()) {
        obj.insert(QString("shippingIntermediationFee"), ::OpenAPI::toJsonValue(m_shipping_intermediation_fee));
    }
    return obj;
}

OAIAmount OAIDeliveryCost::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIDeliveryCost::setDiscountAmount(const OAIAmount &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIDeliveryCost::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIDeliveryCost::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIAmount OAIDeliveryCost::getHandlingCost() const {
    return m_handling_cost;
}
void OAIDeliveryCost::setHandlingCost(const OAIAmount &handling_cost) {
    m_handling_cost = handling_cost;
    m_handling_cost_isSet = true;
}

bool OAIDeliveryCost::is_handling_cost_Set() const{
    return m_handling_cost_isSet;
}

bool OAIDeliveryCost::is_handling_cost_Valid() const{
    return m_handling_cost_isValid;
}

OAIAmount OAIDeliveryCost::getImportCharges() const {
    return m_import_charges;
}
void OAIDeliveryCost::setImportCharges(const OAIAmount &import_charges) {
    m_import_charges = import_charges;
    m_import_charges_isSet = true;
}

bool OAIDeliveryCost::is_import_charges_Set() const{
    return m_import_charges_isSet;
}

bool OAIDeliveryCost::is_import_charges_Valid() const{
    return m_import_charges_isValid;
}

OAIAmount OAIDeliveryCost::getShippingCost() const {
    return m_shipping_cost;
}
void OAIDeliveryCost::setShippingCost(const OAIAmount &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIDeliveryCost::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIDeliveryCost::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

OAIAmount OAIDeliveryCost::getShippingIntermediationFee() const {
    return m_shipping_intermediation_fee;
}
void OAIDeliveryCost::setShippingIntermediationFee(const OAIAmount &shipping_intermediation_fee) {
    m_shipping_intermediation_fee = shipping_intermediation_fee;
    m_shipping_intermediation_fee_isSet = true;
}

bool OAIDeliveryCost::is_shipping_intermediation_fee_Set() const{
    return m_shipping_intermediation_fee_isSet;
}

bool OAIDeliveryCost::is_shipping_intermediation_fee_Valid() const{
    return m_shipping_intermediation_fee_isValid;
}

bool OAIDeliveryCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_handling_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_intermediation_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
