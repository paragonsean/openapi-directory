/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDisputeOutcomeDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDisputeOutcomeDetail::OAIPaymentDisputeOutcomeDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDisputeOutcomeDetail::OAIPaymentDisputeOutcomeDetail() {
    this->initializeModel();
}

OAIPaymentDisputeOutcomeDetail::~OAIPaymentDisputeOutcomeDetail() {}

void OAIPaymentDisputeOutcomeDetail::initializeModel() {

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_protected_amount_isSet = false;
    m_protected_amount_isValid = false;

    m_protection_status_isSet = false;
    m_protection_status_isValid = false;

    m_reason_for_closure_isSet = false;
    m_reason_for_closure_isValid = false;

    m_recoup_amount_isSet = false;
    m_recoup_amount_isValid = false;

    m_total_fee_credit_isSet = false;
    m_total_fee_credit_isValid = false;
}

void OAIPaymentDisputeOutcomeDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDisputeOutcomeDetail::fromJsonObject(QJsonObject json) {

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_protected_amount_isValid = ::OpenAPI::fromJsonValue(m_protected_amount, json[QString("protectedAmount")]);
    m_protected_amount_isSet = !json[QString("protectedAmount")].isNull() && m_protected_amount_isValid;

    m_protection_status_isValid = ::OpenAPI::fromJsonValue(m_protection_status, json[QString("protectionStatus")]);
    m_protection_status_isSet = !json[QString("protectionStatus")].isNull() && m_protection_status_isValid;

    m_reason_for_closure_isValid = ::OpenAPI::fromJsonValue(m_reason_for_closure, json[QString("reasonForClosure")]);
    m_reason_for_closure_isSet = !json[QString("reasonForClosure")].isNull() && m_reason_for_closure_isValid;

    m_recoup_amount_isValid = ::OpenAPI::fromJsonValue(m_recoup_amount, json[QString("recoupAmount")]);
    m_recoup_amount_isSet = !json[QString("recoupAmount")].isNull() && m_recoup_amount_isValid;

    m_total_fee_credit_isValid = ::OpenAPI::fromJsonValue(m_total_fee_credit, json[QString("totalFeeCredit")]);
    m_total_fee_credit_isSet = !json[QString("totalFeeCredit")].isNull() && m_total_fee_credit_isValid;
}

QString OAIPaymentDisputeOutcomeDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDisputeOutcomeDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_fees.isSet()) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_protected_amount.isSet()) {
        obj.insert(QString("protectedAmount"), ::OpenAPI::toJsonValue(m_protected_amount));
    }
    if (m_protection_status_isSet) {
        obj.insert(QString("protectionStatus"), ::OpenAPI::toJsonValue(m_protection_status));
    }
    if (m_reason_for_closure_isSet) {
        obj.insert(QString("reasonForClosure"), ::OpenAPI::toJsonValue(m_reason_for_closure));
    }
    if (m_recoup_amount.isSet()) {
        obj.insert(QString("recoupAmount"), ::OpenAPI::toJsonValue(m_recoup_amount));
    }
    if (m_total_fee_credit.isSet()) {
        obj.insert(QString("totalFeeCredit"), ::OpenAPI::toJsonValue(m_total_fee_credit));
    }
    return obj;
}

OAISimpleAmount OAIPaymentDisputeOutcomeDetail::getFees() const {
    return m_fees;
}
void OAIPaymentDisputeOutcomeDetail::setFees(const OAISimpleAmount &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIPaymentDisputeOutcomeDetail::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIPaymentDisputeOutcomeDetail::is_fees_Valid() const{
    return m_fees_isValid;
}

OAISimpleAmount OAIPaymentDisputeOutcomeDetail::getProtectedAmount() const {
    return m_protected_amount;
}
void OAIPaymentDisputeOutcomeDetail::setProtectedAmount(const OAISimpleAmount &protected_amount) {
    m_protected_amount = protected_amount;
    m_protected_amount_isSet = true;
}

bool OAIPaymentDisputeOutcomeDetail::is_protected_amount_Set() const{
    return m_protected_amount_isSet;
}

bool OAIPaymentDisputeOutcomeDetail::is_protected_amount_Valid() const{
    return m_protected_amount_isValid;
}

QString OAIPaymentDisputeOutcomeDetail::getProtectionStatus() const {
    return m_protection_status;
}
void OAIPaymentDisputeOutcomeDetail::setProtectionStatus(const QString &protection_status) {
    m_protection_status = protection_status;
    m_protection_status_isSet = true;
}

bool OAIPaymentDisputeOutcomeDetail::is_protection_status_Set() const{
    return m_protection_status_isSet;
}

bool OAIPaymentDisputeOutcomeDetail::is_protection_status_Valid() const{
    return m_protection_status_isValid;
}

QString OAIPaymentDisputeOutcomeDetail::getReasonForClosure() const {
    return m_reason_for_closure;
}
void OAIPaymentDisputeOutcomeDetail::setReasonForClosure(const QString &reason_for_closure) {
    m_reason_for_closure = reason_for_closure;
    m_reason_for_closure_isSet = true;
}

bool OAIPaymentDisputeOutcomeDetail::is_reason_for_closure_Set() const{
    return m_reason_for_closure_isSet;
}

bool OAIPaymentDisputeOutcomeDetail::is_reason_for_closure_Valid() const{
    return m_reason_for_closure_isValid;
}

OAISimpleAmount OAIPaymentDisputeOutcomeDetail::getRecoupAmount() const {
    return m_recoup_amount;
}
void OAIPaymentDisputeOutcomeDetail::setRecoupAmount(const OAISimpleAmount &recoup_amount) {
    m_recoup_amount = recoup_amount;
    m_recoup_amount_isSet = true;
}

bool OAIPaymentDisputeOutcomeDetail::is_recoup_amount_Set() const{
    return m_recoup_amount_isSet;
}

bool OAIPaymentDisputeOutcomeDetail::is_recoup_amount_Valid() const{
    return m_recoup_amount_isValid;
}

OAISimpleAmount OAIPaymentDisputeOutcomeDetail::getTotalFeeCredit() const {
    return m_total_fee_credit;
}
void OAIPaymentDisputeOutcomeDetail::setTotalFeeCredit(const OAISimpleAmount &total_fee_credit) {
    m_total_fee_credit = total_fee_credit;
    m_total_fee_credit_isSet = true;
}

bool OAIPaymentDisputeOutcomeDetail::is_total_fee_credit_Set() const{
    return m_total_fee_credit_isSet;
}

bool OAIPaymentDisputeOutcomeDetail::is_total_fee_credit_Valid() const{
    return m_total_fee_credit_isValid;
}

bool OAIPaymentDisputeOutcomeDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fees.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_closure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recoup_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_fee_credit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDisputeOutcomeDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
