/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeAmount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeAmount::OAIDisputeAmount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeAmount::OAIDisputeAmount() {
    this->initializeModel();
}

OAIDisputeAmount::~OAIDisputeAmount() {}

void OAIDisputeAmount::initializeModel() {

    m_converted_from_currency_isSet = false;
    m_converted_from_currency_isValid = false;

    m_converted_from_value_isSet = false;
    m_converted_from_value_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDisputeAmount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisputeAmount::fromJsonObject(QJsonObject json) {

    m_converted_from_currency_isValid = ::OpenAPI::fromJsonValue(m_converted_from_currency, json[QString("convertedFromCurrency")]);
    m_converted_from_currency_isSet = !json[QString("convertedFromCurrency")].isNull() && m_converted_from_currency_isValid;

    m_converted_from_value_isValid = ::OpenAPI::fromJsonValue(m_converted_from_value, json[QString("convertedFromValue")]);
    m_converted_from_value_isSet = !json[QString("convertedFromValue")].isNull() && m_converted_from_value_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDisputeAmount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisputeAmount::asJsonObject() const {
    QJsonObject obj;
    if (m_converted_from_currency_isSet) {
        obj.insert(QString("convertedFromCurrency"), ::OpenAPI::toJsonValue(m_converted_from_currency));
    }
    if (m_converted_from_value_isSet) {
        obj.insert(QString("convertedFromValue"), ::OpenAPI::toJsonValue(m_converted_from_value));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDisputeAmount::getConvertedFromCurrency() const {
    return m_converted_from_currency;
}
void OAIDisputeAmount::setConvertedFromCurrency(const QString &converted_from_currency) {
    m_converted_from_currency = converted_from_currency;
    m_converted_from_currency_isSet = true;
}

bool OAIDisputeAmount::is_converted_from_currency_Set() const{
    return m_converted_from_currency_isSet;
}

bool OAIDisputeAmount::is_converted_from_currency_Valid() const{
    return m_converted_from_currency_isValid;
}

QString OAIDisputeAmount::getConvertedFromValue() const {
    return m_converted_from_value;
}
void OAIDisputeAmount::setConvertedFromValue(const QString &converted_from_value) {
    m_converted_from_value = converted_from_value;
    m_converted_from_value_isSet = true;
}

bool OAIDisputeAmount::is_converted_from_value_Set() const{
    return m_converted_from_value_isSet;
}

bool OAIDisputeAmount::is_converted_from_value_Valid() const{
    return m_converted_from_value_isValid;
}

QString OAIDisputeAmount::getCurrency() const {
    return m_currency;
}
void OAIDisputeAmount::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDisputeAmount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDisputeAmount::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIDisputeAmount::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIDisputeAmount::setExchangeRate(const QString &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIDisputeAmount::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIDisputeAmount::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QString OAIDisputeAmount::getValue() const {
    return m_value;
}
void OAIDisputeAmount::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDisputeAmount::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDisputeAmount::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDisputeAmount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_converted_from_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_converted_from_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisputeAmount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
