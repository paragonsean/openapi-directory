/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxIdentifier::OAITaxIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxIdentifier::OAITaxIdentifier() {
    this->initializeModel();
}

OAITaxIdentifier::~OAITaxIdentifier() {}

void OAITaxIdentifier::initializeModel() {

    m_issuing_country_isSet = false;
    m_issuing_country_isValid = false;

    m_tax_identifier_type_isSet = false;
    m_tax_identifier_type_isValid = false;

    m_taxpayer_id_isSet = false;
    m_taxpayer_id_isValid = false;
}

void OAITaxIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxIdentifier::fromJsonObject(QJsonObject json) {

    m_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_issuing_country, json[QString("issuingCountry")]);
    m_issuing_country_isSet = !json[QString("issuingCountry")].isNull() && m_issuing_country_isValid;

    m_tax_identifier_type_isValid = ::OpenAPI::fromJsonValue(m_tax_identifier_type, json[QString("taxIdentifierType")]);
    m_tax_identifier_type_isSet = !json[QString("taxIdentifierType")].isNull() && m_tax_identifier_type_isValid;

    m_taxpayer_id_isValid = ::OpenAPI::fromJsonValue(m_taxpayer_id, json[QString("taxpayerId")]);
    m_taxpayer_id_isSet = !json[QString("taxpayerId")].isNull() && m_taxpayer_id_isValid;
}

QString OAITaxIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_issuing_country_isSet) {
        obj.insert(QString("issuingCountry"), ::OpenAPI::toJsonValue(m_issuing_country));
    }
    if (m_tax_identifier_type_isSet) {
        obj.insert(QString("taxIdentifierType"), ::OpenAPI::toJsonValue(m_tax_identifier_type));
    }
    if (m_taxpayer_id_isSet) {
        obj.insert(QString("taxpayerId"), ::OpenAPI::toJsonValue(m_taxpayer_id));
    }
    return obj;
}

QString OAITaxIdentifier::getIssuingCountry() const {
    return m_issuing_country;
}
void OAITaxIdentifier::setIssuingCountry(const QString &issuing_country) {
    m_issuing_country = issuing_country;
    m_issuing_country_isSet = true;
}

bool OAITaxIdentifier::is_issuing_country_Set() const{
    return m_issuing_country_isSet;
}

bool OAITaxIdentifier::is_issuing_country_Valid() const{
    return m_issuing_country_isValid;
}

QString OAITaxIdentifier::getTaxIdentifierType() const {
    return m_tax_identifier_type;
}
void OAITaxIdentifier::setTaxIdentifierType(const QString &tax_identifier_type) {
    m_tax_identifier_type = tax_identifier_type;
    m_tax_identifier_type_isSet = true;
}

bool OAITaxIdentifier::is_tax_identifier_type_Set() const{
    return m_tax_identifier_type_isSet;
}

bool OAITaxIdentifier::is_tax_identifier_type_Valid() const{
    return m_tax_identifier_type_isValid;
}

QString OAITaxIdentifier::getTaxpayerId() const {
    return m_taxpayer_id;
}
void OAITaxIdentifier::setTaxpayerId(const QString &taxpayer_id) {
    m_taxpayer_id = taxpayer_id;
    m_taxpayer_id_isSet = true;
}

bool OAITaxIdentifier::is_taxpayer_id_Set() const{
    return m_taxpayer_id_isSet;
}

bool OAITaxIdentifier::is_taxpayer_id_Valid() const{
    return m_taxpayer_id_isValid;
}

bool OAITaxIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_identifier_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxpayer_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
