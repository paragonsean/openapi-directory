/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDispute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDispute::OAIPaymentDispute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDispute::OAIPaymentDispute() {
    this->initializeModel();
}

OAIPaymentDispute::~OAIPaymentDispute() {}

void OAIPaymentDispute::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_available_choices_isSet = false;
    m_available_choices_isValid = false;

    m_buyer_provided_isSet = false;
    m_buyer_provided_isValid = false;

    m_buyer_username_isSet = false;
    m_buyer_username_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_evidence_requests_isSet = false;
    m_evidence_requests_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_monetary_transactions_isSet = false;
    m_monetary_transactions_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_open_date_isSet = false;
    m_open_date_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payment_dispute_id_isSet = false;
    m_payment_dispute_id_isValid = false;

    m_payment_dispute_status_isSet = false;
    m_payment_dispute_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_respond_by_date_isSet = false;
    m_respond_by_date_isValid = false;

    m_return_address_isSet = false;
    m_return_address_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_seller_response_isSet = false;
    m_seller_response_isValid = false;
}

void OAIPaymentDispute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDispute::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_available_choices_isValid = ::OpenAPI::fromJsonValue(m_available_choices, json[QString("availableChoices")]);
    m_available_choices_isSet = !json[QString("availableChoices")].isNull() && m_available_choices_isValid;

    m_buyer_provided_isValid = ::OpenAPI::fromJsonValue(m_buyer_provided, json[QString("buyerProvided")]);
    m_buyer_provided_isSet = !json[QString("buyerProvided")].isNull() && m_buyer_provided_isValid;

    m_buyer_username_isValid = ::OpenAPI::fromJsonValue(m_buyer_username, json[QString("buyerUsername")]);
    m_buyer_username_isSet = !json[QString("buyerUsername")].isNull() && m_buyer_username_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("closedDate")]);
    m_closed_date_isSet = !json[QString("closedDate")].isNull() && m_closed_date_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_evidence_requests_isValid = ::OpenAPI::fromJsonValue(m_evidence_requests, json[QString("evidenceRequests")]);
    m_evidence_requests_isSet = !json[QString("evidenceRequests")].isNull() && m_evidence_requests_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_monetary_transactions_isValid = ::OpenAPI::fromJsonValue(m_monetary_transactions, json[QString("monetaryTransactions")]);
    m_monetary_transactions_isSet = !json[QString("monetaryTransactions")].isNull() && m_monetary_transactions_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_open_date_isValid = ::OpenAPI::fromJsonValue(m_open_date, json[QString("openDate")]);
    m_open_date_isSet = !json[QString("openDate")].isNull() && m_open_date_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_payment_dispute_id_isValid = ::OpenAPI::fromJsonValue(m_payment_dispute_id, json[QString("paymentDisputeId")]);
    m_payment_dispute_id_isSet = !json[QString("paymentDisputeId")].isNull() && m_payment_dispute_id_isValid;

    m_payment_dispute_status_isValid = ::OpenAPI::fromJsonValue(m_payment_dispute_status, json[QString("paymentDisputeStatus")]);
    m_payment_dispute_status_isSet = !json[QString("paymentDisputeStatus")].isNull() && m_payment_dispute_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_respond_by_date_isValid = ::OpenAPI::fromJsonValue(m_respond_by_date, json[QString("respondByDate")]);
    m_respond_by_date_isSet = !json[QString("respondByDate")].isNull() && m_respond_by_date_isValid;

    m_return_address_isValid = ::OpenAPI::fromJsonValue(m_return_address, json[QString("returnAddress")]);
    m_return_address_isSet = !json[QString("returnAddress")].isNull() && m_return_address_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_seller_response_isValid = ::OpenAPI::fromJsonValue(m_seller_response, json[QString("sellerResponse")]);
    m_seller_response_isSet = !json[QString("sellerResponse")].isNull() && m_seller_response_isValid;
}

QString OAIPaymentDispute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDispute::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_available_choices.size() > 0) {
        obj.insert(QString("availableChoices"), ::OpenAPI::toJsonValue(m_available_choices));
    }
    if (m_buyer_provided.isSet()) {
        obj.insert(QString("buyerProvided"), ::OpenAPI::toJsonValue(m_buyer_provided));
    }
    if (m_buyer_username_isSet) {
        obj.insert(QString("buyerUsername"), ::OpenAPI::toJsonValue(m_buyer_username));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("closedDate"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_evidence.size() > 0) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_evidence_requests.size() > 0) {
        obj.insert(QString("evidenceRequests"), ::OpenAPI::toJsonValue(m_evidence_requests));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_monetary_transactions.size() > 0) {
        obj.insert(QString("monetaryTransactions"), ::OpenAPI::toJsonValue(m_monetary_transactions));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_open_date_isSet) {
        obj.insert(QString("openDate"), ::OpenAPI::toJsonValue(m_open_date));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payment_dispute_id_isSet) {
        obj.insert(QString("paymentDisputeId"), ::OpenAPI::toJsonValue(m_payment_dispute_id));
    }
    if (m_payment_dispute_status_isSet) {
        obj.insert(QString("paymentDisputeStatus"), ::OpenAPI::toJsonValue(m_payment_dispute_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_respond_by_date_isSet) {
        obj.insert(QString("respondByDate"), ::OpenAPI::toJsonValue(m_respond_by_date));
    }
    if (m_return_address.isSet()) {
        obj.insert(QString("returnAddress"), ::OpenAPI::toJsonValue(m_return_address));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_seller_response_isSet) {
        obj.insert(QString("sellerResponse"), ::OpenAPI::toJsonValue(m_seller_response));
    }
    return obj;
}

OAISimpleAmount OAIPaymentDispute::getAmount() const {
    return m_amount;
}
void OAIPaymentDispute::setAmount(const OAISimpleAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentDispute::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentDispute::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<QString> OAIPaymentDispute::getAvailableChoices() const {
    return m_available_choices;
}
void OAIPaymentDispute::setAvailableChoices(const QList<QString> &available_choices) {
    m_available_choices = available_choices;
    m_available_choices_isSet = true;
}

bool OAIPaymentDispute::is_available_choices_Set() const{
    return m_available_choices_isSet;
}

bool OAIPaymentDispute::is_available_choices_Valid() const{
    return m_available_choices_isValid;
}

OAIInfoFromBuyer OAIPaymentDispute::getBuyerProvided() const {
    return m_buyer_provided;
}
void OAIPaymentDispute::setBuyerProvided(const OAIInfoFromBuyer &buyer_provided) {
    m_buyer_provided = buyer_provided;
    m_buyer_provided_isSet = true;
}

bool OAIPaymentDispute::is_buyer_provided_Set() const{
    return m_buyer_provided_isSet;
}

bool OAIPaymentDispute::is_buyer_provided_Valid() const{
    return m_buyer_provided_isValid;
}

QString OAIPaymentDispute::getBuyerUsername() const {
    return m_buyer_username;
}
void OAIPaymentDispute::setBuyerUsername(const QString &buyer_username) {
    m_buyer_username = buyer_username;
    m_buyer_username_isSet = true;
}

bool OAIPaymentDispute::is_buyer_username_Set() const{
    return m_buyer_username_isSet;
}

bool OAIPaymentDispute::is_buyer_username_Valid() const{
    return m_buyer_username_isValid;
}

QString OAIPaymentDispute::getClosedDate() const {
    return m_closed_date;
}
void OAIPaymentDispute::setClosedDate(const QString &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIPaymentDispute::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIPaymentDispute::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

QList<OAIDisputeEvidence> OAIPaymentDispute::getEvidence() const {
    return m_evidence;
}
void OAIPaymentDispute::setEvidence(const QList<OAIDisputeEvidence> &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAIPaymentDispute::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAIPaymentDispute::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QList<OAIEvidenceRequest> OAIPaymentDispute::getEvidenceRequests() const {
    return m_evidence_requests;
}
void OAIPaymentDispute::setEvidenceRequests(const QList<OAIEvidenceRequest> &evidence_requests) {
    m_evidence_requests = evidence_requests;
    m_evidence_requests_isSet = true;
}

bool OAIPaymentDispute::is_evidence_requests_Set() const{
    return m_evidence_requests_isSet;
}

bool OAIPaymentDispute::is_evidence_requests_Valid() const{
    return m_evidence_requests_isValid;
}

QList<OAIOrderLineItems> OAIPaymentDispute::getLineItems() const {
    return m_line_items;
}
void OAIPaymentDispute::setLineItems(const QList<OAIOrderLineItems> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIPaymentDispute::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIPaymentDispute::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QList<OAIMonetaryTransaction> OAIPaymentDispute::getMonetaryTransactions() const {
    return m_monetary_transactions;
}
void OAIPaymentDispute::setMonetaryTransactions(const QList<OAIMonetaryTransaction> &monetary_transactions) {
    m_monetary_transactions = monetary_transactions;
    m_monetary_transactions_isSet = true;
}

bool OAIPaymentDispute::is_monetary_transactions_Set() const{
    return m_monetary_transactions_isSet;
}

bool OAIPaymentDispute::is_monetary_transactions_Valid() const{
    return m_monetary_transactions_isValid;
}

QString OAIPaymentDispute::getNote() const {
    return m_note;
}
void OAIPaymentDispute::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPaymentDispute::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPaymentDispute::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIPaymentDispute::getOpenDate() const {
    return m_open_date;
}
void OAIPaymentDispute::setOpenDate(const QString &open_date) {
    m_open_date = open_date;
    m_open_date_isSet = true;
}

bool OAIPaymentDispute::is_open_date_Set() const{
    return m_open_date_isSet;
}

bool OAIPaymentDispute::is_open_date_Valid() const{
    return m_open_date_isValid;
}

QString OAIPaymentDispute::getOrderId() const {
    return m_order_id;
}
void OAIPaymentDispute::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPaymentDispute::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPaymentDispute::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIPaymentDispute::getPaymentDisputeId() const {
    return m_payment_dispute_id;
}
void OAIPaymentDispute::setPaymentDisputeId(const QString &payment_dispute_id) {
    m_payment_dispute_id = payment_dispute_id;
    m_payment_dispute_id_isSet = true;
}

bool OAIPaymentDispute::is_payment_dispute_id_Set() const{
    return m_payment_dispute_id_isSet;
}

bool OAIPaymentDispute::is_payment_dispute_id_Valid() const{
    return m_payment_dispute_id_isValid;
}

QString OAIPaymentDispute::getPaymentDisputeStatus() const {
    return m_payment_dispute_status;
}
void OAIPaymentDispute::setPaymentDisputeStatus(const QString &payment_dispute_status) {
    m_payment_dispute_status = payment_dispute_status;
    m_payment_dispute_status_isSet = true;
}

bool OAIPaymentDispute::is_payment_dispute_status_Set() const{
    return m_payment_dispute_status_isSet;
}

bool OAIPaymentDispute::is_payment_dispute_status_Valid() const{
    return m_payment_dispute_status_isValid;
}

QString OAIPaymentDispute::getReason() const {
    return m_reason;
}
void OAIPaymentDispute::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIPaymentDispute::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIPaymentDispute::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIPaymentDisputeOutcomeDetail OAIPaymentDispute::getResolution() const {
    return m_resolution;
}
void OAIPaymentDispute::setResolution(const OAIPaymentDisputeOutcomeDetail &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIPaymentDispute::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIPaymentDispute::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIPaymentDispute::getRespondByDate() const {
    return m_respond_by_date;
}
void OAIPaymentDispute::setRespondByDate(const QString &respond_by_date) {
    m_respond_by_date = respond_by_date;
    m_respond_by_date_isSet = true;
}

bool OAIPaymentDispute::is_respond_by_date_Set() const{
    return m_respond_by_date_isSet;
}

bool OAIPaymentDispute::is_respond_by_date_Valid() const{
    return m_respond_by_date_isValid;
}

OAIReturnAddress OAIPaymentDispute::getReturnAddress() const {
    return m_return_address;
}
void OAIPaymentDispute::setReturnAddress(const OAIReturnAddress &return_address) {
    m_return_address = return_address;
    m_return_address_isSet = true;
}

bool OAIPaymentDispute::is_return_address_Set() const{
    return m_return_address_isSet;
}

bool OAIPaymentDispute::is_return_address_Valid() const{
    return m_return_address_isValid;
}

qint32 OAIPaymentDispute::getRevision() const {
    return m_revision;
}
void OAIPaymentDispute::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIPaymentDispute::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIPaymentDispute::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIPaymentDispute::getSellerResponse() const {
    return m_seller_response;
}
void OAIPaymentDispute::setSellerResponse(const QString &seller_response) {
    m_seller_response = seller_response;
    m_seller_response_isSet = true;
}

bool OAIPaymentDispute::is_seller_response_Set() const{
    return m_seller_response_isSet;
}

bool OAIPaymentDispute::is_seller_response_Valid() const{
    return m_seller_response_isValid;
}

bool OAIPaymentDispute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_provided.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monetary_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_dispute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_dispute_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_respond_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_response_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDispute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
