/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEbayCollectAndRemitTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEbayCollectAndRemitTax::OAIEbayCollectAndRemitTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEbayCollectAndRemitTax::OAIEbayCollectAndRemitTax() {
    this->initializeModel();
}

OAIEbayCollectAndRemitTax::~OAIEbayCollectAndRemitTax() {}

void OAIEbayCollectAndRemitTax::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_collection_method_isSet = false;
    m_collection_method_isValid = false;

    m_ebay_reference_isSet = false;
    m_ebay_reference_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;
}

void OAIEbayCollectAndRemitTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEbayCollectAndRemitTax::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_collection_method_isValid = ::OpenAPI::fromJsonValue(m_collection_method, json[QString("collectionMethod")]);
    m_collection_method_isSet = !json[QString("collectionMethod")].isNull() && m_collection_method_isValid;

    m_ebay_reference_isValid = ::OpenAPI::fromJsonValue(m_ebay_reference, json[QString("ebayReference")]);
    m_ebay_reference_isSet = !json[QString("ebayReference")].isNull() && m_ebay_reference_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("taxType")]);
    m_tax_type_isSet = !json[QString("taxType")].isNull() && m_tax_type_isValid;
}

QString OAIEbayCollectAndRemitTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEbayCollectAndRemitTax::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_collection_method_isSet) {
        obj.insert(QString("collectionMethod"), ::OpenAPI::toJsonValue(m_collection_method));
    }
    if (m_ebay_reference.isSet()) {
        obj.insert(QString("ebayReference"), ::OpenAPI::toJsonValue(m_ebay_reference));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("taxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    return obj;
}

OAIAmount OAIEbayCollectAndRemitTax::getAmount() const {
    return m_amount;
}
void OAIEbayCollectAndRemitTax::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIEbayCollectAndRemitTax::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIEbayCollectAndRemitTax::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIEbayCollectAndRemitTax::getCollectionMethod() const {
    return m_collection_method;
}
void OAIEbayCollectAndRemitTax::setCollectionMethod(const QString &collection_method) {
    m_collection_method = collection_method;
    m_collection_method_isSet = true;
}

bool OAIEbayCollectAndRemitTax::is_collection_method_Set() const{
    return m_collection_method_isSet;
}

bool OAIEbayCollectAndRemitTax::is_collection_method_Valid() const{
    return m_collection_method_isValid;
}

OAIEbayTaxReference OAIEbayCollectAndRemitTax::getEbayReference() const {
    return m_ebay_reference;
}
void OAIEbayCollectAndRemitTax::setEbayReference(const OAIEbayTaxReference &ebay_reference) {
    m_ebay_reference = ebay_reference;
    m_ebay_reference_isSet = true;
}

bool OAIEbayCollectAndRemitTax::is_ebay_reference_Set() const{
    return m_ebay_reference_isSet;
}

bool OAIEbayCollectAndRemitTax::is_ebay_reference_Valid() const{
    return m_ebay_reference_isValid;
}

QString OAIEbayCollectAndRemitTax::getTaxType() const {
    return m_tax_type;
}
void OAIEbayCollectAndRemitTax::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAIEbayCollectAndRemitTax::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAIEbayCollectAndRemitTax::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

bool OAIEbayCollectAndRemitTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebay_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEbayCollectAndRemitTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
