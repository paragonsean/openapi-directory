/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnAddress::OAIReturnAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnAddress::OAIReturnAddress() {
    this->initializeModel();
}

OAIReturnAddress::~OAIReturnAddress() {}

void OAIReturnAddress::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_primary_phone_isSet = false;
    m_primary_phone_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;
}

void OAIReturnAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnAddress::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_primary_phone_isValid = ::OpenAPI::fromJsonValue(m_primary_phone, json[QString("primaryPhone")]);
    m_primary_phone_isSet = !json[QString("primaryPhone")].isNull() && m_primary_phone_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;
}

QString OAIReturnAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_primary_phone.isSet()) {
        obj.insert(QString("primaryPhone"), ::OpenAPI::toJsonValue(m_primary_phone));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    return obj;
}

QString OAIReturnAddress::getAddressLine1() const {
    return m_address_line1;
}
void OAIReturnAddress::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIReturnAddress::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIReturnAddress::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIReturnAddress::getAddressLine2() const {
    return m_address_line2;
}
void OAIReturnAddress::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIReturnAddress::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIReturnAddress::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIReturnAddress::getCity() const {
    return m_city;
}
void OAIReturnAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIReturnAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIReturnAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIReturnAddress::getCountry() const {
    return m_country;
}
void OAIReturnAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIReturnAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIReturnAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIReturnAddress::getCounty() const {
    return m_county;
}
void OAIReturnAddress::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIReturnAddress::is_county_Set() const{
    return m_county_isSet;
}

bool OAIReturnAddress::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIReturnAddress::getFullName() const {
    return m_full_name;
}
void OAIReturnAddress::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIReturnAddress::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIReturnAddress::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIReturnAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIReturnAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIReturnAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIReturnAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

OAIPhone OAIReturnAddress::getPrimaryPhone() const {
    return m_primary_phone;
}
void OAIReturnAddress::setPrimaryPhone(const OAIPhone &primary_phone) {
    m_primary_phone = primary_phone;
    m_primary_phone_isSet = true;
}

bool OAIReturnAddress::is_primary_phone_Set() const{
    return m_primary_phone_isSet;
}

bool OAIReturnAddress::is_primary_phone_Valid() const{
    return m_primary_phone_isValid;
}

QString OAIReturnAddress::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIReturnAddress::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIReturnAddress::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIReturnAddress::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

bool OAIReturnAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
