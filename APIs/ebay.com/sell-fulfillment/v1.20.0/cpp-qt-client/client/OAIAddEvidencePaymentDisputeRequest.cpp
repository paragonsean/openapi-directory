/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddEvidencePaymentDisputeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddEvidencePaymentDisputeRequest::OAIAddEvidencePaymentDisputeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddEvidencePaymentDisputeRequest::OAIAddEvidencePaymentDisputeRequest() {
    this->initializeModel();
}

OAIAddEvidencePaymentDisputeRequest::~OAIAddEvidencePaymentDisputeRequest() {}

void OAIAddEvidencePaymentDisputeRequest::initializeModel() {

    m_evidence_type_isSet = false;
    m_evidence_type_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;
}

void OAIAddEvidencePaymentDisputeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddEvidencePaymentDisputeRequest::fromJsonObject(QJsonObject json) {

    m_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_type, json[QString("evidenceType")]);
    m_evidence_type_isSet = !json[QString("evidenceType")].isNull() && m_evidence_type_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;
}

QString OAIAddEvidencePaymentDisputeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddEvidencePaymentDisputeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_type_isSet) {
        obj.insert(QString("evidenceType"), ::OpenAPI::toJsonValue(m_evidence_type));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    return obj;
}

QString OAIAddEvidencePaymentDisputeRequest::getEvidenceType() const {
    return m_evidence_type;
}
void OAIAddEvidencePaymentDisputeRequest::setEvidenceType(const QString &evidence_type) {
    m_evidence_type = evidence_type;
    m_evidence_type_isSet = true;
}

bool OAIAddEvidencePaymentDisputeRequest::is_evidence_type_Set() const{
    return m_evidence_type_isSet;
}

bool OAIAddEvidencePaymentDisputeRequest::is_evidence_type_Valid() const{
    return m_evidence_type_isValid;
}

QList<OAIFileEvidence> OAIAddEvidencePaymentDisputeRequest::getFiles() const {
    return m_files;
}
void OAIAddEvidencePaymentDisputeRequest::setFiles(const QList<OAIFileEvidence> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIAddEvidencePaymentDisputeRequest::is_files_Set() const{
    return m_files_isSet;
}

bool OAIAddEvidencePaymentDisputeRequest::is_files_Valid() const{
    return m_files_isValid;
}

QList<OAIOrderLineItems> OAIAddEvidencePaymentDisputeRequest::getLineItems() const {
    return m_line_items;
}
void OAIAddEvidencePaymentDisputeRequest::setLineItems(const QList<OAIOrderLineItems> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIAddEvidencePaymentDisputeRequest::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIAddEvidencePaymentDisputeRequest::is_line_items_Valid() const{
    return m_line_items_isValid;
}

bool OAIAddEvidencePaymentDisputeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddEvidencePaymentDisputeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
