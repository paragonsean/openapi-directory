/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingFulfillmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingFulfillmentDetails::OAIShippingFulfillmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingFulfillmentDetails::OAIShippingFulfillmentDetails() {
    this->initializeModel();
}

OAIShippingFulfillmentDetails::~OAIShippingFulfillmentDetails() {}

void OAIShippingFulfillmentDetails::initializeModel() {

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_shipped_date_isSet = false;
    m_shipped_date_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;
}

void OAIShippingFulfillmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingFulfillmentDetails::fromJsonObject(QJsonObject json) {

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_shipped_date_isValid = ::OpenAPI::fromJsonValue(m_shipped_date, json[QString("shippedDate")]);
    m_shipped_date_isSet = !json[QString("shippedDate")].isNull() && m_shipped_date_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("trackingNumber")]);
    m_tracking_number_isSet = !json[QString("trackingNumber")].isNull() && m_tracking_number_isValid;
}

QString OAIShippingFulfillmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingFulfillmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_shipped_date_isSet) {
        obj.insert(QString("shippedDate"), ::OpenAPI::toJsonValue(m_shipped_date));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("trackingNumber"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    return obj;
}

QList<OAILineItemReference> OAIShippingFulfillmentDetails::getLineItems() const {
    return m_line_items;
}
void OAIShippingFulfillmentDetails::setLineItems(const QList<OAILineItemReference> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIShippingFulfillmentDetails::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIShippingFulfillmentDetails::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIShippingFulfillmentDetails::getShippedDate() const {
    return m_shipped_date;
}
void OAIShippingFulfillmentDetails::setShippedDate(const QString &shipped_date) {
    m_shipped_date = shipped_date;
    m_shipped_date_isSet = true;
}

bool OAIShippingFulfillmentDetails::is_shipped_date_Set() const{
    return m_shipped_date_isSet;
}

bool OAIShippingFulfillmentDetails::is_shipped_date_Valid() const{
    return m_shipped_date_isValid;
}

QString OAIShippingFulfillmentDetails::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIShippingFulfillmentDetails::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIShippingFulfillmentDetails::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIShippingFulfillmentDetails::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

QString OAIShippingFulfillmentDetails::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIShippingFulfillmentDetails::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIShippingFulfillmentDetails::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIShippingFulfillmentDetails::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

bool OAIShippingFulfillmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingFulfillmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
