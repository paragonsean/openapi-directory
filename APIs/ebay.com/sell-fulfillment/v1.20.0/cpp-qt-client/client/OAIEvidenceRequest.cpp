/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvidenceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvidenceRequest::OAIEvidenceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvidenceRequest::OAIEvidenceRequest() {
    this->initializeModel();
}

OAIEvidenceRequest::~OAIEvidenceRequest() {}

void OAIEvidenceRequest::initializeModel() {

    m_evidence_id_isSet = false;
    m_evidence_id_isValid = false;

    m_evidence_type_isSet = false;
    m_evidence_type_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_request_date_isSet = false;
    m_request_date_isValid = false;

    m_respond_by_date_isSet = false;
    m_respond_by_date_isValid = false;
}

void OAIEvidenceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvidenceRequest::fromJsonObject(QJsonObject json) {

    m_evidence_id_isValid = ::OpenAPI::fromJsonValue(m_evidence_id, json[QString("evidenceId")]);
    m_evidence_id_isSet = !json[QString("evidenceId")].isNull() && m_evidence_id_isValid;

    m_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_type, json[QString("evidenceType")]);
    m_evidence_type_isSet = !json[QString("evidenceType")].isNull() && m_evidence_type_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_request_date_isValid = ::OpenAPI::fromJsonValue(m_request_date, json[QString("requestDate")]);
    m_request_date_isSet = !json[QString("requestDate")].isNull() && m_request_date_isValid;

    m_respond_by_date_isValid = ::OpenAPI::fromJsonValue(m_respond_by_date, json[QString("respondByDate")]);
    m_respond_by_date_isSet = !json[QString("respondByDate")].isNull() && m_respond_by_date_isValid;
}

QString OAIEvidenceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvidenceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_id_isSet) {
        obj.insert(QString("evidenceId"), ::OpenAPI::toJsonValue(m_evidence_id));
    }
    if (m_evidence_type_isSet) {
        obj.insert(QString("evidenceType"), ::OpenAPI::toJsonValue(m_evidence_type));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_request_date_isSet) {
        obj.insert(QString("requestDate"), ::OpenAPI::toJsonValue(m_request_date));
    }
    if (m_respond_by_date_isSet) {
        obj.insert(QString("respondByDate"), ::OpenAPI::toJsonValue(m_respond_by_date));
    }
    return obj;
}

QString OAIEvidenceRequest::getEvidenceId() const {
    return m_evidence_id;
}
void OAIEvidenceRequest::setEvidenceId(const QString &evidence_id) {
    m_evidence_id = evidence_id;
    m_evidence_id_isSet = true;
}

bool OAIEvidenceRequest::is_evidence_id_Set() const{
    return m_evidence_id_isSet;
}

bool OAIEvidenceRequest::is_evidence_id_Valid() const{
    return m_evidence_id_isValid;
}

QString OAIEvidenceRequest::getEvidenceType() const {
    return m_evidence_type;
}
void OAIEvidenceRequest::setEvidenceType(const QString &evidence_type) {
    m_evidence_type = evidence_type;
    m_evidence_type_isSet = true;
}

bool OAIEvidenceRequest::is_evidence_type_Set() const{
    return m_evidence_type_isSet;
}

bool OAIEvidenceRequest::is_evidence_type_Valid() const{
    return m_evidence_type_isValid;
}

QList<OAIOrderLineItems> OAIEvidenceRequest::getLineItems() const {
    return m_line_items;
}
void OAIEvidenceRequest::setLineItems(const QList<OAIOrderLineItems> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIEvidenceRequest::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIEvidenceRequest::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIEvidenceRequest::getRequestDate() const {
    return m_request_date;
}
void OAIEvidenceRequest::setRequestDate(const QString &request_date) {
    m_request_date = request_date;
    m_request_date_isSet = true;
}

bool OAIEvidenceRequest::is_request_date_Set() const{
    return m_request_date_isSet;
}

bool OAIEvidenceRequest::is_request_date_Valid() const{
    return m_request_date_isValid;
}

QString OAIEvidenceRequest::getRespondByDate() const {
    return m_respond_by_date;
}
void OAIEvidenceRequest::setRespondByDate(const QString &respond_by_date) {
    m_respond_by_date = respond_by_date;
    m_respond_by_date_isSet = true;
}

bool OAIEvidenceRequest::is_respond_by_date_Set() const{
    return m_respond_by_date_isSet;
}

bool OAIEvidenceRequest::is_respond_by_date_Valid() const{
    return m_respond_by_date_isValid;
}

bool OAIEvidenceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respond_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvidenceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
