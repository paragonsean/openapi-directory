/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDisputeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDisputeSummary::OAIPaymentDisputeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDisputeSummary::OAIPaymentDisputeSummary() {
    this->initializeModel();
}

OAIPaymentDisputeSummary::~OAIPaymentDisputeSummary() {}

void OAIPaymentDisputeSummary::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_buyer_username_isSet = false;
    m_buyer_username_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_open_date_isSet = false;
    m_open_date_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payment_dispute_id_isSet = false;
    m_payment_dispute_id_isValid = false;

    m_payment_dispute_status_isSet = false;
    m_payment_dispute_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_respond_by_date_isSet = false;
    m_respond_by_date_isValid = false;
}

void OAIPaymentDisputeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDisputeSummary::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_buyer_username_isValid = ::OpenAPI::fromJsonValue(m_buyer_username, json[QString("buyerUsername")]);
    m_buyer_username_isSet = !json[QString("buyerUsername")].isNull() && m_buyer_username_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("closedDate")]);
    m_closed_date_isSet = !json[QString("closedDate")].isNull() && m_closed_date_isValid;

    m_open_date_isValid = ::OpenAPI::fromJsonValue(m_open_date, json[QString("openDate")]);
    m_open_date_isSet = !json[QString("openDate")].isNull() && m_open_date_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_payment_dispute_id_isValid = ::OpenAPI::fromJsonValue(m_payment_dispute_id, json[QString("paymentDisputeId")]);
    m_payment_dispute_id_isSet = !json[QString("paymentDisputeId")].isNull() && m_payment_dispute_id_isValid;

    m_payment_dispute_status_isValid = ::OpenAPI::fromJsonValue(m_payment_dispute_status, json[QString("paymentDisputeStatus")]);
    m_payment_dispute_status_isSet = !json[QString("paymentDisputeStatus")].isNull() && m_payment_dispute_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_respond_by_date_isValid = ::OpenAPI::fromJsonValue(m_respond_by_date, json[QString("respondByDate")]);
    m_respond_by_date_isSet = !json[QString("respondByDate")].isNull() && m_respond_by_date_isValid;
}

QString OAIPaymentDisputeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDisputeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_buyer_username_isSet) {
        obj.insert(QString("buyerUsername"), ::OpenAPI::toJsonValue(m_buyer_username));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("closedDate"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_open_date_isSet) {
        obj.insert(QString("openDate"), ::OpenAPI::toJsonValue(m_open_date));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payment_dispute_id_isSet) {
        obj.insert(QString("paymentDisputeId"), ::OpenAPI::toJsonValue(m_payment_dispute_id));
    }
    if (m_payment_dispute_status_isSet) {
        obj.insert(QString("paymentDisputeStatus"), ::OpenAPI::toJsonValue(m_payment_dispute_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_respond_by_date_isSet) {
        obj.insert(QString("respondByDate"), ::OpenAPI::toJsonValue(m_respond_by_date));
    }
    return obj;
}

OAISimpleAmount OAIPaymentDisputeSummary::getAmount() const {
    return m_amount;
}
void OAIPaymentDisputeSummary::setAmount(const OAISimpleAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentDisputeSummary::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentDisputeSummary::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPaymentDisputeSummary::getBuyerUsername() const {
    return m_buyer_username;
}
void OAIPaymentDisputeSummary::setBuyerUsername(const QString &buyer_username) {
    m_buyer_username = buyer_username;
    m_buyer_username_isSet = true;
}

bool OAIPaymentDisputeSummary::is_buyer_username_Set() const{
    return m_buyer_username_isSet;
}

bool OAIPaymentDisputeSummary::is_buyer_username_Valid() const{
    return m_buyer_username_isValid;
}

QString OAIPaymentDisputeSummary::getClosedDate() const {
    return m_closed_date;
}
void OAIPaymentDisputeSummary::setClosedDate(const QString &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIPaymentDisputeSummary::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIPaymentDisputeSummary::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

QString OAIPaymentDisputeSummary::getOpenDate() const {
    return m_open_date;
}
void OAIPaymentDisputeSummary::setOpenDate(const QString &open_date) {
    m_open_date = open_date;
    m_open_date_isSet = true;
}

bool OAIPaymentDisputeSummary::is_open_date_Set() const{
    return m_open_date_isSet;
}

bool OAIPaymentDisputeSummary::is_open_date_Valid() const{
    return m_open_date_isValid;
}

QString OAIPaymentDisputeSummary::getOrderId() const {
    return m_order_id;
}
void OAIPaymentDisputeSummary::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPaymentDisputeSummary::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPaymentDisputeSummary::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIPaymentDisputeSummary::getPaymentDisputeId() const {
    return m_payment_dispute_id;
}
void OAIPaymentDisputeSummary::setPaymentDisputeId(const QString &payment_dispute_id) {
    m_payment_dispute_id = payment_dispute_id;
    m_payment_dispute_id_isSet = true;
}

bool OAIPaymentDisputeSummary::is_payment_dispute_id_Set() const{
    return m_payment_dispute_id_isSet;
}

bool OAIPaymentDisputeSummary::is_payment_dispute_id_Valid() const{
    return m_payment_dispute_id_isValid;
}

QString OAIPaymentDisputeSummary::getPaymentDisputeStatus() const {
    return m_payment_dispute_status;
}
void OAIPaymentDisputeSummary::setPaymentDisputeStatus(const QString &payment_dispute_status) {
    m_payment_dispute_status = payment_dispute_status;
    m_payment_dispute_status_isSet = true;
}

bool OAIPaymentDisputeSummary::is_payment_dispute_status_Set() const{
    return m_payment_dispute_status_isSet;
}

bool OAIPaymentDisputeSummary::is_payment_dispute_status_Valid() const{
    return m_payment_dispute_status_isValid;
}

QString OAIPaymentDisputeSummary::getReason() const {
    return m_reason;
}
void OAIPaymentDisputeSummary::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIPaymentDisputeSummary::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIPaymentDisputeSummary::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIPaymentDisputeSummary::getRespondByDate() const {
    return m_respond_by_date;
}
void OAIPaymentDisputeSummary::setRespondByDate(const QString &respond_by_date) {
    m_respond_by_date = respond_by_date;
    m_respond_by_date_isSet = true;
}

bool OAIPaymentDisputeSummary::is_respond_by_date_Set() const{
    return m_respond_by_date_isSet;
}

bool OAIPaymentDisputeSummary::is_respond_by_date_Valid() const{
    return m_respond_by_date_isValid;
}

bool OAIPaymentDisputeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_dispute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_dispute_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respond_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDisputeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
