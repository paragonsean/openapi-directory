/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemLocation::OAIItemLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemLocation::OAIItemLocation() {
    this->initializeModel();
}

OAIItemLocation::~OAIItemLocation() {}

void OAIItemLocation::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIItemLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemLocation::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;
}

QString OAIItemLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIItemLocation::getCountryCode() const {
    return m_country_code;
}
void OAIItemLocation::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIItemLocation::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIItemLocation::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIItemLocation::getLocation() const {
    return m_location;
}
void OAIItemLocation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIItemLocation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIItemLocation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIItemLocation::getPostalCode() const {
    return m_postal_code;
}
void OAIItemLocation::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIItemLocation::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIItemLocation::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIItemLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
