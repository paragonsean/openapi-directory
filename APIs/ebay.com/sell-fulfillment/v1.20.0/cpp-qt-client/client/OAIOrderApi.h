/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderApi_H
#define OAI_OAIOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIssueRefundRequest.h"
#include "OAIOrder.h"
#include "OAIOrderSearchPagedCollection.h"
#include "OAIRefund.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderApi : public QObject {
    Q_OBJECT

public:
    OAIOrderApi(const int timeOut = 0);
    ~OAIOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  field_groups QString [optional]
    */
    virtual void getOrder(const QString &order_id, const ::OpenAPI::OptionalParam<QString> &field_groups = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  field_groups QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  order_ids QString [optional]
    */
    virtual void getOrders(const ::OpenAPI::OptionalParam<QString> &field_groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  oai_issue_refund_request OAIIssueRefundRequest [optional]
    */
    virtual void issueRefund(const QString &order_id, const ::OpenAPI::OptionalParam<OAIIssueRefundRequest> &oai_issue_refund_request = ::OpenAPI::OptionalParam<OAIIssueRefundRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOrderCallback(OAIHttpRequestWorker *worker);
    void getOrdersCallback(OAIHttpRequestWorker *worker);
    void issueRefundCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOrderSignal(OAIOrder summary);
    void getOrdersSignal(OAIOrderSearchPagedCollection summary);
    void issueRefundSignal(OAIRefund summary);


    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void getOrdersSignalFull(OAIHttpRequestWorker *worker, OAIOrderSearchPagedCollection summary);
    void issueRefundSignalFull(OAIHttpRequestWorker *worker, OAIRefund summary);

    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalError() instead")
    void getOrdersSignalE(OAIOrderSearchPagedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalError(OAIOrderSearchPagedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRefundSignalError() instead")
    void issueRefundSignalE(OAIRefund summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRefundSignalError(OAIRefund summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalErrorFull() instead")
    void getOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issueRefundSignalErrorFull() instead")
    void issueRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issueRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
