/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLineItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLineItems::OAIOrderLineItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLineItems::OAIOrderLineItems() {
    this->initializeModel();
}

OAIOrderLineItems::~OAIOrderLineItems() {}

void OAIOrderLineItems::initializeModel() {

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;
}

void OAIOrderLineItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLineItems::fromJsonObject(QJsonObject json) {

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("lineItemId")]);
    m_line_item_id_isSet = !json[QString("lineItemId")].isNull() && m_line_item_id_isValid;
}

QString OAIOrderLineItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLineItems::asJsonObject() const {
    QJsonObject obj;
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_line_item_id_isSet) {
        obj.insert(QString("lineItemId"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    return obj;
}

QString OAIOrderLineItems::getItemId() const {
    return m_item_id;
}
void OAIOrderLineItems::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIOrderLineItems::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIOrderLineItems::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIOrderLineItems::getLineItemId() const {
    return m_line_item_id;
}
void OAIOrderLineItems::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAIOrderLineItems::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAIOrderLineItems::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

bool OAIOrderLineItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLineItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
