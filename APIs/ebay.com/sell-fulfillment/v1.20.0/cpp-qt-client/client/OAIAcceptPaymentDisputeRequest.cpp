/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceptPaymentDisputeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceptPaymentDisputeRequest::OAIAcceptPaymentDisputeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceptPaymentDisputeRequest::OAIAcceptPaymentDisputeRequest() {
    this->initializeModel();
}

OAIAcceptPaymentDisputeRequest::~OAIAcceptPaymentDisputeRequest() {}

void OAIAcceptPaymentDisputeRequest::initializeModel() {

    m_return_address_isSet = false;
    m_return_address_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIAcceptPaymentDisputeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceptPaymentDisputeRequest::fromJsonObject(QJsonObject json) {

    m_return_address_isValid = ::OpenAPI::fromJsonValue(m_return_address, json[QString("returnAddress")]);
    m_return_address_isSet = !json[QString("returnAddress")].isNull() && m_return_address_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIAcceptPaymentDisputeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceptPaymentDisputeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_return_address.isSet()) {
        obj.insert(QString("returnAddress"), ::OpenAPI::toJsonValue(m_return_address));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

OAIReturnAddress OAIAcceptPaymentDisputeRequest::getReturnAddress() const {
    return m_return_address;
}
void OAIAcceptPaymentDisputeRequest::setReturnAddress(const OAIReturnAddress &return_address) {
    m_return_address = return_address;
    m_return_address_isSet = true;
}

bool OAIAcceptPaymentDisputeRequest::is_return_address_Set() const{
    return m_return_address_isSet;
}

bool OAIAcceptPaymentDisputeRequest::is_return_address_Valid() const{
    return m_return_address_isValid;
}

qint32 OAIAcceptPaymentDisputeRequest::getRevision() const {
    return m_revision;
}
void OAIAcceptPaymentDisputeRequest::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIAcceptPaymentDisputeRequest::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIAcceptPaymentDisputeRequest::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIAcceptPaymentDisputeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceptPaymentDisputeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
