/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedOrderLineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedOrderLineItem::OAILinkedOrderLineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedOrderLineItem::OAILinkedOrderLineItem() {
    this->initializeModel();
}

OAILinkedOrderLineItem::~OAILinkedOrderLineItem() {}

void OAILinkedOrderLineItem::initializeModel() {

    m_line_item_aspects_isSet = false;
    m_line_item_aspects_isValid = false;

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;

    m_max_estimated_delivery_date_isSet = false;
    m_max_estimated_delivery_date_isValid = false;

    m_min_estimated_delivery_date_isSet = false;
    m_min_estimated_delivery_date_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_shipments_isSet = false;
    m_shipments_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAILinkedOrderLineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedOrderLineItem::fromJsonObject(QJsonObject json) {

    m_line_item_aspects_isValid = ::OpenAPI::fromJsonValue(m_line_item_aspects, json[QString("lineItemAspects")]);
    m_line_item_aspects_isSet = !json[QString("lineItemAspects")].isNull() && m_line_item_aspects_isValid;

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("lineItemId")]);
    m_line_item_id_isSet = !json[QString("lineItemId")].isNull() && m_line_item_id_isValid;

    m_max_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_max_estimated_delivery_date, json[QString("maxEstimatedDeliveryDate")]);
    m_max_estimated_delivery_date_isSet = !json[QString("maxEstimatedDeliveryDate")].isNull() && m_max_estimated_delivery_date_isValid;

    m_min_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_min_estimated_delivery_date, json[QString("minEstimatedDeliveryDate")]);
    m_min_estimated_delivery_date_isSet = !json[QString("minEstimatedDeliveryDate")].isNull() && m_min_estimated_delivery_date_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("sellerId")]);
    m_seller_id_isSet = !json[QString("sellerId")].isNull() && m_seller_id_isValid;

    m_shipments_isValid = ::OpenAPI::fromJsonValue(m_shipments, json[QString("shipments")]);
    m_shipments_isSet = !json[QString("shipments")].isNull() && m_shipments_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAILinkedOrderLineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedOrderLineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_line_item_aspects.size() > 0) {
        obj.insert(QString("lineItemAspects"), ::OpenAPI::toJsonValue(m_line_item_aspects));
    }
    if (m_line_item_id_isSet) {
        obj.insert(QString("lineItemId"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    if (m_max_estimated_delivery_date_isSet) {
        obj.insert(QString("maxEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_max_estimated_delivery_date));
    }
    if (m_min_estimated_delivery_date_isSet) {
        obj.insert(QString("minEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_min_estimated_delivery_date));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("sellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_shipments.size() > 0) {
        obj.insert(QString("shipments"), ::OpenAPI::toJsonValue(m_shipments));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAINameValuePair> OAILinkedOrderLineItem::getLineItemAspects() const {
    return m_line_item_aspects;
}
void OAILinkedOrderLineItem::setLineItemAspects(const QList<OAINameValuePair> &line_item_aspects) {
    m_line_item_aspects = line_item_aspects;
    m_line_item_aspects_isSet = true;
}

bool OAILinkedOrderLineItem::is_line_item_aspects_Set() const{
    return m_line_item_aspects_isSet;
}

bool OAILinkedOrderLineItem::is_line_item_aspects_Valid() const{
    return m_line_item_aspects_isValid;
}

QString OAILinkedOrderLineItem::getLineItemId() const {
    return m_line_item_id;
}
void OAILinkedOrderLineItem::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAILinkedOrderLineItem::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAILinkedOrderLineItem::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

QString OAILinkedOrderLineItem::getMaxEstimatedDeliveryDate() const {
    return m_max_estimated_delivery_date;
}
void OAILinkedOrderLineItem::setMaxEstimatedDeliveryDate(const QString &max_estimated_delivery_date) {
    m_max_estimated_delivery_date = max_estimated_delivery_date;
    m_max_estimated_delivery_date_isSet = true;
}

bool OAILinkedOrderLineItem::is_max_estimated_delivery_date_Set() const{
    return m_max_estimated_delivery_date_isSet;
}

bool OAILinkedOrderLineItem::is_max_estimated_delivery_date_Valid() const{
    return m_max_estimated_delivery_date_isValid;
}

QString OAILinkedOrderLineItem::getMinEstimatedDeliveryDate() const {
    return m_min_estimated_delivery_date;
}
void OAILinkedOrderLineItem::setMinEstimatedDeliveryDate(const QString &min_estimated_delivery_date) {
    m_min_estimated_delivery_date = min_estimated_delivery_date;
    m_min_estimated_delivery_date_isSet = true;
}

bool OAILinkedOrderLineItem::is_min_estimated_delivery_date_Set() const{
    return m_min_estimated_delivery_date_isSet;
}

bool OAILinkedOrderLineItem::is_min_estimated_delivery_date_Valid() const{
    return m_min_estimated_delivery_date_isValid;
}

QString OAILinkedOrderLineItem::getOrderId() const {
    return m_order_id;
}
void OAILinkedOrderLineItem::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAILinkedOrderLineItem::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAILinkedOrderLineItem::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAILinkedOrderLineItem::getSellerId() const {
    return m_seller_id;
}
void OAILinkedOrderLineItem::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAILinkedOrderLineItem::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAILinkedOrderLineItem::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QList<OAITrackingInfo> OAILinkedOrderLineItem::getShipments() const {
    return m_shipments;
}
void OAILinkedOrderLineItem::setShipments(const QList<OAITrackingInfo> &shipments) {
    m_shipments = shipments;
    m_shipments_isSet = true;
}

bool OAILinkedOrderLineItem::is_shipments_Set() const{
    return m_shipments_isSet;
}

bool OAILinkedOrderLineItem::is_shipments_Valid() const{
    return m_shipments_isValid;
}

QString OAILinkedOrderLineItem::getTitle() const {
    return m_title;
}
void OAILinkedOrderLineItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILinkedOrderLineItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAILinkedOrderLineItem::is_title_Valid() const{
    return m_title_isValid;
}

bool OAILinkedOrderLineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_item_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedOrderLineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
