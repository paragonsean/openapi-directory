/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentHold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentHold::OAIPaymentHold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentHold::OAIPaymentHold() {
    this->initializeModel();
}

OAIPaymentHold::~OAIPaymentHold() {}

void OAIPaymentHold::initializeModel() {

    m_expected_release_date_isSet = false;
    m_expected_release_date_isValid = false;

    m_hold_amount_isSet = false;
    m_hold_amount_isValid = false;

    m_hold_reason_isSet = false;
    m_hold_reason_isValid = false;

    m_hold_state_isSet = false;
    m_hold_state_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_seller_actions_to_release_isSet = false;
    m_seller_actions_to_release_isValid = false;
}

void OAIPaymentHold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentHold::fromJsonObject(QJsonObject json) {

    m_expected_release_date_isValid = ::OpenAPI::fromJsonValue(m_expected_release_date, json[QString("expectedReleaseDate")]);
    m_expected_release_date_isSet = !json[QString("expectedReleaseDate")].isNull() && m_expected_release_date_isValid;

    m_hold_amount_isValid = ::OpenAPI::fromJsonValue(m_hold_amount, json[QString("holdAmount")]);
    m_hold_amount_isSet = !json[QString("holdAmount")].isNull() && m_hold_amount_isValid;

    m_hold_reason_isValid = ::OpenAPI::fromJsonValue(m_hold_reason, json[QString("holdReason")]);
    m_hold_reason_isSet = !json[QString("holdReason")].isNull() && m_hold_reason_isValid;

    m_hold_state_isValid = ::OpenAPI::fromJsonValue(m_hold_state, json[QString("holdState")]);
    m_hold_state_isSet = !json[QString("holdState")].isNull() && m_hold_state_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_seller_actions_to_release_isValid = ::OpenAPI::fromJsonValue(m_seller_actions_to_release, json[QString("sellerActionsToRelease")]);
    m_seller_actions_to_release_isSet = !json[QString("sellerActionsToRelease")].isNull() && m_seller_actions_to_release_isValid;
}

QString OAIPaymentHold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentHold::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_release_date_isSet) {
        obj.insert(QString("expectedReleaseDate"), ::OpenAPI::toJsonValue(m_expected_release_date));
    }
    if (m_hold_amount.isSet()) {
        obj.insert(QString("holdAmount"), ::OpenAPI::toJsonValue(m_hold_amount));
    }
    if (m_hold_reason_isSet) {
        obj.insert(QString("holdReason"), ::OpenAPI::toJsonValue(m_hold_reason));
    }
    if (m_hold_state_isSet) {
        obj.insert(QString("holdState"), ::OpenAPI::toJsonValue(m_hold_state));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_seller_actions_to_release.size() > 0) {
        obj.insert(QString("sellerActionsToRelease"), ::OpenAPI::toJsonValue(m_seller_actions_to_release));
    }
    return obj;
}

QString OAIPaymentHold::getExpectedReleaseDate() const {
    return m_expected_release_date;
}
void OAIPaymentHold::setExpectedReleaseDate(const QString &expected_release_date) {
    m_expected_release_date = expected_release_date;
    m_expected_release_date_isSet = true;
}

bool OAIPaymentHold::is_expected_release_date_Set() const{
    return m_expected_release_date_isSet;
}

bool OAIPaymentHold::is_expected_release_date_Valid() const{
    return m_expected_release_date_isValid;
}

OAIAmount OAIPaymentHold::getHoldAmount() const {
    return m_hold_amount;
}
void OAIPaymentHold::setHoldAmount(const OAIAmount &hold_amount) {
    m_hold_amount = hold_amount;
    m_hold_amount_isSet = true;
}

bool OAIPaymentHold::is_hold_amount_Set() const{
    return m_hold_amount_isSet;
}

bool OAIPaymentHold::is_hold_amount_Valid() const{
    return m_hold_amount_isValid;
}

QString OAIPaymentHold::getHoldReason() const {
    return m_hold_reason;
}
void OAIPaymentHold::setHoldReason(const QString &hold_reason) {
    m_hold_reason = hold_reason;
    m_hold_reason_isSet = true;
}

bool OAIPaymentHold::is_hold_reason_Set() const{
    return m_hold_reason_isSet;
}

bool OAIPaymentHold::is_hold_reason_Valid() const{
    return m_hold_reason_isValid;
}

QString OAIPaymentHold::getHoldState() const {
    return m_hold_state;
}
void OAIPaymentHold::setHoldState(const QString &hold_state) {
    m_hold_state = hold_state;
    m_hold_state_isSet = true;
}

bool OAIPaymentHold::is_hold_state_Set() const{
    return m_hold_state_isSet;
}

bool OAIPaymentHold::is_hold_state_Valid() const{
    return m_hold_state_isValid;
}

QString OAIPaymentHold::getReleaseDate() const {
    return m_release_date;
}
void OAIPaymentHold::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIPaymentHold::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIPaymentHold::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QList<OAISellerActionsToRelease> OAIPaymentHold::getSellerActionsToRelease() const {
    return m_seller_actions_to_release;
}
void OAIPaymentHold::setSellerActionsToRelease(const QList<OAISellerActionsToRelease> &seller_actions_to_release) {
    m_seller_actions_to_release = seller_actions_to_release;
    m_seller_actions_to_release_isSet = true;
}

bool OAIPaymentHold::is_seller_actions_to_release_Set() const{
    return m_seller_actions_to_release_isSet;
}

bool OAIPaymentHold::is_seller_actions_to_release_Valid() const{
    return m_seller_actions_to_release_isValid;
}

bool OAIPaymentHold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_actions_to_release.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentHold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
