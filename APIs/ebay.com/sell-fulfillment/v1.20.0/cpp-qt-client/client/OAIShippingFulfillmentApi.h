/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShippingFulfillmentApi_H
#define OAI_OAIShippingFulfillmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIShippingFulfillment.h"
#include "OAIShippingFulfillmentDetails.h"
#include "OAIShippingFulfillmentPagedCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShippingFulfillmentApi : public QObject {
    Q_OBJECT

public:
    OAIShippingFulfillmentApi(const int timeOut = 0);
    ~OAIShippingFulfillmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  oai_shipping_fulfillment_details OAIShippingFulfillmentDetails [required]
    */
    virtual void createShippingFulfillment(const QString &order_id, const OAIShippingFulfillmentDetails &oai_shipping_fulfillment_details);

    /**
    * @param[in]  fulfillment_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getShippingFulfillment(const QString &fulfillment_id, const QString &order_id);

    /**
    * @param[in]  order_id QString [required]
    */
    virtual void getShippingFulfillments(const QString &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createShippingFulfillmentCallback(OAIHttpRequestWorker *worker);
    void getShippingFulfillmentCallback(OAIHttpRequestWorker *worker);
    void getShippingFulfillmentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createShippingFulfillmentSignal(OAIObject summary);
    void getShippingFulfillmentSignal(OAIShippingFulfillment summary);
    void getShippingFulfillmentsSignal(OAIShippingFulfillmentPagedCollection summary);


    void createShippingFulfillmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getShippingFulfillmentSignalFull(OAIHttpRequestWorker *worker, OAIShippingFulfillment summary);
    void getShippingFulfillmentsSignalFull(OAIHttpRequestWorker *worker, OAIShippingFulfillmentPagedCollection summary);

    Q_DECL_DEPRECATED_X("Use createShippingFulfillmentSignalError() instead")
    void createShippingFulfillmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShippingFulfillmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShippingFulfillmentSignalError() instead")
    void getShippingFulfillmentSignalE(OAIShippingFulfillment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShippingFulfillmentSignalError(OAIShippingFulfillment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShippingFulfillmentsSignalError() instead")
    void getShippingFulfillmentsSignalE(OAIShippingFulfillmentPagedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShippingFulfillmentsSignalError(OAIShippingFulfillmentPagedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createShippingFulfillmentSignalErrorFull() instead")
    void createShippingFulfillmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShippingFulfillmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShippingFulfillmentSignalErrorFull() instead")
    void getShippingFulfillmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShippingFulfillmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShippingFulfillmentsSignalErrorFull() instead")
    void getShippingFulfillmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShippingFulfillmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
