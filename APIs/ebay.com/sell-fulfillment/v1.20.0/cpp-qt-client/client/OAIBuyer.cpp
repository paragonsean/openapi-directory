/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuyer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuyer::OAIBuyer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuyer::OAIBuyer() {
    this->initializeModel();
}

OAIBuyer::~OAIBuyer() {}

void OAIBuyer::initializeModel() {

    m_buyer_registration_address_isSet = false;
    m_buyer_registration_address_isValid = false;

    m_tax_address_isSet = false;
    m_tax_address_isValid = false;

    m_tax_identifier_isSet = false;
    m_tax_identifier_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIBuyer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuyer::fromJsonObject(QJsonObject json) {

    m_buyer_registration_address_isValid = ::OpenAPI::fromJsonValue(m_buyer_registration_address, json[QString("buyerRegistrationAddress")]);
    m_buyer_registration_address_isSet = !json[QString("buyerRegistrationAddress")].isNull() && m_buyer_registration_address_isValid;

    m_tax_address_isValid = ::OpenAPI::fromJsonValue(m_tax_address, json[QString("taxAddress")]);
    m_tax_address_isSet = !json[QString("taxAddress")].isNull() && m_tax_address_isValid;

    m_tax_identifier_isValid = ::OpenAPI::fromJsonValue(m_tax_identifier, json[QString("taxIdentifier")]);
    m_tax_identifier_isSet = !json[QString("taxIdentifier")].isNull() && m_tax_identifier_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIBuyer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuyer::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer_registration_address.isSet()) {
        obj.insert(QString("buyerRegistrationAddress"), ::OpenAPI::toJsonValue(m_buyer_registration_address));
    }
    if (m_tax_address.isSet()) {
        obj.insert(QString("taxAddress"), ::OpenAPI::toJsonValue(m_tax_address));
    }
    if (m_tax_identifier.isSet()) {
        obj.insert(QString("taxIdentifier"), ::OpenAPI::toJsonValue(m_tax_identifier));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAIExtendedContact OAIBuyer::getBuyerRegistrationAddress() const {
    return m_buyer_registration_address;
}
void OAIBuyer::setBuyerRegistrationAddress(const OAIExtendedContact &buyer_registration_address) {
    m_buyer_registration_address = buyer_registration_address;
    m_buyer_registration_address_isSet = true;
}

bool OAIBuyer::is_buyer_registration_address_Set() const{
    return m_buyer_registration_address_isSet;
}

bool OAIBuyer::is_buyer_registration_address_Valid() const{
    return m_buyer_registration_address_isValid;
}

OAITaxAddress OAIBuyer::getTaxAddress() const {
    return m_tax_address;
}
void OAIBuyer::setTaxAddress(const OAITaxAddress &tax_address) {
    m_tax_address = tax_address;
    m_tax_address_isSet = true;
}

bool OAIBuyer::is_tax_address_Set() const{
    return m_tax_address_isSet;
}

bool OAIBuyer::is_tax_address_Valid() const{
    return m_tax_address_isValid;
}

OAITaxIdentifier OAIBuyer::getTaxIdentifier() const {
    return m_tax_identifier;
}
void OAIBuyer::setTaxIdentifier(const OAITaxIdentifier &tax_identifier) {
    m_tax_identifier = tax_identifier;
    m_tax_identifier_isSet = true;
}

bool OAIBuyer::is_tax_identifier_Set() const{
    return m_tax_identifier_isSet;
}

bool OAIBuyer::is_tax_identifier_Valid() const{
    return m_tax_identifier_isValid;
}

QString OAIBuyer::getUsername() const {
    return m_username;
}
void OAIBuyer::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIBuyer::is_username_Set() const{
    return m_username_isSet;
}

bool OAIBuyer::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIBuyer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer_registration_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuyer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
