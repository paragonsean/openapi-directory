/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentDispute.h
 *
 * This type is used by the base response of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method retrieves detailed information on a specific payment dispute.
 */

#ifndef OAIPaymentDispute_H
#define OAIPaymentDispute_H

#include <QJsonObject>

#include "OAIDisputeEvidence.h"
#include "OAIEvidenceRequest.h"
#include "OAIInfoFromBuyer.h"
#include "OAIMonetaryTransaction.h"
#include "OAIOrderLineItems.h"
#include "OAIPaymentDisputeOutcomeDetail.h"
#include "OAIReturnAddress.h"
#include "OAISimpleAmount.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleAmount;
class OAIInfoFromBuyer;
class OAIDisputeEvidence;
class OAIEvidenceRequest;
class OAIOrderLineItems;
class OAIMonetaryTransaction;
class OAIPaymentDisputeOutcomeDetail;
class OAIReturnAddress;

class OAIPaymentDispute : public OAIObject {
public:
    OAIPaymentDispute();
    OAIPaymentDispute(QString json);
    ~OAIPaymentDispute() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISimpleAmount getAmount() const;
    void setAmount(const OAISimpleAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QList<QString> getAvailableChoices() const;
    void setAvailableChoices(const QList<QString> &available_choices);
    bool is_available_choices_Set() const;
    bool is_available_choices_Valid() const;

    OAIInfoFromBuyer getBuyerProvided() const;
    void setBuyerProvided(const OAIInfoFromBuyer &buyer_provided);
    bool is_buyer_provided_Set() const;
    bool is_buyer_provided_Valid() const;

    QString getBuyerUsername() const;
    void setBuyerUsername(const QString &buyer_username);
    bool is_buyer_username_Set() const;
    bool is_buyer_username_Valid() const;

    QString getClosedDate() const;
    void setClosedDate(const QString &closed_date);
    bool is_closed_date_Set() const;
    bool is_closed_date_Valid() const;

    QList<OAIDisputeEvidence> getEvidence() const;
    void setEvidence(const QList<OAIDisputeEvidence> &evidence);
    bool is_evidence_Set() const;
    bool is_evidence_Valid() const;

    QList<OAIEvidenceRequest> getEvidenceRequests() const;
    void setEvidenceRequests(const QList<OAIEvidenceRequest> &evidence_requests);
    bool is_evidence_requests_Set() const;
    bool is_evidence_requests_Valid() const;

    QList<OAIOrderLineItems> getLineItems() const;
    void setLineItems(const QList<OAIOrderLineItems> &line_items);
    bool is_line_items_Set() const;
    bool is_line_items_Valid() const;

    QList<OAIMonetaryTransaction> getMonetaryTransactions() const;
    void setMonetaryTransactions(const QList<OAIMonetaryTransaction> &monetary_transactions);
    bool is_monetary_transactions_Set() const;
    bool is_monetary_transactions_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QString getOpenDate() const;
    void setOpenDate(const QString &open_date);
    bool is_open_date_Set() const;
    bool is_open_date_Valid() const;

    QString getOrderId() const;
    void setOrderId(const QString &order_id);
    bool is_order_id_Set() const;
    bool is_order_id_Valid() const;

    QString getPaymentDisputeId() const;
    void setPaymentDisputeId(const QString &payment_dispute_id);
    bool is_payment_dispute_id_Set() const;
    bool is_payment_dispute_id_Valid() const;

    QString getPaymentDisputeStatus() const;
    void setPaymentDisputeStatus(const QString &payment_dispute_status);
    bool is_payment_dispute_status_Set() const;
    bool is_payment_dispute_status_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    OAIPaymentDisputeOutcomeDetail getResolution() const;
    void setResolution(const OAIPaymentDisputeOutcomeDetail &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    QString getRespondByDate() const;
    void setRespondByDate(const QString &respond_by_date);
    bool is_respond_by_date_Set() const;
    bool is_respond_by_date_Valid() const;

    OAIReturnAddress getReturnAddress() const;
    void setReturnAddress(const OAIReturnAddress &return_address);
    bool is_return_address_Set() const;
    bool is_return_address_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QString getSellerResponse() const;
    void setSellerResponse(const QString &seller_response);
    bool is_seller_response_Set() const;
    bool is_seller_response_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISimpleAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QList<QString> m_available_choices;
    bool m_available_choices_isSet;
    bool m_available_choices_isValid;

    OAIInfoFromBuyer m_buyer_provided;
    bool m_buyer_provided_isSet;
    bool m_buyer_provided_isValid;

    QString m_buyer_username;
    bool m_buyer_username_isSet;
    bool m_buyer_username_isValid;

    QString m_closed_date;
    bool m_closed_date_isSet;
    bool m_closed_date_isValid;

    QList<OAIDisputeEvidence> m_evidence;
    bool m_evidence_isSet;
    bool m_evidence_isValid;

    QList<OAIEvidenceRequest> m_evidence_requests;
    bool m_evidence_requests_isSet;
    bool m_evidence_requests_isValid;

    QList<OAIOrderLineItems> m_line_items;
    bool m_line_items_isSet;
    bool m_line_items_isValid;

    QList<OAIMonetaryTransaction> m_monetary_transactions;
    bool m_monetary_transactions_isSet;
    bool m_monetary_transactions_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QString m_open_date;
    bool m_open_date_isSet;
    bool m_open_date_isValid;

    QString m_order_id;
    bool m_order_id_isSet;
    bool m_order_id_isValid;

    QString m_payment_dispute_id;
    bool m_payment_dispute_id_isSet;
    bool m_payment_dispute_id_isValid;

    QString m_payment_dispute_status;
    bool m_payment_dispute_status_isSet;
    bool m_payment_dispute_status_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    OAIPaymentDisputeOutcomeDetail m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    QString m_respond_by_date;
    bool m_respond_by_date_isSet;
    bool m_respond_by_date_isValid;

    OAIReturnAddress m_return_address;
    bool m_return_address_isSet;
    bool m_return_address_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QString m_seller_response;
    bool m_seller_response_isSet;
    bool m_seller_response_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentDispute)

#endif // OAIPaymentDispute_H
