/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDisputeActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDisputeActivity::OAIPaymentDisputeActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDisputeActivity::OAIPaymentDisputeActivity() {
    this->initializeModel();
}

OAIPaymentDisputeActivity::~OAIPaymentDisputeActivity() {}

void OAIPaymentDisputeActivity::initializeModel() {

    m_activity_date_isSet = false;
    m_activity_date_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_actor_isSet = false;
    m_actor_isValid = false;
}

void OAIPaymentDisputeActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDisputeActivity::fromJsonObject(QJsonObject json) {

    m_activity_date_isValid = ::OpenAPI::fromJsonValue(m_activity_date, json[QString("activityDate")]);
    m_activity_date_isSet = !json[QString("activityDate")].isNull() && m_activity_date_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;
}

QString OAIPaymentDisputeActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDisputeActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_date_isSet) {
        obj.insert(QString("activityDate"), ::OpenAPI::toJsonValue(m_activity_date));
    }
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_actor_isSet) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    return obj;
}

QString OAIPaymentDisputeActivity::getActivityDate() const {
    return m_activity_date;
}
void OAIPaymentDisputeActivity::setActivityDate(const QString &activity_date) {
    m_activity_date = activity_date;
    m_activity_date_isSet = true;
}

bool OAIPaymentDisputeActivity::is_activity_date_Set() const{
    return m_activity_date_isSet;
}

bool OAIPaymentDisputeActivity::is_activity_date_Valid() const{
    return m_activity_date_isValid;
}

QString OAIPaymentDisputeActivity::getActivityType() const {
    return m_activity_type;
}
void OAIPaymentDisputeActivity::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIPaymentDisputeActivity::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIPaymentDisputeActivity::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QString OAIPaymentDisputeActivity::getActor() const {
    return m_actor;
}
void OAIPaymentDisputeActivity::setActor(const QString &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIPaymentDisputeActivity::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIPaymentDisputeActivity::is_actor_Valid() const{
    return m_actor_isValid;
}

bool OAIPaymentDisputeActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDisputeActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
