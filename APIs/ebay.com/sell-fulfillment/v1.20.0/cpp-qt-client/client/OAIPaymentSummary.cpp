/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentSummary::OAIPaymentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentSummary::OAIPaymentSummary() {
    this->initializeModel();
}

OAIPaymentSummary::~OAIPaymentSummary() {}

void OAIPaymentSummary::initializeModel() {

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_total_due_seller_isSet = false;
    m_total_due_seller_isValid = false;
}

void OAIPaymentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentSummary::fromJsonObject(QJsonObject json) {

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_total_due_seller_isValid = ::OpenAPI::fromJsonValue(m_total_due_seller, json[QString("totalDueSeller")]);
    m_total_due_seller_isSet = !json[QString("totalDueSeller")].isNull() && m_total_due_seller_isValid;
}

QString OAIPaymentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_total_due_seller.isSet()) {
        obj.insert(QString("totalDueSeller"), ::OpenAPI::toJsonValue(m_total_due_seller));
    }
    return obj;
}

QList<OAIPayment> OAIPaymentSummary::getPayments() const {
    return m_payments;
}
void OAIPaymentSummary::setPayments(const QList<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIPaymentSummary::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIPaymentSummary::is_payments_Valid() const{
    return m_payments_isValid;
}

QList<OAIOrderRefund> OAIPaymentSummary::getRefunds() const {
    return m_refunds;
}
void OAIPaymentSummary::setRefunds(const QList<OAIOrderRefund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIPaymentSummary::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIPaymentSummary::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAIAmount OAIPaymentSummary::getTotalDueSeller() const {
    return m_total_due_seller;
}
void OAIPaymentSummary::setTotalDueSeller(const OAIAmount &total_due_seller) {
    m_total_due_seller = total_due_seller;
    m_total_due_seller_isSet = true;
}

bool OAIPaymentSummary::is_total_due_seller_Set() const{
    return m_total_due_seller_isSet;
}

bool OAIPaymentSummary::is_total_due_seller_Valid() const{
    return m_total_due_seller_isValid;
}

bool OAIPaymentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_due_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
