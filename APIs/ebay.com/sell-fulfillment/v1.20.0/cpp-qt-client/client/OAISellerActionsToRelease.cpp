/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.20.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellerActionsToRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellerActionsToRelease::OAISellerActionsToRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellerActionsToRelease::OAISellerActionsToRelease() {
    this->initializeModel();
}

OAISellerActionsToRelease::~OAISellerActionsToRelease() {}

void OAISellerActionsToRelease::initializeModel() {

    m_seller_action_to_release_isSet = false;
    m_seller_action_to_release_isValid = false;
}

void OAISellerActionsToRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellerActionsToRelease::fromJsonObject(QJsonObject json) {

    m_seller_action_to_release_isValid = ::OpenAPI::fromJsonValue(m_seller_action_to_release, json[QString("sellerActionToRelease")]);
    m_seller_action_to_release_isSet = !json[QString("sellerActionToRelease")].isNull() && m_seller_action_to_release_isValid;
}

QString OAISellerActionsToRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellerActionsToRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_seller_action_to_release_isSet) {
        obj.insert(QString("sellerActionToRelease"), ::OpenAPI::toJsonValue(m_seller_action_to_release));
    }
    return obj;
}

QString OAISellerActionsToRelease::getSellerActionToRelease() const {
    return m_seller_action_to_release;
}
void OAISellerActionsToRelease::setSellerActionToRelease(const QString &seller_action_to_release) {
    m_seller_action_to_release = seller_action_to_release;
    m_seller_action_to_release_isSet = true;
}

bool OAISellerActionsToRelease::is_seller_action_to_release_Set() const{
    return m_seller_action_to_release_isSet;
}

bool OAISellerActionsToRelease::is_seller_action_to_release_Valid() const{
    return m_seller_action_to_release_isValid;
}

bool OAISellerActionsToRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_seller_action_to_release_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellerActionsToRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
