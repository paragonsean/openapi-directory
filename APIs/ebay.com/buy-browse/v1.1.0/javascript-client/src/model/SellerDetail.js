/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SellerLegalInfo from './SellerLegalInfo';

/**
 * The SellerDetail model module.
 * @module model/SellerDetail
 * @version v1.1.0
 */
class SellerDetail {
    /**
     * Constructs a new <code>SellerDetail</code>.
     * The type that defines the fields for basic and detailed information about the seller of the item returned by the &lt;b&gt; item&lt;/b&gt; resource.
     * @alias module:model/SellerDetail
     */
    constructor() { 
        
        SellerDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SellerDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SellerDetail} obj Optional instance to populate.
     * @return {module:model/SellerDetail} The populated <code>SellerDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SellerDetail();

            if (data.hasOwnProperty('feedbackPercentage')) {
                obj['feedbackPercentage'] = ApiClient.convertToType(data['feedbackPercentage'], 'String');
            }
            if (data.hasOwnProperty('feedbackScore')) {
                obj['feedbackScore'] = ApiClient.convertToType(data['feedbackScore'], 'Number');
            }
            if (data.hasOwnProperty('sellerAccountType')) {
                obj['sellerAccountType'] = ApiClient.convertToType(data['sellerAccountType'], 'String');
            }
            if (data.hasOwnProperty('sellerLegalInfo')) {
                obj['sellerLegalInfo'] = SellerLegalInfo.constructFromObject(data['sellerLegalInfo']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SellerDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SellerDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['feedbackPercentage'] && !(typeof data['feedbackPercentage'] === 'string' || data['feedbackPercentage'] instanceof String)) {
            throw new Error("Expected the field `feedbackPercentage` to be a primitive type in the JSON string but got " + data['feedbackPercentage']);
        }
        // ensure the json data is a string
        if (data['sellerAccountType'] && !(typeof data['sellerAccountType'] === 'string' || data['sellerAccountType'] instanceof String)) {
            throw new Error("Expected the field `sellerAccountType` to be a primitive type in the JSON string but got " + data['sellerAccountType']);
        }
        // validate the optional field `sellerLegalInfo`
        if (data['sellerLegalInfo']) { // data not null
          SellerLegalInfo.validateJSON(data['sellerLegalInfo']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * The percentage of the total positive feedback.
 * @member {String} feedbackPercentage
 */
SellerDetail.prototype['feedbackPercentage'] = undefined;

/**
 * The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
 * @member {Number} feedbackScore
 */
SellerDetail.prototype['feedbackScore'] = undefined;

/**
 * This indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in the following countries: This field is returned only on the following sites. EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid Values: BUSINESS or INDIVIDUAL Code so that your app gracefully handles any future changes to this list.
 * @member {String} sellerAccountType
 */
SellerDetail.prototype['sellerAccountType'] = undefined;

/**
 * @member {module:model/SellerLegalInfo} sellerLegalInfo
 */
SellerDetail.prototype['sellerLegalInfo'] = undefined;

/**
 * The user name created by the seller for use on eBay.
 * @member {String} username
 */
SellerDetail.prototype['username'] = undefined;






export default SellerDetail;

