/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoCorrections from './AutoCorrections';
import Error from './Error';
import ItemSummary from './ItemSummary';
import Refinement from './Refinement';

/**
 * The SearchPagedCollection model module.
 * @module model/SearchPagedCollection
 * @version v1.1.0
 */
class SearchPagedCollection {
    /**
     * Constructs a new <code>SearchPagedCollection</code>.
     * The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced &lt;em&gt; pages&lt;/em&gt; where each page has 0 or more items. 
     * @alias module:model/SearchPagedCollection
     */
    constructor() { 
        
        SearchPagedCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchPagedCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchPagedCollection} obj Optional instance to populate.
     * @return {module:model/SearchPagedCollection} The populated <code>SearchPagedCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchPagedCollection();

            if (data.hasOwnProperty('autoCorrections')) {
                obj['autoCorrections'] = AutoCorrections.constructFromObject(data['autoCorrections']);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('itemSummaries')) {
                obj['itemSummaries'] = ApiClient.convertToType(data['itemSummaries'], [ItemSummary]);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('prev')) {
                obj['prev'] = ApiClient.convertToType(data['prev'], 'String');
            }
            if (data.hasOwnProperty('refinement')) {
                obj['refinement'] = Refinement.constructFromObject(data['refinement']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Error]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchPagedCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchPagedCollection</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoCorrections`
        if (data['autoCorrections']) { // data not null
          AutoCorrections.validateJSON(data['autoCorrections']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        if (data['itemSummaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemSummaries'])) {
                throw new Error("Expected the field `itemSummaries` to be an array in the JSON data but got " + data['itemSummaries']);
            }
            // validate the optional field `itemSummaries` (array)
            for (const item of data['itemSummaries']) {
                ItemSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['prev'] && !(typeof data['prev'] === 'string' || data['prev'] instanceof String)) {
            throw new Error("Expected the field `prev` to be a primitive type in the JSON string but got " + data['prev']);
        }
        // validate the optional field `refinement`
        if (data['refinement']) { // data not null
          Refinement.validateJSON(data['refinement']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/AutoCorrections} autoCorrections
 */
SearchPagedCollection.prototype['autoCorrections'] = undefined;

/**
 * The URI of the current page of results. The following example of the search method returns items 1 thru 5 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?q=shirt&amp;limit=5&amp;offset=0.
 * @member {String} href
 */
SearchPagedCollection.prototype['href'] = undefined;

/**
 * An array of the items on this page. The items are sorted according to the sorting method specified in the request.
 * @member {Array.<module:model/ItemSummary>} itemSummaries
 */
SearchPagedCollection.prototype['itemSummaries'] = undefined;

/**
 * The value of the limit parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.
 * @member {Number} limit
 */
SearchPagedCollection.prototype['limit'] = undefined;

/**
 * The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set. The following example of the search method returns items 5 thru 10 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=10
 * @member {String} next
 */
SearchPagedCollection.prototype['next'] = undefined;

/**
 * This value indicates the offset used for current page of items being returned. Assume the initial request used an offset of 0 and a limit of 3. Then in the first page of results, this value would be 0, and items 1-3 are returned. For the second page, this value is 3 and so on.
 * @member {Number} offset
 */
SearchPagedCollection.prototype['offset'] = undefined;

/**
 * The URI for the previous page of results. This is returned if there is a previous page of results from the result set. The following example of the search method returns items 1 thru 5 from the list of items found, which would be the first set of items returned. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=0
 * @member {String} prev
 */
SearchPagedCollection.prototype['prev'] = undefined;

/**
 * @member {module:model/Refinement} refinement
 */
SearchPagedCollection.prototype['refinement'] = undefined;

/**
 * The total number of items that match the input criteria.
 * @member {Number} total
 */
SearchPagedCollection.prototype['total'] = undefined;

/**
 * The container with all the warnings for the request.
 * @member {Array.<module:model/Error>} warnings
 */
SearchPagedCollection.prototype['warnings'] = undefined;






export default SearchPagedCollection;

