/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeNameValue from './AttributeNameValue';

/**
 * The CompatibilityPayload model module.
 * @module model/CompatibilityPayload
 * @version v1.1.0
 */
class CompatibilityPayload {
    /**
     * Constructs a new <code>CompatibilityPayload</code>.
     * An array of attribute name/value pairs used to define a specific product. For example: If you wanted to specify a specific car, one of the name/value pairs would be &lt;br /&gt;&lt;code&gt;\&quot;name\&quot; : \&quot;Year\&quot;, &lt;br /&gt;\&quot;value\&quot; : \&quot;2019\&quot;&lt;/code&gt;  &lt;p&gt; For a list of the attributes required for cars and trucks and motorcycles see &lt;a href&#x3D;\&quot;/api-docs/buy/static/api-browse.html#Check\&quot;&gt;Check compatibility&lt;/a&gt; in the Buy Integration Guide.&lt;/p&gt;
     * @alias module:model/CompatibilityPayload
     */
    constructor() { 
        
        CompatibilityPayload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompatibilityPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompatibilityPayload} obj Optional instance to populate.
     * @return {module:model/CompatibilityPayload} The populated <code>CompatibilityPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompatibilityPayload();

            if (data.hasOwnProperty('compatibilityProperties')) {
                obj['compatibilityProperties'] = ApiClient.convertToType(data['compatibilityProperties'], [AttributeNameValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompatibilityPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompatibilityPayload</code>.
     */
    static validateJSON(data) {
        if (data['compatibilityProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['compatibilityProperties'])) {
                throw new Error("Expected the field `compatibilityProperties` to be an array in the JSON data but got " + data['compatibilityProperties']);
            }
            // validate the optional field `compatibilityProperties` (array)
            for (const item of data['compatibilityProperties']) {
                AttributeNameValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An array of attribute name/value pairs used to define a specific product. For example: If you wanted to specify a specific car, one of the name/value pairs would be &quot;name&quot; : &quot;Year&quot;, &quot;value&quot; : &quot;2019&quot; For a list of the attributes required for cars and trucks and motorcycles see Check compatibility in the Buy Integration Guide.
 * @member {Array.<module:model/AttributeNameValue>} compatibilityProperties
 */
CompatibilityPayload.prototype['compatibilityProperties'] = undefined;






export default CompatibilityPayload;

