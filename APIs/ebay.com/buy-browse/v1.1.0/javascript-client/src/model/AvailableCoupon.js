/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The AvailableCoupon model module.
 * @module model/AvailableCoupon
 * @version v1.1.0
 */
class AvailableCoupon {
    /**
     * Constructs a new <code>AvailableCoupon</code>.
     * @alias module:model/AvailableCoupon
     */
    constructor() { 
        
        AvailableCoupon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailableCoupon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableCoupon} obj Optional instance to populate.
     * @return {module:model/AvailableCoupon} The populated <code>AvailableCoupon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableCoupon();

            if (data.hasOwnProperty('constraint')) {
                obj['constraint'] = ApiClient.convertToType(data['constraint'], 'String');
            }
            if (data.hasOwnProperty('discountAmount')) {
                obj['discountAmount'] = Amount.constructFromObject(data['discountAmount']);
            }
            if (data.hasOwnProperty('discountType')) {
                obj['discountType'] = ApiClient.convertToType(data['discountType'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('redemptionCode')) {
                obj['redemptionCode'] = ApiClient.convertToType(data['redemptionCode'], 'String');
            }
            if (data.hasOwnProperty('termsWebUrl')) {
                obj['termsWebUrl'] = ApiClient.convertToType(data['termsWebUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableCoupon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableCoupon</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['constraint'] && !(typeof data['constraint'] === 'string' || data['constraint'] instanceof String)) {
            throw new Error("Expected the field `constraint` to be a primitive type in the JSON string but got " + data['constraint']);
        }
        // validate the optional field `discountAmount`
        if (data['discountAmount']) { // data not null
          Amount.validateJSON(data['discountAmount']);
        }
        // ensure the json data is a string
        if (data['discountType'] && !(typeof data['discountType'] === 'string' || data['discountType'] instanceof String)) {
            throw new Error("Expected the field `discountType` to be a primitive type in the JSON string but got " + data['discountType']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['redemptionCode'] && !(typeof data['redemptionCode'] === 'string' || data['redemptionCode'] instanceof String)) {
            throw new Error("Expected the field `redemptionCode` to be a primitive type in the JSON string but got " + data['redemptionCode']);
        }
        // ensure the json data is a string
        if (data['termsWebUrl'] && !(typeof data['termsWebUrl'] === 'string' || data['termsWebUrl'] instanceof String)) {
            throw new Error("Expected the field `termsWebUrl` to be a primitive type in the JSON string but got " + data['termsWebUrl']);
        }

        return true;
    }


}



/**
 * The limitations or restrictions of the coupon. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CouponConstraint'>eBay API documentation</a>
 * @member {String} constraint
 */
AvailableCoupon.prototype['constraint'] = undefined;

/**
 * @member {module:model/Amount} discountAmount
 */
AvailableCoupon.prototype['discountAmount'] = undefined;

/**
 * The type of discount that the coupon applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CouponDiscountType'>eBay API documentation</a>
 * @member {String} discountType
 */
AvailableCoupon.prototype['discountType'] = undefined;

/**
 * A description of the coupon. Note: The value returned in the termsWebUrl field should appear for all experiences when displaying coupons. The value in the availableCoupons.message field must also be included, if returned in the API response.
 * @member {String} message
 */
AvailableCoupon.prototype['message'] = undefined;

/**
 * The coupon code.
 * @member {String} redemptionCode
 */
AvailableCoupon.prototype['redemptionCode'] = undefined;

/**
 * The URL to the coupon terms of use. Note: The value returned in the termsWebUrl field should appear for all experiences when displaying coupons. The value in the availableCoupons.message field must also be included, if returned in the API response.
 * @member {String} termsWebUrl
 */
AvailableCoupon.prototype['termsWebUrl'] = undefined;






export default AvailableCoupon;

