/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaxJurisdiction from './TaxJurisdiction';

/**
 * The Taxes model module.
 * @module model/Taxes
 * @version v1.1.0
 */
class Taxes {
    /**
     * Constructs a new <code>Taxes</code>.
     * The type that defines the tax fields.
     * @alias module:model/Taxes
     */
    constructor() { 
        
        Taxes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Taxes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Taxes} obj Optional instance to populate.
     * @return {module:model/Taxes} The populated <code>Taxes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Taxes();

            if (data.hasOwnProperty('ebayCollectAndRemitTax')) {
                obj['ebayCollectAndRemitTax'] = ApiClient.convertToType(data['ebayCollectAndRemitTax'], 'Boolean');
            }
            if (data.hasOwnProperty('includedInPrice')) {
                obj['includedInPrice'] = ApiClient.convertToType(data['includedInPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('shippingAndHandlingTaxed')) {
                obj['shippingAndHandlingTaxed'] = ApiClient.convertToType(data['shippingAndHandlingTaxed'], 'Boolean');
            }
            if (data.hasOwnProperty('taxJurisdiction')) {
                obj['taxJurisdiction'] = TaxJurisdiction.constructFromObject(data['taxJurisdiction']);
            }
            if (data.hasOwnProperty('taxPercentage')) {
                obj['taxPercentage'] = ApiClient.convertToType(data['taxPercentage'], 'String');
            }
            if (data.hasOwnProperty('taxType')) {
                obj['taxType'] = ApiClient.convertToType(data['taxType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Taxes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Taxes</code>.
     */
    static validateJSON(data) {
        // validate the optional field `taxJurisdiction`
        if (data['taxJurisdiction']) { // data not null
          TaxJurisdiction.validateJSON(data['taxJurisdiction']);
        }
        // ensure the json data is a string
        if (data['taxPercentage'] && !(typeof data['taxPercentage'] === 'string' || data['taxPercentage'] instanceof String)) {
            throw new Error("Expected the field `taxPercentage` to be a primitive type in the JSON string but got " + data['taxPercentage']);
        }
        // ensure the json data is a string
        if (data['taxType'] && !(typeof data['taxType'] === 'string' || data['taxType'] instanceof String)) {
            throw new Error("Expected the field `taxType` to be a primitive type in the JSON string but got " + data['taxType']);
        }

        return true;
    }


}



/**
 * This field is only returned if true, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence.
 * @member {Boolean} ebayCollectAndRemitTax
 */
Taxes.prototype['ebayCollectAndRemitTax'] = undefined;

/**
 * This indicates if tax was applied for the cost of the item.
 * @member {Boolean} includedInPrice
 */
Taxes.prototype['includedInPrice'] = undefined;

/**
 * This indicates if tax is applied for the shipping cost.
 * @member {Boolean} shippingAndHandlingTaxed
 */
Taxes.prototype['shippingAndHandlingTaxed'] = undefined;

/**
 * @member {module:model/TaxJurisdiction} taxJurisdiction
 */
Taxes.prototype['taxJurisdiction'] = undefined;

/**
 * The percentage of tax.
 * @member {String} taxPercentage
 */
Taxes.prototype['taxPercentage'] = undefined;

/**
 * This field indicates the type of tax that may be collected for the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType'>eBay API documentation</a>
 * @member {String} taxType
 */
Taxes.prototype['taxType'] = undefined;






export default Taxes;

