/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LegalAddress from './LegalAddress';
import VatDetail from './VatDetail';

/**
 * The SellerLegalInfo model module.
 * @module model/SellerLegalInfo
 * @version v1.1.0
 */
class SellerLegalInfo {
    /**
     * Constructs a new <code>SellerLegalInfo</code>.
     * The type that defines the fields for the contact information for a seller.
     * @alias module:model/SellerLegalInfo
     */
    constructor() { 
        
        SellerLegalInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SellerLegalInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SellerLegalInfo} obj Optional instance to populate.
     * @return {module:model/SellerLegalInfo} The populated <code>SellerLegalInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SellerLegalInfo();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('imprint')) {
                obj['imprint'] = ApiClient.convertToType(data['imprint'], 'String');
            }
            if (data.hasOwnProperty('legalContactFirstName')) {
                obj['legalContactFirstName'] = ApiClient.convertToType(data['legalContactFirstName'], 'String');
            }
            if (data.hasOwnProperty('legalContactLastName')) {
                obj['legalContactLastName'] = ApiClient.convertToType(data['legalContactLastName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('sellerProvidedLegalAddress')) {
                obj['sellerProvidedLegalAddress'] = LegalAddress.constructFromObject(data['sellerProvidedLegalAddress']);
            }
            if (data.hasOwnProperty('termsOfService')) {
                obj['termsOfService'] = ApiClient.convertToType(data['termsOfService'], 'String');
            }
            if (data.hasOwnProperty('vatDetails')) {
                obj['vatDetails'] = ApiClient.convertToType(data['vatDetails'], [VatDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SellerLegalInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SellerLegalInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['imprint'] && !(typeof data['imprint'] === 'string' || data['imprint'] instanceof String)) {
            throw new Error("Expected the field `imprint` to be a primitive type in the JSON string but got " + data['imprint']);
        }
        // ensure the json data is a string
        if (data['legalContactFirstName'] && !(typeof data['legalContactFirstName'] === 'string' || data['legalContactFirstName'] instanceof String)) {
            throw new Error("Expected the field `legalContactFirstName` to be a primitive type in the JSON string but got " + data['legalContactFirstName']);
        }
        // ensure the json data is a string
        if (data['legalContactLastName'] && !(typeof data['legalContactLastName'] === 'string' || data['legalContactLastName'] instanceof String)) {
            throw new Error("Expected the field `legalContactLastName` to be a primitive type in the JSON string but got " + data['legalContactLastName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        // validate the optional field `sellerProvidedLegalAddress`
        if (data['sellerProvidedLegalAddress']) { // data not null
          LegalAddress.validateJSON(data['sellerProvidedLegalAddress']);
        }
        // ensure the json data is a string
        if (data['termsOfService'] && !(typeof data['termsOfService'] === 'string' || data['termsOfService'] instanceof String)) {
            throw new Error("Expected the field `termsOfService` to be a primitive type in the JSON string but got " + data['termsOfService']);
        }
        if (data['vatDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vatDetails'])) {
                throw new Error("Expected the field `vatDetails` to be an array in the JSON data but got " + data['vatDetails']);
            }
            // validate the optional field `vatDetails` (array)
            for (const item of data['vatDetails']) {
                VatDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The seller's business email address.
 * @member {String} email
 */
SellerLegalInfo.prototype['email'] = undefined;

/**
 * The seller' business fax number.
 * @member {String} fax
 */
SellerLegalInfo.prototype['fax'] = undefined;

/**
 * This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
 * @member {String} imprint
 */
SellerLegalInfo.prototype['imprint'] = undefined;

/**
 * The seller's first name.
 * @member {String} legalContactFirstName
 */
SellerLegalInfo.prototype['legalContactFirstName'] = undefined;

/**
 * The seller's last name.
 * @member {String} legalContactLastName
 */
SellerLegalInfo.prototype['legalContactLastName'] = undefined;

/**
 * The name of the seller's business.
 * @member {String} name
 */
SellerLegalInfo.prototype['name'] = undefined;

/**
 * The seller's business phone number.
 * @member {String} phone
 */
SellerLegalInfo.prototype['phone'] = undefined;

/**
 * The seller's registration number. This is information used by some countries.
 * @member {String} registrationNumber
 */
SellerLegalInfo.prototype['registrationNumber'] = undefined;

/**
 * @member {module:model/LegalAddress} sellerProvidedLegalAddress
 */
SellerLegalInfo.prototype['sellerProvidedLegalAddress'] = undefined;

/**
 * This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.
 * @member {String} termsOfService
 */
SellerLegalInfo.prototype['termsOfService'] = undefined;

/**
 * An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.
 * @member {Array.<module:model/VatDetail>} vatDetails
 */
SellerLegalInfo.prototype['vatDetails'] = undefined;






export default SellerLegalInfo;

