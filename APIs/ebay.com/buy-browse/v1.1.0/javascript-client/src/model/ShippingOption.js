/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConvertedAmount from './ConvertedAmount';
import ShipToLocation from './ShipToLocation';

/**
 * The ShippingOption model module.
 * @module model/ShippingOption
 * @version v1.1.0
 */
class ShippingOption {
    /**
     * Constructs a new <code>ShippingOption</code>.
     * The type that defines the fields for the details of a shipping provider.
     * @alias module:model/ShippingOption
     */
    constructor() { 
        
        ShippingOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShippingOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingOption} obj Optional instance to populate.
     * @return {module:model/ShippingOption} The populated <code>ShippingOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingOption();

            if (data.hasOwnProperty('additionalShippingCostPerUnit')) {
                obj['additionalShippingCostPerUnit'] = ConvertedAmount.constructFromObject(data['additionalShippingCostPerUnit']);
            }
            if (data.hasOwnProperty('cutOffDateUsedForEstimate')) {
                obj['cutOffDateUsedForEstimate'] = ApiClient.convertToType(data['cutOffDateUsedForEstimate'], 'String');
            }
            if (data.hasOwnProperty('fulfilledThrough')) {
                obj['fulfilledThrough'] = ApiClient.convertToType(data['fulfilledThrough'], 'String');
            }
            if (data.hasOwnProperty('guaranteedDelivery')) {
                obj['guaranteedDelivery'] = ApiClient.convertToType(data['guaranteedDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('importCharges')) {
                obj['importCharges'] = ConvertedAmount.constructFromObject(data['importCharges']);
            }
            if (data.hasOwnProperty('maxEstimatedDeliveryDate')) {
                obj['maxEstimatedDeliveryDate'] = ApiClient.convertToType(data['maxEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('minEstimatedDeliveryDate')) {
                obj['minEstimatedDeliveryDate'] = ApiClient.convertToType(data['minEstimatedDeliveryDate'], 'String');
            }
            if (data.hasOwnProperty('quantityUsedForEstimate')) {
                obj['quantityUsedForEstimate'] = ApiClient.convertToType(data['quantityUsedForEstimate'], 'Number');
            }
            if (data.hasOwnProperty('shipToLocationUsedForEstimate')) {
                obj['shipToLocationUsedForEstimate'] = ShipToLocation.constructFromObject(data['shipToLocationUsedForEstimate']);
            }
            if (data.hasOwnProperty('shippingCarrierCode')) {
                obj['shippingCarrierCode'] = ApiClient.convertToType(data['shippingCarrierCode'], 'String');
            }
            if (data.hasOwnProperty('shippingCost')) {
                obj['shippingCost'] = ConvertedAmount.constructFromObject(data['shippingCost']);
            }
            if (data.hasOwnProperty('shippingCostType')) {
                obj['shippingCostType'] = ApiClient.convertToType(data['shippingCostType'], 'String');
            }
            if (data.hasOwnProperty('shippingServiceCode')) {
                obj['shippingServiceCode'] = ApiClient.convertToType(data['shippingServiceCode'], 'String');
            }
            if (data.hasOwnProperty('trademarkSymbol')) {
                obj['trademarkSymbol'] = ApiClient.convertToType(data['trademarkSymbol'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingOption</code>.
     */
    static validateJSON(data) {
        // validate the optional field `additionalShippingCostPerUnit`
        if (data['additionalShippingCostPerUnit']) { // data not null
          ConvertedAmount.validateJSON(data['additionalShippingCostPerUnit']);
        }
        // ensure the json data is a string
        if (data['cutOffDateUsedForEstimate'] && !(typeof data['cutOffDateUsedForEstimate'] === 'string' || data['cutOffDateUsedForEstimate'] instanceof String)) {
            throw new Error("Expected the field `cutOffDateUsedForEstimate` to be a primitive type in the JSON string but got " + data['cutOffDateUsedForEstimate']);
        }
        // ensure the json data is a string
        if (data['fulfilledThrough'] && !(typeof data['fulfilledThrough'] === 'string' || data['fulfilledThrough'] instanceof String)) {
            throw new Error("Expected the field `fulfilledThrough` to be a primitive type in the JSON string but got " + data['fulfilledThrough']);
        }
        // validate the optional field `importCharges`
        if (data['importCharges']) { // data not null
          ConvertedAmount.validateJSON(data['importCharges']);
        }
        // ensure the json data is a string
        if (data['maxEstimatedDeliveryDate'] && !(typeof data['maxEstimatedDeliveryDate'] === 'string' || data['maxEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['maxEstimatedDeliveryDate']);
        }
        // ensure the json data is a string
        if (data['minEstimatedDeliveryDate'] && !(typeof data['minEstimatedDeliveryDate'] === 'string' || data['minEstimatedDeliveryDate'] instanceof String)) {
            throw new Error("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got " + data['minEstimatedDeliveryDate']);
        }
        // validate the optional field `shipToLocationUsedForEstimate`
        if (data['shipToLocationUsedForEstimate']) { // data not null
          ShipToLocation.validateJSON(data['shipToLocationUsedForEstimate']);
        }
        // ensure the json data is a string
        if (data['shippingCarrierCode'] && !(typeof data['shippingCarrierCode'] === 'string' || data['shippingCarrierCode'] instanceof String)) {
            throw new Error("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got " + data['shippingCarrierCode']);
        }
        // validate the optional field `shippingCost`
        if (data['shippingCost']) { // data not null
          ConvertedAmount.validateJSON(data['shippingCost']);
        }
        // ensure the json data is a string
        if (data['shippingCostType'] && !(typeof data['shippingCostType'] === 'string' || data['shippingCostType'] instanceof String)) {
            throw new Error("Expected the field `shippingCostType` to be a primitive type in the JSON string but got " + data['shippingCostType']);
        }
        // ensure the json data is a string
        if (data['shippingServiceCode'] && !(typeof data['shippingServiceCode'] === 'string' || data['shippingServiceCode'] instanceof String)) {
            throw new Error("Expected the field `shippingServiceCode` to be a primitive type in the JSON string but got " + data['shippingServiceCode']);
        }
        // ensure the json data is a string
        if (data['trademarkSymbol'] && !(typeof data['trademarkSymbol'] === 'string' || data['trademarkSymbol'] instanceof String)) {
            throw new Error("Expected the field `trademarkSymbol` to be a primitive type in the JSON string but got " + data['trademarkSymbol']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConvertedAmount} additionalShippingCostPerUnit
 */
ShippingOption.prototype['additionalShippingCostPerUnit'] = undefined;

/**
 * The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
 * @member {String} cutOffDateUsedForEstimate
 */
ShippingOption.prototype['cutOffDateUsedForEstimate'] = undefined;

/**
 * If the item is being shipped by eBay's Global Shipping Program, this field returns GLOBAL_SHIPPING. Otherwise this field is null. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:FulfilledThroughEnum'>eBay API documentation</a>
 * @member {String} fulfilledThrough
 */
ShippingOption.prototype['fulfilledThrough'] = undefined;

/**
 * Indicates if the seller has committed to shipping the item with eBay Guaranteed Delivery. With eBay Guaranteed Delivery, the seller is committed to getting the line item to the buyer within 4 business days or less. See the Buying items with eBay Guaranteed Delivery help topic for more details about eBay Guaranteed Delivery.
 * @member {Boolean} guaranteedDelivery
 */
ShippingOption.prototype['guaranteedDelivery'] = undefined;

/**
 * @member {module:model/ConvertedAmount} importCharges
 */
ShippingOption.prototype['importCharges'] = undefined;

/**
 * The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
 * @member {String} maxEstimatedDeliveryDate
 */
ShippingOption.prototype['maxEstimatedDeliveryDate'] = undefined;

/**
 * The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
 * @member {String} minEstimatedDeliveryDate
 */
ShippingOption.prototype['minEstimatedDeliveryDate'] = undefined;

/**
 * The number of items used when calculating the estimation information.
 * @member {Number} quantityUsedForEstimate
 */
ShippingOption.prototype['quantityUsedForEstimate'] = undefined;

/**
 * @member {module:model/ShipToLocation} shipToLocationUsedForEstimate
 */
ShippingOption.prototype['shipToLocationUsedForEstimate'] = undefined;

/**
 * The name of the shipping provider, such as FedEx, or USPS.
 * @member {String} shippingCarrierCode
 */
ShippingOption.prototype['shippingCarrierCode'] = undefined;

/**
 * @member {module:model/ConvertedAmount} shippingCost
 */
ShippingOption.prototype['shippingCost'] = undefined;

/**
 * Indicates the class of the shipping cost. Valid Values: FIXED or CALCULATED Code so that your app gracefully handles any future changes to this list.
 * @member {String} shippingCostType
 */
ShippingOption.prototype['shippingCostType'] = undefined;

/**
 * The type of shipping service. For example, USPS First Class.
 * @member {String} shippingServiceCode
 */
ShippingOption.prototype['shippingServiceCode'] = undefined;

/**
 * Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.
 * @member {String} trademarkSymbol
 */
ShippingOption.prototype['trademarkSymbol'] = undefined;

/**
 * The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.
 * @member {String} type
 */
ShippingOption.prototype['type'] = undefined;






export default ShippingOption;

