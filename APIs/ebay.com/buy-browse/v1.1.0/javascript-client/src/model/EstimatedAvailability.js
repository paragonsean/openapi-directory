/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EstimatedAvailability model module.
 * @module model/EstimatedAvailability
 * @version v1.1.0
 */
class EstimatedAvailability {
    /**
     * Constructs a new <code>EstimatedAvailability</code>.
     * The type that defines the fields for the estimated item availability information.
     * @alias module:model/EstimatedAvailability
     */
    constructor() { 
        
        EstimatedAvailability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EstimatedAvailability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EstimatedAvailability} obj Optional instance to populate.
     * @return {module:model/EstimatedAvailability} The populated <code>EstimatedAvailability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EstimatedAvailability();

            if (data.hasOwnProperty('availabilityThreshold')) {
                obj['availabilityThreshold'] = ApiClient.convertToType(data['availabilityThreshold'], 'Number');
            }
            if (data.hasOwnProperty('availabilityThresholdType')) {
                obj['availabilityThresholdType'] = ApiClient.convertToType(data['availabilityThresholdType'], 'String');
            }
            if (data.hasOwnProperty('deliveryOptions')) {
                obj['deliveryOptions'] = ApiClient.convertToType(data['deliveryOptions'], ['String']);
            }
            if (data.hasOwnProperty('estimatedAvailabilityStatus')) {
                obj['estimatedAvailabilityStatus'] = ApiClient.convertToType(data['estimatedAvailabilityStatus'], 'String');
            }
            if (data.hasOwnProperty('estimatedAvailableQuantity')) {
                obj['estimatedAvailableQuantity'] = ApiClient.convertToType(data['estimatedAvailableQuantity'], 'Number');
            }
            if (data.hasOwnProperty('estimatedSoldQuantity')) {
                obj['estimatedSoldQuantity'] = ApiClient.convertToType(data['estimatedSoldQuantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EstimatedAvailability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EstimatedAvailability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availabilityThresholdType'] && !(typeof data['availabilityThresholdType'] === 'string' || data['availabilityThresholdType'] instanceof String)) {
            throw new Error("Expected the field `availabilityThresholdType` to be a primitive type in the JSON string but got " + data['availabilityThresholdType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deliveryOptions'])) {
            throw new Error("Expected the field `deliveryOptions` to be an array in the JSON data but got " + data['deliveryOptions']);
        }
        // ensure the json data is a string
        if (data['estimatedAvailabilityStatus'] && !(typeof data['estimatedAvailabilityStatus'] === 'string' || data['estimatedAvailabilityStatus'] instanceof String)) {
            throw new Error("Expected the field `estimatedAvailabilityStatus` to be a primitive type in the JSON string but got " + data['estimatedAvailabilityStatus']);
        }

        return true;
    }


}



/**
 * This field is return only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.
 * @member {Number} availabilityThreshold
 */
EstimatedAvailability.prototype['availabilityThreshold'] = undefined;

/**
 * This field is return only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be MORE_THAN. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item. The following are the display item quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold fields are not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityThresholdEnum'>eBay API documentation</a>
 * @member {String} availabilityThresholdType
 */
EstimatedAvailability.prototype['availabilityThresholdType'] = undefined;

/**
 * An array of available delivery options. Valid Values: SHIP_TO_HOME, SELLER_ARRANGED_LOCAL_PICKUP, IN_STORE_PICKUP, PICKUP_DROP_OFF, or DIGITAL_DELIVERY Code so that your app gracefully handles any future changes to this list.
 * @member {Array.<String>} deliveryOptions
 */
EstimatedAvailability.prototype['deliveryOptions'] = undefined;

/**
 * An enumeration value representing the inventory status of this item. Note: Be sure to review the itemEndDate field to determine whether the item is available for purchase. Valid Values: IN_STOCK, LIMITED_STOCK, or OUT_OF_STOCK Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityStatusEnum'>eBay API documentation</a>
 * @member {String} estimatedAvailabilityStatus
 */
EstimatedAvailability.prototype['estimatedAvailabilityStatus'] = undefined;

/**
 * The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
 * @member {Number} estimatedAvailableQuantity
 */
EstimatedAvailability.prototype['estimatedAvailableQuantity'] = undefined;

/**
 * The estimated number of this item that have been sold.
 * @member {Number} estimatedSoldQuantity
 */
EstimatedAvailability.prototype['estimatedSoldQuantity'] = undefined;






export default EstimatedAvailability;

