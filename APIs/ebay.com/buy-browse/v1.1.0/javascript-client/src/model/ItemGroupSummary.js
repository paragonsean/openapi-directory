/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';

/**
 * The ItemGroupSummary model module.
 * @module model/ItemGroupSummary
 * @version v1.1.0
 */
class ItemGroupSummary {
    /**
     * Constructs a new <code>ItemGroupSummary</code>.
     * The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the \&quot;parent\&quot;. All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. &lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt; Note: &lt;/b&gt; This container is returned only if the &lt;b&gt; item_id&lt;/b&gt; in the request is an item group (parent ID of an item with variations).&lt;/span&gt;
     * @alias module:model/ItemGroupSummary
     */
    constructor() { 
        
        ItemGroupSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemGroupSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemGroupSummary} obj Optional instance to populate.
     * @return {module:model/ItemGroupSummary} The populated <code>ItemGroupSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemGroupSummary();

            if (data.hasOwnProperty('itemGroupAdditionalImages')) {
                obj['itemGroupAdditionalImages'] = ApiClient.convertToType(data['itemGroupAdditionalImages'], [Image]);
            }
            if (data.hasOwnProperty('itemGroupHref')) {
                obj['itemGroupHref'] = ApiClient.convertToType(data['itemGroupHref'], 'String');
            }
            if (data.hasOwnProperty('itemGroupId')) {
                obj['itemGroupId'] = ApiClient.convertToType(data['itemGroupId'], 'String');
            }
            if (data.hasOwnProperty('itemGroupImage')) {
                obj['itemGroupImage'] = Image.constructFromObject(data['itemGroupImage']);
            }
            if (data.hasOwnProperty('itemGroupTitle')) {
                obj['itemGroupTitle'] = ApiClient.convertToType(data['itemGroupTitle'], 'String');
            }
            if (data.hasOwnProperty('itemGroupType')) {
                obj['itemGroupType'] = ApiClient.convertToType(data['itemGroupType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemGroupSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemGroupSummary</code>.
     */
    static validateJSON(data) {
        if (data['itemGroupAdditionalImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemGroupAdditionalImages'])) {
                throw new Error("Expected the field `itemGroupAdditionalImages` to be an array in the JSON data but got " + data['itemGroupAdditionalImages']);
            }
            // validate the optional field `itemGroupAdditionalImages` (array)
            for (const item of data['itemGroupAdditionalImages']) {
                Image.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['itemGroupHref'] && !(typeof data['itemGroupHref'] === 'string' || data['itemGroupHref'] instanceof String)) {
            throw new Error("Expected the field `itemGroupHref` to be a primitive type in the JSON string but got " + data['itemGroupHref']);
        }
        // ensure the json data is a string
        if (data['itemGroupId'] && !(typeof data['itemGroupId'] === 'string' || data['itemGroupId'] instanceof String)) {
            throw new Error("Expected the field `itemGroupId` to be a primitive type in the JSON string but got " + data['itemGroupId']);
        }
        // validate the optional field `itemGroupImage`
        if (data['itemGroupImage']) { // data not null
          Image.validateJSON(data['itemGroupImage']);
        }
        // ensure the json data is a string
        if (data['itemGroupTitle'] && !(typeof data['itemGroupTitle'] === 'string' || data['itemGroupTitle'] instanceof String)) {
            throw new Error("Expected the field `itemGroupTitle` to be a primitive type in the JSON string but got " + data['itemGroupTitle']);
        }
        // ensure the json data is a string
        if (data['itemGroupType'] && !(typeof data['itemGroupType'] === 'string' || data['itemGroupType'] instanceof String)) {
            throw new Error("Expected the field `itemGroupType` to be a primitive type in the JSON string but got " + data['itemGroupType']);
        }

        return true;
    }


}



/**
 * An array of containers with the URLs for images that are in addition to the primary image of the item group. The primary image is returned in the itemGroupImage field.
 * @member {Array.<module:model/Image>} itemGroupAdditionalImages
 */
ItemGroupSummary.prototype['itemGroupAdditionalImages'] = undefined;

/**
 * The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
 * @member {String} itemGroupHref
 */
ItemGroupSummary.prototype['itemGroupHref'] = undefined;

/**
 * The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
 * @member {String} itemGroupId
 */
ItemGroupSummary.prototype['itemGroupId'] = undefined;

/**
 * @member {module:model/Image} itemGroupImage
 */
ItemGroupSummary.prototype['itemGroupImage'] = undefined;

/**
 * The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
 * @member {String} itemGroupTitle
 */
ItemGroupSummary.prototype['itemGroupTitle'] = undefined;

/**
 * An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ItemGroupTypeEnum'>eBay API documentation</a>
 * @member {String} itemGroupType
 */
ItemGroupSummary.prototype['itemGroupType'] = undefined;






export default ItemGroupSummary;

