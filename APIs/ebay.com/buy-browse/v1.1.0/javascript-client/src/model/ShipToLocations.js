/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShipToRegion from './ShipToRegion';

/**
 * The ShipToLocations model module.
 * @module model/ShipToLocations
 * @version v1.1.0
 */
class ShipToLocations {
    /**
     * Constructs a new <code>ShipToLocations</code>.
     * The type that defines the fields that include and exclude geographic regions affecting where the item can be shipped. The seller defines these regions when listing the item.
     * @alias module:model/ShipToLocations
     */
    constructor() { 
        
        ShipToLocations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShipToLocations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShipToLocations} obj Optional instance to populate.
     * @return {module:model/ShipToLocations} The populated <code>ShipToLocations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShipToLocations();

            if (data.hasOwnProperty('regionExcluded')) {
                obj['regionExcluded'] = ApiClient.convertToType(data['regionExcluded'], [ShipToRegion]);
            }
            if (data.hasOwnProperty('regionIncluded')) {
                obj['regionIncluded'] = ApiClient.convertToType(data['regionIncluded'], [ShipToRegion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShipToLocations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShipToLocations</code>.
     */
    static validateJSON(data) {
        if (data['regionExcluded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regionExcluded'])) {
                throw new Error("Expected the field `regionExcluded` to be an array in the JSON data but got " + data['regionExcluded']);
            }
            // validate the optional field `regionExcluded` (array)
            for (const item of data['regionExcluded']) {
                ShipToRegion.validateJSON(item);
            };
        }
        if (data['regionIncluded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regionIncluded'])) {
                throw new Error("Expected the field `regionIncluded` to be an array in the JSON data but got " + data['regionIncluded']);
            }
            // validate the optional field `regionIncluded` (array)
            for (const item of data['regionIncluded']) {
                ShipToRegion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An array of containers that express the large geographical regions, countries, state/provinces, or special locations within a country where the seller is not willing to ship to.
 * @member {Array.<module:model/ShipToRegion>} regionExcluded
 */
ShipToLocations.prototype['regionExcluded'] = undefined;

/**
 * An array of containers that express the large geographical regions, countries, or state/provinces within a country where the seller is willing to ship to. Prospective buyers must look at the shipping regions under this container, as well as the shipping regions that are under the regionExcluded to see where the seller is willing to ship items. Sellers can specify that they ship 'Worldwide', but then add several large geographical regions (e.g. Asia, Oceania, Middle East) to the exclusion list, or sellers can specify that they ship to Europe and Africa, but then add several individual countries to the exclusion list.
 * @member {Array.<module:model/ShipToRegion>} regionIncluded
 */
ShipToLocations.prototype['regionIncluded'] = undefined;






export default ShipToLocations;

