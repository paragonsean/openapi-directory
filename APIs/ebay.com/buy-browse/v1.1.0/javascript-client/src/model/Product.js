/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalProductIdentity from './AdditionalProductIdentity';
import AspectGroup from './AspectGroup';
import Image from './Image';

/**
 * The Product model module.
 * @module model/Product
 * @version v1.1.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * The type that defines the fields for the product information of the item.
     * @alias module:model/Product
     */
    constructor() { 
        
        Product.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('additionalImages')) {
                obj['additionalImages'] = ApiClient.convertToType(data['additionalImages'], [Image]);
            }
            if (data.hasOwnProperty('additionalProductIdentities')) {
                obj['additionalProductIdentities'] = ApiClient.convertToType(data['additionalProductIdentities'], [AdditionalProductIdentity]);
            }
            if (data.hasOwnProperty('aspectGroups')) {
                obj['aspectGroups'] = ApiClient.convertToType(data['aspectGroups'], [AspectGroup]);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gtins')) {
                obj['gtins'] = ApiClient.convertToType(data['gtins'], ['String']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('mpns')) {
                obj['mpns'] = ApiClient.convertToType(data['mpns'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        if (data['additionalImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalImages'])) {
                throw new Error("Expected the field `additionalImages` to be an array in the JSON data but got " + data['additionalImages']);
            }
            // validate the optional field `additionalImages` (array)
            for (const item of data['additionalImages']) {
                Image.validateJSON(item);
            };
        }
        if (data['additionalProductIdentities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalProductIdentities'])) {
                throw new Error("Expected the field `additionalProductIdentities` to be an array in the JSON data but got " + data['additionalProductIdentities']);
            }
            // validate the optional field `additionalProductIdentities` (array)
            for (const item of data['additionalProductIdentities']) {
                AdditionalProductIdentity.validateJSON(item);
            };
        }
        if (data['aspectGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aspectGroups'])) {
                throw new Error("Expected the field `aspectGroups` to be an array in the JSON data but got " + data['aspectGroups']);
            }
            // validate the optional field `aspectGroups` (array)
            for (const item of data['aspectGroups']) {
                AspectGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gtins'])) {
            throw new Error("Expected the field `gtins` to be an array in the JSON data but got " + data['gtins']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mpns'])) {
            throw new Error("Expected the field `mpns` to be an array in the JSON data but got " + data['mpns']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * An array of containers with the URLs for the product images that are in addition to the primary image.
 * @member {Array.<module:model/Image>} additionalImages
 */
Product.prototype['additionalImages'] = undefined;

/**
 * An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.
 * @member {Array.<module:model/AdditionalProductIdentity>} additionalProductIdentities
 */
Product.prototype['additionalProductIdentities'] = undefined;

/**
 * An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.
 * @member {Array.<module:model/AspectGroup>} aspectGroups
 */
Product.prototype['aspectGroups'] = undefined;

/**
 * The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).
 * @member {String} brand
 */
Product.prototype['brand'] = undefined;

/**
 * The rich description of an eBay product, which might contain HTML.
 * @member {String} description
 */
Product.prototype['description'] = undefined;

/**
 * An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
 * @member {Array.<String>} gtins
 */
Product.prototype['gtins'] = undefined;

/**
 * @member {module:model/Image} image
 */
Product.prototype['image'] = undefined;

/**
 * An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.
 * @member {Array.<String>} mpns
 */
Product.prototype['mpns'] = undefined;

/**
 * The title of the product.
 * @member {String} title
 */
Product.prototype['title'] = undefined;






export default Product;

