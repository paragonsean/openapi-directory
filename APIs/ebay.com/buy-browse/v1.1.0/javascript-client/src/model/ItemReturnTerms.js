/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeDuration from './TimeDuration';

/**
 * The ItemReturnTerms model module.
 * @module model/ItemReturnTerms
 * @version v1.1.0
 */
class ItemReturnTerms {
    /**
     * Constructs a new <code>ItemReturnTerms</code>.
     * The type that defines the fields for the seller&#39;s return policy.
     * @alias module:model/ItemReturnTerms
     */
    constructor() { 
        
        ItemReturnTerms.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemReturnTerms</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemReturnTerms} obj Optional instance to populate.
     * @return {module:model/ItemReturnTerms} The populated <code>ItemReturnTerms</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemReturnTerms();

            if (data.hasOwnProperty('extendedHolidayReturnsOffered')) {
                obj['extendedHolidayReturnsOffered'] = ApiClient.convertToType(data['extendedHolidayReturnsOffered'], 'Boolean');
            }
            if (data.hasOwnProperty('refundMethod')) {
                obj['refundMethod'] = ApiClient.convertToType(data['refundMethod'], 'String');
            }
            if (data.hasOwnProperty('restockingFeePercentage')) {
                obj['restockingFeePercentage'] = ApiClient.convertToType(data['restockingFeePercentage'], 'String');
            }
            if (data.hasOwnProperty('returnInstructions')) {
                obj['returnInstructions'] = ApiClient.convertToType(data['returnInstructions'], 'String');
            }
            if (data.hasOwnProperty('returnMethod')) {
                obj['returnMethod'] = ApiClient.convertToType(data['returnMethod'], 'String');
            }
            if (data.hasOwnProperty('returnPeriod')) {
                obj['returnPeriod'] = TimeDuration.constructFromObject(data['returnPeriod']);
            }
            if (data.hasOwnProperty('returnShippingCostPayer')) {
                obj['returnShippingCostPayer'] = ApiClient.convertToType(data['returnShippingCostPayer'], 'String');
            }
            if (data.hasOwnProperty('returnsAccepted')) {
                obj['returnsAccepted'] = ApiClient.convertToType(data['returnsAccepted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemReturnTerms</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemReturnTerms</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['refundMethod'] && !(typeof data['refundMethod'] === 'string' || data['refundMethod'] instanceof String)) {
            throw new Error("Expected the field `refundMethod` to be a primitive type in the JSON string but got " + data['refundMethod']);
        }
        // ensure the json data is a string
        if (data['restockingFeePercentage'] && !(typeof data['restockingFeePercentage'] === 'string' || data['restockingFeePercentage'] instanceof String)) {
            throw new Error("Expected the field `restockingFeePercentage` to be a primitive type in the JSON string but got " + data['restockingFeePercentage']);
        }
        // ensure the json data is a string
        if (data['returnInstructions'] && !(typeof data['returnInstructions'] === 'string' || data['returnInstructions'] instanceof String)) {
            throw new Error("Expected the field `returnInstructions` to be a primitive type in the JSON string but got " + data['returnInstructions']);
        }
        // ensure the json data is a string
        if (data['returnMethod'] && !(typeof data['returnMethod'] === 'string' || data['returnMethod'] instanceof String)) {
            throw new Error("Expected the field `returnMethod` to be a primitive type in the JSON string but got " + data['returnMethod']);
        }
        // validate the optional field `returnPeriod`
        if (data['returnPeriod']) { // data not null
          TimeDuration.validateJSON(data['returnPeriod']);
        }
        // ensure the json data is a string
        if (data['returnShippingCostPayer'] && !(typeof data['returnShippingCostPayer'] === 'string' || data['returnShippingCostPayer'] instanceof String)) {
            throw new Error("Expected the field `returnShippingCostPayer` to be a primitive type in the JSON string but got " + data['returnShippingCostPayer']);
        }

        return true;
    }


}



/**
 * This indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the returnPeriod value.
 * @member {Boolean} extendedHolidayReturnsOffered
 */
ItemReturnTerms.prototype['extendedHolidayReturnsOffered'] = undefined;

/**
 * An enumeration value that indicates how a buyer is refunded when an item is returned. Valid Values: MONEY_BACK or MERCHANDISE_CREDIT Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:RefundMethodEnum'>eBay API documentation</a>
 * @member {String} refundMethod
 */
ItemReturnTerms.prototype['refundMethod'] = undefined;

/**
 * This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.
 * @member {String} restockingFeePercentage
 */
ItemReturnTerms.prototype['restockingFeePercentage'] = undefined;

/**
 * Text written by the seller describing what the buyer needs to do in order to return the item.
 * @member {String} returnInstructions
 */
ItemReturnTerms.prototype['returnInstructions'] = undefined;

/**
 * An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. Valid Values: REPLACEMENT - Indicates that the buyer has the option of receiving money back for the returned item, or they can choose to have the seller replace the item with an identical item. EXCHANGE - Indicates that the buyer has the option of receiving money back for the returned item, or they can exchange the item for another similar item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnMethodEnum'>eBay API documentation</a>
 * @member {String} returnMethod
 */
ItemReturnTerms.prototype['returnMethod'] = undefined;

/**
 * @member {module:model/TimeDuration} returnPeriod
 */
ItemReturnTerms.prototype['returnPeriod'] = undefined;

/**
 * This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. Valid Values: SELLER - Indicates the seller will pay for the shipping costs to return the item. BUYER - Indicates the buyer will pay for the shipping costs to return the item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnShippingCostPayerEnum'>eBay API documentation</a>
 * @member {String} returnShippingCostPayer
 */
ItemReturnTerms.prototype['returnShippingCostPayer'] = undefined;

/**
 * Indicates whether the seller accepts returns for the item.
 * @member {Boolean} returnsAccepted
 */
ItemReturnTerms.prototype['returnsAccepted'] = undefined;






export default ItemReturnTerms;

