/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductIdentity from './ProductIdentity';

/**
 * The AdditionalProductIdentity model module.
 * @module model/AdditionalProductIdentity
 * @version v1.1.0
 */
class AdditionalProductIdentity {
    /**
     * Constructs a new <code>AdditionalProductIdentity</code>.
     * The type that defines the array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request &lt;b&gt; fieldgroups&lt;/b&gt; is set to &lt;code&gt;PRODUCT&lt;/code&gt;.
     * @alias module:model/AdditionalProductIdentity
     */
    constructor() { 
        
        AdditionalProductIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalProductIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalProductIdentity} obj Optional instance to populate.
     * @return {module:model/AdditionalProductIdentity} The populated <code>AdditionalProductIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalProductIdentity();

            if (data.hasOwnProperty('productIdentity')) {
                obj['productIdentity'] = ApiClient.convertToType(data['productIdentity'], [ProductIdentity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalProductIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalProductIdentity</code>.
     */
    static validateJSON(data) {
        if (data['productIdentity']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productIdentity'])) {
                throw new Error("Expected the field `productIdentity` to be an array in the JSON data but got " + data['productIdentity']);
            }
            // validate the optional field `productIdentity` (array)
            for (const item of data['productIdentity']) {
                ProductIdentity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An array of the product identifier/value pairs for the product associated with the item. This is returned if the seller has associated the eBay Product Identifier (ePID) with the item and the request has fieldgroups set to PRODUCT. The following table shows what is returned, based on the item information provided by the seller, when the fieldgroups set to PRODUCT. ePID Provided Product&nbsp;ID(s) Provided Response No No The AdditionalProductIdentity container is not returned. No Yes The AdditionalProductIdentity container is not returned but the product identifiers specified by the seller are returned in the localizedAspects container. Yes No The AdditionalProductIdentity container is returned listing the product identifiers of the product. Yes Yes The AdditionalProductIdentity container is returned listing all the product identifiers of the product and the product identifiers specified by the seller are returned in the localizedAspects container.
 * @member {Array.<module:model/ProductIdentity>} productIdentity
 */
AdditionalProductIdentity.prototype['productIdentity'] = undefined;






export default AdditionalProductIdentity;

