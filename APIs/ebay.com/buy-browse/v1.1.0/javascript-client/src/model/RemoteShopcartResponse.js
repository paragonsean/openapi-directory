/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import CartItem from './CartItem';
import Error from './Error';

/**
 * The RemoteShopcartResponse model module.
 * @module model/RemoteShopcartResponse
 * @version v1.1.0
 */
class RemoteShopcartResponse {
    /**
     * Constructs a new <code>RemoteShopcartResponse</code>.
     * The type that defines the fields and containers for the member&#39;s eBay cart information.
     * @alias module:model/RemoteShopcartResponse
     */
    constructor() { 
        
        RemoteShopcartResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemoteShopcartResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteShopcartResponse} obj Optional instance to populate.
     * @return {module:model/RemoteShopcartResponse} The populated <code>RemoteShopcartResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteShopcartResponse();

            if (data.hasOwnProperty('cartItems')) {
                obj['cartItems'] = ApiClient.convertToType(data['cartItems'], [CartItem]);
            }
            if (data.hasOwnProperty('cartSubtotal')) {
                obj['cartSubtotal'] = Amount.constructFromObject(data['cartSubtotal']);
            }
            if (data.hasOwnProperty('cartWebUrl')) {
                obj['cartWebUrl'] = ApiClient.convertToType(data['cartWebUrl'], 'String');
            }
            if (data.hasOwnProperty('unavailableCartItems')) {
                obj['unavailableCartItems'] = ApiClient.convertToType(data['unavailableCartItems'], [CartItem]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Error]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteShopcartResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteShopcartResponse</code>.
     */
    static validateJSON(data) {
        if (data['cartItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cartItems'])) {
                throw new Error("Expected the field `cartItems` to be an array in the JSON data but got " + data['cartItems']);
            }
            // validate the optional field `cartItems` (array)
            for (const item of data['cartItems']) {
                CartItem.validateJSON(item);
            };
        }
        // validate the optional field `cartSubtotal`
        if (data['cartSubtotal']) { // data not null
          Amount.validateJSON(data['cartSubtotal']);
        }
        // ensure the json data is a string
        if (data['cartWebUrl'] && !(typeof data['cartWebUrl'] === 'string' || data['cartWebUrl'] instanceof String)) {
            throw new Error("Expected the field `cartWebUrl` to be a primitive type in the JSON string but got " + data['cartWebUrl']);
        }
        if (data['unavailableCartItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unavailableCartItems'])) {
                throw new Error("Expected the field `unavailableCartItems` to be an array in the JSON data but got " + data['unavailableCartItems']);
            }
            // validate the optional field `unavailableCartItems` (array)
            for (const item of data['unavailableCartItems']) {
                CartItem.validateJSON(item);
            };
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Error.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An array of the items in the member's eBay cart.
 * @member {Array.<module:model/CartItem>} cartItems
 */
RemoteShopcartResponse.prototype['cartItems'] = undefined;

/**
 * @member {module:model/Amount} cartSubtotal
 */
RemoteShopcartResponse.prototype['cartSubtotal'] = undefined;

/**
 * The URL of the member's eBay cart.
 * @member {String} cartWebUrl
 */
RemoteShopcartResponse.prototype['cartWebUrl'] = undefined;

/**
 * An array of items in the cart that are unavailable. This can be for a variety of reasons such as, when the listing has ended or the item is out of stock. Because a cart never expires, these items will remain in the cart until they are removed.
 * @member {Array.<module:model/CartItem>} unavailableCartItems
 */
RemoteShopcartResponse.prototype['unavailableCartItems'] = undefined;

/**
 * An array of warning messages. These type of errors do not prevent the call from executing but should be checked.
 * @member {Array.<module:model/Error>} warnings
 */
RemoteShopcartResponse.prototype['warnings'] = undefined;






export default RemoteShopcartResponse;

