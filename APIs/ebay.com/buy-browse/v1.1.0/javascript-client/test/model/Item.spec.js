/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrowseApi);
  }
}(this, function(expect, BrowseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrowseApi.Item();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item', function() {
    it('should create an instance of Item', function() {
      // uncomment below and update the code to test Item
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be.a(BrowseApi.Item);
    });

    it('should have the property additionalImages (base name: "additionalImages")', function() {
      // uncomment below and update the code to test the property additionalImages
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property adultOnly (base name: "adultOnly")', function() {
      // uncomment below and update the code to test the property adultOnly
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ageGroup (base name: "ageGroup")', function() {
      // uncomment below and update the code to test the property ageGroup
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property availableCoupons (base name: "availableCoupons")', function() {
      // uncomment below and update the code to test the property availableCoupons
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property bidCount (base name: "bidCount")', function() {
      // uncomment below and update the code to test the property bidCount
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property buyingOptions (base name: "buyingOptions")', function() {
      // uncomment below and update the code to test the property buyingOptions
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "categoryId")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property categoryPath (base name: "categoryPath")', function() {
      // uncomment below and update the code to test the property categoryPath
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property condition (base name: "condition")', function() {
      // uncomment below and update the code to test the property condition
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property conditionDescription (base name: "conditionDescription")', function() {
      // uncomment below and update the code to test the property conditionDescription
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property conditionId (base name: "conditionId")', function() {
      // uncomment below and update the code to test the property conditionId
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property currentBidPrice (base name: "currentBidPrice")', function() {
      // uncomment below and update the code to test the property currentBidPrice
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property eligibleForInlineCheckout (base name: "eligibleForInlineCheckout")', function() {
      // uncomment below and update the code to test the property eligibleForInlineCheckout
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property enabledForGuestCheckout (base name: "enabledForGuestCheckout")', function() {
      // uncomment below and update the code to test the property enabledForGuestCheckout
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property energyEfficiencyClass (base name: "energyEfficiencyClass")', function() {
      // uncomment below and update the code to test the property energyEfficiencyClass
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property epid (base name: "epid")', function() {
      // uncomment below and update the code to test the property epid
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property estimatedAvailabilities (base name: "estimatedAvailabilities")', function() {
      // uncomment below and update the code to test the property estimatedAvailabilities
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property gtin (base name: "gtin")', function() {
      // uncomment below and update the code to test the property gtin
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property inferredEpid (base name: "inferredEpid")', function() {
      // uncomment below and update the code to test the property inferredEpid
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemAffiliateWebUrl (base name: "itemAffiliateWebUrl")', function() {
      // uncomment below and update the code to test the property itemAffiliateWebUrl
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemEndDate (base name: "itemEndDate")', function() {
      // uncomment below and update the code to test the property itemEndDate
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemLocation (base name: "itemLocation")', function() {
      // uncomment below and update the code to test the property itemLocation
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemWebUrl (base name: "itemWebUrl")', function() {
      // uncomment below and update the code to test the property itemWebUrl
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property legacyItemId (base name: "legacyItemId")', function() {
      // uncomment below and update the code to test the property legacyItemId
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property localizedAspects (base name: "localizedAspects")', function() {
      // uncomment below and update the code to test the property localizedAspects
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lotSize (base name: "lotSize")', function() {
      // uncomment below and update the code to test the property lotSize
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property marketingPrice (base name: "marketingPrice")', function() {
      // uncomment below and update the code to test the property marketingPrice
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property material (base name: "material")', function() {
      // uncomment below and update the code to test the property material
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property minimumPriceToBid (base name: "minimumPriceToBid")', function() {
      // uncomment below and update the code to test the property minimumPriceToBid
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property mpn (base name: "mpn")', function() {
      // uncomment below and update the code to test the property mpn
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pattern (base name: "pattern")', function() {
      // uncomment below and update the code to test the property pattern
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethods (base name: "paymentMethods")', function() {
      // uncomment below and update the code to test the property paymentMethods
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property priceDisplayCondition (base name: "priceDisplayCondition")', function() {
      // uncomment below and update the code to test the property priceDisplayCondition
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property primaryItemGroup (base name: "primaryItemGroup")', function() {
      // uncomment below and update the code to test the property primaryItemGroup
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property primaryProductReviewRating (base name: "primaryProductReviewRating")', function() {
      // uncomment below and update the code to test the property primaryProductReviewRating
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property product (base name: "product")', function() {
      // uncomment below and update the code to test the property product
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property productFicheWebUrl (base name: "productFicheWebUrl")', function() {
      // uncomment below and update the code to test the property productFicheWebUrl
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property qualifiedPrograms (base name: "qualifiedPrograms")', function() {
      // uncomment below and update the code to test the property qualifiedPrograms
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property quantityLimitPerBuyer (base name: "quantityLimitPerBuyer")', function() {
      // uncomment below and update the code to test the property quantityLimitPerBuyer
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property reservePriceMet (base name: "reservePriceMet")', function() {
      // uncomment below and update the code to test the property reservePriceMet
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property returnTerms (base name: "returnTerms")', function() {
      // uncomment below and update the code to test the property returnTerms
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property seller (base name: "seller")', function() {
      // uncomment below and update the code to test the property seller
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerItemRevision (base name: "sellerItemRevision")', function() {
      // uncomment below and update the code to test the property sellerItemRevision
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property shipToLocations (base name: "shipToLocations")', function() {
      // uncomment below and update the code to test the property shipToLocations
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingOptions (base name: "shippingOptions")', function() {
      // uncomment below and update the code to test the property shippingOptions
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property shortDescription (base name: "shortDescription")', function() {
      // uncomment below and update the code to test the property shortDescription
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sizeSystem (base name: "sizeSystem")', function() {
      // uncomment below and update the code to test the property sizeSystem
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sizeType (base name: "sizeType")', function() {
      // uncomment below and update the code to test the property sizeType
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property subtitle (base name: "subtitle")', function() {
      // uncomment below and update the code to test the property subtitle
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property taxes (base name: "taxes")', function() {
      // uncomment below and update the code to test the property taxes
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property topRatedBuyingExperience (base name: "topRatedBuyingExperience")', function() {
      // uncomment below and update the code to test the property topRatedBuyingExperience
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property uniqueBidderCount (base name: "uniqueBidderCount")', function() {
      // uncomment below and update the code to test the property uniqueBidderCount
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitPrice (base name: "unitPrice")', function() {
      // uncomment below and update the code to test the property unitPrice
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitPricingMeasure (base name: "unitPricingMeasure")', function() {
      // uncomment below and update the code to test the property unitPricingMeasure
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property warnings (base name: "warnings")', function() {
      // uncomment below and update the code to test the property warnings
      //var instance = new BrowseApi.Item();
      //expect(instance).to.be();
    });

  });

}));
