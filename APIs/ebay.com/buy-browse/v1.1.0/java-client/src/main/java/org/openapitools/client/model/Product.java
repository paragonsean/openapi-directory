/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalProductIdentity;
import org.openapitools.client.model.AspectGroup;
import org.openapitools.client.model.Image;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the product information of the item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Product {
  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGES = "additionalImages";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGES)
  private List<Image> additionalImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_PRODUCT_IDENTITIES = "additionalProductIdentities";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PRODUCT_IDENTITIES)
  private List<AdditionalProductIdentity> additionalProductIdentities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASPECT_GROUPS = "aspectGroups";
  @SerializedName(SERIALIZED_NAME_ASPECT_GROUPS)
  private List<AspectGroup> aspectGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GTINS = "gtins";
  @SerializedName(SERIALIZED_NAME_GTINS)
  private List<String> gtins = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_MPNS = "mpns";
  @SerializedName(SERIALIZED_NAME_MPNS)
  private List<String> mpns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Product() {
  }

  public Product additionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
    return this;
  }

  public Product addAdditionalImagesItem(Image additionalImagesItem) {
    if (this.additionalImages == null) {
      this.additionalImages = new ArrayList<>();
    }
    this.additionalImages.add(additionalImagesItem);
    return this;
  }

  /**
   * An array of containers with the URLs for the product images that are in addition to the primary image.
   * @return additionalImages
   */
  @javax.annotation.Nullable
  public List<Image> getAdditionalImages() {
    return additionalImages;
  }

  public void setAdditionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
  }


  public Product additionalProductIdentities(List<AdditionalProductIdentity> additionalProductIdentities) {
    this.additionalProductIdentities = additionalProductIdentities;
    return this;
  }

  public Product addAdditionalProductIdentitiesItem(AdditionalProductIdentity additionalProductIdentitiesItem) {
    if (this.additionalProductIdentities == null) {
      this.additionalProductIdentities = new ArrayList<>();
    }
    this.additionalProductIdentities.add(additionalProductIdentitiesItem);
    return this;
  }

  /**
   * An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.
   * @return additionalProductIdentities
   */
  @javax.annotation.Nullable
  public List<AdditionalProductIdentity> getAdditionalProductIdentities() {
    return additionalProductIdentities;
  }

  public void setAdditionalProductIdentities(List<AdditionalProductIdentity> additionalProductIdentities) {
    this.additionalProductIdentities = additionalProductIdentities;
  }


  public Product aspectGroups(List<AspectGroup> aspectGroups) {
    this.aspectGroups = aspectGroups;
    return this;
  }

  public Product addAspectGroupsItem(AspectGroup aspectGroupsItem) {
    if (this.aspectGroups == null) {
      this.aspectGroups = new ArrayList<>();
    }
    this.aspectGroups.add(aspectGroupsItem);
    return this;
  }

  /**
   * An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.
   * @return aspectGroups
   */
  @javax.annotation.Nullable
  public List<AspectGroup> getAspectGroups() {
    return aspectGroups;
  }

  public void setAspectGroups(List<AspectGroup> aspectGroups) {
    this.aspectGroups = aspectGroups;
  }


  public Product brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public Product description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The rich description of an eBay product, which might contain HTML.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Product gtins(List<String> gtins) {
    this.gtins = gtins;
    return this;
  }

  public Product addGtinsItem(String gtinsItem) {
    if (this.gtins == null) {
      this.gtins = new ArrayList<>();
    }
    this.gtins.add(gtinsItem);
    return this;
  }

  /**
   * An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
   * @return gtins
   */
  @javax.annotation.Nullable
  public List<String> getGtins() {
    return gtins;
  }

  public void setGtins(List<String> gtins) {
    this.gtins = gtins;
  }


  public Product image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public Product mpns(List<String> mpns) {
    this.mpns = mpns;
    return this;
  }

  public Product addMpnsItem(String mpnsItem) {
    if (this.mpns == null) {
      this.mpns = new ArrayList<>();
    }
    this.mpns.add(mpnsItem);
    return this;
  }

  /**
   * An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.
   * @return mpns
   */
  @javax.annotation.Nullable
  public List<String> getMpns() {
    return mpns;
  }

  public void setMpns(List<String> mpns) {
    this.mpns = mpns;
  }


  public Product title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the product.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.additionalImages, product.additionalImages) &&
        Objects.equals(this.additionalProductIdentities, product.additionalProductIdentities) &&
        Objects.equals(this.aspectGroups, product.aspectGroups) &&
        Objects.equals(this.brand, product.brand) &&
        Objects.equals(this.description, product.description) &&
        Objects.equals(this.gtins, product.gtins) &&
        Objects.equals(this.image, product.image) &&
        Objects.equals(this.mpns, product.mpns) &&
        Objects.equals(this.title, product.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalImages, additionalProductIdentities, aspectGroups, brand, description, gtins, image, mpns, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    additionalImages: ").append(toIndentedString(additionalImages)).append("\n");
    sb.append("    additionalProductIdentities: ").append(toIndentedString(additionalProductIdentities)).append("\n");
    sb.append("    aspectGroups: ").append(toIndentedString(aspectGroups)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gtins: ").append(toIndentedString(gtins)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    mpns: ").append(toIndentedString(mpns)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalImages");
    openapiFields.add("additionalProductIdentities");
    openapiFields.add("aspectGroups");
    openapiFields.add("brand");
    openapiFields.add("description");
    openapiFields.add("gtins");
    openapiFields.add("image");
    openapiFields.add("mpns");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalImages") != null && !jsonObj.get("additionalImages").isJsonNull()) {
        JsonArray jsonArrayadditionalImages = jsonObj.getAsJsonArray("additionalImages");
        if (jsonArrayadditionalImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalImages` to be an array in the JSON string but got `%s`", jsonObj.get("additionalImages").toString()));
          }

          // validate the optional field `additionalImages` (array)
          for (int i = 0; i < jsonArrayadditionalImages.size(); i++) {
            Image.validateJsonElement(jsonArrayadditionalImages.get(i));
          };
        }
      }
      if (jsonObj.get("additionalProductIdentities") != null && !jsonObj.get("additionalProductIdentities").isJsonNull()) {
        JsonArray jsonArrayadditionalProductIdentities = jsonObj.getAsJsonArray("additionalProductIdentities");
        if (jsonArrayadditionalProductIdentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalProductIdentities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalProductIdentities` to be an array in the JSON string but got `%s`", jsonObj.get("additionalProductIdentities").toString()));
          }

          // validate the optional field `additionalProductIdentities` (array)
          for (int i = 0; i < jsonArrayadditionalProductIdentities.size(); i++) {
            AdditionalProductIdentity.validateJsonElement(jsonArrayadditionalProductIdentities.get(i));
          };
        }
      }
      if (jsonObj.get("aspectGroups") != null && !jsonObj.get("aspectGroups").isJsonNull()) {
        JsonArray jsonArrayaspectGroups = jsonObj.getAsJsonArray("aspectGroups");
        if (jsonArrayaspectGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aspectGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aspectGroups` to be an array in the JSON string but got `%s`", jsonObj.get("aspectGroups").toString()));
          }

          // validate the optional field `aspectGroups` (array)
          for (int i = 0; i < jsonArrayaspectGroups.size(); i++) {
            AspectGroup.validateJsonElement(jsonArrayaspectGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gtins") != null && !jsonObj.get("gtins").isJsonNull() && !jsonObj.get("gtins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtins` to be an array in the JSON string but got `%s`", jsonObj.get("gtins").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mpns") != null && !jsonObj.get("mpns").isJsonNull() && !jsonObj.get("mpns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpns` to be an array in the JSON string but got `%s`", jsonObj.get("mpns").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

