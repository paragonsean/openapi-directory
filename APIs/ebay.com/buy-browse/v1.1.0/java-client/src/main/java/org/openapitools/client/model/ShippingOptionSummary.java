/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConvertedAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the shipping information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingOptionSummary {
  public static final String SERIALIZED_NAME_GUARANTEED_DELIVERY = "guaranteedDelivery";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_DELIVERY)
  private Boolean guaranteedDelivery;

  public static final String SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE = "maxEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE)
  private String maxEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE = "minEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE)
  private String minEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private ConvertedAmount shippingCost;

  public static final String SERIALIZED_NAME_SHIPPING_COST_TYPE = "shippingCostType";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST_TYPE)
  private String shippingCostType;

  public ShippingOptionSummary() {
  }

  public ShippingOptionSummary guaranteedDelivery(Boolean guaranteedDelivery) {
    this.guaranteedDelivery = guaranteedDelivery;
    return this;
  }

  /**
   * Indicates if the seller has committed to shipping the item with eBay Guaranteed Delivery. With eBay Guaranteed Delivery, the seller is committed to getting the line item to the buyer within 4 business days or less. See the Buying items with eBay Guaranteed Delivery help topic for more details about eBay Guaranteed Delivery.
   * @return guaranteedDelivery
   */
  @javax.annotation.Nullable
  public Boolean getGuaranteedDelivery() {
    return guaranteedDelivery;
  }

  public void setGuaranteedDelivery(Boolean guaranteedDelivery) {
    this.guaranteedDelivery = guaranteedDelivery;
  }


  public ShippingOptionSummary maxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
    return this;
  }

  /**
   * The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the contextualLocation values in the X-EBAY-C-ENDUSERCTX request header.
   * @return maxEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMaxEstimatedDeliveryDate() {
    return maxEstimatedDeliveryDate;
  }

  public void setMaxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
  }


  public ShippingOptionSummary minEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
    return this;
  }

  /**
   * The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the contextualLocation values in the X-EBAY-C-ENDUSERCTX request header.
   * @return minEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMinEstimatedDeliveryDate() {
    return minEstimatedDeliveryDate;
  }

  public void setMinEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
  }


  public ShippingOptionSummary shippingCost(ConvertedAmount shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Get shippingCost
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public ConvertedAmount getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(ConvertedAmount shippingCost) {
    this.shippingCost = shippingCost;
  }


  public ShippingOptionSummary shippingCostType(String shippingCostType) {
    this.shippingCostType = shippingCostType;
    return this;
  }

  /**
   * Indicates the type of shipping used to ship the item. Possible values are FIXED (flat-rate shipping) and CALCULATED (shipping cost calculated based on item and buyer location).
   * @return shippingCostType
   */
  @javax.annotation.Nullable
  public String getShippingCostType() {
    return shippingCostType;
  }

  public void setShippingCostType(String shippingCostType) {
    this.shippingCostType = shippingCostType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingOptionSummary shippingOptionSummary = (ShippingOptionSummary) o;
    return Objects.equals(this.guaranteedDelivery, shippingOptionSummary.guaranteedDelivery) &&
        Objects.equals(this.maxEstimatedDeliveryDate, shippingOptionSummary.maxEstimatedDeliveryDate) &&
        Objects.equals(this.minEstimatedDeliveryDate, shippingOptionSummary.minEstimatedDeliveryDate) &&
        Objects.equals(this.shippingCost, shippingOptionSummary.shippingCost) &&
        Objects.equals(this.shippingCostType, shippingOptionSummary.shippingCostType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guaranteedDelivery, maxEstimatedDeliveryDate, minEstimatedDeliveryDate, shippingCost, shippingCostType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingOptionSummary {\n");
    sb.append("    guaranteedDelivery: ").append(toIndentedString(guaranteedDelivery)).append("\n");
    sb.append("    maxEstimatedDeliveryDate: ").append(toIndentedString(maxEstimatedDeliveryDate)).append("\n");
    sb.append("    minEstimatedDeliveryDate: ").append(toIndentedString(minEstimatedDeliveryDate)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingCostType: ").append(toIndentedString(shippingCostType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guaranteedDelivery");
    openapiFields.add("maxEstimatedDeliveryDate");
    openapiFields.add("minEstimatedDeliveryDate");
    openapiFields.add("shippingCost");
    openapiFields.add("shippingCostType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingOptionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingOptionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingOptionSummary is not found in the empty JSON string", ShippingOptionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingOptionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingOptionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxEstimatedDeliveryDate") != null && !jsonObj.get("maxEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("maxEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("minEstimatedDeliveryDate") != null && !jsonObj.get("minEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("minEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minEstimatedDeliveryDate").toString()));
      }
      // validate the optional field `shippingCost`
      if (jsonObj.get("shippingCost") != null && !jsonObj.get("shippingCost").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("shippingCost"));
      }
      if ((jsonObj.get("shippingCostType") != null && !jsonObj.get("shippingCostType").isJsonNull()) && !jsonObj.get("shippingCostType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCostType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCostType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingOptionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingOptionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingOptionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingOptionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingOptionSummary>() {
           @Override
           public void write(JsonWriter out, ShippingOptionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingOptionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingOptionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingOptionSummary
   * @throws IOException if the JSON string is invalid with respect to ShippingOptionSummary
   */
  public static ShippingOptionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingOptionSummary.class);
  }

  /**
   * Convert an instance of ShippingOptionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

