/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoCorrections;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ItemSummary;
import org.openapitools.client.model.Refinement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced &lt;em&gt; pages&lt;/em&gt; where each page has 0 or more items. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchPagedCollection {
  public static final String SERIALIZED_NAME_AUTO_CORRECTIONS = "autoCorrections";
  @SerializedName(SERIALIZED_NAME_AUTO_CORRECTIONS)
  private AutoCorrections autoCorrections;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ITEM_SUMMARIES = "itemSummaries";
  @SerializedName(SERIALIZED_NAME_ITEM_SUMMARIES)
  private List<ItemSummary> itemSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private String prev;

  public static final String SERIALIZED_NAME_REFINEMENT = "refinement";
  @SerializedName(SERIALIZED_NAME_REFINEMENT)
  private Refinement refinement;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public SearchPagedCollection() {
  }

  public SearchPagedCollection autoCorrections(AutoCorrections autoCorrections) {
    this.autoCorrections = autoCorrections;
    return this;
  }

  /**
   * Get autoCorrections
   * @return autoCorrections
   */
  @javax.annotation.Nullable
  public AutoCorrections getAutoCorrections() {
    return autoCorrections;
  }

  public void setAutoCorrections(AutoCorrections autoCorrections) {
    this.autoCorrections = autoCorrections;
  }


  public SearchPagedCollection href(String href) {
    this.href = href;
    return this;
  }

  /**
   * The URI of the current page of results. The following example of the search method returns items 1 thru 5 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?q&#x3D;shirt&amp;amp;limit&#x3D;5&amp;amp;offset&#x3D;0.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public SearchPagedCollection itemSummaries(List<ItemSummary> itemSummaries) {
    this.itemSummaries = itemSummaries;
    return this;
  }

  public SearchPagedCollection addItemSummariesItem(ItemSummary itemSummariesItem) {
    if (this.itemSummaries == null) {
      this.itemSummaries = new ArrayList<>();
    }
    this.itemSummaries.add(itemSummariesItem);
    return this;
  }

  /**
   * An array of the items on this page. The items are sorted according to the sorting method specified in the request.
   * @return itemSummaries
   */
  @javax.annotation.Nullable
  public List<ItemSummary> getItemSummaries() {
    return itemSummaries;
  }

  public void setItemSummaries(List<ItemSummary> itemSummaries) {
    this.itemSummaries = itemSummaries;
  }


  public SearchPagedCollection limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The value of the limit parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public SearchPagedCollection next(String next) {
    this.next = next;
    return this;
  }

  /**
   * The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set. The following example of the search method returns items 5 thru 10 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?query&#x3D;t-shirts&amp;amp;limit&#x3D;5&amp;amp;offset&#x3D;10
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public SearchPagedCollection offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * This value indicates the offset used for current page of items being returned. Assume the initial request used an offset of 0 and a limit of 3. Then in the first page of results, this value would be 0, and items 1-3 are returned. For the second page, this value is 3 and so on.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public SearchPagedCollection prev(String prev) {
    this.prev = prev;
    return this;
  }

  /**
   * The URI for the previous page of results. This is returned if there is a previous page of results from the result set. The following example of the search method returns items 1 thru 5 from the list of items found, which would be the first set of items returned. https://api.ebay.com/buy/v1/item_summary/search?query&#x3D;t-shirts&amp;amp;limit&#x3D;5&amp;amp;offset&#x3D;0
   * @return prev
   */
  @javax.annotation.Nullable
  public String getPrev() {
    return prev;
  }

  public void setPrev(String prev) {
    this.prev = prev;
  }


  public SearchPagedCollection refinement(Refinement refinement) {
    this.refinement = refinement;
    return this;
  }

  /**
   * Get refinement
   * @return refinement
   */
  @javax.annotation.Nullable
  public Refinement getRefinement() {
    return refinement;
  }

  public void setRefinement(Refinement refinement) {
    this.refinement = refinement;
  }


  public SearchPagedCollection total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of items that match the input criteria.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public SearchPagedCollection warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public SearchPagedCollection addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * The container with all the warnings for the request.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchPagedCollection searchPagedCollection = (SearchPagedCollection) o;
    return Objects.equals(this.autoCorrections, searchPagedCollection.autoCorrections) &&
        Objects.equals(this.href, searchPagedCollection.href) &&
        Objects.equals(this.itemSummaries, searchPagedCollection.itemSummaries) &&
        Objects.equals(this.limit, searchPagedCollection.limit) &&
        Objects.equals(this.next, searchPagedCollection.next) &&
        Objects.equals(this.offset, searchPagedCollection.offset) &&
        Objects.equals(this.prev, searchPagedCollection.prev) &&
        Objects.equals(this.refinement, searchPagedCollection.refinement) &&
        Objects.equals(this.total, searchPagedCollection.total) &&
        Objects.equals(this.warnings, searchPagedCollection.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCorrections, href, itemSummaries, limit, next, offset, prev, refinement, total, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchPagedCollection {\n");
    sb.append("    autoCorrections: ").append(toIndentedString(autoCorrections)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    itemSummaries: ").append(toIndentedString(itemSummaries)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    refinement: ").append(toIndentedString(refinement)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoCorrections");
    openapiFields.add("href");
    openapiFields.add("itemSummaries");
    openapiFields.add("limit");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("prev");
    openapiFields.add("refinement");
    openapiFields.add("total");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchPagedCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchPagedCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchPagedCollection is not found in the empty JSON string", SearchPagedCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchPagedCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchPagedCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoCorrections`
      if (jsonObj.get("autoCorrections") != null && !jsonObj.get("autoCorrections").isJsonNull()) {
        AutoCorrections.validateJsonElement(jsonObj.get("autoCorrections"));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if (jsonObj.get("itemSummaries") != null && !jsonObj.get("itemSummaries").isJsonNull()) {
        JsonArray jsonArrayitemSummaries = jsonObj.getAsJsonArray("itemSummaries");
        if (jsonArrayitemSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("itemSummaries").toString()));
          }

          // validate the optional field `itemSummaries` (array)
          for (int i = 0; i < jsonArrayitemSummaries.size(); i++) {
            ItemSummary.validateJsonElement(jsonArrayitemSummaries.get(i));
          };
        }
      }
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("prev") != null && !jsonObj.get("prev").isJsonNull()) && !jsonObj.get("prev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev").toString()));
      }
      // validate the optional field `refinement`
      if (jsonObj.get("refinement") != null && !jsonObj.get("refinement").isJsonNull()) {
        Refinement.validateJsonElement(jsonObj.get("refinement"));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchPagedCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchPagedCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchPagedCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchPagedCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchPagedCollection>() {
           @Override
           public void write(JsonWriter out, SearchPagedCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchPagedCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchPagedCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchPagedCollection
   * @throws IOException if the JSON string is invalid with respect to SearchPagedCollection
   */
  public static SearchPagedCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchPagedCollection.class);
  }

  /**
   * Convert an instance of SearchPagedCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

