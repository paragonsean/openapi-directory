/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.CartItem;
import org.openapitools.client.model.Error;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields and containers for the member&#39;s eBay cart information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteShopcartResponse {
  public static final String SERIALIZED_NAME_CART_ITEMS = "cartItems";
  @SerializedName(SERIALIZED_NAME_CART_ITEMS)
  private List<CartItem> cartItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_CART_SUBTOTAL = "cartSubtotal";
  @SerializedName(SERIALIZED_NAME_CART_SUBTOTAL)
  private Amount cartSubtotal;

  public static final String SERIALIZED_NAME_CART_WEB_URL = "cartWebUrl";
  @SerializedName(SERIALIZED_NAME_CART_WEB_URL)
  private String cartWebUrl;

  public static final String SERIALIZED_NAME_UNAVAILABLE_CART_ITEMS = "unavailableCartItems";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_CART_ITEMS)
  private List<CartItem> unavailableCartItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Error> warnings = new ArrayList<>();

  public RemoteShopcartResponse() {
  }

  public RemoteShopcartResponse cartItems(List<CartItem> cartItems) {
    this.cartItems = cartItems;
    return this;
  }

  public RemoteShopcartResponse addCartItemsItem(CartItem cartItemsItem) {
    if (this.cartItems == null) {
      this.cartItems = new ArrayList<>();
    }
    this.cartItems.add(cartItemsItem);
    return this;
  }

  /**
   * An array of the items in the member&#39;s eBay cart.
   * @return cartItems
   */
  @javax.annotation.Nullable
  public List<CartItem> getCartItems() {
    return cartItems;
  }

  public void setCartItems(List<CartItem> cartItems) {
    this.cartItems = cartItems;
  }


  public RemoteShopcartResponse cartSubtotal(Amount cartSubtotal) {
    this.cartSubtotal = cartSubtotal;
    return this;
  }

  /**
   * Get cartSubtotal
   * @return cartSubtotal
   */
  @javax.annotation.Nullable
  public Amount getCartSubtotal() {
    return cartSubtotal;
  }

  public void setCartSubtotal(Amount cartSubtotal) {
    this.cartSubtotal = cartSubtotal;
  }


  public RemoteShopcartResponse cartWebUrl(String cartWebUrl) {
    this.cartWebUrl = cartWebUrl;
    return this;
  }

  /**
   * The URL of the member&#39;s eBay cart.
   * @return cartWebUrl
   */
  @javax.annotation.Nullable
  public String getCartWebUrl() {
    return cartWebUrl;
  }

  public void setCartWebUrl(String cartWebUrl) {
    this.cartWebUrl = cartWebUrl;
  }


  public RemoteShopcartResponse unavailableCartItems(List<CartItem> unavailableCartItems) {
    this.unavailableCartItems = unavailableCartItems;
    return this;
  }

  public RemoteShopcartResponse addUnavailableCartItemsItem(CartItem unavailableCartItemsItem) {
    if (this.unavailableCartItems == null) {
      this.unavailableCartItems = new ArrayList<>();
    }
    this.unavailableCartItems.add(unavailableCartItemsItem);
    return this;
  }

  /**
   * An array of items in the cart that are unavailable. This can be for a variety of reasons such as, when the listing has ended or the item is out of stock. Because a cart never expires, these items will remain in the cart until they are removed.
   * @return unavailableCartItems
   */
  @javax.annotation.Nullable
  public List<CartItem> getUnavailableCartItems() {
    return unavailableCartItems;
  }

  public void setUnavailableCartItems(List<CartItem> unavailableCartItems) {
    this.unavailableCartItems = unavailableCartItems;
  }


  public RemoteShopcartResponse warnings(List<Error> warnings) {
    this.warnings = warnings;
    return this;
  }

  public RemoteShopcartResponse addWarningsItem(Error warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * An array of warning messages. These type of errors do not prevent the call from executing but should be checked.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Error> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Error> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteShopcartResponse remoteShopcartResponse = (RemoteShopcartResponse) o;
    return Objects.equals(this.cartItems, remoteShopcartResponse.cartItems) &&
        Objects.equals(this.cartSubtotal, remoteShopcartResponse.cartSubtotal) &&
        Objects.equals(this.cartWebUrl, remoteShopcartResponse.cartWebUrl) &&
        Objects.equals(this.unavailableCartItems, remoteShopcartResponse.unavailableCartItems) &&
        Objects.equals(this.warnings, remoteShopcartResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cartItems, cartSubtotal, cartWebUrl, unavailableCartItems, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteShopcartResponse {\n");
    sb.append("    cartItems: ").append(toIndentedString(cartItems)).append("\n");
    sb.append("    cartSubtotal: ").append(toIndentedString(cartSubtotal)).append("\n");
    sb.append("    cartWebUrl: ").append(toIndentedString(cartWebUrl)).append("\n");
    sb.append("    unavailableCartItems: ").append(toIndentedString(unavailableCartItems)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cartItems");
    openapiFields.add("cartSubtotal");
    openapiFields.add("cartWebUrl");
    openapiFields.add("unavailableCartItems");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteShopcartResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteShopcartResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteShopcartResponse is not found in the empty JSON string", RemoteShopcartResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteShopcartResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteShopcartResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cartItems") != null && !jsonObj.get("cartItems").isJsonNull()) {
        JsonArray jsonArraycartItems = jsonObj.getAsJsonArray("cartItems");
        if (jsonArraycartItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cartItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cartItems` to be an array in the JSON string but got `%s`", jsonObj.get("cartItems").toString()));
          }

          // validate the optional field `cartItems` (array)
          for (int i = 0; i < jsonArraycartItems.size(); i++) {
            CartItem.validateJsonElement(jsonArraycartItems.get(i));
          };
        }
      }
      // validate the optional field `cartSubtotal`
      if (jsonObj.get("cartSubtotal") != null && !jsonObj.get("cartSubtotal").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("cartSubtotal"));
      }
      if ((jsonObj.get("cartWebUrl") != null && !jsonObj.get("cartWebUrl").isJsonNull()) && !jsonObj.get("cartWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartWebUrl").toString()));
      }
      if (jsonObj.get("unavailableCartItems") != null && !jsonObj.get("unavailableCartItems").isJsonNull()) {
        JsonArray jsonArrayunavailableCartItems = jsonObj.getAsJsonArray("unavailableCartItems");
        if (jsonArrayunavailableCartItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unavailableCartItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unavailableCartItems` to be an array in the JSON string but got `%s`", jsonObj.get("unavailableCartItems").toString()));
          }

          // validate the optional field `unavailableCartItems` (array)
          for (int i = 0; i < jsonArrayunavailableCartItems.size(); i++) {
            CartItem.validateJsonElement(jsonArrayunavailableCartItems.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Error.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteShopcartResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteShopcartResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteShopcartResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteShopcartResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteShopcartResponse>() {
           @Override
           public void write(JsonWriter out, RemoteShopcartResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteShopcartResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteShopcartResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteShopcartResponse
   * @throws IOException if the JSON string is invalid with respect to RemoteShopcartResponse
   */
  public static RemoteShopcartResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteShopcartResponse.class);
  }

  /**
   * Convert an instance of RemoteShopcartResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

