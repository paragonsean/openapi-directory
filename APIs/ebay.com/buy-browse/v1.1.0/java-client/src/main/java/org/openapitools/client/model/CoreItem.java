/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.AvailableCoupon;
import org.openapitools.client.model.ConvertedAmount;
import org.openapitools.client.model.EstimatedAvailability;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ItemGroupSummary;
import org.openapitools.client.model.ItemReturnTerms;
import org.openapitools.client.model.MarketingPrice;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ReviewRating;
import org.openapitools.client.model.SellerDetail;
import org.openapitools.client.model.ShipToLocations;
import org.openapitools.client.model.ShippingOption;
import org.openapitools.client.model.Taxes;
import org.openapitools.client.model.TypedNameValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An array of containers with the details for all of the items returned.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CoreItem {
  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGES = "additionalImages";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGES)
  private List<Image> additionalImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADULT_ONLY = "adultOnly";
  @SerializedName(SERIALIZED_NAME_ADULT_ONLY)
  private Boolean adultOnly;

  public static final String SERIALIZED_NAME_AGE_GROUP = "ageGroup";
  @SerializedName(SERIALIZED_NAME_AGE_GROUP)
  private String ageGroup;

  public static final String SERIALIZED_NAME_AVAILABLE_COUPONS = "availableCoupons";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_COUPONS)
  private List<AvailableCoupon> availableCoupons = new ArrayList<>();

  public static final String SERIALIZED_NAME_BID_COUNT = "bidCount";
  @SerializedName(SERIALIZED_NAME_BID_COUNT)
  private Integer bidCount;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_BUYING_OPTIONS = "buyingOptions";
  @SerializedName(SERIALIZED_NAME_BUYING_OPTIONS)
  private List<String> buyingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_PATH = "categoryPath";
  @SerializedName(SERIALIZED_NAME_CATEGORY_PATH)
  private String categoryPath;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CONDITION_DESCRIPTION = "conditionDescription";
  @SerializedName(SERIALIZED_NAME_CONDITION_DESCRIPTION)
  private String conditionDescription;

  public static final String SERIALIZED_NAME_CONDITION_ID = "conditionId";
  @SerializedName(SERIALIZED_NAME_CONDITION_ID)
  private String conditionId;

  public static final String SERIALIZED_NAME_CURRENT_BID_PRICE = "currentBidPrice";
  @SerializedName(SERIALIZED_NAME_CURRENT_BID_PRICE)
  private ConvertedAmount currentBidPrice;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_INLINE_CHECKOUT = "eligibleForInlineCheckout";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_INLINE_CHECKOUT)
  private Boolean eligibleForInlineCheckout;

  public static final String SERIALIZED_NAME_ENABLED_FOR_GUEST_CHECKOUT = "enabledForGuestCheckout";
  @SerializedName(SERIALIZED_NAME_ENABLED_FOR_GUEST_CHECKOUT)
  private Boolean enabledForGuestCheckout;

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENCY_CLASS = "energyEfficiencyClass";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENCY_CLASS)
  private String energyEfficiencyClass;

  public static final String SERIALIZED_NAME_EPID = "epid";
  @SerializedName(SERIALIZED_NAME_EPID)
  private String epid;

  public static final String SERIALIZED_NAME_ESTIMATED_AVAILABILITIES = "estimatedAvailabilities";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_AVAILABILITIES)
  private List<EstimatedAvailability> estimatedAvailabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_INFERRED_EPID = "inferredEpid";
  @SerializedName(SERIALIZED_NAME_INFERRED_EPID)
  private String inferredEpid;

  public static final String SERIALIZED_NAME_ITEM_AFFILIATE_WEB_URL = "itemAffiliateWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_AFFILIATE_WEB_URL)
  private String itemAffiliateWebUrl;

  public static final String SERIALIZED_NAME_ITEM_END_DATE = "itemEndDate";
  @SerializedName(SERIALIZED_NAME_ITEM_END_DATE)
  private String itemEndDate;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_LOCATION = "itemLocation";
  @SerializedName(SERIALIZED_NAME_ITEM_LOCATION)
  private Address itemLocation;

  public static final String SERIALIZED_NAME_ITEM_WEB_URL = "itemWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_WEB_URL)
  private String itemWebUrl;

  public static final String SERIALIZED_NAME_LEGACY_ITEM_ID = "legacyItemId";
  @SerializedName(SERIALIZED_NAME_LEGACY_ITEM_ID)
  private String legacyItemId;

  public static final String SERIALIZED_NAME_LOCALIZED_ASPECTS = "localizedAspects";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ASPECTS)
  private List<TypedNameValue> localizedAspects = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOT_SIZE = "lotSize";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE)
  private Integer lotSize;

  public static final String SERIALIZED_NAME_MARKETING_PRICE = "marketingPrice";
  @SerializedName(SERIALIZED_NAME_MARKETING_PRICE)
  private MarketingPrice marketingPrice;

  public static final String SERIALIZED_NAME_MATERIAL = "material";
  @SerializedName(SERIALIZED_NAME_MATERIAL)
  private String material;

  public static final String SERIALIZED_NAME_MINIMUM_PRICE_TO_BID = "minimumPriceToBid";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PRICE_TO_BID)
  private ConvertedAmount minimumPriceToBid;

  public static final String SERIALIZED_NAME_MPN = "mpn";
  @SerializedName(SERIALIZED_NAME_MPN)
  private String mpn;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<PaymentMethod> paymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ConvertedAmount price;

  public static final String SERIALIZED_NAME_PRICE_DISPLAY_CONDITION = "priceDisplayCondition";
  @SerializedName(SERIALIZED_NAME_PRICE_DISPLAY_CONDITION)
  private String priceDisplayCondition;

  public static final String SERIALIZED_NAME_PRIMARY_ITEM_GROUP = "primaryItemGroup";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ITEM_GROUP)
  private ItemGroupSummary primaryItemGroup;

  public static final String SERIALIZED_NAME_PRIMARY_PRODUCT_REVIEW_RATING = "primaryProductReviewRating";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PRODUCT_REVIEW_RATING)
  private ReviewRating primaryProductReviewRating;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private Product product;

  public static final String SERIALIZED_NAME_PRODUCT_FICHE_WEB_URL = "productFicheWebUrl";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FICHE_WEB_URL)
  private String productFicheWebUrl;

  public static final String SERIALIZED_NAME_QUALIFIED_PROGRAMS = "qualifiedPrograms";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_PROGRAMS)
  private List<String> qualifiedPrograms = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITY_LIMIT_PER_BUYER = "quantityLimitPerBuyer";
  @SerializedName(SERIALIZED_NAME_QUANTITY_LIMIT_PER_BUYER)
  private Integer quantityLimitPerBuyer;

  public static final String SERIALIZED_NAME_RESERVE_PRICE_MET = "reservePriceMet";
  @SerializedName(SERIALIZED_NAME_RESERVE_PRICE_MET)
  private Boolean reservePriceMet;

  public static final String SERIALIZED_NAME_RETURN_TERMS = "returnTerms";
  @SerializedName(SERIALIZED_NAME_RETURN_TERMS)
  private ItemReturnTerms returnTerms;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private SellerDetail seller;

  public static final String SERIALIZED_NAME_SELLER_ITEM_REVISION = "sellerItemRevision";
  @SerializedName(SERIALIZED_NAME_SELLER_ITEM_REVISION)
  private String sellerItemRevision;

  public static final String SERIALIZED_NAME_SHIP_TO_LOCATIONS = "shipToLocations";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_LOCATIONS)
  private ShipToLocations shipToLocations;

  public static final String SERIALIZED_NAME_SHIPPING_OPTIONS = "shippingOptions";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTIONS)
  private List<ShippingOption> shippingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_SIZE_SYSTEM = "sizeSystem";
  @SerializedName(SERIALIZED_NAME_SIZE_SYSTEM)
  private String sizeSystem;

  public static final String SERIALIZED_NAME_SIZE_TYPE = "sizeType";
  @SerializedName(SERIALIZED_NAME_SIZE_TYPE)
  private String sizeType;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<Taxes> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOP_RATED_BUYING_EXPERIENCE = "topRatedBuyingExperience";
  @SerializedName(SERIALIZED_NAME_TOP_RATED_BUYING_EXPERIENCE)
  private Boolean topRatedBuyingExperience;

  public static final String SERIALIZED_NAME_UNIQUE_BIDDER_COUNT = "uniqueBidderCount";
  @SerializedName(SERIALIZED_NAME_UNIQUE_BIDDER_COUNT)
  private Integer uniqueBidderCount;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private ConvertedAmount unitPrice;

  public static final String SERIALIZED_NAME_UNIT_PRICING_MEASURE = "unitPricingMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICING_MEASURE)
  private String unitPricingMeasure;

  public CoreItem() {
  }

  public CoreItem additionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
    return this;
  }

  public CoreItem addAdditionalImagesItem(Image additionalImagesItem) {
    if (this.additionalImages == null) {
      this.additionalImages = new ArrayList<>();
    }
    this.additionalImages.add(additionalImagesItem);
    return this;
  }

  /**
   * An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
   * @return additionalImages
   */
  @javax.annotation.Nullable
  public List<Image> getAdditionalImages() {
    return additionalImages;
  }

  public void setAdditionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
  }


  public CoreItem adultOnly(Boolean adultOnly) {
    this.adultOnly = adultOnly;
    return this;
  }

  /**
   * This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.
   * @return adultOnly
   */
  @javax.annotation.Nullable
  public Boolean getAdultOnly() {
    return adultOnly;
  }

  public void setAdultOnly(Boolean adultOnly) {
    this.adultOnly = adultOnly;
  }


  public CoreItem ageGroup(String ageGroup) {
    this.ageGroup = ageGroup;
    return this;
  }

  /**
   * (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return ageGroup
   */
  @javax.annotation.Nullable
  public String getAgeGroup() {
    return ageGroup;
  }

  public void setAgeGroup(String ageGroup) {
    this.ageGroup = ageGroup;
  }


  public CoreItem availableCoupons(List<AvailableCoupon> availableCoupons) {
    this.availableCoupons = availableCoupons;
    return this;
  }

  public CoreItem addAvailableCouponsItem(AvailableCoupon availableCouponsItem) {
    if (this.availableCoupons == null) {
      this.availableCoupons = new ArrayList<>();
    }
    this.availableCoupons.add(availableCouponsItem);
    return this;
  }

  /**
   * A list of available coupons for the item.
   * @return availableCoupons
   */
  @javax.annotation.Nullable
  public List<AvailableCoupon> getAvailableCoupons() {
    return availableCoupons;
  }

  public void setAvailableCoupons(List<AvailableCoupon> availableCoupons) {
    this.availableCoupons = availableCoupons;
  }


  public CoreItem bidCount(Integer bidCount) {
    this.bidCount = bidCount;
    return this;
  }

  /**
   * This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.
   * @return bidCount
   */
  @javax.annotation.Nullable
  public Integer getBidCount() {
    return bidCount;
  }

  public void setBidCount(Integer bidCount) {
    this.bidCount = bidCount;
  }


  public CoreItem brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public CoreItem buyingOptions(List<String> buyingOptions) {
    this.buyingOptions = buyingOptions;
    return this;
  }

  public CoreItem addBuyingOptionsItem(String buyingOptionsItem) {
    if (this.buyingOptions == null) {
      this.buyingOptions = new ArrayList<>();
    }
    this.buyingOptions.add(buyingOptionsItem);
    return this;
  }

  /**
   * A comma separated list of all the purchase options available for the item. The values returned are: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Indicates the buyer can send the seller a price they&#39;re willing to pay for the item. The seller can accept, reject, or send a counter offer. For more information on how this works, see Making a Best Offer. Code so that your app gracefully handles any future changes to this list.
   * @return buyingOptions
   */
  @javax.annotation.Nullable
  public List<String> getBuyingOptions() {
    return buyingOptions;
  }

  public void setBuyingOptions(List<String> buyingOptions) {
    this.buyingOptions = buyingOptions;
  }


  public CoreItem categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The ID of the leaf category for this item. A leaf category is the lowest level in that category and has no children.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public CoreItem categoryPath(String categoryPath) {
    this.categoryPath = categoryPath;
    return this;
  }

  /**
   * Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp;amp; Networking, Laptops &amp;amp; Netbooks, PC Laptops &amp;amp; Netbooks
   * @return categoryPath
   */
  @javax.annotation.Nullable
  public String getCategoryPath() {
    return categoryPath;
  }

  public void setCategoryPath(String categoryPath) {
    this.categoryPath = categoryPath;
  }


  public CoreItem color(String color) {
    this.color = color;
    return this;
  }

  /**
   * (Primary Item Aspect) Text describing the color of the item. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public CoreItem condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * A short text description for the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of &#39;Certified Refurbished&#39;, but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to &#39;Manufacturer Refurbished&#39;.
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public CoreItem conditionDescription(String conditionDescription) {
    this.conditionDescription = conditionDescription;
    return this;
  }

  /**
   * A full text description for the condition of the item. This field elaborates on the value specified in the condition field and provides full details for the condition of the item. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of &#39;Certified Refurbished&#39;, but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to &#39;Manufacturer Refurbished&#39;.
   * @return conditionDescription
   */
  @javax.annotation.Nullable
  public String getConditionDescription() {
    return conditionDescription;
  }

  public void setConditionDescription(String conditionDescription) {
    this.conditionDescription = conditionDescription;
  }


  public CoreItem conditionId(String conditionId) {
    this.conditionId = conditionId;
    return this;
  }

  /**
   * The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of &#39;Certified Refurbished&#39;, but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to &#39;Manufacturer Refurbished&#39;.
   * @return conditionId
   */
  @javax.annotation.Nullable
  public String getConditionId() {
    return conditionId;
  }

  public void setConditionId(String conditionId) {
    this.conditionId = conditionId;
  }


  public CoreItem currentBidPrice(ConvertedAmount currentBidPrice) {
    this.currentBidPrice = currentBidPrice;
    return this;
  }

  /**
   * Get currentBidPrice
   * @return currentBidPrice
   */
  @javax.annotation.Nullable
  public ConvertedAmount getCurrentBidPrice() {
    return currentBidPrice;
  }

  public void setCurrentBidPrice(ConvertedAmount currentBidPrice) {
    this.currentBidPrice = currentBidPrice;
  }


  public CoreItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The full description of the item that was created by the seller. This can be plain text or rich content and can be very large.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CoreItem eligibleForInlineCheckout(Boolean eligibleForInlineCheckout) {
    this.eligibleForInlineCheckout = eligibleForInlineCheckout;
    return this;
  }

  /**
   * This field indicates if the item can be purchased using the Buy Order API. If the value of this field is true, this indicates that the item can be purchased using the Order API. If the value of this field is false, this indicates that the item cannot be purchased using the Order API and must be purchased on the eBay site.
   * @return eligibleForInlineCheckout
   */
  @javax.annotation.Nullable
  public Boolean getEligibleForInlineCheckout() {
    return eligibleForInlineCheckout;
  }

  public void setEligibleForInlineCheckout(Boolean eligibleForInlineCheckout) {
    this.eligibleForInlineCheckout = eligibleForInlineCheckout;
  }


  public CoreItem enabledForGuestCheckout(Boolean enabledForGuestCheckout) {
    this.enabledForGuestCheckout = enabledForGuestCheckout;
    return this;
  }

  /**
   * This indicates if the item can be purchased using Guest Checkout in the Order API. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.
   * @return enabledForGuestCheckout
   */
  @javax.annotation.Nullable
  public Boolean getEnabledForGuestCheckout() {
    return enabledForGuestCheckout;
  }

  public void setEnabledForGuestCheckout(Boolean enabledForGuestCheckout) {
    this.enabledForGuestCheckout = enabledForGuestCheckout;
  }


  public CoreItem energyEfficiencyClass(String energyEfficiencyClass) {
    this.energyEfficiencyClass = energyEfficiencyClass;
    return this;
  }

  /**
   * This indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where &#39;A&#39; is the most energy efficient and &#39;G&#39; is the least efficient. This rating helps buyers choose between various models. When the manufacturer&#39;s specifications for this item are available, the link to this information is returned in the productFicheWebUrl field.
   * @return energyEfficiencyClass
   */
  @javax.annotation.Nullable
  public String getEnergyEfficiencyClass() {
    return energyEfficiencyClass;
  }

  public void setEnergyEfficiencyClass(String energyEfficiencyClass) {
    this.energyEfficiencyClass = energyEfficiencyClass;
  }


  public CoreItem epid(String epid) {
    this.epid = epid;
    return this;
  }

  /**
   * An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
   * @return epid
   */
  @javax.annotation.Nullable
  public String getEpid() {
    return epid;
  }

  public void setEpid(String epid) {
    this.epid = epid;
  }


  public CoreItem estimatedAvailabilities(List<EstimatedAvailability> estimatedAvailabilities) {
    this.estimatedAvailabilities = estimatedAvailabilities;
    return this;
  }

  public CoreItem addEstimatedAvailabilitiesItem(EstimatedAvailability estimatedAvailabilitiesItem) {
    if (this.estimatedAvailabilities == null) {
      this.estimatedAvailabilities = new ArrayList<>();
    }
    this.estimatedAvailabilities.add(estimatedAvailabilitiesItem);
    return this;
  }

  /**
   * The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
   * @return estimatedAvailabilities
   */
  @javax.annotation.Nullable
  public List<EstimatedAvailability> getEstimatedAvailabilities() {
    return estimatedAvailabilities;
  }

  public void setEstimatedAvailabilities(List<EstimatedAvailability> estimatedAvailabilities) {
    this.estimatedAvailabilities = estimatedAvailabilities;
  }


  public CoreItem gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public CoreItem gtin(String gtin) {
    this.gtin = gtin;
    return this;
  }

  /**
   * The unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
   * @return gtin
   */
  @javax.annotation.Nullable
  public String getGtin() {
    return gtin;
  }

  public void setGtin(String gtin) {
    this.gtin = gtin;
  }


  public CoreItem image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public CoreItem inferredEpid(String inferredEpid) {
    this.inferredEpid = inferredEpid;
    return this;
  }

  /**
   * The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay using the item&#39;s title, aspects, and other data. If the seller provided an ePID for the item, the seller&#39;s value is returned in the epid field. Note: This field is returned only for authorized Partners.
   * @return inferredEpid
   */
  @javax.annotation.Nullable
  public String getInferredEpid() {
    return inferredEpid;
  }

  public void setInferredEpid(String inferredEpid) {
    this.inferredEpid = inferredEpid;
  }


  public CoreItem itemAffiliateWebUrl(String itemAffiliateWebUrl) {
    this.itemAffiliateWebUrl = itemAffiliateWebUrl;
    return this;
  }

  /**
   * The URL of the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the eBay partner enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to be commissioned for your sales, you must use this URL to forward your buyer to the ebay.com site.
   * @return itemAffiliateWebUrl
   */
  @javax.annotation.Nullable
  public String getItemAffiliateWebUrl() {
    return itemAffiliateWebUrl;
  }

  public void setItemAffiliateWebUrl(String itemAffiliateWebUrl) {
    this.itemAffiliateWebUrl = itemAffiliateWebUrl;
  }


  public CoreItem itemEndDate(String itemEndDate) {
    this.itemEndDate = itemEndDate;
    return this;
  }

  /**
   * The date and time up to which the items can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: This field is not returned for Good &#39;Til Cancelled (GTC) listings.
   * @return itemEndDate
   */
  @javax.annotation.Nullable
  public String getItemEndDate() {
    return itemEndDate;
  }

  public void setItemEndDate(String itemEndDate) {
    this.itemEndDate = itemEndDate;
  }


  public CoreItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The unique RESTful identifier of the item.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public CoreItem itemLocation(Address itemLocation) {
    this.itemLocation = itemLocation;
    return this;
  }

  /**
   * Get itemLocation
   * @return itemLocation
   */
  @javax.annotation.Nullable
  public Address getItemLocation() {
    return itemLocation;
  }

  public void setItemLocation(Address itemLocation) {
    this.itemLocation = itemLocation;
  }


  public CoreItem itemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
    return this;
  }

  /**
   * The URL of the View Item page of the item. This enables you to include a &amp;quot;Report Item on eBay&amp;quot; link that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
   * @return itemWebUrl
   */
  @javax.annotation.Nullable
  public String getItemWebUrl() {
    return itemWebUrl;
  }

  public void setItemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
  }


  public CoreItem legacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
    return this;
  }

  /**
   * The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
   * @return legacyItemId
   */
  @javax.annotation.Nullable
  public String getLegacyItemId() {
    return legacyItemId;
  }

  public void setLegacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
  }


  public CoreItem localizedAspects(List<TypedNameValue> localizedAspects) {
    this.localizedAspects = localizedAspects;
    return this;
  }

  public CoreItem addLocalizedAspectsItem(TypedNameValue localizedAspectsItem) {
    if (this.localizedAspects == null) {
      this.localizedAspects = new ArrayList<>();
    }
    this.localizedAspects.add(localizedAspectsItem);
    return this;
  }

  /**
   * An array of containers that show the complete list of the aspect name/value pairs that describe the variation of the item.
   * @return localizedAspects
   */
  @javax.annotation.Nullable
  public List<TypedNameValue> getLocalizedAspects() {
    return localizedAspects;
  }

  public void setLocalizedAspects(List<TypedNameValue> localizedAspects) {
    this.localizedAspects = localizedAspects;
  }


  public CoreItem lotSize(Integer lotSize) {
    this.lotSize = lotSize;
    return this;
  }

  /**
   * The number of items in a lot. In other words, a lot size is the number of items that are being sold together. A lot is a set of two or more items included in a single listing that must be purchased together in a single order line item. All the items in the lot are the same but there can be multiple items in a single lot, such as the package of batteries shown in the example below. Item Lot Definition Lot Size A package of 24 AA batteries A box of 10 packages 10 A P235/75-15 Goodyear tire 4 tires 4 Fashion Jewelry Rings Package of 100 assorted rings 100 Note: Lots are not supported in all categories.
   * @return lotSize
   */
  @javax.annotation.Nullable
  public Integer getLotSize() {
    return lotSize;
  }

  public void setLotSize(Integer lotSize) {
    this.lotSize = lotSize;
  }


  public CoreItem marketingPrice(MarketingPrice marketingPrice) {
    this.marketingPrice = marketingPrice;
    return this;
  }

  /**
   * Get marketingPrice
   * @return marketingPrice
   */
  @javax.annotation.Nullable
  public MarketingPrice getMarketingPrice() {
    return marketingPrice;
  }

  public void setMarketingPrice(MarketingPrice marketingPrice) {
    this.marketingPrice = marketingPrice;
  }


  public CoreItem material(String material) {
    this.material = material;
    return this;
  }

  /**
   * (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return material
   */
  @javax.annotation.Nullable
  public String getMaterial() {
    return material;
  }

  public void setMaterial(String material) {
    this.material = material;
  }


  public CoreItem minimumPriceToBid(ConvertedAmount minimumPriceToBid) {
    this.minimumPriceToBid = minimumPriceToBid;
    return this;
  }

  /**
   * Get minimumPriceToBid
   * @return minimumPriceToBid
   */
  @javax.annotation.Nullable
  public ConvertedAmount getMinimumPriceToBid() {
    return minimumPriceToBid;
  }

  public void setMinimumPriceToBid(ConvertedAmount minimumPriceToBid) {
    this.minimumPriceToBid = minimumPriceToBid;
  }


  public CoreItem mpn(String mpn) {
    this.mpn = mpn;
    return this;
  }

  /**
   * The manufacturer&#39;s part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.
   * @return mpn
   */
  @javax.annotation.Nullable
  public String getMpn() {
    return mpn;
  }

  public void setMpn(String mpn) {
    this.mpn = mpn;
  }


  public CoreItem pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return pattern
   */
  @javax.annotation.Nullable
  public String getPattern() {
    return pattern;
  }

  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public CoreItem paymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public CoreItem addPaymentMethodsItem(PaymentMethod paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

  /**
   * The payment methods for the item, including the payment method types, brands, and instructions for the buyer.
   * @return paymentMethods
   */
  @javax.annotation.Nullable
  public List<PaymentMethod> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  public CoreItem price(ConvertedAmount price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ConvertedAmount getPrice() {
    return price;
  }

  public void setPrice(ConvertedAmount price) {
    this.price = price;
  }


  public CoreItem priceDisplayCondition(String priceDisplayCondition) {
    this.priceDisplayCondition = priceDisplayCondition;
    return this;
  }

  /**
   * Indicates when in the buying flow the item&#39;s price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return priceDisplayCondition
   */
  @javax.annotation.Nullable
  public String getPriceDisplayCondition() {
    return priceDisplayCondition;
  }

  public void setPriceDisplayCondition(String priceDisplayCondition) {
    this.priceDisplayCondition = priceDisplayCondition;
  }


  public CoreItem primaryItemGroup(ItemGroupSummary primaryItemGroup) {
    this.primaryItemGroup = primaryItemGroup;
    return this;
  }

  /**
   * Get primaryItemGroup
   * @return primaryItemGroup
   */
  @javax.annotation.Nullable
  public ItemGroupSummary getPrimaryItemGroup() {
    return primaryItemGroup;
  }

  public void setPrimaryItemGroup(ItemGroupSummary primaryItemGroup) {
    this.primaryItemGroup = primaryItemGroup;
  }


  public CoreItem primaryProductReviewRating(ReviewRating primaryProductReviewRating) {
    this.primaryProductReviewRating = primaryProductReviewRating;
    return this;
  }

  /**
   * Get primaryProductReviewRating
   * @return primaryProductReviewRating
   */
  @javax.annotation.Nullable
  public ReviewRating getPrimaryProductReviewRating() {
    return primaryProductReviewRating;
  }

  public void setPrimaryProductReviewRating(ReviewRating primaryProductReviewRating) {
    this.primaryProductReviewRating = primaryProductReviewRating;
  }


  public CoreItem product(Product product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }


  public CoreItem productFicheWebUrl(String productFicheWebUrl) {
    this.productFicheWebUrl = productFicheWebUrl;
    return this;
  }

  /**
   * The URL of a page containing the manufacturer&#39;s specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for all items with an EEK rating and is returned only if this information is available. The EEK rating of the item is returned in the energyEfficiencyClass field.
   * @return productFicheWebUrl
   */
  @javax.annotation.Nullable
  public String getProductFicheWebUrl() {
    return productFicheWebUrl;
  }

  public void setProductFicheWebUrl(String productFicheWebUrl) {
    this.productFicheWebUrl = productFicheWebUrl;
  }


  public CoreItem qualifiedPrograms(List<String> qualifiedPrograms) {
    this.qualifiedPrograms = qualifiedPrograms;
    return this;
  }

  public CoreItem addQualifiedProgramsItem(String qualifiedProgramsItem) {
    if (this.qualifiedPrograms == null) {
      this.qualifiedPrograms = new ArrayList<>();
    }
    this.qualifiedPrograms.add(qualifiedProgramsItem);
    return this;
  }

  /**
   * An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.
   * @return qualifiedPrograms
   */
  @javax.annotation.Nullable
  public List<String> getQualifiedPrograms() {
    return qualifiedPrograms;
  }

  public void setQualifiedPrograms(List<String> qualifiedPrograms) {
    this.qualifiedPrograms = qualifiedPrograms;
  }


  public CoreItem quantityLimitPerBuyer(Integer quantityLimitPerBuyer) {
    this.quantityLimitPerBuyer = quantityLimitPerBuyer;
    return this;
  }

  /**
   * The maximum number for a specific item that one buyer can purchase.
   * @return quantityLimitPerBuyer
   */
  @javax.annotation.Nullable
  public Integer getQuantityLimitPerBuyer() {
    return quantityLimitPerBuyer;
  }

  public void setQuantityLimitPerBuyer(Integer quantityLimitPerBuyer) {
    this.quantityLimitPerBuyer = quantityLimitPerBuyer;
  }


  public CoreItem reservePriceMet(Boolean reservePriceMet) {
    this.reservePriceMet = reservePriceMet;
    return this;
  }

  /**
   * This indicates if the reserve price of the item has been met. A reserve price is set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not equal to or higher than the reserve price when the auction ends, the listing ends and the item is not sold. Note: This is returned only for auctions that have a reserve price.
   * @return reservePriceMet
   */
  @javax.annotation.Nullable
  public Boolean getReservePriceMet() {
    return reservePriceMet;
  }

  public void setReservePriceMet(Boolean reservePriceMet) {
    this.reservePriceMet = reservePriceMet;
  }


  public CoreItem returnTerms(ItemReturnTerms returnTerms) {
    this.returnTerms = returnTerms;
    return this;
  }

  /**
   * Get returnTerms
   * @return returnTerms
   */
  @javax.annotation.Nullable
  public ItemReturnTerms getReturnTerms() {
    return returnTerms;
  }

  public void setReturnTerms(ItemReturnTerms returnTerms) {
    this.returnTerms = returnTerms;
  }


  public CoreItem seller(SellerDetail seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public SellerDetail getSeller() {
    return seller;
  }

  public void setSeller(SellerDetail seller) {
    this.seller = seller;
  }


  public CoreItem sellerItemRevision(String sellerItemRevision) {
    this.sellerItemRevision = sellerItemRevision;
    return this;
  }

  /**
   * An identifier generated/incremented when a seller revises the item. There are two types of item revisions: Seller changes, such as changing the title eBay system changes, such as changing the quantity when an item is purchased This ID is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.
   * @return sellerItemRevision
   */
  @javax.annotation.Nullable
  public String getSellerItemRevision() {
    return sellerItemRevision;
  }

  public void setSellerItemRevision(String sellerItemRevision) {
    this.sellerItemRevision = sellerItemRevision;
  }


  public CoreItem shipToLocations(ShipToLocations shipToLocations) {
    this.shipToLocations = shipToLocations;
    return this;
  }

  /**
   * Get shipToLocations
   * @return shipToLocations
   */
  @javax.annotation.Nullable
  public ShipToLocations getShipToLocations() {
    return shipToLocations;
  }

  public void setShipToLocations(ShipToLocations shipToLocations) {
    this.shipToLocations = shipToLocations;
  }


  public CoreItem shippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public CoreItem addShippingOptionsItem(ShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

  /**
   * An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.
   * @return shippingOptions
   */
  @javax.annotation.Nullable
  public List<ShippingOption> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }


  public CoreItem shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public CoreItem size(String size) {
    this.size = size;
    return this;
  }

  /**
   * (Primary Item Aspect) The size of the item. For example, &#39;7&#39; for a size 7 shoe. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public CoreItem sizeSystem(String sizeSystem) {
    this.sizeSystem = sizeSystem;
    return this;
  }

  /**
   * (Primary Item Aspect) The sizing system of the country. All the item aspects, including this aspect, are returned in the localizedAspects container. Valid Values: AU (Australia), BR (Brazil), CN (China), DE (Germany), EU (European Union), FR (France), IT (Italy), JP (Japan), MX (Mexico), US (USA), UK (United Kingdom) Code so that your app gracefully handles any future changes to this list.
   * @return sizeSystem
   */
  @javax.annotation.Nullable
  public String getSizeSystem() {
    return sizeSystem;
  }

  public void setSizeSystem(String sizeSystem) {
    this.sizeSystem = sizeSystem;
  }


  public CoreItem sizeType(String sizeType) {
    this.sizeType = sizeType;
    return this;
  }

  /**
   * (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the localizedAspects container.
   * @return sizeType
   */
  @javax.annotation.Nullable
  public String getSizeType() {
    return sizeType;
  }

  public void setSizeType(String sizeType) {
    this.sizeType = sizeType;
  }


  public CoreItem subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * A subtitle is optional and allows the seller to provide more information about the product, possibly including keywords that may assist with search results.
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public CoreItem taxes(List<Taxes> taxes) {
    this.taxes = taxes;
    return this;
  }

  public CoreItem addTaxesItem(Taxes taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * The container for the tax information for the item.
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<Taxes> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<Taxes> taxes) {
    this.taxes = taxes;
  }


  public CoreItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The seller-created title of the item. Maximum Length: 80 characters
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CoreItem topRatedBuyingExperience(Boolean topRatedBuyingExperience) {
    this.topRatedBuyingExperience = topRatedBuyingExperience;
    return this;
  }

  /**
   * This indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item; a minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the Top Rated Plus Items and Becoming a Top Rated Seller and qualifying for Top Rated Plus help topics for more information.
   * @return topRatedBuyingExperience
   */
  @javax.annotation.Nullable
  public Boolean getTopRatedBuyingExperience() {
    return topRatedBuyingExperience;
  }

  public void setTopRatedBuyingExperience(Boolean topRatedBuyingExperience) {
    this.topRatedBuyingExperience = topRatedBuyingExperience;
  }


  public CoreItem uniqueBidderCount(Integer uniqueBidderCount) {
    this.uniqueBidderCount = uniqueBidderCount;
    return this;
  }

  /**
   * This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.
   * @return uniqueBidderCount
   */
  @javax.annotation.Nullable
  public Integer getUniqueBidderCount() {
    return uniqueBidderCount;
  }

  public void setUniqueBidderCount(Integer uniqueBidderCount) {
    this.uniqueBidderCount = uniqueBidderCount;
  }


  public CoreItem unitPrice(ConvertedAmount unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public ConvertedAmount getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(ConvertedAmount unitPrice) {
    this.unitPrice = unitPrice;
  }


  public CoreItem unitPricingMeasure(String unitPricingMeasure) {
    this.unitPricingMeasure = unitPricingMeasure;
    return this;
  }

  /**
   * The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &amp;quot;unitPricingMeasure&amp;quot;: &amp;quot;100g&amp;quot;, &amp;quot;unitPrice&amp;quot;: { &amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot;: &amp;quot;7.99&amp;quot;, &amp;nbsp;&amp;nbsp;&amp;quot;currency&amp;quot;: &amp;quot;GBP&amp;quot;
   * @return unitPricingMeasure
   */
  @javax.annotation.Nullable
  public String getUnitPricingMeasure() {
    return unitPricingMeasure;
  }

  public void setUnitPricingMeasure(String unitPricingMeasure) {
    this.unitPricingMeasure = unitPricingMeasure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreItem coreItem = (CoreItem) o;
    return Objects.equals(this.additionalImages, coreItem.additionalImages) &&
        Objects.equals(this.adultOnly, coreItem.adultOnly) &&
        Objects.equals(this.ageGroup, coreItem.ageGroup) &&
        Objects.equals(this.availableCoupons, coreItem.availableCoupons) &&
        Objects.equals(this.bidCount, coreItem.bidCount) &&
        Objects.equals(this.brand, coreItem.brand) &&
        Objects.equals(this.buyingOptions, coreItem.buyingOptions) &&
        Objects.equals(this.categoryId, coreItem.categoryId) &&
        Objects.equals(this.categoryPath, coreItem.categoryPath) &&
        Objects.equals(this.color, coreItem.color) &&
        Objects.equals(this.condition, coreItem.condition) &&
        Objects.equals(this.conditionDescription, coreItem.conditionDescription) &&
        Objects.equals(this.conditionId, coreItem.conditionId) &&
        Objects.equals(this.currentBidPrice, coreItem.currentBidPrice) &&
        Objects.equals(this.description, coreItem.description) &&
        Objects.equals(this.eligibleForInlineCheckout, coreItem.eligibleForInlineCheckout) &&
        Objects.equals(this.enabledForGuestCheckout, coreItem.enabledForGuestCheckout) &&
        Objects.equals(this.energyEfficiencyClass, coreItem.energyEfficiencyClass) &&
        Objects.equals(this.epid, coreItem.epid) &&
        Objects.equals(this.estimatedAvailabilities, coreItem.estimatedAvailabilities) &&
        Objects.equals(this.gender, coreItem.gender) &&
        Objects.equals(this.gtin, coreItem.gtin) &&
        Objects.equals(this.image, coreItem.image) &&
        Objects.equals(this.inferredEpid, coreItem.inferredEpid) &&
        Objects.equals(this.itemAffiliateWebUrl, coreItem.itemAffiliateWebUrl) &&
        Objects.equals(this.itemEndDate, coreItem.itemEndDate) &&
        Objects.equals(this.itemId, coreItem.itemId) &&
        Objects.equals(this.itemLocation, coreItem.itemLocation) &&
        Objects.equals(this.itemWebUrl, coreItem.itemWebUrl) &&
        Objects.equals(this.legacyItemId, coreItem.legacyItemId) &&
        Objects.equals(this.localizedAspects, coreItem.localizedAspects) &&
        Objects.equals(this.lotSize, coreItem.lotSize) &&
        Objects.equals(this.marketingPrice, coreItem.marketingPrice) &&
        Objects.equals(this.material, coreItem.material) &&
        Objects.equals(this.minimumPriceToBid, coreItem.minimumPriceToBid) &&
        Objects.equals(this.mpn, coreItem.mpn) &&
        Objects.equals(this.pattern, coreItem.pattern) &&
        Objects.equals(this.paymentMethods, coreItem.paymentMethods) &&
        Objects.equals(this.price, coreItem.price) &&
        Objects.equals(this.priceDisplayCondition, coreItem.priceDisplayCondition) &&
        Objects.equals(this.primaryItemGroup, coreItem.primaryItemGroup) &&
        Objects.equals(this.primaryProductReviewRating, coreItem.primaryProductReviewRating) &&
        Objects.equals(this.product, coreItem.product) &&
        Objects.equals(this.productFicheWebUrl, coreItem.productFicheWebUrl) &&
        Objects.equals(this.qualifiedPrograms, coreItem.qualifiedPrograms) &&
        Objects.equals(this.quantityLimitPerBuyer, coreItem.quantityLimitPerBuyer) &&
        Objects.equals(this.reservePriceMet, coreItem.reservePriceMet) &&
        Objects.equals(this.returnTerms, coreItem.returnTerms) &&
        Objects.equals(this.seller, coreItem.seller) &&
        Objects.equals(this.sellerItemRevision, coreItem.sellerItemRevision) &&
        Objects.equals(this.shipToLocations, coreItem.shipToLocations) &&
        Objects.equals(this.shippingOptions, coreItem.shippingOptions) &&
        Objects.equals(this.shortDescription, coreItem.shortDescription) &&
        Objects.equals(this.size, coreItem.size) &&
        Objects.equals(this.sizeSystem, coreItem.sizeSystem) &&
        Objects.equals(this.sizeType, coreItem.sizeType) &&
        Objects.equals(this.subtitle, coreItem.subtitle) &&
        Objects.equals(this.taxes, coreItem.taxes) &&
        Objects.equals(this.title, coreItem.title) &&
        Objects.equals(this.topRatedBuyingExperience, coreItem.topRatedBuyingExperience) &&
        Objects.equals(this.uniqueBidderCount, coreItem.uniqueBidderCount) &&
        Objects.equals(this.unitPrice, coreItem.unitPrice) &&
        Objects.equals(this.unitPricingMeasure, coreItem.unitPricingMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalImages, adultOnly, ageGroup, availableCoupons, bidCount, brand, buyingOptions, categoryId, categoryPath, color, condition, conditionDescription, conditionId, currentBidPrice, description, eligibleForInlineCheckout, enabledForGuestCheckout, energyEfficiencyClass, epid, estimatedAvailabilities, gender, gtin, image, inferredEpid, itemAffiliateWebUrl, itemEndDate, itemId, itemLocation, itemWebUrl, legacyItemId, localizedAspects, lotSize, marketingPrice, material, minimumPriceToBid, mpn, pattern, paymentMethods, price, priceDisplayCondition, primaryItemGroup, primaryProductReviewRating, product, productFicheWebUrl, qualifiedPrograms, quantityLimitPerBuyer, reservePriceMet, returnTerms, seller, sellerItemRevision, shipToLocations, shippingOptions, shortDescription, size, sizeSystem, sizeType, subtitle, taxes, title, topRatedBuyingExperience, uniqueBidderCount, unitPrice, unitPricingMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreItem {\n");
    sb.append("    additionalImages: ").append(toIndentedString(additionalImages)).append("\n");
    sb.append("    adultOnly: ").append(toIndentedString(adultOnly)).append("\n");
    sb.append("    ageGroup: ").append(toIndentedString(ageGroup)).append("\n");
    sb.append("    availableCoupons: ").append(toIndentedString(availableCoupons)).append("\n");
    sb.append("    bidCount: ").append(toIndentedString(bidCount)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    buyingOptions: ").append(toIndentedString(buyingOptions)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryPath: ").append(toIndentedString(categoryPath)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    conditionDescription: ").append(toIndentedString(conditionDescription)).append("\n");
    sb.append("    conditionId: ").append(toIndentedString(conditionId)).append("\n");
    sb.append("    currentBidPrice: ").append(toIndentedString(currentBidPrice)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eligibleForInlineCheckout: ").append(toIndentedString(eligibleForInlineCheckout)).append("\n");
    sb.append("    enabledForGuestCheckout: ").append(toIndentedString(enabledForGuestCheckout)).append("\n");
    sb.append("    energyEfficiencyClass: ").append(toIndentedString(energyEfficiencyClass)).append("\n");
    sb.append("    epid: ").append(toIndentedString(epid)).append("\n");
    sb.append("    estimatedAvailabilities: ").append(toIndentedString(estimatedAvailabilities)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    inferredEpid: ").append(toIndentedString(inferredEpid)).append("\n");
    sb.append("    itemAffiliateWebUrl: ").append(toIndentedString(itemAffiliateWebUrl)).append("\n");
    sb.append("    itemEndDate: ").append(toIndentedString(itemEndDate)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemLocation: ").append(toIndentedString(itemLocation)).append("\n");
    sb.append("    itemWebUrl: ").append(toIndentedString(itemWebUrl)).append("\n");
    sb.append("    legacyItemId: ").append(toIndentedString(legacyItemId)).append("\n");
    sb.append("    localizedAspects: ").append(toIndentedString(localizedAspects)).append("\n");
    sb.append("    lotSize: ").append(toIndentedString(lotSize)).append("\n");
    sb.append("    marketingPrice: ").append(toIndentedString(marketingPrice)).append("\n");
    sb.append("    material: ").append(toIndentedString(material)).append("\n");
    sb.append("    minimumPriceToBid: ").append(toIndentedString(minimumPriceToBid)).append("\n");
    sb.append("    mpn: ").append(toIndentedString(mpn)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceDisplayCondition: ").append(toIndentedString(priceDisplayCondition)).append("\n");
    sb.append("    primaryItemGroup: ").append(toIndentedString(primaryItemGroup)).append("\n");
    sb.append("    primaryProductReviewRating: ").append(toIndentedString(primaryProductReviewRating)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productFicheWebUrl: ").append(toIndentedString(productFicheWebUrl)).append("\n");
    sb.append("    qualifiedPrograms: ").append(toIndentedString(qualifiedPrograms)).append("\n");
    sb.append("    quantityLimitPerBuyer: ").append(toIndentedString(quantityLimitPerBuyer)).append("\n");
    sb.append("    reservePriceMet: ").append(toIndentedString(reservePriceMet)).append("\n");
    sb.append("    returnTerms: ").append(toIndentedString(returnTerms)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    sellerItemRevision: ").append(toIndentedString(sellerItemRevision)).append("\n");
    sb.append("    shipToLocations: ").append(toIndentedString(shipToLocations)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sizeSystem: ").append(toIndentedString(sizeSystem)).append("\n");
    sb.append("    sizeType: ").append(toIndentedString(sizeType)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topRatedBuyingExperience: ").append(toIndentedString(topRatedBuyingExperience)).append("\n");
    sb.append("    uniqueBidderCount: ").append(toIndentedString(uniqueBidderCount)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    unitPricingMeasure: ").append(toIndentedString(unitPricingMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalImages");
    openapiFields.add("adultOnly");
    openapiFields.add("ageGroup");
    openapiFields.add("availableCoupons");
    openapiFields.add("bidCount");
    openapiFields.add("brand");
    openapiFields.add("buyingOptions");
    openapiFields.add("categoryId");
    openapiFields.add("categoryPath");
    openapiFields.add("color");
    openapiFields.add("condition");
    openapiFields.add("conditionDescription");
    openapiFields.add("conditionId");
    openapiFields.add("currentBidPrice");
    openapiFields.add("description");
    openapiFields.add("eligibleForInlineCheckout");
    openapiFields.add("enabledForGuestCheckout");
    openapiFields.add("energyEfficiencyClass");
    openapiFields.add("epid");
    openapiFields.add("estimatedAvailabilities");
    openapiFields.add("gender");
    openapiFields.add("gtin");
    openapiFields.add("image");
    openapiFields.add("inferredEpid");
    openapiFields.add("itemAffiliateWebUrl");
    openapiFields.add("itemEndDate");
    openapiFields.add("itemId");
    openapiFields.add("itemLocation");
    openapiFields.add("itemWebUrl");
    openapiFields.add("legacyItemId");
    openapiFields.add("localizedAspects");
    openapiFields.add("lotSize");
    openapiFields.add("marketingPrice");
    openapiFields.add("material");
    openapiFields.add("minimumPriceToBid");
    openapiFields.add("mpn");
    openapiFields.add("pattern");
    openapiFields.add("paymentMethods");
    openapiFields.add("price");
    openapiFields.add("priceDisplayCondition");
    openapiFields.add("primaryItemGroup");
    openapiFields.add("primaryProductReviewRating");
    openapiFields.add("product");
    openapiFields.add("productFicheWebUrl");
    openapiFields.add("qualifiedPrograms");
    openapiFields.add("quantityLimitPerBuyer");
    openapiFields.add("reservePriceMet");
    openapiFields.add("returnTerms");
    openapiFields.add("seller");
    openapiFields.add("sellerItemRevision");
    openapiFields.add("shipToLocations");
    openapiFields.add("shippingOptions");
    openapiFields.add("shortDescription");
    openapiFields.add("size");
    openapiFields.add("sizeSystem");
    openapiFields.add("sizeType");
    openapiFields.add("subtitle");
    openapiFields.add("taxes");
    openapiFields.add("title");
    openapiFields.add("topRatedBuyingExperience");
    openapiFields.add("uniqueBidderCount");
    openapiFields.add("unitPrice");
    openapiFields.add("unitPricingMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CoreItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreItem is not found in the empty JSON string", CoreItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalImages") != null && !jsonObj.get("additionalImages").isJsonNull()) {
        JsonArray jsonArrayadditionalImages = jsonObj.getAsJsonArray("additionalImages");
        if (jsonArrayadditionalImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalImages` to be an array in the JSON string but got `%s`", jsonObj.get("additionalImages").toString()));
          }

          // validate the optional field `additionalImages` (array)
          for (int i = 0; i < jsonArrayadditionalImages.size(); i++) {
            Image.validateJsonElement(jsonArrayadditionalImages.get(i));
          };
        }
      }
      if ((jsonObj.get("ageGroup") != null && !jsonObj.get("ageGroup").isJsonNull()) && !jsonObj.get("ageGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageGroup").toString()));
      }
      if (jsonObj.get("availableCoupons") != null && !jsonObj.get("availableCoupons").isJsonNull()) {
        JsonArray jsonArrayavailableCoupons = jsonObj.getAsJsonArray("availableCoupons");
        if (jsonArrayavailableCoupons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableCoupons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableCoupons` to be an array in the JSON string but got `%s`", jsonObj.get("availableCoupons").toString()));
          }

          // validate the optional field `availableCoupons` (array)
          for (int i = 0; i < jsonArrayavailableCoupons.size(); i++) {
            AvailableCoupon.validateJsonElement(jsonArrayavailableCoupons.get(i));
          };
        }
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buyingOptions") != null && !jsonObj.get("buyingOptions").isJsonNull() && !jsonObj.get("buyingOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("buyingOptions").toString()));
      }
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryPath") != null && !jsonObj.get("categoryPath").isJsonNull()) && !jsonObj.get("categoryPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryPath").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("conditionDescription") != null && !jsonObj.get("conditionDescription").isJsonNull()) && !jsonObj.get("conditionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditionDescription").toString()));
      }
      if ((jsonObj.get("conditionId") != null && !jsonObj.get("conditionId").isJsonNull()) && !jsonObj.get("conditionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditionId").toString()));
      }
      // validate the optional field `currentBidPrice`
      if (jsonObj.get("currentBidPrice") != null && !jsonObj.get("currentBidPrice").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("currentBidPrice"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("energyEfficiencyClass") != null && !jsonObj.get("energyEfficiencyClass").isJsonNull()) && !jsonObj.get("energyEfficiencyClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyEfficiencyClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyEfficiencyClass").toString()));
      }
      if ((jsonObj.get("epid") != null && !jsonObj.get("epid").isJsonNull()) && !jsonObj.get("epid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epid").toString()));
      }
      if (jsonObj.get("estimatedAvailabilities") != null && !jsonObj.get("estimatedAvailabilities").isJsonNull()) {
        JsonArray jsonArrayestimatedAvailabilities = jsonObj.getAsJsonArray("estimatedAvailabilities");
        if (jsonArrayestimatedAvailabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("estimatedAvailabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `estimatedAvailabilities` to be an array in the JSON string but got `%s`", jsonObj.get("estimatedAvailabilities").toString()));
          }

          // validate the optional field `estimatedAvailabilities` (array)
          for (int i = 0; i < jsonArrayestimatedAvailabilities.size(); i++) {
            EstimatedAvailability.validateJsonElement(jsonArrayestimatedAvailabilities.get(i));
          };
        }
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("inferredEpid") != null && !jsonObj.get("inferredEpid").isJsonNull()) && !jsonObj.get("inferredEpid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inferredEpid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inferredEpid").toString()));
      }
      if ((jsonObj.get("itemAffiliateWebUrl") != null && !jsonObj.get("itemAffiliateWebUrl").isJsonNull()) && !jsonObj.get("itemAffiliateWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemAffiliateWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemAffiliateWebUrl").toString()));
      }
      if ((jsonObj.get("itemEndDate") != null && !jsonObj.get("itemEndDate").isJsonNull()) && !jsonObj.get("itemEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemEndDate").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // validate the optional field `itemLocation`
      if (jsonObj.get("itemLocation") != null && !jsonObj.get("itemLocation").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("itemLocation"));
      }
      if ((jsonObj.get("itemWebUrl") != null && !jsonObj.get("itemWebUrl").isJsonNull()) && !jsonObj.get("itemWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemWebUrl").toString()));
      }
      if ((jsonObj.get("legacyItemId") != null && !jsonObj.get("legacyItemId").isJsonNull()) && !jsonObj.get("legacyItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyItemId").toString()));
      }
      if (jsonObj.get("localizedAspects") != null && !jsonObj.get("localizedAspects").isJsonNull()) {
        JsonArray jsonArraylocalizedAspects = jsonObj.getAsJsonArray("localizedAspects");
        if (jsonArraylocalizedAspects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localizedAspects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localizedAspects` to be an array in the JSON string but got `%s`", jsonObj.get("localizedAspects").toString()));
          }

          // validate the optional field `localizedAspects` (array)
          for (int i = 0; i < jsonArraylocalizedAspects.size(); i++) {
            TypedNameValue.validateJsonElement(jsonArraylocalizedAspects.get(i));
          };
        }
      }
      // validate the optional field `marketingPrice`
      if (jsonObj.get("marketingPrice") != null && !jsonObj.get("marketingPrice").isJsonNull()) {
        MarketingPrice.validateJsonElement(jsonObj.get("marketingPrice"));
      }
      if ((jsonObj.get("material") != null && !jsonObj.get("material").isJsonNull()) && !jsonObj.get("material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material").toString()));
      }
      // validate the optional field `minimumPriceToBid`
      if (jsonObj.get("minimumPriceToBid") != null && !jsonObj.get("minimumPriceToBid").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("minimumPriceToBid"));
      }
      if ((jsonObj.get("mpn") != null && !jsonObj.get("mpn").isJsonNull()) && !jsonObj.get("mpn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mpn").toString()));
      }
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
      if (jsonObj.get("paymentMethods") != null && !jsonObj.get("paymentMethods").isJsonNull()) {
        JsonArray jsonArraypaymentMethods = jsonObj.getAsJsonArray("paymentMethods");
        if (jsonArraypaymentMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
          }

          // validate the optional field `paymentMethods` (array)
          for (int i = 0; i < jsonArraypaymentMethods.size(); i++) {
            PaymentMethod.validateJsonElement(jsonArraypaymentMethods.get(i));
          };
        }
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("priceDisplayCondition") != null && !jsonObj.get("priceDisplayCondition").isJsonNull()) && !jsonObj.get("priceDisplayCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceDisplayCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceDisplayCondition").toString()));
      }
      // validate the optional field `primaryItemGroup`
      if (jsonObj.get("primaryItemGroup") != null && !jsonObj.get("primaryItemGroup").isJsonNull()) {
        ItemGroupSummary.validateJsonElement(jsonObj.get("primaryItemGroup"));
      }
      // validate the optional field `primaryProductReviewRating`
      if (jsonObj.get("primaryProductReviewRating") != null && !jsonObj.get("primaryProductReviewRating").isJsonNull()) {
        ReviewRating.validateJsonElement(jsonObj.get("primaryProductReviewRating"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        Product.validateJsonElement(jsonObj.get("product"));
      }
      if ((jsonObj.get("productFicheWebUrl") != null && !jsonObj.get("productFicheWebUrl").isJsonNull()) && !jsonObj.get("productFicheWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFicheWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFicheWebUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qualifiedPrograms") != null && !jsonObj.get("qualifiedPrograms").isJsonNull() && !jsonObj.get("qualifiedPrograms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifiedPrograms` to be an array in the JSON string but got `%s`", jsonObj.get("qualifiedPrograms").toString()));
      }
      // validate the optional field `returnTerms`
      if (jsonObj.get("returnTerms") != null && !jsonObj.get("returnTerms").isJsonNull()) {
        ItemReturnTerms.validateJsonElement(jsonObj.get("returnTerms"));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        SellerDetail.validateJsonElement(jsonObj.get("seller"));
      }
      if ((jsonObj.get("sellerItemRevision") != null && !jsonObj.get("sellerItemRevision").isJsonNull()) && !jsonObj.get("sellerItemRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerItemRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerItemRevision").toString()));
      }
      // validate the optional field `shipToLocations`
      if (jsonObj.get("shipToLocations") != null && !jsonObj.get("shipToLocations").isJsonNull()) {
        ShipToLocations.validateJsonElement(jsonObj.get("shipToLocations"));
      }
      if (jsonObj.get("shippingOptions") != null && !jsonObj.get("shippingOptions").isJsonNull()) {
        JsonArray jsonArrayshippingOptions = jsonObj.getAsJsonArray("shippingOptions");
        if (jsonArrayshippingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("shippingOptions").toString()));
          }

          // validate the optional field `shippingOptions` (array)
          for (int i = 0; i < jsonArrayshippingOptions.size(); i++) {
            ShippingOption.validateJsonElement(jsonArrayshippingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("sizeSystem") != null && !jsonObj.get("sizeSystem").isJsonNull()) && !jsonObj.get("sizeSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeSystem").toString()));
      }
      if ((jsonObj.get("sizeType") != null && !jsonObj.get("sizeType").isJsonNull()) && !jsonObj.get("sizeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeType").toString()));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            Taxes.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("unitPrice"));
      }
      if ((jsonObj.get("unitPricingMeasure") != null && !jsonObj.get("unitPricingMeasure").isJsonNull()) && !jsonObj.get("unitPricingMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitPricingMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitPricingMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreItem>() {
           @Override
           public void write(JsonWriter out, CoreItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CoreItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CoreItem
   * @throws IOException if the JSON string is invalid with respect to CoreItem
   */
  public static CoreItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreItem.class);
  }

  /**
   * Convert an instance of CoreItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

