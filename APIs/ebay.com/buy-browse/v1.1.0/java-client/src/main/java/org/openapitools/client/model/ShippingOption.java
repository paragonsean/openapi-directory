/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConvertedAmount;
import org.openapitools.client.model.ShipToLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the details of a shipping provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingOption {
  public static final String SERIALIZED_NAME_ADDITIONAL_SHIPPING_COST_PER_UNIT = "additionalShippingCostPerUnit";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SHIPPING_COST_PER_UNIT)
  private ConvertedAmount additionalShippingCostPerUnit;

  public static final String SERIALIZED_NAME_CUT_OFF_DATE_USED_FOR_ESTIMATE = "cutOffDateUsedForEstimate";
  @SerializedName(SERIALIZED_NAME_CUT_OFF_DATE_USED_FOR_ESTIMATE)
  private String cutOffDateUsedForEstimate;

  public static final String SERIALIZED_NAME_FULFILLED_THROUGH = "fulfilledThrough";
  @SerializedName(SERIALIZED_NAME_FULFILLED_THROUGH)
  private String fulfilledThrough;

  public static final String SERIALIZED_NAME_GUARANTEED_DELIVERY = "guaranteedDelivery";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_DELIVERY)
  private Boolean guaranteedDelivery;

  public static final String SERIALIZED_NAME_IMPORT_CHARGES = "importCharges";
  @SerializedName(SERIALIZED_NAME_IMPORT_CHARGES)
  private ConvertedAmount importCharges;

  public static final String SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE = "maxEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MAX_ESTIMATED_DELIVERY_DATE)
  private String maxEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE = "minEstimatedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_MIN_ESTIMATED_DELIVERY_DATE)
  private String minEstimatedDeliveryDate;

  public static final String SERIALIZED_NAME_QUANTITY_USED_FOR_ESTIMATE = "quantityUsedForEstimate";
  @SerializedName(SERIALIZED_NAME_QUANTITY_USED_FOR_ESTIMATE)
  private Integer quantityUsedForEstimate;

  public static final String SERIALIZED_NAME_SHIP_TO_LOCATION_USED_FOR_ESTIMATE = "shipToLocationUsedForEstimate";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_LOCATION_USED_FOR_ESTIMATE)
  private ShipToLocation shipToLocationUsedForEstimate;

  public static final String SERIALIZED_NAME_SHIPPING_CARRIER_CODE = "shippingCarrierCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CARRIER_CODE)
  private String shippingCarrierCode;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private ConvertedAmount shippingCost;

  public static final String SERIALIZED_NAME_SHIPPING_COST_TYPE = "shippingCostType";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST_TYPE)
  private String shippingCostType;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE_CODE = "shippingServiceCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE_CODE)
  private String shippingServiceCode;

  public static final String SERIALIZED_NAME_TRADEMARK_SYMBOL = "trademarkSymbol";
  @SerializedName(SERIALIZED_NAME_TRADEMARK_SYMBOL)
  private String trademarkSymbol;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ShippingOption() {
  }

  public ShippingOption additionalShippingCostPerUnit(ConvertedAmount additionalShippingCostPerUnit) {
    this.additionalShippingCostPerUnit = additionalShippingCostPerUnit;
    return this;
  }

  /**
   * Get additionalShippingCostPerUnit
   * @return additionalShippingCostPerUnit
   */
  @javax.annotation.Nullable
  public ConvertedAmount getAdditionalShippingCostPerUnit() {
    return additionalShippingCostPerUnit;
  }

  public void setAdditionalShippingCostPerUnit(ConvertedAmount additionalShippingCostPerUnit) {
    this.additionalShippingCostPerUnit = additionalShippingCostPerUnit;
  }


  public ShippingOption cutOffDateUsedForEstimate(String cutOffDateUsedForEstimate) {
    this.cutOffDateUsedForEstimate = cutOffDateUsedForEstimate;
    return this;
  }

  /**
   * The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for &#39;Same Day Handling&#39;. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
   * @return cutOffDateUsedForEstimate
   */
  @javax.annotation.Nullable
  public String getCutOffDateUsedForEstimate() {
    return cutOffDateUsedForEstimate;
  }

  public void setCutOffDateUsedForEstimate(String cutOffDateUsedForEstimate) {
    this.cutOffDateUsedForEstimate = cutOffDateUsedForEstimate;
  }


  public ShippingOption fulfilledThrough(String fulfilledThrough) {
    this.fulfilledThrough = fulfilledThrough;
    return this;
  }

  /**
   * If the item is being shipped by eBay&#39;s Global Shipping Program, this field returns GLOBAL_SHIPPING. Otherwise this field is null. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:FulfilledThroughEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return fulfilledThrough
   */
  @javax.annotation.Nullable
  public String getFulfilledThrough() {
    return fulfilledThrough;
  }

  public void setFulfilledThrough(String fulfilledThrough) {
    this.fulfilledThrough = fulfilledThrough;
  }


  public ShippingOption guaranteedDelivery(Boolean guaranteedDelivery) {
    this.guaranteedDelivery = guaranteedDelivery;
    return this;
  }

  /**
   * Indicates if the seller has committed to shipping the item with eBay Guaranteed Delivery. With eBay Guaranteed Delivery, the seller is committed to getting the line item to the buyer within 4 business days or less. See the Buying items with eBay Guaranteed Delivery help topic for more details about eBay Guaranteed Delivery.
   * @return guaranteedDelivery
   */
  @javax.annotation.Nullable
  public Boolean getGuaranteedDelivery() {
    return guaranteedDelivery;
  }

  public void setGuaranteedDelivery(Boolean guaranteedDelivery) {
    this.guaranteedDelivery = guaranteedDelivery;
  }


  public ShippingOption importCharges(ConvertedAmount importCharges) {
    this.importCharges = importCharges;
    return this;
  }

  /**
   * Get importCharges
   * @return importCharges
   */
  @javax.annotation.Nullable
  public ConvertedAmount getImportCharges() {
    return importCharges;
  }

  public void setImportCharges(ConvertedAmount importCharges) {
    this.importCharges = importCharges;
  }


  public ShippingOption maxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
    return this;
  }

  /**
   * The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
   * @return maxEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMaxEstimatedDeliveryDate() {
    return maxEstimatedDeliveryDate;
  }

  public void setMaxEstimatedDeliveryDate(String maxEstimatedDeliveryDate) {
    this.maxEstimatedDeliveryDate = maxEstimatedDeliveryDate;
  }


  public ShippingOption minEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
    return this;
  }

  /**
   * The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
   * @return minEstimatedDeliveryDate
   */
  @javax.annotation.Nullable
  public String getMinEstimatedDeliveryDate() {
    return minEstimatedDeliveryDate;
  }

  public void setMinEstimatedDeliveryDate(String minEstimatedDeliveryDate) {
    this.minEstimatedDeliveryDate = minEstimatedDeliveryDate;
  }


  public ShippingOption quantityUsedForEstimate(Integer quantityUsedForEstimate) {
    this.quantityUsedForEstimate = quantityUsedForEstimate;
    return this;
  }

  /**
   * The number of items used when calculating the estimation information.
   * @return quantityUsedForEstimate
   */
  @javax.annotation.Nullable
  public Integer getQuantityUsedForEstimate() {
    return quantityUsedForEstimate;
  }

  public void setQuantityUsedForEstimate(Integer quantityUsedForEstimate) {
    this.quantityUsedForEstimate = quantityUsedForEstimate;
  }


  public ShippingOption shipToLocationUsedForEstimate(ShipToLocation shipToLocationUsedForEstimate) {
    this.shipToLocationUsedForEstimate = shipToLocationUsedForEstimate;
    return this;
  }

  /**
   * Get shipToLocationUsedForEstimate
   * @return shipToLocationUsedForEstimate
   */
  @javax.annotation.Nullable
  public ShipToLocation getShipToLocationUsedForEstimate() {
    return shipToLocationUsedForEstimate;
  }

  public void setShipToLocationUsedForEstimate(ShipToLocation shipToLocationUsedForEstimate) {
    this.shipToLocationUsedForEstimate = shipToLocationUsedForEstimate;
  }


  public ShippingOption shippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
    return this;
  }

  /**
   * The name of the shipping provider, such as FedEx, or USPS.
   * @return shippingCarrierCode
   */
  @javax.annotation.Nullable
  public String getShippingCarrierCode() {
    return shippingCarrierCode;
  }

  public void setShippingCarrierCode(String shippingCarrierCode) {
    this.shippingCarrierCode = shippingCarrierCode;
  }


  public ShippingOption shippingCost(ConvertedAmount shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Get shippingCost
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public ConvertedAmount getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(ConvertedAmount shippingCost) {
    this.shippingCost = shippingCost;
  }


  public ShippingOption shippingCostType(String shippingCostType) {
    this.shippingCostType = shippingCostType;
    return this;
  }

  /**
   * Indicates the class of the shipping cost. Valid Values: FIXED or CALCULATED Code so that your app gracefully handles any future changes to this list.
   * @return shippingCostType
   */
  @javax.annotation.Nullable
  public String getShippingCostType() {
    return shippingCostType;
  }

  public void setShippingCostType(String shippingCostType) {
    this.shippingCostType = shippingCostType;
  }


  public ShippingOption shippingServiceCode(String shippingServiceCode) {
    this.shippingServiceCode = shippingServiceCode;
    return this;
  }

  /**
   * The type of shipping service. For example, USPS First Class.
   * @return shippingServiceCode
   */
  @javax.annotation.Nullable
  public String getShippingServiceCode() {
    return shippingServiceCode;
  }

  public void setShippingServiceCode(String shippingServiceCode) {
    this.shippingServiceCode = shippingServiceCode;
  }


  public ShippingOption trademarkSymbol(String trademarkSymbol) {
    this.trademarkSymbol = trademarkSymbol;
    return this;
  }

  /**
   * Any trademark symbol, such as &amp;trade; or &amp;reg;, that needs to be shown in superscript next to the shipping service name.
   * @return trademarkSymbol
   */
  @javax.annotation.Nullable
  public String getTrademarkSymbol() {
    return trademarkSymbol;
  }

  public void setTrademarkSymbol(String trademarkSymbol) {
    this.trademarkSymbol = trademarkSymbol;
  }


  public ShippingOption type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingOption shippingOption = (ShippingOption) o;
    return Objects.equals(this.additionalShippingCostPerUnit, shippingOption.additionalShippingCostPerUnit) &&
        Objects.equals(this.cutOffDateUsedForEstimate, shippingOption.cutOffDateUsedForEstimate) &&
        Objects.equals(this.fulfilledThrough, shippingOption.fulfilledThrough) &&
        Objects.equals(this.guaranteedDelivery, shippingOption.guaranteedDelivery) &&
        Objects.equals(this.importCharges, shippingOption.importCharges) &&
        Objects.equals(this.maxEstimatedDeliveryDate, shippingOption.maxEstimatedDeliveryDate) &&
        Objects.equals(this.minEstimatedDeliveryDate, shippingOption.minEstimatedDeliveryDate) &&
        Objects.equals(this.quantityUsedForEstimate, shippingOption.quantityUsedForEstimate) &&
        Objects.equals(this.shipToLocationUsedForEstimate, shippingOption.shipToLocationUsedForEstimate) &&
        Objects.equals(this.shippingCarrierCode, shippingOption.shippingCarrierCode) &&
        Objects.equals(this.shippingCost, shippingOption.shippingCost) &&
        Objects.equals(this.shippingCostType, shippingOption.shippingCostType) &&
        Objects.equals(this.shippingServiceCode, shippingOption.shippingServiceCode) &&
        Objects.equals(this.trademarkSymbol, shippingOption.trademarkSymbol) &&
        Objects.equals(this.type, shippingOption.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalShippingCostPerUnit, cutOffDateUsedForEstimate, fulfilledThrough, guaranteedDelivery, importCharges, maxEstimatedDeliveryDate, minEstimatedDeliveryDate, quantityUsedForEstimate, shipToLocationUsedForEstimate, shippingCarrierCode, shippingCost, shippingCostType, shippingServiceCode, trademarkSymbol, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingOption {\n");
    sb.append("    additionalShippingCostPerUnit: ").append(toIndentedString(additionalShippingCostPerUnit)).append("\n");
    sb.append("    cutOffDateUsedForEstimate: ").append(toIndentedString(cutOffDateUsedForEstimate)).append("\n");
    sb.append("    fulfilledThrough: ").append(toIndentedString(fulfilledThrough)).append("\n");
    sb.append("    guaranteedDelivery: ").append(toIndentedString(guaranteedDelivery)).append("\n");
    sb.append("    importCharges: ").append(toIndentedString(importCharges)).append("\n");
    sb.append("    maxEstimatedDeliveryDate: ").append(toIndentedString(maxEstimatedDeliveryDate)).append("\n");
    sb.append("    minEstimatedDeliveryDate: ").append(toIndentedString(minEstimatedDeliveryDate)).append("\n");
    sb.append("    quantityUsedForEstimate: ").append(toIndentedString(quantityUsedForEstimate)).append("\n");
    sb.append("    shipToLocationUsedForEstimate: ").append(toIndentedString(shipToLocationUsedForEstimate)).append("\n");
    sb.append("    shippingCarrierCode: ").append(toIndentedString(shippingCarrierCode)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingCostType: ").append(toIndentedString(shippingCostType)).append("\n");
    sb.append("    shippingServiceCode: ").append(toIndentedString(shippingServiceCode)).append("\n");
    sb.append("    trademarkSymbol: ").append(toIndentedString(trademarkSymbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalShippingCostPerUnit");
    openapiFields.add("cutOffDateUsedForEstimate");
    openapiFields.add("fulfilledThrough");
    openapiFields.add("guaranteedDelivery");
    openapiFields.add("importCharges");
    openapiFields.add("maxEstimatedDeliveryDate");
    openapiFields.add("minEstimatedDeliveryDate");
    openapiFields.add("quantityUsedForEstimate");
    openapiFields.add("shipToLocationUsedForEstimate");
    openapiFields.add("shippingCarrierCode");
    openapiFields.add("shippingCost");
    openapiFields.add("shippingCostType");
    openapiFields.add("shippingServiceCode");
    openapiFields.add("trademarkSymbol");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingOption is not found in the empty JSON string", ShippingOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalShippingCostPerUnit`
      if (jsonObj.get("additionalShippingCostPerUnit") != null && !jsonObj.get("additionalShippingCostPerUnit").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("additionalShippingCostPerUnit"));
      }
      if ((jsonObj.get("cutOffDateUsedForEstimate") != null && !jsonObj.get("cutOffDateUsedForEstimate").isJsonNull()) && !jsonObj.get("cutOffDateUsedForEstimate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cutOffDateUsedForEstimate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cutOffDateUsedForEstimate").toString()));
      }
      if ((jsonObj.get("fulfilledThrough") != null && !jsonObj.get("fulfilledThrough").isJsonNull()) && !jsonObj.get("fulfilledThrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfilledThrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfilledThrough").toString()));
      }
      // validate the optional field `importCharges`
      if (jsonObj.get("importCharges") != null && !jsonObj.get("importCharges").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("importCharges"));
      }
      if ((jsonObj.get("maxEstimatedDeliveryDate") != null && !jsonObj.get("maxEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("maxEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEstimatedDeliveryDate").toString()));
      }
      if ((jsonObj.get("minEstimatedDeliveryDate") != null && !jsonObj.get("minEstimatedDeliveryDate").isJsonNull()) && !jsonObj.get("minEstimatedDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minEstimatedDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minEstimatedDeliveryDate").toString()));
      }
      // validate the optional field `shipToLocationUsedForEstimate`
      if (jsonObj.get("shipToLocationUsedForEstimate") != null && !jsonObj.get("shipToLocationUsedForEstimate").isJsonNull()) {
        ShipToLocation.validateJsonElement(jsonObj.get("shipToLocationUsedForEstimate"));
      }
      if ((jsonObj.get("shippingCarrierCode") != null && !jsonObj.get("shippingCarrierCode").isJsonNull()) && !jsonObj.get("shippingCarrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCarrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCarrierCode").toString()));
      }
      // validate the optional field `shippingCost`
      if (jsonObj.get("shippingCost") != null && !jsonObj.get("shippingCost").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("shippingCost"));
      }
      if ((jsonObj.get("shippingCostType") != null && !jsonObj.get("shippingCostType").isJsonNull()) && !jsonObj.get("shippingCostType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCostType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCostType").toString()));
      }
      if ((jsonObj.get("shippingServiceCode") != null && !jsonObj.get("shippingServiceCode").isJsonNull()) && !jsonObj.get("shippingServiceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingServiceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingServiceCode").toString()));
      }
      if ((jsonObj.get("trademarkSymbol") != null && !jsonObj.get("trademarkSymbol").isJsonNull()) && !jsonObj.get("trademarkSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trademarkSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trademarkSymbol").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingOption>() {
           @Override
           public void write(JsonWriter out, ShippingOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingOption
   * @throws IOException if the JSON string is invalid with respect to ShippingOption
   */
  public static ShippingOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingOption.class);
  }

  /**
   * Convert an instance of ShippingOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

