/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LegalAddress;
import org.openapitools.client.model.VatDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the contact information for a seller.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SellerLegalInfo {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_IMPRINT = "imprint";
  @SerializedName(SERIALIZED_NAME_IMPRINT)
  private String imprint;

  public static final String SERIALIZED_NAME_LEGAL_CONTACT_FIRST_NAME = "legalContactFirstName";
  @SerializedName(SERIALIZED_NAME_LEGAL_CONTACT_FIRST_NAME)
  private String legalContactFirstName;

  public static final String SERIALIZED_NAME_LEGAL_CONTACT_LAST_NAME = "legalContactLastName";
  @SerializedName(SERIALIZED_NAME_LEGAL_CONTACT_LAST_NAME)
  private String legalContactLastName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_SELLER_PROVIDED_LEGAL_ADDRESS = "sellerProvidedLegalAddress";
  @SerializedName(SERIALIZED_NAME_SELLER_PROVIDED_LEGAL_ADDRESS)
  private LegalAddress sellerProvidedLegalAddress;

  public static final String SERIALIZED_NAME_TERMS_OF_SERVICE = "termsOfService";
  @SerializedName(SERIALIZED_NAME_TERMS_OF_SERVICE)
  private String termsOfService;

  public static final String SERIALIZED_NAME_VAT_DETAILS = "vatDetails";
  @SerializedName(SERIALIZED_NAME_VAT_DETAILS)
  private List<VatDetail> vatDetails = new ArrayList<>();

  public SellerLegalInfo() {
  }

  public SellerLegalInfo email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The seller&#39;s business email address.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SellerLegalInfo fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * The seller&#39; business fax number.
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public SellerLegalInfo imprint(String imprint) {
    this.imprint = imprint;
    return this;
  }

  /**
   * This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
   * @return imprint
   */
  @javax.annotation.Nullable
  public String getImprint() {
    return imprint;
  }

  public void setImprint(String imprint) {
    this.imprint = imprint;
  }


  public SellerLegalInfo legalContactFirstName(String legalContactFirstName) {
    this.legalContactFirstName = legalContactFirstName;
    return this;
  }

  /**
   * The seller&#39;s first name.
   * @return legalContactFirstName
   */
  @javax.annotation.Nullable
  public String getLegalContactFirstName() {
    return legalContactFirstName;
  }

  public void setLegalContactFirstName(String legalContactFirstName) {
    this.legalContactFirstName = legalContactFirstName;
  }


  public SellerLegalInfo legalContactLastName(String legalContactLastName) {
    this.legalContactLastName = legalContactLastName;
    return this;
  }

  /**
   * The seller&#39;s last name.
   * @return legalContactLastName
   */
  @javax.annotation.Nullable
  public String getLegalContactLastName() {
    return legalContactLastName;
  }

  public void setLegalContactLastName(String legalContactLastName) {
    this.legalContactLastName = legalContactLastName;
  }


  public SellerLegalInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the seller&#39;s business.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SellerLegalInfo phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The seller&#39;s business phone number.
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public SellerLegalInfo registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * The seller&#39;s registration number. This is information used by some countries.
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public SellerLegalInfo sellerProvidedLegalAddress(LegalAddress sellerProvidedLegalAddress) {
    this.sellerProvidedLegalAddress = sellerProvidedLegalAddress;
    return this;
  }

  /**
   * Get sellerProvidedLegalAddress
   * @return sellerProvidedLegalAddress
   */
  @javax.annotation.Nullable
  public LegalAddress getSellerProvidedLegalAddress() {
    return sellerProvidedLegalAddress;
  }

  public void setSellerProvidedLegalAddress(LegalAddress sellerProvidedLegalAddress) {
    this.sellerProvidedLegalAddress = sellerProvidedLegalAddress;
  }


  public SellerLegalInfo termsOfService(String termsOfService) {
    this.termsOfService = termsOfService;
    return this;
  }

  /**
   * This is a free-form string created by the seller. This is the seller&#39;s terms or condition, which is in addition to the seller&#39;s return policies.
   * @return termsOfService
   */
  @javax.annotation.Nullable
  public String getTermsOfService() {
    return termsOfService;
  }

  public void setTermsOfService(String termsOfService) {
    this.termsOfService = termsOfService;
  }


  public SellerLegalInfo vatDetails(List<VatDetail> vatDetails) {
    this.vatDetails = vatDetails;
    return this;
  }

  public SellerLegalInfo addVatDetailsItem(VatDetail vatDetailsItem) {
    if (this.vatDetails == null) {
      this.vatDetails = new ArrayList<>();
    }
    this.vatDetails.add(vatDetailsItem);
    return this;
  }

  /**
   * An array of the seller&#39;s VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.
   * @return vatDetails
   */
  @javax.annotation.Nullable
  public List<VatDetail> getVatDetails() {
    return vatDetails;
  }

  public void setVatDetails(List<VatDetail> vatDetails) {
    this.vatDetails = vatDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellerLegalInfo sellerLegalInfo = (SellerLegalInfo) o;
    return Objects.equals(this.email, sellerLegalInfo.email) &&
        Objects.equals(this.fax, sellerLegalInfo.fax) &&
        Objects.equals(this.imprint, sellerLegalInfo.imprint) &&
        Objects.equals(this.legalContactFirstName, sellerLegalInfo.legalContactFirstName) &&
        Objects.equals(this.legalContactLastName, sellerLegalInfo.legalContactLastName) &&
        Objects.equals(this.name, sellerLegalInfo.name) &&
        Objects.equals(this.phone, sellerLegalInfo.phone) &&
        Objects.equals(this.registrationNumber, sellerLegalInfo.registrationNumber) &&
        Objects.equals(this.sellerProvidedLegalAddress, sellerLegalInfo.sellerProvidedLegalAddress) &&
        Objects.equals(this.termsOfService, sellerLegalInfo.termsOfService) &&
        Objects.equals(this.vatDetails, sellerLegalInfo.vatDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, fax, imprint, legalContactFirstName, legalContactLastName, name, phone, registrationNumber, sellerProvidedLegalAddress, termsOfService, vatDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellerLegalInfo {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    imprint: ").append(toIndentedString(imprint)).append("\n");
    sb.append("    legalContactFirstName: ").append(toIndentedString(legalContactFirstName)).append("\n");
    sb.append("    legalContactLastName: ").append(toIndentedString(legalContactLastName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    sellerProvidedLegalAddress: ").append(toIndentedString(sellerProvidedLegalAddress)).append("\n");
    sb.append("    termsOfService: ").append(toIndentedString(termsOfService)).append("\n");
    sb.append("    vatDetails: ").append(toIndentedString(vatDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("fax");
    openapiFields.add("imprint");
    openapiFields.add("legalContactFirstName");
    openapiFields.add("legalContactLastName");
    openapiFields.add("name");
    openapiFields.add("phone");
    openapiFields.add("registrationNumber");
    openapiFields.add("sellerProvidedLegalAddress");
    openapiFields.add("termsOfService");
    openapiFields.add("vatDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SellerLegalInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SellerLegalInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellerLegalInfo is not found in the empty JSON string", SellerLegalInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SellerLegalInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SellerLegalInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("imprint") != null && !jsonObj.get("imprint").isJsonNull()) && !jsonObj.get("imprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imprint").toString()));
      }
      if ((jsonObj.get("legalContactFirstName") != null && !jsonObj.get("legalContactFirstName").isJsonNull()) && !jsonObj.get("legalContactFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalContactFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalContactFirstName").toString()));
      }
      if ((jsonObj.get("legalContactLastName") != null && !jsonObj.get("legalContactLastName").isJsonNull()) && !jsonObj.get("legalContactLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalContactLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalContactLastName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      // validate the optional field `sellerProvidedLegalAddress`
      if (jsonObj.get("sellerProvidedLegalAddress") != null && !jsonObj.get("sellerProvidedLegalAddress").isJsonNull()) {
        LegalAddress.validateJsonElement(jsonObj.get("sellerProvidedLegalAddress"));
      }
      if ((jsonObj.get("termsOfService") != null && !jsonObj.get("termsOfService").isJsonNull()) && !jsonObj.get("termsOfService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsOfService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsOfService").toString()));
      }
      if (jsonObj.get("vatDetails") != null && !jsonObj.get("vatDetails").isJsonNull()) {
        JsonArray jsonArrayvatDetails = jsonObj.getAsJsonArray("vatDetails");
        if (jsonArrayvatDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vatDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vatDetails` to be an array in the JSON string but got `%s`", jsonObj.get("vatDetails").toString()));
          }

          // validate the optional field `vatDetails` (array)
          for (int i = 0; i < jsonArrayvatDetails.size(); i++) {
            VatDetail.validateJsonElement(jsonArrayvatDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellerLegalInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellerLegalInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellerLegalInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellerLegalInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SellerLegalInfo>() {
           @Override
           public void write(JsonWriter out, SellerLegalInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SellerLegalInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SellerLegalInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SellerLegalInfo
   * @throws IOException if the JSON string is invalid with respect to SellerLegalInfo
   */
  public static SellerLegalInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellerLegalInfo.class);
  }

  /**
   * Convert an instance of SellerLegalInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

