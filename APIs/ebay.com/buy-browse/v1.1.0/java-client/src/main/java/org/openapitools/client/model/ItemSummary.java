/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.CompatibilityProperty;
import org.openapitools.client.model.ConvertedAmount;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ItemLocationImpl;
import org.openapitools.client.model.MarketingPrice;
import org.openapitools.client.model.PickupOptionSummary;
import org.openapitools.client.model.Seller;
import org.openapitools.client.model.ShippingOptionSummary;
import org.openapitools.client.model.TargetLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the details of a specific item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemSummary {
  public static final String SERIALIZED_NAME_ADDITIONAL_IMAGES = "additionalImages";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_IMAGES)
  private List<Image> additionalImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADULT_ONLY = "adultOnly";
  @SerializedName(SERIALIZED_NAME_ADULT_ONLY)
  private Boolean adultOnly;

  public static final String SERIALIZED_NAME_AVAILABLE_COUPONS = "availableCoupons";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_COUPONS)
  private Boolean availableCoupons;

  public static final String SERIALIZED_NAME_BID_COUNT = "bidCount";
  @SerializedName(SERIALIZED_NAME_BID_COUNT)
  private Integer bidCount;

  public static final String SERIALIZED_NAME_BUYING_OPTIONS = "buyingOptions";
  @SerializedName(SERIALIZED_NAME_BUYING_OPTIONS)
  private List<String> buyingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPATIBILITY_MATCH = "compatibilityMatch";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_MATCH)
  private String compatibilityMatch;

  public static final String SERIALIZED_NAME_COMPATIBILITY_PROPERTIES = "compatibilityProperties";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_PROPERTIES)
  private List<CompatibilityProperty> compatibilityProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CONDITION_ID = "conditionId";
  @SerializedName(SERIALIZED_NAME_CONDITION_ID)
  private String conditionId;

  public static final String SERIALIZED_NAME_CURRENT_BID_PRICE = "currentBidPrice";
  @SerializedName(SERIALIZED_NAME_CURRENT_BID_PRICE)
  private ConvertedAmount currentBidPrice;

  public static final String SERIALIZED_NAME_DISTANCE_FROM_PICKUP_LOCATION = "distanceFromPickupLocation";
  @SerializedName(SERIALIZED_NAME_DISTANCE_FROM_PICKUP_LOCATION)
  private TargetLocation distanceFromPickupLocation;

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENCY_CLASS = "energyEfficiencyClass";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENCY_CLASS)
  private String energyEfficiencyClass;

  public static final String SERIALIZED_NAME_EPID = "epid";
  @SerializedName(SERIALIZED_NAME_EPID)
  private String epid;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_ITEM_AFFILIATE_WEB_URL = "itemAffiliateWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_AFFILIATE_WEB_URL)
  private String itemAffiliateWebUrl;

  public static final String SERIALIZED_NAME_ITEM_GROUP_HREF = "itemGroupHref";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_HREF)
  private String itemGroupHref;

  public static final String SERIALIZED_NAME_ITEM_GROUP_TYPE = "itemGroupType";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_TYPE)
  private String itemGroupType;

  public static final String SERIALIZED_NAME_ITEM_HREF = "itemHref";
  @SerializedName(SERIALIZED_NAME_ITEM_HREF)
  private String itemHref;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_LOCATION = "itemLocation";
  @SerializedName(SERIALIZED_NAME_ITEM_LOCATION)
  private ItemLocationImpl itemLocation;

  public static final String SERIALIZED_NAME_ITEM_WEB_URL = "itemWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_WEB_URL)
  private String itemWebUrl;

  public static final String SERIALIZED_NAME_LEGACY_ITEM_ID = "legacyItemId";
  @SerializedName(SERIALIZED_NAME_LEGACY_ITEM_ID)
  private String legacyItemId;

  public static final String SERIALIZED_NAME_MARKETING_PRICE = "marketingPrice";
  @SerializedName(SERIALIZED_NAME_MARKETING_PRICE)
  private MarketingPrice marketingPrice;

  public static final String SERIALIZED_NAME_PICKUP_OPTIONS = "pickupOptions";
  @SerializedName(SERIALIZED_NAME_PICKUP_OPTIONS)
  private List<PickupOptionSummary> pickupOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ConvertedAmount price;

  public static final String SERIALIZED_NAME_PRICE_DISPLAY_CONDITION = "priceDisplayCondition";
  @SerializedName(SERIALIZED_NAME_PRICE_DISPLAY_CONDITION)
  private String priceDisplayCondition;

  public static final String SERIALIZED_NAME_QUALIFIED_PROGRAMS = "qualifiedPrograms";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_PROGRAMS)
  private List<String> qualifiedPrograms = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private Seller seller;

  public static final String SERIALIZED_NAME_SHIPPING_OPTIONS = "shippingOptions";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTIONS)
  private List<ShippingOptionSummary> shippingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_THUMBNAIL_IMAGES = "thumbnailImages";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_IMAGES)
  private List<Image> thumbnailImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private ConvertedAmount unitPrice;

  public static final String SERIALIZED_NAME_UNIT_PRICING_MEASURE = "unitPricingMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICING_MEASURE)
  private String unitPricingMeasure;

  public ItemSummary() {
  }

  public ItemSummary additionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
    return this;
  }

  public ItemSummary addAdditionalImagesItem(Image additionalImagesItem) {
    if (this.additionalImages == null) {
      this.additionalImages = new ArrayList<>();
    }
    this.additionalImages.add(additionalImagesItem);
    return this;
  }

  /**
   * An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
   * @return additionalImages
   */
  @javax.annotation.Nullable
  public List<Image> getAdditionalImages() {
    return additionalImages;
  }

  public void setAdditionalImages(List<Image> additionalImages) {
    this.additionalImages = additionalImages;
  }


  public ItemSummary adultOnly(Boolean adultOnly) {
    this.adultOnly = adultOnly;
    return this;
  }

  /**
   * This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.
   * @return adultOnly
   */
  @javax.annotation.Nullable
  public Boolean getAdultOnly() {
    return adultOnly;
  }

  public void setAdultOnly(Boolean adultOnly) {
    this.adultOnly = adultOnly;
  }


  public ItemSummary availableCoupons(Boolean availableCoupons) {
    this.availableCoupons = availableCoupons;
    return this;
  }

  /**
   * This boolean attribute indicates if coupons are available for the item.
   * @return availableCoupons
   */
  @javax.annotation.Nullable
  public Boolean getAvailableCoupons() {
    return availableCoupons;
  }

  public void setAvailableCoupons(Boolean availableCoupons) {
    this.availableCoupons = availableCoupons;
  }


  public ItemSummary bidCount(Integer bidCount) {
    this.bidCount = bidCount;
    return this;
  }

  /**
   * This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
   * @return bidCount
   */
  @javax.annotation.Nullable
  public Integer getBidCount() {
    return bidCount;
  }

  public void setBidCount(Integer bidCount) {
    this.bidCount = bidCount;
  }


  public ItemSummary buyingOptions(List<String> buyingOptions) {
    this.buyingOptions = buyingOptions;
    return this;
  }

  public ItemSummary addBuyingOptionsItem(String buyingOptionsItem) {
    if (this.buyingOptions == null) {
      this.buyingOptions = new ArrayList<>();
    }
    this.buyingOptions.add(buyingOptionsItem);
    return this;
  }

  /**
   * A comma separated list of all the purchase options available for the item. Values Returned: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Items where the buyer can send the seller a price they&#39;re willing to pay for the item. The seller can accept, reject, or send a counter offer. For details about Best Offer, see Best Offer. Code so that your app gracefully handles any future changes to this list.
   * @return buyingOptions
   */
  @javax.annotation.Nullable
  public List<String> getBuyingOptions() {
    return buyingOptions;
  }

  public void setBuyingOptions(List<String> buyingOptions) {
    this.buyingOptions = buyingOptions;
  }


  public ItemSummary categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public ItemSummary addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).
   * @return categories
   */
  @javax.annotation.Nullable
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public ItemSummary compatibilityMatch(String compatibilityMatch) {
    this.compatibilityMatch = compatibilityMatch;
    return this;
  }

  /**
   * This indicates how well the item matches the compatibility_filter product attributes. Valid Values: EXACT or POSSIBLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return compatibilityMatch
   */
  @javax.annotation.Nullable
  public String getCompatibilityMatch() {
    return compatibilityMatch;
  }

  public void setCompatibilityMatch(String compatibilityMatch) {
    this.compatibilityMatch = compatibilityMatch;
  }


  public ItemSummary compatibilityProperties(List<CompatibilityProperty> compatibilityProperties) {
    this.compatibilityProperties = compatibilityProperties;
    return this;
  }

  public ItemSummary addCompatibilityPropertiesItem(CompatibilityProperty compatibilityPropertiesItem) {
    if (this.compatibilityProperties == null) {
      this.compatibilityProperties = new ArrayList<>();
    }
    this.compatibilityProperties.add(compatibilityPropertiesItem);
    return this;
  }

  /**
   * This container returns only the product attributes that are compatible with the item. These attributes were specified in the compatibility_filter in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.
   * @return compatibilityProperties
   */
  @javax.annotation.Nullable
  public List<CompatibilityProperty> getCompatibilityProperties() {
    return compatibilityProperties;
  }

  public void setCompatibilityProperties(List<CompatibilityProperty> compatibilityProperties) {
    this.compatibilityProperties = compatibilityProperties;
  }


  public ItemSummary condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of &#39;Certified Refurbished&#39;, but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to &#39;Manufacturer Refurbished&#39;.
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public ItemSummary conditionId(String conditionId) {
    this.conditionId = conditionId;
    return this;
  }

  /**
   * The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of &#39;Certified Refurbished&#39;, but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to &#39;Manufacturer Refurbished&#39;.
   * @return conditionId
   */
  @javax.annotation.Nullable
  public String getConditionId() {
    return conditionId;
  }

  public void setConditionId(String conditionId) {
    this.conditionId = conditionId;
  }


  public ItemSummary currentBidPrice(ConvertedAmount currentBidPrice) {
    this.currentBidPrice = currentBidPrice;
    return this;
  }

  /**
   * Get currentBidPrice
   * @return currentBidPrice
   */
  @javax.annotation.Nullable
  public ConvertedAmount getCurrentBidPrice() {
    return currentBidPrice;
  }

  public void setCurrentBidPrice(ConvertedAmount currentBidPrice) {
    this.currentBidPrice = currentBidPrice;
  }


  public ItemSummary distanceFromPickupLocation(TargetLocation distanceFromPickupLocation) {
    this.distanceFromPickupLocation = distanceFromPickupLocation;
    return this;
  }

  /**
   * Get distanceFromPickupLocation
   * @return distanceFromPickupLocation
   */
  @javax.annotation.Nullable
  public TargetLocation getDistanceFromPickupLocation() {
    return distanceFromPickupLocation;
  }

  public void setDistanceFromPickupLocation(TargetLocation distanceFromPickupLocation) {
    this.distanceFromPickupLocation = distanceFromPickupLocation;
  }


  public ItemSummary energyEfficiencyClass(String energyEfficiencyClass) {
    this.energyEfficiencyClass = energyEfficiencyClass;
    return this;
  }

  /**
   * This indicates the European energy efficiency rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.
   * @return energyEfficiencyClass
   */
  @javax.annotation.Nullable
  public String getEnergyEfficiencyClass() {
    return energyEfficiencyClass;
  }

  public void setEnergyEfficiencyClass(String energyEfficiencyClass) {
    this.energyEfficiencyClass = energyEfficiencyClass;
  }


  public ItemSummary epid(String epid) {
    this.epid = epid;
    return this;
  }

  /**
   * An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
   * @return epid
   */
  @javax.annotation.Nullable
  public String getEpid() {
    return epid;
  }

  public void setEpid(String epid) {
    this.epid = epid;
  }


  public ItemSummary image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public ItemSummary itemAffiliateWebUrl(String itemAffiliateWebUrl) {
    this.itemAffiliateWebUrl = itemAffiliateWebUrl;
    return this;
  }

  /**
   * The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to receive a commission for your sales, you must use this URL to forward your buyer to the ebay.com site.
   * @return itemAffiliateWebUrl
   */
  @javax.annotation.Nullable
  public String getItemAffiliateWebUrl() {
    return itemAffiliateWebUrl;
  }

  public void setItemAffiliateWebUrl(String itemAffiliateWebUrl) {
    this.itemAffiliateWebUrl = itemAffiliateWebUrl;
  }


  public ItemSummary itemGroupHref(String itemGroupHref) {
    this.itemGroupHref = itemGroupHref;
    return this;
  }

  /**
   * The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.
   * @return itemGroupHref
   */
  @javax.annotation.Nullable
  public String getItemGroupHref() {
    return itemGroupHref;
  }

  public void setItemGroupHref(String itemGroupHref) {
    this.itemGroupHref = itemGroupHref;
  }


  public ItemSummary itemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
    return this;
  }

  /**
   * The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only the SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.
   * @return itemGroupType
   */
  @javax.annotation.Nullable
  public String getItemGroupType() {
    return itemGroupType;
  }

  public void setItemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
  }


  public ItemSummary itemHref(String itemHref) {
    this.itemHref = itemHref;
    return this;
  }

  /**
   * The URI for the Browse API getItem method, which can be used to retrieve more details about items in the search results.
   * @return itemHref
   */
  @javax.annotation.Nullable
  public String getItemHref() {
    return itemHref;
  }

  public void setItemHref(String itemHref) {
    this.itemHref = itemHref;
  }


  public ItemSummary itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The unique RESTful identifier of the item.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public ItemSummary itemLocation(ItemLocationImpl itemLocation) {
    this.itemLocation = itemLocation;
    return this;
  }

  /**
   * Get itemLocation
   * @return itemLocation
   */
  @javax.annotation.Nullable
  public ItemLocationImpl getItemLocation() {
    return itemLocation;
  }

  public void setItemLocation(ItemLocationImpl itemLocation) {
    this.itemLocation = itemLocation;
  }


  public ItemSummary itemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
    return this;
  }

  /**
   * The URL to the View Item page of the item. This enables you to include a &amp;quot;Report Item on eBay&amp;quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
   * @return itemWebUrl
   */
  @javax.annotation.Nullable
  public String getItemWebUrl() {
    return itemWebUrl;
  }

  public void setItemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
  }


  public ItemSummary legacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
    return this;
  }

  /**
   * The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
   * @return legacyItemId
   */
  @javax.annotation.Nullable
  public String getLegacyItemId() {
    return legacyItemId;
  }

  public void setLegacyItemId(String legacyItemId) {
    this.legacyItemId = legacyItemId;
  }


  public ItemSummary marketingPrice(MarketingPrice marketingPrice) {
    this.marketingPrice = marketingPrice;
    return this;
  }

  /**
   * Get marketingPrice
   * @return marketingPrice
   */
  @javax.annotation.Nullable
  public MarketingPrice getMarketingPrice() {
    return marketingPrice;
  }

  public void setMarketingPrice(MarketingPrice marketingPrice) {
    this.marketingPrice = marketingPrice;
  }


  public ItemSummary pickupOptions(List<PickupOptionSummary> pickupOptions) {
    this.pickupOptions = pickupOptions;
    return this;
  }

  public ItemSummary addPickupOptionsItem(PickupOptionSummary pickupOptionsItem) {
    if (this.pickupOptions == null) {
      this.pickupOptions = new ArrayList<>();
    }
    this.pickupOptions.add(pickupOptionsItem);
    return this;
  }

  /**
   * This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.
   * @return pickupOptions
   */
  @javax.annotation.Nullable
  public List<PickupOptionSummary> getPickupOptions() {
    return pickupOptions;
  }

  public void setPickupOptions(List<PickupOptionSummary> pickupOptions) {
    this.pickupOptions = pickupOptions;
  }


  public ItemSummary price(ConvertedAmount price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ConvertedAmount getPrice() {
    return price;
  }

  public void setPrice(ConvertedAmount price) {
    this.price = price;
  }


  public ItemSummary priceDisplayCondition(String priceDisplayCondition) {
    this.priceDisplayCondition = priceDisplayCondition;
    return this;
  }

  /**
   * Indicates when in the buying flow the item&#39;s price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return priceDisplayCondition
   */
  @javax.annotation.Nullable
  public String getPriceDisplayCondition() {
    return priceDisplayCondition;
  }

  public void setPriceDisplayCondition(String priceDisplayCondition) {
    this.priceDisplayCondition = priceDisplayCondition;
  }


  public ItemSummary qualifiedPrograms(List<String> qualifiedPrograms) {
    this.qualifiedPrograms = qualifiedPrograms;
    return this;
  }

  public ItemSummary addQualifiedProgramsItem(String qualifiedProgramsItem) {
    if (this.qualifiedPrograms == null) {
      this.qualifiedPrograms = new ArrayList<>();
    }
    this.qualifiedPrograms.add(qualifiedProgramsItem);
    return this;
  }

  /**
   * An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.
   * @return qualifiedPrograms
   */
  @javax.annotation.Nullable
  public List<String> getQualifiedPrograms() {
    return qualifiedPrograms;
  }

  public void setQualifiedPrograms(List<String> qualifiedPrograms) {
    this.qualifiedPrograms = qualifiedPrograms;
  }


  public ItemSummary seller(Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(Seller seller) {
    this.seller = seller;
  }


  public ItemSummary shippingOptions(List<ShippingOptionSummary> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public ItemSummary addShippingOptionsItem(ShippingOptionSummary shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

  /**
   * This container returns the shipping options available to ship the item.
   * @return shippingOptions
   */
  @javax.annotation.Nullable
  public List<ShippingOptionSummary> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<ShippingOptionSummary> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }


  public ItemSummary shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn&#39;t give enough information but the description is too big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &amp;quot; title&amp;quot;: &amp;quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&amp;quot;, &amp;quot;shortDescription&amp;quot;: &amp;quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&amp;quot;, Restriction: This field is returned by the search method only when fieldgroups &#x3D; EXTENDED.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public ItemSummary thumbnailImages(List<Image> thumbnailImages) {
    this.thumbnailImages = thumbnailImages;
    return this;
  }

  public ItemSummary addThumbnailImagesItem(Image thumbnailImagesItem) {
    if (this.thumbnailImages == null) {
      this.thumbnailImages = new ArrayList<>();
    }
    this.thumbnailImages.add(thumbnailImagesItem);
    return this;
  }

  /**
   * An array of thumbnail images for the item.
   * @return thumbnailImages
   */
  @javax.annotation.Nullable
  public List<Image> getThumbnailImages() {
    return thumbnailImages;
  }

  public void setThumbnailImages(List<Image> thumbnailImages) {
    this.thumbnailImages = thumbnailImages;
  }


  public ItemSummary title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The seller-created title of the item. Maximum Length: 80 characters
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ItemSummary unitPrice(ConvertedAmount unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public ConvertedAmount getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(ConvertedAmount unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ItemSummary unitPricingMeasure(String unitPricingMeasure) {
    this.unitPricingMeasure = unitPricingMeasure;
    return this;
  }

  /**
   * The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &amp;quot;unitPricingMeasure&amp;quot;: &amp;quot;100g&amp;quot;, &amp;quot;unitPrice&amp;quot;: { &amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot;: &amp;quot;7.99&amp;quot;, &amp;nbsp;&amp;nbsp;&amp;quot;currency&amp;quot;: &amp;quot;GBP&amp;quot;
   * @return unitPricingMeasure
   */
  @javax.annotation.Nullable
  public String getUnitPricingMeasure() {
    return unitPricingMeasure;
  }

  public void setUnitPricingMeasure(String unitPricingMeasure) {
    this.unitPricingMeasure = unitPricingMeasure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemSummary itemSummary = (ItemSummary) o;
    return Objects.equals(this.additionalImages, itemSummary.additionalImages) &&
        Objects.equals(this.adultOnly, itemSummary.adultOnly) &&
        Objects.equals(this.availableCoupons, itemSummary.availableCoupons) &&
        Objects.equals(this.bidCount, itemSummary.bidCount) &&
        Objects.equals(this.buyingOptions, itemSummary.buyingOptions) &&
        Objects.equals(this.categories, itemSummary.categories) &&
        Objects.equals(this.compatibilityMatch, itemSummary.compatibilityMatch) &&
        Objects.equals(this.compatibilityProperties, itemSummary.compatibilityProperties) &&
        Objects.equals(this.condition, itemSummary.condition) &&
        Objects.equals(this.conditionId, itemSummary.conditionId) &&
        Objects.equals(this.currentBidPrice, itemSummary.currentBidPrice) &&
        Objects.equals(this.distanceFromPickupLocation, itemSummary.distanceFromPickupLocation) &&
        Objects.equals(this.energyEfficiencyClass, itemSummary.energyEfficiencyClass) &&
        Objects.equals(this.epid, itemSummary.epid) &&
        Objects.equals(this.image, itemSummary.image) &&
        Objects.equals(this.itemAffiliateWebUrl, itemSummary.itemAffiliateWebUrl) &&
        Objects.equals(this.itemGroupHref, itemSummary.itemGroupHref) &&
        Objects.equals(this.itemGroupType, itemSummary.itemGroupType) &&
        Objects.equals(this.itemHref, itemSummary.itemHref) &&
        Objects.equals(this.itemId, itemSummary.itemId) &&
        Objects.equals(this.itemLocation, itemSummary.itemLocation) &&
        Objects.equals(this.itemWebUrl, itemSummary.itemWebUrl) &&
        Objects.equals(this.legacyItemId, itemSummary.legacyItemId) &&
        Objects.equals(this.marketingPrice, itemSummary.marketingPrice) &&
        Objects.equals(this.pickupOptions, itemSummary.pickupOptions) &&
        Objects.equals(this.price, itemSummary.price) &&
        Objects.equals(this.priceDisplayCondition, itemSummary.priceDisplayCondition) &&
        Objects.equals(this.qualifiedPrograms, itemSummary.qualifiedPrograms) &&
        Objects.equals(this.seller, itemSummary.seller) &&
        Objects.equals(this.shippingOptions, itemSummary.shippingOptions) &&
        Objects.equals(this.shortDescription, itemSummary.shortDescription) &&
        Objects.equals(this.thumbnailImages, itemSummary.thumbnailImages) &&
        Objects.equals(this.title, itemSummary.title) &&
        Objects.equals(this.unitPrice, itemSummary.unitPrice) &&
        Objects.equals(this.unitPricingMeasure, itemSummary.unitPricingMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalImages, adultOnly, availableCoupons, bidCount, buyingOptions, categories, compatibilityMatch, compatibilityProperties, condition, conditionId, currentBidPrice, distanceFromPickupLocation, energyEfficiencyClass, epid, image, itemAffiliateWebUrl, itemGroupHref, itemGroupType, itemHref, itemId, itemLocation, itemWebUrl, legacyItemId, marketingPrice, pickupOptions, price, priceDisplayCondition, qualifiedPrograms, seller, shippingOptions, shortDescription, thumbnailImages, title, unitPrice, unitPricingMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemSummary {\n");
    sb.append("    additionalImages: ").append(toIndentedString(additionalImages)).append("\n");
    sb.append("    adultOnly: ").append(toIndentedString(adultOnly)).append("\n");
    sb.append("    availableCoupons: ").append(toIndentedString(availableCoupons)).append("\n");
    sb.append("    bidCount: ").append(toIndentedString(bidCount)).append("\n");
    sb.append("    buyingOptions: ").append(toIndentedString(buyingOptions)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    compatibilityMatch: ").append(toIndentedString(compatibilityMatch)).append("\n");
    sb.append("    compatibilityProperties: ").append(toIndentedString(compatibilityProperties)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    conditionId: ").append(toIndentedString(conditionId)).append("\n");
    sb.append("    currentBidPrice: ").append(toIndentedString(currentBidPrice)).append("\n");
    sb.append("    distanceFromPickupLocation: ").append(toIndentedString(distanceFromPickupLocation)).append("\n");
    sb.append("    energyEfficiencyClass: ").append(toIndentedString(energyEfficiencyClass)).append("\n");
    sb.append("    epid: ").append(toIndentedString(epid)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    itemAffiliateWebUrl: ").append(toIndentedString(itemAffiliateWebUrl)).append("\n");
    sb.append("    itemGroupHref: ").append(toIndentedString(itemGroupHref)).append("\n");
    sb.append("    itemGroupType: ").append(toIndentedString(itemGroupType)).append("\n");
    sb.append("    itemHref: ").append(toIndentedString(itemHref)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemLocation: ").append(toIndentedString(itemLocation)).append("\n");
    sb.append("    itemWebUrl: ").append(toIndentedString(itemWebUrl)).append("\n");
    sb.append("    legacyItemId: ").append(toIndentedString(legacyItemId)).append("\n");
    sb.append("    marketingPrice: ").append(toIndentedString(marketingPrice)).append("\n");
    sb.append("    pickupOptions: ").append(toIndentedString(pickupOptions)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceDisplayCondition: ").append(toIndentedString(priceDisplayCondition)).append("\n");
    sb.append("    qualifiedPrograms: ").append(toIndentedString(qualifiedPrograms)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    thumbnailImages: ").append(toIndentedString(thumbnailImages)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    unitPricingMeasure: ").append(toIndentedString(unitPricingMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalImages");
    openapiFields.add("adultOnly");
    openapiFields.add("availableCoupons");
    openapiFields.add("bidCount");
    openapiFields.add("buyingOptions");
    openapiFields.add("categories");
    openapiFields.add("compatibilityMatch");
    openapiFields.add("compatibilityProperties");
    openapiFields.add("condition");
    openapiFields.add("conditionId");
    openapiFields.add("currentBidPrice");
    openapiFields.add("distanceFromPickupLocation");
    openapiFields.add("energyEfficiencyClass");
    openapiFields.add("epid");
    openapiFields.add("image");
    openapiFields.add("itemAffiliateWebUrl");
    openapiFields.add("itemGroupHref");
    openapiFields.add("itemGroupType");
    openapiFields.add("itemHref");
    openapiFields.add("itemId");
    openapiFields.add("itemLocation");
    openapiFields.add("itemWebUrl");
    openapiFields.add("legacyItemId");
    openapiFields.add("marketingPrice");
    openapiFields.add("pickupOptions");
    openapiFields.add("price");
    openapiFields.add("priceDisplayCondition");
    openapiFields.add("qualifiedPrograms");
    openapiFields.add("seller");
    openapiFields.add("shippingOptions");
    openapiFields.add("shortDescription");
    openapiFields.add("thumbnailImages");
    openapiFields.add("title");
    openapiFields.add("unitPrice");
    openapiFields.add("unitPricingMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemSummary is not found in the empty JSON string", ItemSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalImages") != null && !jsonObj.get("additionalImages").isJsonNull()) {
        JsonArray jsonArrayadditionalImages = jsonObj.getAsJsonArray("additionalImages");
        if (jsonArrayadditionalImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalImages` to be an array in the JSON string but got `%s`", jsonObj.get("additionalImages").toString()));
          }

          // validate the optional field `additionalImages` (array)
          for (int i = 0; i < jsonArrayadditionalImages.size(); i++) {
            Image.validateJsonElement(jsonArrayadditionalImages.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buyingOptions") != null && !jsonObj.get("buyingOptions").isJsonNull() && !jsonObj.get("buyingOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("buyingOptions").toString()));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            Category.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      if ((jsonObj.get("compatibilityMatch") != null && !jsonObj.get("compatibilityMatch").isJsonNull()) && !jsonObj.get("compatibilityMatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibilityMatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibilityMatch").toString()));
      }
      if (jsonObj.get("compatibilityProperties") != null && !jsonObj.get("compatibilityProperties").isJsonNull()) {
        JsonArray jsonArraycompatibilityProperties = jsonObj.getAsJsonArray("compatibilityProperties");
        if (jsonArraycompatibilityProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compatibilityProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compatibilityProperties` to be an array in the JSON string but got `%s`", jsonObj.get("compatibilityProperties").toString()));
          }

          // validate the optional field `compatibilityProperties` (array)
          for (int i = 0; i < jsonArraycompatibilityProperties.size(); i++) {
            CompatibilityProperty.validateJsonElement(jsonArraycompatibilityProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("conditionId") != null && !jsonObj.get("conditionId").isJsonNull()) && !jsonObj.get("conditionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditionId").toString()));
      }
      // validate the optional field `currentBidPrice`
      if (jsonObj.get("currentBidPrice") != null && !jsonObj.get("currentBidPrice").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("currentBidPrice"));
      }
      // validate the optional field `distanceFromPickupLocation`
      if (jsonObj.get("distanceFromPickupLocation") != null && !jsonObj.get("distanceFromPickupLocation").isJsonNull()) {
        TargetLocation.validateJsonElement(jsonObj.get("distanceFromPickupLocation"));
      }
      if ((jsonObj.get("energyEfficiencyClass") != null && !jsonObj.get("energyEfficiencyClass").isJsonNull()) && !jsonObj.get("energyEfficiencyClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyEfficiencyClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyEfficiencyClass").toString()));
      }
      if ((jsonObj.get("epid") != null && !jsonObj.get("epid").isJsonNull()) && !jsonObj.get("epid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epid").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("itemAffiliateWebUrl") != null && !jsonObj.get("itemAffiliateWebUrl").isJsonNull()) && !jsonObj.get("itemAffiliateWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemAffiliateWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemAffiliateWebUrl").toString()));
      }
      if ((jsonObj.get("itemGroupHref") != null && !jsonObj.get("itemGroupHref").isJsonNull()) && !jsonObj.get("itemGroupHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupHref").toString()));
      }
      if ((jsonObj.get("itemGroupType") != null && !jsonObj.get("itemGroupType").isJsonNull()) && !jsonObj.get("itemGroupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupType").toString()));
      }
      if ((jsonObj.get("itemHref") != null && !jsonObj.get("itemHref").isJsonNull()) && !jsonObj.get("itemHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemHref").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // validate the optional field `itemLocation`
      if (jsonObj.get("itemLocation") != null && !jsonObj.get("itemLocation").isJsonNull()) {
        ItemLocationImpl.validateJsonElement(jsonObj.get("itemLocation"));
      }
      if ((jsonObj.get("itemWebUrl") != null && !jsonObj.get("itemWebUrl").isJsonNull()) && !jsonObj.get("itemWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemWebUrl").toString()));
      }
      if ((jsonObj.get("legacyItemId") != null && !jsonObj.get("legacyItemId").isJsonNull()) && !jsonObj.get("legacyItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyItemId").toString()));
      }
      // validate the optional field `marketingPrice`
      if (jsonObj.get("marketingPrice") != null && !jsonObj.get("marketingPrice").isJsonNull()) {
        MarketingPrice.validateJsonElement(jsonObj.get("marketingPrice"));
      }
      if (jsonObj.get("pickupOptions") != null && !jsonObj.get("pickupOptions").isJsonNull()) {
        JsonArray jsonArraypickupOptions = jsonObj.getAsJsonArray("pickupOptions");
        if (jsonArraypickupOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pickupOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickupOptions` to be an array in the JSON string but got `%s`", jsonObj.get("pickupOptions").toString()));
          }

          // validate the optional field `pickupOptions` (array)
          for (int i = 0; i < jsonArraypickupOptions.size(); i++) {
            PickupOptionSummary.validateJsonElement(jsonArraypickupOptions.get(i));
          };
        }
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("priceDisplayCondition") != null && !jsonObj.get("priceDisplayCondition").isJsonNull()) && !jsonObj.get("priceDisplayCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceDisplayCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceDisplayCondition").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qualifiedPrograms") != null && !jsonObj.get("qualifiedPrograms").isJsonNull() && !jsonObj.get("qualifiedPrograms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifiedPrograms` to be an array in the JSON string but got `%s`", jsonObj.get("qualifiedPrograms").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      if (jsonObj.get("shippingOptions") != null && !jsonObj.get("shippingOptions").isJsonNull()) {
        JsonArray jsonArrayshippingOptions = jsonObj.getAsJsonArray("shippingOptions");
        if (jsonArrayshippingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("shippingOptions").toString()));
          }

          // validate the optional field `shippingOptions` (array)
          for (int i = 0; i < jsonArrayshippingOptions.size(); i++) {
            ShippingOptionSummary.validateJsonElement(jsonArrayshippingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
      if (jsonObj.get("thumbnailImages") != null && !jsonObj.get("thumbnailImages").isJsonNull()) {
        JsonArray jsonArraythumbnailImages = jsonObj.getAsJsonArray("thumbnailImages");
        if (jsonArraythumbnailImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thumbnailImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thumbnailImages` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnailImages").toString()));
          }

          // validate the optional field `thumbnailImages` (array)
          for (int i = 0; i < jsonArraythumbnailImages.size(); i++) {
            Image.validateJsonElement(jsonArraythumbnailImages.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `unitPrice`
      if (jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull()) {
        ConvertedAmount.validateJsonElement(jsonObj.get("unitPrice"));
      }
      if ((jsonObj.get("unitPricingMeasure") != null && !jsonObj.get("unitPricingMeasure").isJsonNull()) && !jsonObj.get("unitPricingMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitPricingMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitPricingMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemSummary>() {
           @Override
           public void write(JsonWriter out, ItemSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemSummary
   * @throws IOException if the JSON string is invalid with respect to ItemSummary
   */
  public static ItemSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemSummary.class);
  }

  /**
   * Convert an instance of ItemSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

