/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the individual items in a cart.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CartItem {
  public static final String SERIALIZED_NAME_CART_ITEM_ID = "cartItemId";
  @SerializedName(SERIALIZED_NAME_CART_ITEM_ID)
  private String cartItemId;

  public static final String SERIALIZED_NAME_CART_ITEM_SUBTOTAL = "cartItemSubtotal";
  @SerializedName(SERIALIZED_NAME_CART_ITEM_SUBTOTAL)
  private Amount cartItemSubtotal;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_WEB_URL = "itemWebUrl";
  @SerializedName(SERIALIZED_NAME_ITEM_WEB_URL)
  private String itemWebUrl;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public CartItem() {
  }

  public CartItem cartItemId(String cartItemId) {
    this.cartItemId = cartItemId;
    return this;
  }

  /**
   * The identifier for the item being added to the cart. This is generated when the item is added to the cart.
   * @return cartItemId
   */
  @javax.annotation.Nullable
  public String getCartItemId() {
    return cartItemId;
  }

  public void setCartItemId(String cartItemId) {
    this.cartItemId = cartItemId;
  }


  public CartItem cartItemSubtotal(Amount cartItemSubtotal) {
    this.cartItemSubtotal = cartItemSubtotal;
    return this;
  }

  /**
   * Get cartItemSubtotal
   * @return cartItemSubtotal
   */
  @javax.annotation.Nullable
  public Amount getCartItemSubtotal() {
    return cartItemSubtotal;
  }

  public void setCartItemSubtotal(Amount cartItemSubtotal) {
    this.cartItemSubtotal = cartItemSubtotal;
  }


  public CartItem image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public CartItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The RESTful identifier of the item. This identifier is generated when the item was listed. RESTful Item ID Format: v1|#|# For example: v1|272394640372|0 v1|162846450672|461882996982
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public CartItem itemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
    return this;
  }

  /**
   * The URL of the eBay view item page for the item.
   * @return itemWebUrl
   */
  @javax.annotation.Nullable
  public String getItemWebUrl() {
    return itemWebUrl;
  }

  public void setItemWebUrl(String itemWebUrl) {
    this.itemWebUrl = itemWebUrl;
  }


  public CartItem price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public CartItem quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of this item the buyer wants to purchase.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public CartItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the item. This can be written by the seller or come from the eBay product catalog.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartItem cartItem = (CartItem) o;
    return Objects.equals(this.cartItemId, cartItem.cartItemId) &&
        Objects.equals(this.cartItemSubtotal, cartItem.cartItemSubtotal) &&
        Objects.equals(this.image, cartItem.image) &&
        Objects.equals(this.itemId, cartItem.itemId) &&
        Objects.equals(this.itemWebUrl, cartItem.itemWebUrl) &&
        Objects.equals(this.price, cartItem.price) &&
        Objects.equals(this.quantity, cartItem.quantity) &&
        Objects.equals(this.title, cartItem.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cartItemId, cartItemSubtotal, image, itemId, itemWebUrl, price, quantity, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartItem {\n");
    sb.append("    cartItemId: ").append(toIndentedString(cartItemId)).append("\n");
    sb.append("    cartItemSubtotal: ").append(toIndentedString(cartItemSubtotal)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemWebUrl: ").append(toIndentedString(itemWebUrl)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cartItemId");
    openapiFields.add("cartItemSubtotal");
    openapiFields.add("image");
    openapiFields.add("itemId");
    openapiFields.add("itemWebUrl");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CartItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartItem is not found in the empty JSON string", CartItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cartItemId") != null && !jsonObj.get("cartItemId").isJsonNull()) && !jsonObj.get("cartItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartItemId").toString()));
      }
      // validate the optional field `cartItemSubtotal`
      if (jsonObj.get("cartItemSubtotal") != null && !jsonObj.get("cartItemSubtotal").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("cartItemSubtotal"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("itemWebUrl") != null && !jsonObj.get("itemWebUrl").isJsonNull()) && !jsonObj.get("itemWebUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemWebUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemWebUrl").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CartItem>() {
           @Override
           public void write(JsonWriter out, CartItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CartItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CartItem
   * @throws IOException if the JSON string is invalid with respect to CartItem
   */
  public static CartItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartItem.class);
  }

  /**
   * Convert an instance of CartItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

