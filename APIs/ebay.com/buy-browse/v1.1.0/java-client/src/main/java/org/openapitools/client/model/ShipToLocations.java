/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ShipToRegion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields that include and exclude geographic regions affecting where the item can be shipped. The seller defines these regions when listing the item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShipToLocations {
  public static final String SERIALIZED_NAME_REGION_EXCLUDED = "regionExcluded";
  @SerializedName(SERIALIZED_NAME_REGION_EXCLUDED)
  private List<ShipToRegion> regionExcluded = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION_INCLUDED = "regionIncluded";
  @SerializedName(SERIALIZED_NAME_REGION_INCLUDED)
  private List<ShipToRegion> regionIncluded = new ArrayList<>();

  public ShipToLocations() {
  }

  public ShipToLocations regionExcluded(List<ShipToRegion> regionExcluded) {
    this.regionExcluded = regionExcluded;
    return this;
  }

  public ShipToLocations addRegionExcludedItem(ShipToRegion regionExcludedItem) {
    if (this.regionExcluded == null) {
      this.regionExcluded = new ArrayList<>();
    }
    this.regionExcluded.add(regionExcludedItem);
    return this;
  }

  /**
   * An array of containers that express the large geographical regions, countries, state/provinces, or special locations within a country where the seller is not willing to ship to.
   * @return regionExcluded
   */
  @javax.annotation.Nullable
  public List<ShipToRegion> getRegionExcluded() {
    return regionExcluded;
  }

  public void setRegionExcluded(List<ShipToRegion> regionExcluded) {
    this.regionExcluded = regionExcluded;
  }


  public ShipToLocations regionIncluded(List<ShipToRegion> regionIncluded) {
    this.regionIncluded = regionIncluded;
    return this;
  }

  public ShipToLocations addRegionIncludedItem(ShipToRegion regionIncludedItem) {
    if (this.regionIncluded == null) {
      this.regionIncluded = new ArrayList<>();
    }
    this.regionIncluded.add(regionIncludedItem);
    return this;
  }

  /**
   * An array of containers that express the large geographical regions, countries, or state/provinces within a country where the seller is willing to ship to. Prospective buyers must look at the shipping regions under this container, as well as the shipping regions that are under the regionExcluded to see where the seller is willing to ship items. Sellers can specify that they ship &#39;Worldwide&#39;, but then add several large geographical regions (e.g. Asia, Oceania, Middle East) to the exclusion list, or sellers can specify that they ship to Europe and Africa, but then add several individual countries to the exclusion list.
   * @return regionIncluded
   */
  @javax.annotation.Nullable
  public List<ShipToRegion> getRegionIncluded() {
    return regionIncluded;
  }

  public void setRegionIncluded(List<ShipToRegion> regionIncluded) {
    this.regionIncluded = regionIncluded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipToLocations shipToLocations = (ShipToLocations) o;
    return Objects.equals(this.regionExcluded, shipToLocations.regionExcluded) &&
        Objects.equals(this.regionIncluded, shipToLocations.regionIncluded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regionExcluded, regionIncluded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipToLocations {\n");
    sb.append("    regionExcluded: ").append(toIndentedString(regionExcluded)).append("\n");
    sb.append("    regionIncluded: ").append(toIndentedString(regionIncluded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("regionExcluded");
    openapiFields.add("regionIncluded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShipToLocations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShipToLocations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipToLocations is not found in the empty JSON string", ShipToLocations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShipToLocations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipToLocations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("regionExcluded") != null && !jsonObj.get("regionExcluded").isJsonNull()) {
        JsonArray jsonArrayregionExcluded = jsonObj.getAsJsonArray("regionExcluded");
        if (jsonArrayregionExcluded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regionExcluded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regionExcluded` to be an array in the JSON string but got `%s`", jsonObj.get("regionExcluded").toString()));
          }

          // validate the optional field `regionExcluded` (array)
          for (int i = 0; i < jsonArrayregionExcluded.size(); i++) {
            ShipToRegion.validateJsonElement(jsonArrayregionExcluded.get(i));
          };
        }
      }
      if (jsonObj.get("regionIncluded") != null && !jsonObj.get("regionIncluded").isJsonNull()) {
        JsonArray jsonArrayregionIncluded = jsonObj.getAsJsonArray("regionIncluded");
        if (jsonArrayregionIncluded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regionIncluded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regionIncluded` to be an array in the JSON string but got `%s`", jsonObj.get("regionIncluded").toString()));
          }

          // validate the optional field `regionIncluded` (array)
          for (int i = 0; i < jsonArrayregionIncluded.size(); i++) {
            ShipToRegion.validateJsonElement(jsonArrayregionIncluded.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipToLocations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipToLocations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipToLocations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipToLocations.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipToLocations>() {
           @Override
           public void write(JsonWriter out, ShipToLocations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipToLocations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShipToLocations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShipToLocations
   * @throws IOException if the JSON string is invalid with respect to ShipToLocations
   */
  public static ShipToLocations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipToLocations.class);
  }

  /**
   * Convert an instance of ShipToLocations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

