/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Image;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the \&quot;parent\&quot;. All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. &lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt; Note: &lt;/b&gt; This container is returned only if the &lt;b&gt; item_id&lt;/b&gt; in the request is an item group (parent ID of an item with variations).&lt;/span&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemGroupSummary {
  public static final String SERIALIZED_NAME_ITEM_GROUP_ADDITIONAL_IMAGES = "itemGroupAdditionalImages";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ADDITIONAL_IMAGES)
  private List<Image> itemGroupAdditionalImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_GROUP_HREF = "itemGroupHref";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_HREF)
  private String itemGroupHref;

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID = "itemGroupId";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID)
  private String itemGroupId;

  public static final String SERIALIZED_NAME_ITEM_GROUP_IMAGE = "itemGroupImage";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_IMAGE)
  private Image itemGroupImage;

  public static final String SERIALIZED_NAME_ITEM_GROUP_TITLE = "itemGroupTitle";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_TITLE)
  private String itemGroupTitle;

  public static final String SERIALIZED_NAME_ITEM_GROUP_TYPE = "itemGroupType";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_TYPE)
  private String itemGroupType;

  public ItemGroupSummary() {
  }

  public ItemGroupSummary itemGroupAdditionalImages(List<Image> itemGroupAdditionalImages) {
    this.itemGroupAdditionalImages = itemGroupAdditionalImages;
    return this;
  }

  public ItemGroupSummary addItemGroupAdditionalImagesItem(Image itemGroupAdditionalImagesItem) {
    if (this.itemGroupAdditionalImages == null) {
      this.itemGroupAdditionalImages = new ArrayList<>();
    }
    this.itemGroupAdditionalImages.add(itemGroupAdditionalImagesItem);
    return this;
  }

  /**
   * An array of containers with the URLs for images that are in addition to the primary image of the item group. The primary image is returned in the itemGroupImage field.
   * @return itemGroupAdditionalImages
   */
  @javax.annotation.Nullable
  public List<Image> getItemGroupAdditionalImages() {
    return itemGroupAdditionalImages;
  }

  public void setItemGroupAdditionalImages(List<Image> itemGroupAdditionalImages) {
    this.itemGroupAdditionalImages = itemGroupAdditionalImages;
  }


  public ItemGroupSummary itemGroupHref(String itemGroupHref) {
    this.itemGroupHref = itemGroupHref;
    return this;
  }

  /**
   * The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
   * @return itemGroupHref
   */
  @javax.annotation.Nullable
  public String getItemGroupHref() {
    return itemGroupHref;
  }

  public void setItemGroupHref(String itemGroupHref) {
    this.itemGroupHref = itemGroupHref;
  }


  public ItemGroupSummary itemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
    return this;
  }

  /**
   * The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
   * @return itemGroupId
   */
  @javax.annotation.Nullable
  public String getItemGroupId() {
    return itemGroupId;
  }

  public void setItemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
  }


  public ItemGroupSummary itemGroupImage(Image itemGroupImage) {
    this.itemGroupImage = itemGroupImage;
    return this;
  }

  /**
   * Get itemGroupImage
   * @return itemGroupImage
   */
  @javax.annotation.Nullable
  public Image getItemGroupImage() {
    return itemGroupImage;
  }

  public void setItemGroupImage(Image itemGroupImage) {
    this.itemGroupImage = itemGroupImage;
  }


  public ItemGroupSummary itemGroupTitle(String itemGroupTitle) {
    this.itemGroupTitle = itemGroupTitle;
    return this;
  }

  /**
   * The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
   * @return itemGroupTitle
   */
  @javax.annotation.Nullable
  public String getItemGroupTitle() {
    return itemGroupTitle;
  }

  public void setItemGroupTitle(String itemGroupTitle) {
    this.itemGroupTitle = itemGroupTitle;
  }


  public ItemGroupSummary itemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
    return this;
  }

  /**
   * An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:ItemGroupTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return itemGroupType
   */
  @javax.annotation.Nullable
  public String getItemGroupType() {
    return itemGroupType;
  }

  public void setItemGroupType(String itemGroupType) {
    this.itemGroupType = itemGroupType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemGroupSummary itemGroupSummary = (ItemGroupSummary) o;
    return Objects.equals(this.itemGroupAdditionalImages, itemGroupSummary.itemGroupAdditionalImages) &&
        Objects.equals(this.itemGroupHref, itemGroupSummary.itemGroupHref) &&
        Objects.equals(this.itemGroupId, itemGroupSummary.itemGroupId) &&
        Objects.equals(this.itemGroupImage, itemGroupSummary.itemGroupImage) &&
        Objects.equals(this.itemGroupTitle, itemGroupSummary.itemGroupTitle) &&
        Objects.equals(this.itemGroupType, itemGroupSummary.itemGroupType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemGroupAdditionalImages, itemGroupHref, itemGroupId, itemGroupImage, itemGroupTitle, itemGroupType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemGroupSummary {\n");
    sb.append("    itemGroupAdditionalImages: ").append(toIndentedString(itemGroupAdditionalImages)).append("\n");
    sb.append("    itemGroupHref: ").append(toIndentedString(itemGroupHref)).append("\n");
    sb.append("    itemGroupId: ").append(toIndentedString(itemGroupId)).append("\n");
    sb.append("    itemGroupImage: ").append(toIndentedString(itemGroupImage)).append("\n");
    sb.append("    itemGroupTitle: ").append(toIndentedString(itemGroupTitle)).append("\n");
    sb.append("    itemGroupType: ").append(toIndentedString(itemGroupType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemGroupAdditionalImages");
    openapiFields.add("itemGroupHref");
    openapiFields.add("itemGroupId");
    openapiFields.add("itemGroupImage");
    openapiFields.add("itemGroupTitle");
    openapiFields.add("itemGroupType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemGroupSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemGroupSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemGroupSummary is not found in the empty JSON string", ItemGroupSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemGroupSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemGroupSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("itemGroupAdditionalImages") != null && !jsonObj.get("itemGroupAdditionalImages").isJsonNull()) {
        JsonArray jsonArrayitemGroupAdditionalImages = jsonObj.getAsJsonArray("itemGroupAdditionalImages");
        if (jsonArrayitemGroupAdditionalImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemGroupAdditionalImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemGroupAdditionalImages` to be an array in the JSON string but got `%s`", jsonObj.get("itemGroupAdditionalImages").toString()));
          }

          // validate the optional field `itemGroupAdditionalImages` (array)
          for (int i = 0; i < jsonArrayitemGroupAdditionalImages.size(); i++) {
            Image.validateJsonElement(jsonArrayitemGroupAdditionalImages.get(i));
          };
        }
      }
      if ((jsonObj.get("itemGroupHref") != null && !jsonObj.get("itemGroupHref").isJsonNull()) && !jsonObj.get("itemGroupHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupHref").toString()));
      }
      if ((jsonObj.get("itemGroupId") != null && !jsonObj.get("itemGroupId").isJsonNull()) && !jsonObj.get("itemGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupId").toString()));
      }
      // validate the optional field `itemGroupImage`
      if (jsonObj.get("itemGroupImage") != null && !jsonObj.get("itemGroupImage").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("itemGroupImage"));
      }
      if ((jsonObj.get("itemGroupTitle") != null && !jsonObj.get("itemGroupTitle").isJsonNull()) && !jsonObj.get("itemGroupTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupTitle").toString()));
      }
      if ((jsonObj.get("itemGroupType") != null && !jsonObj.get("itemGroupType").isJsonNull()) && !jsonObj.get("itemGroupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemGroupSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemGroupSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemGroupSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemGroupSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemGroupSummary>() {
           @Override
           public void write(JsonWriter out, ItemGroupSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemGroupSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemGroupSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemGroupSummary
   * @throws IOException if the JSON string is invalid with respect to ItemGroupSummary
   */
  public static ItemGroupSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemGroupSummary.class);
  }

  /**
   * Convert an instance of ItemGroupSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

