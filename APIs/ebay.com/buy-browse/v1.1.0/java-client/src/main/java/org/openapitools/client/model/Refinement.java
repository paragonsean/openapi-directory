/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AspectDistribution;
import org.openapitools.client.model.BuyingOptionDistribution;
import org.openapitools.client.model.CategoryDistribution;
import org.openapitools.client.model.ConditionDistribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Refinement {
  public static final String SERIALIZED_NAME_ASPECT_DISTRIBUTIONS = "aspectDistributions";
  @SerializedName(SERIALIZED_NAME_ASPECT_DISTRIBUTIONS)
  private List<AspectDistribution> aspectDistributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYING_OPTION_DISTRIBUTIONS = "buyingOptionDistributions";
  @SerializedName(SERIALIZED_NAME_BUYING_OPTION_DISTRIBUTIONS)
  private List<BuyingOptionDistribution> buyingOptionDistributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_DISTRIBUTIONS = "categoryDistributions";
  @SerializedName(SERIALIZED_NAME_CATEGORY_DISTRIBUTIONS)
  private List<CategoryDistribution> categoryDistributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITION_DISTRIBUTIONS = "conditionDistributions";
  @SerializedName(SERIALIZED_NAME_CONDITION_DISTRIBUTIONS)
  private List<ConditionDistribution> conditionDistributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOMINANT_CATEGORY_ID = "dominantCategoryId";
  @SerializedName(SERIALIZED_NAME_DOMINANT_CATEGORY_ID)
  private String dominantCategoryId;

  public Refinement() {
  }

  public Refinement aspectDistributions(List<AspectDistribution> aspectDistributions) {
    this.aspectDistributions = aspectDistributions;
    return this;
  }

  public Refinement addAspectDistributionsItem(AspectDistribution aspectDistributionsItem) {
    if (this.aspectDistributions == null) {
      this.aspectDistributions = new ArrayList<>();
    }
    this.aspectDistributions.add(aspectDistributionsItem);
    return this;
  }

  /**
   * An array of containers for the all the aspect refinements.
   * @return aspectDistributions
   */
  @javax.annotation.Nullable
  public List<AspectDistribution> getAspectDistributions() {
    return aspectDistributions;
  }

  public void setAspectDistributions(List<AspectDistribution> aspectDistributions) {
    this.aspectDistributions = aspectDistributions;
  }


  public Refinement buyingOptionDistributions(List<BuyingOptionDistribution> buyingOptionDistributions) {
    this.buyingOptionDistributions = buyingOptionDistributions;
    return this;
  }

  public Refinement addBuyingOptionDistributionsItem(BuyingOptionDistribution buyingOptionDistributionsItem) {
    if (this.buyingOptionDistributions == null) {
      this.buyingOptionDistributions = new ArrayList<>();
    }
    this.buyingOptionDistributions.add(buyingOptionDistributionsItem);
    return this;
  }

  /**
   * An array of containers for the all the buying option refinements.
   * @return buyingOptionDistributions
   */
  @javax.annotation.Nullable
  public List<BuyingOptionDistribution> getBuyingOptionDistributions() {
    return buyingOptionDistributions;
  }

  public void setBuyingOptionDistributions(List<BuyingOptionDistribution> buyingOptionDistributions) {
    this.buyingOptionDistributions = buyingOptionDistributions;
  }


  public Refinement categoryDistributions(List<CategoryDistribution> categoryDistributions) {
    this.categoryDistributions = categoryDistributions;
    return this;
  }

  public Refinement addCategoryDistributionsItem(CategoryDistribution categoryDistributionsItem) {
    if (this.categoryDistributions == null) {
      this.categoryDistributions = new ArrayList<>();
    }
    this.categoryDistributions.add(categoryDistributionsItem);
    return this;
  }

  /**
   * An array of containers for the all the category refinements.
   * @return categoryDistributions
   */
  @javax.annotation.Nullable
  public List<CategoryDistribution> getCategoryDistributions() {
    return categoryDistributions;
  }

  public void setCategoryDistributions(List<CategoryDistribution> categoryDistributions) {
    this.categoryDistributions = categoryDistributions;
  }


  public Refinement conditionDistributions(List<ConditionDistribution> conditionDistributions) {
    this.conditionDistributions = conditionDistributions;
    return this;
  }

  public Refinement addConditionDistributionsItem(ConditionDistribution conditionDistributionsItem) {
    if (this.conditionDistributions == null) {
      this.conditionDistributions = new ArrayList<>();
    }
    this.conditionDistributions.add(conditionDistributionsItem);
    return this;
  }

  /**
   * An array of containers for the all the condition refinements.
   * @return conditionDistributions
   */
  @javax.annotation.Nullable
  public List<ConditionDistribution> getConditionDistributions() {
    return conditionDistributions;
  }

  public void setConditionDistributions(List<ConditionDistribution> conditionDistributions) {
    this.conditionDistributions = conditionDistributions;
  }


  public Refinement dominantCategoryId(String dominantCategoryId) {
    this.dominantCategoryId = dominantCategoryId;
    return this;
  }

  /**
   * The identifier of the category that most of the items are part of.
   * @return dominantCategoryId
   */
  @javax.annotation.Nullable
  public String getDominantCategoryId() {
    return dominantCategoryId;
  }

  public void setDominantCategoryId(String dominantCategoryId) {
    this.dominantCategoryId = dominantCategoryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refinement refinement = (Refinement) o;
    return Objects.equals(this.aspectDistributions, refinement.aspectDistributions) &&
        Objects.equals(this.buyingOptionDistributions, refinement.buyingOptionDistributions) &&
        Objects.equals(this.categoryDistributions, refinement.categoryDistributions) &&
        Objects.equals(this.conditionDistributions, refinement.conditionDistributions) &&
        Objects.equals(this.dominantCategoryId, refinement.dominantCategoryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectDistributions, buyingOptionDistributions, categoryDistributions, conditionDistributions, dominantCategoryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refinement {\n");
    sb.append("    aspectDistributions: ").append(toIndentedString(aspectDistributions)).append("\n");
    sb.append("    buyingOptionDistributions: ").append(toIndentedString(buyingOptionDistributions)).append("\n");
    sb.append("    categoryDistributions: ").append(toIndentedString(categoryDistributions)).append("\n");
    sb.append("    conditionDistributions: ").append(toIndentedString(conditionDistributions)).append("\n");
    sb.append("    dominantCategoryId: ").append(toIndentedString(dominantCategoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspectDistributions");
    openapiFields.add("buyingOptionDistributions");
    openapiFields.add("categoryDistributions");
    openapiFields.add("conditionDistributions");
    openapiFields.add("dominantCategoryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Refinement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Refinement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Refinement is not found in the empty JSON string", Refinement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Refinement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Refinement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aspectDistributions") != null && !jsonObj.get("aspectDistributions").isJsonNull()) {
        JsonArray jsonArrayaspectDistributions = jsonObj.getAsJsonArray("aspectDistributions");
        if (jsonArrayaspectDistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aspectDistributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aspectDistributions` to be an array in the JSON string but got `%s`", jsonObj.get("aspectDistributions").toString()));
          }

          // validate the optional field `aspectDistributions` (array)
          for (int i = 0; i < jsonArrayaspectDistributions.size(); i++) {
            AspectDistribution.validateJsonElement(jsonArrayaspectDistributions.get(i));
          };
        }
      }
      if (jsonObj.get("buyingOptionDistributions") != null && !jsonObj.get("buyingOptionDistributions").isJsonNull()) {
        JsonArray jsonArraybuyingOptionDistributions = jsonObj.getAsJsonArray("buyingOptionDistributions");
        if (jsonArraybuyingOptionDistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buyingOptionDistributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buyingOptionDistributions` to be an array in the JSON string but got `%s`", jsonObj.get("buyingOptionDistributions").toString()));
          }

          // validate the optional field `buyingOptionDistributions` (array)
          for (int i = 0; i < jsonArraybuyingOptionDistributions.size(); i++) {
            BuyingOptionDistribution.validateJsonElement(jsonArraybuyingOptionDistributions.get(i));
          };
        }
      }
      if (jsonObj.get("categoryDistributions") != null && !jsonObj.get("categoryDistributions").isJsonNull()) {
        JsonArray jsonArraycategoryDistributions = jsonObj.getAsJsonArray("categoryDistributions");
        if (jsonArraycategoryDistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryDistributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryDistributions` to be an array in the JSON string but got `%s`", jsonObj.get("categoryDistributions").toString()));
          }

          // validate the optional field `categoryDistributions` (array)
          for (int i = 0; i < jsonArraycategoryDistributions.size(); i++) {
            CategoryDistribution.validateJsonElement(jsonArraycategoryDistributions.get(i));
          };
        }
      }
      if (jsonObj.get("conditionDistributions") != null && !jsonObj.get("conditionDistributions").isJsonNull()) {
        JsonArray jsonArrayconditionDistributions = jsonObj.getAsJsonArray("conditionDistributions");
        if (jsonArrayconditionDistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditionDistributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditionDistributions` to be an array in the JSON string but got `%s`", jsonObj.get("conditionDistributions").toString()));
          }

          // validate the optional field `conditionDistributions` (array)
          for (int i = 0; i < jsonArrayconditionDistributions.size(); i++) {
            ConditionDistribution.validateJsonElement(jsonArrayconditionDistributions.get(i));
          };
        }
      }
      if ((jsonObj.get("dominantCategoryId") != null && !jsonObj.get("dominantCategoryId").isJsonNull()) && !jsonObj.get("dominantCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominantCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dominantCategoryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Refinement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Refinement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Refinement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Refinement.class));

       return (TypeAdapter<T>) new TypeAdapter<Refinement>() {
           @Override
           public void write(JsonWriter out, Refinement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Refinement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Refinement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Refinement
   * @throws IOException if the JSON string is invalid with respect to Refinement
   */
  public static Refinement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Refinement.class);
  }

  /**
   * Convert an instance of Refinement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

