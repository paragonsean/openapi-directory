/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request &lt;b&gt; fieldgroups&lt;/b&gt; is set to &lt;code&gt;PRODUCT&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalProductIdentity {
  public static final String SERIALIZED_NAME_PRODUCT_IDENTITY = "productIdentity";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTITY)
  private List<ProductIdentity> productIdentity = new ArrayList<>();

  public AdditionalProductIdentity() {
  }

  public AdditionalProductIdentity productIdentity(List<ProductIdentity> productIdentity) {
    this.productIdentity = productIdentity;
    return this;
  }

  public AdditionalProductIdentity addProductIdentityItem(ProductIdentity productIdentityItem) {
    if (this.productIdentity == null) {
      this.productIdentity = new ArrayList<>();
    }
    this.productIdentity.add(productIdentityItem);
    return this;
  }

  /**
   * An array of the product identifier/value pairs for the product associated with the item. This is returned if the seller has associated the eBay Product Identifier (ePID) with the item and the request has fieldgroups set to PRODUCT. The following table shows what is returned, based on the item information provided by the seller, when the fieldgroups set to PRODUCT. ePID Provided Product&amp;nbsp;ID(s) Provided Response No No The AdditionalProductIdentity container is not returned. No Yes The AdditionalProductIdentity container is not returned but the product identifiers specified by the seller are returned in the localizedAspects container. Yes No The AdditionalProductIdentity container is returned listing the product identifiers of the product. Yes Yes The AdditionalProductIdentity container is returned listing all the product identifiers of the product and the product identifiers specified by the seller are returned in the localizedAspects container.
   * @return productIdentity
   */
  @javax.annotation.Nullable
  public List<ProductIdentity> getProductIdentity() {
    return productIdentity;
  }

  public void setProductIdentity(List<ProductIdentity> productIdentity) {
    this.productIdentity = productIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalProductIdentity additionalProductIdentity = (AdditionalProductIdentity) o;
    return Objects.equals(this.productIdentity, additionalProductIdentity.productIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalProductIdentity {\n");
    sb.append("    productIdentity: ").append(toIndentedString(productIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalProductIdentity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalProductIdentity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalProductIdentity is not found in the empty JSON string", AdditionalProductIdentity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalProductIdentity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalProductIdentity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("productIdentity") != null && !jsonObj.get("productIdentity").isJsonNull()) {
        JsonArray jsonArrayproductIdentity = jsonObj.getAsJsonArray("productIdentity");
        if (jsonArrayproductIdentity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productIdentity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productIdentity` to be an array in the JSON string but got `%s`", jsonObj.get("productIdentity").toString()));
          }

          // validate the optional field `productIdentity` (array)
          for (int i = 0; i < jsonArrayproductIdentity.size(); i++) {
            ProductIdentity.validateJsonElement(jsonArrayproductIdentity.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalProductIdentity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalProductIdentity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalProductIdentity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalProductIdentity.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalProductIdentity>() {
           @Override
           public void write(JsonWriter out, AdditionalProductIdentity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalProductIdentity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalProductIdentity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalProductIdentity
   * @throws IOException if the JSON string is invalid with respect to AdditionalProductIdentity
   */
  public static AdditionalProductIdentity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalProductIdentity.class);
  }

  /**
   * Convert an instance of AdditionalProductIdentity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

