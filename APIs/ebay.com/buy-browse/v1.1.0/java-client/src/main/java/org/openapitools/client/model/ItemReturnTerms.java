/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeDuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the seller&#39;s return policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemReturnTerms {
  public static final String SERIALIZED_NAME_EXTENDED_HOLIDAY_RETURNS_OFFERED = "extendedHolidayReturnsOffered";
  @SerializedName(SERIALIZED_NAME_EXTENDED_HOLIDAY_RETURNS_OFFERED)
  private Boolean extendedHolidayReturnsOffered;

  public static final String SERIALIZED_NAME_REFUND_METHOD = "refundMethod";
  @SerializedName(SERIALIZED_NAME_REFUND_METHOD)
  private String refundMethod;

  public static final String SERIALIZED_NAME_RESTOCKING_FEE_PERCENTAGE = "restockingFeePercentage";
  @SerializedName(SERIALIZED_NAME_RESTOCKING_FEE_PERCENTAGE)
  private String restockingFeePercentage;

  public static final String SERIALIZED_NAME_RETURN_INSTRUCTIONS = "returnInstructions";
  @SerializedName(SERIALIZED_NAME_RETURN_INSTRUCTIONS)
  private String returnInstructions;

  public static final String SERIALIZED_NAME_RETURN_METHOD = "returnMethod";
  @SerializedName(SERIALIZED_NAME_RETURN_METHOD)
  private String returnMethod;

  public static final String SERIALIZED_NAME_RETURN_PERIOD = "returnPeriod";
  @SerializedName(SERIALIZED_NAME_RETURN_PERIOD)
  private TimeDuration returnPeriod;

  public static final String SERIALIZED_NAME_RETURN_SHIPPING_COST_PAYER = "returnShippingCostPayer";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING_COST_PAYER)
  private String returnShippingCostPayer;

  public static final String SERIALIZED_NAME_RETURNS_ACCEPTED = "returnsAccepted";
  @SerializedName(SERIALIZED_NAME_RETURNS_ACCEPTED)
  private Boolean returnsAccepted;

  public ItemReturnTerms() {
  }

  public ItemReturnTerms extendedHolidayReturnsOffered(Boolean extendedHolidayReturnsOffered) {
    this.extendedHolidayReturnsOffered = extendedHolidayReturnsOffered;
    return this;
  }

  /**
   * This indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This &#39;extra time&#39; will typically extend beyond what is set through the returnPeriod value.
   * @return extendedHolidayReturnsOffered
   */
  @javax.annotation.Nullable
  public Boolean getExtendedHolidayReturnsOffered() {
    return extendedHolidayReturnsOffered;
  }

  public void setExtendedHolidayReturnsOffered(Boolean extendedHolidayReturnsOffered) {
    this.extendedHolidayReturnsOffered = extendedHolidayReturnsOffered;
  }


  public ItemReturnTerms refundMethod(String refundMethod) {
    this.refundMethod = refundMethod;
    return this;
  }

  /**
   * An enumeration value that indicates how a buyer is refunded when an item is returned. Valid Values: MONEY_BACK or MERCHANDISE_CREDIT Code so that your app gracefully handles any future changes to this list. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:RefundMethodEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return refundMethod
   */
  @javax.annotation.Nullable
  public String getRefundMethod() {
    return refundMethod;
  }

  public void setRefundMethod(String refundMethod) {
    this.refundMethod = refundMethod;
  }


  public ItemReturnTerms restockingFeePercentage(String restockingFeePercentage) {
    this.restockingFeePercentage = restockingFeePercentage;
    return this;
  }

  /**
   * This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.
   * @return restockingFeePercentage
   */
  @javax.annotation.Nullable
  public String getRestockingFeePercentage() {
    return restockingFeePercentage;
  }

  public void setRestockingFeePercentage(String restockingFeePercentage) {
    this.restockingFeePercentage = restockingFeePercentage;
  }


  public ItemReturnTerms returnInstructions(String returnInstructions) {
    this.returnInstructions = returnInstructions;
    return this;
  }

  /**
   * Text written by the seller describing what the buyer needs to do in order to return the item.
   * @return returnInstructions
   */
  @javax.annotation.Nullable
  public String getReturnInstructions() {
    return returnInstructions;
  }

  public void setReturnInstructions(String returnInstructions) {
    this.returnInstructions = returnInstructions;
  }


  public ItemReturnTerms returnMethod(String returnMethod) {
    this.returnMethod = returnMethod;
    return this;
  }

  /**
   * An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. Valid Values: REPLACEMENT - Indicates that the buyer has the option of receiving money back for the returned item, or they can choose to have the seller replace the item with an identical item. EXCHANGE - Indicates that the buyer has the option of receiving money back for the returned item, or they can exchange the item for another similar item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnMethodEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return returnMethod
   */
  @javax.annotation.Nullable
  public String getReturnMethod() {
    return returnMethod;
  }

  public void setReturnMethod(String returnMethod) {
    this.returnMethod = returnMethod;
  }


  public ItemReturnTerms returnPeriod(TimeDuration returnPeriod) {
    this.returnPeriod = returnPeriod;
    return this;
  }

  /**
   * Get returnPeriod
   * @return returnPeriod
   */
  @javax.annotation.Nullable
  public TimeDuration getReturnPeriod() {
    return returnPeriod;
  }

  public void setReturnPeriod(TimeDuration returnPeriod) {
    this.returnPeriod = returnPeriod;
  }


  public ItemReturnTerms returnShippingCostPayer(String returnShippingCostPayer) {
    this.returnShippingCostPayer = returnShippingCostPayer;
    return this;
  }

  /**
   * This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. Valid Values: SELLER - Indicates the seller will pay for the shipping costs to return the item. BUYER - Indicates the buyer will pay for the shipping costs to return the item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnShippingCostPayerEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return returnShippingCostPayer
   */
  @javax.annotation.Nullable
  public String getReturnShippingCostPayer() {
    return returnShippingCostPayer;
  }

  public void setReturnShippingCostPayer(String returnShippingCostPayer) {
    this.returnShippingCostPayer = returnShippingCostPayer;
  }


  public ItemReturnTerms returnsAccepted(Boolean returnsAccepted) {
    this.returnsAccepted = returnsAccepted;
    return this;
  }

  /**
   * Indicates whether the seller accepts returns for the item.
   * @return returnsAccepted
   */
  @javax.annotation.Nullable
  public Boolean getReturnsAccepted() {
    return returnsAccepted;
  }

  public void setReturnsAccepted(Boolean returnsAccepted) {
    this.returnsAccepted = returnsAccepted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemReturnTerms itemReturnTerms = (ItemReturnTerms) o;
    return Objects.equals(this.extendedHolidayReturnsOffered, itemReturnTerms.extendedHolidayReturnsOffered) &&
        Objects.equals(this.refundMethod, itemReturnTerms.refundMethod) &&
        Objects.equals(this.restockingFeePercentage, itemReturnTerms.restockingFeePercentage) &&
        Objects.equals(this.returnInstructions, itemReturnTerms.returnInstructions) &&
        Objects.equals(this.returnMethod, itemReturnTerms.returnMethod) &&
        Objects.equals(this.returnPeriod, itemReturnTerms.returnPeriod) &&
        Objects.equals(this.returnShippingCostPayer, itemReturnTerms.returnShippingCostPayer) &&
        Objects.equals(this.returnsAccepted, itemReturnTerms.returnsAccepted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendedHolidayReturnsOffered, refundMethod, restockingFeePercentage, returnInstructions, returnMethod, returnPeriod, returnShippingCostPayer, returnsAccepted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemReturnTerms {\n");
    sb.append("    extendedHolidayReturnsOffered: ").append(toIndentedString(extendedHolidayReturnsOffered)).append("\n");
    sb.append("    refundMethod: ").append(toIndentedString(refundMethod)).append("\n");
    sb.append("    restockingFeePercentage: ").append(toIndentedString(restockingFeePercentage)).append("\n");
    sb.append("    returnInstructions: ").append(toIndentedString(returnInstructions)).append("\n");
    sb.append("    returnMethod: ").append(toIndentedString(returnMethod)).append("\n");
    sb.append("    returnPeriod: ").append(toIndentedString(returnPeriod)).append("\n");
    sb.append("    returnShippingCostPayer: ").append(toIndentedString(returnShippingCostPayer)).append("\n");
    sb.append("    returnsAccepted: ").append(toIndentedString(returnsAccepted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extendedHolidayReturnsOffered");
    openapiFields.add("refundMethod");
    openapiFields.add("restockingFeePercentage");
    openapiFields.add("returnInstructions");
    openapiFields.add("returnMethod");
    openapiFields.add("returnPeriod");
    openapiFields.add("returnShippingCostPayer");
    openapiFields.add("returnsAccepted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemReturnTerms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemReturnTerms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemReturnTerms is not found in the empty JSON string", ItemReturnTerms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemReturnTerms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemReturnTerms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refundMethod") != null && !jsonObj.get("refundMethod").isJsonNull()) && !jsonObj.get("refundMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundMethod").toString()));
      }
      if ((jsonObj.get("restockingFeePercentage") != null && !jsonObj.get("restockingFeePercentage").isJsonNull()) && !jsonObj.get("restockingFeePercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restockingFeePercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restockingFeePercentage").toString()));
      }
      if ((jsonObj.get("returnInstructions") != null && !jsonObj.get("returnInstructions").isJsonNull()) && !jsonObj.get("returnInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnInstructions").toString()));
      }
      if ((jsonObj.get("returnMethod") != null && !jsonObj.get("returnMethod").isJsonNull()) && !jsonObj.get("returnMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnMethod").toString()));
      }
      // validate the optional field `returnPeriod`
      if (jsonObj.get("returnPeriod") != null && !jsonObj.get("returnPeriod").isJsonNull()) {
        TimeDuration.validateJsonElement(jsonObj.get("returnPeriod"));
      }
      if ((jsonObj.get("returnShippingCostPayer") != null && !jsonObj.get("returnShippingCostPayer").isJsonNull()) && !jsonObj.get("returnShippingCostPayer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnShippingCostPayer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnShippingCostPayer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemReturnTerms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemReturnTerms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemReturnTerms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemReturnTerms.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemReturnTerms>() {
           @Override
           public void write(JsonWriter out, ItemReturnTerms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemReturnTerms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemReturnTerms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemReturnTerms
   * @throws IOException if the JSON string is invalid with respect to ItemReturnTerms
   */
  public static ItemReturnTerms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemReturnTerms.class);
  }

  /**
   * Convert an instance of ItemReturnTerms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

