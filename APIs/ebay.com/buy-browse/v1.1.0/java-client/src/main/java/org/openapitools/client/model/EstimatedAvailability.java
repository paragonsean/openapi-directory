/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the fields for the estimated item availability information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EstimatedAvailability {
  public static final String SERIALIZED_NAME_AVAILABILITY_THRESHOLD = "availabilityThreshold";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_THRESHOLD)
  private Integer availabilityThreshold;

  public static final String SERIALIZED_NAME_AVAILABILITY_THRESHOLD_TYPE = "availabilityThresholdType";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_THRESHOLD_TYPE)
  private String availabilityThresholdType;

  public static final String SERIALIZED_NAME_DELIVERY_OPTIONS = "deliveryOptions";
  @SerializedName(SERIALIZED_NAME_DELIVERY_OPTIONS)
  private List<String> deliveryOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ESTIMATED_AVAILABILITY_STATUS = "estimatedAvailabilityStatus";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_AVAILABILITY_STATUS)
  private String estimatedAvailabilityStatus;

  public static final String SERIALIZED_NAME_ESTIMATED_AVAILABLE_QUANTITY = "estimatedAvailableQuantity";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_AVAILABLE_QUANTITY)
  private Integer estimatedAvailableQuantity;

  public static final String SERIALIZED_NAME_ESTIMATED_SOLD_QUANTITY = "estimatedSoldQuantity";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SOLD_QUANTITY)
  private Integer estimatedSoldQuantity;

  public EstimatedAvailability() {
  }

  public EstimatedAvailability availabilityThreshold(Integer availabilityThreshold) {
    this.availabilityThreshold = availabilityThreshold;
    return this;
  }

  /**
   * This field is return only when the seller sets their &#39;display item quantity&#39; preference to Display &amp;quot;More than 10 available&amp;quot; in your listing (if applicable). The value of this field will be &amp;quot;10&amp;quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.
   * @return availabilityThreshold
   */
  @javax.annotation.Nullable
  public Integer getAvailabilityThreshold() {
    return availabilityThreshold;
  }

  public void setAvailabilityThreshold(Integer availabilityThreshold) {
    this.availabilityThreshold = availabilityThreshold;
  }


  public EstimatedAvailability availabilityThresholdType(String availabilityThresholdType) {
    this.availabilityThresholdType = availabilityThresholdType;
    return this;
  }

  /**
   * This field is return only when the seller sets their Display Item Quantity preference to Display &amp;quot;More than 10 available&amp;quot; in your listing (if applicable). The value of this field will be MORE_THAN. This indicates that the seller has more than the &#39;quantity display preference&#39;, which is 10, in stock for this item. The following are the display item quantity preferences the seller can set. Display &amp;quot;More than 10 available&amp;quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold fields are not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityThresholdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return availabilityThresholdType
   */
  @javax.annotation.Nullable
  public String getAvailabilityThresholdType() {
    return availabilityThresholdType;
  }

  public void setAvailabilityThresholdType(String availabilityThresholdType) {
    this.availabilityThresholdType = availabilityThresholdType;
  }


  public EstimatedAvailability deliveryOptions(List<String> deliveryOptions) {
    this.deliveryOptions = deliveryOptions;
    return this;
  }

  public EstimatedAvailability addDeliveryOptionsItem(String deliveryOptionsItem) {
    if (this.deliveryOptions == null) {
      this.deliveryOptions = new ArrayList<>();
    }
    this.deliveryOptions.add(deliveryOptionsItem);
    return this;
  }

  /**
   * An array of available delivery options. Valid Values: SHIP_TO_HOME, SELLER_ARRANGED_LOCAL_PICKUP, IN_STORE_PICKUP, PICKUP_DROP_OFF, or DIGITAL_DELIVERY Code so that your app gracefully handles any future changes to this list.
   * @return deliveryOptions
   */
  @javax.annotation.Nullable
  public List<String> getDeliveryOptions() {
    return deliveryOptions;
  }

  public void setDeliveryOptions(List<String> deliveryOptions) {
    this.deliveryOptions = deliveryOptions;
  }


  public EstimatedAvailability estimatedAvailabilityStatus(String estimatedAvailabilityStatus) {
    this.estimatedAvailabilityStatus = estimatedAvailabilityStatus;
    return this;
  }

  /**
   * An enumeration value representing the inventory status of this item. Note: Be sure to review the itemEndDate field to determine whether the item is available for purchase. Valid Values: IN_STOCK, LIMITED_STOCK, or OUT_OF_STOCK Code so that your app gracefully handles any future changes to this list. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return estimatedAvailabilityStatus
   */
  @javax.annotation.Nullable
  public String getEstimatedAvailabilityStatus() {
    return estimatedAvailabilityStatus;
  }

  public void setEstimatedAvailabilityStatus(String estimatedAvailabilityStatus) {
    this.estimatedAvailabilityStatus = estimatedAvailabilityStatus;
  }


  public EstimatedAvailability estimatedAvailableQuantity(Integer estimatedAvailableQuantity) {
    this.estimatedAvailableQuantity = estimatedAvailableQuantity;
    return this;
  }

  /**
   * The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
   * @return estimatedAvailableQuantity
   */
  @javax.annotation.Nullable
  public Integer getEstimatedAvailableQuantity() {
    return estimatedAvailableQuantity;
  }

  public void setEstimatedAvailableQuantity(Integer estimatedAvailableQuantity) {
    this.estimatedAvailableQuantity = estimatedAvailableQuantity;
  }


  public EstimatedAvailability estimatedSoldQuantity(Integer estimatedSoldQuantity) {
    this.estimatedSoldQuantity = estimatedSoldQuantity;
    return this;
  }

  /**
   * The estimated number of this item that have been sold.
   * @return estimatedSoldQuantity
   */
  @javax.annotation.Nullable
  public Integer getEstimatedSoldQuantity() {
    return estimatedSoldQuantity;
  }

  public void setEstimatedSoldQuantity(Integer estimatedSoldQuantity) {
    this.estimatedSoldQuantity = estimatedSoldQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EstimatedAvailability estimatedAvailability = (EstimatedAvailability) o;
    return Objects.equals(this.availabilityThreshold, estimatedAvailability.availabilityThreshold) &&
        Objects.equals(this.availabilityThresholdType, estimatedAvailability.availabilityThresholdType) &&
        Objects.equals(this.deliveryOptions, estimatedAvailability.deliveryOptions) &&
        Objects.equals(this.estimatedAvailabilityStatus, estimatedAvailability.estimatedAvailabilityStatus) &&
        Objects.equals(this.estimatedAvailableQuantity, estimatedAvailability.estimatedAvailableQuantity) &&
        Objects.equals(this.estimatedSoldQuantity, estimatedAvailability.estimatedSoldQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityThreshold, availabilityThresholdType, deliveryOptions, estimatedAvailabilityStatus, estimatedAvailableQuantity, estimatedSoldQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EstimatedAvailability {\n");
    sb.append("    availabilityThreshold: ").append(toIndentedString(availabilityThreshold)).append("\n");
    sb.append("    availabilityThresholdType: ").append(toIndentedString(availabilityThresholdType)).append("\n");
    sb.append("    deliveryOptions: ").append(toIndentedString(deliveryOptions)).append("\n");
    sb.append("    estimatedAvailabilityStatus: ").append(toIndentedString(estimatedAvailabilityStatus)).append("\n");
    sb.append("    estimatedAvailableQuantity: ").append(toIndentedString(estimatedAvailableQuantity)).append("\n");
    sb.append("    estimatedSoldQuantity: ").append(toIndentedString(estimatedSoldQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityThreshold");
    openapiFields.add("availabilityThresholdType");
    openapiFields.add("deliveryOptions");
    openapiFields.add("estimatedAvailabilityStatus");
    openapiFields.add("estimatedAvailableQuantity");
    openapiFields.add("estimatedSoldQuantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EstimatedAvailability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EstimatedAvailability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EstimatedAvailability is not found in the empty JSON string", EstimatedAvailability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EstimatedAvailability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EstimatedAvailability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availabilityThresholdType") != null && !jsonObj.get("availabilityThresholdType").isJsonNull()) && !jsonObj.get("availabilityThresholdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityThresholdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityThresholdType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deliveryOptions") != null && !jsonObj.get("deliveryOptions").isJsonNull() && !jsonObj.get("deliveryOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryOptions` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryOptions").toString()));
      }
      if ((jsonObj.get("estimatedAvailabilityStatus") != null && !jsonObj.get("estimatedAvailabilityStatus").isJsonNull()) && !jsonObj.get("estimatedAvailabilityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedAvailabilityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedAvailabilityStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EstimatedAvailability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EstimatedAvailability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EstimatedAvailability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EstimatedAvailability.class));

       return (TypeAdapter<T>) new TypeAdapter<EstimatedAvailability>() {
           @Override
           public void write(JsonWriter out, EstimatedAvailability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EstimatedAvailability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EstimatedAvailability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EstimatedAvailability
   * @throws IOException if the JSON string is invalid with respect to EstimatedAvailability
   */
  public static EstimatedAvailability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EstimatedAvailability.class);
  }

  /**
   * Convert an instance of EstimatedAvailability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

