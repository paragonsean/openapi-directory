/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TaxJurisdiction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type that defines the tax fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:38.809765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Taxes {
  public static final String SERIALIZED_NAME_EBAY_COLLECT_AND_REMIT_TAX = "ebayCollectAndRemitTax";
  @SerializedName(SERIALIZED_NAME_EBAY_COLLECT_AND_REMIT_TAX)
  private Boolean ebayCollectAndRemitTax;

  public static final String SERIALIZED_NAME_INCLUDED_IN_PRICE = "includedInPrice";
  @SerializedName(SERIALIZED_NAME_INCLUDED_IN_PRICE)
  private Boolean includedInPrice;

  public static final String SERIALIZED_NAME_SHIPPING_AND_HANDLING_TAXED = "shippingAndHandlingTaxed";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AND_HANDLING_TAXED)
  private Boolean shippingAndHandlingTaxed;

  public static final String SERIALIZED_NAME_TAX_JURISDICTION = "taxJurisdiction";
  @SerializedName(SERIALIZED_NAME_TAX_JURISDICTION)
  private TaxJurisdiction taxJurisdiction;

  public static final String SERIALIZED_NAME_TAX_PERCENTAGE = "taxPercentage";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENTAGE)
  private String taxPercentage;

  public static final String SERIALIZED_NAME_TAX_TYPE = "taxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public Taxes() {
  }

  public Taxes ebayCollectAndRemitTax(Boolean ebayCollectAndRemitTax) {
    this.ebayCollectAndRemitTax = ebayCollectAndRemitTax;
    return this;
  }

  /**
   * This field is only returned if true, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer&#39;s residence.
   * @return ebayCollectAndRemitTax
   */
  @javax.annotation.Nullable
  public Boolean getEbayCollectAndRemitTax() {
    return ebayCollectAndRemitTax;
  }

  public void setEbayCollectAndRemitTax(Boolean ebayCollectAndRemitTax) {
    this.ebayCollectAndRemitTax = ebayCollectAndRemitTax;
  }


  public Taxes includedInPrice(Boolean includedInPrice) {
    this.includedInPrice = includedInPrice;
    return this;
  }

  /**
   * This indicates if tax was applied for the cost of the item.
   * @return includedInPrice
   */
  @javax.annotation.Nullable
  public Boolean getIncludedInPrice() {
    return includedInPrice;
  }

  public void setIncludedInPrice(Boolean includedInPrice) {
    this.includedInPrice = includedInPrice;
  }


  public Taxes shippingAndHandlingTaxed(Boolean shippingAndHandlingTaxed) {
    this.shippingAndHandlingTaxed = shippingAndHandlingTaxed;
    return this;
  }

  /**
   * This indicates if tax is applied for the shipping cost.
   * @return shippingAndHandlingTaxed
   */
  @javax.annotation.Nullable
  public Boolean getShippingAndHandlingTaxed() {
    return shippingAndHandlingTaxed;
  }

  public void setShippingAndHandlingTaxed(Boolean shippingAndHandlingTaxed) {
    this.shippingAndHandlingTaxed = shippingAndHandlingTaxed;
  }


  public Taxes taxJurisdiction(TaxJurisdiction taxJurisdiction) {
    this.taxJurisdiction = taxJurisdiction;
    return this;
  }

  /**
   * Get taxJurisdiction
   * @return taxJurisdiction
   */
  @javax.annotation.Nullable
  public TaxJurisdiction getTaxJurisdiction() {
    return taxJurisdiction;
  }

  public void setTaxJurisdiction(TaxJurisdiction taxJurisdiction) {
    this.taxJurisdiction = taxJurisdiction;
  }


  public Taxes taxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
    return this;
  }

  /**
   * The percentage of tax.
   * @return taxPercentage
   */
  @javax.annotation.Nullable
  public String getTaxPercentage() {
    return taxPercentage;
  }

  public void setTaxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
  }


  public Taxes taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * This field indicates the type of tax that may be collected for the item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return taxType
   */
  @javax.annotation.Nullable
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Taxes taxes = (Taxes) o;
    return Objects.equals(this.ebayCollectAndRemitTax, taxes.ebayCollectAndRemitTax) &&
        Objects.equals(this.includedInPrice, taxes.includedInPrice) &&
        Objects.equals(this.shippingAndHandlingTaxed, taxes.shippingAndHandlingTaxed) &&
        Objects.equals(this.taxJurisdiction, taxes.taxJurisdiction) &&
        Objects.equals(this.taxPercentage, taxes.taxPercentage) &&
        Objects.equals(this.taxType, taxes.taxType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ebayCollectAndRemitTax, includedInPrice, shippingAndHandlingTaxed, taxJurisdiction, taxPercentage, taxType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Taxes {\n");
    sb.append("    ebayCollectAndRemitTax: ").append(toIndentedString(ebayCollectAndRemitTax)).append("\n");
    sb.append("    includedInPrice: ").append(toIndentedString(includedInPrice)).append("\n");
    sb.append("    shippingAndHandlingTaxed: ").append(toIndentedString(shippingAndHandlingTaxed)).append("\n");
    sb.append("    taxJurisdiction: ").append(toIndentedString(taxJurisdiction)).append("\n");
    sb.append("    taxPercentage: ").append(toIndentedString(taxPercentage)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ebayCollectAndRemitTax");
    openapiFields.add("includedInPrice");
    openapiFields.add("shippingAndHandlingTaxed");
    openapiFields.add("taxJurisdiction");
    openapiFields.add("taxPercentage");
    openapiFields.add("taxType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Taxes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Taxes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Taxes is not found in the empty JSON string", Taxes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Taxes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Taxes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `taxJurisdiction`
      if (jsonObj.get("taxJurisdiction") != null && !jsonObj.get("taxJurisdiction").isJsonNull()) {
        TaxJurisdiction.validateJsonElement(jsonObj.get("taxJurisdiction"));
      }
      if ((jsonObj.get("taxPercentage") != null && !jsonObj.get("taxPercentage").isJsonNull()) && !jsonObj.get("taxPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxPercentage").toString()));
      }
      if ((jsonObj.get("taxType") != null && !jsonObj.get("taxType").isJsonNull()) && !jsonObj.get("taxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Taxes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Taxes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Taxes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Taxes.class));

       return (TypeAdapter<T>) new TypeAdapter<Taxes>() {
           @Override
           public void write(JsonWriter out, Taxes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Taxes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Taxes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Taxes
   * @throws IOException if the JSON string is invalid with respect to Taxes
   */
  public static Taxes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Taxes.class);
  }

  /**
   * Convert an instance of Taxes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

