/*
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.CompatibilityProperty;
import org.openapitools.client.model.ConvertedAmount;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ItemLocationImpl;
import org.openapitools.client.model.MarketingPrice;
import org.openapitools.client.model.PickupOptionSummary;
import org.openapitools.client.model.Seller;
import org.openapitools.client.model.ShippingOptionSummary;
import org.openapitools.client.model.TargetLocation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ItemSummary
 */
public class ItemSummaryTest {
    private final ItemSummary model = new ItemSummary();

    /**
     * Model tests for ItemSummary
     */
    @Test
    public void testItemSummary() {
        // TODO: test ItemSummary
    }

    /**
     * Test the property 'additionalImages'
     */
    @Test
    public void additionalImagesTest() {
        // TODO: test additionalImages
    }

    /**
     * Test the property 'adultOnly'
     */
    @Test
    public void adultOnlyTest() {
        // TODO: test adultOnly
    }

    /**
     * Test the property 'availableCoupons'
     */
    @Test
    public void availableCouponsTest() {
        // TODO: test availableCoupons
    }

    /**
     * Test the property 'bidCount'
     */
    @Test
    public void bidCountTest() {
        // TODO: test bidCount
    }

    /**
     * Test the property 'buyingOptions'
     */
    @Test
    public void buyingOptionsTest() {
        // TODO: test buyingOptions
    }

    /**
     * Test the property 'categories'
     */
    @Test
    public void categoriesTest() {
        // TODO: test categories
    }

    /**
     * Test the property 'compatibilityMatch'
     */
    @Test
    public void compatibilityMatchTest() {
        // TODO: test compatibilityMatch
    }

    /**
     * Test the property 'compatibilityProperties'
     */
    @Test
    public void compatibilityPropertiesTest() {
        // TODO: test compatibilityProperties
    }

    /**
     * Test the property 'condition'
     */
    @Test
    public void conditionTest() {
        // TODO: test condition
    }

    /**
     * Test the property 'conditionId'
     */
    @Test
    public void conditionIdTest() {
        // TODO: test conditionId
    }

    /**
     * Test the property 'currentBidPrice'
     */
    @Test
    public void currentBidPriceTest() {
        // TODO: test currentBidPrice
    }

    /**
     * Test the property 'distanceFromPickupLocation'
     */
    @Test
    public void distanceFromPickupLocationTest() {
        // TODO: test distanceFromPickupLocation
    }

    /**
     * Test the property 'energyEfficiencyClass'
     */
    @Test
    public void energyEfficiencyClassTest() {
        // TODO: test energyEfficiencyClass
    }

    /**
     * Test the property 'epid'
     */
    @Test
    public void epidTest() {
        // TODO: test epid
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'itemAffiliateWebUrl'
     */
    @Test
    public void itemAffiliateWebUrlTest() {
        // TODO: test itemAffiliateWebUrl
    }

    /**
     * Test the property 'itemGroupHref'
     */
    @Test
    public void itemGroupHrefTest() {
        // TODO: test itemGroupHref
    }

    /**
     * Test the property 'itemGroupType'
     */
    @Test
    public void itemGroupTypeTest() {
        // TODO: test itemGroupType
    }

    /**
     * Test the property 'itemHref'
     */
    @Test
    public void itemHrefTest() {
        // TODO: test itemHref
    }

    /**
     * Test the property 'itemId'
     */
    @Test
    public void itemIdTest() {
        // TODO: test itemId
    }

    /**
     * Test the property 'itemLocation'
     */
    @Test
    public void itemLocationTest() {
        // TODO: test itemLocation
    }

    /**
     * Test the property 'itemWebUrl'
     */
    @Test
    public void itemWebUrlTest() {
        // TODO: test itemWebUrl
    }

    /**
     * Test the property 'legacyItemId'
     */
    @Test
    public void legacyItemIdTest() {
        // TODO: test legacyItemId
    }

    /**
     * Test the property 'marketingPrice'
     */
    @Test
    public void marketingPriceTest() {
        // TODO: test marketingPrice
    }

    /**
     * Test the property 'pickupOptions'
     */
    @Test
    public void pickupOptionsTest() {
        // TODO: test pickupOptions
    }

    /**
     * Test the property 'price'
     */
    @Test
    public void priceTest() {
        // TODO: test price
    }

    /**
     * Test the property 'priceDisplayCondition'
     */
    @Test
    public void priceDisplayConditionTest() {
        // TODO: test priceDisplayCondition
    }

    /**
     * Test the property 'qualifiedPrograms'
     */
    @Test
    public void qualifiedProgramsTest() {
        // TODO: test qualifiedPrograms
    }

    /**
     * Test the property 'seller'
     */
    @Test
    public void sellerTest() {
        // TODO: test seller
    }

    /**
     * Test the property 'shippingOptions'
     */
    @Test
    public void shippingOptionsTest() {
        // TODO: test shippingOptions
    }

    /**
     * Test the property 'shortDescription'
     */
    @Test
    public void shortDescriptionTest() {
        // TODO: test shortDescription
    }

    /**
     * Test the property 'thumbnailImages'
     */
    @Test
    public void thumbnailImagesTest() {
        // TODO: test thumbnailImages
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'unitPrice'
     */
    @Test
    public void unitPriceTest() {
        // TODO: test unitPrice
    }

    /**
     * Test the property 'unitPricingMeasure'
     */
    @Test
    public void unitPricingMeasureTest() {
        // TODO: test unitPricingMeasure
    }

}
