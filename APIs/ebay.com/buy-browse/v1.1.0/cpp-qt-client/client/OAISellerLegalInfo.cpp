/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellerLegalInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellerLegalInfo::OAISellerLegalInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellerLegalInfo::OAISellerLegalInfo() {
    this->initializeModel();
}

OAISellerLegalInfo::~OAISellerLegalInfo() {}

void OAISellerLegalInfo::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_imprint_isSet = false;
    m_imprint_isValid = false;

    m_legal_contact_first_name_isSet = false;
    m_legal_contact_first_name_isValid = false;

    m_legal_contact_last_name_isSet = false;
    m_legal_contact_last_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_seller_provided_legal_address_isSet = false;
    m_seller_provided_legal_address_isValid = false;

    m_terms_of_service_isSet = false;
    m_terms_of_service_isValid = false;

    m_vat_details_isSet = false;
    m_vat_details_isValid = false;
}

void OAISellerLegalInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellerLegalInfo::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_imprint_isValid = ::OpenAPI::fromJsonValue(m_imprint, json[QString("imprint")]);
    m_imprint_isSet = !json[QString("imprint")].isNull() && m_imprint_isValid;

    m_legal_contact_first_name_isValid = ::OpenAPI::fromJsonValue(m_legal_contact_first_name, json[QString("legalContactFirstName")]);
    m_legal_contact_first_name_isSet = !json[QString("legalContactFirstName")].isNull() && m_legal_contact_first_name_isValid;

    m_legal_contact_last_name_isValid = ::OpenAPI::fromJsonValue(m_legal_contact_last_name, json[QString("legalContactLastName")]);
    m_legal_contact_last_name_isSet = !json[QString("legalContactLastName")].isNull() && m_legal_contact_last_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_seller_provided_legal_address_isValid = ::OpenAPI::fromJsonValue(m_seller_provided_legal_address, json[QString("sellerProvidedLegalAddress")]);
    m_seller_provided_legal_address_isSet = !json[QString("sellerProvidedLegalAddress")].isNull() && m_seller_provided_legal_address_isValid;

    m_terms_of_service_isValid = ::OpenAPI::fromJsonValue(m_terms_of_service, json[QString("termsOfService")]);
    m_terms_of_service_isSet = !json[QString("termsOfService")].isNull() && m_terms_of_service_isValid;

    m_vat_details_isValid = ::OpenAPI::fromJsonValue(m_vat_details, json[QString("vatDetails")]);
    m_vat_details_isSet = !json[QString("vatDetails")].isNull() && m_vat_details_isValid;
}

QString OAISellerLegalInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellerLegalInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_imprint_isSet) {
        obj.insert(QString("imprint"), ::OpenAPI::toJsonValue(m_imprint));
    }
    if (m_legal_contact_first_name_isSet) {
        obj.insert(QString("legalContactFirstName"), ::OpenAPI::toJsonValue(m_legal_contact_first_name));
    }
    if (m_legal_contact_last_name_isSet) {
        obj.insert(QString("legalContactLastName"), ::OpenAPI::toJsonValue(m_legal_contact_last_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_seller_provided_legal_address.isSet()) {
        obj.insert(QString("sellerProvidedLegalAddress"), ::OpenAPI::toJsonValue(m_seller_provided_legal_address));
    }
    if (m_terms_of_service_isSet) {
        obj.insert(QString("termsOfService"), ::OpenAPI::toJsonValue(m_terms_of_service));
    }
    if (m_vat_details.size() > 0) {
        obj.insert(QString("vatDetails"), ::OpenAPI::toJsonValue(m_vat_details));
    }
    return obj;
}

QString OAISellerLegalInfo::getEmail() const {
    return m_email;
}
void OAISellerLegalInfo::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISellerLegalInfo::is_email_Set() const{
    return m_email_isSet;
}

bool OAISellerLegalInfo::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISellerLegalInfo::getFax() const {
    return m_fax;
}
void OAISellerLegalInfo::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAISellerLegalInfo::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAISellerLegalInfo::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAISellerLegalInfo::getImprint() const {
    return m_imprint;
}
void OAISellerLegalInfo::setImprint(const QString &imprint) {
    m_imprint = imprint;
    m_imprint_isSet = true;
}

bool OAISellerLegalInfo::is_imprint_Set() const{
    return m_imprint_isSet;
}

bool OAISellerLegalInfo::is_imprint_Valid() const{
    return m_imprint_isValid;
}

QString OAISellerLegalInfo::getLegalContactFirstName() const {
    return m_legal_contact_first_name;
}
void OAISellerLegalInfo::setLegalContactFirstName(const QString &legal_contact_first_name) {
    m_legal_contact_first_name = legal_contact_first_name;
    m_legal_contact_first_name_isSet = true;
}

bool OAISellerLegalInfo::is_legal_contact_first_name_Set() const{
    return m_legal_contact_first_name_isSet;
}

bool OAISellerLegalInfo::is_legal_contact_first_name_Valid() const{
    return m_legal_contact_first_name_isValid;
}

QString OAISellerLegalInfo::getLegalContactLastName() const {
    return m_legal_contact_last_name;
}
void OAISellerLegalInfo::setLegalContactLastName(const QString &legal_contact_last_name) {
    m_legal_contact_last_name = legal_contact_last_name;
    m_legal_contact_last_name_isSet = true;
}

bool OAISellerLegalInfo::is_legal_contact_last_name_Set() const{
    return m_legal_contact_last_name_isSet;
}

bool OAISellerLegalInfo::is_legal_contact_last_name_Valid() const{
    return m_legal_contact_last_name_isValid;
}

QString OAISellerLegalInfo::getName() const {
    return m_name;
}
void OAISellerLegalInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISellerLegalInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAISellerLegalInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISellerLegalInfo::getPhone() const {
    return m_phone;
}
void OAISellerLegalInfo::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAISellerLegalInfo::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAISellerLegalInfo::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAISellerLegalInfo::getRegistrationNumber() const {
    return m_registration_number;
}
void OAISellerLegalInfo::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAISellerLegalInfo::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAISellerLegalInfo::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

OAILegalAddress OAISellerLegalInfo::getSellerProvidedLegalAddress() const {
    return m_seller_provided_legal_address;
}
void OAISellerLegalInfo::setSellerProvidedLegalAddress(const OAILegalAddress &seller_provided_legal_address) {
    m_seller_provided_legal_address = seller_provided_legal_address;
    m_seller_provided_legal_address_isSet = true;
}

bool OAISellerLegalInfo::is_seller_provided_legal_address_Set() const{
    return m_seller_provided_legal_address_isSet;
}

bool OAISellerLegalInfo::is_seller_provided_legal_address_Valid() const{
    return m_seller_provided_legal_address_isValid;
}

QString OAISellerLegalInfo::getTermsOfService() const {
    return m_terms_of_service;
}
void OAISellerLegalInfo::setTermsOfService(const QString &terms_of_service) {
    m_terms_of_service = terms_of_service;
    m_terms_of_service_isSet = true;
}

bool OAISellerLegalInfo::is_terms_of_service_Set() const{
    return m_terms_of_service_isSet;
}

bool OAISellerLegalInfo::is_terms_of_service_Valid() const{
    return m_terms_of_service_isValid;
}

QList<OAIVatDetail> OAISellerLegalInfo::getVatDetails() const {
    return m_vat_details;
}
void OAISellerLegalInfo::setVatDetails(const QList<OAIVatDetail> &vat_details) {
    m_vat_details = vat_details;
    m_vat_details_isSet = true;
}

bool OAISellerLegalInfo::is_vat_details_Set() const{
    return m_vat_details_isSet;
}

bool OAISellerLegalInfo::is_vat_details_Valid() const{
    return m_vat_details_isValid;
}

bool OAISellerLegalInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_contact_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_contact_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_provided_legal_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellerLegalInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
