/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemReturnTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemReturnTerms::OAIItemReturnTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemReturnTerms::OAIItemReturnTerms() {
    this->initializeModel();
}

OAIItemReturnTerms::~OAIItemReturnTerms() {}

void OAIItemReturnTerms::initializeModel() {

    m_extended_holiday_returns_offered_isSet = false;
    m_extended_holiday_returns_offered_isValid = false;

    m_refund_method_isSet = false;
    m_refund_method_isValid = false;

    m_restocking_fee_percentage_isSet = false;
    m_restocking_fee_percentage_isValid = false;

    m_return_instructions_isSet = false;
    m_return_instructions_isValid = false;

    m_return_method_isSet = false;
    m_return_method_isValid = false;

    m_return_period_isSet = false;
    m_return_period_isValid = false;

    m_return_shipping_cost_payer_isSet = false;
    m_return_shipping_cost_payer_isValid = false;

    m_returns_accepted_isSet = false;
    m_returns_accepted_isValid = false;
}

void OAIItemReturnTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemReturnTerms::fromJsonObject(QJsonObject json) {

    m_extended_holiday_returns_offered_isValid = ::OpenAPI::fromJsonValue(m_extended_holiday_returns_offered, json[QString("extendedHolidayReturnsOffered")]);
    m_extended_holiday_returns_offered_isSet = !json[QString("extendedHolidayReturnsOffered")].isNull() && m_extended_holiday_returns_offered_isValid;

    m_refund_method_isValid = ::OpenAPI::fromJsonValue(m_refund_method, json[QString("refundMethod")]);
    m_refund_method_isSet = !json[QString("refundMethod")].isNull() && m_refund_method_isValid;

    m_restocking_fee_percentage_isValid = ::OpenAPI::fromJsonValue(m_restocking_fee_percentage, json[QString("restockingFeePercentage")]);
    m_restocking_fee_percentage_isSet = !json[QString("restockingFeePercentage")].isNull() && m_restocking_fee_percentage_isValid;

    m_return_instructions_isValid = ::OpenAPI::fromJsonValue(m_return_instructions, json[QString("returnInstructions")]);
    m_return_instructions_isSet = !json[QString("returnInstructions")].isNull() && m_return_instructions_isValid;

    m_return_method_isValid = ::OpenAPI::fromJsonValue(m_return_method, json[QString("returnMethod")]);
    m_return_method_isSet = !json[QString("returnMethod")].isNull() && m_return_method_isValid;

    m_return_period_isValid = ::OpenAPI::fromJsonValue(m_return_period, json[QString("returnPeriod")]);
    m_return_period_isSet = !json[QString("returnPeriod")].isNull() && m_return_period_isValid;

    m_return_shipping_cost_payer_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_cost_payer, json[QString("returnShippingCostPayer")]);
    m_return_shipping_cost_payer_isSet = !json[QString("returnShippingCostPayer")].isNull() && m_return_shipping_cost_payer_isValid;

    m_returns_accepted_isValid = ::OpenAPI::fromJsonValue(m_returns_accepted, json[QString("returnsAccepted")]);
    m_returns_accepted_isSet = !json[QString("returnsAccepted")].isNull() && m_returns_accepted_isValid;
}

QString OAIItemReturnTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemReturnTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_extended_holiday_returns_offered_isSet) {
        obj.insert(QString("extendedHolidayReturnsOffered"), ::OpenAPI::toJsonValue(m_extended_holiday_returns_offered));
    }
    if (m_refund_method_isSet) {
        obj.insert(QString("refundMethod"), ::OpenAPI::toJsonValue(m_refund_method));
    }
    if (m_restocking_fee_percentage_isSet) {
        obj.insert(QString("restockingFeePercentage"), ::OpenAPI::toJsonValue(m_restocking_fee_percentage));
    }
    if (m_return_instructions_isSet) {
        obj.insert(QString("returnInstructions"), ::OpenAPI::toJsonValue(m_return_instructions));
    }
    if (m_return_method_isSet) {
        obj.insert(QString("returnMethod"), ::OpenAPI::toJsonValue(m_return_method));
    }
    if (m_return_period.isSet()) {
        obj.insert(QString("returnPeriod"), ::OpenAPI::toJsonValue(m_return_period));
    }
    if (m_return_shipping_cost_payer_isSet) {
        obj.insert(QString("returnShippingCostPayer"), ::OpenAPI::toJsonValue(m_return_shipping_cost_payer));
    }
    if (m_returns_accepted_isSet) {
        obj.insert(QString("returnsAccepted"), ::OpenAPI::toJsonValue(m_returns_accepted));
    }
    return obj;
}

bool OAIItemReturnTerms::isExtendedHolidayReturnsOffered() const {
    return m_extended_holiday_returns_offered;
}
void OAIItemReturnTerms::setExtendedHolidayReturnsOffered(const bool &extended_holiday_returns_offered) {
    m_extended_holiday_returns_offered = extended_holiday_returns_offered;
    m_extended_holiday_returns_offered_isSet = true;
}

bool OAIItemReturnTerms::is_extended_holiday_returns_offered_Set() const{
    return m_extended_holiday_returns_offered_isSet;
}

bool OAIItemReturnTerms::is_extended_holiday_returns_offered_Valid() const{
    return m_extended_holiday_returns_offered_isValid;
}

QString OAIItemReturnTerms::getRefundMethod() const {
    return m_refund_method;
}
void OAIItemReturnTerms::setRefundMethod(const QString &refund_method) {
    m_refund_method = refund_method;
    m_refund_method_isSet = true;
}

bool OAIItemReturnTerms::is_refund_method_Set() const{
    return m_refund_method_isSet;
}

bool OAIItemReturnTerms::is_refund_method_Valid() const{
    return m_refund_method_isValid;
}

QString OAIItemReturnTerms::getRestockingFeePercentage() const {
    return m_restocking_fee_percentage;
}
void OAIItemReturnTerms::setRestockingFeePercentage(const QString &restocking_fee_percentage) {
    m_restocking_fee_percentage = restocking_fee_percentage;
    m_restocking_fee_percentage_isSet = true;
}

bool OAIItemReturnTerms::is_restocking_fee_percentage_Set() const{
    return m_restocking_fee_percentage_isSet;
}

bool OAIItemReturnTerms::is_restocking_fee_percentage_Valid() const{
    return m_restocking_fee_percentage_isValid;
}

QString OAIItemReturnTerms::getReturnInstructions() const {
    return m_return_instructions;
}
void OAIItemReturnTerms::setReturnInstructions(const QString &return_instructions) {
    m_return_instructions = return_instructions;
    m_return_instructions_isSet = true;
}

bool OAIItemReturnTerms::is_return_instructions_Set() const{
    return m_return_instructions_isSet;
}

bool OAIItemReturnTerms::is_return_instructions_Valid() const{
    return m_return_instructions_isValid;
}

QString OAIItemReturnTerms::getReturnMethod() const {
    return m_return_method;
}
void OAIItemReturnTerms::setReturnMethod(const QString &return_method) {
    m_return_method = return_method;
    m_return_method_isSet = true;
}

bool OAIItemReturnTerms::is_return_method_Set() const{
    return m_return_method_isSet;
}

bool OAIItemReturnTerms::is_return_method_Valid() const{
    return m_return_method_isValid;
}

OAITimeDuration OAIItemReturnTerms::getReturnPeriod() const {
    return m_return_period;
}
void OAIItemReturnTerms::setReturnPeriod(const OAITimeDuration &return_period) {
    m_return_period = return_period;
    m_return_period_isSet = true;
}

bool OAIItemReturnTerms::is_return_period_Set() const{
    return m_return_period_isSet;
}

bool OAIItemReturnTerms::is_return_period_Valid() const{
    return m_return_period_isValid;
}

QString OAIItemReturnTerms::getReturnShippingCostPayer() const {
    return m_return_shipping_cost_payer;
}
void OAIItemReturnTerms::setReturnShippingCostPayer(const QString &return_shipping_cost_payer) {
    m_return_shipping_cost_payer = return_shipping_cost_payer;
    m_return_shipping_cost_payer_isSet = true;
}

bool OAIItemReturnTerms::is_return_shipping_cost_payer_Set() const{
    return m_return_shipping_cost_payer_isSet;
}

bool OAIItemReturnTerms::is_return_shipping_cost_payer_Valid() const{
    return m_return_shipping_cost_payer_isValid;
}

bool OAIItemReturnTerms::isReturnsAccepted() const {
    return m_returns_accepted;
}
void OAIItemReturnTerms::setReturnsAccepted(const bool &returns_accepted) {
    m_returns_accepted = returns_accepted;
    m_returns_accepted_isSet = true;
}

bool OAIItemReturnTerms::is_returns_accepted_Set() const{
    return m_returns_accepted_isSet;
}

bool OAIItemReturnTerms::is_returns_accepted_Valid() const{
    return m_returns_accepted_isValid;
}

bool OAIItemReturnTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extended_holiday_returns_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restocking_fee_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_cost_payer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returns_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemReturnTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
