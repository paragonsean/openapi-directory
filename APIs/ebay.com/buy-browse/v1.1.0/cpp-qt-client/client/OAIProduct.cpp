/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_additional_images_isSet = false;
    m_additional_images_isValid = false;

    m_additional_product_identities_isSet = false;
    m_additional_product_identities_isValid = false;

    m_aspect_groups_isSet = false;
    m_aspect_groups_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_gtins_isSet = false;
    m_gtins_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_mpns_isSet = false;
    m_mpns_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_additional_images_isValid = ::OpenAPI::fromJsonValue(m_additional_images, json[QString("additionalImages")]);
    m_additional_images_isSet = !json[QString("additionalImages")].isNull() && m_additional_images_isValid;

    m_additional_product_identities_isValid = ::OpenAPI::fromJsonValue(m_additional_product_identities, json[QString("additionalProductIdentities")]);
    m_additional_product_identities_isSet = !json[QString("additionalProductIdentities")].isNull() && m_additional_product_identities_isValid;

    m_aspect_groups_isValid = ::OpenAPI::fromJsonValue(m_aspect_groups, json[QString("aspectGroups")]);
    m_aspect_groups_isSet = !json[QString("aspectGroups")].isNull() && m_aspect_groups_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gtins_isValid = ::OpenAPI::fromJsonValue(m_gtins, json[QString("gtins")]);
    m_gtins_isSet = !json[QString("gtins")].isNull() && m_gtins_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_mpns_isValid = ::OpenAPI::fromJsonValue(m_mpns, json[QString("mpns")]);
    m_mpns_isSet = !json[QString("mpns")].isNull() && m_mpns_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_images.size() > 0) {
        obj.insert(QString("additionalImages"), ::OpenAPI::toJsonValue(m_additional_images));
    }
    if (m_additional_product_identities.size() > 0) {
        obj.insert(QString("additionalProductIdentities"), ::OpenAPI::toJsonValue(m_additional_product_identities));
    }
    if (m_aspect_groups.size() > 0) {
        obj.insert(QString("aspectGroups"), ::OpenAPI::toJsonValue(m_aspect_groups));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gtins.size() > 0) {
        obj.insert(QString("gtins"), ::OpenAPI::toJsonValue(m_gtins));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_mpns.size() > 0) {
        obj.insert(QString("mpns"), ::OpenAPI::toJsonValue(m_mpns));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIImage> OAIProduct::getAdditionalImages() const {
    return m_additional_images;
}
void OAIProduct::setAdditionalImages(const QList<OAIImage> &additional_images) {
    m_additional_images = additional_images;
    m_additional_images_isSet = true;
}

bool OAIProduct::is_additional_images_Set() const{
    return m_additional_images_isSet;
}

bool OAIProduct::is_additional_images_Valid() const{
    return m_additional_images_isValid;
}

QList<OAIAdditionalProductIdentity> OAIProduct::getAdditionalProductIdentities() const {
    return m_additional_product_identities;
}
void OAIProduct::setAdditionalProductIdentities(const QList<OAIAdditionalProductIdentity> &additional_product_identities) {
    m_additional_product_identities = additional_product_identities;
    m_additional_product_identities_isSet = true;
}

bool OAIProduct::is_additional_product_identities_Set() const{
    return m_additional_product_identities_isSet;
}

bool OAIProduct::is_additional_product_identities_Valid() const{
    return m_additional_product_identities_isValid;
}

QList<OAIAspectGroup> OAIProduct::getAspectGroups() const {
    return m_aspect_groups;
}
void OAIProduct::setAspectGroups(const QList<OAIAspectGroup> &aspect_groups) {
    m_aspect_groups = aspect_groups;
    m_aspect_groups_isSet = true;
}

bool OAIProduct::is_aspect_groups_Set() const{
    return m_aspect_groups_isSet;
}

bool OAIProduct::is_aspect_groups_Valid() const{
    return m_aspect_groups_isValid;
}

QString OAIProduct::getBrand() const {
    return m_brand;
}
void OAIProduct::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProduct::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProduct::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIProduct::getGtins() const {
    return m_gtins;
}
void OAIProduct::setGtins(const QList<QString> &gtins) {
    m_gtins = gtins;
    m_gtins_isSet = true;
}

bool OAIProduct::is_gtins_Set() const{
    return m_gtins_isSet;
}

bool OAIProduct::is_gtins_Valid() const{
    return m_gtins_isValid;
}

OAIImage OAIProduct::getImage() const {
    return m_image;
}
void OAIProduct::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIProduct::is_image_Set() const{
    return m_image_isSet;
}

bool OAIProduct::is_image_Valid() const{
    return m_image_isValid;
}

QList<QString> OAIProduct::getMpns() const {
    return m_mpns;
}
void OAIProduct::setMpns(const QList<QString> &mpns) {
    m_mpns = mpns;
    m_mpns_isSet = true;
}

bool OAIProduct::is_mpns_Set() const{
    return m_mpns_isSet;
}

bool OAIProduct::is_mpns_Valid() const{
    return m_mpns_isValid;
}

QString OAIProduct::getTitle() const {
    return m_title;
}
void OAIProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProduct::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_product_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
