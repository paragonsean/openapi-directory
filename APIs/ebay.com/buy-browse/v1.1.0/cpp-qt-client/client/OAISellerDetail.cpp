/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellerDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellerDetail::OAISellerDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellerDetail::OAISellerDetail() {
    this->initializeModel();
}

OAISellerDetail::~OAISellerDetail() {}

void OAISellerDetail::initializeModel() {

    m_feedback_percentage_isSet = false;
    m_feedback_percentage_isValid = false;

    m_feedback_score_isSet = false;
    m_feedback_score_isValid = false;

    m_seller_account_type_isSet = false;
    m_seller_account_type_isValid = false;

    m_seller_legal_info_isSet = false;
    m_seller_legal_info_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISellerDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellerDetail::fromJsonObject(QJsonObject json) {

    m_feedback_percentage_isValid = ::OpenAPI::fromJsonValue(m_feedback_percentage, json[QString("feedbackPercentage")]);
    m_feedback_percentage_isSet = !json[QString("feedbackPercentage")].isNull() && m_feedback_percentage_isValid;

    m_feedback_score_isValid = ::OpenAPI::fromJsonValue(m_feedback_score, json[QString("feedbackScore")]);
    m_feedback_score_isSet = !json[QString("feedbackScore")].isNull() && m_feedback_score_isValid;

    m_seller_account_type_isValid = ::OpenAPI::fromJsonValue(m_seller_account_type, json[QString("sellerAccountType")]);
    m_seller_account_type_isSet = !json[QString("sellerAccountType")].isNull() && m_seller_account_type_isValid;

    m_seller_legal_info_isValid = ::OpenAPI::fromJsonValue(m_seller_legal_info, json[QString("sellerLegalInfo")]);
    m_seller_legal_info_isSet = !json[QString("sellerLegalInfo")].isNull() && m_seller_legal_info_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISellerDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellerDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_feedback_percentage_isSet) {
        obj.insert(QString("feedbackPercentage"), ::OpenAPI::toJsonValue(m_feedback_percentage));
    }
    if (m_feedback_score_isSet) {
        obj.insert(QString("feedbackScore"), ::OpenAPI::toJsonValue(m_feedback_score));
    }
    if (m_seller_account_type_isSet) {
        obj.insert(QString("sellerAccountType"), ::OpenAPI::toJsonValue(m_seller_account_type));
    }
    if (m_seller_legal_info.isSet()) {
        obj.insert(QString("sellerLegalInfo"), ::OpenAPI::toJsonValue(m_seller_legal_info));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAISellerDetail::getFeedbackPercentage() const {
    return m_feedback_percentage;
}
void OAISellerDetail::setFeedbackPercentage(const QString &feedback_percentage) {
    m_feedback_percentage = feedback_percentage;
    m_feedback_percentage_isSet = true;
}

bool OAISellerDetail::is_feedback_percentage_Set() const{
    return m_feedback_percentage_isSet;
}

bool OAISellerDetail::is_feedback_percentage_Valid() const{
    return m_feedback_percentage_isValid;
}

qint32 OAISellerDetail::getFeedbackScore() const {
    return m_feedback_score;
}
void OAISellerDetail::setFeedbackScore(const qint32 &feedback_score) {
    m_feedback_score = feedback_score;
    m_feedback_score_isSet = true;
}

bool OAISellerDetail::is_feedback_score_Set() const{
    return m_feedback_score_isSet;
}

bool OAISellerDetail::is_feedback_score_Valid() const{
    return m_feedback_score_isValid;
}

QString OAISellerDetail::getSellerAccountType() const {
    return m_seller_account_type;
}
void OAISellerDetail::setSellerAccountType(const QString &seller_account_type) {
    m_seller_account_type = seller_account_type;
    m_seller_account_type_isSet = true;
}

bool OAISellerDetail::is_seller_account_type_Set() const{
    return m_seller_account_type_isSet;
}

bool OAISellerDetail::is_seller_account_type_Valid() const{
    return m_seller_account_type_isValid;
}

OAISellerLegalInfo OAISellerDetail::getSellerLegalInfo() const {
    return m_seller_legal_info;
}
void OAISellerDetail::setSellerLegalInfo(const OAISellerLegalInfo &seller_legal_info) {
    m_seller_legal_info = seller_legal_info;
    m_seller_legal_info_isSet = true;
}

bool OAISellerDetail::is_seller_legal_info_Set() const{
    return m_seller_legal_info_isSet;
}

bool OAISellerDetail::is_seller_legal_info_Valid() const{
    return m_seller_legal_info_isValid;
}

QString OAISellerDetail::getUsername() const {
    return m_username;
}
void OAISellerDetail::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISellerDetail::is_username_Set() const{
    return m_username_isSet;
}

bool OAISellerDetail::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISellerDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feedback_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_legal_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellerDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
