/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchPagedCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchPagedCollection::OAISearchPagedCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchPagedCollection::OAISearchPagedCollection() {
    this->initializeModel();
}

OAISearchPagedCollection::~OAISearchPagedCollection() {}

void OAISearchPagedCollection::initializeModel() {

    m_auto_corrections_isSet = false;
    m_auto_corrections_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_item_summaries_isSet = false;
    m_item_summaries_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_refinement_isSet = false;
    m_refinement_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAISearchPagedCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchPagedCollection::fromJsonObject(QJsonObject json) {

    m_auto_corrections_isValid = ::OpenAPI::fromJsonValue(m_auto_corrections, json[QString("autoCorrections")]);
    m_auto_corrections_isSet = !json[QString("autoCorrections")].isNull() && m_auto_corrections_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_item_summaries_isValid = ::OpenAPI::fromJsonValue(m_item_summaries, json[QString("itemSummaries")]);
    m_item_summaries_isSet = !json[QString("itemSummaries")].isNull() && m_item_summaries_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_refinement_isValid = ::OpenAPI::fromJsonValue(m_refinement, json[QString("refinement")]);
    m_refinement_isSet = !json[QString("refinement")].isNull() && m_refinement_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAISearchPagedCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchPagedCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_corrections.isSet()) {
        obj.insert(QString("autoCorrections"), ::OpenAPI::toJsonValue(m_auto_corrections));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_item_summaries.size() > 0) {
        obj.insert(QString("itemSummaries"), ::OpenAPI::toJsonValue(m_item_summaries));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_refinement.isSet()) {
        obj.insert(QString("refinement"), ::OpenAPI::toJsonValue(m_refinement));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIAutoCorrections OAISearchPagedCollection::getAutoCorrections() const {
    return m_auto_corrections;
}
void OAISearchPagedCollection::setAutoCorrections(const OAIAutoCorrections &auto_corrections) {
    m_auto_corrections = auto_corrections;
    m_auto_corrections_isSet = true;
}

bool OAISearchPagedCollection::is_auto_corrections_Set() const{
    return m_auto_corrections_isSet;
}

bool OAISearchPagedCollection::is_auto_corrections_Valid() const{
    return m_auto_corrections_isValid;
}

QString OAISearchPagedCollection::getHref() const {
    return m_href;
}
void OAISearchPagedCollection::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAISearchPagedCollection::is_href_Set() const{
    return m_href_isSet;
}

bool OAISearchPagedCollection::is_href_Valid() const{
    return m_href_isValid;
}

QList<OAIItemSummary> OAISearchPagedCollection::getItemSummaries() const {
    return m_item_summaries;
}
void OAISearchPagedCollection::setItemSummaries(const QList<OAIItemSummary> &item_summaries) {
    m_item_summaries = item_summaries;
    m_item_summaries_isSet = true;
}

bool OAISearchPagedCollection::is_item_summaries_Set() const{
    return m_item_summaries_isSet;
}

bool OAISearchPagedCollection::is_item_summaries_Valid() const{
    return m_item_summaries_isValid;
}

qint32 OAISearchPagedCollection::getLimit() const {
    return m_limit;
}
void OAISearchPagedCollection::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchPagedCollection::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchPagedCollection::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAISearchPagedCollection::getNext() const {
    return m_next;
}
void OAISearchPagedCollection::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAISearchPagedCollection::is_next_Set() const{
    return m_next_isSet;
}

bool OAISearchPagedCollection::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAISearchPagedCollection::getOffset() const {
    return m_offset;
}
void OAISearchPagedCollection::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISearchPagedCollection::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISearchPagedCollection::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAISearchPagedCollection::getPrev() const {
    return m_prev;
}
void OAISearchPagedCollection::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAISearchPagedCollection::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAISearchPagedCollection::is_prev_Valid() const{
    return m_prev_isValid;
}

OAIRefinement OAISearchPagedCollection::getRefinement() const {
    return m_refinement;
}
void OAISearchPagedCollection::setRefinement(const OAIRefinement &refinement) {
    m_refinement = refinement;
    m_refinement_isSet = true;
}

bool OAISearchPagedCollection::is_refinement_Set() const{
    return m_refinement_isSet;
}

bool OAISearchPagedCollection::is_refinement_Valid() const{
    return m_refinement_isValid;
}

qint32 OAISearchPagedCollection::getTotal() const {
    return m_total;
}
void OAISearchPagedCollection::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISearchPagedCollection::is_total_Set() const{
    return m_total_isSet;
}

bool OAISearchPagedCollection::is_total_Valid() const{
    return m_total_isValid;
}

QList<OAIError> OAISearchPagedCollection::getWarnings() const {
    return m_warnings;
}
void OAISearchPagedCollection::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAISearchPagedCollection::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAISearchPagedCollection::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAISearchPagedCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_corrections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refinement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchPagedCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
