/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIItemApi_H
#define OAI_OAIItemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompatibilityPayload.h"
#include "OAICompatibilityResponse.h"
#include "OAIItem.h"
#include "OAIItemGroup.h"
#include "OAIItems.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIItemApi : public QObject {
    Q_OBJECT

public:
    OAIItemApi(const int timeOut = 0);
    ~OAIItemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  x_ebay_c_marketplace_id QString [required]
    * @param[in]  body OAICompatibilityPayload [optional]
    */
    virtual void checkCompatibility(const QString &item_id, const QString &x_ebay_c_marketplace_id, const ::OpenAPI::OptionalParam<OAICompatibilityPayload> &body = ::OpenAPI::OptionalParam<OAICompatibilityPayload>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  fieldgroups QString [optional]
    */
    virtual void getItem(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &fieldgroups = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  legacy_item_id QString [required]
    * @param[in]  fieldgroups QString [optional]
    * @param[in]  legacy_variation_id QString [optional]
    * @param[in]  legacy_variation_sku QString [optional]
    */
    virtual void getItemByLegacyId(const QString &legacy_item_id, const ::OpenAPI::OptionalParam<QString> &fieldgroups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &legacy_variation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &legacy_variation_sku = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_ids QString [optional]
    * @param[in]  item_group_ids QString [optional]
    */
    virtual void getItems(const ::OpenAPI::OptionalParam<QString> &item_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_group_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_group_id QString [required]
    */
    virtual void getItemsByItemGroup(const QString &item_group_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkCompatibilityCallback(OAIHttpRequestWorker *worker);
    void getItemCallback(OAIHttpRequestWorker *worker);
    void getItemByLegacyIdCallback(OAIHttpRequestWorker *worker);
    void getItemsCallback(OAIHttpRequestWorker *worker);
    void getItemsByItemGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkCompatibilitySignal(OAICompatibilityResponse summary);
    void getItemSignal(OAIItem summary);
    void getItemByLegacyIdSignal(OAIItem summary);
    void getItemsSignal(OAIItems summary);
    void getItemsByItemGroupSignal(OAIItemGroup summary);


    void checkCompatibilitySignalFull(OAIHttpRequestWorker *worker, OAICompatibilityResponse summary);
    void getItemSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);
    void getItemByLegacyIdSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);
    void getItemsSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void getItemsByItemGroupSignalFull(OAIHttpRequestWorker *worker, OAIItemGroup summary);

    Q_DECL_DEPRECATED_X("Use checkCompatibilitySignalError() instead")
    void checkCompatibilitySignalE(OAICompatibilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCompatibilitySignalError(OAICompatibilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalError() instead")
    void getItemSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalError(OAIItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemByLegacyIdSignalError() instead")
    void getItemByLegacyIdSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemByLegacyIdSignalError(OAIItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsSignalError() instead")
    void getItemsSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsByItemGroupSignalError() instead")
    void getItemsByItemGroupSignalE(OAIItemGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsByItemGroupSignalError(OAIItemGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkCompatibilitySignalErrorFull() instead")
    void checkCompatibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCompatibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalErrorFull() instead")
    void getItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemByLegacyIdSignalErrorFull() instead")
    void getItemByLegacyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemByLegacyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsSignalErrorFull() instead")
    void getItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsByItemGroupSignalErrorFull() instead")
    void getItemsByItemGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsByItemGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
