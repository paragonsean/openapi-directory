/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemSummary::OAIItemSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemSummary::OAIItemSummary() {
    this->initializeModel();
}

OAIItemSummary::~OAIItemSummary() {}

void OAIItemSummary::initializeModel() {

    m_additional_images_isSet = false;
    m_additional_images_isValid = false;

    m_adult_only_isSet = false;
    m_adult_only_isValid = false;

    m_available_coupons_isSet = false;
    m_available_coupons_isValid = false;

    m_bid_count_isSet = false;
    m_bid_count_isValid = false;

    m_buying_options_isSet = false;
    m_buying_options_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_compatibility_match_isSet = false;
    m_compatibility_match_isValid = false;

    m_compatibility_properties_isSet = false;
    m_compatibility_properties_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_condition_id_isSet = false;
    m_condition_id_isValid = false;

    m_current_bid_price_isSet = false;
    m_current_bid_price_isValid = false;

    m_distance_from_pickup_location_isSet = false;
    m_distance_from_pickup_location_isValid = false;

    m_energy_efficiency_class_isSet = false;
    m_energy_efficiency_class_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_item_affiliate_web_url_isSet = false;
    m_item_affiliate_web_url_isValid = false;

    m_item_group_href_isSet = false;
    m_item_group_href_isValid = false;

    m_item_group_type_isSet = false;
    m_item_group_type_isValid = false;

    m_item_href_isSet = false;
    m_item_href_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_location_isSet = false;
    m_item_location_isValid = false;

    m_item_web_url_isSet = false;
    m_item_web_url_isValid = false;

    m_legacy_item_id_isSet = false;
    m_legacy_item_id_isValid = false;

    m_marketing_price_isSet = false;
    m_marketing_price_isValid = false;

    m_pickup_options_isSet = false;
    m_pickup_options_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_display_condition_isSet = false;
    m_price_display_condition_isValid = false;

    m_qualified_programs_isSet = false;
    m_qualified_programs_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_shipping_options_isSet = false;
    m_shipping_options_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_thumbnail_images_isSet = false;
    m_thumbnail_images_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_pricing_measure_isSet = false;
    m_unit_pricing_measure_isValid = false;
}

void OAIItemSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemSummary::fromJsonObject(QJsonObject json) {

    m_additional_images_isValid = ::OpenAPI::fromJsonValue(m_additional_images, json[QString("additionalImages")]);
    m_additional_images_isSet = !json[QString("additionalImages")].isNull() && m_additional_images_isValid;

    m_adult_only_isValid = ::OpenAPI::fromJsonValue(m_adult_only, json[QString("adultOnly")]);
    m_adult_only_isSet = !json[QString("adultOnly")].isNull() && m_adult_only_isValid;

    m_available_coupons_isValid = ::OpenAPI::fromJsonValue(m_available_coupons, json[QString("availableCoupons")]);
    m_available_coupons_isSet = !json[QString("availableCoupons")].isNull() && m_available_coupons_isValid;

    m_bid_count_isValid = ::OpenAPI::fromJsonValue(m_bid_count, json[QString("bidCount")]);
    m_bid_count_isSet = !json[QString("bidCount")].isNull() && m_bid_count_isValid;

    m_buying_options_isValid = ::OpenAPI::fromJsonValue(m_buying_options, json[QString("buyingOptions")]);
    m_buying_options_isSet = !json[QString("buyingOptions")].isNull() && m_buying_options_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_compatibility_match_isValid = ::OpenAPI::fromJsonValue(m_compatibility_match, json[QString("compatibilityMatch")]);
    m_compatibility_match_isSet = !json[QString("compatibilityMatch")].isNull() && m_compatibility_match_isValid;

    m_compatibility_properties_isValid = ::OpenAPI::fromJsonValue(m_compatibility_properties, json[QString("compatibilityProperties")]);
    m_compatibility_properties_isSet = !json[QString("compatibilityProperties")].isNull() && m_compatibility_properties_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_condition_id_isValid = ::OpenAPI::fromJsonValue(m_condition_id, json[QString("conditionId")]);
    m_condition_id_isSet = !json[QString("conditionId")].isNull() && m_condition_id_isValid;

    m_current_bid_price_isValid = ::OpenAPI::fromJsonValue(m_current_bid_price, json[QString("currentBidPrice")]);
    m_current_bid_price_isSet = !json[QString("currentBidPrice")].isNull() && m_current_bid_price_isValid;

    m_distance_from_pickup_location_isValid = ::OpenAPI::fromJsonValue(m_distance_from_pickup_location, json[QString("distanceFromPickupLocation")]);
    m_distance_from_pickup_location_isSet = !json[QString("distanceFromPickupLocation")].isNull() && m_distance_from_pickup_location_isValid;

    m_energy_efficiency_class_isValid = ::OpenAPI::fromJsonValue(m_energy_efficiency_class, json[QString("energyEfficiencyClass")]);
    m_energy_efficiency_class_isSet = !json[QString("energyEfficiencyClass")].isNull() && m_energy_efficiency_class_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_item_affiliate_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_affiliate_web_url, json[QString("itemAffiliateWebUrl")]);
    m_item_affiliate_web_url_isSet = !json[QString("itemAffiliateWebUrl")].isNull() && m_item_affiliate_web_url_isValid;

    m_item_group_href_isValid = ::OpenAPI::fromJsonValue(m_item_group_href, json[QString("itemGroupHref")]);
    m_item_group_href_isSet = !json[QString("itemGroupHref")].isNull() && m_item_group_href_isValid;

    m_item_group_type_isValid = ::OpenAPI::fromJsonValue(m_item_group_type, json[QString("itemGroupType")]);
    m_item_group_type_isSet = !json[QString("itemGroupType")].isNull() && m_item_group_type_isValid;

    m_item_href_isValid = ::OpenAPI::fromJsonValue(m_item_href, json[QString("itemHref")]);
    m_item_href_isSet = !json[QString("itemHref")].isNull() && m_item_href_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_item_location_isValid = ::OpenAPI::fromJsonValue(m_item_location, json[QString("itemLocation")]);
    m_item_location_isSet = !json[QString("itemLocation")].isNull() && m_item_location_isValid;

    m_item_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_web_url, json[QString("itemWebUrl")]);
    m_item_web_url_isSet = !json[QString("itemWebUrl")].isNull() && m_item_web_url_isValid;

    m_legacy_item_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_item_id, json[QString("legacyItemId")]);
    m_legacy_item_id_isSet = !json[QString("legacyItemId")].isNull() && m_legacy_item_id_isValid;

    m_marketing_price_isValid = ::OpenAPI::fromJsonValue(m_marketing_price, json[QString("marketingPrice")]);
    m_marketing_price_isSet = !json[QString("marketingPrice")].isNull() && m_marketing_price_isValid;

    m_pickup_options_isValid = ::OpenAPI::fromJsonValue(m_pickup_options, json[QString("pickupOptions")]);
    m_pickup_options_isSet = !json[QString("pickupOptions")].isNull() && m_pickup_options_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_display_condition_isValid = ::OpenAPI::fromJsonValue(m_price_display_condition, json[QString("priceDisplayCondition")]);
    m_price_display_condition_isSet = !json[QString("priceDisplayCondition")].isNull() && m_price_display_condition_isValid;

    m_qualified_programs_isValid = ::OpenAPI::fromJsonValue(m_qualified_programs, json[QString("qualifiedPrograms")]);
    m_qualified_programs_isSet = !json[QString("qualifiedPrograms")].isNull() && m_qualified_programs_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_shipping_options_isValid = ::OpenAPI::fromJsonValue(m_shipping_options, json[QString("shippingOptions")]);
    m_shipping_options_isSet = !json[QString("shippingOptions")].isNull() && m_shipping_options_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_thumbnail_images_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_images, json[QString("thumbnailImages")]);
    m_thumbnail_images_isSet = !json[QString("thumbnailImages")].isNull() && m_thumbnail_images_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_unit_pricing_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_pricing_measure, json[QString("unitPricingMeasure")]);
    m_unit_pricing_measure_isSet = !json[QString("unitPricingMeasure")].isNull() && m_unit_pricing_measure_isValid;
}

QString OAIItemSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_images.size() > 0) {
        obj.insert(QString("additionalImages"), ::OpenAPI::toJsonValue(m_additional_images));
    }
    if (m_adult_only_isSet) {
        obj.insert(QString("adultOnly"), ::OpenAPI::toJsonValue(m_adult_only));
    }
    if (m_available_coupons_isSet) {
        obj.insert(QString("availableCoupons"), ::OpenAPI::toJsonValue(m_available_coupons));
    }
    if (m_bid_count_isSet) {
        obj.insert(QString("bidCount"), ::OpenAPI::toJsonValue(m_bid_count));
    }
    if (m_buying_options.size() > 0) {
        obj.insert(QString("buyingOptions"), ::OpenAPI::toJsonValue(m_buying_options));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_compatibility_match_isSet) {
        obj.insert(QString("compatibilityMatch"), ::OpenAPI::toJsonValue(m_compatibility_match));
    }
    if (m_compatibility_properties.size() > 0) {
        obj.insert(QString("compatibilityProperties"), ::OpenAPI::toJsonValue(m_compatibility_properties));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_condition_id_isSet) {
        obj.insert(QString("conditionId"), ::OpenAPI::toJsonValue(m_condition_id));
    }
    if (m_current_bid_price.isSet()) {
        obj.insert(QString("currentBidPrice"), ::OpenAPI::toJsonValue(m_current_bid_price));
    }
    if (m_distance_from_pickup_location.isSet()) {
        obj.insert(QString("distanceFromPickupLocation"), ::OpenAPI::toJsonValue(m_distance_from_pickup_location));
    }
    if (m_energy_efficiency_class_isSet) {
        obj.insert(QString("energyEfficiencyClass"), ::OpenAPI::toJsonValue(m_energy_efficiency_class));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_item_affiliate_web_url_isSet) {
        obj.insert(QString("itemAffiliateWebUrl"), ::OpenAPI::toJsonValue(m_item_affiliate_web_url));
    }
    if (m_item_group_href_isSet) {
        obj.insert(QString("itemGroupHref"), ::OpenAPI::toJsonValue(m_item_group_href));
    }
    if (m_item_group_type_isSet) {
        obj.insert(QString("itemGroupType"), ::OpenAPI::toJsonValue(m_item_group_type));
    }
    if (m_item_href_isSet) {
        obj.insert(QString("itemHref"), ::OpenAPI::toJsonValue(m_item_href));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_location.isSet()) {
        obj.insert(QString("itemLocation"), ::OpenAPI::toJsonValue(m_item_location));
    }
    if (m_item_web_url_isSet) {
        obj.insert(QString("itemWebUrl"), ::OpenAPI::toJsonValue(m_item_web_url));
    }
    if (m_legacy_item_id_isSet) {
        obj.insert(QString("legacyItemId"), ::OpenAPI::toJsonValue(m_legacy_item_id));
    }
    if (m_marketing_price.isSet()) {
        obj.insert(QString("marketingPrice"), ::OpenAPI::toJsonValue(m_marketing_price));
    }
    if (m_pickup_options.size() > 0) {
        obj.insert(QString("pickupOptions"), ::OpenAPI::toJsonValue(m_pickup_options));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_display_condition_isSet) {
        obj.insert(QString("priceDisplayCondition"), ::OpenAPI::toJsonValue(m_price_display_condition));
    }
    if (m_qualified_programs.size() > 0) {
        obj.insert(QString("qualifiedPrograms"), ::OpenAPI::toJsonValue(m_qualified_programs));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_shipping_options.size() > 0) {
        obj.insert(QString("shippingOptions"), ::OpenAPI::toJsonValue(m_shipping_options));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_thumbnail_images.size() > 0) {
        obj.insert(QString("thumbnailImages"), ::OpenAPI::toJsonValue(m_thumbnail_images));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_pricing_measure_isSet) {
        obj.insert(QString("unitPricingMeasure"), ::OpenAPI::toJsonValue(m_unit_pricing_measure));
    }
    return obj;
}

QList<OAIImage> OAIItemSummary::getAdditionalImages() const {
    return m_additional_images;
}
void OAIItemSummary::setAdditionalImages(const QList<OAIImage> &additional_images) {
    m_additional_images = additional_images;
    m_additional_images_isSet = true;
}

bool OAIItemSummary::is_additional_images_Set() const{
    return m_additional_images_isSet;
}

bool OAIItemSummary::is_additional_images_Valid() const{
    return m_additional_images_isValid;
}

bool OAIItemSummary::isAdultOnly() const {
    return m_adult_only;
}
void OAIItemSummary::setAdultOnly(const bool &adult_only) {
    m_adult_only = adult_only;
    m_adult_only_isSet = true;
}

bool OAIItemSummary::is_adult_only_Set() const{
    return m_adult_only_isSet;
}

bool OAIItemSummary::is_adult_only_Valid() const{
    return m_adult_only_isValid;
}

bool OAIItemSummary::isAvailableCoupons() const {
    return m_available_coupons;
}
void OAIItemSummary::setAvailableCoupons(const bool &available_coupons) {
    m_available_coupons = available_coupons;
    m_available_coupons_isSet = true;
}

bool OAIItemSummary::is_available_coupons_Set() const{
    return m_available_coupons_isSet;
}

bool OAIItemSummary::is_available_coupons_Valid() const{
    return m_available_coupons_isValid;
}

qint32 OAIItemSummary::getBidCount() const {
    return m_bid_count;
}
void OAIItemSummary::setBidCount(const qint32 &bid_count) {
    m_bid_count = bid_count;
    m_bid_count_isSet = true;
}

bool OAIItemSummary::is_bid_count_Set() const{
    return m_bid_count_isSet;
}

bool OAIItemSummary::is_bid_count_Valid() const{
    return m_bid_count_isValid;
}

QList<QString> OAIItemSummary::getBuyingOptions() const {
    return m_buying_options;
}
void OAIItemSummary::setBuyingOptions(const QList<QString> &buying_options) {
    m_buying_options = buying_options;
    m_buying_options_isSet = true;
}

bool OAIItemSummary::is_buying_options_Set() const{
    return m_buying_options_isSet;
}

bool OAIItemSummary::is_buying_options_Valid() const{
    return m_buying_options_isValid;
}

QList<OAICategory> OAIItemSummary::getCategories() const {
    return m_categories;
}
void OAIItemSummary::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIItemSummary::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIItemSummary::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIItemSummary::getCompatibilityMatch() const {
    return m_compatibility_match;
}
void OAIItemSummary::setCompatibilityMatch(const QString &compatibility_match) {
    m_compatibility_match = compatibility_match;
    m_compatibility_match_isSet = true;
}

bool OAIItemSummary::is_compatibility_match_Set() const{
    return m_compatibility_match_isSet;
}

bool OAIItemSummary::is_compatibility_match_Valid() const{
    return m_compatibility_match_isValid;
}

QList<OAICompatibilityProperty> OAIItemSummary::getCompatibilityProperties() const {
    return m_compatibility_properties;
}
void OAIItemSummary::setCompatibilityProperties(const QList<OAICompatibilityProperty> &compatibility_properties) {
    m_compatibility_properties = compatibility_properties;
    m_compatibility_properties_isSet = true;
}

bool OAIItemSummary::is_compatibility_properties_Set() const{
    return m_compatibility_properties_isSet;
}

bool OAIItemSummary::is_compatibility_properties_Valid() const{
    return m_compatibility_properties_isValid;
}

QString OAIItemSummary::getCondition() const {
    return m_condition;
}
void OAIItemSummary::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIItemSummary::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIItemSummary::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIItemSummary::getConditionId() const {
    return m_condition_id;
}
void OAIItemSummary::setConditionId(const QString &condition_id) {
    m_condition_id = condition_id;
    m_condition_id_isSet = true;
}

bool OAIItemSummary::is_condition_id_Set() const{
    return m_condition_id_isSet;
}

bool OAIItemSummary::is_condition_id_Valid() const{
    return m_condition_id_isValid;
}

OAIConvertedAmount OAIItemSummary::getCurrentBidPrice() const {
    return m_current_bid_price;
}
void OAIItemSummary::setCurrentBidPrice(const OAIConvertedAmount &current_bid_price) {
    m_current_bid_price = current_bid_price;
    m_current_bid_price_isSet = true;
}

bool OAIItemSummary::is_current_bid_price_Set() const{
    return m_current_bid_price_isSet;
}

bool OAIItemSummary::is_current_bid_price_Valid() const{
    return m_current_bid_price_isValid;
}

OAITargetLocation OAIItemSummary::getDistanceFromPickupLocation() const {
    return m_distance_from_pickup_location;
}
void OAIItemSummary::setDistanceFromPickupLocation(const OAITargetLocation &distance_from_pickup_location) {
    m_distance_from_pickup_location = distance_from_pickup_location;
    m_distance_from_pickup_location_isSet = true;
}

bool OAIItemSummary::is_distance_from_pickup_location_Set() const{
    return m_distance_from_pickup_location_isSet;
}

bool OAIItemSummary::is_distance_from_pickup_location_Valid() const{
    return m_distance_from_pickup_location_isValid;
}

QString OAIItemSummary::getEnergyEfficiencyClass() const {
    return m_energy_efficiency_class;
}
void OAIItemSummary::setEnergyEfficiencyClass(const QString &energy_efficiency_class) {
    m_energy_efficiency_class = energy_efficiency_class;
    m_energy_efficiency_class_isSet = true;
}

bool OAIItemSummary::is_energy_efficiency_class_Set() const{
    return m_energy_efficiency_class_isSet;
}

bool OAIItemSummary::is_energy_efficiency_class_Valid() const{
    return m_energy_efficiency_class_isValid;
}

QString OAIItemSummary::getEpid() const {
    return m_epid;
}
void OAIItemSummary::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIItemSummary::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIItemSummary::is_epid_Valid() const{
    return m_epid_isValid;
}

OAIImage OAIItemSummary::getImage() const {
    return m_image;
}
void OAIItemSummary::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIItemSummary::is_image_Set() const{
    return m_image_isSet;
}

bool OAIItemSummary::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIItemSummary::getItemAffiliateWebUrl() const {
    return m_item_affiliate_web_url;
}
void OAIItemSummary::setItemAffiliateWebUrl(const QString &item_affiliate_web_url) {
    m_item_affiliate_web_url = item_affiliate_web_url;
    m_item_affiliate_web_url_isSet = true;
}

bool OAIItemSummary::is_item_affiliate_web_url_Set() const{
    return m_item_affiliate_web_url_isSet;
}

bool OAIItemSummary::is_item_affiliate_web_url_Valid() const{
    return m_item_affiliate_web_url_isValid;
}

QString OAIItemSummary::getItemGroupHref() const {
    return m_item_group_href;
}
void OAIItemSummary::setItemGroupHref(const QString &item_group_href) {
    m_item_group_href = item_group_href;
    m_item_group_href_isSet = true;
}

bool OAIItemSummary::is_item_group_href_Set() const{
    return m_item_group_href_isSet;
}

bool OAIItemSummary::is_item_group_href_Valid() const{
    return m_item_group_href_isValid;
}

QString OAIItemSummary::getItemGroupType() const {
    return m_item_group_type;
}
void OAIItemSummary::setItemGroupType(const QString &item_group_type) {
    m_item_group_type = item_group_type;
    m_item_group_type_isSet = true;
}

bool OAIItemSummary::is_item_group_type_Set() const{
    return m_item_group_type_isSet;
}

bool OAIItemSummary::is_item_group_type_Valid() const{
    return m_item_group_type_isValid;
}

QString OAIItemSummary::getItemHref() const {
    return m_item_href;
}
void OAIItemSummary::setItemHref(const QString &item_href) {
    m_item_href = item_href;
    m_item_href_isSet = true;
}

bool OAIItemSummary::is_item_href_Set() const{
    return m_item_href_isSet;
}

bool OAIItemSummary::is_item_href_Valid() const{
    return m_item_href_isValid;
}

QString OAIItemSummary::getItemId() const {
    return m_item_id;
}
void OAIItemSummary::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItemSummary::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItemSummary::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAIItemLocationImpl OAIItemSummary::getItemLocation() const {
    return m_item_location;
}
void OAIItemSummary::setItemLocation(const OAIItemLocationImpl &item_location) {
    m_item_location = item_location;
    m_item_location_isSet = true;
}

bool OAIItemSummary::is_item_location_Set() const{
    return m_item_location_isSet;
}

bool OAIItemSummary::is_item_location_Valid() const{
    return m_item_location_isValid;
}

QString OAIItemSummary::getItemWebUrl() const {
    return m_item_web_url;
}
void OAIItemSummary::setItemWebUrl(const QString &item_web_url) {
    m_item_web_url = item_web_url;
    m_item_web_url_isSet = true;
}

bool OAIItemSummary::is_item_web_url_Set() const{
    return m_item_web_url_isSet;
}

bool OAIItemSummary::is_item_web_url_Valid() const{
    return m_item_web_url_isValid;
}

QString OAIItemSummary::getLegacyItemId() const {
    return m_legacy_item_id;
}
void OAIItemSummary::setLegacyItemId(const QString &legacy_item_id) {
    m_legacy_item_id = legacy_item_id;
    m_legacy_item_id_isSet = true;
}

bool OAIItemSummary::is_legacy_item_id_Set() const{
    return m_legacy_item_id_isSet;
}

bool OAIItemSummary::is_legacy_item_id_Valid() const{
    return m_legacy_item_id_isValid;
}

OAIMarketingPrice OAIItemSummary::getMarketingPrice() const {
    return m_marketing_price;
}
void OAIItemSummary::setMarketingPrice(const OAIMarketingPrice &marketing_price) {
    m_marketing_price = marketing_price;
    m_marketing_price_isSet = true;
}

bool OAIItemSummary::is_marketing_price_Set() const{
    return m_marketing_price_isSet;
}

bool OAIItemSummary::is_marketing_price_Valid() const{
    return m_marketing_price_isValid;
}

QList<OAIPickupOptionSummary> OAIItemSummary::getPickupOptions() const {
    return m_pickup_options;
}
void OAIItemSummary::setPickupOptions(const QList<OAIPickupOptionSummary> &pickup_options) {
    m_pickup_options = pickup_options;
    m_pickup_options_isSet = true;
}

bool OAIItemSummary::is_pickup_options_Set() const{
    return m_pickup_options_isSet;
}

bool OAIItemSummary::is_pickup_options_Valid() const{
    return m_pickup_options_isValid;
}

OAIConvertedAmount OAIItemSummary::getPrice() const {
    return m_price;
}
void OAIItemSummary::setPrice(const OAIConvertedAmount &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItemSummary::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItemSummary::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIItemSummary::getPriceDisplayCondition() const {
    return m_price_display_condition;
}
void OAIItemSummary::setPriceDisplayCondition(const QString &price_display_condition) {
    m_price_display_condition = price_display_condition;
    m_price_display_condition_isSet = true;
}

bool OAIItemSummary::is_price_display_condition_Set() const{
    return m_price_display_condition_isSet;
}

bool OAIItemSummary::is_price_display_condition_Valid() const{
    return m_price_display_condition_isValid;
}

QList<QString> OAIItemSummary::getQualifiedPrograms() const {
    return m_qualified_programs;
}
void OAIItemSummary::setQualifiedPrograms(const QList<QString> &qualified_programs) {
    m_qualified_programs = qualified_programs;
    m_qualified_programs_isSet = true;
}

bool OAIItemSummary::is_qualified_programs_Set() const{
    return m_qualified_programs_isSet;
}

bool OAIItemSummary::is_qualified_programs_Valid() const{
    return m_qualified_programs_isValid;
}

OAISeller OAIItemSummary::getSeller() const {
    return m_seller;
}
void OAIItemSummary::setSeller(const OAISeller &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIItemSummary::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIItemSummary::is_seller_Valid() const{
    return m_seller_isValid;
}

QList<OAIShippingOptionSummary> OAIItemSummary::getShippingOptions() const {
    return m_shipping_options;
}
void OAIItemSummary::setShippingOptions(const QList<OAIShippingOptionSummary> &shipping_options) {
    m_shipping_options = shipping_options;
    m_shipping_options_isSet = true;
}

bool OAIItemSummary::is_shipping_options_Set() const{
    return m_shipping_options_isSet;
}

bool OAIItemSummary::is_shipping_options_Valid() const{
    return m_shipping_options_isValid;
}

QString OAIItemSummary::getShortDescription() const {
    return m_short_description;
}
void OAIItemSummary::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIItemSummary::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIItemSummary::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QList<OAIImage> OAIItemSummary::getThumbnailImages() const {
    return m_thumbnail_images;
}
void OAIItemSummary::setThumbnailImages(const QList<OAIImage> &thumbnail_images) {
    m_thumbnail_images = thumbnail_images;
    m_thumbnail_images_isSet = true;
}

bool OAIItemSummary::is_thumbnail_images_Set() const{
    return m_thumbnail_images_isSet;
}

bool OAIItemSummary::is_thumbnail_images_Valid() const{
    return m_thumbnail_images_isValid;
}

QString OAIItemSummary::getTitle() const {
    return m_title;
}
void OAIItemSummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItemSummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItemSummary::is_title_Valid() const{
    return m_title_isValid;
}

OAIConvertedAmount OAIItemSummary::getUnitPrice() const {
    return m_unit_price;
}
void OAIItemSummary::setUnitPrice(const OAIConvertedAmount &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIItemSummary::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIItemSummary::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

QString OAIItemSummary::getUnitPricingMeasure() const {
    return m_unit_pricing_measure;
}
void OAIItemSummary::setUnitPricingMeasure(const QString &unit_pricing_measure) {
    m_unit_pricing_measure = unit_pricing_measure;
    m_unit_pricing_measure_isSet = true;
}

bool OAIItemSummary::is_unit_pricing_measure_Set() const{
    return m_unit_pricing_measure_isSet;
}

bool OAIItemSummary::is_unit_pricing_measure_Valid() const{
    return m_unit_pricing_measure_isValid;
}

bool OAIItemSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_coupons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buying_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_bid_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_from_pickup_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficiency_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_affiliate_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_display_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_programs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_pricing_measure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
