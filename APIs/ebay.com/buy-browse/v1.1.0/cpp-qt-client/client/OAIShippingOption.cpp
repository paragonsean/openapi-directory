/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingOption::OAIShippingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingOption::OAIShippingOption() {
    this->initializeModel();
}

OAIShippingOption::~OAIShippingOption() {}

void OAIShippingOption::initializeModel() {

    m_additional_shipping_cost_per_unit_isSet = false;
    m_additional_shipping_cost_per_unit_isValid = false;

    m_cut_off_date_used_for_estimate_isSet = false;
    m_cut_off_date_used_for_estimate_isValid = false;

    m_fulfilled_through_isSet = false;
    m_fulfilled_through_isValid = false;

    m_guaranteed_delivery_isSet = false;
    m_guaranteed_delivery_isValid = false;

    m_import_charges_isSet = false;
    m_import_charges_isValid = false;

    m_max_estimated_delivery_date_isSet = false;
    m_max_estimated_delivery_date_isValid = false;

    m_min_estimated_delivery_date_isSet = false;
    m_min_estimated_delivery_date_isValid = false;

    m_quantity_used_for_estimate_isSet = false;
    m_quantity_used_for_estimate_isValid = false;

    m_ship_to_location_used_for_estimate_isSet = false;
    m_ship_to_location_used_for_estimate_isValid = false;

    m_shipping_carrier_code_isSet = false;
    m_shipping_carrier_code_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_cost_type_isSet = false;
    m_shipping_cost_type_isValid = false;

    m_shipping_service_code_isSet = false;
    m_shipping_service_code_isValid = false;

    m_trademark_symbol_isSet = false;
    m_trademark_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIShippingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingOption::fromJsonObject(QJsonObject json) {

    m_additional_shipping_cost_per_unit_isValid = ::OpenAPI::fromJsonValue(m_additional_shipping_cost_per_unit, json[QString("additionalShippingCostPerUnit")]);
    m_additional_shipping_cost_per_unit_isSet = !json[QString("additionalShippingCostPerUnit")].isNull() && m_additional_shipping_cost_per_unit_isValid;

    m_cut_off_date_used_for_estimate_isValid = ::OpenAPI::fromJsonValue(m_cut_off_date_used_for_estimate, json[QString("cutOffDateUsedForEstimate")]);
    m_cut_off_date_used_for_estimate_isSet = !json[QString("cutOffDateUsedForEstimate")].isNull() && m_cut_off_date_used_for_estimate_isValid;

    m_fulfilled_through_isValid = ::OpenAPI::fromJsonValue(m_fulfilled_through, json[QString("fulfilledThrough")]);
    m_fulfilled_through_isSet = !json[QString("fulfilledThrough")].isNull() && m_fulfilled_through_isValid;

    m_guaranteed_delivery_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_delivery, json[QString("guaranteedDelivery")]);
    m_guaranteed_delivery_isSet = !json[QString("guaranteedDelivery")].isNull() && m_guaranteed_delivery_isValid;

    m_import_charges_isValid = ::OpenAPI::fromJsonValue(m_import_charges, json[QString("importCharges")]);
    m_import_charges_isSet = !json[QString("importCharges")].isNull() && m_import_charges_isValid;

    m_max_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_max_estimated_delivery_date, json[QString("maxEstimatedDeliveryDate")]);
    m_max_estimated_delivery_date_isSet = !json[QString("maxEstimatedDeliveryDate")].isNull() && m_max_estimated_delivery_date_isValid;

    m_min_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_min_estimated_delivery_date, json[QString("minEstimatedDeliveryDate")]);
    m_min_estimated_delivery_date_isSet = !json[QString("minEstimatedDeliveryDate")].isNull() && m_min_estimated_delivery_date_isValid;

    m_quantity_used_for_estimate_isValid = ::OpenAPI::fromJsonValue(m_quantity_used_for_estimate, json[QString("quantityUsedForEstimate")]);
    m_quantity_used_for_estimate_isSet = !json[QString("quantityUsedForEstimate")].isNull() && m_quantity_used_for_estimate_isValid;

    m_ship_to_location_used_for_estimate_isValid = ::OpenAPI::fromJsonValue(m_ship_to_location_used_for_estimate, json[QString("shipToLocationUsedForEstimate")]);
    m_ship_to_location_used_for_estimate_isSet = !json[QString("shipToLocationUsedForEstimate")].isNull() && m_ship_to_location_used_for_estimate_isValid;

    m_shipping_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_code, json[QString("shippingCarrierCode")]);
    m_shipping_carrier_code_isSet = !json[QString("shippingCarrierCode")].isNull() && m_shipping_carrier_code_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_cost_type_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost_type, json[QString("shippingCostType")]);
    m_shipping_cost_type_isSet = !json[QString("shippingCostType")].isNull() && m_shipping_cost_type_isValid;

    m_shipping_service_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_service_code, json[QString("shippingServiceCode")]);
    m_shipping_service_code_isSet = !json[QString("shippingServiceCode")].isNull() && m_shipping_service_code_isValid;

    m_trademark_symbol_isValid = ::OpenAPI::fromJsonValue(m_trademark_symbol, json[QString("trademarkSymbol")]);
    m_trademark_symbol_isSet = !json[QString("trademarkSymbol")].isNull() && m_trademark_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIShippingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_shipping_cost_per_unit.isSet()) {
        obj.insert(QString("additionalShippingCostPerUnit"), ::OpenAPI::toJsonValue(m_additional_shipping_cost_per_unit));
    }
    if (m_cut_off_date_used_for_estimate_isSet) {
        obj.insert(QString("cutOffDateUsedForEstimate"), ::OpenAPI::toJsonValue(m_cut_off_date_used_for_estimate));
    }
    if (m_fulfilled_through_isSet) {
        obj.insert(QString("fulfilledThrough"), ::OpenAPI::toJsonValue(m_fulfilled_through));
    }
    if (m_guaranteed_delivery_isSet) {
        obj.insert(QString("guaranteedDelivery"), ::OpenAPI::toJsonValue(m_guaranteed_delivery));
    }
    if (m_import_charges.isSet()) {
        obj.insert(QString("importCharges"), ::OpenAPI::toJsonValue(m_import_charges));
    }
    if (m_max_estimated_delivery_date_isSet) {
        obj.insert(QString("maxEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_max_estimated_delivery_date));
    }
    if (m_min_estimated_delivery_date_isSet) {
        obj.insert(QString("minEstimatedDeliveryDate"), ::OpenAPI::toJsonValue(m_min_estimated_delivery_date));
    }
    if (m_quantity_used_for_estimate_isSet) {
        obj.insert(QString("quantityUsedForEstimate"), ::OpenAPI::toJsonValue(m_quantity_used_for_estimate));
    }
    if (m_ship_to_location_used_for_estimate.isSet()) {
        obj.insert(QString("shipToLocationUsedForEstimate"), ::OpenAPI::toJsonValue(m_ship_to_location_used_for_estimate));
    }
    if (m_shipping_carrier_code_isSet) {
        obj.insert(QString("shippingCarrierCode"), ::OpenAPI::toJsonValue(m_shipping_carrier_code));
    }
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_cost_type_isSet) {
        obj.insert(QString("shippingCostType"), ::OpenAPI::toJsonValue(m_shipping_cost_type));
    }
    if (m_shipping_service_code_isSet) {
        obj.insert(QString("shippingServiceCode"), ::OpenAPI::toJsonValue(m_shipping_service_code));
    }
    if (m_trademark_symbol_isSet) {
        obj.insert(QString("trademarkSymbol"), ::OpenAPI::toJsonValue(m_trademark_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIConvertedAmount OAIShippingOption::getAdditionalShippingCostPerUnit() const {
    return m_additional_shipping_cost_per_unit;
}
void OAIShippingOption::setAdditionalShippingCostPerUnit(const OAIConvertedAmount &additional_shipping_cost_per_unit) {
    m_additional_shipping_cost_per_unit = additional_shipping_cost_per_unit;
    m_additional_shipping_cost_per_unit_isSet = true;
}

bool OAIShippingOption::is_additional_shipping_cost_per_unit_Set() const{
    return m_additional_shipping_cost_per_unit_isSet;
}

bool OAIShippingOption::is_additional_shipping_cost_per_unit_Valid() const{
    return m_additional_shipping_cost_per_unit_isValid;
}

QString OAIShippingOption::getCutOffDateUsedForEstimate() const {
    return m_cut_off_date_used_for_estimate;
}
void OAIShippingOption::setCutOffDateUsedForEstimate(const QString &cut_off_date_used_for_estimate) {
    m_cut_off_date_used_for_estimate = cut_off_date_used_for_estimate;
    m_cut_off_date_used_for_estimate_isSet = true;
}

bool OAIShippingOption::is_cut_off_date_used_for_estimate_Set() const{
    return m_cut_off_date_used_for_estimate_isSet;
}

bool OAIShippingOption::is_cut_off_date_used_for_estimate_Valid() const{
    return m_cut_off_date_used_for_estimate_isValid;
}

QString OAIShippingOption::getFulfilledThrough() const {
    return m_fulfilled_through;
}
void OAIShippingOption::setFulfilledThrough(const QString &fulfilled_through) {
    m_fulfilled_through = fulfilled_through;
    m_fulfilled_through_isSet = true;
}

bool OAIShippingOption::is_fulfilled_through_Set() const{
    return m_fulfilled_through_isSet;
}

bool OAIShippingOption::is_fulfilled_through_Valid() const{
    return m_fulfilled_through_isValid;
}

bool OAIShippingOption::isGuaranteedDelivery() const {
    return m_guaranteed_delivery;
}
void OAIShippingOption::setGuaranteedDelivery(const bool &guaranteed_delivery) {
    m_guaranteed_delivery = guaranteed_delivery;
    m_guaranteed_delivery_isSet = true;
}

bool OAIShippingOption::is_guaranteed_delivery_Set() const{
    return m_guaranteed_delivery_isSet;
}

bool OAIShippingOption::is_guaranteed_delivery_Valid() const{
    return m_guaranteed_delivery_isValid;
}

OAIConvertedAmount OAIShippingOption::getImportCharges() const {
    return m_import_charges;
}
void OAIShippingOption::setImportCharges(const OAIConvertedAmount &import_charges) {
    m_import_charges = import_charges;
    m_import_charges_isSet = true;
}

bool OAIShippingOption::is_import_charges_Set() const{
    return m_import_charges_isSet;
}

bool OAIShippingOption::is_import_charges_Valid() const{
    return m_import_charges_isValid;
}

QString OAIShippingOption::getMaxEstimatedDeliveryDate() const {
    return m_max_estimated_delivery_date;
}
void OAIShippingOption::setMaxEstimatedDeliveryDate(const QString &max_estimated_delivery_date) {
    m_max_estimated_delivery_date = max_estimated_delivery_date;
    m_max_estimated_delivery_date_isSet = true;
}

bool OAIShippingOption::is_max_estimated_delivery_date_Set() const{
    return m_max_estimated_delivery_date_isSet;
}

bool OAIShippingOption::is_max_estimated_delivery_date_Valid() const{
    return m_max_estimated_delivery_date_isValid;
}

QString OAIShippingOption::getMinEstimatedDeliveryDate() const {
    return m_min_estimated_delivery_date;
}
void OAIShippingOption::setMinEstimatedDeliveryDate(const QString &min_estimated_delivery_date) {
    m_min_estimated_delivery_date = min_estimated_delivery_date;
    m_min_estimated_delivery_date_isSet = true;
}

bool OAIShippingOption::is_min_estimated_delivery_date_Set() const{
    return m_min_estimated_delivery_date_isSet;
}

bool OAIShippingOption::is_min_estimated_delivery_date_Valid() const{
    return m_min_estimated_delivery_date_isValid;
}

qint32 OAIShippingOption::getQuantityUsedForEstimate() const {
    return m_quantity_used_for_estimate;
}
void OAIShippingOption::setQuantityUsedForEstimate(const qint32 &quantity_used_for_estimate) {
    m_quantity_used_for_estimate = quantity_used_for_estimate;
    m_quantity_used_for_estimate_isSet = true;
}

bool OAIShippingOption::is_quantity_used_for_estimate_Set() const{
    return m_quantity_used_for_estimate_isSet;
}

bool OAIShippingOption::is_quantity_used_for_estimate_Valid() const{
    return m_quantity_used_for_estimate_isValid;
}

OAIShipToLocation OAIShippingOption::getShipToLocationUsedForEstimate() const {
    return m_ship_to_location_used_for_estimate;
}
void OAIShippingOption::setShipToLocationUsedForEstimate(const OAIShipToLocation &ship_to_location_used_for_estimate) {
    m_ship_to_location_used_for_estimate = ship_to_location_used_for_estimate;
    m_ship_to_location_used_for_estimate_isSet = true;
}

bool OAIShippingOption::is_ship_to_location_used_for_estimate_Set() const{
    return m_ship_to_location_used_for_estimate_isSet;
}

bool OAIShippingOption::is_ship_to_location_used_for_estimate_Valid() const{
    return m_ship_to_location_used_for_estimate_isValid;
}

QString OAIShippingOption::getShippingCarrierCode() const {
    return m_shipping_carrier_code;
}
void OAIShippingOption::setShippingCarrierCode(const QString &shipping_carrier_code) {
    m_shipping_carrier_code = shipping_carrier_code;
    m_shipping_carrier_code_isSet = true;
}

bool OAIShippingOption::is_shipping_carrier_code_Set() const{
    return m_shipping_carrier_code_isSet;
}

bool OAIShippingOption::is_shipping_carrier_code_Valid() const{
    return m_shipping_carrier_code_isValid;
}

OAIConvertedAmount OAIShippingOption::getShippingCost() const {
    return m_shipping_cost;
}
void OAIShippingOption::setShippingCost(const OAIConvertedAmount &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIShippingOption::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIShippingOption::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIShippingOption::getShippingCostType() const {
    return m_shipping_cost_type;
}
void OAIShippingOption::setShippingCostType(const QString &shipping_cost_type) {
    m_shipping_cost_type = shipping_cost_type;
    m_shipping_cost_type_isSet = true;
}

bool OAIShippingOption::is_shipping_cost_type_Set() const{
    return m_shipping_cost_type_isSet;
}

bool OAIShippingOption::is_shipping_cost_type_Valid() const{
    return m_shipping_cost_type_isValid;
}

QString OAIShippingOption::getShippingServiceCode() const {
    return m_shipping_service_code;
}
void OAIShippingOption::setShippingServiceCode(const QString &shipping_service_code) {
    m_shipping_service_code = shipping_service_code;
    m_shipping_service_code_isSet = true;
}

bool OAIShippingOption::is_shipping_service_code_Set() const{
    return m_shipping_service_code_isSet;
}

bool OAIShippingOption::is_shipping_service_code_Valid() const{
    return m_shipping_service_code_isValid;
}

QString OAIShippingOption::getTrademarkSymbol() const {
    return m_trademark_symbol;
}
void OAIShippingOption::setTrademarkSymbol(const QString &trademark_symbol) {
    m_trademark_symbol = trademark_symbol;
    m_trademark_symbol_isSet = true;
}

bool OAIShippingOption::is_trademark_symbol_Set() const{
    return m_trademark_symbol_isSet;
}

bool OAIShippingOption::is_trademark_symbol_Valid() const{
    return m_trademark_symbol_isValid;
}

QString OAIShippingOption::getType() const {
    return m_type;
}
void OAIShippingOption::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShippingOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShippingOption::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIShippingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_shipping_cost_per_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cut_off_date_used_for_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfilled_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_used_for_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_location_used_for_estimate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trademark_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
