/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalProductIdentity.h
 *
 * The type that defines the array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request &lt;b&gt; fieldgroups&lt;/b&gt; is set to &lt;code&gt;PRODUCT&lt;/code&gt;.
 */

#ifndef OAIAdditionalProductIdentity_H
#define OAIAdditionalProductIdentity_H

#include <QJsonObject>

#include "OAIProductIdentity.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProductIdentity;

class OAIAdditionalProductIdentity : public OAIObject {
public:
    OAIAdditionalProductIdentity();
    OAIAdditionalProductIdentity(QString json);
    ~OAIAdditionalProductIdentity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIProductIdentity> getProductIdentity() const;
    void setProductIdentity(const QList<OAIProductIdentity> &product_identity);
    bool is_product_identity_Set() const;
    bool is_product_identity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIProductIdentity> m_product_identity;
    bool m_product_identity_isSet;
    bool m_product_identity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalProductIdentity)

#endif // OAIAdditionalProductIdentity_H
