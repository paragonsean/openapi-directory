/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchPagedCollection.h
 *
 * The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced &lt;em&gt; pages&lt;/em&gt; where each page has 0 or more items. 
 */

#ifndef OAISearchPagedCollection_H
#define OAISearchPagedCollection_H

#include <QJsonObject>

#include "OAIAutoCorrections.h"
#include "OAIError.h"
#include "OAIItemSummary.h"
#include "OAIRefinement.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoCorrections;
class OAIItemSummary;
class OAIRefinement;
class OAIError;

class OAISearchPagedCollection : public OAIObject {
public:
    OAISearchPagedCollection();
    OAISearchPagedCollection(QString json);
    ~OAISearchPagedCollection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAutoCorrections getAutoCorrections() const;
    void setAutoCorrections(const OAIAutoCorrections &auto_corrections);
    bool is_auto_corrections_Set() const;
    bool is_auto_corrections_Valid() const;

    QString getHref() const;
    void setHref(const QString &href);
    bool is_href_Set() const;
    bool is_href_Valid() const;

    QList<OAIItemSummary> getItemSummaries() const;
    void setItemSummaries(const QList<OAIItemSummary> &item_summaries);
    bool is_item_summaries_Set() const;
    bool is_item_summaries_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    QString getNext() const;
    void setNext(const QString &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QString getPrev() const;
    void setPrev(const QString &prev);
    bool is_prev_Set() const;
    bool is_prev_Valid() const;

    OAIRefinement getRefinement() const;
    void setRefinement(const OAIRefinement &refinement);
    bool is_refinement_Set() const;
    bool is_refinement_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    QList<OAIError> getWarnings() const;
    void setWarnings(const QList<OAIError> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAutoCorrections m_auto_corrections;
    bool m_auto_corrections_isSet;
    bool m_auto_corrections_isValid;

    QString m_href;
    bool m_href_isSet;
    bool m_href_isValid;

    QList<OAIItemSummary> m_item_summaries;
    bool m_item_summaries_isSet;
    bool m_item_summaries_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    QString m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QString m_prev;
    bool m_prev_isSet;
    bool m_prev_isValid;

    OAIRefinement m_refinement;
    bool m_refinement_isSet;
    bool m_refinement_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    QList<OAIError> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchPagedCollection)

#endif // OAISearchPagedCollection_H
