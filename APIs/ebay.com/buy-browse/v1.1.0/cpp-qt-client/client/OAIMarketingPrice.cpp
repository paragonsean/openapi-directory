/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketingPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketingPrice::OAIMarketingPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketingPrice::OAIMarketingPrice() {
    this->initializeModel();
}

OAIMarketingPrice::~OAIMarketingPrice() {}

void OAIMarketingPrice::initializeModel() {

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_percentage_isSet = false;
    m_discount_percentage_isValid = false;

    m_original_price_isSet = false;
    m_original_price_isValid = false;

    m_price_treatment_isSet = false;
    m_price_treatment_isValid = false;
}

void OAIMarketingPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketingPrice::fromJsonObject(QJsonObject json) {

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_percentage_isValid = ::OpenAPI::fromJsonValue(m_discount_percentage, json[QString("discountPercentage")]);
    m_discount_percentage_isSet = !json[QString("discountPercentage")].isNull() && m_discount_percentage_isValid;

    m_original_price_isValid = ::OpenAPI::fromJsonValue(m_original_price, json[QString("originalPrice")]);
    m_original_price_isSet = !json[QString("originalPrice")].isNull() && m_original_price_isValid;

    m_price_treatment_isValid = ::OpenAPI::fromJsonValue(m_price_treatment, json[QString("priceTreatment")]);
    m_price_treatment_isSet = !json[QString("priceTreatment")].isNull() && m_price_treatment_isValid;
}

QString OAIMarketingPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketingPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_percentage_isSet) {
        obj.insert(QString("discountPercentage"), ::OpenAPI::toJsonValue(m_discount_percentage));
    }
    if (m_original_price.isSet()) {
        obj.insert(QString("originalPrice"), ::OpenAPI::toJsonValue(m_original_price));
    }
    if (m_price_treatment_isSet) {
        obj.insert(QString("priceTreatment"), ::OpenAPI::toJsonValue(m_price_treatment));
    }
    return obj;
}

OAIConvertedAmount OAIMarketingPrice::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIMarketingPrice::setDiscountAmount(const OAIConvertedAmount &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIMarketingPrice::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIMarketingPrice::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAIMarketingPrice::getDiscountPercentage() const {
    return m_discount_percentage;
}
void OAIMarketingPrice::setDiscountPercentage(const QString &discount_percentage) {
    m_discount_percentage = discount_percentage;
    m_discount_percentage_isSet = true;
}

bool OAIMarketingPrice::is_discount_percentage_Set() const{
    return m_discount_percentage_isSet;
}

bool OAIMarketingPrice::is_discount_percentage_Valid() const{
    return m_discount_percentage_isValid;
}

OAIConvertedAmount OAIMarketingPrice::getOriginalPrice() const {
    return m_original_price;
}
void OAIMarketingPrice::setOriginalPrice(const OAIConvertedAmount &original_price) {
    m_original_price = original_price;
    m_original_price_isSet = true;
}

bool OAIMarketingPrice::is_original_price_Set() const{
    return m_original_price_isSet;
}

bool OAIMarketingPrice::is_original_price_Valid() const{
    return m_original_price_isValid;
}

QString OAIMarketingPrice::getPriceTreatment() const {
    return m_price_treatment;
}
void OAIMarketingPrice::setPriceTreatment(const QString &price_treatment) {
    m_price_treatment = price_treatment;
    m_price_treatment_isSet = true;
}

bool OAIMarketingPrice::is_price_treatment_Set() const{
    return m_price_treatment_isSet;
}

bool OAIMarketingPrice::is_price_treatment_Valid() const{
    return m_price_treatment_isValid;
}

bool OAIMarketingPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_treatment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketingPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
