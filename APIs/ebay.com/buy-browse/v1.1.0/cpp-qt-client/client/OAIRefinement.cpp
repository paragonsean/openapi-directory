/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefinement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefinement::OAIRefinement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefinement::OAIRefinement() {
    this->initializeModel();
}

OAIRefinement::~OAIRefinement() {}

void OAIRefinement::initializeModel() {

    m_aspect_distributions_isSet = false;
    m_aspect_distributions_isValid = false;

    m_buying_option_distributions_isSet = false;
    m_buying_option_distributions_isValid = false;

    m_category_distributions_isSet = false;
    m_category_distributions_isValid = false;

    m_condition_distributions_isSet = false;
    m_condition_distributions_isValid = false;

    m_dominant_category_id_isSet = false;
    m_dominant_category_id_isValid = false;
}

void OAIRefinement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefinement::fromJsonObject(QJsonObject json) {

    m_aspect_distributions_isValid = ::OpenAPI::fromJsonValue(m_aspect_distributions, json[QString("aspectDistributions")]);
    m_aspect_distributions_isSet = !json[QString("aspectDistributions")].isNull() && m_aspect_distributions_isValid;

    m_buying_option_distributions_isValid = ::OpenAPI::fromJsonValue(m_buying_option_distributions, json[QString("buyingOptionDistributions")]);
    m_buying_option_distributions_isSet = !json[QString("buyingOptionDistributions")].isNull() && m_buying_option_distributions_isValid;

    m_category_distributions_isValid = ::OpenAPI::fromJsonValue(m_category_distributions, json[QString("categoryDistributions")]);
    m_category_distributions_isSet = !json[QString("categoryDistributions")].isNull() && m_category_distributions_isValid;

    m_condition_distributions_isValid = ::OpenAPI::fromJsonValue(m_condition_distributions, json[QString("conditionDistributions")]);
    m_condition_distributions_isSet = !json[QString("conditionDistributions")].isNull() && m_condition_distributions_isValid;

    m_dominant_category_id_isValid = ::OpenAPI::fromJsonValue(m_dominant_category_id, json[QString("dominantCategoryId")]);
    m_dominant_category_id_isSet = !json[QString("dominantCategoryId")].isNull() && m_dominant_category_id_isValid;
}

QString OAIRefinement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefinement::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_distributions.size() > 0) {
        obj.insert(QString("aspectDistributions"), ::OpenAPI::toJsonValue(m_aspect_distributions));
    }
    if (m_buying_option_distributions.size() > 0) {
        obj.insert(QString("buyingOptionDistributions"), ::OpenAPI::toJsonValue(m_buying_option_distributions));
    }
    if (m_category_distributions.size() > 0) {
        obj.insert(QString("categoryDistributions"), ::OpenAPI::toJsonValue(m_category_distributions));
    }
    if (m_condition_distributions.size() > 0) {
        obj.insert(QString("conditionDistributions"), ::OpenAPI::toJsonValue(m_condition_distributions));
    }
    if (m_dominant_category_id_isSet) {
        obj.insert(QString("dominantCategoryId"), ::OpenAPI::toJsonValue(m_dominant_category_id));
    }
    return obj;
}

QList<OAIAspectDistribution> OAIRefinement::getAspectDistributions() const {
    return m_aspect_distributions;
}
void OAIRefinement::setAspectDistributions(const QList<OAIAspectDistribution> &aspect_distributions) {
    m_aspect_distributions = aspect_distributions;
    m_aspect_distributions_isSet = true;
}

bool OAIRefinement::is_aspect_distributions_Set() const{
    return m_aspect_distributions_isSet;
}

bool OAIRefinement::is_aspect_distributions_Valid() const{
    return m_aspect_distributions_isValid;
}

QList<OAIBuyingOptionDistribution> OAIRefinement::getBuyingOptionDistributions() const {
    return m_buying_option_distributions;
}
void OAIRefinement::setBuyingOptionDistributions(const QList<OAIBuyingOptionDistribution> &buying_option_distributions) {
    m_buying_option_distributions = buying_option_distributions;
    m_buying_option_distributions_isSet = true;
}

bool OAIRefinement::is_buying_option_distributions_Set() const{
    return m_buying_option_distributions_isSet;
}

bool OAIRefinement::is_buying_option_distributions_Valid() const{
    return m_buying_option_distributions_isValid;
}

QList<OAICategoryDistribution> OAIRefinement::getCategoryDistributions() const {
    return m_category_distributions;
}
void OAIRefinement::setCategoryDistributions(const QList<OAICategoryDistribution> &category_distributions) {
    m_category_distributions = category_distributions;
    m_category_distributions_isSet = true;
}

bool OAIRefinement::is_category_distributions_Set() const{
    return m_category_distributions_isSet;
}

bool OAIRefinement::is_category_distributions_Valid() const{
    return m_category_distributions_isValid;
}

QList<OAIConditionDistribution> OAIRefinement::getConditionDistributions() const {
    return m_condition_distributions;
}
void OAIRefinement::setConditionDistributions(const QList<OAIConditionDistribution> &condition_distributions) {
    m_condition_distributions = condition_distributions;
    m_condition_distributions_isSet = true;
}

bool OAIRefinement::is_condition_distributions_Set() const{
    return m_condition_distributions_isSet;
}

bool OAIRefinement::is_condition_distributions_Valid() const{
    return m_condition_distributions_isValid;
}

QString OAIRefinement::getDominantCategoryId() const {
    return m_dominant_category_id;
}
void OAIRefinement::setDominantCategoryId(const QString &dominant_category_id) {
    m_dominant_category_id = dominant_category_id;
    m_dominant_category_id_isSet = true;
}

bool OAIRefinement::is_dominant_category_id_Set() const{
    return m_dominant_category_id_isSet;
}

bool OAIRefinement::is_dominant_category_id_Valid() const{
    return m_dominant_category_id_isValid;
}

bool OAIRefinement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buying_option_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dominant_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefinement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
