/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEstimatedAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEstimatedAvailability::OAIEstimatedAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEstimatedAvailability::OAIEstimatedAvailability() {
    this->initializeModel();
}

OAIEstimatedAvailability::~OAIEstimatedAvailability() {}

void OAIEstimatedAvailability::initializeModel() {

    m_availability_threshold_isSet = false;
    m_availability_threshold_isValid = false;

    m_availability_threshold_type_isSet = false;
    m_availability_threshold_type_isValid = false;

    m_delivery_options_isSet = false;
    m_delivery_options_isValid = false;

    m_estimated_availability_status_isSet = false;
    m_estimated_availability_status_isValid = false;

    m_estimated_available_quantity_isSet = false;
    m_estimated_available_quantity_isValid = false;

    m_estimated_sold_quantity_isSet = false;
    m_estimated_sold_quantity_isValid = false;
}

void OAIEstimatedAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEstimatedAvailability::fromJsonObject(QJsonObject json) {

    m_availability_threshold_isValid = ::OpenAPI::fromJsonValue(m_availability_threshold, json[QString("availabilityThreshold")]);
    m_availability_threshold_isSet = !json[QString("availabilityThreshold")].isNull() && m_availability_threshold_isValid;

    m_availability_threshold_type_isValid = ::OpenAPI::fromJsonValue(m_availability_threshold_type, json[QString("availabilityThresholdType")]);
    m_availability_threshold_type_isSet = !json[QString("availabilityThresholdType")].isNull() && m_availability_threshold_type_isValid;

    m_delivery_options_isValid = ::OpenAPI::fromJsonValue(m_delivery_options, json[QString("deliveryOptions")]);
    m_delivery_options_isSet = !json[QString("deliveryOptions")].isNull() && m_delivery_options_isValid;

    m_estimated_availability_status_isValid = ::OpenAPI::fromJsonValue(m_estimated_availability_status, json[QString("estimatedAvailabilityStatus")]);
    m_estimated_availability_status_isSet = !json[QString("estimatedAvailabilityStatus")].isNull() && m_estimated_availability_status_isValid;

    m_estimated_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_estimated_available_quantity, json[QString("estimatedAvailableQuantity")]);
    m_estimated_available_quantity_isSet = !json[QString("estimatedAvailableQuantity")].isNull() && m_estimated_available_quantity_isValid;

    m_estimated_sold_quantity_isValid = ::OpenAPI::fromJsonValue(m_estimated_sold_quantity, json[QString("estimatedSoldQuantity")]);
    m_estimated_sold_quantity_isSet = !json[QString("estimatedSoldQuantity")].isNull() && m_estimated_sold_quantity_isValid;
}

QString OAIEstimatedAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEstimatedAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_threshold_isSet) {
        obj.insert(QString("availabilityThreshold"), ::OpenAPI::toJsonValue(m_availability_threshold));
    }
    if (m_availability_threshold_type_isSet) {
        obj.insert(QString("availabilityThresholdType"), ::OpenAPI::toJsonValue(m_availability_threshold_type));
    }
    if (m_delivery_options.size() > 0) {
        obj.insert(QString("deliveryOptions"), ::OpenAPI::toJsonValue(m_delivery_options));
    }
    if (m_estimated_availability_status_isSet) {
        obj.insert(QString("estimatedAvailabilityStatus"), ::OpenAPI::toJsonValue(m_estimated_availability_status));
    }
    if (m_estimated_available_quantity_isSet) {
        obj.insert(QString("estimatedAvailableQuantity"), ::OpenAPI::toJsonValue(m_estimated_available_quantity));
    }
    if (m_estimated_sold_quantity_isSet) {
        obj.insert(QString("estimatedSoldQuantity"), ::OpenAPI::toJsonValue(m_estimated_sold_quantity));
    }
    return obj;
}

qint32 OAIEstimatedAvailability::getAvailabilityThreshold() const {
    return m_availability_threshold;
}
void OAIEstimatedAvailability::setAvailabilityThreshold(const qint32 &availability_threshold) {
    m_availability_threshold = availability_threshold;
    m_availability_threshold_isSet = true;
}

bool OAIEstimatedAvailability::is_availability_threshold_Set() const{
    return m_availability_threshold_isSet;
}

bool OAIEstimatedAvailability::is_availability_threshold_Valid() const{
    return m_availability_threshold_isValid;
}

QString OAIEstimatedAvailability::getAvailabilityThresholdType() const {
    return m_availability_threshold_type;
}
void OAIEstimatedAvailability::setAvailabilityThresholdType(const QString &availability_threshold_type) {
    m_availability_threshold_type = availability_threshold_type;
    m_availability_threshold_type_isSet = true;
}

bool OAIEstimatedAvailability::is_availability_threshold_type_Set() const{
    return m_availability_threshold_type_isSet;
}

bool OAIEstimatedAvailability::is_availability_threshold_type_Valid() const{
    return m_availability_threshold_type_isValid;
}

QList<QString> OAIEstimatedAvailability::getDeliveryOptions() const {
    return m_delivery_options;
}
void OAIEstimatedAvailability::setDeliveryOptions(const QList<QString> &delivery_options) {
    m_delivery_options = delivery_options;
    m_delivery_options_isSet = true;
}

bool OAIEstimatedAvailability::is_delivery_options_Set() const{
    return m_delivery_options_isSet;
}

bool OAIEstimatedAvailability::is_delivery_options_Valid() const{
    return m_delivery_options_isValid;
}

QString OAIEstimatedAvailability::getEstimatedAvailabilityStatus() const {
    return m_estimated_availability_status;
}
void OAIEstimatedAvailability::setEstimatedAvailabilityStatus(const QString &estimated_availability_status) {
    m_estimated_availability_status = estimated_availability_status;
    m_estimated_availability_status_isSet = true;
}

bool OAIEstimatedAvailability::is_estimated_availability_status_Set() const{
    return m_estimated_availability_status_isSet;
}

bool OAIEstimatedAvailability::is_estimated_availability_status_Valid() const{
    return m_estimated_availability_status_isValid;
}

qint32 OAIEstimatedAvailability::getEstimatedAvailableQuantity() const {
    return m_estimated_available_quantity;
}
void OAIEstimatedAvailability::setEstimatedAvailableQuantity(const qint32 &estimated_available_quantity) {
    m_estimated_available_quantity = estimated_available_quantity;
    m_estimated_available_quantity_isSet = true;
}

bool OAIEstimatedAvailability::is_estimated_available_quantity_Set() const{
    return m_estimated_available_quantity_isSet;
}

bool OAIEstimatedAvailability::is_estimated_available_quantity_Valid() const{
    return m_estimated_available_quantity_isValid;
}

qint32 OAIEstimatedAvailability::getEstimatedSoldQuantity() const {
    return m_estimated_sold_quantity;
}
void OAIEstimatedAvailability::setEstimatedSoldQuantity(const qint32 &estimated_sold_quantity) {
    m_estimated_sold_quantity = estimated_sold_quantity;
    m_estimated_sold_quantity_isSet = true;
}

bool OAIEstimatedAvailability::is_estimated_sold_quantity_Set() const{
    return m_estimated_sold_quantity_isSet;
}

bool OAIEstimatedAvailability::is_estimated_sold_quantity_Valid() const{
    return m_estimated_sold_quantity_isValid;
}

bool OAIEstimatedAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_threshold_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_availability_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_sold_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEstimatedAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
