/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISellerLegalInfo.h
 *
 * The type that defines the fields for the contact information for a seller.
 */

#ifndef OAISellerLegalInfo_H
#define OAISellerLegalInfo_H

#include <QJsonObject>

#include "OAILegalAddress.h"
#include "OAIVatDetail.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILegalAddress;
class OAIVatDetail;

class OAISellerLegalInfo : public OAIObject {
public:
    OAISellerLegalInfo();
    OAISellerLegalInfo(QString json);
    ~OAISellerLegalInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getFax() const;
    void setFax(const QString &fax);
    bool is_fax_Set() const;
    bool is_fax_Valid() const;

    QString getImprint() const;
    void setImprint(const QString &imprint);
    bool is_imprint_Set() const;
    bool is_imprint_Valid() const;

    QString getLegalContactFirstName() const;
    void setLegalContactFirstName(const QString &legal_contact_first_name);
    bool is_legal_contact_first_name_Set() const;
    bool is_legal_contact_first_name_Valid() const;

    QString getLegalContactLastName() const;
    void setLegalContactLastName(const QString &legal_contact_last_name);
    bool is_legal_contact_last_name_Set() const;
    bool is_legal_contact_last_name_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPhone() const;
    void setPhone(const QString &phone);
    bool is_phone_Set() const;
    bool is_phone_Valid() const;

    QString getRegistrationNumber() const;
    void setRegistrationNumber(const QString &registration_number);
    bool is_registration_number_Set() const;
    bool is_registration_number_Valid() const;

    OAILegalAddress getSellerProvidedLegalAddress() const;
    void setSellerProvidedLegalAddress(const OAILegalAddress &seller_provided_legal_address);
    bool is_seller_provided_legal_address_Set() const;
    bool is_seller_provided_legal_address_Valid() const;

    QString getTermsOfService() const;
    void setTermsOfService(const QString &terms_of_service);
    bool is_terms_of_service_Set() const;
    bool is_terms_of_service_Valid() const;

    QList<OAIVatDetail> getVatDetails() const;
    void setVatDetails(const QList<OAIVatDetail> &vat_details);
    bool is_vat_details_Set() const;
    bool is_vat_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_fax;
    bool m_fax_isSet;
    bool m_fax_isValid;

    QString m_imprint;
    bool m_imprint_isSet;
    bool m_imprint_isValid;

    QString m_legal_contact_first_name;
    bool m_legal_contact_first_name_isSet;
    bool m_legal_contact_first_name_isValid;

    QString m_legal_contact_last_name;
    bool m_legal_contact_last_name_isSet;
    bool m_legal_contact_last_name_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_phone;
    bool m_phone_isSet;
    bool m_phone_isValid;

    QString m_registration_number;
    bool m_registration_number_isSet;
    bool m_registration_number_isValid;

    OAILegalAddress m_seller_provided_legal_address;
    bool m_seller_provided_legal_address_isSet;
    bool m_seller_provided_legal_address_isValid;

    QString m_terms_of_service;
    bool m_terms_of_service_isSet;
    bool m_terms_of_service_isValid;

    QList<OAIVatDetail> m_vat_details;
    bool m_vat_details_isSet;
    bool m_vat_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISellerLegalInfo)

#endif // OAISellerLegalInfo_H
