/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRemoteShopcartResponse.h
 *
 * The type that defines the fields and containers for the member&#39;s eBay cart information.
 */

#ifndef OAIRemoteShopcartResponse_H
#define OAIRemoteShopcartResponse_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAICartItem.h"
#include "OAIError.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICartItem;
class OAIAmount;
class OAIError;

class OAIRemoteShopcartResponse : public OAIObject {
public:
    OAIRemoteShopcartResponse();
    OAIRemoteShopcartResponse(QString json);
    ~OAIRemoteShopcartResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICartItem> getCartItems() const;
    void setCartItems(const QList<OAICartItem> &cart_items);
    bool is_cart_items_Set() const;
    bool is_cart_items_Valid() const;

    OAIAmount getCartSubtotal() const;
    void setCartSubtotal(const OAIAmount &cart_subtotal);
    bool is_cart_subtotal_Set() const;
    bool is_cart_subtotal_Valid() const;

    QString getCartWebUrl() const;
    void setCartWebUrl(const QString &cart_web_url);
    bool is_cart_web_url_Set() const;
    bool is_cart_web_url_Valid() const;

    QList<OAICartItem> getUnavailableCartItems() const;
    void setUnavailableCartItems(const QList<OAICartItem> &unavailable_cart_items);
    bool is_unavailable_cart_items_Set() const;
    bool is_unavailable_cart_items_Valid() const;

    QList<OAIError> getWarnings() const;
    void setWarnings(const QList<OAIError> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICartItem> m_cart_items;
    bool m_cart_items_isSet;
    bool m_cart_items_isValid;

    OAIAmount m_cart_subtotal;
    bool m_cart_subtotal_isSet;
    bool m_cart_subtotal_isValid;

    QString m_cart_web_url;
    bool m_cart_web_url_isSet;
    bool m_cart_web_url_isValid;

    QList<OAICartItem> m_unavailable_cart_items;
    bool m_unavailable_cart_items_isSet;
    bool m_unavailable_cart_items_isValid;

    QList<OAIError> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRemoteShopcartResponse)

#endif // OAIRemoteShopcartResponse_H
