/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAspectGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAspectGroup::OAIAspectGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAspectGroup::OAIAspectGroup() {
    this->initializeModel();
}

OAIAspectGroup::~OAIAspectGroup() {}

void OAIAspectGroup::initializeModel() {

    m_aspects_isSet = false;
    m_aspects_isValid = false;

    m_localized_group_name_isSet = false;
    m_localized_group_name_isValid = false;
}

void OAIAspectGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAspectGroup::fromJsonObject(QJsonObject json) {

    m_aspects_isValid = ::OpenAPI::fromJsonValue(m_aspects, json[QString("aspects")]);
    m_aspects_isSet = !json[QString("aspects")].isNull() && m_aspects_isValid;

    m_localized_group_name_isValid = ::OpenAPI::fromJsonValue(m_localized_group_name, json[QString("localizedGroupName")]);
    m_localized_group_name_isSet = !json[QString("localizedGroupName")].isNull() && m_localized_group_name_isValid;
}

QString OAIAspectGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAspectGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_aspects.size() > 0) {
        obj.insert(QString("aspects"), ::OpenAPI::toJsonValue(m_aspects));
    }
    if (m_localized_group_name_isSet) {
        obj.insert(QString("localizedGroupName"), ::OpenAPI::toJsonValue(m_localized_group_name));
    }
    return obj;
}

QList<OAIAspect> OAIAspectGroup::getAspects() const {
    return m_aspects;
}
void OAIAspectGroup::setAspects(const QList<OAIAspect> &aspects) {
    m_aspects = aspects;
    m_aspects_isSet = true;
}

bool OAIAspectGroup::is_aspects_Set() const{
    return m_aspects_isSet;
}

bool OAIAspectGroup::is_aspects_Valid() const{
    return m_aspects_isValid;
}

QString OAIAspectGroup::getLocalizedGroupName() const {
    return m_localized_group_name;
}
void OAIAspectGroup::setLocalizedGroupName(const QString &localized_group_name) {
    m_localized_group_name = localized_group_name;
    m_localized_group_name_isSet = true;
}

bool OAIAspectGroup::is_localized_group_name_Set() const{
    return m_localized_group_name_isSet;
}

bool OAIAspectGroup::is_localized_group_name_Valid() const{
    return m_localized_group_name_isValid;
}

bool OAIAspectGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAspectGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
