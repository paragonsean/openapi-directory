/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProduct.h
 *
 * The type that defines the fields for the product information of the item.
 */

#ifndef OAIProduct_H
#define OAIProduct_H

#include <QJsonObject>

#include "OAIAdditionalProductIdentity.h"
#include "OAIAspectGroup.h"
#include "OAIImage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage;
class OAIAdditionalProductIdentity;
class OAIAspectGroup;

class OAIProduct : public OAIObject {
public:
    OAIProduct();
    OAIProduct(QString json);
    ~OAIProduct() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIImage> getAdditionalImages() const;
    void setAdditionalImages(const QList<OAIImage> &additional_images);
    bool is_additional_images_Set() const;
    bool is_additional_images_Valid() const;

    QList<OAIAdditionalProductIdentity> getAdditionalProductIdentities() const;
    void setAdditionalProductIdentities(const QList<OAIAdditionalProductIdentity> &additional_product_identities);
    bool is_additional_product_identities_Set() const;
    bool is_additional_product_identities_Valid() const;

    QList<OAIAspectGroup> getAspectGroups() const;
    void setAspectGroups(const QList<OAIAspectGroup> &aspect_groups);
    bool is_aspect_groups_Set() const;
    bool is_aspect_groups_Valid() const;

    QString getBrand() const;
    void setBrand(const QString &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getGtins() const;
    void setGtins(const QList<QString> &gtins);
    bool is_gtins_Set() const;
    bool is_gtins_Valid() const;

    OAIImage getImage() const;
    void setImage(const OAIImage &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QList<QString> getMpns() const;
    void setMpns(const QList<QString> &mpns);
    bool is_mpns_Set() const;
    bool is_mpns_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIImage> m_additional_images;
    bool m_additional_images_isSet;
    bool m_additional_images_isValid;

    QList<OAIAdditionalProductIdentity> m_additional_product_identities;
    bool m_additional_product_identities_isSet;
    bool m_additional_product_identities_isValid;

    QList<OAIAspectGroup> m_aspect_groups;
    bool m_aspect_groups_isSet;
    bool m_aspect_groups_isValid;

    QString m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_gtins;
    bool m_gtins_isSet;
    bool m_gtins_isValid;

    OAIImage m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QList<QString> m_mpns;
    bool m_mpns_isSet;
    bool m_mpns_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProduct)

#endif // OAIProduct_H
