/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaxes.h
 *
 * The type that defines the tax fields.
 */

#ifndef OAITaxes_H
#define OAITaxes_H

#include <QJsonObject>

#include "OAITaxJurisdiction.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaxJurisdiction;

class OAITaxes : public OAIObject {
public:
    OAITaxes();
    OAITaxes(QString json);
    ~OAITaxes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEbayCollectAndRemitTax() const;
    void setEbayCollectAndRemitTax(const bool &ebay_collect_and_remit_tax);
    bool is_ebay_collect_and_remit_tax_Set() const;
    bool is_ebay_collect_and_remit_tax_Valid() const;

    bool isIncludedInPrice() const;
    void setIncludedInPrice(const bool &included_in_price);
    bool is_included_in_price_Set() const;
    bool is_included_in_price_Valid() const;

    bool isShippingAndHandlingTaxed() const;
    void setShippingAndHandlingTaxed(const bool &shipping_and_handling_taxed);
    bool is_shipping_and_handling_taxed_Set() const;
    bool is_shipping_and_handling_taxed_Valid() const;

    OAITaxJurisdiction getTaxJurisdiction() const;
    void setTaxJurisdiction(const OAITaxJurisdiction &tax_jurisdiction);
    bool is_tax_jurisdiction_Set() const;
    bool is_tax_jurisdiction_Valid() const;

    QString getTaxPercentage() const;
    void setTaxPercentage(const QString &tax_percentage);
    bool is_tax_percentage_Set() const;
    bool is_tax_percentage_Valid() const;

    QString getTaxType() const;
    void setTaxType(const QString &tax_type);
    bool is_tax_type_Set() const;
    bool is_tax_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_ebay_collect_and_remit_tax;
    bool m_ebay_collect_and_remit_tax_isSet;
    bool m_ebay_collect_and_remit_tax_isValid;

    bool m_included_in_price;
    bool m_included_in_price_isSet;
    bool m_included_in_price_isValid;

    bool m_shipping_and_handling_taxed;
    bool m_shipping_and_handling_taxed_isSet;
    bool m_shipping_and_handling_taxed_isValid;

    OAITaxJurisdiction m_tax_jurisdiction;
    bool m_tax_jurisdiction_isSet;
    bool m_tax_jurisdiction_isValid;

    QString m_tax_percentage;
    bool m_tax_percentage_isSet;
    bool m_tax_percentage_isValid;

    QString m_tax_type;
    bool m_tax_type_isSet;
    bool m_tax_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaxes)

#endif // OAITaxes_H
