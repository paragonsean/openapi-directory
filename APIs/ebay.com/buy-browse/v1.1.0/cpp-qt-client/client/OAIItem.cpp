/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_additional_images_isSet = false;
    m_additional_images_isValid = false;

    m_adult_only_isSet = false;
    m_adult_only_isValid = false;

    m_age_group_isSet = false;
    m_age_group_isValid = false;

    m_available_coupons_isSet = false;
    m_available_coupons_isValid = false;

    m_bid_count_isSet = false;
    m_bid_count_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_buying_options_isSet = false;
    m_buying_options_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_path_isSet = false;
    m_category_path_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_condition_description_isSet = false;
    m_condition_description_isValid = false;

    m_condition_id_isSet = false;
    m_condition_id_isValid = false;

    m_current_bid_price_isSet = false;
    m_current_bid_price_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_eligible_for_inline_checkout_isSet = false;
    m_eligible_for_inline_checkout_isValid = false;

    m_enabled_for_guest_checkout_isSet = false;
    m_enabled_for_guest_checkout_isValid = false;

    m_energy_efficiency_class_isSet = false;
    m_energy_efficiency_class_isValid = false;

    m_epid_isSet = false;
    m_epid_isValid = false;

    m_estimated_availabilities_isSet = false;
    m_estimated_availabilities_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_inferred_epid_isSet = false;
    m_inferred_epid_isValid = false;

    m_item_affiliate_web_url_isSet = false;
    m_item_affiliate_web_url_isValid = false;

    m_item_end_date_isSet = false;
    m_item_end_date_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_location_isSet = false;
    m_item_location_isValid = false;

    m_item_web_url_isSet = false;
    m_item_web_url_isValid = false;

    m_legacy_item_id_isSet = false;
    m_legacy_item_id_isValid = false;

    m_localized_aspects_isSet = false;
    m_localized_aspects_isValid = false;

    m_lot_size_isSet = false;
    m_lot_size_isValid = false;

    m_marketing_price_isSet = false;
    m_marketing_price_isValid = false;

    m_material_isSet = false;
    m_material_isValid = false;

    m_minimum_price_to_bid_isSet = false;
    m_minimum_price_to_bid_isValid = false;

    m_mpn_isSet = false;
    m_mpn_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_payment_methods_isSet = false;
    m_payment_methods_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_display_condition_isSet = false;
    m_price_display_condition_isValid = false;

    m_primary_item_group_isSet = false;
    m_primary_item_group_isValid = false;

    m_primary_product_review_rating_isSet = false;
    m_primary_product_review_rating_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_fiche_web_url_isSet = false;
    m_product_fiche_web_url_isValid = false;

    m_qualified_programs_isSet = false;
    m_qualified_programs_isValid = false;

    m_quantity_limit_per_buyer_isSet = false;
    m_quantity_limit_per_buyer_isValid = false;

    m_reserve_price_met_isSet = false;
    m_reserve_price_met_isValid = false;

    m_return_terms_isSet = false;
    m_return_terms_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_seller_item_revision_isSet = false;
    m_seller_item_revision_isValid = false;

    m_ship_to_locations_isSet = false;
    m_ship_to_locations_isValid = false;

    m_shipping_options_isSet = false;
    m_shipping_options_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_size_system_isSet = false;
    m_size_system_isValid = false;

    m_size_type_isSet = false;
    m_size_type_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_top_rated_buying_experience_isSet = false;
    m_top_rated_buying_experience_isValid = false;

    m_unique_bidder_count_isSet = false;
    m_unique_bidder_count_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_pricing_measure_isSet = false;
    m_unit_pricing_measure_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_additional_images_isValid = ::OpenAPI::fromJsonValue(m_additional_images, json[QString("additionalImages")]);
    m_additional_images_isSet = !json[QString("additionalImages")].isNull() && m_additional_images_isValid;

    m_adult_only_isValid = ::OpenAPI::fromJsonValue(m_adult_only, json[QString("adultOnly")]);
    m_adult_only_isSet = !json[QString("adultOnly")].isNull() && m_adult_only_isValid;

    m_age_group_isValid = ::OpenAPI::fromJsonValue(m_age_group, json[QString("ageGroup")]);
    m_age_group_isSet = !json[QString("ageGroup")].isNull() && m_age_group_isValid;

    m_available_coupons_isValid = ::OpenAPI::fromJsonValue(m_available_coupons, json[QString("availableCoupons")]);
    m_available_coupons_isSet = !json[QString("availableCoupons")].isNull() && m_available_coupons_isValid;

    m_bid_count_isValid = ::OpenAPI::fromJsonValue(m_bid_count, json[QString("bidCount")]);
    m_bid_count_isSet = !json[QString("bidCount")].isNull() && m_bid_count_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_buying_options_isValid = ::OpenAPI::fromJsonValue(m_buying_options, json[QString("buyingOptions")]);
    m_buying_options_isSet = !json[QString("buyingOptions")].isNull() && m_buying_options_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_path_isValid = ::OpenAPI::fromJsonValue(m_category_path, json[QString("categoryPath")]);
    m_category_path_isSet = !json[QString("categoryPath")].isNull() && m_category_path_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_condition_description_isValid = ::OpenAPI::fromJsonValue(m_condition_description, json[QString("conditionDescription")]);
    m_condition_description_isSet = !json[QString("conditionDescription")].isNull() && m_condition_description_isValid;

    m_condition_id_isValid = ::OpenAPI::fromJsonValue(m_condition_id, json[QString("conditionId")]);
    m_condition_id_isSet = !json[QString("conditionId")].isNull() && m_condition_id_isValid;

    m_current_bid_price_isValid = ::OpenAPI::fromJsonValue(m_current_bid_price, json[QString("currentBidPrice")]);
    m_current_bid_price_isSet = !json[QString("currentBidPrice")].isNull() && m_current_bid_price_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_eligible_for_inline_checkout_isValid = ::OpenAPI::fromJsonValue(m_eligible_for_inline_checkout, json[QString("eligibleForInlineCheckout")]);
    m_eligible_for_inline_checkout_isSet = !json[QString("eligibleForInlineCheckout")].isNull() && m_eligible_for_inline_checkout_isValid;

    m_enabled_for_guest_checkout_isValid = ::OpenAPI::fromJsonValue(m_enabled_for_guest_checkout, json[QString("enabledForGuestCheckout")]);
    m_enabled_for_guest_checkout_isSet = !json[QString("enabledForGuestCheckout")].isNull() && m_enabled_for_guest_checkout_isValid;

    m_energy_efficiency_class_isValid = ::OpenAPI::fromJsonValue(m_energy_efficiency_class, json[QString("energyEfficiencyClass")]);
    m_energy_efficiency_class_isSet = !json[QString("energyEfficiencyClass")].isNull() && m_energy_efficiency_class_isValid;

    m_epid_isValid = ::OpenAPI::fromJsonValue(m_epid, json[QString("epid")]);
    m_epid_isSet = !json[QString("epid")].isNull() && m_epid_isValid;

    m_estimated_availabilities_isValid = ::OpenAPI::fromJsonValue(m_estimated_availabilities, json[QString("estimatedAvailabilities")]);
    m_estimated_availabilities_isSet = !json[QString("estimatedAvailabilities")].isNull() && m_estimated_availabilities_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_inferred_epid_isValid = ::OpenAPI::fromJsonValue(m_inferred_epid, json[QString("inferredEpid")]);
    m_inferred_epid_isSet = !json[QString("inferredEpid")].isNull() && m_inferred_epid_isValid;

    m_item_affiliate_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_affiliate_web_url, json[QString("itemAffiliateWebUrl")]);
    m_item_affiliate_web_url_isSet = !json[QString("itemAffiliateWebUrl")].isNull() && m_item_affiliate_web_url_isValid;

    m_item_end_date_isValid = ::OpenAPI::fromJsonValue(m_item_end_date, json[QString("itemEndDate")]);
    m_item_end_date_isSet = !json[QString("itemEndDate")].isNull() && m_item_end_date_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_item_location_isValid = ::OpenAPI::fromJsonValue(m_item_location, json[QString("itemLocation")]);
    m_item_location_isSet = !json[QString("itemLocation")].isNull() && m_item_location_isValid;

    m_item_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_web_url, json[QString("itemWebUrl")]);
    m_item_web_url_isSet = !json[QString("itemWebUrl")].isNull() && m_item_web_url_isValid;

    m_legacy_item_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_item_id, json[QString("legacyItemId")]);
    m_legacy_item_id_isSet = !json[QString("legacyItemId")].isNull() && m_legacy_item_id_isValid;

    m_localized_aspects_isValid = ::OpenAPI::fromJsonValue(m_localized_aspects, json[QString("localizedAspects")]);
    m_localized_aspects_isSet = !json[QString("localizedAspects")].isNull() && m_localized_aspects_isValid;

    m_lot_size_isValid = ::OpenAPI::fromJsonValue(m_lot_size, json[QString("lotSize")]);
    m_lot_size_isSet = !json[QString("lotSize")].isNull() && m_lot_size_isValid;

    m_marketing_price_isValid = ::OpenAPI::fromJsonValue(m_marketing_price, json[QString("marketingPrice")]);
    m_marketing_price_isSet = !json[QString("marketingPrice")].isNull() && m_marketing_price_isValid;

    m_material_isValid = ::OpenAPI::fromJsonValue(m_material, json[QString("material")]);
    m_material_isSet = !json[QString("material")].isNull() && m_material_isValid;

    m_minimum_price_to_bid_isValid = ::OpenAPI::fromJsonValue(m_minimum_price_to_bid, json[QString("minimumPriceToBid")]);
    m_minimum_price_to_bid_isSet = !json[QString("minimumPriceToBid")].isNull() && m_minimum_price_to_bid_isValid;

    m_mpn_isValid = ::OpenAPI::fromJsonValue(m_mpn, json[QString("mpn")]);
    m_mpn_isSet = !json[QString("mpn")].isNull() && m_mpn_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_payment_methods, json[QString("paymentMethods")]);
    m_payment_methods_isSet = !json[QString("paymentMethods")].isNull() && m_payment_methods_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_display_condition_isValid = ::OpenAPI::fromJsonValue(m_price_display_condition, json[QString("priceDisplayCondition")]);
    m_price_display_condition_isSet = !json[QString("priceDisplayCondition")].isNull() && m_price_display_condition_isValid;

    m_primary_item_group_isValid = ::OpenAPI::fromJsonValue(m_primary_item_group, json[QString("primaryItemGroup")]);
    m_primary_item_group_isSet = !json[QString("primaryItemGroup")].isNull() && m_primary_item_group_isValid;

    m_primary_product_review_rating_isValid = ::OpenAPI::fromJsonValue(m_primary_product_review_rating, json[QString("primaryProductReviewRating")]);
    m_primary_product_review_rating_isSet = !json[QString("primaryProductReviewRating")].isNull() && m_primary_product_review_rating_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_fiche_web_url_isValid = ::OpenAPI::fromJsonValue(m_product_fiche_web_url, json[QString("productFicheWebUrl")]);
    m_product_fiche_web_url_isSet = !json[QString("productFicheWebUrl")].isNull() && m_product_fiche_web_url_isValid;

    m_qualified_programs_isValid = ::OpenAPI::fromJsonValue(m_qualified_programs, json[QString("qualifiedPrograms")]);
    m_qualified_programs_isSet = !json[QString("qualifiedPrograms")].isNull() && m_qualified_programs_isValid;

    m_quantity_limit_per_buyer_isValid = ::OpenAPI::fromJsonValue(m_quantity_limit_per_buyer, json[QString("quantityLimitPerBuyer")]);
    m_quantity_limit_per_buyer_isSet = !json[QString("quantityLimitPerBuyer")].isNull() && m_quantity_limit_per_buyer_isValid;

    m_reserve_price_met_isValid = ::OpenAPI::fromJsonValue(m_reserve_price_met, json[QString("reservePriceMet")]);
    m_reserve_price_met_isSet = !json[QString("reservePriceMet")].isNull() && m_reserve_price_met_isValid;

    m_return_terms_isValid = ::OpenAPI::fromJsonValue(m_return_terms, json[QString("returnTerms")]);
    m_return_terms_isSet = !json[QString("returnTerms")].isNull() && m_return_terms_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_seller_item_revision_isValid = ::OpenAPI::fromJsonValue(m_seller_item_revision, json[QString("sellerItemRevision")]);
    m_seller_item_revision_isSet = !json[QString("sellerItemRevision")].isNull() && m_seller_item_revision_isValid;

    m_ship_to_locations_isValid = ::OpenAPI::fromJsonValue(m_ship_to_locations, json[QString("shipToLocations")]);
    m_ship_to_locations_isSet = !json[QString("shipToLocations")].isNull() && m_ship_to_locations_isValid;

    m_shipping_options_isValid = ::OpenAPI::fromJsonValue(m_shipping_options, json[QString("shippingOptions")]);
    m_shipping_options_isSet = !json[QString("shippingOptions")].isNull() && m_shipping_options_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_size_system_isValid = ::OpenAPI::fromJsonValue(m_size_system, json[QString("sizeSystem")]);
    m_size_system_isSet = !json[QString("sizeSystem")].isNull() && m_size_system_isValid;

    m_size_type_isValid = ::OpenAPI::fromJsonValue(m_size_type, json[QString("sizeType")]);
    m_size_type_isSet = !json[QString("sizeType")].isNull() && m_size_type_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_top_rated_buying_experience_isValid = ::OpenAPI::fromJsonValue(m_top_rated_buying_experience, json[QString("topRatedBuyingExperience")]);
    m_top_rated_buying_experience_isSet = !json[QString("topRatedBuyingExperience")].isNull() && m_top_rated_buying_experience_isValid;

    m_unique_bidder_count_isValid = ::OpenAPI::fromJsonValue(m_unique_bidder_count, json[QString("uniqueBidderCount")]);
    m_unique_bidder_count_isSet = !json[QString("uniqueBidderCount")].isNull() && m_unique_bidder_count_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_unit_pricing_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_pricing_measure, json[QString("unitPricingMeasure")]);
    m_unit_pricing_measure_isSet = !json[QString("unitPricingMeasure")].isNull() && m_unit_pricing_measure_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_images.size() > 0) {
        obj.insert(QString("additionalImages"), ::OpenAPI::toJsonValue(m_additional_images));
    }
    if (m_adult_only_isSet) {
        obj.insert(QString("adultOnly"), ::OpenAPI::toJsonValue(m_adult_only));
    }
    if (m_age_group_isSet) {
        obj.insert(QString("ageGroup"), ::OpenAPI::toJsonValue(m_age_group));
    }
    if (m_available_coupons.size() > 0) {
        obj.insert(QString("availableCoupons"), ::OpenAPI::toJsonValue(m_available_coupons));
    }
    if (m_bid_count_isSet) {
        obj.insert(QString("bidCount"), ::OpenAPI::toJsonValue(m_bid_count));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_buying_options.size() > 0) {
        obj.insert(QString("buyingOptions"), ::OpenAPI::toJsonValue(m_buying_options));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_path_isSet) {
        obj.insert(QString("categoryPath"), ::OpenAPI::toJsonValue(m_category_path));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_condition_description_isSet) {
        obj.insert(QString("conditionDescription"), ::OpenAPI::toJsonValue(m_condition_description));
    }
    if (m_condition_id_isSet) {
        obj.insert(QString("conditionId"), ::OpenAPI::toJsonValue(m_condition_id));
    }
    if (m_current_bid_price.isSet()) {
        obj.insert(QString("currentBidPrice"), ::OpenAPI::toJsonValue(m_current_bid_price));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_eligible_for_inline_checkout_isSet) {
        obj.insert(QString("eligibleForInlineCheckout"), ::OpenAPI::toJsonValue(m_eligible_for_inline_checkout));
    }
    if (m_enabled_for_guest_checkout_isSet) {
        obj.insert(QString("enabledForGuestCheckout"), ::OpenAPI::toJsonValue(m_enabled_for_guest_checkout));
    }
    if (m_energy_efficiency_class_isSet) {
        obj.insert(QString("energyEfficiencyClass"), ::OpenAPI::toJsonValue(m_energy_efficiency_class));
    }
    if (m_epid_isSet) {
        obj.insert(QString("epid"), ::OpenAPI::toJsonValue(m_epid));
    }
    if (m_estimated_availabilities.size() > 0) {
        obj.insert(QString("estimatedAvailabilities"), ::OpenAPI::toJsonValue(m_estimated_availabilities));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_gtin_isSet) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_inferred_epid_isSet) {
        obj.insert(QString("inferredEpid"), ::OpenAPI::toJsonValue(m_inferred_epid));
    }
    if (m_item_affiliate_web_url_isSet) {
        obj.insert(QString("itemAffiliateWebUrl"), ::OpenAPI::toJsonValue(m_item_affiliate_web_url));
    }
    if (m_item_end_date_isSet) {
        obj.insert(QString("itemEndDate"), ::OpenAPI::toJsonValue(m_item_end_date));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_location.isSet()) {
        obj.insert(QString("itemLocation"), ::OpenAPI::toJsonValue(m_item_location));
    }
    if (m_item_web_url_isSet) {
        obj.insert(QString("itemWebUrl"), ::OpenAPI::toJsonValue(m_item_web_url));
    }
    if (m_legacy_item_id_isSet) {
        obj.insert(QString("legacyItemId"), ::OpenAPI::toJsonValue(m_legacy_item_id));
    }
    if (m_localized_aspects.size() > 0) {
        obj.insert(QString("localizedAspects"), ::OpenAPI::toJsonValue(m_localized_aspects));
    }
    if (m_lot_size_isSet) {
        obj.insert(QString("lotSize"), ::OpenAPI::toJsonValue(m_lot_size));
    }
    if (m_marketing_price.isSet()) {
        obj.insert(QString("marketingPrice"), ::OpenAPI::toJsonValue(m_marketing_price));
    }
    if (m_material_isSet) {
        obj.insert(QString("material"), ::OpenAPI::toJsonValue(m_material));
    }
    if (m_minimum_price_to_bid.isSet()) {
        obj.insert(QString("minimumPriceToBid"), ::OpenAPI::toJsonValue(m_minimum_price_to_bid));
    }
    if (m_mpn_isSet) {
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(m_mpn));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_payment_methods.size() > 0) {
        obj.insert(QString("paymentMethods"), ::OpenAPI::toJsonValue(m_payment_methods));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_display_condition_isSet) {
        obj.insert(QString("priceDisplayCondition"), ::OpenAPI::toJsonValue(m_price_display_condition));
    }
    if (m_primary_item_group.isSet()) {
        obj.insert(QString("primaryItemGroup"), ::OpenAPI::toJsonValue(m_primary_item_group));
    }
    if (m_primary_product_review_rating.isSet()) {
        obj.insert(QString("primaryProductReviewRating"), ::OpenAPI::toJsonValue(m_primary_product_review_rating));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_fiche_web_url_isSet) {
        obj.insert(QString("productFicheWebUrl"), ::OpenAPI::toJsonValue(m_product_fiche_web_url));
    }
    if (m_qualified_programs.size() > 0) {
        obj.insert(QString("qualifiedPrograms"), ::OpenAPI::toJsonValue(m_qualified_programs));
    }
    if (m_quantity_limit_per_buyer_isSet) {
        obj.insert(QString("quantityLimitPerBuyer"), ::OpenAPI::toJsonValue(m_quantity_limit_per_buyer));
    }
    if (m_reserve_price_met_isSet) {
        obj.insert(QString("reservePriceMet"), ::OpenAPI::toJsonValue(m_reserve_price_met));
    }
    if (m_return_terms.isSet()) {
        obj.insert(QString("returnTerms"), ::OpenAPI::toJsonValue(m_return_terms));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_seller_item_revision_isSet) {
        obj.insert(QString("sellerItemRevision"), ::OpenAPI::toJsonValue(m_seller_item_revision));
    }
    if (m_ship_to_locations.isSet()) {
        obj.insert(QString("shipToLocations"), ::OpenAPI::toJsonValue(m_ship_to_locations));
    }
    if (m_shipping_options.size() > 0) {
        obj.insert(QString("shippingOptions"), ::OpenAPI::toJsonValue(m_shipping_options));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_size_system_isSet) {
        obj.insert(QString("sizeSystem"), ::OpenAPI::toJsonValue(m_size_system));
    }
    if (m_size_type_isSet) {
        obj.insert(QString("sizeType"), ::OpenAPI::toJsonValue(m_size_type));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_top_rated_buying_experience_isSet) {
        obj.insert(QString("topRatedBuyingExperience"), ::OpenAPI::toJsonValue(m_top_rated_buying_experience));
    }
    if (m_unique_bidder_count_isSet) {
        obj.insert(QString("uniqueBidderCount"), ::OpenAPI::toJsonValue(m_unique_bidder_count));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_pricing_measure_isSet) {
        obj.insert(QString("unitPricingMeasure"), ::OpenAPI::toJsonValue(m_unit_pricing_measure));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIImage> OAIItem::getAdditionalImages() const {
    return m_additional_images;
}
void OAIItem::setAdditionalImages(const QList<OAIImage> &additional_images) {
    m_additional_images = additional_images;
    m_additional_images_isSet = true;
}

bool OAIItem::is_additional_images_Set() const{
    return m_additional_images_isSet;
}

bool OAIItem::is_additional_images_Valid() const{
    return m_additional_images_isValid;
}

bool OAIItem::isAdultOnly() const {
    return m_adult_only;
}
void OAIItem::setAdultOnly(const bool &adult_only) {
    m_adult_only = adult_only;
    m_adult_only_isSet = true;
}

bool OAIItem::is_adult_only_Set() const{
    return m_adult_only_isSet;
}

bool OAIItem::is_adult_only_Valid() const{
    return m_adult_only_isValid;
}

QString OAIItem::getAgeGroup() const {
    return m_age_group;
}
void OAIItem::setAgeGroup(const QString &age_group) {
    m_age_group = age_group;
    m_age_group_isSet = true;
}

bool OAIItem::is_age_group_Set() const{
    return m_age_group_isSet;
}

bool OAIItem::is_age_group_Valid() const{
    return m_age_group_isValid;
}

QList<OAIAvailableCoupon> OAIItem::getAvailableCoupons() const {
    return m_available_coupons;
}
void OAIItem::setAvailableCoupons(const QList<OAIAvailableCoupon> &available_coupons) {
    m_available_coupons = available_coupons;
    m_available_coupons_isSet = true;
}

bool OAIItem::is_available_coupons_Set() const{
    return m_available_coupons_isSet;
}

bool OAIItem::is_available_coupons_Valid() const{
    return m_available_coupons_isValid;
}

qint32 OAIItem::getBidCount() const {
    return m_bid_count;
}
void OAIItem::setBidCount(const qint32 &bid_count) {
    m_bid_count = bid_count;
    m_bid_count_isSet = true;
}

bool OAIItem::is_bid_count_Set() const{
    return m_bid_count_isSet;
}

bool OAIItem::is_bid_count_Valid() const{
    return m_bid_count_isValid;
}

QString OAIItem::getBrand() const {
    return m_brand;
}
void OAIItem::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIItem::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIItem::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIItem::getBuyingOptions() const {
    return m_buying_options;
}
void OAIItem::setBuyingOptions(const QList<QString> &buying_options) {
    m_buying_options = buying_options;
    m_buying_options_isSet = true;
}

bool OAIItem::is_buying_options_Set() const{
    return m_buying_options_isSet;
}

bool OAIItem::is_buying_options_Valid() const{
    return m_buying_options_isValid;
}

QString OAIItem::getCategoryId() const {
    return m_category_id;
}
void OAIItem::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIItem::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIItem::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIItem::getCategoryPath() const {
    return m_category_path;
}
void OAIItem::setCategoryPath(const QString &category_path) {
    m_category_path = category_path;
    m_category_path_isSet = true;
}

bool OAIItem::is_category_path_Set() const{
    return m_category_path_isSet;
}

bool OAIItem::is_category_path_Valid() const{
    return m_category_path_isValid;
}

QString OAIItem::getColor() const {
    return m_color;
}
void OAIItem::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIItem::is_color_Set() const{
    return m_color_isSet;
}

bool OAIItem::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIItem::getCondition() const {
    return m_condition;
}
void OAIItem::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIItem::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIItem::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIItem::getConditionDescription() const {
    return m_condition_description;
}
void OAIItem::setConditionDescription(const QString &condition_description) {
    m_condition_description = condition_description;
    m_condition_description_isSet = true;
}

bool OAIItem::is_condition_description_Set() const{
    return m_condition_description_isSet;
}

bool OAIItem::is_condition_description_Valid() const{
    return m_condition_description_isValid;
}

QString OAIItem::getConditionId() const {
    return m_condition_id;
}
void OAIItem::setConditionId(const QString &condition_id) {
    m_condition_id = condition_id;
    m_condition_id_isSet = true;
}

bool OAIItem::is_condition_id_Set() const{
    return m_condition_id_isSet;
}

bool OAIItem::is_condition_id_Valid() const{
    return m_condition_id_isValid;
}

OAIConvertedAmount OAIItem::getCurrentBidPrice() const {
    return m_current_bid_price;
}
void OAIItem::setCurrentBidPrice(const OAIConvertedAmount &current_bid_price) {
    m_current_bid_price = current_bid_price;
    m_current_bid_price_isSet = true;
}

bool OAIItem::is_current_bid_price_Set() const{
    return m_current_bid_price_isSet;
}

bool OAIItem::is_current_bid_price_Valid() const{
    return m_current_bid_price_isValid;
}

QString OAIItem::getDescription() const {
    return m_description;
}
void OAIItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItem::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIItem::isEligibleForInlineCheckout() const {
    return m_eligible_for_inline_checkout;
}
void OAIItem::setEligibleForInlineCheckout(const bool &eligible_for_inline_checkout) {
    m_eligible_for_inline_checkout = eligible_for_inline_checkout;
    m_eligible_for_inline_checkout_isSet = true;
}

bool OAIItem::is_eligible_for_inline_checkout_Set() const{
    return m_eligible_for_inline_checkout_isSet;
}

bool OAIItem::is_eligible_for_inline_checkout_Valid() const{
    return m_eligible_for_inline_checkout_isValid;
}

bool OAIItem::isEnabledForGuestCheckout() const {
    return m_enabled_for_guest_checkout;
}
void OAIItem::setEnabledForGuestCheckout(const bool &enabled_for_guest_checkout) {
    m_enabled_for_guest_checkout = enabled_for_guest_checkout;
    m_enabled_for_guest_checkout_isSet = true;
}

bool OAIItem::is_enabled_for_guest_checkout_Set() const{
    return m_enabled_for_guest_checkout_isSet;
}

bool OAIItem::is_enabled_for_guest_checkout_Valid() const{
    return m_enabled_for_guest_checkout_isValid;
}

QString OAIItem::getEnergyEfficiencyClass() const {
    return m_energy_efficiency_class;
}
void OAIItem::setEnergyEfficiencyClass(const QString &energy_efficiency_class) {
    m_energy_efficiency_class = energy_efficiency_class;
    m_energy_efficiency_class_isSet = true;
}

bool OAIItem::is_energy_efficiency_class_Set() const{
    return m_energy_efficiency_class_isSet;
}

bool OAIItem::is_energy_efficiency_class_Valid() const{
    return m_energy_efficiency_class_isValid;
}

QString OAIItem::getEpid() const {
    return m_epid;
}
void OAIItem::setEpid(const QString &epid) {
    m_epid = epid;
    m_epid_isSet = true;
}

bool OAIItem::is_epid_Set() const{
    return m_epid_isSet;
}

bool OAIItem::is_epid_Valid() const{
    return m_epid_isValid;
}

QList<OAIEstimatedAvailability> OAIItem::getEstimatedAvailabilities() const {
    return m_estimated_availabilities;
}
void OAIItem::setEstimatedAvailabilities(const QList<OAIEstimatedAvailability> &estimated_availabilities) {
    m_estimated_availabilities = estimated_availabilities;
    m_estimated_availabilities_isSet = true;
}

bool OAIItem::is_estimated_availabilities_Set() const{
    return m_estimated_availabilities_isSet;
}

bool OAIItem::is_estimated_availabilities_Valid() const{
    return m_estimated_availabilities_isValid;
}

QString OAIItem::getGender() const {
    return m_gender;
}
void OAIItem::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIItem::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIItem::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIItem::getGtin() const {
    return m_gtin;
}
void OAIItem::setGtin(const QString &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIItem::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIItem::is_gtin_Valid() const{
    return m_gtin_isValid;
}

OAIImage OAIItem::getImage() const {
    return m_image;
}
void OAIItem::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIItem::is_image_Set() const{
    return m_image_isSet;
}

bool OAIItem::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIItem::getInferredEpid() const {
    return m_inferred_epid;
}
void OAIItem::setInferredEpid(const QString &inferred_epid) {
    m_inferred_epid = inferred_epid;
    m_inferred_epid_isSet = true;
}

bool OAIItem::is_inferred_epid_Set() const{
    return m_inferred_epid_isSet;
}

bool OAIItem::is_inferred_epid_Valid() const{
    return m_inferred_epid_isValid;
}

QString OAIItem::getItemAffiliateWebUrl() const {
    return m_item_affiliate_web_url;
}
void OAIItem::setItemAffiliateWebUrl(const QString &item_affiliate_web_url) {
    m_item_affiliate_web_url = item_affiliate_web_url;
    m_item_affiliate_web_url_isSet = true;
}

bool OAIItem::is_item_affiliate_web_url_Set() const{
    return m_item_affiliate_web_url_isSet;
}

bool OAIItem::is_item_affiliate_web_url_Valid() const{
    return m_item_affiliate_web_url_isValid;
}

QString OAIItem::getItemEndDate() const {
    return m_item_end_date;
}
void OAIItem::setItemEndDate(const QString &item_end_date) {
    m_item_end_date = item_end_date;
    m_item_end_date_isSet = true;
}

bool OAIItem::is_item_end_date_Set() const{
    return m_item_end_date_isSet;
}

bool OAIItem::is_item_end_date_Valid() const{
    return m_item_end_date_isValid;
}

QString OAIItem::getItemId() const {
    return m_item_id;
}
void OAIItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAIAddress OAIItem::getItemLocation() const {
    return m_item_location;
}
void OAIItem::setItemLocation(const OAIAddress &item_location) {
    m_item_location = item_location;
    m_item_location_isSet = true;
}

bool OAIItem::is_item_location_Set() const{
    return m_item_location_isSet;
}

bool OAIItem::is_item_location_Valid() const{
    return m_item_location_isValid;
}

QString OAIItem::getItemWebUrl() const {
    return m_item_web_url;
}
void OAIItem::setItemWebUrl(const QString &item_web_url) {
    m_item_web_url = item_web_url;
    m_item_web_url_isSet = true;
}

bool OAIItem::is_item_web_url_Set() const{
    return m_item_web_url_isSet;
}

bool OAIItem::is_item_web_url_Valid() const{
    return m_item_web_url_isValid;
}

QString OAIItem::getLegacyItemId() const {
    return m_legacy_item_id;
}
void OAIItem::setLegacyItemId(const QString &legacy_item_id) {
    m_legacy_item_id = legacy_item_id;
    m_legacy_item_id_isSet = true;
}

bool OAIItem::is_legacy_item_id_Set() const{
    return m_legacy_item_id_isSet;
}

bool OAIItem::is_legacy_item_id_Valid() const{
    return m_legacy_item_id_isValid;
}

QList<OAITypedNameValue> OAIItem::getLocalizedAspects() const {
    return m_localized_aspects;
}
void OAIItem::setLocalizedAspects(const QList<OAITypedNameValue> &localized_aspects) {
    m_localized_aspects = localized_aspects;
    m_localized_aspects_isSet = true;
}

bool OAIItem::is_localized_aspects_Set() const{
    return m_localized_aspects_isSet;
}

bool OAIItem::is_localized_aspects_Valid() const{
    return m_localized_aspects_isValid;
}

qint32 OAIItem::getLotSize() const {
    return m_lot_size;
}
void OAIItem::setLotSize(const qint32 &lot_size) {
    m_lot_size = lot_size;
    m_lot_size_isSet = true;
}

bool OAIItem::is_lot_size_Set() const{
    return m_lot_size_isSet;
}

bool OAIItem::is_lot_size_Valid() const{
    return m_lot_size_isValid;
}

OAIMarketingPrice OAIItem::getMarketingPrice() const {
    return m_marketing_price;
}
void OAIItem::setMarketingPrice(const OAIMarketingPrice &marketing_price) {
    m_marketing_price = marketing_price;
    m_marketing_price_isSet = true;
}

bool OAIItem::is_marketing_price_Set() const{
    return m_marketing_price_isSet;
}

bool OAIItem::is_marketing_price_Valid() const{
    return m_marketing_price_isValid;
}

QString OAIItem::getMaterial() const {
    return m_material;
}
void OAIItem::setMaterial(const QString &material) {
    m_material = material;
    m_material_isSet = true;
}

bool OAIItem::is_material_Set() const{
    return m_material_isSet;
}

bool OAIItem::is_material_Valid() const{
    return m_material_isValid;
}

OAIConvertedAmount OAIItem::getMinimumPriceToBid() const {
    return m_minimum_price_to_bid;
}
void OAIItem::setMinimumPriceToBid(const OAIConvertedAmount &minimum_price_to_bid) {
    m_minimum_price_to_bid = minimum_price_to_bid;
    m_minimum_price_to_bid_isSet = true;
}

bool OAIItem::is_minimum_price_to_bid_Set() const{
    return m_minimum_price_to_bid_isSet;
}

bool OAIItem::is_minimum_price_to_bid_Valid() const{
    return m_minimum_price_to_bid_isValid;
}

QString OAIItem::getMpn() const {
    return m_mpn;
}
void OAIItem::setMpn(const QString &mpn) {
    m_mpn = mpn;
    m_mpn_isSet = true;
}

bool OAIItem::is_mpn_Set() const{
    return m_mpn_isSet;
}

bool OAIItem::is_mpn_Valid() const{
    return m_mpn_isValid;
}

QString OAIItem::getPattern() const {
    return m_pattern;
}
void OAIItem::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIItem::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIItem::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QList<OAIPaymentMethod> OAIItem::getPaymentMethods() const {
    return m_payment_methods;
}
void OAIItem::setPaymentMethods(const QList<OAIPaymentMethod> &payment_methods) {
    m_payment_methods = payment_methods;
    m_payment_methods_isSet = true;
}

bool OAIItem::is_payment_methods_Set() const{
    return m_payment_methods_isSet;
}

bool OAIItem::is_payment_methods_Valid() const{
    return m_payment_methods_isValid;
}

OAIConvertedAmount OAIItem::getPrice() const {
    return m_price;
}
void OAIItem::setPrice(const OAIConvertedAmount &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIItem::getPriceDisplayCondition() const {
    return m_price_display_condition;
}
void OAIItem::setPriceDisplayCondition(const QString &price_display_condition) {
    m_price_display_condition = price_display_condition;
    m_price_display_condition_isSet = true;
}

bool OAIItem::is_price_display_condition_Set() const{
    return m_price_display_condition_isSet;
}

bool OAIItem::is_price_display_condition_Valid() const{
    return m_price_display_condition_isValid;
}

OAIItemGroupSummary OAIItem::getPrimaryItemGroup() const {
    return m_primary_item_group;
}
void OAIItem::setPrimaryItemGroup(const OAIItemGroupSummary &primary_item_group) {
    m_primary_item_group = primary_item_group;
    m_primary_item_group_isSet = true;
}

bool OAIItem::is_primary_item_group_Set() const{
    return m_primary_item_group_isSet;
}

bool OAIItem::is_primary_item_group_Valid() const{
    return m_primary_item_group_isValid;
}

OAIReviewRating OAIItem::getPrimaryProductReviewRating() const {
    return m_primary_product_review_rating;
}
void OAIItem::setPrimaryProductReviewRating(const OAIReviewRating &primary_product_review_rating) {
    m_primary_product_review_rating = primary_product_review_rating;
    m_primary_product_review_rating_isSet = true;
}

bool OAIItem::is_primary_product_review_rating_Set() const{
    return m_primary_product_review_rating_isSet;
}

bool OAIItem::is_primary_product_review_rating_Valid() const{
    return m_primary_product_review_rating_isValid;
}

OAIProduct OAIItem::getProduct() const {
    return m_product;
}
void OAIItem::setProduct(const OAIProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIItem::is_product_Set() const{
    return m_product_isSet;
}

bool OAIItem::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIItem::getProductFicheWebUrl() const {
    return m_product_fiche_web_url;
}
void OAIItem::setProductFicheWebUrl(const QString &product_fiche_web_url) {
    m_product_fiche_web_url = product_fiche_web_url;
    m_product_fiche_web_url_isSet = true;
}

bool OAIItem::is_product_fiche_web_url_Set() const{
    return m_product_fiche_web_url_isSet;
}

bool OAIItem::is_product_fiche_web_url_Valid() const{
    return m_product_fiche_web_url_isValid;
}

QList<QString> OAIItem::getQualifiedPrograms() const {
    return m_qualified_programs;
}
void OAIItem::setQualifiedPrograms(const QList<QString> &qualified_programs) {
    m_qualified_programs = qualified_programs;
    m_qualified_programs_isSet = true;
}

bool OAIItem::is_qualified_programs_Set() const{
    return m_qualified_programs_isSet;
}

bool OAIItem::is_qualified_programs_Valid() const{
    return m_qualified_programs_isValid;
}

qint32 OAIItem::getQuantityLimitPerBuyer() const {
    return m_quantity_limit_per_buyer;
}
void OAIItem::setQuantityLimitPerBuyer(const qint32 &quantity_limit_per_buyer) {
    m_quantity_limit_per_buyer = quantity_limit_per_buyer;
    m_quantity_limit_per_buyer_isSet = true;
}

bool OAIItem::is_quantity_limit_per_buyer_Set() const{
    return m_quantity_limit_per_buyer_isSet;
}

bool OAIItem::is_quantity_limit_per_buyer_Valid() const{
    return m_quantity_limit_per_buyer_isValid;
}

bool OAIItem::isReservePriceMet() const {
    return m_reserve_price_met;
}
void OAIItem::setReservePriceMet(const bool &reserve_price_met) {
    m_reserve_price_met = reserve_price_met;
    m_reserve_price_met_isSet = true;
}

bool OAIItem::is_reserve_price_met_Set() const{
    return m_reserve_price_met_isSet;
}

bool OAIItem::is_reserve_price_met_Valid() const{
    return m_reserve_price_met_isValid;
}

OAIItemReturnTerms OAIItem::getReturnTerms() const {
    return m_return_terms;
}
void OAIItem::setReturnTerms(const OAIItemReturnTerms &return_terms) {
    m_return_terms = return_terms;
    m_return_terms_isSet = true;
}

bool OAIItem::is_return_terms_Set() const{
    return m_return_terms_isSet;
}

bool OAIItem::is_return_terms_Valid() const{
    return m_return_terms_isValid;
}

OAISellerDetail OAIItem::getSeller() const {
    return m_seller;
}
void OAIItem::setSeller(const OAISellerDetail &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIItem::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIItem::is_seller_Valid() const{
    return m_seller_isValid;
}

QString OAIItem::getSellerItemRevision() const {
    return m_seller_item_revision;
}
void OAIItem::setSellerItemRevision(const QString &seller_item_revision) {
    m_seller_item_revision = seller_item_revision;
    m_seller_item_revision_isSet = true;
}

bool OAIItem::is_seller_item_revision_Set() const{
    return m_seller_item_revision_isSet;
}

bool OAIItem::is_seller_item_revision_Valid() const{
    return m_seller_item_revision_isValid;
}

OAIShipToLocations OAIItem::getShipToLocations() const {
    return m_ship_to_locations;
}
void OAIItem::setShipToLocations(const OAIShipToLocations &ship_to_locations) {
    m_ship_to_locations = ship_to_locations;
    m_ship_to_locations_isSet = true;
}

bool OAIItem::is_ship_to_locations_Set() const{
    return m_ship_to_locations_isSet;
}

bool OAIItem::is_ship_to_locations_Valid() const{
    return m_ship_to_locations_isValid;
}

QList<OAIShippingOption> OAIItem::getShippingOptions() const {
    return m_shipping_options;
}
void OAIItem::setShippingOptions(const QList<OAIShippingOption> &shipping_options) {
    m_shipping_options = shipping_options;
    m_shipping_options_isSet = true;
}

bool OAIItem::is_shipping_options_Set() const{
    return m_shipping_options_isSet;
}

bool OAIItem::is_shipping_options_Valid() const{
    return m_shipping_options_isValid;
}

QString OAIItem::getShortDescription() const {
    return m_short_description;
}
void OAIItem::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIItem::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIItem::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAIItem::getSize() const {
    return m_size;
}
void OAIItem::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIItem::is_size_Set() const{
    return m_size_isSet;
}

bool OAIItem::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIItem::getSizeSystem() const {
    return m_size_system;
}
void OAIItem::setSizeSystem(const QString &size_system) {
    m_size_system = size_system;
    m_size_system_isSet = true;
}

bool OAIItem::is_size_system_Set() const{
    return m_size_system_isSet;
}

bool OAIItem::is_size_system_Valid() const{
    return m_size_system_isValid;
}

QString OAIItem::getSizeType() const {
    return m_size_type;
}
void OAIItem::setSizeType(const QString &size_type) {
    m_size_type = size_type;
    m_size_type_isSet = true;
}

bool OAIItem::is_size_type_Set() const{
    return m_size_type_isSet;
}

bool OAIItem::is_size_type_Valid() const{
    return m_size_type_isValid;
}

QString OAIItem::getSubtitle() const {
    return m_subtitle;
}
void OAIItem::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIItem::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIItem::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QList<OAITaxes> OAIItem::getTaxes() const {
    return m_taxes;
}
void OAIItem::setTaxes(const QList<OAITaxes> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIItem::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIItem::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAIItem::getTitle() const {
    return m_title;
}
void OAIItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItem::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIItem::isTopRatedBuyingExperience() const {
    return m_top_rated_buying_experience;
}
void OAIItem::setTopRatedBuyingExperience(const bool &top_rated_buying_experience) {
    m_top_rated_buying_experience = top_rated_buying_experience;
    m_top_rated_buying_experience_isSet = true;
}

bool OAIItem::is_top_rated_buying_experience_Set() const{
    return m_top_rated_buying_experience_isSet;
}

bool OAIItem::is_top_rated_buying_experience_Valid() const{
    return m_top_rated_buying_experience_isValid;
}

qint32 OAIItem::getUniqueBidderCount() const {
    return m_unique_bidder_count;
}
void OAIItem::setUniqueBidderCount(const qint32 &unique_bidder_count) {
    m_unique_bidder_count = unique_bidder_count;
    m_unique_bidder_count_isSet = true;
}

bool OAIItem::is_unique_bidder_count_Set() const{
    return m_unique_bidder_count_isSet;
}

bool OAIItem::is_unique_bidder_count_Valid() const{
    return m_unique_bidder_count_isValid;
}

OAIConvertedAmount OAIItem::getUnitPrice() const {
    return m_unit_price;
}
void OAIItem::setUnitPrice(const OAIConvertedAmount &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIItem::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIItem::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

QString OAIItem::getUnitPricingMeasure() const {
    return m_unit_pricing_measure;
}
void OAIItem::setUnitPricingMeasure(const QString &unit_pricing_measure) {
    m_unit_pricing_measure = unit_pricing_measure;
    m_unit_pricing_measure_isSet = true;
}

bool OAIItem::is_unit_pricing_measure_Set() const{
    return m_unit_pricing_measure_isSet;
}

bool OAIItem::is_unit_pricing_measure_Valid() const{
    return m_unit_pricing_measure_isValid;
}

QList<OAIError> OAIItem::getWarnings() const {
    return m_warnings;
}
void OAIItem::setWarnings(const QList<OAIError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIItem::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIItem::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_coupons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buying_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_bid_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligible_for_inline_checkout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_for_guest_checkout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficiency_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_availabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_epid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_affiliate_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_aspects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_price_to_bid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_display_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_product_review_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_fiche_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_programs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_limit_per_buyer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserve_price_met_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_item_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_rated_buying_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_bidder_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_pricing_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
