/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICartItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICartItem::OAICartItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICartItem::OAICartItem() {
    this->initializeModel();
}

OAICartItem::~OAICartItem() {}

void OAICartItem::initializeModel() {

    m_cart_item_id_isSet = false;
    m_cart_item_id_isValid = false;

    m_cart_item_subtotal_isSet = false;
    m_cart_item_subtotal_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_web_url_isSet = false;
    m_item_web_url_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICartItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICartItem::fromJsonObject(QJsonObject json) {

    m_cart_item_id_isValid = ::OpenAPI::fromJsonValue(m_cart_item_id, json[QString("cartItemId")]);
    m_cart_item_id_isSet = !json[QString("cartItemId")].isNull() && m_cart_item_id_isValid;

    m_cart_item_subtotal_isValid = ::OpenAPI::fromJsonValue(m_cart_item_subtotal, json[QString("cartItemSubtotal")]);
    m_cart_item_subtotal_isSet = !json[QString("cartItemSubtotal")].isNull() && m_cart_item_subtotal_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_item_web_url_isValid = ::OpenAPI::fromJsonValue(m_item_web_url, json[QString("itemWebUrl")]);
    m_item_web_url_isSet = !json[QString("itemWebUrl")].isNull() && m_item_web_url_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICartItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICartItem::asJsonObject() const {
    QJsonObject obj;
    if (m_cart_item_id_isSet) {
        obj.insert(QString("cartItemId"), ::OpenAPI::toJsonValue(m_cart_item_id));
    }
    if (m_cart_item_subtotal.isSet()) {
        obj.insert(QString("cartItemSubtotal"), ::OpenAPI::toJsonValue(m_cart_item_subtotal));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_web_url_isSet) {
        obj.insert(QString("itemWebUrl"), ::OpenAPI::toJsonValue(m_item_web_url));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAICartItem::getCartItemId() const {
    return m_cart_item_id;
}
void OAICartItem::setCartItemId(const QString &cart_item_id) {
    m_cart_item_id = cart_item_id;
    m_cart_item_id_isSet = true;
}

bool OAICartItem::is_cart_item_id_Set() const{
    return m_cart_item_id_isSet;
}

bool OAICartItem::is_cart_item_id_Valid() const{
    return m_cart_item_id_isValid;
}

OAIAmount OAICartItem::getCartItemSubtotal() const {
    return m_cart_item_subtotal;
}
void OAICartItem::setCartItemSubtotal(const OAIAmount &cart_item_subtotal) {
    m_cart_item_subtotal = cart_item_subtotal;
    m_cart_item_subtotal_isSet = true;
}

bool OAICartItem::is_cart_item_subtotal_Set() const{
    return m_cart_item_subtotal_isSet;
}

bool OAICartItem::is_cart_item_subtotal_Valid() const{
    return m_cart_item_subtotal_isValid;
}

OAIImage OAICartItem::getImage() const {
    return m_image;
}
void OAICartItem::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAICartItem::is_image_Set() const{
    return m_image_isSet;
}

bool OAICartItem::is_image_Valid() const{
    return m_image_isValid;
}

QString OAICartItem::getItemId() const {
    return m_item_id;
}
void OAICartItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICartItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICartItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAICartItem::getItemWebUrl() const {
    return m_item_web_url;
}
void OAICartItem::setItemWebUrl(const QString &item_web_url) {
    m_item_web_url = item_web_url;
    m_item_web_url_isSet = true;
}

bool OAICartItem::is_item_web_url_Set() const{
    return m_item_web_url_isSet;
}

bool OAICartItem::is_item_web_url_Valid() const{
    return m_item_web_url_isValid;
}

OAIPrice OAICartItem::getPrice() const {
    return m_price;
}
void OAICartItem::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICartItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAICartItem::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAICartItem::getQuantity() const {
    return m_quantity;
}
void OAICartItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICartItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICartItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICartItem::getTitle() const {
    return m_title;
}
void OAICartItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICartItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAICartItem::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICartItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_item_subtotal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICartItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
