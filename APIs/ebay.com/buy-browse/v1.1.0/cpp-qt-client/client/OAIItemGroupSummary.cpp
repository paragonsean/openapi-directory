/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemGroupSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemGroupSummary::OAIItemGroupSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemGroupSummary::OAIItemGroupSummary() {
    this->initializeModel();
}

OAIItemGroupSummary::~OAIItemGroupSummary() {}

void OAIItemGroupSummary::initializeModel() {

    m_item_group_additional_images_isSet = false;
    m_item_group_additional_images_isValid = false;

    m_item_group_href_isSet = false;
    m_item_group_href_isValid = false;

    m_item_group_id_isSet = false;
    m_item_group_id_isValid = false;

    m_item_group_image_isSet = false;
    m_item_group_image_isValid = false;

    m_item_group_title_isSet = false;
    m_item_group_title_isValid = false;

    m_item_group_type_isSet = false;
    m_item_group_type_isValid = false;
}

void OAIItemGroupSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemGroupSummary::fromJsonObject(QJsonObject json) {

    m_item_group_additional_images_isValid = ::OpenAPI::fromJsonValue(m_item_group_additional_images, json[QString("itemGroupAdditionalImages")]);
    m_item_group_additional_images_isSet = !json[QString("itemGroupAdditionalImages")].isNull() && m_item_group_additional_images_isValid;

    m_item_group_href_isValid = ::OpenAPI::fromJsonValue(m_item_group_href, json[QString("itemGroupHref")]);
    m_item_group_href_isSet = !json[QString("itemGroupHref")].isNull() && m_item_group_href_isValid;

    m_item_group_id_isValid = ::OpenAPI::fromJsonValue(m_item_group_id, json[QString("itemGroupId")]);
    m_item_group_id_isSet = !json[QString("itemGroupId")].isNull() && m_item_group_id_isValid;

    m_item_group_image_isValid = ::OpenAPI::fromJsonValue(m_item_group_image, json[QString("itemGroupImage")]);
    m_item_group_image_isSet = !json[QString("itemGroupImage")].isNull() && m_item_group_image_isValid;

    m_item_group_title_isValid = ::OpenAPI::fromJsonValue(m_item_group_title, json[QString("itemGroupTitle")]);
    m_item_group_title_isSet = !json[QString("itemGroupTitle")].isNull() && m_item_group_title_isValid;

    m_item_group_type_isValid = ::OpenAPI::fromJsonValue(m_item_group_type, json[QString("itemGroupType")]);
    m_item_group_type_isSet = !json[QString("itemGroupType")].isNull() && m_item_group_type_isValid;
}

QString OAIItemGroupSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemGroupSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_item_group_additional_images.size() > 0) {
        obj.insert(QString("itemGroupAdditionalImages"), ::OpenAPI::toJsonValue(m_item_group_additional_images));
    }
    if (m_item_group_href_isSet) {
        obj.insert(QString("itemGroupHref"), ::OpenAPI::toJsonValue(m_item_group_href));
    }
    if (m_item_group_id_isSet) {
        obj.insert(QString("itemGroupId"), ::OpenAPI::toJsonValue(m_item_group_id));
    }
    if (m_item_group_image.isSet()) {
        obj.insert(QString("itemGroupImage"), ::OpenAPI::toJsonValue(m_item_group_image));
    }
    if (m_item_group_title_isSet) {
        obj.insert(QString("itemGroupTitle"), ::OpenAPI::toJsonValue(m_item_group_title));
    }
    if (m_item_group_type_isSet) {
        obj.insert(QString("itemGroupType"), ::OpenAPI::toJsonValue(m_item_group_type));
    }
    return obj;
}

QList<OAIImage> OAIItemGroupSummary::getItemGroupAdditionalImages() const {
    return m_item_group_additional_images;
}
void OAIItemGroupSummary::setItemGroupAdditionalImages(const QList<OAIImage> &item_group_additional_images) {
    m_item_group_additional_images = item_group_additional_images;
    m_item_group_additional_images_isSet = true;
}

bool OAIItemGroupSummary::is_item_group_additional_images_Set() const{
    return m_item_group_additional_images_isSet;
}

bool OAIItemGroupSummary::is_item_group_additional_images_Valid() const{
    return m_item_group_additional_images_isValid;
}

QString OAIItemGroupSummary::getItemGroupHref() const {
    return m_item_group_href;
}
void OAIItemGroupSummary::setItemGroupHref(const QString &item_group_href) {
    m_item_group_href = item_group_href;
    m_item_group_href_isSet = true;
}

bool OAIItemGroupSummary::is_item_group_href_Set() const{
    return m_item_group_href_isSet;
}

bool OAIItemGroupSummary::is_item_group_href_Valid() const{
    return m_item_group_href_isValid;
}

QString OAIItemGroupSummary::getItemGroupId() const {
    return m_item_group_id;
}
void OAIItemGroupSummary::setItemGroupId(const QString &item_group_id) {
    m_item_group_id = item_group_id;
    m_item_group_id_isSet = true;
}

bool OAIItemGroupSummary::is_item_group_id_Set() const{
    return m_item_group_id_isSet;
}

bool OAIItemGroupSummary::is_item_group_id_Valid() const{
    return m_item_group_id_isValid;
}

OAIImage OAIItemGroupSummary::getItemGroupImage() const {
    return m_item_group_image;
}
void OAIItemGroupSummary::setItemGroupImage(const OAIImage &item_group_image) {
    m_item_group_image = item_group_image;
    m_item_group_image_isSet = true;
}

bool OAIItemGroupSummary::is_item_group_image_Set() const{
    return m_item_group_image_isSet;
}

bool OAIItemGroupSummary::is_item_group_image_Valid() const{
    return m_item_group_image_isValid;
}

QString OAIItemGroupSummary::getItemGroupTitle() const {
    return m_item_group_title;
}
void OAIItemGroupSummary::setItemGroupTitle(const QString &item_group_title) {
    m_item_group_title = item_group_title;
    m_item_group_title_isSet = true;
}

bool OAIItemGroupSummary::is_item_group_title_Set() const{
    return m_item_group_title_isSet;
}

bool OAIItemGroupSummary::is_item_group_title_Valid() const{
    return m_item_group_title_isValid;
}

QString OAIItemGroupSummary::getItemGroupType() const {
    return m_item_group_type;
}
void OAIItemGroupSummary::setItemGroupType(const QString &item_group_type) {
    m_item_group_type = item_group_type;
    m_item_group_type_isSet = true;
}

bool OAIItemGroupSummary::is_item_group_type_Set() const{
    return m_item_group_type_isSet;
}

bool OAIItemGroupSummary::is_item_group_type_Valid() const{
    return m_item_group_type_isValid;
}

bool OAIItemGroupSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_group_additional_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemGroupSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
