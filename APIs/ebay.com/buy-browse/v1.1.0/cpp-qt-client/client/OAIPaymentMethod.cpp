/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethod::OAIPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethod::OAIPaymentMethod() {
    this->initializeModel();
}

OAIPaymentMethod::~OAIPaymentMethod() {}

void OAIPaymentMethod::initializeModel() {

    m_payment_instructions_isSet = false;
    m_payment_instructions_isValid = false;

    m_payment_method_brands_isSet = false;
    m_payment_method_brands_isValid = false;

    m_payment_method_type_isSet = false;
    m_payment_method_type_isValid = false;

    m_seller_instructions_isSet = false;
    m_seller_instructions_isValid = false;
}

void OAIPaymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethod::fromJsonObject(QJsonObject json) {

    m_payment_instructions_isValid = ::OpenAPI::fromJsonValue(m_payment_instructions, json[QString("paymentInstructions")]);
    m_payment_instructions_isSet = !json[QString("paymentInstructions")].isNull() && m_payment_instructions_isValid;

    m_payment_method_brands_isValid = ::OpenAPI::fromJsonValue(m_payment_method_brands, json[QString("paymentMethodBrands")]);
    m_payment_method_brands_isSet = !json[QString("paymentMethodBrands")].isNull() && m_payment_method_brands_isValid;

    m_payment_method_type_isValid = ::OpenAPI::fromJsonValue(m_payment_method_type, json[QString("paymentMethodType")]);
    m_payment_method_type_isSet = !json[QString("paymentMethodType")].isNull() && m_payment_method_type_isValid;

    m_seller_instructions_isValid = ::OpenAPI::fromJsonValue(m_seller_instructions, json[QString("sellerInstructions")]);
    m_seller_instructions_isSet = !json[QString("sellerInstructions")].isNull() && m_seller_instructions_isValid;
}

QString OAIPaymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_payment_instructions.size() > 0) {
        obj.insert(QString("paymentInstructions"), ::OpenAPI::toJsonValue(m_payment_instructions));
    }
    if (m_payment_method_brands.size() > 0) {
        obj.insert(QString("paymentMethodBrands"), ::OpenAPI::toJsonValue(m_payment_method_brands));
    }
    if (m_payment_method_type_isSet) {
        obj.insert(QString("paymentMethodType"), ::OpenAPI::toJsonValue(m_payment_method_type));
    }
    if (m_seller_instructions.size() > 0) {
        obj.insert(QString("sellerInstructions"), ::OpenAPI::toJsonValue(m_seller_instructions));
    }
    return obj;
}

QList<QString> OAIPaymentMethod::getPaymentInstructions() const {
    return m_payment_instructions;
}
void OAIPaymentMethod::setPaymentInstructions(const QList<QString> &payment_instructions) {
    m_payment_instructions = payment_instructions;
    m_payment_instructions_isSet = true;
}

bool OAIPaymentMethod::is_payment_instructions_Set() const{
    return m_payment_instructions_isSet;
}

bool OAIPaymentMethod::is_payment_instructions_Valid() const{
    return m_payment_instructions_isValid;
}

QList<OAIPaymentMethodBrand> OAIPaymentMethod::getPaymentMethodBrands() const {
    return m_payment_method_brands;
}
void OAIPaymentMethod::setPaymentMethodBrands(const QList<OAIPaymentMethodBrand> &payment_method_brands) {
    m_payment_method_brands = payment_method_brands;
    m_payment_method_brands_isSet = true;
}

bool OAIPaymentMethod::is_payment_method_brands_Set() const{
    return m_payment_method_brands_isSet;
}

bool OAIPaymentMethod::is_payment_method_brands_Valid() const{
    return m_payment_method_brands_isValid;
}

QString OAIPaymentMethod::getPaymentMethodType() const {
    return m_payment_method_type;
}
void OAIPaymentMethod::setPaymentMethodType(const QString &payment_method_type) {
    m_payment_method_type = payment_method_type;
    m_payment_method_type_isSet = true;
}

bool OAIPaymentMethod::is_payment_method_type_Set() const{
    return m_payment_method_type_isSet;
}

bool OAIPaymentMethod::is_payment_method_type_Valid() const{
    return m_payment_method_type_isValid;
}

QList<QString> OAIPaymentMethod::getSellerInstructions() const {
    return m_seller_instructions;
}
void OAIPaymentMethod::setSellerInstructions(const QList<QString> &seller_instructions) {
    m_seller_instructions = seller_instructions;
    m_seller_instructions_isSet = true;
}

bool OAIPaymentMethod::is_seller_instructions_Set() const{
    return m_seller_instructions_isSet;
}

bool OAIPaymentMethod::is_seller_instructions_Valid() const{
    return m_seller_instructions_isValid;
}

bool OAIPaymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payment_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
