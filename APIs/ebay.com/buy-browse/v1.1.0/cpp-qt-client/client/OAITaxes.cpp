/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxes::OAITaxes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxes::OAITaxes() {
    this->initializeModel();
}

OAITaxes::~OAITaxes() {}

void OAITaxes::initializeModel() {

    m_ebay_collect_and_remit_tax_isSet = false;
    m_ebay_collect_and_remit_tax_isValid = false;

    m_included_in_price_isSet = false;
    m_included_in_price_isValid = false;

    m_shipping_and_handling_taxed_isSet = false;
    m_shipping_and_handling_taxed_isValid = false;

    m_tax_jurisdiction_isSet = false;
    m_tax_jurisdiction_isValid = false;

    m_tax_percentage_isSet = false;
    m_tax_percentage_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;
}

void OAITaxes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxes::fromJsonObject(QJsonObject json) {

    m_ebay_collect_and_remit_tax_isValid = ::OpenAPI::fromJsonValue(m_ebay_collect_and_remit_tax, json[QString("ebayCollectAndRemitTax")]);
    m_ebay_collect_and_remit_tax_isSet = !json[QString("ebayCollectAndRemitTax")].isNull() && m_ebay_collect_and_remit_tax_isValid;

    m_included_in_price_isValid = ::OpenAPI::fromJsonValue(m_included_in_price, json[QString("includedInPrice")]);
    m_included_in_price_isSet = !json[QString("includedInPrice")].isNull() && m_included_in_price_isValid;

    m_shipping_and_handling_taxed_isValid = ::OpenAPI::fromJsonValue(m_shipping_and_handling_taxed, json[QString("shippingAndHandlingTaxed")]);
    m_shipping_and_handling_taxed_isSet = !json[QString("shippingAndHandlingTaxed")].isNull() && m_shipping_and_handling_taxed_isValid;

    m_tax_jurisdiction_isValid = ::OpenAPI::fromJsonValue(m_tax_jurisdiction, json[QString("taxJurisdiction")]);
    m_tax_jurisdiction_isSet = !json[QString("taxJurisdiction")].isNull() && m_tax_jurisdiction_isValid;

    m_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_tax_percentage, json[QString("taxPercentage")]);
    m_tax_percentage_isSet = !json[QString("taxPercentage")].isNull() && m_tax_percentage_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("taxType")]);
    m_tax_type_isSet = !json[QString("taxType")].isNull() && m_tax_type_isValid;
}

QString OAITaxes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxes::asJsonObject() const {
    QJsonObject obj;
    if (m_ebay_collect_and_remit_tax_isSet) {
        obj.insert(QString("ebayCollectAndRemitTax"), ::OpenAPI::toJsonValue(m_ebay_collect_and_remit_tax));
    }
    if (m_included_in_price_isSet) {
        obj.insert(QString("includedInPrice"), ::OpenAPI::toJsonValue(m_included_in_price));
    }
    if (m_shipping_and_handling_taxed_isSet) {
        obj.insert(QString("shippingAndHandlingTaxed"), ::OpenAPI::toJsonValue(m_shipping_and_handling_taxed));
    }
    if (m_tax_jurisdiction.isSet()) {
        obj.insert(QString("taxJurisdiction"), ::OpenAPI::toJsonValue(m_tax_jurisdiction));
    }
    if (m_tax_percentage_isSet) {
        obj.insert(QString("taxPercentage"), ::OpenAPI::toJsonValue(m_tax_percentage));
    }
    if (m_tax_type_isSet) {
        obj.insert(QString("taxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    return obj;
}

bool OAITaxes::isEbayCollectAndRemitTax() const {
    return m_ebay_collect_and_remit_tax;
}
void OAITaxes::setEbayCollectAndRemitTax(const bool &ebay_collect_and_remit_tax) {
    m_ebay_collect_and_remit_tax = ebay_collect_and_remit_tax;
    m_ebay_collect_and_remit_tax_isSet = true;
}

bool OAITaxes::is_ebay_collect_and_remit_tax_Set() const{
    return m_ebay_collect_and_remit_tax_isSet;
}

bool OAITaxes::is_ebay_collect_and_remit_tax_Valid() const{
    return m_ebay_collect_and_remit_tax_isValid;
}

bool OAITaxes::isIncludedInPrice() const {
    return m_included_in_price;
}
void OAITaxes::setIncludedInPrice(const bool &included_in_price) {
    m_included_in_price = included_in_price;
    m_included_in_price_isSet = true;
}

bool OAITaxes::is_included_in_price_Set() const{
    return m_included_in_price_isSet;
}

bool OAITaxes::is_included_in_price_Valid() const{
    return m_included_in_price_isValid;
}

bool OAITaxes::isShippingAndHandlingTaxed() const {
    return m_shipping_and_handling_taxed;
}
void OAITaxes::setShippingAndHandlingTaxed(const bool &shipping_and_handling_taxed) {
    m_shipping_and_handling_taxed = shipping_and_handling_taxed;
    m_shipping_and_handling_taxed_isSet = true;
}

bool OAITaxes::is_shipping_and_handling_taxed_Set() const{
    return m_shipping_and_handling_taxed_isSet;
}

bool OAITaxes::is_shipping_and_handling_taxed_Valid() const{
    return m_shipping_and_handling_taxed_isValid;
}

OAITaxJurisdiction OAITaxes::getTaxJurisdiction() const {
    return m_tax_jurisdiction;
}
void OAITaxes::setTaxJurisdiction(const OAITaxJurisdiction &tax_jurisdiction) {
    m_tax_jurisdiction = tax_jurisdiction;
    m_tax_jurisdiction_isSet = true;
}

bool OAITaxes::is_tax_jurisdiction_Set() const{
    return m_tax_jurisdiction_isSet;
}

bool OAITaxes::is_tax_jurisdiction_Valid() const{
    return m_tax_jurisdiction_isValid;
}

QString OAITaxes::getTaxPercentage() const {
    return m_tax_percentage;
}
void OAITaxes::setTaxPercentage(const QString &tax_percentage) {
    m_tax_percentage = tax_percentage;
    m_tax_percentage_isSet = true;
}

bool OAITaxes::is_tax_percentage_Set() const{
    return m_tax_percentage_isSet;
}

bool OAITaxes::is_tax_percentage_Valid() const{
    return m_tax_percentage_isValid;
}

QString OAITaxes::getTaxType() const {
    return m_tax_type;
}
void OAITaxes::setTaxType(const QString &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAITaxes::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAITaxes::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

bool OAITaxes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ebay_collect_and_remit_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_in_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_and_handling_taxed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_jurisdiction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
