/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRefinement.h
 *
 * This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
 */

#ifndef OAIRefinement_H
#define OAIRefinement_H

#include <QJsonObject>

#include "OAIAspectDistribution.h"
#include "OAIBuyingOptionDistribution.h"
#include "OAICategoryDistribution.h"
#include "OAIConditionDistribution.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAspectDistribution;
class OAIBuyingOptionDistribution;
class OAICategoryDistribution;
class OAIConditionDistribution;

class OAIRefinement : public OAIObject {
public:
    OAIRefinement();
    OAIRefinement(QString json);
    ~OAIRefinement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAspectDistribution> getAspectDistributions() const;
    void setAspectDistributions(const QList<OAIAspectDistribution> &aspect_distributions);
    bool is_aspect_distributions_Set() const;
    bool is_aspect_distributions_Valid() const;

    QList<OAIBuyingOptionDistribution> getBuyingOptionDistributions() const;
    void setBuyingOptionDistributions(const QList<OAIBuyingOptionDistribution> &buying_option_distributions);
    bool is_buying_option_distributions_Set() const;
    bool is_buying_option_distributions_Valid() const;

    QList<OAICategoryDistribution> getCategoryDistributions() const;
    void setCategoryDistributions(const QList<OAICategoryDistribution> &category_distributions);
    bool is_category_distributions_Set() const;
    bool is_category_distributions_Valid() const;

    QList<OAIConditionDistribution> getConditionDistributions() const;
    void setConditionDistributions(const QList<OAIConditionDistribution> &condition_distributions);
    bool is_condition_distributions_Set() const;
    bool is_condition_distributions_Valid() const;

    QString getDominantCategoryId() const;
    void setDominantCategoryId(const QString &dominant_category_id);
    bool is_dominant_category_id_Set() const;
    bool is_dominant_category_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAspectDistribution> m_aspect_distributions;
    bool m_aspect_distributions_isSet;
    bool m_aspect_distributions_isValid;

    QList<OAIBuyingOptionDistribution> m_buying_option_distributions;
    bool m_buying_option_distributions_isSet;
    bool m_buying_option_distributions_isValid;

    QList<OAICategoryDistribution> m_category_distributions;
    bool m_category_distributions_isSet;
    bool m_category_distributions_isValid;

    QList<OAIConditionDistribution> m_condition_distributions;
    bool m_condition_distributions_isSet;
    bool m_condition_distributions_isValid;

    QString m_dominant_category_id;
    bool m_dominant_category_id_isSet;
    bool m_dominant_category_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRefinement)

#endif // OAIRefinement_H
