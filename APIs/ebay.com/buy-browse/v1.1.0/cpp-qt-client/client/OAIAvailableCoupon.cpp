/**
 * Browse API
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values. &nbsp;(Experimental) search_by_image: Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part. Provides a bridge between the eBay legacy APIs, such as Finding, and the RESTful APIs, which use different formats for the item IDs. &nbsp;(Experimental) shopping_cart: Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp; Note: This resource is not available in the eBay API Explorer. The item_summary, search_by_image, and item resource calls require an Application access token. The shopping_cart resource calls require a User access token.
 *
 * The version of the OpenAPI document: v1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableCoupon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableCoupon::OAIAvailableCoupon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableCoupon::OAIAvailableCoupon() {
    this->initializeModel();
}

OAIAvailableCoupon::~OAIAvailableCoupon() {}

void OAIAvailableCoupon::initializeModel() {

    m_constraint_isSet = false;
    m_constraint_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_type_isSet = false;
    m_discount_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_redemption_code_isSet = false;
    m_redemption_code_isValid = false;

    m_terms_web_url_isSet = false;
    m_terms_web_url_isValid = false;
}

void OAIAvailableCoupon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableCoupon::fromJsonObject(QJsonObject json) {

    m_constraint_isValid = ::OpenAPI::fromJsonValue(m_constraint, json[QString("constraint")]);
    m_constraint_isSet = !json[QString("constraint")].isNull() && m_constraint_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_type_isValid = ::OpenAPI::fromJsonValue(m_discount_type, json[QString("discountType")]);
    m_discount_type_isSet = !json[QString("discountType")].isNull() && m_discount_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_redemption_code, json[QString("redemptionCode")]);
    m_redemption_code_isSet = !json[QString("redemptionCode")].isNull() && m_redemption_code_isValid;

    m_terms_web_url_isValid = ::OpenAPI::fromJsonValue(m_terms_web_url, json[QString("termsWebUrl")]);
    m_terms_web_url_isSet = !json[QString("termsWebUrl")].isNull() && m_terms_web_url_isValid;
}

QString OAIAvailableCoupon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableCoupon::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_isSet) {
        obj.insert(QString("constraint"), ::OpenAPI::toJsonValue(m_constraint));
    }
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_type_isSet) {
        obj.insert(QString("discountType"), ::OpenAPI::toJsonValue(m_discount_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_redemption_code_isSet) {
        obj.insert(QString("redemptionCode"), ::OpenAPI::toJsonValue(m_redemption_code));
    }
    if (m_terms_web_url_isSet) {
        obj.insert(QString("termsWebUrl"), ::OpenAPI::toJsonValue(m_terms_web_url));
    }
    return obj;
}

QString OAIAvailableCoupon::getConstraint() const {
    return m_constraint;
}
void OAIAvailableCoupon::setConstraint(const QString &constraint) {
    m_constraint = constraint;
    m_constraint_isSet = true;
}

bool OAIAvailableCoupon::is_constraint_Set() const{
    return m_constraint_isSet;
}

bool OAIAvailableCoupon::is_constraint_Valid() const{
    return m_constraint_isValid;
}

OAIAmount OAIAvailableCoupon::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIAvailableCoupon::setDiscountAmount(const OAIAmount &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIAvailableCoupon::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIAvailableCoupon::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAIAvailableCoupon::getDiscountType() const {
    return m_discount_type;
}
void OAIAvailableCoupon::setDiscountType(const QString &discount_type) {
    m_discount_type = discount_type;
    m_discount_type_isSet = true;
}

bool OAIAvailableCoupon::is_discount_type_Set() const{
    return m_discount_type_isSet;
}

bool OAIAvailableCoupon::is_discount_type_Valid() const{
    return m_discount_type_isValid;
}

QString OAIAvailableCoupon::getMessage() const {
    return m_message;
}
void OAIAvailableCoupon::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAvailableCoupon::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAvailableCoupon::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAvailableCoupon::getRedemptionCode() const {
    return m_redemption_code;
}
void OAIAvailableCoupon::setRedemptionCode(const QString &redemption_code) {
    m_redemption_code = redemption_code;
    m_redemption_code_isSet = true;
}

bool OAIAvailableCoupon::is_redemption_code_Set() const{
    return m_redemption_code_isSet;
}

bool OAIAvailableCoupon::is_redemption_code_Valid() const{
    return m_redemption_code_isValid;
}

QString OAIAvailableCoupon::getTermsWebUrl() const {
    return m_terms_web_url;
}
void OAIAvailableCoupon::setTermsWebUrl(const QString &terms_web_url) {
    m_terms_web_url = terms_web_url;
    m_terms_web_url_isSet = true;
}

bool OAIAvailableCoupon::is_terms_web_url_Set() const{
    return m_terms_web_url_isSet;
}

bool OAIAvailableCoupon::is_terms_web_url_Valid() const{
    return m_terms_web_url_isValid;
}

bool OAIAvailableCoupon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableCoupon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
