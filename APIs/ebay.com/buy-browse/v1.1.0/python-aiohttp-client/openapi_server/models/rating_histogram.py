# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RatingHistogram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, rating: str=None):
        """RatingHistogram - a model defined in OpenAPI

        :param count: The count of this RatingHistogram.
        :param rating: The rating of this RatingHistogram.
        """
        self.openapi_types = {
            'count': int,
            'rating': str
        }

        self.attribute_map = {
            'count': 'count',
            'rating': 'rating'
        }

        self._count = count
        self._rating = rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatingHistogram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatingHistogram of this RatingHistogram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this RatingHistogram.

        The total number of user ratings that the product has received.

        :return: The count of this RatingHistogram.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RatingHistogram.

        The total number of user ratings that the product has received.

        :param count: The count of this RatingHistogram.
        :type count: int
        """

        self._count = count

    @property
    def rating(self):
        """Gets the rating of this RatingHistogram.

        This is the average rating for the product. As part of a product review, users rate the product. Products are rated from one star (terrible) to five stars (excellent), with each star having a corresponding point value - one star gets 1 point, two stars get 2 points, and so on. If a product had one four-star rating and one five-star rating, its average rating would be 4.5, and this is the value that would appear in this field.

        :return: The rating of this RatingHistogram.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this RatingHistogram.

        This is the average rating for the product. As part of a product review, users rate the product. Products are rated from one star (terrible) to five stars (excellent), with each star having a corresponding point value - one star gets 1 point, two stars get 2 points, and so on. If a product had one four-star rating and one five-star rating, its average rating would be 4.5, and this is the value that would appear in this field.

        :param rating: The rating of this RatingHistogram.
        :type rating: str
        """

        self._rating = rating
