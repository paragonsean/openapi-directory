# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EstimatedAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_threshold: int=None, availability_threshold_type: str=None, delivery_options: List[str]=None, estimated_availability_status: str=None, estimated_available_quantity: int=None, estimated_sold_quantity: int=None):
        """EstimatedAvailability - a model defined in OpenAPI

        :param availability_threshold: The availability_threshold of this EstimatedAvailability.
        :param availability_threshold_type: The availability_threshold_type of this EstimatedAvailability.
        :param delivery_options: The delivery_options of this EstimatedAvailability.
        :param estimated_availability_status: The estimated_availability_status of this EstimatedAvailability.
        :param estimated_available_quantity: The estimated_available_quantity of this EstimatedAvailability.
        :param estimated_sold_quantity: The estimated_sold_quantity of this EstimatedAvailability.
        """
        self.openapi_types = {
            'availability_threshold': int,
            'availability_threshold_type': str,
            'delivery_options': List[str],
            'estimated_availability_status': str,
            'estimated_available_quantity': int,
            'estimated_sold_quantity': int
        }

        self.attribute_map = {
            'availability_threshold': 'availabilityThreshold',
            'availability_threshold_type': 'availabilityThresholdType',
            'delivery_options': 'deliveryOptions',
            'estimated_availability_status': 'estimatedAvailabilityStatus',
            'estimated_available_quantity': 'estimatedAvailableQuantity',
            'estimated_sold_quantity': 'estimatedSoldQuantity'
        }

        self._availability_threshold = availability_threshold
        self._availability_threshold_type = availability_threshold_type
        self._delivery_options = delivery_options
        self._estimated_availability_status = estimated_availability_status
        self._estimated_available_quantity = estimated_available_quantity
        self._estimated_sold_quantity = estimated_sold_quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EstimatedAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EstimatedAvailability of this EstimatedAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_threshold(self):
        """Gets the availability_threshold of this EstimatedAvailability.

        This field is return only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.

        :return: The availability_threshold of this EstimatedAvailability.
        :rtype: int
        """
        return self._availability_threshold

    @availability_threshold.setter
    def availability_threshold(self, availability_threshold):
        """Sets the availability_threshold of this EstimatedAvailability.

        This field is return only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.

        :param availability_threshold: The availability_threshold of this EstimatedAvailability.
        :type availability_threshold: int
        """

        self._availability_threshold = availability_threshold

    @property
    def availability_threshold_type(self):
        """Gets the availability_threshold_type of this EstimatedAvailability.

        This field is return only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be MORE_THAN. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item. The following are the display item quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold fields are not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityThresholdEnum'>eBay API documentation</a>

        :return: The availability_threshold_type of this EstimatedAvailability.
        :rtype: str
        """
        return self._availability_threshold_type

    @availability_threshold_type.setter
    def availability_threshold_type(self, availability_threshold_type):
        """Sets the availability_threshold_type of this EstimatedAvailability.

        This field is return only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be MORE_THAN. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item. The following are the display item quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold fields are not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityThresholdEnum'>eBay API documentation</a>

        :param availability_threshold_type: The availability_threshold_type of this EstimatedAvailability.
        :type availability_threshold_type: str
        """

        self._availability_threshold_type = availability_threshold_type

    @property
    def delivery_options(self):
        """Gets the delivery_options of this EstimatedAvailability.

        An array of available delivery options. Valid Values: SHIP_TO_HOME, SELLER_ARRANGED_LOCAL_PICKUP, IN_STORE_PICKUP, PICKUP_DROP_OFF, or DIGITAL_DELIVERY Code so that your app gracefully handles any future changes to this list.

        :return: The delivery_options of this EstimatedAvailability.
        :rtype: List[str]
        """
        return self._delivery_options

    @delivery_options.setter
    def delivery_options(self, delivery_options):
        """Sets the delivery_options of this EstimatedAvailability.

        An array of available delivery options. Valid Values: SHIP_TO_HOME, SELLER_ARRANGED_LOCAL_PICKUP, IN_STORE_PICKUP, PICKUP_DROP_OFF, or DIGITAL_DELIVERY Code so that your app gracefully handles any future changes to this list.

        :param delivery_options: The delivery_options of this EstimatedAvailability.
        :type delivery_options: List[str]
        """

        self._delivery_options = delivery_options

    @property
    def estimated_availability_status(self):
        """Gets the estimated_availability_status of this EstimatedAvailability.

        An enumeration value representing the inventory status of this item. Note: Be sure to review the itemEndDate field to determine whether the item is available for purchase. Valid Values: IN_STOCK, LIMITED_STOCK, or OUT_OF_STOCK Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityStatusEnum'>eBay API documentation</a>

        :return: The estimated_availability_status of this EstimatedAvailability.
        :rtype: str
        """
        return self._estimated_availability_status

    @estimated_availability_status.setter
    def estimated_availability_status(self, estimated_availability_status):
        """Sets the estimated_availability_status of this EstimatedAvailability.

        An enumeration value representing the inventory status of this item. Note: Be sure to review the itemEndDate field to determine whether the item is available for purchase. Valid Values: IN_STOCK, LIMITED_STOCK, or OUT_OF_STOCK Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityStatusEnum'>eBay API documentation</a>

        :param estimated_availability_status: The estimated_availability_status of this EstimatedAvailability.
        :type estimated_availability_status: str
        """

        self._estimated_availability_status = estimated_availability_status

    @property
    def estimated_available_quantity(self):
        """Gets the estimated_available_quantity of this EstimatedAvailability.

        The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.

        :return: The estimated_available_quantity of this EstimatedAvailability.
        :rtype: int
        """
        return self._estimated_available_quantity

    @estimated_available_quantity.setter
    def estimated_available_quantity(self, estimated_available_quantity):
        """Sets the estimated_available_quantity of this EstimatedAvailability.

        The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.

        :param estimated_available_quantity: The estimated_available_quantity of this EstimatedAvailability.
        :type estimated_available_quantity: int
        """

        self._estimated_available_quantity = estimated_available_quantity

    @property
    def estimated_sold_quantity(self):
        """Gets the estimated_sold_quantity of this EstimatedAvailability.

        The estimated number of this item that have been sold.

        :return: The estimated_sold_quantity of this EstimatedAvailability.
        :rtype: int
        """
        return self._estimated_sold_quantity

    @estimated_sold_quantity.setter
    def estimated_sold_quantity(self, estimated_sold_quantity):
        """Sets the estimated_sold_quantity of this EstimatedAvailability.

        The estimated number of this item that have been sold.

        :param estimated_sold_quantity: The estimated_sold_quantity of this EstimatedAvailability.
        :type estimated_sold_quantity: int
        """

        self._estimated_sold_quantity = estimated_sold_quantity
