# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server import util


class PaymentMethodBrand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logo_image: Image=None, payment_method_brand_type: str=None):
        """PaymentMethodBrand - a model defined in OpenAPI

        :param logo_image: The logo_image of this PaymentMethodBrand.
        :param payment_method_brand_type: The payment_method_brand_type of this PaymentMethodBrand.
        """
        self.openapi_types = {
            'logo_image': Image,
            'payment_method_brand_type': str
        }

        self.attribute_map = {
            'logo_image': 'logoImage',
            'payment_method_brand_type': 'paymentMethodBrandType'
        }

        self._logo_image = logo_image
        self._payment_method_brand_type = payment_method_brand_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodBrand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodBrand of this PaymentMethodBrand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logo_image(self):
        """Gets the logo_image of this PaymentMethodBrand.


        :return: The logo_image of this PaymentMethodBrand.
        :rtype: Image
        """
        return self._logo_image

    @logo_image.setter
    def logo_image(self, logo_image):
        """Sets the logo_image of this PaymentMethodBrand.


        :param logo_image: The logo_image of this PaymentMethodBrand.
        :type logo_image: Image
        """

        self._logo_image = logo_image

    @property
    def payment_method_brand_type(self):
        """Gets the payment_method_brand_type of this PaymentMethodBrand.

        The payment method brand, such as Visa or PayPal. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodBrandEnum'>eBay API documentation</a>

        :return: The payment_method_brand_type of this PaymentMethodBrand.
        :rtype: str
        """
        return self._payment_method_brand_type

    @payment_method_brand_type.setter
    def payment_method_brand_type(self, payment_method_brand_type):
        """Sets the payment_method_brand_type of this PaymentMethodBrand.

        The payment method brand, such as Visa or PayPal. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodBrandEnum'>eBay API documentation</a>

        :param payment_method_brand_type: The payment_method_brand_type of this PaymentMethodBrand.
        :type payment_method_brand_type: str
        """

        self._payment_method_brand_type = payment_method_brand_type
