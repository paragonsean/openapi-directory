# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.legal_address import LegalAddress
from openapi_server.models.vat_detail import VatDetail
from openapi_server import util


class SellerLegalInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, fax: str=None, imprint: str=None, legal_contact_first_name: str=None, legal_contact_last_name: str=None, name: str=None, phone: str=None, registration_number: str=None, seller_provided_legal_address: LegalAddress=None, terms_of_service: str=None, vat_details: List[VatDetail]=None):
        """SellerLegalInfo - a model defined in OpenAPI

        :param email: The email of this SellerLegalInfo.
        :param fax: The fax of this SellerLegalInfo.
        :param imprint: The imprint of this SellerLegalInfo.
        :param legal_contact_first_name: The legal_contact_first_name of this SellerLegalInfo.
        :param legal_contact_last_name: The legal_contact_last_name of this SellerLegalInfo.
        :param name: The name of this SellerLegalInfo.
        :param phone: The phone of this SellerLegalInfo.
        :param registration_number: The registration_number of this SellerLegalInfo.
        :param seller_provided_legal_address: The seller_provided_legal_address of this SellerLegalInfo.
        :param terms_of_service: The terms_of_service of this SellerLegalInfo.
        :param vat_details: The vat_details of this SellerLegalInfo.
        """
        self.openapi_types = {
            'email': str,
            'fax': str,
            'imprint': str,
            'legal_contact_first_name': str,
            'legal_contact_last_name': str,
            'name': str,
            'phone': str,
            'registration_number': str,
            'seller_provided_legal_address': LegalAddress,
            'terms_of_service': str,
            'vat_details': List[VatDetail]
        }

        self.attribute_map = {
            'email': 'email',
            'fax': 'fax',
            'imprint': 'imprint',
            'legal_contact_first_name': 'legalContactFirstName',
            'legal_contact_last_name': 'legalContactLastName',
            'name': 'name',
            'phone': 'phone',
            'registration_number': 'registrationNumber',
            'seller_provided_legal_address': 'sellerProvidedLegalAddress',
            'terms_of_service': 'termsOfService',
            'vat_details': 'vatDetails'
        }

        self._email = email
        self._fax = fax
        self._imprint = imprint
        self._legal_contact_first_name = legal_contact_first_name
        self._legal_contact_last_name = legal_contact_last_name
        self._name = name
        self._phone = phone
        self._registration_number = registration_number
        self._seller_provided_legal_address = seller_provided_legal_address
        self._terms_of_service = terms_of_service
        self._vat_details = vat_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellerLegalInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SellerLegalInfo of this SellerLegalInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this SellerLegalInfo.

        The seller's business email address.

        :return: The email of this SellerLegalInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SellerLegalInfo.

        The seller's business email address.

        :param email: The email of this SellerLegalInfo.
        :type email: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this SellerLegalInfo.

        The seller' business fax number.

        :return: The fax of this SellerLegalInfo.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this SellerLegalInfo.

        The seller' business fax number.

        :param fax: The fax of this SellerLegalInfo.
        :type fax: str
        """

        self._fax = fax

    @property
    def imprint(self):
        """Gets the imprint of this SellerLegalInfo.

        This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.

        :return: The imprint of this SellerLegalInfo.
        :rtype: str
        """
        return self._imprint

    @imprint.setter
    def imprint(self, imprint):
        """Sets the imprint of this SellerLegalInfo.

        This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.

        :param imprint: The imprint of this SellerLegalInfo.
        :type imprint: str
        """

        self._imprint = imprint

    @property
    def legal_contact_first_name(self):
        """Gets the legal_contact_first_name of this SellerLegalInfo.

        The seller's first name.

        :return: The legal_contact_first_name of this SellerLegalInfo.
        :rtype: str
        """
        return self._legal_contact_first_name

    @legal_contact_first_name.setter
    def legal_contact_first_name(self, legal_contact_first_name):
        """Sets the legal_contact_first_name of this SellerLegalInfo.

        The seller's first name.

        :param legal_contact_first_name: The legal_contact_first_name of this SellerLegalInfo.
        :type legal_contact_first_name: str
        """

        self._legal_contact_first_name = legal_contact_first_name

    @property
    def legal_contact_last_name(self):
        """Gets the legal_contact_last_name of this SellerLegalInfo.

        The seller's last name.

        :return: The legal_contact_last_name of this SellerLegalInfo.
        :rtype: str
        """
        return self._legal_contact_last_name

    @legal_contact_last_name.setter
    def legal_contact_last_name(self, legal_contact_last_name):
        """Sets the legal_contact_last_name of this SellerLegalInfo.

        The seller's last name.

        :param legal_contact_last_name: The legal_contact_last_name of this SellerLegalInfo.
        :type legal_contact_last_name: str
        """

        self._legal_contact_last_name = legal_contact_last_name

    @property
    def name(self):
        """Gets the name of this SellerLegalInfo.

        The name of the seller's business.

        :return: The name of this SellerLegalInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SellerLegalInfo.

        The name of the seller's business.

        :param name: The name of this SellerLegalInfo.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this SellerLegalInfo.

        The seller's business phone number.

        :return: The phone of this SellerLegalInfo.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SellerLegalInfo.

        The seller's business phone number.

        :param phone: The phone of this SellerLegalInfo.
        :type phone: str
        """

        self._phone = phone

    @property
    def registration_number(self):
        """Gets the registration_number of this SellerLegalInfo.

        The seller's registration number. This is information used by some countries.

        :return: The registration_number of this SellerLegalInfo.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this SellerLegalInfo.

        The seller's registration number. This is information used by some countries.

        :param registration_number: The registration_number of this SellerLegalInfo.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def seller_provided_legal_address(self):
        """Gets the seller_provided_legal_address of this SellerLegalInfo.


        :return: The seller_provided_legal_address of this SellerLegalInfo.
        :rtype: LegalAddress
        """
        return self._seller_provided_legal_address

    @seller_provided_legal_address.setter
    def seller_provided_legal_address(self, seller_provided_legal_address):
        """Sets the seller_provided_legal_address of this SellerLegalInfo.


        :param seller_provided_legal_address: The seller_provided_legal_address of this SellerLegalInfo.
        :type seller_provided_legal_address: LegalAddress
        """

        self._seller_provided_legal_address = seller_provided_legal_address

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this SellerLegalInfo.

        This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.

        :return: The terms_of_service of this SellerLegalInfo.
        :rtype: str
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this SellerLegalInfo.

        This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.

        :param terms_of_service: The terms_of_service of this SellerLegalInfo.
        :type terms_of_service: str
        """

        self._terms_of_service = terms_of_service

    @property
    def vat_details(self):
        """Gets the vat_details of this SellerLegalInfo.

        An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.

        :return: The vat_details of this SellerLegalInfo.
        :rtype: List[VatDetail]
        """
        return self._vat_details

    @vat_details.setter
    def vat_details(self, vat_details):
        """Sets the vat_details of this SellerLegalInfo.

        An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.

        :param vat_details: The vat_details of this SellerLegalInfo.
        :type vat_details: List[VatDetail]
        """

        self._vat_details = vat_details
