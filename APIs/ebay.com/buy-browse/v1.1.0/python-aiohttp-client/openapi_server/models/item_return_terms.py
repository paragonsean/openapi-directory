# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_duration import TimeDuration
from openapi_server import util


class ItemReturnTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extended_holiday_returns_offered: bool=None, refund_method: str=None, restocking_fee_percentage: str=None, return_instructions: str=None, return_method: str=None, return_period: TimeDuration=None, return_shipping_cost_payer: str=None, returns_accepted: bool=None):
        """ItemReturnTerms - a model defined in OpenAPI

        :param extended_holiday_returns_offered: The extended_holiday_returns_offered of this ItemReturnTerms.
        :param refund_method: The refund_method of this ItemReturnTerms.
        :param restocking_fee_percentage: The restocking_fee_percentage of this ItemReturnTerms.
        :param return_instructions: The return_instructions of this ItemReturnTerms.
        :param return_method: The return_method of this ItemReturnTerms.
        :param return_period: The return_period of this ItemReturnTerms.
        :param return_shipping_cost_payer: The return_shipping_cost_payer of this ItemReturnTerms.
        :param returns_accepted: The returns_accepted of this ItemReturnTerms.
        """
        self.openapi_types = {
            'extended_holiday_returns_offered': bool,
            'refund_method': str,
            'restocking_fee_percentage': str,
            'return_instructions': str,
            'return_method': str,
            'return_period': TimeDuration,
            'return_shipping_cost_payer': str,
            'returns_accepted': bool
        }

        self.attribute_map = {
            'extended_holiday_returns_offered': 'extendedHolidayReturnsOffered',
            'refund_method': 'refundMethod',
            'restocking_fee_percentage': 'restockingFeePercentage',
            'return_instructions': 'returnInstructions',
            'return_method': 'returnMethod',
            'return_period': 'returnPeriod',
            'return_shipping_cost_payer': 'returnShippingCostPayer',
            'returns_accepted': 'returnsAccepted'
        }

        self._extended_holiday_returns_offered = extended_holiday_returns_offered
        self._refund_method = refund_method
        self._restocking_fee_percentage = restocking_fee_percentage
        self._return_instructions = return_instructions
        self._return_method = return_method
        self._return_period = return_period
        self._return_shipping_cost_payer = return_shipping_cost_payer
        self._returns_accepted = returns_accepted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemReturnTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemReturnTerms of this ItemReturnTerms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extended_holiday_returns_offered(self):
        """Gets the extended_holiday_returns_offered of this ItemReturnTerms.

        This indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the returnPeriod value.

        :return: The extended_holiday_returns_offered of this ItemReturnTerms.
        :rtype: bool
        """
        return self._extended_holiday_returns_offered

    @extended_holiday_returns_offered.setter
    def extended_holiday_returns_offered(self, extended_holiday_returns_offered):
        """Sets the extended_holiday_returns_offered of this ItemReturnTerms.

        This indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the returnPeriod value.

        :param extended_holiday_returns_offered: The extended_holiday_returns_offered of this ItemReturnTerms.
        :type extended_holiday_returns_offered: bool
        """

        self._extended_holiday_returns_offered = extended_holiday_returns_offered

    @property
    def refund_method(self):
        """Gets the refund_method of this ItemReturnTerms.

        An enumeration value that indicates how a buyer is refunded when an item is returned. Valid Values: MONEY_BACK or MERCHANDISE_CREDIT Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:RefundMethodEnum'>eBay API documentation</a>

        :return: The refund_method of this ItemReturnTerms.
        :rtype: str
        """
        return self._refund_method

    @refund_method.setter
    def refund_method(self, refund_method):
        """Sets the refund_method of this ItemReturnTerms.

        An enumeration value that indicates how a buyer is refunded when an item is returned. Valid Values: MONEY_BACK or MERCHANDISE_CREDIT Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:RefundMethodEnum'>eBay API documentation</a>

        :param refund_method: The refund_method of this ItemReturnTerms.
        :type refund_method: str
        """

        self._refund_method = refund_method

    @property
    def restocking_fee_percentage(self):
        """Gets the restocking_fee_percentage of this ItemReturnTerms.

        This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.

        :return: The restocking_fee_percentage of this ItemReturnTerms.
        :rtype: str
        """
        return self._restocking_fee_percentage

    @restocking_fee_percentage.setter
    def restocking_fee_percentage(self, restocking_fee_percentage):
        """Sets the restocking_fee_percentage of this ItemReturnTerms.

        This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.

        :param restocking_fee_percentage: The restocking_fee_percentage of this ItemReturnTerms.
        :type restocking_fee_percentage: str
        """

        self._restocking_fee_percentage = restocking_fee_percentage

    @property
    def return_instructions(self):
        """Gets the return_instructions of this ItemReturnTerms.

        Text written by the seller describing what the buyer needs to do in order to return the item.

        :return: The return_instructions of this ItemReturnTerms.
        :rtype: str
        """
        return self._return_instructions

    @return_instructions.setter
    def return_instructions(self, return_instructions):
        """Sets the return_instructions of this ItemReturnTerms.

        Text written by the seller describing what the buyer needs to do in order to return the item.

        :param return_instructions: The return_instructions of this ItemReturnTerms.
        :type return_instructions: str
        """

        self._return_instructions = return_instructions

    @property
    def return_method(self):
        """Gets the return_method of this ItemReturnTerms.

        An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. Valid Values: REPLACEMENT - Indicates that the buyer has the option of receiving money back for the returned item, or they can choose to have the seller replace the item with an identical item. EXCHANGE - Indicates that the buyer has the option of receiving money back for the returned item, or they can exchange the item for another similar item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnMethodEnum'>eBay API documentation</a>

        :return: The return_method of this ItemReturnTerms.
        :rtype: str
        """
        return self._return_method

    @return_method.setter
    def return_method(self, return_method):
        """Sets the return_method of this ItemReturnTerms.

        An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. Valid Values: REPLACEMENT - Indicates that the buyer has the option of receiving money back for the returned item, or they can choose to have the seller replace the item with an identical item. EXCHANGE - Indicates that the buyer has the option of receiving money back for the returned item, or they can exchange the item for another similar item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnMethodEnum'>eBay API documentation</a>

        :param return_method: The return_method of this ItemReturnTerms.
        :type return_method: str
        """

        self._return_method = return_method

    @property
    def return_period(self):
        """Gets the return_period of this ItemReturnTerms.


        :return: The return_period of this ItemReturnTerms.
        :rtype: TimeDuration
        """
        return self._return_period

    @return_period.setter
    def return_period(self, return_period):
        """Sets the return_period of this ItemReturnTerms.


        :param return_period: The return_period of this ItemReturnTerms.
        :type return_period: TimeDuration
        """

        self._return_period = return_period

    @property
    def return_shipping_cost_payer(self):
        """Gets the return_shipping_cost_payer of this ItemReturnTerms.

        This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. Valid Values: SELLER - Indicates the seller will pay for the shipping costs to return the item. BUYER - Indicates the buyer will pay for the shipping costs to return the item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnShippingCostPayerEnum'>eBay API documentation</a>

        :return: The return_shipping_cost_payer of this ItemReturnTerms.
        :rtype: str
        """
        return self._return_shipping_cost_payer

    @return_shipping_cost_payer.setter
    def return_shipping_cost_payer(self, return_shipping_cost_payer):
        """Sets the return_shipping_cost_payer of this ItemReturnTerms.

        This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. Valid Values: SELLER - Indicates the seller will pay for the shipping costs to return the item. BUYER - Indicates the buyer will pay for the shipping costs to return the item. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnShippingCostPayerEnum'>eBay API documentation</a>

        :param return_shipping_cost_payer: The return_shipping_cost_payer of this ItemReturnTerms.
        :type return_shipping_cost_payer: str
        """

        self._return_shipping_cost_payer = return_shipping_cost_payer

    @property
    def returns_accepted(self):
        """Gets the returns_accepted of this ItemReturnTerms.

        Indicates whether the seller accepts returns for the item.

        :return: The returns_accepted of this ItemReturnTerms.
        :rtype: bool
        """
        return self._returns_accepted

    @returns_accepted.setter
    def returns_accepted(self, returns_accepted):
        """Sets the returns_accepted of this ItemReturnTerms.

        Indicates whether the seller accepts returns for the item.

        :param returns_accepted: The returns_accepted of this ItemReturnTerms.
        :type returns_accepted: bool
        """

        self._returns_accepted = returns_accepted
