# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect_distribution import AspectDistribution
from openapi_server.models.buying_option_distribution import BuyingOptionDistribution
from openapi_server.models.category_distribution import CategoryDistribution
from openapi_server.models.condition_distribution import ConditionDistribution
from openapi_server import util


class Refinement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_distributions: List[AspectDistribution]=None, buying_option_distributions: List[BuyingOptionDistribution]=None, category_distributions: List[CategoryDistribution]=None, condition_distributions: List[ConditionDistribution]=None, dominant_category_id: str=None):
        """Refinement - a model defined in OpenAPI

        :param aspect_distributions: The aspect_distributions of this Refinement.
        :param buying_option_distributions: The buying_option_distributions of this Refinement.
        :param category_distributions: The category_distributions of this Refinement.
        :param condition_distributions: The condition_distributions of this Refinement.
        :param dominant_category_id: The dominant_category_id of this Refinement.
        """
        self.openapi_types = {
            'aspect_distributions': List[AspectDistribution],
            'buying_option_distributions': List[BuyingOptionDistribution],
            'category_distributions': List[CategoryDistribution],
            'condition_distributions': List[ConditionDistribution],
            'dominant_category_id': str
        }

        self.attribute_map = {
            'aspect_distributions': 'aspectDistributions',
            'buying_option_distributions': 'buyingOptionDistributions',
            'category_distributions': 'categoryDistributions',
            'condition_distributions': 'conditionDistributions',
            'dominant_category_id': 'dominantCategoryId'
        }

        self._aspect_distributions = aspect_distributions
        self._buying_option_distributions = buying_option_distributions
        self._category_distributions = category_distributions
        self._condition_distributions = condition_distributions
        self._dominant_category_id = dominant_category_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Refinement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Refinement of this Refinement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_distributions(self):
        """Gets the aspect_distributions of this Refinement.

        An array of containers for the all the aspect refinements.

        :return: The aspect_distributions of this Refinement.
        :rtype: List[AspectDistribution]
        """
        return self._aspect_distributions

    @aspect_distributions.setter
    def aspect_distributions(self, aspect_distributions):
        """Sets the aspect_distributions of this Refinement.

        An array of containers for the all the aspect refinements.

        :param aspect_distributions: The aspect_distributions of this Refinement.
        :type aspect_distributions: List[AspectDistribution]
        """

        self._aspect_distributions = aspect_distributions

    @property
    def buying_option_distributions(self):
        """Gets the buying_option_distributions of this Refinement.

        An array of containers for the all the buying option refinements.

        :return: The buying_option_distributions of this Refinement.
        :rtype: List[BuyingOptionDistribution]
        """
        return self._buying_option_distributions

    @buying_option_distributions.setter
    def buying_option_distributions(self, buying_option_distributions):
        """Sets the buying_option_distributions of this Refinement.

        An array of containers for the all the buying option refinements.

        :param buying_option_distributions: The buying_option_distributions of this Refinement.
        :type buying_option_distributions: List[BuyingOptionDistribution]
        """

        self._buying_option_distributions = buying_option_distributions

    @property
    def category_distributions(self):
        """Gets the category_distributions of this Refinement.

        An array of containers for the all the category refinements.

        :return: The category_distributions of this Refinement.
        :rtype: List[CategoryDistribution]
        """
        return self._category_distributions

    @category_distributions.setter
    def category_distributions(self, category_distributions):
        """Sets the category_distributions of this Refinement.

        An array of containers for the all the category refinements.

        :param category_distributions: The category_distributions of this Refinement.
        :type category_distributions: List[CategoryDistribution]
        """

        self._category_distributions = category_distributions

    @property
    def condition_distributions(self):
        """Gets the condition_distributions of this Refinement.

        An array of containers for the all the condition refinements.

        :return: The condition_distributions of this Refinement.
        :rtype: List[ConditionDistribution]
        """
        return self._condition_distributions

    @condition_distributions.setter
    def condition_distributions(self, condition_distributions):
        """Sets the condition_distributions of this Refinement.

        An array of containers for the all the condition refinements.

        :param condition_distributions: The condition_distributions of this Refinement.
        :type condition_distributions: List[ConditionDistribution]
        """

        self._condition_distributions = condition_distributions

    @property
    def dominant_category_id(self):
        """Gets the dominant_category_id of this Refinement.

        The identifier of the category that most of the items are part of.

        :return: The dominant_category_id of this Refinement.
        :rtype: str
        """
        return self._dominant_category_id

    @dominant_category_id.setter
    def dominant_category_id(self, dominant_category_id):
        """Sets the dominant_category_id of this Refinement.

        The identifier of the category that most of the items are part of.

        :param dominant_category_id: The dominant_category_id of this Refinement.
        :type dominant_category_id: str
        """

        self._dominant_category_id = dominant_category_id
