# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Seller(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feedback_percentage: str=None, feedback_score: int=None, seller_account_type: str=None, username: str=None):
        """Seller - a model defined in OpenAPI

        :param feedback_percentage: The feedback_percentage of this Seller.
        :param feedback_score: The feedback_score of this Seller.
        :param seller_account_type: The seller_account_type of this Seller.
        :param username: The username of this Seller.
        """
        self.openapi_types = {
            'feedback_percentage': str,
            'feedback_score': int,
            'seller_account_type': str,
            'username': str
        }

        self.attribute_map = {
            'feedback_percentage': 'feedbackPercentage',
            'feedback_score': 'feedbackScore',
            'seller_account_type': 'sellerAccountType',
            'username': 'username'
        }

        self._feedback_percentage = feedback_percentage
        self._feedback_score = feedback_score
        self._seller_account_type = seller_account_type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Seller':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Seller of this Seller.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_percentage(self):
        """Gets the feedback_percentage of this Seller.

        The percentage of the total positive feedback.

        :return: The feedback_percentage of this Seller.
        :rtype: str
        """
        return self._feedback_percentage

    @feedback_percentage.setter
    def feedback_percentage(self, feedback_percentage):
        """Sets the feedback_percentage of this Seller.

        The percentage of the total positive feedback.

        :param feedback_percentage: The feedback_percentage of this Seller.
        :type feedback_percentage: str
        """

        self._feedback_percentage = feedback_percentage

    @property
    def feedback_score(self):
        """Gets the feedback_score of this Seller.

        The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.

        :return: The feedback_score of this Seller.
        :rtype: int
        """
        return self._feedback_score

    @feedback_score.setter
    def feedback_score(self, feedback_score):
        """Sets the feedback_score of this Seller.

        The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.

        :param feedback_score: The feedback_score of this Seller.
        :type feedback_score: int
        """

        self._feedback_score = feedback_score

    @property
    def seller_account_type(self):
        """Gets the seller_account_type of this Seller.

        Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid Values: BUSINESS or INDIVIDUAL Code so that your app gracefully handles any future changes to this list.

        :return: The seller_account_type of this Seller.
        :rtype: str
        """
        return self._seller_account_type

    @seller_account_type.setter
    def seller_account_type(self, seller_account_type):
        """Sets the seller_account_type of this Seller.

        Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid Values: BUSINESS or INDIVIDUAL Code so that your app gracefully handles any future changes to this list.

        :param seller_account_type: The seller_account_type of this Seller.
        :type seller_account_type: str
        """

        self._seller_account_type = seller_account_type

    @property
    def username(self):
        """Gets the username of this Seller.

        The user name created by the seller for use on eBay.

        :return: The username of this Seller.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Seller.

        The user name created by the seller for use on eBay.

        :param username: The username of this Seller.
        :type username: str
        """

        self._username = username
