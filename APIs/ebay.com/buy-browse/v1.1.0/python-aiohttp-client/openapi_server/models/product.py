# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_product_identity import AdditionalProductIdentity
from openapi_server.models.aspect_group import AspectGroup
from openapi_server.models.image import Image
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_images: List[Image]=None, additional_product_identities: List[AdditionalProductIdentity]=None, aspect_groups: List[AspectGroup]=None, brand: str=None, description: str=None, gtins: List[str]=None, image: Image=None, mpns: List[str]=None, title: str=None):
        """Product - a model defined in OpenAPI

        :param additional_images: The additional_images of this Product.
        :param additional_product_identities: The additional_product_identities of this Product.
        :param aspect_groups: The aspect_groups of this Product.
        :param brand: The brand of this Product.
        :param description: The description of this Product.
        :param gtins: The gtins of this Product.
        :param image: The image of this Product.
        :param mpns: The mpns of this Product.
        :param title: The title of this Product.
        """
        self.openapi_types = {
            'additional_images': List[Image],
            'additional_product_identities': List[AdditionalProductIdentity],
            'aspect_groups': List[AspectGroup],
            'brand': str,
            'description': str,
            'gtins': List[str],
            'image': Image,
            'mpns': List[str],
            'title': str
        }

        self.attribute_map = {
            'additional_images': 'additionalImages',
            'additional_product_identities': 'additionalProductIdentities',
            'aspect_groups': 'aspectGroups',
            'brand': 'brand',
            'description': 'description',
            'gtins': 'gtins',
            'image': 'image',
            'mpns': 'mpns',
            'title': 'title'
        }

        self._additional_images = additional_images
        self._additional_product_identities = additional_product_identities
        self._aspect_groups = aspect_groups
        self._brand = brand
        self._description = description
        self._gtins = gtins
        self._image = image
        self._mpns = mpns
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_images(self):
        """Gets the additional_images of this Product.

        An array of containers with the URLs for the product images that are in addition to the primary image.

        :return: The additional_images of this Product.
        :rtype: List[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this Product.

        An array of containers with the URLs for the product images that are in addition to the primary image.

        :param additional_images: The additional_images of this Product.
        :type additional_images: List[Image]
        """

        self._additional_images = additional_images

    @property
    def additional_product_identities(self):
        """Gets the additional_product_identities of this Product.

        An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.

        :return: The additional_product_identities of this Product.
        :rtype: List[AdditionalProductIdentity]
        """
        return self._additional_product_identities

    @additional_product_identities.setter
    def additional_product_identities(self, additional_product_identities):
        """Sets the additional_product_identities of this Product.

        An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.

        :param additional_product_identities: The additional_product_identities of this Product.
        :type additional_product_identities: List[AdditionalProductIdentity]
        """

        self._additional_product_identities = additional_product_identities

    @property
    def aspect_groups(self):
        """Gets the aspect_groups of this Product.

        An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.

        :return: The aspect_groups of this Product.
        :rtype: List[AspectGroup]
        """
        return self._aspect_groups

    @aspect_groups.setter
    def aspect_groups(self, aspect_groups):
        """Sets the aspect_groups of this Product.

        An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.

        :param aspect_groups: The aspect_groups of this Product.
        :type aspect_groups: List[AspectGroup]
        """

        self._aspect_groups = aspect_groups

    @property
    def brand(self):
        """Gets the brand of this Product.

        The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).

        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.

        The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).

        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def description(self):
        """Gets the description of this Product.

        The rich description of an eBay product, which might contain HTML.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        The rich description of an eBay product, which might contain HTML.

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def gtins(self):
        """Gets the gtins of this Product.

        An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.

        :return: The gtins of this Product.
        :rtype: List[str]
        """
        return self._gtins

    @gtins.setter
    def gtins(self, gtins):
        """Sets the gtins of this Product.

        An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.

        :param gtins: The gtins of this Product.
        :type gtins: List[str]
        """

        self._gtins = gtins

    @property
    def image(self):
        """Gets the image of this Product.


        :return: The image of this Product.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Product.


        :param image: The image of this Product.
        :type image: Image
        """

        self._image = image

    @property
    def mpns(self):
        """Gets the mpns of this Product.

        An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.

        :return: The mpns of this Product.
        :rtype: List[str]
        """
        return self._mpns

    @mpns.setter
    def mpns(self, mpns):
        """Sets the mpns of this Product.

        An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.

        :param mpns: The mpns of this Product.
        :type mpns: List[str]
        """

        self._mpns = mpns

    @property
    def title(self):
        """Gets the title of this Product.

        The title of the product.

        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product.

        The title of the product.

        :param title: The title of this Product.
        :type title: str
        """

        self._title = title
