# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country: str=None, country_name: str=None, county: str=None, postal_code: str=None, state_or_province: str=None):
        """LegalAddress - a model defined in OpenAPI

        :param address_line1: The address_line1 of this LegalAddress.
        :param address_line2: The address_line2 of this LegalAddress.
        :param city: The city of this LegalAddress.
        :param country: The country of this LegalAddress.
        :param country_name: The country_name of this LegalAddress.
        :param county: The county of this LegalAddress.
        :param postal_code: The postal_code of this LegalAddress.
        :param state_or_province: The state_or_province of this LegalAddress.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country': str,
            'country_name': str,
            'county': str,
            'postal_code': str,
            'state_or_province': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'country': 'country',
            'country_name': 'countryName',
            'county': 'county',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country = country
        self._country_name = country_name
        self._county = county
        self._postal_code = postal_code
        self._state_or_province = state_or_province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalAddress of this LegalAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this LegalAddress.

        The first line of the street address.

        :return: The address_line1 of this LegalAddress.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this LegalAddress.

        The first line of the street address.

        :param address_line1: The address_line1 of this LegalAddress.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this LegalAddress.

        The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.

        :return: The address_line2 of this LegalAddress.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this LegalAddress.

        The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.

        :param address_line2: The address_line2 of this LegalAddress.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this LegalAddress.

        The city of the address.

        :return: The city of this LegalAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LegalAddress.

        The city of the address.

        :param city: The city of this LegalAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this LegalAddress.

        The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :return: The country of this LegalAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LegalAddress.

        The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :param country: The country of this LegalAddress.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this LegalAddress.

        The name of the country of the address.

        :return: The country_name of this LegalAddress.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this LegalAddress.

        The name of the country of the address.

        :param country_name: The country_name of this LegalAddress.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def county(self):
        """Gets the county of this LegalAddress.

        The name of the county of the address.

        :return: The county of this LegalAddress.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this LegalAddress.

        The name of the county of the address.

        :param county: The county of this LegalAddress.
        :type county: str
        """

        self._county = county

    @property
    def postal_code(self):
        """Gets the postal_code of this LegalAddress.

        The postal code of the address.

        :return: The postal_code of this LegalAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this LegalAddress.

        The postal code of the address.

        :param postal_code: The postal_code of this LegalAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this LegalAddress.

        The state or province of the address.

        :return: The state_or_province of this LegalAddress.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this LegalAddress.

        The state or province of the address.

        :param state_or_province: The state_or_province of this LegalAddress.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province
