# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_method_brand import PaymentMethodBrand
from openapi_server import util


class PaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_instructions: List[str]=None, payment_method_brands: List[PaymentMethodBrand]=None, payment_method_type: str=None, seller_instructions: List[str]=None):
        """PaymentMethod - a model defined in OpenAPI

        :param payment_instructions: The payment_instructions of this PaymentMethod.
        :param payment_method_brands: The payment_method_brands of this PaymentMethod.
        :param payment_method_type: The payment_method_type of this PaymentMethod.
        :param seller_instructions: The seller_instructions of this PaymentMethod.
        """
        self.openapi_types = {
            'payment_instructions': List[str],
            'payment_method_brands': List[PaymentMethodBrand],
            'payment_method_type': str,
            'seller_instructions': List[str]
        }

        self.attribute_map = {
            'payment_instructions': 'paymentInstructions',
            'payment_method_brands': 'paymentMethodBrands',
            'payment_method_type': 'paymentMethodType',
            'seller_instructions': 'sellerInstructions'
        }

        self._payment_instructions = payment_instructions
        self._payment_method_brands = payment_method_brands
        self._payment_method_type = payment_method_type
        self._seller_instructions = seller_instructions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethod of this PaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_instructions(self):
        """Gets the payment_instructions of this PaymentMethod.

        The payment instructions for the buyer, such as cash in person or contact seller.

        :return: The payment_instructions of this PaymentMethod.
        :rtype: List[str]
        """
        return self._payment_instructions

    @payment_instructions.setter
    def payment_instructions(self, payment_instructions):
        """Sets the payment_instructions of this PaymentMethod.

        The payment instructions for the buyer, such as cash in person or contact seller.

        :param payment_instructions: The payment_instructions of this PaymentMethod.
        :type payment_instructions: List[str]
        """

        self._payment_instructions = payment_instructions

    @property
    def payment_method_brands(self):
        """Gets the payment_method_brands of this PaymentMethod.

        The payment method brands, including the payment method brand type and logo image.

        :return: The payment_method_brands of this PaymentMethod.
        :rtype: List[PaymentMethodBrand]
        """
        return self._payment_method_brands

    @payment_method_brands.setter
    def payment_method_brands(self, payment_method_brands):
        """Sets the payment_method_brands of this PaymentMethod.

        The payment method brands, including the payment method brand type and logo image.

        :param payment_method_brands: The payment_method_brands of this PaymentMethod.
        :type payment_method_brands: List[PaymentMethodBrand]
        """

        self._payment_method_brands = payment_method_brands

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this PaymentMethod.

        The payment method type, such as credit card or cash. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodTypeEnum'>eBay API documentation</a>

        :return: The payment_method_type of this PaymentMethod.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this PaymentMethod.

        The payment method type, such as credit card or cash. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodTypeEnum'>eBay API documentation</a>

        :param payment_method_type: The payment_method_type of this PaymentMethod.
        :type payment_method_type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def seller_instructions(self):
        """Gets the seller_instructions of this PaymentMethod.

        The seller instructions to the buyer, such as accepts credit cards or see description.

        :return: The seller_instructions of this PaymentMethod.
        :rtype: List[str]
        """
        return self._seller_instructions

    @seller_instructions.setter
    def seller_instructions(self, seller_instructions):
        """Sets the seller_instructions of this PaymentMethod.

        The seller instructions to the buyer, such as accepts credit cards or see description.

        :param seller_instructions: The seller_instructions of this PaymentMethod.
        :type seller_instructions: List[str]
        """

        self._seller_instructions = seller_instructions
