# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_corrections import AutoCorrections
from openapi_server.models.error import Error
from openapi_server.models.item_summary import ItemSummary
from openapi_server.models.refinement import Refinement
from openapi_server import util


class SearchPagedCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_corrections: AutoCorrections=None, href: str=None, item_summaries: List[ItemSummary]=None, limit: int=None, next: str=None, offset: int=None, prev: str=None, refinement: Refinement=None, total: int=None, warnings: List[Error]=None):
        """SearchPagedCollection - a model defined in OpenAPI

        :param auto_corrections: The auto_corrections of this SearchPagedCollection.
        :param href: The href of this SearchPagedCollection.
        :param item_summaries: The item_summaries of this SearchPagedCollection.
        :param limit: The limit of this SearchPagedCollection.
        :param next: The next of this SearchPagedCollection.
        :param offset: The offset of this SearchPagedCollection.
        :param prev: The prev of this SearchPagedCollection.
        :param refinement: The refinement of this SearchPagedCollection.
        :param total: The total of this SearchPagedCollection.
        :param warnings: The warnings of this SearchPagedCollection.
        """
        self.openapi_types = {
            'auto_corrections': AutoCorrections,
            'href': str,
            'item_summaries': List[ItemSummary],
            'limit': int,
            'next': str,
            'offset': int,
            'prev': str,
            'refinement': Refinement,
            'total': int,
            'warnings': List[Error]
        }

        self.attribute_map = {
            'auto_corrections': 'autoCorrections',
            'href': 'href',
            'item_summaries': 'itemSummaries',
            'limit': 'limit',
            'next': 'next',
            'offset': 'offset',
            'prev': 'prev',
            'refinement': 'refinement',
            'total': 'total',
            'warnings': 'warnings'
        }

        self._auto_corrections = auto_corrections
        self._href = href
        self._item_summaries = item_summaries
        self._limit = limit
        self._next = next
        self._offset = offset
        self._prev = prev
        self._refinement = refinement
        self._total = total
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchPagedCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchPagedCollection of this SearchPagedCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_corrections(self):
        """Gets the auto_corrections of this SearchPagedCollection.


        :return: The auto_corrections of this SearchPagedCollection.
        :rtype: AutoCorrections
        """
        return self._auto_corrections

    @auto_corrections.setter
    def auto_corrections(self, auto_corrections):
        """Sets the auto_corrections of this SearchPagedCollection.


        :param auto_corrections: The auto_corrections of this SearchPagedCollection.
        :type auto_corrections: AutoCorrections
        """

        self._auto_corrections = auto_corrections

    @property
    def href(self):
        """Gets the href of this SearchPagedCollection.

        The URI of the current page of results. The following example of the search method returns items 1 thru 5 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?q=shirt&amp;limit=5&amp;offset=0.

        :return: The href of this SearchPagedCollection.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SearchPagedCollection.

        The URI of the current page of results. The following example of the search method returns items 1 thru 5 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?q=shirt&amp;limit=5&amp;offset=0.

        :param href: The href of this SearchPagedCollection.
        :type href: str
        """

        self._href = href

    @property
    def item_summaries(self):
        """Gets the item_summaries of this SearchPagedCollection.

        An array of the items on this page. The items are sorted according to the sorting method specified in the request.

        :return: The item_summaries of this SearchPagedCollection.
        :rtype: List[ItemSummary]
        """
        return self._item_summaries

    @item_summaries.setter
    def item_summaries(self, item_summaries):
        """Sets the item_summaries of this SearchPagedCollection.

        An array of the items on this page. The items are sorted according to the sorting method specified in the request.

        :param item_summaries: The item_summaries of this SearchPagedCollection.
        :type item_summaries: List[ItemSummary]
        """

        self._item_summaries = item_summaries

    @property
    def limit(self):
        """Gets the limit of this SearchPagedCollection.

        The value of the limit parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.

        :return: The limit of this SearchPagedCollection.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchPagedCollection.

        The value of the limit parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.

        :param limit: The limit of this SearchPagedCollection.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this SearchPagedCollection.

        The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set. The following example of the search method returns items 5 thru 10 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=10

        :return: The next of this SearchPagedCollection.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this SearchPagedCollection.

        The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set. The following example of the search method returns items 5 thru 10 from the list of items found. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=10

        :param next: The next of this SearchPagedCollection.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this SearchPagedCollection.

        This value indicates the offset used for current page of items being returned. Assume the initial request used an offset of 0 and a limit of 3. Then in the first page of results, this value would be 0, and items 1-3 are returned. For the second page, this value is 3 and so on.

        :return: The offset of this SearchPagedCollection.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchPagedCollection.

        This value indicates the offset used for current page of items being returned. Assume the initial request used an offset of 0 and a limit of 3. Then in the first page of results, this value would be 0, and items 1-3 are returned. For the second page, this value is 3 and so on.

        :param offset: The offset of this SearchPagedCollection.
        :type offset: int
        """

        self._offset = offset

    @property
    def prev(self):
        """Gets the prev of this SearchPagedCollection.

        The URI for the previous page of results. This is returned if there is a previous page of results from the result set. The following example of the search method returns items 1 thru 5 from the list of items found, which would be the first set of items returned. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=0

        :return: The prev of this SearchPagedCollection.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this SearchPagedCollection.

        The URI for the previous page of results. This is returned if there is a previous page of results from the result set. The following example of the search method returns items 1 thru 5 from the list of items found, which would be the first set of items returned. https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&amp;limit=5&amp;offset=0

        :param prev: The prev of this SearchPagedCollection.
        :type prev: str
        """

        self._prev = prev

    @property
    def refinement(self):
        """Gets the refinement of this SearchPagedCollection.


        :return: The refinement of this SearchPagedCollection.
        :rtype: Refinement
        """
        return self._refinement

    @refinement.setter
    def refinement(self, refinement):
        """Sets the refinement of this SearchPagedCollection.


        :param refinement: The refinement of this SearchPagedCollection.
        :type refinement: Refinement
        """

        self._refinement = refinement

    @property
    def total(self):
        """Gets the total of this SearchPagedCollection.

        The total number of items that match the input criteria.

        :return: The total of this SearchPagedCollection.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchPagedCollection.

        The total number of items that match the input criteria.

        :param total: The total of this SearchPagedCollection.
        :type total: int
        """

        self._total = total

    @property
    def warnings(self):
        """Gets the warnings of this SearchPagedCollection.

        The container with all the warnings for the request.

        :return: The warnings of this SearchPagedCollection.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SearchPagedCollection.

        The container with all the warnings for the request.

        :param warnings: The warnings of this SearchPagedCollection.
        :type warnings: List[Error]
        """

        self._warnings = warnings
