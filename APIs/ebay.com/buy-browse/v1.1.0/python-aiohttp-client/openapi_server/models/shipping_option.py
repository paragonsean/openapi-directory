# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.converted_amount import ConvertedAmount
from openapi_server.models.ship_to_location import ShipToLocation
from openapi_server import util


class ShippingOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_shipping_cost_per_unit: ConvertedAmount=None, cut_off_date_used_for_estimate: str=None, fulfilled_through: str=None, guaranteed_delivery: bool=None, import_charges: ConvertedAmount=None, max_estimated_delivery_date: str=None, min_estimated_delivery_date: str=None, quantity_used_for_estimate: int=None, ship_to_location_used_for_estimate: ShipToLocation=None, shipping_carrier_code: str=None, shipping_cost: ConvertedAmount=None, shipping_cost_type: str=None, shipping_service_code: str=None, trademark_symbol: str=None, type: str=None):
        """ShippingOption - a model defined in OpenAPI

        :param additional_shipping_cost_per_unit: The additional_shipping_cost_per_unit of this ShippingOption.
        :param cut_off_date_used_for_estimate: The cut_off_date_used_for_estimate of this ShippingOption.
        :param fulfilled_through: The fulfilled_through of this ShippingOption.
        :param guaranteed_delivery: The guaranteed_delivery of this ShippingOption.
        :param import_charges: The import_charges of this ShippingOption.
        :param max_estimated_delivery_date: The max_estimated_delivery_date of this ShippingOption.
        :param min_estimated_delivery_date: The min_estimated_delivery_date of this ShippingOption.
        :param quantity_used_for_estimate: The quantity_used_for_estimate of this ShippingOption.
        :param ship_to_location_used_for_estimate: The ship_to_location_used_for_estimate of this ShippingOption.
        :param shipping_carrier_code: The shipping_carrier_code of this ShippingOption.
        :param shipping_cost: The shipping_cost of this ShippingOption.
        :param shipping_cost_type: The shipping_cost_type of this ShippingOption.
        :param shipping_service_code: The shipping_service_code of this ShippingOption.
        :param trademark_symbol: The trademark_symbol of this ShippingOption.
        :param type: The type of this ShippingOption.
        """
        self.openapi_types = {
            'additional_shipping_cost_per_unit': ConvertedAmount,
            'cut_off_date_used_for_estimate': str,
            'fulfilled_through': str,
            'guaranteed_delivery': bool,
            'import_charges': ConvertedAmount,
            'max_estimated_delivery_date': str,
            'min_estimated_delivery_date': str,
            'quantity_used_for_estimate': int,
            'ship_to_location_used_for_estimate': ShipToLocation,
            'shipping_carrier_code': str,
            'shipping_cost': ConvertedAmount,
            'shipping_cost_type': str,
            'shipping_service_code': str,
            'trademark_symbol': str,
            'type': str
        }

        self.attribute_map = {
            'additional_shipping_cost_per_unit': 'additionalShippingCostPerUnit',
            'cut_off_date_used_for_estimate': 'cutOffDateUsedForEstimate',
            'fulfilled_through': 'fulfilledThrough',
            'guaranteed_delivery': 'guaranteedDelivery',
            'import_charges': 'importCharges',
            'max_estimated_delivery_date': 'maxEstimatedDeliveryDate',
            'min_estimated_delivery_date': 'minEstimatedDeliveryDate',
            'quantity_used_for_estimate': 'quantityUsedForEstimate',
            'ship_to_location_used_for_estimate': 'shipToLocationUsedForEstimate',
            'shipping_carrier_code': 'shippingCarrierCode',
            'shipping_cost': 'shippingCost',
            'shipping_cost_type': 'shippingCostType',
            'shipping_service_code': 'shippingServiceCode',
            'trademark_symbol': 'trademarkSymbol',
            'type': 'type'
        }

        self._additional_shipping_cost_per_unit = additional_shipping_cost_per_unit
        self._cut_off_date_used_for_estimate = cut_off_date_used_for_estimate
        self._fulfilled_through = fulfilled_through
        self._guaranteed_delivery = guaranteed_delivery
        self._import_charges = import_charges
        self._max_estimated_delivery_date = max_estimated_delivery_date
        self._min_estimated_delivery_date = min_estimated_delivery_date
        self._quantity_used_for_estimate = quantity_used_for_estimate
        self._ship_to_location_used_for_estimate = ship_to_location_used_for_estimate
        self._shipping_carrier_code = shipping_carrier_code
        self._shipping_cost = shipping_cost
        self._shipping_cost_type = shipping_cost_type
        self._shipping_service_code = shipping_service_code
        self._trademark_symbol = trademark_symbol
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingOption of this ShippingOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_shipping_cost_per_unit(self):
        """Gets the additional_shipping_cost_per_unit of this ShippingOption.


        :return: The additional_shipping_cost_per_unit of this ShippingOption.
        :rtype: ConvertedAmount
        """
        return self._additional_shipping_cost_per_unit

    @additional_shipping_cost_per_unit.setter
    def additional_shipping_cost_per_unit(self, additional_shipping_cost_per_unit):
        """Sets the additional_shipping_cost_per_unit of this ShippingOption.


        :param additional_shipping_cost_per_unit: The additional_shipping_cost_per_unit of this ShippingOption.
        :type additional_shipping_cost_per_unit: ConvertedAmount
        """

        self._additional_shipping_cost_per_unit = additional_shipping_cost_per_unit

    @property
    def cut_off_date_used_for_estimate(self):
        """Gets the cut_off_date_used_for_estimate of this ShippingOption.

        The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.

        :return: The cut_off_date_used_for_estimate of this ShippingOption.
        :rtype: str
        """
        return self._cut_off_date_used_for_estimate

    @cut_off_date_used_for_estimate.setter
    def cut_off_date_used_for_estimate(self, cut_off_date_used_for_estimate):
        """Sets the cut_off_date_used_for_estimate of this ShippingOption.

        The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.

        :param cut_off_date_used_for_estimate: The cut_off_date_used_for_estimate of this ShippingOption.
        :type cut_off_date_used_for_estimate: str
        """

        self._cut_off_date_used_for_estimate = cut_off_date_used_for_estimate

    @property
    def fulfilled_through(self):
        """Gets the fulfilled_through of this ShippingOption.

        If the item is being shipped by eBay's Global Shipping Program, this field returns GLOBAL_SHIPPING. Otherwise this field is null. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:FulfilledThroughEnum'>eBay API documentation</a>

        :return: The fulfilled_through of this ShippingOption.
        :rtype: str
        """
        return self._fulfilled_through

    @fulfilled_through.setter
    def fulfilled_through(self, fulfilled_through):
        """Sets the fulfilled_through of this ShippingOption.

        If the item is being shipped by eBay's Global Shipping Program, this field returns GLOBAL_SHIPPING. Otherwise this field is null. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:FulfilledThroughEnum'>eBay API documentation</a>

        :param fulfilled_through: The fulfilled_through of this ShippingOption.
        :type fulfilled_through: str
        """

        self._fulfilled_through = fulfilled_through

    @property
    def guaranteed_delivery(self):
        """Gets the guaranteed_delivery of this ShippingOption.

        Indicates if the seller has committed to shipping the item with eBay Guaranteed Delivery. With eBay Guaranteed Delivery, the seller is committed to getting the line item to the buyer within 4 business days or less. See the Buying items with eBay Guaranteed Delivery help topic for more details about eBay Guaranteed Delivery.

        :return: The guaranteed_delivery of this ShippingOption.
        :rtype: bool
        """
        return self._guaranteed_delivery

    @guaranteed_delivery.setter
    def guaranteed_delivery(self, guaranteed_delivery):
        """Sets the guaranteed_delivery of this ShippingOption.

        Indicates if the seller has committed to shipping the item with eBay Guaranteed Delivery. With eBay Guaranteed Delivery, the seller is committed to getting the line item to the buyer within 4 business days or less. See the Buying items with eBay Guaranteed Delivery help topic for more details about eBay Guaranteed Delivery.

        :param guaranteed_delivery: The guaranteed_delivery of this ShippingOption.
        :type guaranteed_delivery: bool
        """

        self._guaranteed_delivery = guaranteed_delivery

    @property
    def import_charges(self):
        """Gets the import_charges of this ShippingOption.


        :return: The import_charges of this ShippingOption.
        :rtype: ConvertedAmount
        """
        return self._import_charges

    @import_charges.setter
    def import_charges(self, import_charges):
        """Sets the import_charges of this ShippingOption.


        :param import_charges: The import_charges of this ShippingOption.
        :type import_charges: ConvertedAmount
        """

        self._import_charges = import_charges

    @property
    def max_estimated_delivery_date(self):
        """Gets the max_estimated_delivery_date of this ShippingOption.

        The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.

        :return: The max_estimated_delivery_date of this ShippingOption.
        :rtype: str
        """
        return self._max_estimated_delivery_date

    @max_estimated_delivery_date.setter
    def max_estimated_delivery_date(self, max_estimated_delivery_date):
        """Sets the max_estimated_delivery_date of this ShippingOption.

        The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.

        :param max_estimated_delivery_date: The max_estimated_delivery_date of this ShippingOption.
        :type max_estimated_delivery_date: str
        """

        self._max_estimated_delivery_date = max_estimated_delivery_date

    @property
    def min_estimated_delivery_date(self):
        """Gets the min_estimated_delivery_date of this ShippingOption.

        The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.

        :return: The min_estimated_delivery_date of this ShippingOption.
        :rtype: str
        """
        return self._min_estimated_delivery_date

    @min_estimated_delivery_date.setter
    def min_estimated_delivery_date(self, min_estimated_delivery_date):
        """Sets the min_estimated_delivery_date of this ShippingOption.

        The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.

        :param min_estimated_delivery_date: The min_estimated_delivery_date of this ShippingOption.
        :type min_estimated_delivery_date: str
        """

        self._min_estimated_delivery_date = min_estimated_delivery_date

    @property
    def quantity_used_for_estimate(self):
        """Gets the quantity_used_for_estimate of this ShippingOption.

        The number of items used when calculating the estimation information.

        :return: The quantity_used_for_estimate of this ShippingOption.
        :rtype: int
        """
        return self._quantity_used_for_estimate

    @quantity_used_for_estimate.setter
    def quantity_used_for_estimate(self, quantity_used_for_estimate):
        """Sets the quantity_used_for_estimate of this ShippingOption.

        The number of items used when calculating the estimation information.

        :param quantity_used_for_estimate: The quantity_used_for_estimate of this ShippingOption.
        :type quantity_used_for_estimate: int
        """

        self._quantity_used_for_estimate = quantity_used_for_estimate

    @property
    def ship_to_location_used_for_estimate(self):
        """Gets the ship_to_location_used_for_estimate of this ShippingOption.


        :return: The ship_to_location_used_for_estimate of this ShippingOption.
        :rtype: ShipToLocation
        """
        return self._ship_to_location_used_for_estimate

    @ship_to_location_used_for_estimate.setter
    def ship_to_location_used_for_estimate(self, ship_to_location_used_for_estimate):
        """Sets the ship_to_location_used_for_estimate of this ShippingOption.


        :param ship_to_location_used_for_estimate: The ship_to_location_used_for_estimate of this ShippingOption.
        :type ship_to_location_used_for_estimate: ShipToLocation
        """

        self._ship_to_location_used_for_estimate = ship_to_location_used_for_estimate

    @property
    def shipping_carrier_code(self):
        """Gets the shipping_carrier_code of this ShippingOption.

        The name of the shipping provider, such as FedEx, or USPS.

        :return: The shipping_carrier_code of this ShippingOption.
        :rtype: str
        """
        return self._shipping_carrier_code

    @shipping_carrier_code.setter
    def shipping_carrier_code(self, shipping_carrier_code):
        """Sets the shipping_carrier_code of this ShippingOption.

        The name of the shipping provider, such as FedEx, or USPS.

        :param shipping_carrier_code: The shipping_carrier_code of this ShippingOption.
        :type shipping_carrier_code: str
        """

        self._shipping_carrier_code = shipping_carrier_code

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this ShippingOption.


        :return: The shipping_cost of this ShippingOption.
        :rtype: ConvertedAmount
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this ShippingOption.


        :param shipping_cost: The shipping_cost of this ShippingOption.
        :type shipping_cost: ConvertedAmount
        """

        self._shipping_cost = shipping_cost

    @property
    def shipping_cost_type(self):
        """Gets the shipping_cost_type of this ShippingOption.

        Indicates the class of the shipping cost. Valid Values: FIXED or CALCULATED Code so that your app gracefully handles any future changes to this list.

        :return: The shipping_cost_type of this ShippingOption.
        :rtype: str
        """
        return self._shipping_cost_type

    @shipping_cost_type.setter
    def shipping_cost_type(self, shipping_cost_type):
        """Sets the shipping_cost_type of this ShippingOption.

        Indicates the class of the shipping cost. Valid Values: FIXED or CALCULATED Code so that your app gracefully handles any future changes to this list.

        :param shipping_cost_type: The shipping_cost_type of this ShippingOption.
        :type shipping_cost_type: str
        """

        self._shipping_cost_type = shipping_cost_type

    @property
    def shipping_service_code(self):
        """Gets the shipping_service_code of this ShippingOption.

        The type of shipping service. For example, USPS First Class.

        :return: The shipping_service_code of this ShippingOption.
        :rtype: str
        """
        return self._shipping_service_code

    @shipping_service_code.setter
    def shipping_service_code(self, shipping_service_code):
        """Sets the shipping_service_code of this ShippingOption.

        The type of shipping service. For example, USPS First Class.

        :param shipping_service_code: The shipping_service_code of this ShippingOption.
        :type shipping_service_code: str
        """

        self._shipping_service_code = shipping_service_code

    @property
    def trademark_symbol(self):
        """Gets the trademark_symbol of this ShippingOption.

        Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.

        :return: The trademark_symbol of this ShippingOption.
        :rtype: str
        """
        return self._trademark_symbol

    @trademark_symbol.setter
    def trademark_symbol(self, trademark_symbol):
        """Sets the trademark_symbol of this ShippingOption.

        Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.

        :param trademark_symbol: The trademark_symbol of this ShippingOption.
        :type trademark_symbol: str
        """

        self._trademark_symbol = trademark_symbol

    @property
    def type(self):
        """Gets the type of this ShippingOption.

        The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.

        :return: The type of this ShippingOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShippingOption.

        The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.

        :param type: The type of this ShippingOption.
        :type type: str
        """

        self._type = type
