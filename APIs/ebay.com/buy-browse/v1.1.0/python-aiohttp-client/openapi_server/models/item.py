# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.available_coupon import AvailableCoupon
from openapi_server.models.converted_amount import ConvertedAmount
from openapi_server.models.error import Error
from openapi_server.models.estimated_availability import EstimatedAvailability
from openapi_server.models.image import Image
from openapi_server.models.item_group_summary import ItemGroupSummary
from openapi_server.models.item_return_terms import ItemReturnTerms
from openapi_server.models.marketing_price import MarketingPrice
from openapi_server.models.payment_method import PaymentMethod
from openapi_server.models.product import Product
from openapi_server.models.review_rating import ReviewRating
from openapi_server.models.seller_detail import SellerDetail
from openapi_server.models.ship_to_locations import ShipToLocations
from openapi_server.models.shipping_option import ShippingOption
from openapi_server.models.taxes import Taxes
from openapi_server.models.typed_name_value import TypedNameValue
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_images: List[Image]=None, adult_only: bool=None, age_group: str=None, available_coupons: List[AvailableCoupon]=None, bid_count: int=None, brand: str=None, buying_options: List[str]=None, category_id: str=None, category_path: str=None, color: str=None, condition: str=None, condition_description: str=None, condition_id: str=None, current_bid_price: ConvertedAmount=None, description: str=None, eligible_for_inline_checkout: bool=None, enabled_for_guest_checkout: bool=None, energy_efficiency_class: str=None, epid: str=None, estimated_availabilities: List[EstimatedAvailability]=None, gender: str=None, gtin: str=None, image: Image=None, inferred_epid: str=None, item_affiliate_web_url: str=None, item_end_date: str=None, item_id: str=None, item_location: Address=None, item_web_url: str=None, legacy_item_id: str=None, localized_aspects: List[TypedNameValue]=None, lot_size: int=None, marketing_price: MarketingPrice=None, material: str=None, minimum_price_to_bid: ConvertedAmount=None, mpn: str=None, pattern: str=None, payment_methods: List[PaymentMethod]=None, price: ConvertedAmount=None, price_display_condition: str=None, primary_item_group: ItemGroupSummary=None, primary_product_review_rating: ReviewRating=None, product: Product=None, product_fiche_web_url: str=None, qualified_programs: List[str]=None, quantity_limit_per_buyer: int=None, reserve_price_met: bool=None, return_terms: ItemReturnTerms=None, seller: SellerDetail=None, seller_item_revision: str=None, ship_to_locations: ShipToLocations=None, shipping_options: List[ShippingOption]=None, short_description: str=None, size: str=None, size_system: str=None, size_type: str=None, subtitle: str=None, taxes: List[Taxes]=None, title: str=None, top_rated_buying_experience: bool=None, unique_bidder_count: int=None, unit_price: ConvertedAmount=None, unit_pricing_measure: str=None, warnings: List[Error]=None):
        """Item - a model defined in OpenAPI

        :param additional_images: The additional_images of this Item.
        :param adult_only: The adult_only of this Item.
        :param age_group: The age_group of this Item.
        :param available_coupons: The available_coupons of this Item.
        :param bid_count: The bid_count of this Item.
        :param brand: The brand of this Item.
        :param buying_options: The buying_options of this Item.
        :param category_id: The category_id of this Item.
        :param category_path: The category_path of this Item.
        :param color: The color of this Item.
        :param condition: The condition of this Item.
        :param condition_description: The condition_description of this Item.
        :param condition_id: The condition_id of this Item.
        :param current_bid_price: The current_bid_price of this Item.
        :param description: The description of this Item.
        :param eligible_for_inline_checkout: The eligible_for_inline_checkout of this Item.
        :param enabled_for_guest_checkout: The enabled_for_guest_checkout of this Item.
        :param energy_efficiency_class: The energy_efficiency_class of this Item.
        :param epid: The epid of this Item.
        :param estimated_availabilities: The estimated_availabilities of this Item.
        :param gender: The gender of this Item.
        :param gtin: The gtin of this Item.
        :param image: The image of this Item.
        :param inferred_epid: The inferred_epid of this Item.
        :param item_affiliate_web_url: The item_affiliate_web_url of this Item.
        :param item_end_date: The item_end_date of this Item.
        :param item_id: The item_id of this Item.
        :param item_location: The item_location of this Item.
        :param item_web_url: The item_web_url of this Item.
        :param legacy_item_id: The legacy_item_id of this Item.
        :param localized_aspects: The localized_aspects of this Item.
        :param lot_size: The lot_size of this Item.
        :param marketing_price: The marketing_price of this Item.
        :param material: The material of this Item.
        :param minimum_price_to_bid: The minimum_price_to_bid of this Item.
        :param mpn: The mpn of this Item.
        :param pattern: The pattern of this Item.
        :param payment_methods: The payment_methods of this Item.
        :param price: The price of this Item.
        :param price_display_condition: The price_display_condition of this Item.
        :param primary_item_group: The primary_item_group of this Item.
        :param primary_product_review_rating: The primary_product_review_rating of this Item.
        :param product: The product of this Item.
        :param product_fiche_web_url: The product_fiche_web_url of this Item.
        :param qualified_programs: The qualified_programs of this Item.
        :param quantity_limit_per_buyer: The quantity_limit_per_buyer of this Item.
        :param reserve_price_met: The reserve_price_met of this Item.
        :param return_terms: The return_terms of this Item.
        :param seller: The seller of this Item.
        :param seller_item_revision: The seller_item_revision of this Item.
        :param ship_to_locations: The ship_to_locations of this Item.
        :param shipping_options: The shipping_options of this Item.
        :param short_description: The short_description of this Item.
        :param size: The size of this Item.
        :param size_system: The size_system of this Item.
        :param size_type: The size_type of this Item.
        :param subtitle: The subtitle of this Item.
        :param taxes: The taxes of this Item.
        :param title: The title of this Item.
        :param top_rated_buying_experience: The top_rated_buying_experience of this Item.
        :param unique_bidder_count: The unique_bidder_count of this Item.
        :param unit_price: The unit_price of this Item.
        :param unit_pricing_measure: The unit_pricing_measure of this Item.
        :param warnings: The warnings of this Item.
        """
        self.openapi_types = {
            'additional_images': List[Image],
            'adult_only': bool,
            'age_group': str,
            'available_coupons': List[AvailableCoupon],
            'bid_count': int,
            'brand': str,
            'buying_options': List[str],
            'category_id': str,
            'category_path': str,
            'color': str,
            'condition': str,
            'condition_description': str,
            'condition_id': str,
            'current_bid_price': ConvertedAmount,
            'description': str,
            'eligible_for_inline_checkout': bool,
            'enabled_for_guest_checkout': bool,
            'energy_efficiency_class': str,
            'epid': str,
            'estimated_availabilities': List[EstimatedAvailability],
            'gender': str,
            'gtin': str,
            'image': Image,
            'inferred_epid': str,
            'item_affiliate_web_url': str,
            'item_end_date': str,
            'item_id': str,
            'item_location': Address,
            'item_web_url': str,
            'legacy_item_id': str,
            'localized_aspects': List[TypedNameValue],
            'lot_size': int,
            'marketing_price': MarketingPrice,
            'material': str,
            'minimum_price_to_bid': ConvertedAmount,
            'mpn': str,
            'pattern': str,
            'payment_methods': List[PaymentMethod],
            'price': ConvertedAmount,
            'price_display_condition': str,
            'primary_item_group': ItemGroupSummary,
            'primary_product_review_rating': ReviewRating,
            'product': Product,
            'product_fiche_web_url': str,
            'qualified_programs': List[str],
            'quantity_limit_per_buyer': int,
            'reserve_price_met': bool,
            'return_terms': ItemReturnTerms,
            'seller': SellerDetail,
            'seller_item_revision': str,
            'ship_to_locations': ShipToLocations,
            'shipping_options': List[ShippingOption],
            'short_description': str,
            'size': str,
            'size_system': str,
            'size_type': str,
            'subtitle': str,
            'taxes': List[Taxes],
            'title': str,
            'top_rated_buying_experience': bool,
            'unique_bidder_count': int,
            'unit_price': ConvertedAmount,
            'unit_pricing_measure': str,
            'warnings': List[Error]
        }

        self.attribute_map = {
            'additional_images': 'additionalImages',
            'adult_only': 'adultOnly',
            'age_group': 'ageGroup',
            'available_coupons': 'availableCoupons',
            'bid_count': 'bidCount',
            'brand': 'brand',
            'buying_options': 'buyingOptions',
            'category_id': 'categoryId',
            'category_path': 'categoryPath',
            'color': 'color',
            'condition': 'condition',
            'condition_description': 'conditionDescription',
            'condition_id': 'conditionId',
            'current_bid_price': 'currentBidPrice',
            'description': 'description',
            'eligible_for_inline_checkout': 'eligibleForInlineCheckout',
            'enabled_for_guest_checkout': 'enabledForGuestCheckout',
            'energy_efficiency_class': 'energyEfficiencyClass',
            'epid': 'epid',
            'estimated_availabilities': 'estimatedAvailabilities',
            'gender': 'gender',
            'gtin': 'gtin',
            'image': 'image',
            'inferred_epid': 'inferredEpid',
            'item_affiliate_web_url': 'itemAffiliateWebUrl',
            'item_end_date': 'itemEndDate',
            'item_id': 'itemId',
            'item_location': 'itemLocation',
            'item_web_url': 'itemWebUrl',
            'legacy_item_id': 'legacyItemId',
            'localized_aspects': 'localizedAspects',
            'lot_size': 'lotSize',
            'marketing_price': 'marketingPrice',
            'material': 'material',
            'minimum_price_to_bid': 'minimumPriceToBid',
            'mpn': 'mpn',
            'pattern': 'pattern',
            'payment_methods': 'paymentMethods',
            'price': 'price',
            'price_display_condition': 'priceDisplayCondition',
            'primary_item_group': 'primaryItemGroup',
            'primary_product_review_rating': 'primaryProductReviewRating',
            'product': 'product',
            'product_fiche_web_url': 'productFicheWebUrl',
            'qualified_programs': 'qualifiedPrograms',
            'quantity_limit_per_buyer': 'quantityLimitPerBuyer',
            'reserve_price_met': 'reservePriceMet',
            'return_terms': 'returnTerms',
            'seller': 'seller',
            'seller_item_revision': 'sellerItemRevision',
            'ship_to_locations': 'shipToLocations',
            'shipping_options': 'shippingOptions',
            'short_description': 'shortDescription',
            'size': 'size',
            'size_system': 'sizeSystem',
            'size_type': 'sizeType',
            'subtitle': 'subtitle',
            'taxes': 'taxes',
            'title': 'title',
            'top_rated_buying_experience': 'topRatedBuyingExperience',
            'unique_bidder_count': 'uniqueBidderCount',
            'unit_price': 'unitPrice',
            'unit_pricing_measure': 'unitPricingMeasure',
            'warnings': 'warnings'
        }

        self._additional_images = additional_images
        self._adult_only = adult_only
        self._age_group = age_group
        self._available_coupons = available_coupons
        self._bid_count = bid_count
        self._brand = brand
        self._buying_options = buying_options
        self._category_id = category_id
        self._category_path = category_path
        self._color = color
        self._condition = condition
        self._condition_description = condition_description
        self._condition_id = condition_id
        self._current_bid_price = current_bid_price
        self._description = description
        self._eligible_for_inline_checkout = eligible_for_inline_checkout
        self._enabled_for_guest_checkout = enabled_for_guest_checkout
        self._energy_efficiency_class = energy_efficiency_class
        self._epid = epid
        self._estimated_availabilities = estimated_availabilities
        self._gender = gender
        self._gtin = gtin
        self._image = image
        self._inferred_epid = inferred_epid
        self._item_affiliate_web_url = item_affiliate_web_url
        self._item_end_date = item_end_date
        self._item_id = item_id
        self._item_location = item_location
        self._item_web_url = item_web_url
        self._legacy_item_id = legacy_item_id
        self._localized_aspects = localized_aspects
        self._lot_size = lot_size
        self._marketing_price = marketing_price
        self._material = material
        self._minimum_price_to_bid = minimum_price_to_bid
        self._mpn = mpn
        self._pattern = pattern
        self._payment_methods = payment_methods
        self._price = price
        self._price_display_condition = price_display_condition
        self._primary_item_group = primary_item_group
        self._primary_product_review_rating = primary_product_review_rating
        self._product = product
        self._product_fiche_web_url = product_fiche_web_url
        self._qualified_programs = qualified_programs
        self._quantity_limit_per_buyer = quantity_limit_per_buyer
        self._reserve_price_met = reserve_price_met
        self._return_terms = return_terms
        self._seller = seller
        self._seller_item_revision = seller_item_revision
        self._ship_to_locations = ship_to_locations
        self._shipping_options = shipping_options
        self._short_description = short_description
        self._size = size
        self._size_system = size_system
        self._size_type = size_type
        self._subtitle = subtitle
        self._taxes = taxes
        self._title = title
        self._top_rated_buying_experience = top_rated_buying_experience
        self._unique_bidder_count = unique_bidder_count
        self._unit_price = unit_price
        self._unit_pricing_measure = unit_pricing_measure
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_images(self):
        """Gets the additional_images of this Item.

        An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.

        :return: The additional_images of this Item.
        :rtype: List[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this Item.

        An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.

        :param additional_images: The additional_images of this Item.
        :type additional_images: List[Image]
        """

        self._additional_images = additional_images

    @property
    def adult_only(self):
        """Gets the adult_only of this Item.

        This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.

        :return: The adult_only of this Item.
        :rtype: bool
        """
        return self._adult_only

    @adult_only.setter
    def adult_only(self, adult_only):
        """Sets the adult_only of this Item.

        This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.

        :param adult_only: The adult_only of this Item.
        :type adult_only: bool
        """

        self._adult_only = adult_only

    @property
    def age_group(self):
        """Gets the age_group of this Item.

        (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The age_group of this Item.
        :rtype: str
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group):
        """Sets the age_group of this Item.

        (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param age_group: The age_group of this Item.
        :type age_group: str
        """

        self._age_group = age_group

    @property
    def available_coupons(self):
        """Gets the available_coupons of this Item.

        A list of available coupons for the item.

        :return: The available_coupons of this Item.
        :rtype: List[AvailableCoupon]
        """
        return self._available_coupons

    @available_coupons.setter
    def available_coupons(self, available_coupons):
        """Sets the available_coupons of this Item.

        A list of available coupons for the item.

        :param available_coupons: The available_coupons of this Item.
        :type available_coupons: List[AvailableCoupon]
        """

        self._available_coupons = available_coupons

    @property
    def bid_count(self):
        """Gets the bid_count of this Item.

        This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.

        :return: The bid_count of this Item.
        :rtype: int
        """
        return self._bid_count

    @bid_count.setter
    def bid_count(self, bid_count):
        """Sets the bid_count of this Item.

        This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.

        :param bid_count: The bid_count of this Item.
        :type bid_count: int
        """

        self._bid_count = bid_count

    @property
    def brand(self):
        """Gets the brand of this Item.

        (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The brand of this Item.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Item.

        (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param brand: The brand of this Item.
        :type brand: str
        """

        self._brand = brand

    @property
    def buying_options(self):
        """Gets the buying_options of this Item.

        A comma separated list of all the purchase options available for the item. The values returned are: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Indicates the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For more information on how this works, see Making a Best Offer. Code so that your app gracefully handles any future changes to this list.

        :return: The buying_options of this Item.
        :rtype: List[str]
        """
        return self._buying_options

    @buying_options.setter
    def buying_options(self, buying_options):
        """Sets the buying_options of this Item.

        A comma separated list of all the purchase options available for the item. The values returned are: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Indicates the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For more information on how this works, see Making a Best Offer. Code so that your app gracefully handles any future changes to this list.

        :param buying_options: The buying_options of this Item.
        :type buying_options: List[str]
        """

        self._buying_options = buying_options

    @property
    def category_id(self):
        """Gets the category_id of this Item.

        The ID of the leaf category for this item. A leaf category is the lowest level in that category and has no children.

        :return: The category_id of this Item.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Item.

        The ID of the leaf category for this item. A leaf category is the lowest level in that category and has no children.

        :param category_id: The category_id of this Item.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category_path(self):
        """Gets the category_path of this Item.

        Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks

        :return: The category_path of this Item.
        :rtype: str
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this Item.

        Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks

        :param category_path: The category_path of this Item.
        :type category_path: str
        """

        self._category_path = category_path

    @property
    def color(self):
        """Gets the color of this Item.

        (Primary Item Aspect) Text describing the color of the item. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The color of this Item.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Item.

        (Primary Item Aspect) Text describing the color of the item. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param color: The color of this Item.
        :type color: str
        """

        self._color = color

    @property
    def condition(self):
        """Gets the condition of this Item.

        A short text description for the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition of this Item.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Item.

        A short text description for the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition: The condition of this Item.
        :type condition: str
        """

        self._condition = condition

    @property
    def condition_description(self):
        """Gets the condition_description of this Item.

        A full text description for the condition of the item. This field elaborates on the value specified in the condition field and provides full details for the condition of the item. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition_description of this Item.
        :rtype: str
        """
        return self._condition_description

    @condition_description.setter
    def condition_description(self, condition_description):
        """Sets the condition_description of this Item.

        A full text description for the condition of the item. This field elaborates on the value specified in the condition field and provides full details for the condition of the item. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition_description: The condition_description of this Item.
        :type condition_description: str
        """

        self._condition_description = condition_description

    @property
    def condition_id(self):
        """Gets the condition_id of this Item.

        The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition_id of this Item.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this Item.

        The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition_id: The condition_id of this Item.
        :type condition_id: str
        """

        self._condition_id = condition_id

    @property
    def current_bid_price(self):
        """Gets the current_bid_price of this Item.


        :return: The current_bid_price of this Item.
        :rtype: ConvertedAmount
        """
        return self._current_bid_price

    @current_bid_price.setter
    def current_bid_price(self, current_bid_price):
        """Sets the current_bid_price of this Item.


        :param current_bid_price: The current_bid_price of this Item.
        :type current_bid_price: ConvertedAmount
        """

        self._current_bid_price = current_bid_price

    @property
    def description(self):
        """Gets the description of this Item.

        The full description of the item that was created by the seller. This can be plain text or rich content and can be very large.

        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.

        The full description of the item that was created by the seller. This can be plain text or rich content and can be very large.

        :param description: The description of this Item.
        :type description: str
        """

        self._description = description

    @property
    def eligible_for_inline_checkout(self):
        """Gets the eligible_for_inline_checkout of this Item.

        This field indicates if the item can be purchased using the Buy Order API. If the value of this field is true, this indicates that the item can be purchased using the Order API. If the value of this field is false, this indicates that the item cannot be purchased using the Order API and must be purchased on the eBay site.

        :return: The eligible_for_inline_checkout of this Item.
        :rtype: bool
        """
        return self._eligible_for_inline_checkout

    @eligible_for_inline_checkout.setter
    def eligible_for_inline_checkout(self, eligible_for_inline_checkout):
        """Sets the eligible_for_inline_checkout of this Item.

        This field indicates if the item can be purchased using the Buy Order API. If the value of this field is true, this indicates that the item can be purchased using the Order API. If the value of this field is false, this indicates that the item cannot be purchased using the Order API and must be purchased on the eBay site.

        :param eligible_for_inline_checkout: The eligible_for_inline_checkout of this Item.
        :type eligible_for_inline_checkout: bool
        """

        self._eligible_for_inline_checkout = eligible_for_inline_checkout

    @property
    def enabled_for_guest_checkout(self):
        """Gets the enabled_for_guest_checkout of this Item.

        This indicates if the item can be purchased using Guest Checkout in the Order API. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.

        :return: The enabled_for_guest_checkout of this Item.
        :rtype: bool
        """
        return self._enabled_for_guest_checkout

    @enabled_for_guest_checkout.setter
    def enabled_for_guest_checkout(self, enabled_for_guest_checkout):
        """Sets the enabled_for_guest_checkout of this Item.

        This indicates if the item can be purchased using Guest Checkout in the Order API. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.

        :param enabled_for_guest_checkout: The enabled_for_guest_checkout of this Item.
        :type enabled_for_guest_checkout: bool
        """

        self._enabled_for_guest_checkout = enabled_for_guest_checkout

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this Item.

        This indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. When the manufacturer's specifications for this item are available, the link to this information is returned in the productFicheWebUrl field.

        :return: The energy_efficiency_class of this Item.
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this Item.

        This indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. When the manufacturer's specifications for this item are available, the link to this information is returned in the productFicheWebUrl field.

        :param energy_efficiency_class: The energy_efficiency_class of this Item.
        :type energy_efficiency_class: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def epid(self):
        """Gets the epid of this Item.

        An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.

        :return: The epid of this Item.
        :rtype: str
        """
        return self._epid

    @epid.setter
    def epid(self, epid):
        """Sets the epid of this Item.

        An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.

        :param epid: The epid of this Item.
        :type epid: str
        """

        self._epid = epid

    @property
    def estimated_availabilities(self):
        """Gets the estimated_availabilities of this Item.

        The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.

        :return: The estimated_availabilities of this Item.
        :rtype: List[EstimatedAvailability]
        """
        return self._estimated_availabilities

    @estimated_availabilities.setter
    def estimated_availabilities(self, estimated_availabilities):
        """Sets the estimated_availabilities of this Item.

        The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.

        :param estimated_availabilities: The estimated_availabilities of this Item.
        :type estimated_availabilities: List[EstimatedAvailability]
        """

        self._estimated_availabilities = estimated_availabilities

    @property
    def gender(self):
        """Gets the gender of this Item.

        (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The gender of this Item.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Item.

        (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param gender: The gender of this Item.
        :type gender: str
        """

        self._gender = gender

    @property
    def gtin(self):
        """Gets the gtin of this Item.

        The unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.

        :return: The gtin of this Item.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Item.

        The unique Global Trade Item number of the item as defined by https://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.

        :param gtin: The gtin of this Item.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def image(self):
        """Gets the image of this Item.


        :return: The image of this Item.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Item.


        :param image: The image of this Item.
        :type image: Image
        """

        self._image = image

    @property
    def inferred_epid(self):
        """Gets the inferred_epid of this Item.

        The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay using the item's title, aspects, and other data. If the seller provided an ePID for the item, the seller's value is returned in the epid field. Note: This field is returned only for authorized Partners.

        :return: The inferred_epid of this Item.
        :rtype: str
        """
        return self._inferred_epid

    @inferred_epid.setter
    def inferred_epid(self, inferred_epid):
        """Sets the inferred_epid of this Item.

        The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay using the item's title, aspects, and other data. If the seller provided an ePID for the item, the seller's value is returned in the epid field. Note: This field is returned only for authorized Partners.

        :param inferred_epid: The inferred_epid of this Item.
        :type inferred_epid: str
        """

        self._inferred_epid = inferred_epid

    @property
    def item_affiliate_web_url(self):
        """Gets the item_affiliate_web_url of this Item.

        The URL of the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the eBay partner enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to be commissioned for your sales, you must use this URL to forward your buyer to the ebay.com site.

        :return: The item_affiliate_web_url of this Item.
        :rtype: str
        """
        return self._item_affiliate_web_url

    @item_affiliate_web_url.setter
    def item_affiliate_web_url(self, item_affiliate_web_url):
        """Sets the item_affiliate_web_url of this Item.

        The URL of the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the eBay partner enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to be commissioned for your sales, you must use this URL to forward your buyer to the ebay.com site.

        :param item_affiliate_web_url: The item_affiliate_web_url of this Item.
        :type item_affiliate_web_url: str
        """

        self._item_affiliate_web_url = item_affiliate_web_url

    @property
    def item_end_date(self):
        """Gets the item_end_date of this Item.

        The date and time up to which the items can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: This field is not returned for Good 'Til Cancelled (GTC) listings.

        :return: The item_end_date of this Item.
        :rtype: str
        """
        return self._item_end_date

    @item_end_date.setter
    def item_end_date(self, item_end_date):
        """Sets the item_end_date of this Item.

        The date and time up to which the items can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: This field is not returned for Good 'Til Cancelled (GTC) listings.

        :param item_end_date: The item_end_date of this Item.
        :type item_end_date: str
        """

        self._item_end_date = item_end_date

    @property
    def item_id(self):
        """Gets the item_id of this Item.

        The unique RESTful identifier of the item.

        :return: The item_id of this Item.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.

        The unique RESTful identifier of the item.

        :param item_id: The item_id of this Item.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_location(self):
        """Gets the item_location of this Item.


        :return: The item_location of this Item.
        :rtype: Address
        """
        return self._item_location

    @item_location.setter
    def item_location(self, item_location):
        """Sets the item_location of this Item.


        :param item_location: The item_location of this Item.
        :type item_location: Address
        """

        self._item_location = item_location

    @property
    def item_web_url(self):
        """Gets the item_web_url of this Item.

        The URL of the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; link that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.

        :return: The item_web_url of this Item.
        :rtype: str
        """
        return self._item_web_url

    @item_web_url.setter
    def item_web_url(self, item_web_url):
        """Sets the item_web_url of this Item.

        The URL of the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; link that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.

        :param item_web_url: The item_web_url of this Item.
        :type item_web_url: str
        """

        self._item_web_url = item_web_url

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this Item.

        The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.

        :return: The legacy_item_id of this Item.
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this Item.

        The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.

        :param legacy_item_id: The legacy_item_id of this Item.
        :type legacy_item_id: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def localized_aspects(self):
        """Gets the localized_aspects of this Item.

        An array of containers that show the complete list of the aspect name/value pairs that describe the variation of the item.

        :return: The localized_aspects of this Item.
        :rtype: List[TypedNameValue]
        """
        return self._localized_aspects

    @localized_aspects.setter
    def localized_aspects(self, localized_aspects):
        """Sets the localized_aspects of this Item.

        An array of containers that show the complete list of the aspect name/value pairs that describe the variation of the item.

        :param localized_aspects: The localized_aspects of this Item.
        :type localized_aspects: List[TypedNameValue]
        """

        self._localized_aspects = localized_aspects

    @property
    def lot_size(self):
        """Gets the lot_size of this Item.

        The number of items in a lot. In other words, a lot size is the number of items that are being sold together. A lot is a set of two or more items included in a single listing that must be purchased together in a single order line item. All the items in the lot are the same but there can be multiple items in a single lot, such as the package of batteries shown in the example below. Item Lot Definition Lot Size A package of 24 AA batteries A box of 10 packages 10 A P235/75-15 Goodyear tire 4 tires 4 Fashion Jewelry Rings Package of 100 assorted rings 100 Note: Lots are not supported in all categories.

        :return: The lot_size of this Item.
        :rtype: int
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this Item.

        The number of items in a lot. In other words, a lot size is the number of items that are being sold together. A lot is a set of two or more items included in a single listing that must be purchased together in a single order line item. All the items in the lot are the same but there can be multiple items in a single lot, such as the package of batteries shown in the example below. Item Lot Definition Lot Size A package of 24 AA batteries A box of 10 packages 10 A P235/75-15 Goodyear tire 4 tires 4 Fashion Jewelry Rings Package of 100 assorted rings 100 Note: Lots are not supported in all categories.

        :param lot_size: The lot_size of this Item.
        :type lot_size: int
        """

        self._lot_size = lot_size

    @property
    def marketing_price(self):
        """Gets the marketing_price of this Item.


        :return: The marketing_price of this Item.
        :rtype: MarketingPrice
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this Item.


        :param marketing_price: The marketing_price of this Item.
        :type marketing_price: MarketingPrice
        """

        self._marketing_price = marketing_price

    @property
    def material(self):
        """Gets the material of this Item.

        (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The material of this Item.
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this Item.

        (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param material: The material of this Item.
        :type material: str
        """

        self._material = material

    @property
    def minimum_price_to_bid(self):
        """Gets the minimum_price_to_bid of this Item.


        :return: The minimum_price_to_bid of this Item.
        :rtype: ConvertedAmount
        """
        return self._minimum_price_to_bid

    @minimum_price_to_bid.setter
    def minimum_price_to_bid(self, minimum_price_to_bid):
        """Sets the minimum_price_to_bid of this Item.


        :param minimum_price_to_bid: The minimum_price_to_bid of this Item.
        :type minimum_price_to_bid: ConvertedAmount
        """

        self._minimum_price_to_bid = minimum_price_to_bid

    @property
    def mpn(self):
        """Gets the mpn of this Item.

        The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.

        :return: The mpn of this Item.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Item.

        The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.

        :param mpn: The mpn of this Item.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def pattern(self):
        """Gets the pattern of this Item.

        (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The pattern of this Item.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this Item.

        (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param pattern: The pattern of this Item.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def payment_methods(self):
        """Gets the payment_methods of this Item.

        The payment methods for the item, including the payment method types, brands, and instructions for the buyer.

        :return: The payment_methods of this Item.
        :rtype: List[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this Item.

        The payment methods for the item, including the payment method types, brands, and instructions for the buyer.

        :param payment_methods: The payment_methods of this Item.
        :type payment_methods: List[PaymentMethod]
        """

        self._payment_methods = payment_methods

    @property
    def price(self):
        """Gets the price of this Item.


        :return: The price of this Item.
        :rtype: ConvertedAmount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item.


        :param price: The price of this Item.
        :type price: ConvertedAmount
        """

        self._price = price

    @property
    def price_display_condition(self):
        """Gets the price_display_condition of this Item.

        Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>

        :return: The price_display_condition of this Item.
        :rtype: str
        """
        return self._price_display_condition

    @price_display_condition.setter
    def price_display_condition(self, price_display_condition):
        """Sets the price_display_condition of this Item.

        Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>

        :param price_display_condition: The price_display_condition of this Item.
        :type price_display_condition: str
        """

        self._price_display_condition = price_display_condition

    @property
    def primary_item_group(self):
        """Gets the primary_item_group of this Item.


        :return: The primary_item_group of this Item.
        :rtype: ItemGroupSummary
        """
        return self._primary_item_group

    @primary_item_group.setter
    def primary_item_group(self, primary_item_group):
        """Sets the primary_item_group of this Item.


        :param primary_item_group: The primary_item_group of this Item.
        :type primary_item_group: ItemGroupSummary
        """

        self._primary_item_group = primary_item_group

    @property
    def primary_product_review_rating(self):
        """Gets the primary_product_review_rating of this Item.


        :return: The primary_product_review_rating of this Item.
        :rtype: ReviewRating
        """
        return self._primary_product_review_rating

    @primary_product_review_rating.setter
    def primary_product_review_rating(self, primary_product_review_rating):
        """Sets the primary_product_review_rating of this Item.


        :param primary_product_review_rating: The primary_product_review_rating of this Item.
        :type primary_product_review_rating: ReviewRating
        """

        self._primary_product_review_rating = primary_product_review_rating

    @property
    def product(self):
        """Gets the product of this Item.


        :return: The product of this Item.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Item.


        :param product: The product of this Item.
        :type product: Product
        """

        self._product = product

    @property
    def product_fiche_web_url(self):
        """Gets the product_fiche_web_url of this Item.

        The URL of a page containing the manufacturer's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for all items with an EEK rating and is returned only if this information is available. The EEK rating of the item is returned in the energyEfficiencyClass field.

        :return: The product_fiche_web_url of this Item.
        :rtype: str
        """
        return self._product_fiche_web_url

    @product_fiche_web_url.setter
    def product_fiche_web_url(self, product_fiche_web_url):
        """Sets the product_fiche_web_url of this Item.

        The URL of a page containing the manufacturer's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for all items with an EEK rating and is returned only if this information is available. The EEK rating of the item is returned in the energyEfficiencyClass field.

        :param product_fiche_web_url: The product_fiche_web_url of this Item.
        :type product_fiche_web_url: str
        """

        self._product_fiche_web_url = product_fiche_web_url

    @property
    def qualified_programs(self):
        """Gets the qualified_programs of this Item.

        An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.

        :return: The qualified_programs of this Item.
        :rtype: List[str]
        """
        return self._qualified_programs

    @qualified_programs.setter
    def qualified_programs(self, qualified_programs):
        """Sets the qualified_programs of this Item.

        An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.

        :param qualified_programs: The qualified_programs of this Item.
        :type qualified_programs: List[str]
        """

        self._qualified_programs = qualified_programs

    @property
    def quantity_limit_per_buyer(self):
        """Gets the quantity_limit_per_buyer of this Item.

        The maximum number for a specific item that one buyer can purchase.

        :return: The quantity_limit_per_buyer of this Item.
        :rtype: int
        """
        return self._quantity_limit_per_buyer

    @quantity_limit_per_buyer.setter
    def quantity_limit_per_buyer(self, quantity_limit_per_buyer):
        """Sets the quantity_limit_per_buyer of this Item.

        The maximum number for a specific item that one buyer can purchase.

        :param quantity_limit_per_buyer: The quantity_limit_per_buyer of this Item.
        :type quantity_limit_per_buyer: int
        """

        self._quantity_limit_per_buyer = quantity_limit_per_buyer

    @property
    def reserve_price_met(self):
        """Gets the reserve_price_met of this Item.

        This indicates if the reserve price of the item has been met. A reserve price is set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not equal to or higher than the reserve price when the auction ends, the listing ends and the item is not sold. Note: This is returned only for auctions that have a reserve price.

        :return: The reserve_price_met of this Item.
        :rtype: bool
        """
        return self._reserve_price_met

    @reserve_price_met.setter
    def reserve_price_met(self, reserve_price_met):
        """Sets the reserve_price_met of this Item.

        This indicates if the reserve price of the item has been met. A reserve price is set by the seller and is the minimum amount the seller is willing to sell the item for. If the highest bid is not equal to or higher than the reserve price when the auction ends, the listing ends and the item is not sold. Note: This is returned only for auctions that have a reserve price.

        :param reserve_price_met: The reserve_price_met of this Item.
        :type reserve_price_met: bool
        """

        self._reserve_price_met = reserve_price_met

    @property
    def return_terms(self):
        """Gets the return_terms of this Item.


        :return: The return_terms of this Item.
        :rtype: ItemReturnTerms
        """
        return self._return_terms

    @return_terms.setter
    def return_terms(self, return_terms):
        """Sets the return_terms of this Item.


        :param return_terms: The return_terms of this Item.
        :type return_terms: ItemReturnTerms
        """

        self._return_terms = return_terms

    @property
    def seller(self):
        """Gets the seller of this Item.


        :return: The seller of this Item.
        :rtype: SellerDetail
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Item.


        :param seller: The seller of this Item.
        :type seller: SellerDetail
        """

        self._seller = seller

    @property
    def seller_item_revision(self):
        """Gets the seller_item_revision of this Item.

        An identifier generated/incremented when a seller revises the item. There are two types of item revisions: Seller changes, such as changing the title eBay system changes, such as changing the quantity when an item is purchased This ID is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.

        :return: The seller_item_revision of this Item.
        :rtype: str
        """
        return self._seller_item_revision

    @seller_item_revision.setter
    def seller_item_revision(self, seller_item_revision):
        """Sets the seller_item_revision of this Item.

        An identifier generated/incremented when a seller revises the item. There are two types of item revisions: Seller changes, such as changing the title eBay system changes, such as changing the quantity when an item is purchased This ID is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.

        :param seller_item_revision: The seller_item_revision of this Item.
        :type seller_item_revision: str
        """

        self._seller_item_revision = seller_item_revision

    @property
    def ship_to_locations(self):
        """Gets the ship_to_locations of this Item.


        :return: The ship_to_locations of this Item.
        :rtype: ShipToLocations
        """
        return self._ship_to_locations

    @ship_to_locations.setter
    def ship_to_locations(self, ship_to_locations):
        """Sets the ship_to_locations of this Item.


        :param ship_to_locations: The ship_to_locations of this Item.
        :type ship_to_locations: ShipToLocations
        """

        self._ship_to_locations = ship_to_locations

    @property
    def shipping_options(self):
        """Gets the shipping_options of this Item.

        An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.

        :return: The shipping_options of this Item.
        :rtype: List[ShippingOption]
        """
        return self._shipping_options

    @shipping_options.setter
    def shipping_options(self, shipping_options):
        """Sets the shipping_options of this Item.

        An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.

        :param shipping_options: The shipping_options of this Item.
        :type shipping_options: List[ShippingOption]
        """

        self._shipping_options = shipping_options

    @property
    def short_description(self):
        """Gets the short_description of this Item.

        This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).

        :return: The short_description of this Item.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Item.

        This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).

        :param short_description: The short_description of this Item.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def size(self):
        """Gets the size of this Item.

        (Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The size of this Item.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Item.

        (Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param size: The size of this Item.
        :type size: str
        """

        self._size = size

    @property
    def size_system(self):
        """Gets the size_system of this Item.

        (Primary Item Aspect) The sizing system of the country. All the item aspects, including this aspect, are returned in the localizedAspects container. Valid Values: AU (Australia), BR (Brazil), CN (China), DE (Germany), EU (European Union), FR (France), IT (Italy), JP (Japan), MX (Mexico), US (USA), UK (United Kingdom) Code so that your app gracefully handles any future changes to this list.

        :return: The size_system of this Item.
        :rtype: str
        """
        return self._size_system

    @size_system.setter
    def size_system(self, size_system):
        """Sets the size_system of this Item.

        (Primary Item Aspect) The sizing system of the country. All the item aspects, including this aspect, are returned in the localizedAspects container. Valid Values: AU (Australia), BR (Brazil), CN (China), DE (Germany), EU (European Union), FR (France), IT (Italy), JP (Japan), MX (Mexico), US (USA), UK (United Kingdom) Code so that your app gracefully handles any future changes to this list.

        :param size_system: The size_system of this Item.
        :type size_system: str
        """

        self._size_system = size_system

    @property
    def size_type(self):
        """Gets the size_type of this Item.

        (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :return: The size_type of this Item.
        :rtype: str
        """
        return self._size_type

    @size_type.setter
    def size_type(self, size_type):
        """Sets the size_type of this Item.

        (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the localizedAspects container.

        :param size_type: The size_type of this Item.
        :type size_type: str
        """

        self._size_type = size_type

    @property
    def subtitle(self):
        """Gets the subtitle of this Item.

        A subtitle is optional and allows the seller to provide more information about the product, possibly including keywords that may assist with search results.

        :return: The subtitle of this Item.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this Item.

        A subtitle is optional and allows the seller to provide more information about the product, possibly including keywords that may assist with search results.

        :param subtitle: The subtitle of this Item.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def taxes(self):
        """Gets the taxes of this Item.

        The container for the tax information for the item.

        :return: The taxes of this Item.
        :rtype: List[Taxes]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Item.

        The container for the tax information for the item.

        :param taxes: The taxes of this Item.
        :type taxes: List[Taxes]
        """

        self._taxes = taxes

    @property
    def title(self):
        """Gets the title of this Item.

        The seller-created title of the item. Maximum Length: 80 characters

        :return: The title of this Item.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Item.

        The seller-created title of the item. Maximum Length: 80 characters

        :param title: The title of this Item.
        :type title: str
        """

        self._title = title

    @property
    def top_rated_buying_experience(self):
        """Gets the top_rated_buying_experience of this Item.

        This indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item; a minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the Top Rated Plus Items and Becoming a Top Rated Seller and qualifying for Top Rated Plus help topics for more information.

        :return: The top_rated_buying_experience of this Item.
        :rtype: bool
        """
        return self._top_rated_buying_experience

    @top_rated_buying_experience.setter
    def top_rated_buying_experience(self, top_rated_buying_experience):
        """Sets the top_rated_buying_experience of this Item.

        This indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item; a minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the Top Rated Plus Items and Becoming a Top Rated Seller and qualifying for Top Rated Plus help topics for more information.

        :param top_rated_buying_experience: The top_rated_buying_experience of this Item.
        :type top_rated_buying_experience: bool
        """

        self._top_rated_buying_experience = top_rated_buying_experience

    @property
    def unique_bidder_count(self):
        """Gets the unique_bidder_count of this Item.

        This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.

        :return: The unique_bidder_count of this Item.
        :rtype: int
        """
        return self._unique_bidder_count

    @unique_bidder_count.setter
    def unique_bidder_count(self, unique_bidder_count):
        """Sets the unique_bidder_count of this Item.

        This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.

        :param unique_bidder_count: The unique_bidder_count of this Item.
        :type unique_bidder_count: int
        """

        self._unique_bidder_count = unique_bidder_count

    @property
    def unit_price(self):
        """Gets the unit_price of this Item.


        :return: The unit_price of this Item.
        :rtype: ConvertedAmount
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this Item.


        :param unit_price: The unit_price of this Item.
        :type unit_price: ConvertedAmount
        """

        self._unit_price = unit_price

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this Item.

        The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :return: The unit_pricing_measure of this Item.
        :rtype: str
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this Item.

        The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :param unit_pricing_measure: The unit_pricing_measure of this Item.
        :type unit_pricing_measure: str
        """

        self._unit_pricing_measure = unit_pricing_measure

    @property
    def warnings(self):
        """Gets the warnings of this Item.

        An array of warning messages. These types of errors do not prevent the method from executing but should be checked.

        :return: The warnings of this Item.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Item.

        An array of warning messages. These types of errors do not prevent the method from executing but should be checked.

        :param warnings: The warnings of this Item.
        :type warnings: List[Error]
        """

        self._warnings = warnings
