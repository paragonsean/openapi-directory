# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country: str=None, county: str=None, postal_code: str=None, state_or_province: str=None):
        """Address - a model defined in OpenAPI

        :param address_line1: The address_line1 of this Address.
        :param address_line2: The address_line2 of this Address.
        :param city: The city of this Address.
        :param country: The country of this Address.
        :param county: The county of this Address.
        :param postal_code: The postal_code of this Address.
        :param state_or_province: The state_or_province of this Address.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country': str,
            'county': str,
            'postal_code': str,
            'state_or_province': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country = country
        self._county = county
        self._postal_code = postal_code
        self._state_or_province = state_or_province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.

        The first line of the street address. Note: This is conditionally returned in the itemLocation field.

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        The first line of the street address. Note: This is conditionally returned in the itemLocation field.

        :param address_line1: The address_line1 of this Address.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.

        The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.

        :param address_line2: The address_line2 of this Address.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Address.

        The city of the address.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city of the address.

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this Address.

        The county of the address.

        :return: The county of this Address.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.

        The county of the address.

        :param county: The county of this Address.
        :type county: str
        """

        self._county = county

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        The postal code (or zip code in US) code of the address. Sellers set a postal code (or zip code in US) for items when they are listed. The postal code is used for calculating proximity searches. It is anonymized when returned in itemLocation.postalCode via the API.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code (or zip code in US) code of the address. Sellers set a postal code (or zip code in US) for items when they are listed. The postal code is used for calculating proximity searches. It is anonymized when returned in itemLocation.postalCode via the API.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this Address.

        The state or province of the address. Note: This is conditionally returned in the itemLocation field.

        :return: The state_or_province of this Address.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this Address.

        The state or province of the address. Note: This is conditionally returned in the itemLocation field.

        :param state_or_province: The state_or_province of this Address.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province
