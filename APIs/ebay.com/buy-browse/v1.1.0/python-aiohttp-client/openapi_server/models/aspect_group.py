# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aspect import Aspect
from openapi_server import util


class AspectGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspects: List[Aspect]=None, localized_group_name: str=None):
        """AspectGroup - a model defined in OpenAPI

        :param aspects: The aspects of this AspectGroup.
        :param localized_group_name: The localized_group_name of this AspectGroup.
        """
        self.openapi_types = {
            'aspects': List[Aspect],
            'localized_group_name': str
        }

        self.attribute_map = {
            'aspects': 'aspects',
            'localized_group_name': 'localizedGroupName'
        }

        self._aspects = aspects
        self._localized_group_name = localized_group_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AspectGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AspectGroup of this AspectGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspects(self):
        """Gets the aspects of this AspectGroup.

        An array of the name/value pairs for the aspects of the product. For example: BRAND/Apple

        :return: The aspects of this AspectGroup.
        :rtype: List[Aspect]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this AspectGroup.

        An array of the name/value pairs for the aspects of the product. For example: BRAND/Apple

        :param aspects: The aspects of this AspectGroup.
        :type aspects: List[Aspect]
        """

        self._aspects = aspects

    @property
    def localized_group_name(self):
        """Gets the localized_group_name of this AspectGroup.

        The name of a group of aspects. In the following example, Product Identifiers and Process are product aspect group names. Under the group name are the product aspect name/value pairs. Product Identifiers &nbsp;&nbsp;&nbsp;Brand/Apple &nbsp;&nbsp;&nbsp;Product Family/iMac Processor &nbsp;&nbsp;&nbsp;Processor Type/Intel &nbsp;&nbsp;&nbsp;Processor Speed/3.10

        :return: The localized_group_name of this AspectGroup.
        :rtype: str
        """
        return self._localized_group_name

    @localized_group_name.setter
    def localized_group_name(self, localized_group_name):
        """Sets the localized_group_name of this AspectGroup.

        The name of a group of aspects. In the following example, Product Identifiers and Process are product aspect group names. Under the group name are the product aspect name/value pairs. Product Identifiers &nbsp;&nbsp;&nbsp;Brand/Apple &nbsp;&nbsp;&nbsp;Product Family/iMac Processor &nbsp;&nbsp;&nbsp;Processor Type/Intel &nbsp;&nbsp;&nbsp;Processor Speed/3.10

        :param localized_group_name: The localized_group_name of this AspectGroup.
        :type localized_group_name: str
        """

        self._localized_group_name = localized_group_name
