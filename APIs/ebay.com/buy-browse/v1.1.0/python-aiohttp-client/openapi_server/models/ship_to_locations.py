# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ship_to_region import ShipToRegion
from openapi_server import util


class ShipToLocations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region_excluded: List[ShipToRegion]=None, region_included: List[ShipToRegion]=None):
        """ShipToLocations - a model defined in OpenAPI

        :param region_excluded: The region_excluded of this ShipToLocations.
        :param region_included: The region_included of this ShipToLocations.
        """
        self.openapi_types = {
            'region_excluded': List[ShipToRegion],
            'region_included': List[ShipToRegion]
        }

        self.attribute_map = {
            'region_excluded': 'regionExcluded',
            'region_included': 'regionIncluded'
        }

        self._region_excluded = region_excluded
        self._region_included = region_included

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShipToLocations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShipToLocations of this ShipToLocations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_excluded(self):
        """Gets the region_excluded of this ShipToLocations.

        An array of containers that express the large geographical regions, countries, state/provinces, or special locations within a country where the seller is not willing to ship to.

        :return: The region_excluded of this ShipToLocations.
        :rtype: List[ShipToRegion]
        """
        return self._region_excluded

    @region_excluded.setter
    def region_excluded(self, region_excluded):
        """Sets the region_excluded of this ShipToLocations.

        An array of containers that express the large geographical regions, countries, state/provinces, or special locations within a country where the seller is not willing to ship to.

        :param region_excluded: The region_excluded of this ShipToLocations.
        :type region_excluded: List[ShipToRegion]
        """

        self._region_excluded = region_excluded

    @property
    def region_included(self):
        """Gets the region_included of this ShipToLocations.

        An array of containers that express the large geographical regions, countries, or state/provinces within a country where the seller is willing to ship to. Prospective buyers must look at the shipping regions under this container, as well as the shipping regions that are under the regionExcluded to see where the seller is willing to ship items. Sellers can specify that they ship 'Worldwide', but then add several large geographical regions (e.g. Asia, Oceania, Middle East) to the exclusion list, or sellers can specify that they ship to Europe and Africa, but then add several individual countries to the exclusion list.

        :return: The region_included of this ShipToLocations.
        :rtype: List[ShipToRegion]
        """
        return self._region_included

    @region_included.setter
    def region_included(self, region_included):
        """Sets the region_included of this ShipToLocations.

        An array of containers that express the large geographical regions, countries, or state/provinces within a country where the seller is willing to ship to. Prospective buyers must look at the shipping regions under this container, as well as the shipping regions that are under the regionExcluded to see where the seller is willing to ship items. Sellers can specify that they ship 'Worldwide', but then add several large geographical regions (e.g. Asia, Oceania, Middle East) to the exclusion list, or sellers can specify that they ship to Europe and Africa, but then add several individual countries to the exclusion list.

        :param region_included: The region_included of this ShipToLocations.
        :type region_included: List[ShipToRegion]
        """

        self._region_included = region_included
