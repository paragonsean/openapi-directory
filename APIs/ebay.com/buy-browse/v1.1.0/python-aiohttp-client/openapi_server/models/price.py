# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, converted_from_currency: str=None, converted_from_value: str=None, currency: str=None, value: str=None):
        """Price - a model defined in OpenAPI

        :param converted_from_currency: The converted_from_currency of this Price.
        :param converted_from_value: The converted_from_value of this Price.
        :param currency: The currency of this Price.
        :param value: The value of this Price.
        """
        self.openapi_types = {
            'converted_from_currency': str,
            'converted_from_value': str,
            'currency': str,
            'value': str
        }

        self.attribute_map = {
            'converted_from_currency': 'convertedFromCurrency',
            'converted_from_value': 'convertedFromValue',
            'currency': 'currency',
            'value': 'value'
        }

        self._converted_from_currency = converted_from_currency
        self._converted_from_value = converted_from_value
        self._currency = currency
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def converted_from_currency(self):
        """Gets the converted_from_currency of this Price.

        The three-letter ISO 4217 code representing the currency of the amount in the convertedFromValue field. This value is the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :return: The converted_from_currency of this Price.
        :rtype: str
        """
        return self._converted_from_currency

    @converted_from_currency.setter
    def converted_from_currency(self, converted_from_currency):
        """Sets the converted_from_currency of this Price.

        The three-letter ISO 4217 code representing the currency of the amount in the convertedFromValue field. This value is the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :param converted_from_currency: The converted_from_currency of this Price.
        :type converted_from_currency: str
        """

        self._converted_from_currency = converted_from_currency

    @property
    def converted_from_value(self):
        """Gets the converted_from_value of this Price.

        The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is the pre-conversion amount. The value field contains the converted amount of this value, in the currency specified by the currency field.

        :return: The converted_from_value of this Price.
        :rtype: str
        """
        return self._converted_from_value

    @converted_from_value.setter
    def converted_from_value(self, converted_from_value):
        """Sets the converted_from_value of this Price.

        The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is the pre-conversion amount. The value field contains the converted amount of this value, in the currency specified by the currency field.

        :param converted_from_value: The converted_from_value of this Price.
        :type converted_from_value: str
        """

        self._converted_from_value = converted_from_value

    @property
    def currency(self):
        """Gets the currency of this Price.

        The three-letter ISO 4217 code representing the currency of the amount in the value field. If currency conversion/localization was performed, this is the post-conversion currency of the amount in the value field. Default: The currency of the user's country. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :return: The currency of this Price.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Price.

        The three-letter ISO 4217 code representing the currency of the amount in the value field. If currency conversion/localization was performed, this is the post-conversion currency of the amount in the value field. Default: The currency of the user's country. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CurrencyCodeEnum'>eBay API documentation</a>

        :param currency: The currency of this Price.
        :type currency: str
        """

        self._currency = currency

    @property
    def value(self):
        """Gets the value of this Price.

        The amount of the currency specified in the currency field. The value of currency defaults to the standard currency used by the country of the eBay site offering the item. If currency conversion/localization was performed, this is the post-conversion amount. Default: The currency of the user's country.

        :return: The value of this Price.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Price.

        The amount of the currency specified in the currency field. The value of currency defaults to the standard currency used by the country of the eBay site offering the item. If currency conversion/localization was performed, this is the post-conversion amount. Default: The currency of the user's country.

        :param value: The value of this Price.
        :type value: str
        """

        self._value = value
