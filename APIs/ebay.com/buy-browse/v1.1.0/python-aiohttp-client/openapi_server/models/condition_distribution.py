# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None, condition_id: str=None, match_count: int=None, refinement_href: str=None):
        """ConditionDistribution - a model defined in OpenAPI

        :param condition: The condition of this ConditionDistribution.
        :param condition_id: The condition_id of this ConditionDistribution.
        :param match_count: The match_count of this ConditionDistribution.
        :param refinement_href: The refinement_href of this ConditionDistribution.
        """
        self.openapi_types = {
            'condition': str,
            'condition_id': str,
            'match_count': int,
            'refinement_href': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'condition_id': 'conditionId',
            'match_count': 'matchCount',
            'refinement_href': 'refinementHref'
        }

        self._condition = condition
        self._condition_id = condition_id
        self._match_count = match_count
        self._refinement_href = refinement_href

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionDistribution of this ConditionDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this ConditionDistribution.

        The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition of this ConditionDistribution.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ConditionDistribution.

        The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition: The condition of this ConditionDistribution.
        :type condition: str
        """

        self._condition = condition

    @property
    def condition_id(self):
        """Gets the condition_id of this ConditionDistribution.

        The identifier of the condition. For example, 1000 is the identifier for NEW. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition_id of this ConditionDistribution.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this ConditionDistribution.

        The identifier of the condition. For example, 1000 is the identifier for NEW. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition_id: The condition_id of this ConditionDistribution.
        :type condition_id: str
        """

        self._condition_id = condition_id

    @property
    def match_count(self):
        """Gets the match_count of this ConditionDistribution.

        The number of items having the condition.

        :return: The match_count of this ConditionDistribution.
        :rtype: int
        """
        return self._match_count

    @match_count.setter
    def match_count(self, match_count):
        """Sets the match_count of this ConditionDistribution.

        The number of items having the condition.

        :param match_count: The match_count of this ConditionDistribution.
        :type match_count: int
        """

        self._match_count = match_count

    @property
    def refinement_href(self):
        """Gets the refinement_href of this ConditionDistribution.

        The HATEOAS reference of this condition.

        :return: The refinement_href of this ConditionDistribution.
        :rtype: str
        """
        return self._refinement_href

    @refinement_href.setter
    def refinement_href(self, refinement_href):
        """Sets the refinement_href of this ConditionDistribution.

        The HATEOAS reference of this condition.

        :param refinement_href: The refinement_href of this ConditionDistribution.
        :type refinement_href: str
        """

        self._refinement_href = refinement_href
