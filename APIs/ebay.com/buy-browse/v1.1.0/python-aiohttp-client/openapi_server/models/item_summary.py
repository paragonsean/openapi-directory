# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server.models.compatibility_property import CompatibilityProperty
from openapi_server.models.converted_amount import ConvertedAmount
from openapi_server.models.image import Image
from openapi_server.models.item_location_impl import ItemLocationImpl
from openapi_server.models.marketing_price import MarketingPrice
from openapi_server.models.pickup_option_summary import PickupOptionSummary
from openapi_server.models.seller import Seller
from openapi_server.models.shipping_option_summary import ShippingOptionSummary
from openapi_server.models.target_location import TargetLocation
from openapi_server import util


class ItemSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_images: List[Image]=None, adult_only: bool=None, available_coupons: bool=None, bid_count: int=None, buying_options: List[str]=None, categories: List[Category]=None, compatibility_match: str=None, compatibility_properties: List[CompatibilityProperty]=None, condition: str=None, condition_id: str=None, current_bid_price: ConvertedAmount=None, distance_from_pickup_location: TargetLocation=None, energy_efficiency_class: str=None, epid: str=None, image: Image=None, item_affiliate_web_url: str=None, item_group_href: str=None, item_group_type: str=None, item_href: str=None, item_id: str=None, item_location: ItemLocationImpl=None, item_web_url: str=None, legacy_item_id: str=None, marketing_price: MarketingPrice=None, pickup_options: List[PickupOptionSummary]=None, price: ConvertedAmount=None, price_display_condition: str=None, qualified_programs: List[str]=None, seller: Seller=None, shipping_options: List[ShippingOptionSummary]=None, short_description: str=None, thumbnail_images: List[Image]=None, title: str=None, unit_price: ConvertedAmount=None, unit_pricing_measure: str=None):
        """ItemSummary - a model defined in OpenAPI

        :param additional_images: The additional_images of this ItemSummary.
        :param adult_only: The adult_only of this ItemSummary.
        :param available_coupons: The available_coupons of this ItemSummary.
        :param bid_count: The bid_count of this ItemSummary.
        :param buying_options: The buying_options of this ItemSummary.
        :param categories: The categories of this ItemSummary.
        :param compatibility_match: The compatibility_match of this ItemSummary.
        :param compatibility_properties: The compatibility_properties of this ItemSummary.
        :param condition: The condition of this ItemSummary.
        :param condition_id: The condition_id of this ItemSummary.
        :param current_bid_price: The current_bid_price of this ItemSummary.
        :param distance_from_pickup_location: The distance_from_pickup_location of this ItemSummary.
        :param energy_efficiency_class: The energy_efficiency_class of this ItemSummary.
        :param epid: The epid of this ItemSummary.
        :param image: The image of this ItemSummary.
        :param item_affiliate_web_url: The item_affiliate_web_url of this ItemSummary.
        :param item_group_href: The item_group_href of this ItemSummary.
        :param item_group_type: The item_group_type of this ItemSummary.
        :param item_href: The item_href of this ItemSummary.
        :param item_id: The item_id of this ItemSummary.
        :param item_location: The item_location of this ItemSummary.
        :param item_web_url: The item_web_url of this ItemSummary.
        :param legacy_item_id: The legacy_item_id of this ItemSummary.
        :param marketing_price: The marketing_price of this ItemSummary.
        :param pickup_options: The pickup_options of this ItemSummary.
        :param price: The price of this ItemSummary.
        :param price_display_condition: The price_display_condition of this ItemSummary.
        :param qualified_programs: The qualified_programs of this ItemSummary.
        :param seller: The seller of this ItemSummary.
        :param shipping_options: The shipping_options of this ItemSummary.
        :param short_description: The short_description of this ItemSummary.
        :param thumbnail_images: The thumbnail_images of this ItemSummary.
        :param title: The title of this ItemSummary.
        :param unit_price: The unit_price of this ItemSummary.
        :param unit_pricing_measure: The unit_pricing_measure of this ItemSummary.
        """
        self.openapi_types = {
            'additional_images': List[Image],
            'adult_only': bool,
            'available_coupons': bool,
            'bid_count': int,
            'buying_options': List[str],
            'categories': List[Category],
            'compatibility_match': str,
            'compatibility_properties': List[CompatibilityProperty],
            'condition': str,
            'condition_id': str,
            'current_bid_price': ConvertedAmount,
            'distance_from_pickup_location': TargetLocation,
            'energy_efficiency_class': str,
            'epid': str,
            'image': Image,
            'item_affiliate_web_url': str,
            'item_group_href': str,
            'item_group_type': str,
            'item_href': str,
            'item_id': str,
            'item_location': ItemLocationImpl,
            'item_web_url': str,
            'legacy_item_id': str,
            'marketing_price': MarketingPrice,
            'pickup_options': List[PickupOptionSummary],
            'price': ConvertedAmount,
            'price_display_condition': str,
            'qualified_programs': List[str],
            'seller': Seller,
            'shipping_options': List[ShippingOptionSummary],
            'short_description': str,
            'thumbnail_images': List[Image],
            'title': str,
            'unit_price': ConvertedAmount,
            'unit_pricing_measure': str
        }

        self.attribute_map = {
            'additional_images': 'additionalImages',
            'adult_only': 'adultOnly',
            'available_coupons': 'availableCoupons',
            'bid_count': 'bidCount',
            'buying_options': 'buyingOptions',
            'categories': 'categories',
            'compatibility_match': 'compatibilityMatch',
            'compatibility_properties': 'compatibilityProperties',
            'condition': 'condition',
            'condition_id': 'conditionId',
            'current_bid_price': 'currentBidPrice',
            'distance_from_pickup_location': 'distanceFromPickupLocation',
            'energy_efficiency_class': 'energyEfficiencyClass',
            'epid': 'epid',
            'image': 'image',
            'item_affiliate_web_url': 'itemAffiliateWebUrl',
            'item_group_href': 'itemGroupHref',
            'item_group_type': 'itemGroupType',
            'item_href': 'itemHref',
            'item_id': 'itemId',
            'item_location': 'itemLocation',
            'item_web_url': 'itemWebUrl',
            'legacy_item_id': 'legacyItemId',
            'marketing_price': 'marketingPrice',
            'pickup_options': 'pickupOptions',
            'price': 'price',
            'price_display_condition': 'priceDisplayCondition',
            'qualified_programs': 'qualifiedPrograms',
            'seller': 'seller',
            'shipping_options': 'shippingOptions',
            'short_description': 'shortDescription',
            'thumbnail_images': 'thumbnailImages',
            'title': 'title',
            'unit_price': 'unitPrice',
            'unit_pricing_measure': 'unitPricingMeasure'
        }

        self._additional_images = additional_images
        self._adult_only = adult_only
        self._available_coupons = available_coupons
        self._bid_count = bid_count
        self._buying_options = buying_options
        self._categories = categories
        self._compatibility_match = compatibility_match
        self._compatibility_properties = compatibility_properties
        self._condition = condition
        self._condition_id = condition_id
        self._current_bid_price = current_bid_price
        self._distance_from_pickup_location = distance_from_pickup_location
        self._energy_efficiency_class = energy_efficiency_class
        self._epid = epid
        self._image = image
        self._item_affiliate_web_url = item_affiliate_web_url
        self._item_group_href = item_group_href
        self._item_group_type = item_group_type
        self._item_href = item_href
        self._item_id = item_id
        self._item_location = item_location
        self._item_web_url = item_web_url
        self._legacy_item_id = legacy_item_id
        self._marketing_price = marketing_price
        self._pickup_options = pickup_options
        self._price = price
        self._price_display_condition = price_display_condition
        self._qualified_programs = qualified_programs
        self._seller = seller
        self._shipping_options = shipping_options
        self._short_description = short_description
        self._thumbnail_images = thumbnail_images
        self._title = title
        self._unit_price = unit_price
        self._unit_pricing_measure = unit_pricing_measure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemSummary of this ItemSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_images(self):
        """Gets the additional_images of this ItemSummary.

        An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.

        :return: The additional_images of this ItemSummary.
        :rtype: List[Image]
        """
        return self._additional_images

    @additional_images.setter
    def additional_images(self, additional_images):
        """Sets the additional_images of this ItemSummary.

        An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.

        :param additional_images: The additional_images of this ItemSummary.
        :type additional_images: List[Image]
        """

        self._additional_images = additional_images

    @property
    def adult_only(self):
        """Gets the adult_only of this ItemSummary.

        This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.

        :return: The adult_only of this ItemSummary.
        :rtype: bool
        """
        return self._adult_only

    @adult_only.setter
    def adult_only(self, adult_only):
        """Sets the adult_only of this ItemSummary.

        This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.

        :param adult_only: The adult_only of this ItemSummary.
        :type adult_only: bool
        """

        self._adult_only = adult_only

    @property
    def available_coupons(self):
        """Gets the available_coupons of this ItemSummary.

        This boolean attribute indicates if coupons are available for the item.

        :return: The available_coupons of this ItemSummary.
        :rtype: bool
        """
        return self._available_coupons

    @available_coupons.setter
    def available_coupons(self, available_coupons):
        """Sets the available_coupons of this ItemSummary.

        This boolean attribute indicates if coupons are available for the item.

        :param available_coupons: The available_coupons of this ItemSummary.
        :type available_coupons: bool
        """

        self._available_coupons = available_coupons

    @property
    def bid_count(self):
        """Gets the bid_count of this ItemSummary.

        This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.

        :return: The bid_count of this ItemSummary.
        :rtype: int
        """
        return self._bid_count

    @bid_count.setter
    def bid_count(self, bid_count):
        """Sets the bid_count of this ItemSummary.

        This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.

        :param bid_count: The bid_count of this ItemSummary.
        :type bid_count: int
        """

        self._bid_count = bid_count

    @property
    def buying_options(self):
        """Gets the buying_options of this ItemSummary.

        A comma separated list of all the purchase options available for the item. Values Returned: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Items where the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For details about Best Offer, see Best Offer. Code so that your app gracefully handles any future changes to this list.

        :return: The buying_options of this ItemSummary.
        :rtype: List[str]
        """
        return self._buying_options

    @buying_options.setter
    def buying_options(self, buying_options):
        """Sets the buying_options of this ItemSummary.

        A comma separated list of all the purchase options available for the item. Values Returned: FIXED_PRICE - Indicates the buyer can purchase the item for a set price using the Buy It Now button. AUCTION - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item. BEST_OFFER - Items where the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For details about Best Offer, see Best Offer. Code so that your app gracefully handles any future changes to this list.

        :param buying_options: The buying_options of this ItemSummary.
        :type buying_options: List[str]
        """

        self._buying_options = buying_options

    @property
    def categories(self):
        """Gets the categories of this ItemSummary.

        This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).

        :return: The categories of this ItemSummary.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ItemSummary.

        This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).

        :param categories: The categories of this ItemSummary.
        :type categories: List[Category]
        """

        self._categories = categories

    @property
    def compatibility_match(self):
        """Gets the compatibility_match of this ItemSummary.

        This indicates how well the item matches the compatibility_filter product attributes. Valid Values: EXACT or POSSIBLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>

        :return: The compatibility_match of this ItemSummary.
        :rtype: str
        """
        return self._compatibility_match

    @compatibility_match.setter
    def compatibility_match(self, compatibility_match):
        """Sets the compatibility_match of this ItemSummary.

        This indicates how well the item matches the compatibility_filter product attributes. Valid Values: EXACT or POSSIBLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>

        :param compatibility_match: The compatibility_match of this ItemSummary.
        :type compatibility_match: str
        """

        self._compatibility_match = compatibility_match

    @property
    def compatibility_properties(self):
        """Gets the compatibility_properties of this ItemSummary.

        This container returns only the product attributes that are compatible with the item. These attributes were specified in the compatibility_filter in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.

        :return: The compatibility_properties of this ItemSummary.
        :rtype: List[CompatibilityProperty]
        """
        return self._compatibility_properties

    @compatibility_properties.setter
    def compatibility_properties(self, compatibility_properties):
        """Sets the compatibility_properties of this ItemSummary.

        This container returns only the product attributes that are compatible with the item. These attributes were specified in the compatibility_filter in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.

        :param compatibility_properties: The compatibility_properties of this ItemSummary.
        :type compatibility_properties: List[CompatibilityProperty]
        """

        self._compatibility_properties = compatibility_properties

    @property
    def condition(self):
        """Gets the condition of this ItemSummary.

        The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition of this ItemSummary.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ItemSummary.

        The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition: The condition of this ItemSummary.
        :type condition: str
        """

        self._condition = condition

    @property
    def condition_id(self):
        """Gets the condition_id of this ItemSummary.

        The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :return: The condition_id of this ItemSummary.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this ItemSummary.

        The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list. Note: In the US and Australian marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', but this item condition is only available for use for a select number of US and Australian sellers. For all other marketplaces besides the US and Australia, Condition ID 2000 still maps to 'Manufacturer Refurbished'.

        :param condition_id: The condition_id of this ItemSummary.
        :type condition_id: str
        """

        self._condition_id = condition_id

    @property
    def current_bid_price(self):
        """Gets the current_bid_price of this ItemSummary.


        :return: The current_bid_price of this ItemSummary.
        :rtype: ConvertedAmount
        """
        return self._current_bid_price

    @current_bid_price.setter
    def current_bid_price(self, current_bid_price):
        """Sets the current_bid_price of this ItemSummary.


        :param current_bid_price: The current_bid_price of this ItemSummary.
        :type current_bid_price: ConvertedAmount
        """

        self._current_bid_price = current_bid_price

    @property
    def distance_from_pickup_location(self):
        """Gets the distance_from_pickup_location of this ItemSummary.


        :return: The distance_from_pickup_location of this ItemSummary.
        :rtype: TargetLocation
        """
        return self._distance_from_pickup_location

    @distance_from_pickup_location.setter
    def distance_from_pickup_location(self, distance_from_pickup_location):
        """Sets the distance_from_pickup_location of this ItemSummary.


        :param distance_from_pickup_location: The distance_from_pickup_location of this ItemSummary.
        :type distance_from_pickup_location: TargetLocation
        """

        self._distance_from_pickup_location = distance_from_pickup_location

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this ItemSummary.

        This indicates the European energy efficiency rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.

        :return: The energy_efficiency_class of this ItemSummary.
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this ItemSummary.

        This indicates the European energy efficiency rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.

        :param energy_efficiency_class: The energy_efficiency_class of this ItemSummary.
        :type energy_efficiency_class: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def epid(self):
        """Gets the epid of this ItemSummary.

        An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.

        :return: The epid of this ItemSummary.
        :rtype: str
        """
        return self._epid

    @epid.setter
    def epid(self, epid):
        """Sets the epid of this ItemSummary.

        An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.

        :param epid: The epid of this ItemSummary.
        :type epid: str
        """

        self._epid = epid

    @property
    def image(self):
        """Gets the image of this ItemSummary.


        :return: The image of this ItemSummary.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ItemSummary.


        :param image: The image of this ItemSummary.
        :type image: Image
        """

        self._image = image

    @property
    def item_affiliate_web_url(self):
        """Gets the item_affiliate_web_url of this ItemSummary.

        The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to receive a commission for your sales, you must use this URL to forward your buyer to the ebay.com site.

        :return: The item_affiliate_web_url of this ItemSummary.
        :rtype: str
        """
        return self._item_affiliate_web_url

    @item_affiliate_web_url.setter
    def item_affiliate_web_url(self, item_affiliate_web_url):
        """Sets the item_affiliate_web_url of this ItemSummary.

        The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method. Note: eBay Partner Network, in order to receive a commission for your sales, you must use this URL to forward your buyer to the ebay.com site.

        :param item_affiliate_web_url: The item_affiliate_web_url of this ItemSummary.
        :type item_affiliate_web_url: str
        """

        self._item_affiliate_web_url = item_affiliate_web_url

    @property
    def item_group_href(self):
        """Gets the item_group_href of this ItemSummary.

        The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.

        :return: The item_group_href of this ItemSummary.
        :rtype: str
        """
        return self._item_group_href

    @item_group_href.setter
    def item_group_href(self, item_group_href):
        """Sets the item_group_href of this ItemSummary.

        The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.

        :param item_group_href: The item_group_href of this ItemSummary.
        :type item_group_href: str
        """

        self._item_group_href = item_group_href

    @property
    def item_group_type(self):
        """Gets the item_group_type of this ItemSummary.

        The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only the SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.

        :return: The item_group_type of this ItemSummary.
        :rtype: str
        """
        return self._item_group_type

    @item_group_type.setter
    def item_group_type(self, item_group_type):
        """Sets the item_group_type of this ItemSummary.

        The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only the SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.

        :param item_group_type: The item_group_type of this ItemSummary.
        :type item_group_type: str
        """

        self._item_group_type = item_group_type

    @property
    def item_href(self):
        """Gets the item_href of this ItemSummary.

        The URI for the Browse API getItem method, which can be used to retrieve more details about items in the search results.

        :return: The item_href of this ItemSummary.
        :rtype: str
        """
        return self._item_href

    @item_href.setter
    def item_href(self, item_href):
        """Sets the item_href of this ItemSummary.

        The URI for the Browse API getItem method, which can be used to retrieve more details about items in the search results.

        :param item_href: The item_href of this ItemSummary.
        :type item_href: str
        """

        self._item_href = item_href

    @property
    def item_id(self):
        """Gets the item_id of this ItemSummary.

        The unique RESTful identifier of the item.

        :return: The item_id of this ItemSummary.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ItemSummary.

        The unique RESTful identifier of the item.

        :param item_id: The item_id of this ItemSummary.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_location(self):
        """Gets the item_location of this ItemSummary.


        :return: The item_location of this ItemSummary.
        :rtype: ItemLocationImpl
        """
        return self._item_location

    @item_location.setter
    def item_location(self, item_location):
        """Sets the item_location of this ItemSummary.


        :param item_location: The item_location of this ItemSummary.
        :type item_location: ItemLocationImpl
        """

        self._item_location = item_location

    @property
    def item_web_url(self):
        """Gets the item_web_url of this ItemSummary.

        The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.

        :return: The item_web_url of this ItemSummary.
        :rtype: str
        """
        return self._item_web_url

    @item_web_url.setter
    def item_web_url(self, item_web_url):
        """Sets the item_web_url of this ItemSummary.

        The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.

        :param item_web_url: The item_web_url of this ItemSummary.
        :type item_web_url: str
        """

        self._item_web_url = item_web_url

    @property
    def legacy_item_id(self):
        """Gets the legacy_item_id of this ItemSummary.

        The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.

        :return: The legacy_item_id of this ItemSummary.
        :rtype: str
        """
        return self._legacy_item_id

    @legacy_item_id.setter
    def legacy_item_id(self, legacy_item_id):
        """Sets the legacy_item_id of this ItemSummary.

        The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.

        :param legacy_item_id: The legacy_item_id of this ItemSummary.
        :type legacy_item_id: str
        """

        self._legacy_item_id = legacy_item_id

    @property
    def marketing_price(self):
        """Gets the marketing_price of this ItemSummary.


        :return: The marketing_price of this ItemSummary.
        :rtype: MarketingPrice
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this ItemSummary.


        :param marketing_price: The marketing_price of this ItemSummary.
        :type marketing_price: MarketingPrice
        """

        self._marketing_price = marketing_price

    @property
    def pickup_options(self):
        """Gets the pickup_options of this ItemSummary.

        This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.

        :return: The pickup_options of this ItemSummary.
        :rtype: List[PickupOptionSummary]
        """
        return self._pickup_options

    @pickup_options.setter
    def pickup_options(self, pickup_options):
        """Sets the pickup_options of this ItemSummary.

        This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.

        :param pickup_options: The pickup_options of this ItemSummary.
        :type pickup_options: List[PickupOptionSummary]
        """

        self._pickup_options = pickup_options

    @property
    def price(self):
        """Gets the price of this ItemSummary.


        :return: The price of this ItemSummary.
        :rtype: ConvertedAmount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ItemSummary.


        :param price: The price of this ItemSummary.
        :type price: ConvertedAmount
        """

        self._price = price

    @property
    def price_display_condition(self):
        """Gets the price_display_condition of this ItemSummary.

        Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>

        :return: The price_display_condition of this ItemSummary.
        :rtype: str
        """
        return self._price_display_condition

    @price_display_condition.setter
    def price_display_condition(self, price_display_condition):
        """Sets the price_display_condition of this ItemSummary.

        Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>

        :param price_display_condition: The price_display_condition of this ItemSummary.
        :type price_display_condition: str
        """

        self._price_display_condition = price_display_condition

    @property
    def qualified_programs(self):
        """Gets the qualified_programs of this ItemSummary.

        An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.

        :return: The qualified_programs of this ItemSummary.
        :rtype: List[str]
        """
        return self._qualified_programs

    @qualified_programs.setter
    def qualified_programs(self, qualified_programs):
        """Sets the qualified_programs of this ItemSummary.

        An array of the qualified programs available for the item, such as EBAY_PLUS. eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items. Note: eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.

        :param qualified_programs: The qualified_programs of this ItemSummary.
        :type qualified_programs: List[str]
        """

        self._qualified_programs = qualified_programs

    @property
    def seller(self):
        """Gets the seller of this ItemSummary.


        :return: The seller of this ItemSummary.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this ItemSummary.


        :param seller: The seller of this ItemSummary.
        :type seller: Seller
        """

        self._seller = seller

    @property
    def shipping_options(self):
        """Gets the shipping_options of this ItemSummary.

        This container returns the shipping options available to ship the item.

        :return: The shipping_options of this ItemSummary.
        :rtype: List[ShippingOptionSummary]
        """
        return self._shipping_options

    @shipping_options.setter
    def shipping_options(self, shipping_options):
        """Sets the shipping_options of this ItemSummary.

        This container returns the shipping options available to ship the item.

        :param shipping_options: The shipping_options of this ItemSummary.
        :type shipping_options: List[ShippingOptionSummary]
        """

        self._shipping_options = shipping_options

    @property
    def short_description(self):
        """Gets the short_description of this ItemSummary.

        This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is too big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot; title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned by the search method only when fieldgroups = EXTENDED.

        :return: The short_description of this ItemSummary.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ItemSummary.

        This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is too big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot; title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned by the search method only when fieldgroups = EXTENDED.

        :param short_description: The short_description of this ItemSummary.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def thumbnail_images(self):
        """Gets the thumbnail_images of this ItemSummary.

        An array of thumbnail images for the item.

        :return: The thumbnail_images of this ItemSummary.
        :rtype: List[Image]
        """
        return self._thumbnail_images

    @thumbnail_images.setter
    def thumbnail_images(self, thumbnail_images):
        """Sets the thumbnail_images of this ItemSummary.

        An array of thumbnail images for the item.

        :param thumbnail_images: The thumbnail_images of this ItemSummary.
        :type thumbnail_images: List[Image]
        """

        self._thumbnail_images = thumbnail_images

    @property
    def title(self):
        """Gets the title of this ItemSummary.

        The seller-created title of the item. Maximum Length: 80 characters

        :return: The title of this ItemSummary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemSummary.

        The seller-created title of the item. Maximum Length: 80 characters

        :param title: The title of this ItemSummary.
        :type title: str
        """

        self._title = title

    @property
    def unit_price(self):
        """Gets the unit_price of this ItemSummary.


        :return: The unit_price of this ItemSummary.
        :rtype: ConvertedAmount
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ItemSummary.


        :param unit_price: The unit_price of this ItemSummary.
        :type unit_price: ConvertedAmount
        """

        self._unit_price = unit_price

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this ItemSummary.

        The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :return: The unit_pricing_measure of this ItemSummary.
        :rtype: str
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this ItemSummary.

        The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;

        :param unit_pricing_measure: The unit_pricing_measure of this ItemSummary.
        :type unit_pricing_measure: str
        """

        self._unit_pricing_measure = unit_pricing_measure
