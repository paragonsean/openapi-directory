# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unit_of_measure: str=None, value: str=None):
        """TargetLocation - a model defined in OpenAPI

        :param unit_of_measure: The unit_of_measure of this TargetLocation.
        :param value: The value of this TargetLocation.
        """
        self.openapi_types = {
            'unit_of_measure': str,
            'value': str
        }

        self.attribute_map = {
            'unit_of_measure': 'unitOfMeasure',
            'value': 'value'
        }

        self._unit_of_measure = unit_of_measure
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetLocation of this TargetLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this TargetLocation.

        This value shows the unit of measurement used to measure the distance between the location of the item and the buyer's location. This value is typically mi or km.

        :return: The unit_of_measure of this TargetLocation.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this TargetLocation.

        This value shows the unit of measurement used to measure the distance between the location of the item and the buyer's location. This value is typically mi or km.

        :param unit_of_measure: The unit_of_measure of this TargetLocation.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def value(self):
        """Gets the value of this TargetLocation.

        This value indicates the distance (measured in the measurement unit in the unitOfMeasure field) between the item location and the buyer's location.

        :return: The value of this TargetLocation.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TargetLocation.

        This value indicates the distance (measured in the measurement unit in the unitOfMeasure field) between the item location and the buyer's location.

        :param value: The value of this TargetLocation.
        :type value: str
        """

        self._value = value
