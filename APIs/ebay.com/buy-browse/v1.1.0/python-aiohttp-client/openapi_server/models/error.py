# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_parameter import ErrorParameter
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, domain: str=None, error_id: int=None, input_ref_ids: List[str]=None, long_message: str=None, message: str=None, output_ref_ids: List[str]=None, parameters: List[ErrorParameter]=None, subdomain: str=None):
        """Error - a model defined in OpenAPI

        :param category: The category of this Error.
        :param domain: The domain of this Error.
        :param error_id: The error_id of this Error.
        :param input_ref_ids: The input_ref_ids of this Error.
        :param long_message: The long_message of this Error.
        :param message: The message of this Error.
        :param output_ref_ids: The output_ref_ids of this Error.
        :param parameters: The parameters of this Error.
        :param subdomain: The subdomain of this Error.
        """
        self.openapi_types = {
            'category': str,
            'domain': str,
            'error_id': int,
            'input_ref_ids': List[str],
            'long_message': str,
            'message': str,
            'output_ref_ids': List[str],
            'parameters': List[ErrorParameter],
            'subdomain': str
        }

        self.attribute_map = {
            'category': 'category',
            'domain': 'domain',
            'error_id': 'errorId',
            'input_ref_ids': 'inputRefIds',
            'long_message': 'longMessage',
            'message': 'message',
            'output_ref_ids': 'outputRefIds',
            'parameters': 'parameters',
            'subdomain': 'subdomain'
        }

        self._category = category
        self._domain = domain
        self._error_id = error_id
        self._input_ref_ids = input_ref_ids
        self._long_message = long_message
        self._message = message
        self._output_ref_ids = output_ref_ids
        self._parameters = parameters
        self._subdomain = subdomain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Error.

        This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.

        :return: The category of this Error.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Error.

        This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.

        :param category: The category of this Error.
        :type category: str
        """

        self._category = category

    @property
    def domain(self):
        """Gets the domain of this Error.

        The name of the primary system where the error occurred. This is relevant for application errors.

        :return: The domain of this Error.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Error.

        The name of the primary system where the error occurred. This is relevant for application errors.

        :param domain: The domain of this Error.
        :type domain: str
        """

        self._domain = domain

    @property
    def error_id(self):
        """Gets the error_id of this Error.

        A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.

        :return: The error_id of this Error.
        :rtype: int
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this Error.

        A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.

        :param error_id: The error_id of this Error.
        :type error_id: int
        """

        self._error_id = error_id

    @property
    def input_ref_ids(self):
        """Gets the input_ref_ids of this Error.

        An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.

        :return: The input_ref_ids of this Error.
        :rtype: List[str]
        """
        return self._input_ref_ids

    @input_ref_ids.setter
    def input_ref_ids(self, input_ref_ids):
        """Sets the input_ref_ids of this Error.

        An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.

        :param input_ref_ids: The input_ref_ids of this Error.
        :type input_ref_ids: List[str]
        """

        self._input_ref_ids = input_ref_ids

    @property
    def long_message(self):
        """Gets the long_message of this Error.

        A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.

        :return: The long_message of this Error.
        :rtype: str
        """
        return self._long_message

    @long_message.setter
    def long_message(self, long_message):
        """Sets the long_message of this Error.

        A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.

        :param long_message: The long_message of this Error.
        :type long_message: str
        """

        self._long_message = long_message

    @property
    def message(self):
        """Gets the message of this Error.

        A description of the condition that caused the error or warning.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        A description of the condition that caused the error or warning.

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def output_ref_ids(self):
        """Gets the output_ref_ids of this Error.

        An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.

        :return: The output_ref_ids of this Error.
        :rtype: List[str]
        """
        return self._output_ref_ids

    @output_ref_ids.setter
    def output_ref_ids(self, output_ref_ids):
        """Sets the output_ref_ids of this Error.

        An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.

        :param output_ref_ids: The output_ref_ids of this Error.
        :type output_ref_ids: List[str]
        """

        self._output_ref_ids = output_ref_ids

    @property
    def parameters(self):
        """Gets the parameters of this Error.

        An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.

        :return: The parameters of this Error.
        :rtype: List[ErrorParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Error.

        An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.

        :param parameters: The parameters of this Error.
        :type parameters: List[ErrorParameter]
        """

        self._parameters = parameters

    @property
    def subdomain(self):
        """Gets the subdomain of this Error.

        The name of the subdomain in which the error or warning occurred.

        :return: The subdomain of this Error.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this Error.

        The name of the subdomain in which the error or warning occurred.

        :param subdomain: The subdomain of this Error.
        :type subdomain: str
        """

        self._subdomain = subdomain
