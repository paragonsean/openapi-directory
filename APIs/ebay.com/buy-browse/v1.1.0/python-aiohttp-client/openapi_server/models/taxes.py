# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_jurisdiction import TaxJurisdiction
from openapi_server import util


class Taxes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ebay_collect_and_remit_tax: bool=None, included_in_price: bool=None, shipping_and_handling_taxed: bool=None, tax_jurisdiction: TaxJurisdiction=None, tax_percentage: str=None, tax_type: str=None):
        """Taxes - a model defined in OpenAPI

        :param ebay_collect_and_remit_tax: The ebay_collect_and_remit_tax of this Taxes.
        :param included_in_price: The included_in_price of this Taxes.
        :param shipping_and_handling_taxed: The shipping_and_handling_taxed of this Taxes.
        :param tax_jurisdiction: The tax_jurisdiction of this Taxes.
        :param tax_percentage: The tax_percentage of this Taxes.
        :param tax_type: The tax_type of this Taxes.
        """
        self.openapi_types = {
            'ebay_collect_and_remit_tax': bool,
            'included_in_price': bool,
            'shipping_and_handling_taxed': bool,
            'tax_jurisdiction': TaxJurisdiction,
            'tax_percentage': str,
            'tax_type': str
        }

        self.attribute_map = {
            'ebay_collect_and_remit_tax': 'ebayCollectAndRemitTax',
            'included_in_price': 'includedInPrice',
            'shipping_and_handling_taxed': 'shippingAndHandlingTaxed',
            'tax_jurisdiction': 'taxJurisdiction',
            'tax_percentage': 'taxPercentage',
            'tax_type': 'taxType'
        }

        self._ebay_collect_and_remit_tax = ebay_collect_and_remit_tax
        self._included_in_price = included_in_price
        self._shipping_and_handling_taxed = shipping_and_handling_taxed
        self._tax_jurisdiction = tax_jurisdiction
        self._tax_percentage = tax_percentage
        self._tax_type = tax_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Taxes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Taxes of this Taxes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ebay_collect_and_remit_tax(self):
        """Gets the ebay_collect_and_remit_tax of this Taxes.

        This field is only returned if true, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence.

        :return: The ebay_collect_and_remit_tax of this Taxes.
        :rtype: bool
        """
        return self._ebay_collect_and_remit_tax

    @ebay_collect_and_remit_tax.setter
    def ebay_collect_and_remit_tax(self, ebay_collect_and_remit_tax):
        """Sets the ebay_collect_and_remit_tax of this Taxes.

        This field is only returned if true, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence.

        :param ebay_collect_and_remit_tax: The ebay_collect_and_remit_tax of this Taxes.
        :type ebay_collect_and_remit_tax: bool
        """

        self._ebay_collect_and_remit_tax = ebay_collect_and_remit_tax

    @property
    def included_in_price(self):
        """Gets the included_in_price of this Taxes.

        This indicates if tax was applied for the cost of the item.

        :return: The included_in_price of this Taxes.
        :rtype: bool
        """
        return self._included_in_price

    @included_in_price.setter
    def included_in_price(self, included_in_price):
        """Sets the included_in_price of this Taxes.

        This indicates if tax was applied for the cost of the item.

        :param included_in_price: The included_in_price of this Taxes.
        :type included_in_price: bool
        """

        self._included_in_price = included_in_price

    @property
    def shipping_and_handling_taxed(self):
        """Gets the shipping_and_handling_taxed of this Taxes.

        This indicates if tax is applied for the shipping cost.

        :return: The shipping_and_handling_taxed of this Taxes.
        :rtype: bool
        """
        return self._shipping_and_handling_taxed

    @shipping_and_handling_taxed.setter
    def shipping_and_handling_taxed(self, shipping_and_handling_taxed):
        """Sets the shipping_and_handling_taxed of this Taxes.

        This indicates if tax is applied for the shipping cost.

        :param shipping_and_handling_taxed: The shipping_and_handling_taxed of this Taxes.
        :type shipping_and_handling_taxed: bool
        """

        self._shipping_and_handling_taxed = shipping_and_handling_taxed

    @property
    def tax_jurisdiction(self):
        """Gets the tax_jurisdiction of this Taxes.


        :return: The tax_jurisdiction of this Taxes.
        :rtype: TaxJurisdiction
        """
        return self._tax_jurisdiction

    @tax_jurisdiction.setter
    def tax_jurisdiction(self, tax_jurisdiction):
        """Sets the tax_jurisdiction of this Taxes.


        :param tax_jurisdiction: The tax_jurisdiction of this Taxes.
        :type tax_jurisdiction: TaxJurisdiction
        """

        self._tax_jurisdiction = tax_jurisdiction

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this Taxes.

        The percentage of tax.

        :return: The tax_percentage of this Taxes.
        :rtype: str
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this Taxes.

        The percentage of tax.

        :param tax_percentage: The tax_percentage of this Taxes.
        :type tax_percentage: str
        """

        self._tax_percentage = tax_percentage

    @property
    def tax_type(self):
        """Gets the tax_type of this Taxes.

        This field indicates the type of tax that may be collected for the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType'>eBay API documentation</a>

        :return: The tax_type of this Taxes.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this Taxes.

        This field indicates the type of tax that may be collected for the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType'>eBay API documentation</a>

        :param tax_type: The tax_type of this Taxes.
        :type tax_type: str
        """

        self._tax_type = tax_type
