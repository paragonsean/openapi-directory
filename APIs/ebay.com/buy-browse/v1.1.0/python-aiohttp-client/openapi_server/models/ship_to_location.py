# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShipToLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, postal_code: str=None):
        """ShipToLocation - a model defined in OpenAPI

        :param country: The country of this ShipToLocation.
        :param postal_code: The postal_code of this ShipToLocation.
        """
        self.openapi_types = {
            'country': str,
            'postal_code': str
        }

        self.attribute_map = {
            'country': 'country',
            'postal_code': 'postalCode'
        }

        self._country = country
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShipToLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShipToLocation of this ShipToLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this ShipToLocation.

        The two-letter ISO 3166 standard of the country for where the item is to be shipped. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :return: The country of this ShipToLocation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ShipToLocation.

        The two-letter ISO 3166 standard of the country for where the item is to be shipped. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :param country: The country of this ShipToLocation.
        :type country: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this ShipToLocation.

        The zip code (postal code) for where the item is to be shipped.

        :return: The postal_code of this ShipToLocation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ShipToLocation.

        The zip code (postal code) for where the item is to be shipped.

        :param postal_code: The postal_code of this ShipToLocation.
        :type postal_code: str
        """

        self._postal_code = postal_code
