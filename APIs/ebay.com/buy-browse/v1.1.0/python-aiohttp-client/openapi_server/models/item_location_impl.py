# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemLocationImpl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country: str=None, county: str=None, postal_code: str=None, state_or_province: str=None):
        """ItemLocationImpl - a model defined in OpenAPI

        :param address_line1: The address_line1 of this ItemLocationImpl.
        :param address_line2: The address_line2 of this ItemLocationImpl.
        :param city: The city of this ItemLocationImpl.
        :param country: The country of this ItemLocationImpl.
        :param county: The county of this ItemLocationImpl.
        :param postal_code: The postal_code of this ItemLocationImpl.
        :param state_or_province: The state_or_province of this ItemLocationImpl.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country': str,
            'county': str,
            'postal_code': str,
            'state_or_province': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country = country
        self._county = county
        self._postal_code = postal_code
        self._state_or_province = state_or_province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemLocationImpl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemLocationImpl of this ItemLocationImpl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this ItemLocationImpl.

        The first line of the street address.

        :return: The address_line1 of this ItemLocationImpl.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this ItemLocationImpl.

        The first line of the street address.

        :param address_line1: The address_line1 of this ItemLocationImpl.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this ItemLocationImpl.

        The second line of the street address. This field may contain such values as an apartment or suite number.

        :return: The address_line2 of this ItemLocationImpl.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this ItemLocationImpl.

        The second line of the street address. This field may contain such values as an apartment or suite number.

        :param address_line2: The address_line2 of this ItemLocationImpl.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this ItemLocationImpl.

        The city in which the item is located. Restriction: This field is populated in the search method response only when fieldgroups = EXTENDED.

        :return: The city of this ItemLocationImpl.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ItemLocationImpl.

        The city in which the item is located. Restriction: This field is populated in the search method response only when fieldgroups = EXTENDED.

        :param city: The city of this ItemLocationImpl.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this ItemLocationImpl.

        The two-letter ISO 3166 standard code that indicates the country in which the item is located. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :return: The country of this ItemLocationImpl.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ItemLocationImpl.

        The two-letter ISO 3166 standard code that indicates the country in which the item is located. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>

        :param country: The country of this ItemLocationImpl.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this ItemLocationImpl.

        The county in which the item is located.

        :return: The county of this ItemLocationImpl.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this ItemLocationImpl.

        The county in which the item is located.

        :param county: The county of this ItemLocationImpl.
        :type county: str
        """

        self._county = county

    @property
    def postal_code(self):
        """Gets the postal_code of this ItemLocationImpl.

        The postal code (or zip code in US) where the item is located. Sellers set a postal code (or zip code in US) for items when they are listed. The postal code is used for calculating proximity searches. It is anonymized when returned in itemLocation.postalCode via the API.

        :return: The postal_code of this ItemLocationImpl.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ItemLocationImpl.

        The postal code (or zip code in US) where the item is located. Sellers set a postal code (or zip code in US) for items when they are listed. The postal code is used for calculating proximity searches. It is anonymized when returned in itemLocation.postalCode via the API.

        :param postal_code: The postal_code of this ItemLocationImpl.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this ItemLocationImpl.

        The state or province in which the item is located.

        :return: The state_or_province of this ItemLocationImpl.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this ItemLocationImpl.

        The state or province in which the item is located.

        :param state_or_province: The state_or_province of this ItemLocationImpl.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province
