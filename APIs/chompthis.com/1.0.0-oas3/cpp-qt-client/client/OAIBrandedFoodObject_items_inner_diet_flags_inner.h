/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBrandedFoodObject_items_inner_diet_flags_inner.h
 *
 * An object containing information on an individual ingredient that was flagged as potentially not being compatible with a certain diet
 */

#ifndef OAIBrandedFoodObject_items_inner_diet_flags_inner_H
#define OAIBrandedFoodObject_items_inner_diet_flags_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBrandedFoodObject_items_inner_diet_flags_inner : public OAIObject {
public:
    OAIBrandedFoodObject_items_inner_diet_flags_inner();
    OAIBrandedFoodObject_items_inner_diet_flags_inner(QString json);
    ~OAIBrandedFoodObject_items_inner_diet_flags_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompatibilityDescription() const;
    void setCompatibilityDescription(const QString &compatibility_description);
    bool is_compatibility_description_Set() const;
    bool is_compatibility_description_Valid() const;

    qint32 getCompatibilityLevel() const;
    void setCompatibilityLevel(const qint32 &compatibility_level);
    bool is_compatibility_level_Set() const;
    bool is_compatibility_level_Valid() const;

    QString getDietLabel() const;
    void setDietLabel(const QString &diet_label);
    bool is_diet_label_Set() const;
    bool is_diet_label_Valid() const;

    QString getIngredient() const;
    void setIngredient(const QString &ingredient);
    bool is_ingredient_Set() const;
    bool is_ingredient_Valid() const;

    QString getIngredientDescription() const;
    void setIngredientDescription(const QString &ingredient_description);
    bool is_ingredient_description_Set() const;
    bool is_ingredient_description_Valid() const;

    bool isIsAllergen() const;
    void setIsAllergen(const bool &is_allergen);
    bool is_is_allergen_Set() const;
    bool is_is_allergen_Valid() const;

    QString getIsCompatible() const;
    void setIsCompatible(const QString &is_compatible);
    bool is_is_compatible_Set() const;
    bool is_is_compatible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compatibility_description;
    bool m_compatibility_description_isSet;
    bool m_compatibility_description_isValid;

    qint32 m_compatibility_level;
    bool m_compatibility_level_isSet;
    bool m_compatibility_level_isValid;

    QString m_diet_label;
    bool m_diet_label_isSet;
    bool m_diet_label_isValid;

    QString m_ingredient;
    bool m_ingredient_isSet;
    bool m_ingredient_isValid;

    QString m_ingredient_description;
    bool m_ingredient_description_isSet;
    bool m_ingredient_description_isValid;

    bool m_is_allergen;
    bool m_is_allergen_isSet;
    bool m_is_allergen_isValid;

    QString m_is_compatible;
    bool m_is_compatible_isSet;
    bool m_is_compatible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBrandedFoodObject_items_inner_diet_flags_inner)

#endif // OAIBrandedFoodObject_items_inner_diet_flags_inner_H
