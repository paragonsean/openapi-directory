/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandedFoodObject_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandedFoodObject_items_inner::OAIBrandedFoodObject_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandedFoodObject_items_inner::OAIBrandedFoodObject_items_inner() {
    this->initializeModel();
}

OAIBrandedFoodObject_items_inner::~OAIBrandedFoodObject_items_inner() {}

void OAIBrandedFoodObject_items_inner::initializeModel() {

    m_allergens_isSet = false;
    m_allergens_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_brand_list_isSet = false;
    m_brand_list_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_country_details_isSet = false;
    m_country_details_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_diet_flags_isSet = false;
    m_diet_flags_isValid = false;

    m_diet_labels_isSet = false;
    m_diet_labels_isValid = false;

    m_has_english_ingredients_isSet = false;
    m_has_english_ingredients_isValid = false;

    m_ingredient_list_isSet = false;
    m_ingredient_list_isValid = false;

    m_ingredients_isSet = false;
    m_ingredients_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_minerals_isSet = false;
    m_minerals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nutrients_isSet = false;
    m_nutrients_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_packaging_photos_isSet = false;
    m_packaging_photos_isValid = false;

    m_palm_oil_ingredients_isSet = false;
    m_palm_oil_ingredients_isValid = false;

    m_serving_isSet = false;
    m_serving_isValid = false;

    m_traces_isSet = false;
    m_traces_isValid = false;

    m_vitamins_isSet = false;
    m_vitamins_isValid = false;
}

void OAIBrandedFoodObject_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandedFoodObject_items_inner::fromJsonObject(QJsonObject json) {

    m_allergens_isValid = ::OpenAPI::fromJsonValue(m_allergens, json[QString("allergens")]);
    m_allergens_isSet = !json[QString("allergens")].isNull() && m_allergens_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_brand_list_isValid = ::OpenAPI::fromJsonValue(m_brand_list, json[QString("brand_list")]);
    m_brand_list_isSet = !json[QString("brand_list")].isNull() && m_brand_list_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_country_details_isValid = ::OpenAPI::fromJsonValue(m_country_details, json[QString("country_details")]);
    m_country_details_isSet = !json[QString("country_details")].isNull() && m_country_details_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_diet_flags_isValid = ::OpenAPI::fromJsonValue(m_diet_flags, json[QString("diet_flags")]);
    m_diet_flags_isSet = !json[QString("diet_flags")].isNull() && m_diet_flags_isValid;

    m_diet_labels_isValid = ::OpenAPI::fromJsonValue(m_diet_labels, json[QString("diet_labels")]);
    m_diet_labels_isSet = !json[QString("diet_labels")].isNull() && m_diet_labels_isValid;

    m_has_english_ingredients_isValid = ::OpenAPI::fromJsonValue(m_has_english_ingredients, json[QString("has_english_ingredients")]);
    m_has_english_ingredients_isSet = !json[QString("has_english_ingredients")].isNull() && m_has_english_ingredients_isValid;

    m_ingredient_list_isValid = ::OpenAPI::fromJsonValue(m_ingredient_list, json[QString("ingredient_list")]);
    m_ingredient_list_isSet = !json[QString("ingredient_list")].isNull() && m_ingredient_list_isValid;

    m_ingredients_isValid = ::OpenAPI::fromJsonValue(m_ingredients, json[QString("ingredients")]);
    m_ingredients_isSet = !json[QString("ingredients")].isNull() && m_ingredients_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_minerals_isValid = ::OpenAPI::fromJsonValue(m_minerals, json[QString("minerals")]);
    m_minerals_isSet = !json[QString("minerals")].isNull() && m_minerals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nutrients_isValid = ::OpenAPI::fromJsonValue(m_nutrients, json[QString("nutrients")]);
    m_nutrients_isSet = !json[QString("nutrients")].isNull() && m_nutrients_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_packaging_photos_isValid = ::OpenAPI::fromJsonValue(m_packaging_photos, json[QString("packaging_photos")]);
    m_packaging_photos_isSet = !json[QString("packaging_photos")].isNull() && m_packaging_photos_isValid;

    m_palm_oil_ingredients_isValid = ::OpenAPI::fromJsonValue(m_palm_oil_ingredients, json[QString("palm_oil_ingredients")]);
    m_palm_oil_ingredients_isSet = !json[QString("palm_oil_ingredients")].isNull() && m_palm_oil_ingredients_isValid;

    m_serving_isValid = ::OpenAPI::fromJsonValue(m_serving, json[QString("serving")]);
    m_serving_isSet = !json[QString("serving")].isNull() && m_serving_isValid;

    m_traces_isValid = ::OpenAPI::fromJsonValue(m_traces, json[QString("traces")]);
    m_traces_isSet = !json[QString("traces")].isNull() && m_traces_isValid;

    m_vitamins_isValid = ::OpenAPI::fromJsonValue(m_vitamins, json[QString("vitamins")]);
    m_vitamins_isSet = !json[QString("vitamins")].isNull() && m_vitamins_isValid;
}

QString OAIBrandedFoodObject_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandedFoodObject_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allergens.size() > 0) {
        obj.insert(QString("allergens"), ::OpenAPI::toJsonValue(m_allergens));
    }
    if (m_barcode_isSet) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_brand_list.size() > 0) {
        obj.insert(QString("brand_list"), ::OpenAPI::toJsonValue(m_brand_list));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_country_details.isSet()) {
        obj.insert(QString("country_details"), ::OpenAPI::toJsonValue(m_country_details));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_diet_flags.size() > 0) {
        obj.insert(QString("diet_flags"), ::OpenAPI::toJsonValue(m_diet_flags));
    }
    if (m_diet_labels.isSet()) {
        obj.insert(QString("diet_labels"), ::OpenAPI::toJsonValue(m_diet_labels));
    }
    if (m_has_english_ingredients_isSet) {
        obj.insert(QString("has_english_ingredients"), ::OpenAPI::toJsonValue(m_has_english_ingredients));
    }
    if (m_ingredient_list.size() > 0) {
        obj.insert(QString("ingredient_list"), ::OpenAPI::toJsonValue(m_ingredient_list));
    }
    if (m_ingredients_isSet) {
        obj.insert(QString("ingredients"), ::OpenAPI::toJsonValue(m_ingredients));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_minerals.size() > 0) {
        obj.insert(QString("minerals"), ::OpenAPI::toJsonValue(m_minerals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nutrients.size() > 0) {
        obj.insert(QString("nutrients"), ::OpenAPI::toJsonValue(m_nutrients));
    }
    if (m_package.isSet()) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_packaging_photos.isSet()) {
        obj.insert(QString("packaging_photos"), ::OpenAPI::toJsonValue(m_packaging_photos));
    }
    if (m_palm_oil_ingredients.size() > 0) {
        obj.insert(QString("palm_oil_ingredients"), ::OpenAPI::toJsonValue(m_palm_oil_ingredients));
    }
    if (m_serving.isSet()) {
        obj.insert(QString("serving"), ::OpenAPI::toJsonValue(m_serving));
    }
    if (m_traces.size() > 0) {
        obj.insert(QString("traces"), ::OpenAPI::toJsonValue(m_traces));
    }
    if (m_vitamins.size() > 0) {
        obj.insert(QString("vitamins"), ::OpenAPI::toJsonValue(m_vitamins));
    }
    return obj;
}

QList<QString> OAIBrandedFoodObject_items_inner::getAllergens() const {
    return m_allergens;
}
void OAIBrandedFoodObject_items_inner::setAllergens(const QList<QString> &allergens) {
    m_allergens = allergens;
    m_allergens_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_allergens_Set() const{
    return m_allergens_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_allergens_Valid() const{
    return m_allergens_isValid;
}

QString OAIBrandedFoodObject_items_inner::getBarcode() const {
    return m_barcode;
}
void OAIBrandedFoodObject_items_inner::setBarcode(const QString &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_barcode_Valid() const{
    return m_barcode_isValid;
}

QString OAIBrandedFoodObject_items_inner::getBrand() const {
    return m_brand;
}
void OAIBrandedFoodObject_items_inner::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getBrandList() const {
    return m_brand_list;
}
void OAIBrandedFoodObject_items_inner::setBrandList(const QList<QString> &brand_list) {
    m_brand_list = brand_list;
    m_brand_list_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_brand_list_Set() const{
    return m_brand_list_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_brand_list_Valid() const{
    return m_brand_list_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getCategories() const {
    return m_categories;
}
void OAIBrandedFoodObject_items_inner::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getCountries() const {
    return m_countries;
}
void OAIBrandedFoodObject_items_inner::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_countries_Valid() const{
    return m_countries_isValid;
}

OAIBrandedFoodObject_items_inner_country_details OAIBrandedFoodObject_items_inner::getCountryDetails() const {
    return m_country_details;
}
void OAIBrandedFoodObject_items_inner::setCountryDetails(const OAIBrandedFoodObject_items_inner_country_details &country_details) {
    m_country_details = country_details;
    m_country_details_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_country_details_Set() const{
    return m_country_details_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_country_details_Valid() const{
    return m_country_details_isValid;
}

QString OAIBrandedFoodObject_items_inner::getDescription() const {
    return m_description;
}
void OAIBrandedFoodObject_items_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIBrandedFoodObject_items_inner_diet_flags_inner> OAIBrandedFoodObject_items_inner::getDietFlags() const {
    return m_diet_flags;
}
void OAIBrandedFoodObject_items_inner::setDietFlags(const QList<OAIBrandedFoodObject_items_inner_diet_flags_inner> &diet_flags) {
    m_diet_flags = diet_flags;
    m_diet_flags_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_diet_flags_Set() const{
    return m_diet_flags_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_diet_flags_Valid() const{
    return m_diet_flags_isValid;
}

OAIBrandedFoodObject_items_inner_diet_labels OAIBrandedFoodObject_items_inner::getDietLabels() const {
    return m_diet_labels;
}
void OAIBrandedFoodObject_items_inner::setDietLabels(const OAIBrandedFoodObject_items_inner_diet_labels &diet_labels) {
    m_diet_labels = diet_labels;
    m_diet_labels_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_diet_labels_Set() const{
    return m_diet_labels_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_diet_labels_Valid() const{
    return m_diet_labels_isValid;
}

bool OAIBrandedFoodObject_items_inner::isHasEnglishIngredients() const {
    return m_has_english_ingredients;
}
void OAIBrandedFoodObject_items_inner::setHasEnglishIngredients(const bool &has_english_ingredients) {
    m_has_english_ingredients = has_english_ingredients;
    m_has_english_ingredients_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_has_english_ingredients_Set() const{
    return m_has_english_ingredients_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_has_english_ingredients_Valid() const{
    return m_has_english_ingredients_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getIngredientList() const {
    return m_ingredient_list;
}
void OAIBrandedFoodObject_items_inner::setIngredientList(const QList<QString> &ingredient_list) {
    m_ingredient_list = ingredient_list;
    m_ingredient_list_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_ingredient_list_Set() const{
    return m_ingredient_list_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_ingredient_list_Valid() const{
    return m_ingredient_list_isValid;
}

QString OAIBrandedFoodObject_items_inner::getIngredients() const {
    return m_ingredients;
}
void OAIBrandedFoodObject_items_inner::setIngredients(const QString &ingredients) {
    m_ingredients = ingredients;
    m_ingredients_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_ingredients_Set() const{
    return m_ingredients_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_ingredients_Valid() const{
    return m_ingredients_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getKeywords() const {
    return m_keywords;
}
void OAIBrandedFoodObject_items_inner::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getMinerals() const {
    return m_minerals;
}
void OAIBrandedFoodObject_items_inner::setMinerals(const QList<QString> &minerals) {
    m_minerals = minerals;
    m_minerals_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_minerals_Set() const{
    return m_minerals_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_minerals_Valid() const{
    return m_minerals_isValid;
}

QString OAIBrandedFoodObject_items_inner::getName() const {
    return m_name;
}
void OAIBrandedFoodObject_items_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIBrandedFoodObject_items_inner_nutrients_inner> OAIBrandedFoodObject_items_inner::getNutrients() const {
    return m_nutrients;
}
void OAIBrandedFoodObject_items_inner::setNutrients(const QList<OAIBrandedFoodObject_items_inner_nutrients_inner> &nutrients) {
    m_nutrients = nutrients;
    m_nutrients_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_nutrients_Set() const{
    return m_nutrients_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_nutrients_Valid() const{
    return m_nutrients_isValid;
}

OAIBrandedFoodObject_items_inner_package OAIBrandedFoodObject_items_inner::getPackage() const {
    return m_package;
}
void OAIBrandedFoodObject_items_inner::setPackage(const OAIBrandedFoodObject_items_inner_package &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_package_Set() const{
    return m_package_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_package_Valid() const{
    return m_package_isValid;
}

OAIBrandedFoodObject_items_inner_packaging_photos OAIBrandedFoodObject_items_inner::getPackagingPhotos() const {
    return m_packaging_photos;
}
void OAIBrandedFoodObject_items_inner::setPackagingPhotos(const OAIBrandedFoodObject_items_inner_packaging_photos &packaging_photos) {
    m_packaging_photos = packaging_photos;
    m_packaging_photos_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_packaging_photos_Set() const{
    return m_packaging_photos_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_packaging_photos_Valid() const{
    return m_packaging_photos_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getPalmOilIngredients() const {
    return m_palm_oil_ingredients;
}
void OAIBrandedFoodObject_items_inner::setPalmOilIngredients(const QList<QString> &palm_oil_ingredients) {
    m_palm_oil_ingredients = palm_oil_ingredients;
    m_palm_oil_ingredients_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_palm_oil_ingredients_Set() const{
    return m_palm_oil_ingredients_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_palm_oil_ingredients_Valid() const{
    return m_palm_oil_ingredients_isValid;
}

OAIBrandedFoodObject_items_inner_serving OAIBrandedFoodObject_items_inner::getServing() const {
    return m_serving;
}
void OAIBrandedFoodObject_items_inner::setServing(const OAIBrandedFoodObject_items_inner_serving &serving) {
    m_serving = serving;
    m_serving_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_serving_Set() const{
    return m_serving_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_serving_Valid() const{
    return m_serving_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getTraces() const {
    return m_traces;
}
void OAIBrandedFoodObject_items_inner::setTraces(const QList<QString> &traces) {
    m_traces = traces;
    m_traces_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_traces_Set() const{
    return m_traces_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_traces_Valid() const{
    return m_traces_isValid;
}

QList<QString> OAIBrandedFoodObject_items_inner::getVitamins() const {
    return m_vitamins;
}
void OAIBrandedFoodObject_items_inner::setVitamins(const QList<QString> &vitamins) {
    m_vitamins = vitamins;
    m_vitamins_isSet = true;
}

bool OAIBrandedFoodObject_items_inner::is_vitamins_Set() const{
    return m_vitamins_isSet;
}

bool OAIBrandedFoodObject_items_inner::is_vitamins_Valid() const{
    return m_vitamins_isValid;
}

bool OAIBrandedFoodObject_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allergens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diet_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diet_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_english_ingredients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredient_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minerals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging_photos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_palm_oil_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vitamins.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandedFoodObject_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
