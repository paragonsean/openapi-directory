/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandedFoodObject_items_inner_packaging_photos_nutrition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::OAIBrandedFoodObject_items_inner_packaging_photos_nutrition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::OAIBrandedFoodObject_items_inner_packaging_photos_nutrition() {
    this->initializeModel();
}

OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::~OAIBrandedFoodObject_items_inner_packaging_photos_nutrition() {}

void OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_small_isSet = false;
    m_small_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;
}

void OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_small_isValid = ::OpenAPI::fromJsonValue(m_small, json[QString("small")]);
    m_small_isSet = !json[QString("small")].isNull() && m_small_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;
}

QString OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_small_isSet) {
        obj.insert(QString("small"), ::OpenAPI::toJsonValue(m_small));
    }
    if (m_thumb_isSet) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    return obj;
}

QString OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::getDisplay() const {
    return m_display;
}
void OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::is_display_Set() const{
    return m_display_isSet;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::getSmall() const {
    return m_small;
}
void OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::setSmall(const QString &small) {
    m_small = small;
    m_small_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::is_small_Set() const{
    return m_small_isSet;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::is_small_Valid() const{
    return m_small_isValid;
}

QString OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::getThumb() const {
    return m_thumb;
}
void OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::setThumb(const QString &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::is_thumb_Valid() const{
    return m_thumb_isValid;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandedFoodObject_items_inner_packaging_photos_nutrition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
