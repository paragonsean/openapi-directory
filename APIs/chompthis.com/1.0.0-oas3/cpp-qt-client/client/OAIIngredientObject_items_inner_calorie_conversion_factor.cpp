/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngredientObject_items_inner_calorie_conversion_factor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngredientObject_items_inner_calorie_conversion_factor::OAIIngredientObject_items_inner_calorie_conversion_factor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngredientObject_items_inner_calorie_conversion_factor::OAIIngredientObject_items_inner_calorie_conversion_factor() {
    this->initializeModel();
}

OAIIngredientObject_items_inner_calorie_conversion_factor::~OAIIngredientObject_items_inner_calorie_conversion_factor() {}

void OAIIngredientObject_items_inner_calorie_conversion_factor::initializeModel() {

    m_carbohydrate_value_isSet = false;
    m_carbohydrate_value_isValid = false;

    m_fat_value_isSet = false;
    m_fat_value_isValid = false;

    m_protein_value_isSet = false;
    m_protein_value_isValid = false;
}

void OAIIngredientObject_items_inner_calorie_conversion_factor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIngredientObject_items_inner_calorie_conversion_factor::fromJsonObject(QJsonObject json) {

    m_carbohydrate_value_isValid = ::OpenAPI::fromJsonValue(m_carbohydrate_value, json[QString("carbohydrate_value")]);
    m_carbohydrate_value_isSet = !json[QString("carbohydrate_value")].isNull() && m_carbohydrate_value_isValid;

    m_fat_value_isValid = ::OpenAPI::fromJsonValue(m_fat_value, json[QString("fat_value")]);
    m_fat_value_isSet = !json[QString("fat_value")].isNull() && m_fat_value_isValid;

    m_protein_value_isValid = ::OpenAPI::fromJsonValue(m_protein_value, json[QString("protein_value")]);
    m_protein_value_isSet = !json[QString("protein_value")].isNull() && m_protein_value_isValid;
}

QString OAIIngredientObject_items_inner_calorie_conversion_factor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIngredientObject_items_inner_calorie_conversion_factor::asJsonObject() const {
    QJsonObject obj;
    if (m_carbohydrate_value_isSet) {
        obj.insert(QString("carbohydrate_value"), ::OpenAPI::toJsonValue(m_carbohydrate_value));
    }
    if (m_fat_value_isSet) {
        obj.insert(QString("fat_value"), ::OpenAPI::toJsonValue(m_fat_value));
    }
    if (m_protein_value_isSet) {
        obj.insert(QString("protein_value"), ::OpenAPI::toJsonValue(m_protein_value));
    }
    return obj;
}

double OAIIngredientObject_items_inner_calorie_conversion_factor::getCarbohydrateValue() const {
    return m_carbohydrate_value;
}
void OAIIngredientObject_items_inner_calorie_conversion_factor::setCarbohydrateValue(const double &carbohydrate_value) {
    m_carbohydrate_value = carbohydrate_value;
    m_carbohydrate_value_isSet = true;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::is_carbohydrate_value_Set() const{
    return m_carbohydrate_value_isSet;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::is_carbohydrate_value_Valid() const{
    return m_carbohydrate_value_isValid;
}

double OAIIngredientObject_items_inner_calorie_conversion_factor::getFatValue() const {
    return m_fat_value;
}
void OAIIngredientObject_items_inner_calorie_conversion_factor::setFatValue(const double &fat_value) {
    m_fat_value = fat_value;
    m_fat_value_isSet = true;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::is_fat_value_Set() const{
    return m_fat_value_isSet;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::is_fat_value_Valid() const{
    return m_fat_value_isValid;
}

double OAIIngredientObject_items_inner_calorie_conversion_factor::getProteinValue() const {
    return m_protein_value;
}
void OAIIngredientObject_items_inner_calorie_conversion_factor::setProteinValue(const double &protein_value) {
    m_protein_value = protein_value;
    m_protein_value_isSet = true;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::is_protein_value_Set() const{
    return m_protein_value_isSet;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::is_protein_value_Valid() const{
    return m_protein_value_isValid;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carbohydrate_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fat_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protein_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIngredientObject_items_inner_calorie_conversion_factor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
