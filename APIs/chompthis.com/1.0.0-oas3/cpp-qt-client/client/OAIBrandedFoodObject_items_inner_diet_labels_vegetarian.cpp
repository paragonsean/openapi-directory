/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandedFoodObject_items_inner_diet_labels_vegetarian.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::OAIBrandedFoodObject_items_inner_diet_labels_vegetarian(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::OAIBrandedFoodObject_items_inner_diet_labels_vegetarian() {
    this->initializeModel();
}

OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::~OAIBrandedFoodObject_items_inner_diet_labels_vegetarian() {}

void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::initializeModel() {

    m_compatibility_level_isSet = false;
    m_compatibility_level_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_confidence_description_isSet = false;
    m_confidence_description_isValid = false;

    m_is_compatible_isSet = false;
    m_is_compatible_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::fromJsonObject(QJsonObject json) {

    m_compatibility_level_isValid = ::OpenAPI::fromJsonValue(m_compatibility_level, json[QString("compatibility_level")]);
    m_compatibility_level_isSet = !json[QString("compatibility_level")].isNull() && m_compatibility_level_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_confidence_description_isValid = ::OpenAPI::fromJsonValue(m_confidence_description, json[QString("confidence_description")]);
    m_confidence_description_isSet = !json[QString("confidence_description")].isNull() && m_confidence_description_isValid;

    m_is_compatible_isValid = ::OpenAPI::fromJsonValue(m_is_compatible, json[QString("is_compatible")]);
    m_is_compatible_isSet = !json[QString("is_compatible")].isNull() && m_is_compatible_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_level_isSet) {
        obj.insert(QString("compatibility_level"), ::OpenAPI::toJsonValue(m_compatibility_level));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_confidence_description_isSet) {
        obj.insert(QString("confidence_description"), ::OpenAPI::toJsonValue(m_confidence_description));
    }
    if (m_is_compatible_isSet) {
        obj.insert(QString("is_compatible"), ::OpenAPI::toJsonValue(m_is_compatible));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::getCompatibilityLevel() const {
    return m_compatibility_level;
}
void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::setCompatibilityLevel(const qint32 &compatibility_level) {
    m_compatibility_level = compatibility_level;
    m_compatibility_level_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_compatibility_level_Set() const{
    return m_compatibility_level_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_compatibility_level_Valid() const{
    return m_compatibility_level_isValid;
}

qint32 OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::getConfidence() const {
    return m_confidence;
}
void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::setConfidence(const qint32 &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::getConfidenceDescription() const {
    return m_confidence_description;
}
void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::setConfidenceDescription(const QString &confidence_description) {
    m_confidence_description = confidence_description;
    m_confidence_description_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_confidence_description_Set() const{
    return m_confidence_description_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_confidence_description_Valid() const{
    return m_confidence_description_isValid;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::isIsCompatible() const {
    return m_is_compatible;
}
void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::setIsCompatible(const bool &is_compatible) {
    m_is_compatible = is_compatible;
    m_is_compatible_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_is_compatible_Set() const{
    return m_is_compatible_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_is_compatible_Valid() const{
    return m_is_compatible_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::getName() const {
    return m_name;
}
void OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_compatible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandedFoodObject_items_inner_diet_labels_vegetarian::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
