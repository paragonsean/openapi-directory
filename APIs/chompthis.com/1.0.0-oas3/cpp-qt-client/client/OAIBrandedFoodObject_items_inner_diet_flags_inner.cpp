/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandedFoodObject_items_inner_diet_flags_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandedFoodObject_items_inner_diet_flags_inner::OAIBrandedFoodObject_items_inner_diet_flags_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandedFoodObject_items_inner_diet_flags_inner::OAIBrandedFoodObject_items_inner_diet_flags_inner() {
    this->initializeModel();
}

OAIBrandedFoodObject_items_inner_diet_flags_inner::~OAIBrandedFoodObject_items_inner_diet_flags_inner() {}

void OAIBrandedFoodObject_items_inner_diet_flags_inner::initializeModel() {

    m_compatibility_description_isSet = false;
    m_compatibility_description_isValid = false;

    m_compatibility_level_isSet = false;
    m_compatibility_level_isValid = false;

    m_diet_label_isSet = false;
    m_diet_label_isValid = false;

    m_ingredient_isSet = false;
    m_ingredient_isValid = false;

    m_ingredient_description_isSet = false;
    m_ingredient_description_isValid = false;

    m_is_allergen_isSet = false;
    m_is_allergen_isValid = false;

    m_is_compatible_isSet = false;
    m_is_compatible_isValid = false;
}

void OAIBrandedFoodObject_items_inner_diet_flags_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandedFoodObject_items_inner_diet_flags_inner::fromJsonObject(QJsonObject json) {

    m_compatibility_description_isValid = ::OpenAPI::fromJsonValue(m_compatibility_description, json[QString("compatibility_description")]);
    m_compatibility_description_isSet = !json[QString("compatibility_description")].isNull() && m_compatibility_description_isValid;

    m_compatibility_level_isValid = ::OpenAPI::fromJsonValue(m_compatibility_level, json[QString("compatibility_level")]);
    m_compatibility_level_isSet = !json[QString("compatibility_level")].isNull() && m_compatibility_level_isValid;

    m_diet_label_isValid = ::OpenAPI::fromJsonValue(m_diet_label, json[QString("diet_label")]);
    m_diet_label_isSet = !json[QString("diet_label")].isNull() && m_diet_label_isValid;

    m_ingredient_isValid = ::OpenAPI::fromJsonValue(m_ingredient, json[QString("ingredient")]);
    m_ingredient_isSet = !json[QString("ingredient")].isNull() && m_ingredient_isValid;

    m_ingredient_description_isValid = ::OpenAPI::fromJsonValue(m_ingredient_description, json[QString("ingredient_description")]);
    m_ingredient_description_isSet = !json[QString("ingredient_description")].isNull() && m_ingredient_description_isValid;

    m_is_allergen_isValid = ::OpenAPI::fromJsonValue(m_is_allergen, json[QString("is_allergen")]);
    m_is_allergen_isSet = !json[QString("is_allergen")].isNull() && m_is_allergen_isValid;

    m_is_compatible_isValid = ::OpenAPI::fromJsonValue(m_is_compatible, json[QString("is_compatible")]);
    m_is_compatible_isSet = !json[QString("is_compatible")].isNull() && m_is_compatible_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_flags_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandedFoodObject_items_inner_diet_flags_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_description_isSet) {
        obj.insert(QString("compatibility_description"), ::OpenAPI::toJsonValue(m_compatibility_description));
    }
    if (m_compatibility_level_isSet) {
        obj.insert(QString("compatibility_level"), ::OpenAPI::toJsonValue(m_compatibility_level));
    }
    if (m_diet_label_isSet) {
        obj.insert(QString("diet_label"), ::OpenAPI::toJsonValue(m_diet_label));
    }
    if (m_ingredient_isSet) {
        obj.insert(QString("ingredient"), ::OpenAPI::toJsonValue(m_ingredient));
    }
    if (m_ingredient_description_isSet) {
        obj.insert(QString("ingredient_description"), ::OpenAPI::toJsonValue(m_ingredient_description));
    }
    if (m_is_allergen_isSet) {
        obj.insert(QString("is_allergen"), ::OpenAPI::toJsonValue(m_is_allergen));
    }
    if (m_is_compatible_isSet) {
        obj.insert(QString("is_compatible"), ::OpenAPI::toJsonValue(m_is_compatible));
    }
    return obj;
}

QString OAIBrandedFoodObject_items_inner_diet_flags_inner::getCompatibilityDescription() const {
    return m_compatibility_description;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setCompatibilityDescription(const QString &compatibility_description) {
    m_compatibility_description = compatibility_description;
    m_compatibility_description_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_compatibility_description_Set() const{
    return m_compatibility_description_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_compatibility_description_Valid() const{
    return m_compatibility_description_isValid;
}

qint32 OAIBrandedFoodObject_items_inner_diet_flags_inner::getCompatibilityLevel() const {
    return m_compatibility_level;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setCompatibilityLevel(const qint32 &compatibility_level) {
    m_compatibility_level = compatibility_level;
    m_compatibility_level_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_compatibility_level_Set() const{
    return m_compatibility_level_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_compatibility_level_Valid() const{
    return m_compatibility_level_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_flags_inner::getDietLabel() const {
    return m_diet_label;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setDietLabel(const QString &diet_label) {
    m_diet_label = diet_label;
    m_diet_label_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_diet_label_Set() const{
    return m_diet_label_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_diet_label_Valid() const{
    return m_diet_label_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_flags_inner::getIngredient() const {
    return m_ingredient;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setIngredient(const QString &ingredient) {
    m_ingredient = ingredient;
    m_ingredient_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_ingredient_Set() const{
    return m_ingredient_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_ingredient_Valid() const{
    return m_ingredient_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_flags_inner::getIngredientDescription() const {
    return m_ingredient_description;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setIngredientDescription(const QString &ingredient_description) {
    m_ingredient_description = ingredient_description;
    m_ingredient_description_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_ingredient_description_Set() const{
    return m_ingredient_description_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_ingredient_description_Valid() const{
    return m_ingredient_description_isValid;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::isIsAllergen() const {
    return m_is_allergen;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setIsAllergen(const bool &is_allergen) {
    m_is_allergen = is_allergen;
    m_is_allergen_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_is_allergen_Set() const{
    return m_is_allergen_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_is_allergen_Valid() const{
    return m_is_allergen_isValid;
}

QString OAIBrandedFoodObject_items_inner_diet_flags_inner::getIsCompatible() const {
    return m_is_compatible;
}
void OAIBrandedFoodObject_items_inner_diet_flags_inner::setIsCompatible(const QString &is_compatible) {
    m_is_compatible = is_compatible;
    m_is_compatible_isSet = true;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_is_compatible_Set() const{
    return m_is_compatible_isSet;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::is_is_compatible_Valid() const{
    return m_is_compatible_isValid;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diet_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredient_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_allergen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_compatible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandedFoodObject_items_inner_diet_flags_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
