/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngredientObject_items_inner_nutrients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngredientObject_items_inner_nutrients_inner::OAIIngredientObject_items_inner_nutrients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngredientObject_items_inner_nutrients_inner::OAIIngredientObject_items_inner_nutrients_inner() {
    this->initializeModel();
}

OAIIngredientObject_items_inner_nutrients_inner::~OAIIngredientObject_items_inner_nutrients_inner() {}

void OAIIngredientObject_items_inner_nutrients_inner::initializeModel() {

    m_data_points_isSet = false;
    m_data_points_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_footnote_isSet = false;
    m_footnote_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_per_100g_isSet = false;
    m_per_100g_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;
}

void OAIIngredientObject_items_inner_nutrients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIngredientObject_items_inner_nutrients_inner::fromJsonObject(QJsonObject json) {

    m_data_points_isValid = ::OpenAPI::fromJsonValue(m_data_points, json[QString("data_points")]);
    m_data_points_isSet = !json[QString("data_points")].isNull() && m_data_points_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_footnote_isValid = ::OpenAPI::fromJsonValue(m_footnote, json[QString("footnote")]);
    m_footnote_isSet = !json[QString("footnote")].isNull() && m_footnote_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurement_unit")]);
    m_measurement_unit_isSet = !json[QString("measurement_unit")].isNull() && m_measurement_unit_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_per_100g_isValid = ::OpenAPI::fromJsonValue(m_per_100g, json[QString("per_100g")]);
    m_per_100g_isSet = !json[QString("per_100g")].isNull() && m_per_100g_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;
}

QString OAIIngredientObject_items_inner_nutrients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIngredientObject_items_inner_nutrients_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_data_points_isSet) {
        obj.insert(QString("data_points"), ::OpenAPI::toJsonValue(m_data_points));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_footnote_isSet) {
        obj.insert(QString("footnote"), ::OpenAPI::toJsonValue(m_footnote));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurement_unit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_per_100g_isSet) {
        obj.insert(QString("per_100g"), ::OpenAPI::toJsonValue(m_per_100g));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    return obj;
}

qint32 OAIIngredientObject_items_inner_nutrients_inner::getDataPoints() const {
    return m_data_points;
}
void OAIIngredientObject_items_inner_nutrients_inner::setDataPoints(const qint32 &data_points) {
    m_data_points = data_points;
    m_data_points_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_data_points_Set() const{
    return m_data_points_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_data_points_Valid() const{
    return m_data_points_isValid;
}

QString OAIIngredientObject_items_inner_nutrients_inner::getDescription() const {
    return m_description;
}
void OAIIngredientObject_items_inner_nutrients_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIngredientObject_items_inner_nutrients_inner::getFootnote() const {
    return m_footnote;
}
void OAIIngredientObject_items_inner_nutrients_inner::setFootnote(const QString &footnote) {
    m_footnote = footnote;
    m_footnote_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_footnote_Set() const{
    return m_footnote_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_footnote_Valid() const{
    return m_footnote_isValid;
}

double OAIIngredientObject_items_inner_nutrients_inner::getMax() const {
    return m_max;
}
void OAIIngredientObject_items_inner_nutrients_inner::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_max_Set() const{
    return m_max_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_max_Valid() const{
    return m_max_isValid;
}

QString OAIIngredientObject_items_inner_nutrients_inner::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIIngredientObject_items_inner_nutrients_inner::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

double OAIIngredientObject_items_inner_nutrients_inner::getMedian() const {
    return m_median;
}
void OAIIngredientObject_items_inner_nutrients_inner::setMedian(const double &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_median_Set() const{
    return m_median_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_median_Valid() const{
    return m_median_isValid;
}

double OAIIngredientObject_items_inner_nutrients_inner::getMin() const {
    return m_min;
}
void OAIIngredientObject_items_inner_nutrients_inner::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_min_Set() const{
    return m_min_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_min_Valid() const{
    return m_min_isValid;
}

QString OAIIngredientObject_items_inner_nutrients_inner::getName() const {
    return m_name;
}
void OAIIngredientObject_items_inner_nutrients_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAIIngredientObject_items_inner_nutrients_inner::getPer100g() const {
    return m_per_100g;
}
void OAIIngredientObject_items_inner_nutrients_inner::setPer100g(const double &per_100g) {
    m_per_100g = per_100g;
    m_per_100g_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_per_100g_Set() const{
    return m_per_100g_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_per_100g_Valid() const{
    return m_per_100g_isValid;
}

qint32 OAIIngredientObject_items_inner_nutrients_inner::getRank() const {
    return m_rank;
}
void OAIIngredientObject_items_inner_nutrients_inner::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIIngredientObject_items_inner_nutrients_inner::is_rank_Valid() const{
    return m_rank_isValid;
}

bool OAIIngredientObject_items_inner_nutrients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footnote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_100g_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIngredientObject_items_inner_nutrients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
