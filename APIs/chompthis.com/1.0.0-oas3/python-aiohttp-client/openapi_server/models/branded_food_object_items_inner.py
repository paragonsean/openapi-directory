# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branded_food_object_items_inner_country_details import BrandedFoodObjectItemsInnerCountryDetails
from openapi_server.models.branded_food_object_items_inner_diet_flags_inner import BrandedFoodObjectItemsInnerDietFlagsInner
from openapi_server.models.branded_food_object_items_inner_diet_labels import BrandedFoodObjectItemsInnerDietLabels
from openapi_server.models.branded_food_object_items_inner_nutrients_inner import BrandedFoodObjectItemsInnerNutrientsInner
from openapi_server.models.branded_food_object_items_inner_package import BrandedFoodObjectItemsInnerPackage
from openapi_server.models.branded_food_object_items_inner_packaging_photos import BrandedFoodObjectItemsInnerPackagingPhotos
from openapi_server.models.branded_food_object_items_inner_serving import BrandedFoodObjectItemsInnerServing
from openapi_server import util


class BrandedFoodObjectItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allergens: List[str]=None, barcode: str=None, brand: str=None, brand_list: List[str]=None, categories: List[str]=None, countries: List[str]=None, country_details: BrandedFoodObjectItemsInnerCountryDetails=None, description: str=None, diet_flags: List[BrandedFoodObjectItemsInnerDietFlagsInner]=None, diet_labels: BrandedFoodObjectItemsInnerDietLabels=None, has_english_ingredients: bool=None, ingredient_list: List[str]=None, ingredients: str=None, keywords: List[str]=None, minerals: List[str]=None, name: str=None, nutrients: List[BrandedFoodObjectItemsInnerNutrientsInner]=None, package: BrandedFoodObjectItemsInnerPackage=None, packaging_photos: BrandedFoodObjectItemsInnerPackagingPhotos=None, palm_oil_ingredients: List[str]=None, serving: BrandedFoodObjectItemsInnerServing=None, traces: List[str]=None, vitamins: List[str]=None):
        """BrandedFoodObjectItemsInner - a model defined in OpenAPI

        :param allergens: The allergens of this BrandedFoodObjectItemsInner.
        :param barcode: The barcode of this BrandedFoodObjectItemsInner.
        :param brand: The brand of this BrandedFoodObjectItemsInner.
        :param brand_list: The brand_list of this BrandedFoodObjectItemsInner.
        :param categories: The categories of this BrandedFoodObjectItemsInner.
        :param countries: The countries of this BrandedFoodObjectItemsInner.
        :param country_details: The country_details of this BrandedFoodObjectItemsInner.
        :param description: The description of this BrandedFoodObjectItemsInner.
        :param diet_flags: The diet_flags of this BrandedFoodObjectItemsInner.
        :param diet_labels: The diet_labels of this BrandedFoodObjectItemsInner.
        :param has_english_ingredients: The has_english_ingredients of this BrandedFoodObjectItemsInner.
        :param ingredient_list: The ingredient_list of this BrandedFoodObjectItemsInner.
        :param ingredients: The ingredients of this BrandedFoodObjectItemsInner.
        :param keywords: The keywords of this BrandedFoodObjectItemsInner.
        :param minerals: The minerals of this BrandedFoodObjectItemsInner.
        :param name: The name of this BrandedFoodObjectItemsInner.
        :param nutrients: The nutrients of this BrandedFoodObjectItemsInner.
        :param package: The package of this BrandedFoodObjectItemsInner.
        :param packaging_photos: The packaging_photos of this BrandedFoodObjectItemsInner.
        :param palm_oil_ingredients: The palm_oil_ingredients of this BrandedFoodObjectItemsInner.
        :param serving: The serving of this BrandedFoodObjectItemsInner.
        :param traces: The traces of this BrandedFoodObjectItemsInner.
        :param vitamins: The vitamins of this BrandedFoodObjectItemsInner.
        """
        self.openapi_types = {
            'allergens': List[str],
            'barcode': str,
            'brand': str,
            'brand_list': List[str],
            'categories': List[str],
            'countries': List[str],
            'country_details': BrandedFoodObjectItemsInnerCountryDetails,
            'description': str,
            'diet_flags': List[BrandedFoodObjectItemsInnerDietFlagsInner],
            'diet_labels': BrandedFoodObjectItemsInnerDietLabels,
            'has_english_ingredients': bool,
            'ingredient_list': List[str],
            'ingredients': str,
            'keywords': List[str],
            'minerals': List[str],
            'name': str,
            'nutrients': List[BrandedFoodObjectItemsInnerNutrientsInner],
            'package': BrandedFoodObjectItemsInnerPackage,
            'packaging_photos': BrandedFoodObjectItemsInnerPackagingPhotos,
            'palm_oil_ingredients': List[str],
            'serving': BrandedFoodObjectItemsInnerServing,
            'traces': List[str],
            'vitamins': List[str]
        }

        self.attribute_map = {
            'allergens': 'allergens',
            'barcode': 'barcode',
            'brand': 'brand',
            'brand_list': 'brand_list',
            'categories': 'categories',
            'countries': 'countries',
            'country_details': 'country_details',
            'description': 'description',
            'diet_flags': 'diet_flags',
            'diet_labels': 'diet_labels',
            'has_english_ingredients': 'has_english_ingredients',
            'ingredient_list': 'ingredient_list',
            'ingredients': 'ingredients',
            'keywords': 'keywords',
            'minerals': 'minerals',
            'name': 'name',
            'nutrients': 'nutrients',
            'package': 'package',
            'packaging_photos': 'packaging_photos',
            'palm_oil_ingredients': 'palm_oil_ingredients',
            'serving': 'serving',
            'traces': 'traces',
            'vitamins': 'vitamins'
        }

        self._allergens = allergens
        self._barcode = barcode
        self._brand = brand
        self._brand_list = brand_list
        self._categories = categories
        self._countries = countries
        self._country_details = country_details
        self._description = description
        self._diet_flags = diet_flags
        self._diet_labels = diet_labels
        self._has_english_ingredients = has_english_ingredients
        self._ingredient_list = ingredient_list
        self._ingredients = ingredients
        self._keywords = keywords
        self._minerals = minerals
        self._name = name
        self._nutrients = nutrients
        self._package = package
        self._packaging_photos = packaging_photos
        self._palm_oil_ingredients = palm_oil_ingredients
        self._serving = serving
        self._traces = traces
        self._vitamins = vitamins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandedFoodObjectItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandedFoodObject_items_inner of this BrandedFoodObjectItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allergens(self):
        """Gets the allergens of this BrandedFoodObjectItemsInner.

        An array of ingredients in this item that may cause allergic reactions in people

        :return: The allergens of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._allergens

    @allergens.setter
    def allergens(self, allergens):
        """Sets the allergens of this BrandedFoodObjectItemsInner.

        An array of ingredients in this item that may cause allergic reactions in people

        :param allergens: The allergens of this BrandedFoodObjectItemsInner.
        :type allergens: List[str]
        """

        self._allergens = allergens

    @property
    def barcode(self):
        """Gets the barcode of this BrandedFoodObjectItemsInner.

        EAN/UPC barcode

        :return: The barcode of this BrandedFoodObjectItemsInner.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this BrandedFoodObjectItemsInner.

        EAN/UPC barcode

        :param barcode: The barcode of this BrandedFoodObjectItemsInner.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def brand(self):
        """Gets the brand of this BrandedFoodObjectItemsInner.

        The brand name that owns this item

        :return: The brand of this BrandedFoodObjectItemsInner.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this BrandedFoodObjectItemsInner.

        The brand name that owns this item

        :param brand: The brand of this BrandedFoodObjectItemsInner.
        :type brand: str
        """

        self._brand = brand

    @property
    def brand_list(self):
        """Gets the brand_list of this BrandedFoodObjectItemsInner.

        An array of brands we have associated with this item. Some items are sold by more than 1 brand.

        :return: The brand_list of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._brand_list

    @brand_list.setter
    def brand_list(self, brand_list):
        """Sets the brand_list of this BrandedFoodObjectItemsInner.

        An array of brands we have associated with this item. Some items are sold by more than 1 brand.

        :param brand_list: The brand_list of this BrandedFoodObjectItemsInner.
        :type brand_list: List[str]
        """

        self._brand_list = brand_list

    @property
    def categories(self):
        """Gets the categories of this BrandedFoodObjectItemsInner.


        :return: The categories of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this BrandedFoodObjectItemsInner.


        :param categories: The categories of this BrandedFoodObjectItemsInner.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def countries(self):
        """Gets the countries of this BrandedFoodObjectItemsInner.

        An array of countries where this item is sold

        :return: The countries of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this BrandedFoodObjectItemsInner.

        An array of countries where this item is sold

        :param countries: The countries of this BrandedFoodObjectItemsInner.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def country_details(self):
        """Gets the country_details of this BrandedFoodObjectItemsInner.


        :return: The country_details of this BrandedFoodObjectItemsInner.
        :rtype: BrandedFoodObjectItemsInnerCountryDetails
        """
        return self._country_details

    @country_details.setter
    def country_details(self, country_details):
        """Sets the country_details of this BrandedFoodObjectItemsInner.


        :param country_details: The country_details of this BrandedFoodObjectItemsInner.
        :type country_details: BrandedFoodObjectItemsInnerCountryDetails
        """

        self._country_details = country_details

    @property
    def description(self):
        """Gets the description of this BrandedFoodObjectItemsInner.

        A description of this item

        :return: The description of this BrandedFoodObjectItemsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BrandedFoodObjectItemsInner.

        A description of this item

        :param description: The description of this BrandedFoodObjectItemsInner.
        :type description: str
        """

        self._description = description

    @property
    def diet_flags(self):
        """Gets the diet_flags of this BrandedFoodObjectItemsInner.

        An array of ingredient objects that were flagged while grading this item for compatibility with each diet

        :return: The diet_flags of this BrandedFoodObjectItemsInner.
        :rtype: List[BrandedFoodObjectItemsInnerDietFlagsInner]
        """
        return self._diet_flags

    @diet_flags.setter
    def diet_flags(self, diet_flags):
        """Sets the diet_flags of this BrandedFoodObjectItemsInner.

        An array of ingredient objects that were flagged while grading this item for compatibility with each diet

        :param diet_flags: The diet_flags of this BrandedFoodObjectItemsInner.
        :type diet_flags: List[BrandedFoodObjectItemsInnerDietFlagsInner]
        """

        self._diet_flags = diet_flags

    @property
    def diet_labels(self):
        """Gets the diet_labels of this BrandedFoodObjectItemsInner.


        :return: The diet_labels of this BrandedFoodObjectItemsInner.
        :rtype: BrandedFoodObjectItemsInnerDietLabels
        """
        return self._diet_labels

    @diet_labels.setter
    def diet_labels(self, diet_labels):
        """Sets the diet_labels of this BrandedFoodObjectItemsInner.


        :param diet_labels: The diet_labels of this BrandedFoodObjectItemsInner.
        :type diet_labels: BrandedFoodObjectItemsInnerDietLabels
        """

        self._diet_labels = diet_labels

    @property
    def has_english_ingredients(self):
        """Gets the has_english_ingredients of this BrandedFoodObjectItemsInner.

        A boolean indicating if we have English ingredients for this item

        :return: The has_english_ingredients of this BrandedFoodObjectItemsInner.
        :rtype: bool
        """
        return self._has_english_ingredients

    @has_english_ingredients.setter
    def has_english_ingredients(self, has_english_ingredients):
        """Sets the has_english_ingredients of this BrandedFoodObjectItemsInner.

        A boolean indicating if we have English ingredients for this item

        :param has_english_ingredients: The has_english_ingredients of this BrandedFoodObjectItemsInner.
        :type has_english_ingredients: bool
        """

        self._has_english_ingredients = has_english_ingredients

    @property
    def ingredient_list(self):
        """Gets the ingredient_list of this BrandedFoodObjectItemsInner.

        An array of this item's ingredients

        :return: The ingredient_list of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._ingredient_list

    @ingredient_list.setter
    def ingredient_list(self, ingredient_list):
        """Sets the ingredient_list of this BrandedFoodObjectItemsInner.

        An array of this item's ingredients

        :param ingredient_list: The ingredient_list of this BrandedFoodObjectItemsInner.
        :type ingredient_list: List[str]
        """

        self._ingredient_list = ingredient_list

    @property
    def ingredients(self):
        """Gets the ingredients of this BrandedFoodObjectItemsInner.

        This food item's ingredients from greatest quantity to least

        :return: The ingredients of this BrandedFoodObjectItemsInner.
        :rtype: str
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this BrandedFoodObjectItemsInner.

        This food item's ingredients from greatest quantity to least

        :param ingredients: The ingredients of this BrandedFoodObjectItemsInner.
        :type ingredients: str
        """

        self._ingredients = ingredients

    @property
    def keywords(self):
        """Gets the keywords of this BrandedFoodObjectItemsInner.

        An array of keywords that can be used to describe this item

        :return: The keywords of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this BrandedFoodObjectItemsInner.

        An array of keywords that can be used to describe this item

        :param keywords: The keywords of this BrandedFoodObjectItemsInner.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def minerals(self):
        """Gets the minerals of this BrandedFoodObjectItemsInner.

        An array of minerals that this item contains

        :return: The minerals of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._minerals

    @minerals.setter
    def minerals(self, minerals):
        """Sets the minerals of this BrandedFoodObjectItemsInner.

        An array of minerals that this item contains

        :param minerals: The minerals of this BrandedFoodObjectItemsInner.
        :type minerals: List[str]
        """

        self._minerals = minerals

    @property
    def name(self):
        """Gets the name of this BrandedFoodObjectItemsInner.

        Item name as provided by brand owner or as shown on packaging

        :return: The name of this BrandedFoodObjectItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandedFoodObjectItemsInner.

        Item name as provided by brand owner or as shown on packaging

        :param name: The name of this BrandedFoodObjectItemsInner.
        :type name: str
        """

        self._name = name

    @property
    def nutrients(self):
        """Gets the nutrients of this BrandedFoodObjectItemsInner.

        An array containing nutrient informatio objects for this food item

        :return: The nutrients of this BrandedFoodObjectItemsInner.
        :rtype: List[BrandedFoodObjectItemsInnerNutrientsInner]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this BrandedFoodObjectItemsInner.

        An array containing nutrient informatio objects for this food item

        :param nutrients: The nutrients of this BrandedFoodObjectItemsInner.
        :type nutrients: List[BrandedFoodObjectItemsInnerNutrientsInner]
        """

        self._nutrients = nutrients

    @property
    def package(self):
        """Gets the package of this BrandedFoodObjectItemsInner.


        :return: The package of this BrandedFoodObjectItemsInner.
        :rtype: BrandedFoodObjectItemsInnerPackage
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this BrandedFoodObjectItemsInner.


        :param package: The package of this BrandedFoodObjectItemsInner.
        :type package: BrandedFoodObjectItemsInnerPackage
        """

        self._package = package

    @property
    def packaging_photos(self):
        """Gets the packaging_photos of this BrandedFoodObjectItemsInner.


        :return: The packaging_photos of this BrandedFoodObjectItemsInner.
        :rtype: BrandedFoodObjectItemsInnerPackagingPhotos
        """
        return self._packaging_photos

    @packaging_photos.setter
    def packaging_photos(self, packaging_photos):
        """Sets the packaging_photos of this BrandedFoodObjectItemsInner.


        :param packaging_photos: The packaging_photos of this BrandedFoodObjectItemsInner.
        :type packaging_photos: BrandedFoodObjectItemsInnerPackagingPhotos
        """

        self._packaging_photos = packaging_photos

    @property
    def palm_oil_ingredients(self):
        """Gets the palm_oil_ingredients of this BrandedFoodObjectItemsInner.

        An array of ingredients made from palm oil

        :return: The palm_oil_ingredients of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._palm_oil_ingredients

    @palm_oil_ingredients.setter
    def palm_oil_ingredients(self, palm_oil_ingredients):
        """Sets the palm_oil_ingredients of this BrandedFoodObjectItemsInner.

        An array of ingredients made from palm oil

        :param palm_oil_ingredients: The palm_oil_ingredients of this BrandedFoodObjectItemsInner.
        :type palm_oil_ingredients: List[str]
        """

        self._palm_oil_ingredients = palm_oil_ingredients

    @property
    def serving(self):
        """Gets the serving of this BrandedFoodObjectItemsInner.


        :return: The serving of this BrandedFoodObjectItemsInner.
        :rtype: BrandedFoodObjectItemsInnerServing
        """
        return self._serving

    @serving.setter
    def serving(self, serving):
        """Sets the serving of this BrandedFoodObjectItemsInner.


        :param serving: The serving of this BrandedFoodObjectItemsInner.
        :type serving: BrandedFoodObjectItemsInnerServing
        """

        self._serving = serving

    @property
    def traces(self):
        """Gets the traces of this BrandedFoodObjectItemsInner.

        An array of trace ingredients that may be found in this item

        :return: The traces of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._traces

    @traces.setter
    def traces(self, traces):
        """Sets the traces of this BrandedFoodObjectItemsInner.

        An array of trace ingredients that may be found in this item

        :param traces: The traces of this BrandedFoodObjectItemsInner.
        :type traces: List[str]
        """

        self._traces = traces

    @property
    def vitamins(self):
        """Gets the vitamins of this BrandedFoodObjectItemsInner.

        An array of vitamins that are found in this item

        :return: The vitamins of this BrandedFoodObjectItemsInner.
        :rtype: List[str]
        """
        return self._vitamins

    @vitamins.setter
    def vitamins(self, vitamins):
        """Sets the vitamins of this BrandedFoodObjectItemsInner.

        An array of vitamins that are found in this item

        :param vitamins: The vitamins of this BrandedFoodObjectItemsInner.
        :type vitamins: List[str]
        """

        self._vitamins = vitamins
