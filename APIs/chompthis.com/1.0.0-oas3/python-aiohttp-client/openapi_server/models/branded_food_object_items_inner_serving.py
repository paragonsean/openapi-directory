# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrandedFoodObjectItemsInnerServing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, measurement_unit: str=None, size: str=None, size_fulltext: str=None):
        """BrandedFoodObjectItemsInnerServing - a model defined in OpenAPI

        :param measurement_unit: The measurement_unit of this BrandedFoodObjectItemsInnerServing.
        :param size: The size of this BrandedFoodObjectItemsInnerServing.
        :param size_fulltext: The size_fulltext of this BrandedFoodObjectItemsInnerServing.
        """
        self.openapi_types = {
            'measurement_unit': str,
            'size': str,
            'size_fulltext': str
        }

        self.attribute_map = {
            'measurement_unit': 'measurement_unit',
            'size': 'size',
            'size_fulltext': 'size_fulltext'
        }

        self._measurement_unit = measurement_unit
        self._size = size
        self._size_fulltext = size_fulltext

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandedFoodObjectItemsInnerServing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandedFoodObject_items_inner_serving of this BrandedFoodObjectItemsInnerServing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this BrandedFoodObjectItemsInnerServing.

        Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)

        :return: The measurement_unit of this BrandedFoodObjectItemsInnerServing.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this BrandedFoodObjectItemsInnerServing.

        Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)

        :param measurement_unit: The measurement_unit of this BrandedFoodObjectItemsInnerServing.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def size(self):
        """Gets the size of this BrandedFoodObjectItemsInnerServing.

        Serving size

        :return: The size of this BrandedFoodObjectItemsInnerServing.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BrandedFoodObjectItemsInnerServing.

        Serving size

        :param size: The size of this BrandedFoodObjectItemsInnerServing.
        :type size: str
        """

        self._size = size

    @property
    def size_fulltext(self):
        """Gets the size_fulltext of this BrandedFoodObjectItemsInnerServing.

        Serving size description

        :return: The size_fulltext of this BrandedFoodObjectItemsInnerServing.
        :rtype: str
        """
        return self._size_fulltext

    @size_fulltext.setter
    def size_fulltext(self, size_fulltext):
        """Sets the size_fulltext of this BrandedFoodObjectItemsInnerServing.

        Serving size description

        :param size_fulltext: The size_fulltext of this BrandedFoodObjectItemsInnerServing.
        :type size_fulltext: str
        """

        self._size_fulltext = size_fulltext
