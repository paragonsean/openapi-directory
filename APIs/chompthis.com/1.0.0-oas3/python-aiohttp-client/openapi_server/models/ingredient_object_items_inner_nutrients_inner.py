# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngredientObjectItemsInnerNutrientsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_points: int=None, description: str=None, footnote: str=None, max: float=None, measurement_unit: str=None, median: float=None, min: float=None, name: str=None, per_100g: float=None, rank: int=None):
        """IngredientObjectItemsInnerNutrientsInner - a model defined in OpenAPI

        :param data_points: The data_points of this IngredientObjectItemsInnerNutrientsInner.
        :param description: The description of this IngredientObjectItemsInnerNutrientsInner.
        :param footnote: The footnote of this IngredientObjectItemsInnerNutrientsInner.
        :param max: The max of this IngredientObjectItemsInnerNutrientsInner.
        :param measurement_unit: The measurement_unit of this IngredientObjectItemsInnerNutrientsInner.
        :param median: The median of this IngredientObjectItemsInnerNutrientsInner.
        :param min: The min of this IngredientObjectItemsInnerNutrientsInner.
        :param name: The name of this IngredientObjectItemsInnerNutrientsInner.
        :param per_100g: The per_100g of this IngredientObjectItemsInnerNutrientsInner.
        :param rank: The rank of this IngredientObjectItemsInnerNutrientsInner.
        """
        self.openapi_types = {
            'data_points': int,
            'description': str,
            'footnote': str,
            'max': float,
            'measurement_unit': str,
            'median': float,
            'min': float,
            'name': str,
            'per_100g': float,
            'rank': int
        }

        self.attribute_map = {
            'data_points': 'data_points',
            'description': 'description',
            'footnote': 'footnote',
            'max': 'max',
            'measurement_unit': 'measurement_unit',
            'median': 'median',
            'min': 'min',
            'name': 'name',
            'per_100g': 'per_100g',
            'rank': 'rank'
        }

        self._data_points = data_points
        self._description = description
        self._footnote = footnote
        self._max = max
        self._measurement_unit = measurement_unit
        self._median = median
        self._min = min
        self._name = name
        self._per_100g = per_100g
        self._rank = rank

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngredientObjectItemsInnerNutrientsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngredientObject_items_inner_nutrients_inner of this IngredientObjectItemsInnerNutrientsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_points(self):
        """Gets the data_points of this IngredientObjectItemsInnerNutrientsInner.

        Number of observations on which the value is based

        :return: The data_points of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this IngredientObjectItemsInnerNutrientsInner.

        Number of observations on which the value is based

        :param data_points: The data_points of this IngredientObjectItemsInnerNutrientsInner.
        :type data_points: int
        """

        self._data_points = data_points

    @property
    def description(self):
        """Gets the description of this IngredientObjectItemsInnerNutrientsInner.

        Description of the nutrient source

        :return: The description of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IngredientObjectItemsInnerNutrientsInner.

        Description of the nutrient source

        :param description: The description of this IngredientObjectItemsInnerNutrientsInner.
        :type description: str
        """

        self._description = description

    @property
    def footnote(self):
        """Gets the footnote of this IngredientObjectItemsInnerNutrientsInner.

        Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.

        :return: The footnote of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: str
        """
        return self._footnote

    @footnote.setter
    def footnote(self, footnote):
        """Sets the footnote of this IngredientObjectItemsInnerNutrientsInner.

        Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.

        :param footnote: The footnote of this IngredientObjectItemsInnerNutrientsInner.
        :type footnote: str
        """

        self._footnote = footnote

    @property
    def max(self):
        """Gets the max of this IngredientObjectItemsInnerNutrientsInner.

        Maximum nutrient value

        :return: The max of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this IngredientObjectItemsInnerNutrientsInner.

        Maximum nutrient value

        :param max: The max of this IngredientObjectItemsInnerNutrientsInner.
        :type max: float
        """

        self._max = max

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this IngredientObjectItemsInnerNutrientsInner.

        The unit used for the measure of this nutrient

        :return: The measurement_unit of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this IngredientObjectItemsInnerNutrientsInner.

        The unit used for the measure of this nutrient

        :param measurement_unit: The measurement_unit of this IngredientObjectItemsInnerNutrientsInner.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def median(self):
        """Gets the median of this IngredientObjectItemsInnerNutrientsInner.

        Median nutrient value

        :return: The median of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this IngredientObjectItemsInnerNutrientsInner.

        Median nutrient value

        :param median: The median of this IngredientObjectItemsInnerNutrientsInner.
        :type median: float
        """

        self._median = median

    @property
    def min(self):
        """Gets the min of this IngredientObjectItemsInnerNutrientsInner.

        Minimum nutrient value

        :return: The min of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this IngredientObjectItemsInnerNutrientsInner.

        Minimum nutrient value

        :param min: The min of this IngredientObjectItemsInnerNutrientsInner.
        :type min: float
        """

        self._min = min

    @property
    def name(self):
        """Gets the name of this IngredientObjectItemsInnerNutrientsInner.

        Nutrient name

        :return: The name of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IngredientObjectItemsInnerNutrientsInner.

        Nutrient name

        :param name: The name of this IngredientObjectItemsInnerNutrientsInner.
        :type name: str
        """

        self._name = name

    @property
    def per_100g(self):
        """Gets the per_100g of this IngredientObjectItemsInnerNutrientsInner.

        Amount of the nutrient per 100g of food

        :return: The per_100g of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: float
        """
        return self._per_100g

    @per_100g.setter
    def per_100g(self, per_100g):
        """Sets the per_100g of this IngredientObjectItemsInnerNutrientsInner.

        Amount of the nutrient per 100g of food

        :param per_100g: The per_100g of this IngredientObjectItemsInnerNutrientsInner.
        :type per_100g: float
        """

        self._per_100g = per_100g

    @property
    def rank(self):
        """Gets the rank of this IngredientObjectItemsInnerNutrientsInner.

        Nutrient rank

        :return: The rank of this IngredientObjectItemsInnerNutrientsInner.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this IngredientObjectItemsInnerNutrientsInner.

        Nutrient rank

        :param rank: The rank of this IngredientObjectItemsInnerNutrientsInner.
        :type rank: int
        """

        self._rank = rank
