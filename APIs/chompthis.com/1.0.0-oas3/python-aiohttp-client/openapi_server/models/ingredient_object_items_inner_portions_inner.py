# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngredientObjectItemsInnerPortionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_points: int=None, description: str=None, footnote: str=None, gram_weight: float=None, measurement_unit: str=None, modifier: str=None):
        """IngredientObjectItemsInnerPortionsInner - a model defined in OpenAPI

        :param data_points: The data_points of this IngredientObjectItemsInnerPortionsInner.
        :param description: The description of this IngredientObjectItemsInnerPortionsInner.
        :param footnote: The footnote of this IngredientObjectItemsInnerPortionsInner.
        :param gram_weight: The gram_weight of this IngredientObjectItemsInnerPortionsInner.
        :param measurement_unit: The measurement_unit of this IngredientObjectItemsInnerPortionsInner.
        :param modifier: The modifier of this IngredientObjectItemsInnerPortionsInner.
        """
        self.openapi_types = {
            'data_points': int,
            'description': str,
            'footnote': str,
            'gram_weight': float,
            'measurement_unit': str,
            'modifier': str
        }

        self.attribute_map = {
            'data_points': 'data_points',
            'description': 'description',
            'footnote': 'footnote',
            'gram_weight': 'gram_weight',
            'measurement_unit': 'measurement_unit',
            'modifier': 'modifier'
        }

        self._data_points = data_points
        self._description = description
        self._footnote = footnote
        self._gram_weight = gram_weight
        self._measurement_unit = measurement_unit
        self._modifier = modifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngredientObjectItemsInnerPortionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngredientObject_items_inner_portions_inner of this IngredientObjectItemsInnerPortionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_points(self):
        """Gets the data_points of this IngredientObjectItemsInnerPortionsInner.

        The number of observations on which the measure is based

        :return: The data_points of this IngredientObjectItemsInnerPortionsInner.
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this IngredientObjectItemsInnerPortionsInner.

        The number of observations on which the measure is based

        :param data_points: The data_points of this IngredientObjectItemsInnerPortionsInner.
        :type data_points: int
        """

        self._data_points = data_points

    @property
    def description(self):
        """Gets the description of this IngredientObjectItemsInnerPortionsInner.

        Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.

        :return: The description of this IngredientObjectItemsInnerPortionsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IngredientObjectItemsInnerPortionsInner.

        Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.

        :param description: The description of this IngredientObjectItemsInnerPortionsInner.
        :type description: str
        """

        self._description = description

    @property
    def footnote(self):
        """Gets the footnote of this IngredientObjectItemsInnerPortionsInner.

        Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.

        :return: The footnote of this IngredientObjectItemsInnerPortionsInner.
        :rtype: str
        """
        return self._footnote

    @footnote.setter
    def footnote(self, footnote):
        """Sets the footnote of this IngredientObjectItemsInnerPortionsInner.

        Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.

        :param footnote: The footnote of this IngredientObjectItemsInnerPortionsInner.
        :type footnote: str
        """

        self._footnote = footnote

    @property
    def gram_weight(self):
        """Gets the gram_weight of this IngredientObjectItemsInnerPortionsInner.

        The weight of the measure in grams

        :return: The gram_weight of this IngredientObjectItemsInnerPortionsInner.
        :rtype: float
        """
        return self._gram_weight

    @gram_weight.setter
    def gram_weight(self, gram_weight):
        """Sets the gram_weight of this IngredientObjectItemsInnerPortionsInner.

        The weight of the measure in grams

        :param gram_weight: The gram_weight of this IngredientObjectItemsInnerPortionsInner.
        :type gram_weight: float
        """

        self._gram_weight = gram_weight

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this IngredientObjectItemsInnerPortionsInner.

        The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)

        :return: The measurement_unit of this IngredientObjectItemsInnerPortionsInner.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this IngredientObjectItemsInnerPortionsInner.

        The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)

        :param measurement_unit: The measurement_unit of this IngredientObjectItemsInnerPortionsInner.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def modifier(self):
        """Gets the modifier of this IngredientObjectItemsInnerPortionsInner.

        Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)

        :return: The modifier of this IngredientObjectItemsInnerPortionsInner.
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this IngredientObjectItemsInnerPortionsInner.

        Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)

        :param modifier: The modifier of this IngredientObjectItemsInnerPortionsInner.
        :type modifier: str
        """

        self._modifier = modifier
