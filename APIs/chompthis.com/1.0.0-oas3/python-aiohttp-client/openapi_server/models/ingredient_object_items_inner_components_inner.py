# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngredientObjectItemsInnerComponentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_points: int=None, gram_weight: float=None, is_refuse: bool=None, name: str=None, pct_weight: float=None):
        """IngredientObjectItemsInnerComponentsInner - a model defined in OpenAPI

        :param data_points: The data_points of this IngredientObjectItemsInnerComponentsInner.
        :param gram_weight: The gram_weight of this IngredientObjectItemsInnerComponentsInner.
        :param is_refuse: The is_refuse of this IngredientObjectItemsInnerComponentsInner.
        :param name: The name of this IngredientObjectItemsInnerComponentsInner.
        :param pct_weight: The pct_weight of this IngredientObjectItemsInnerComponentsInner.
        """
        self.openapi_types = {
            'data_points': int,
            'gram_weight': float,
            'is_refuse': bool,
            'name': str,
            'pct_weight': float
        }

        self.attribute_map = {
            'data_points': 'data_points',
            'gram_weight': 'gram_weight',
            'is_refuse': 'is_refuse',
            'name': 'name',
            'pct_weight': 'pct_weight'
        }

        self._data_points = data_points
        self._gram_weight = gram_weight
        self._is_refuse = is_refuse
        self._name = name
        self._pct_weight = pct_weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngredientObjectItemsInnerComponentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngredientObject_items_inner_components_inner of this IngredientObjectItemsInnerComponentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_points(self):
        """Gets the data_points of this IngredientObjectItemsInnerComponentsInner.

        The number of obersvations on which the measure is based

        :return: The data_points of this IngredientObjectItemsInnerComponentsInner.
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this IngredientObjectItemsInnerComponentsInner.

        The number of obersvations on which the measure is based

        :param data_points: The data_points of this IngredientObjectItemsInnerComponentsInner.
        :type data_points: int
        """

        self._data_points = data_points

    @property
    def gram_weight(self):
        """Gets the gram_weight of this IngredientObjectItemsInnerComponentsInner.

        The weight of the component in grams

        :return: The gram_weight of this IngredientObjectItemsInnerComponentsInner.
        :rtype: float
        """
        return self._gram_weight

    @gram_weight.setter
    def gram_weight(self, gram_weight):
        """Sets the gram_weight of this IngredientObjectItemsInnerComponentsInner.

        The weight of the component in grams

        :param gram_weight: The gram_weight of this IngredientObjectItemsInnerComponentsInner.
        :type gram_weight: float
        """

        self._gram_weight = gram_weight

    @property
    def is_refuse(self):
        """Gets the is_refuse of this IngredientObjectItemsInnerComponentsInner.

        Whether the component is refuse, i.e. not edible

        :return: The is_refuse of this IngredientObjectItemsInnerComponentsInner.
        :rtype: bool
        """
        return self._is_refuse

    @is_refuse.setter
    def is_refuse(self, is_refuse):
        """Sets the is_refuse of this IngredientObjectItemsInnerComponentsInner.

        Whether the component is refuse, i.e. not edible

        :param is_refuse: The is_refuse of this IngredientObjectItemsInnerComponentsInner.
        :type is_refuse: bool
        """

        self._is_refuse = is_refuse

    @property
    def name(self):
        """Gets the name of this IngredientObjectItemsInnerComponentsInner.

        The kind of component, e.g. bone

        :return: The name of this IngredientObjectItemsInnerComponentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IngredientObjectItemsInnerComponentsInner.

        The kind of component, e.g. bone

        :param name: The name of this IngredientObjectItemsInnerComponentsInner.
        :type name: str
        """

        self._name = name

    @property
    def pct_weight(self):
        """Gets the pct_weight of this IngredientObjectItemsInnerComponentsInner.

        The weight of the component as a percentage of the total weight of the food

        :return: The pct_weight of this IngredientObjectItemsInnerComponentsInner.
        :rtype: float
        """
        return self._pct_weight

    @pct_weight.setter
    def pct_weight(self, pct_weight):
        """Sets the pct_weight of this IngredientObjectItemsInnerComponentsInner.

        The weight of the component as a percentage of the total weight of the food

        :param pct_weight: The pct_weight of this IngredientObjectItemsInnerComponentsInner.
        :type pct_weight: float
        """

        self._pct_weight = pct_weight
