/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IngredientObjectItemsInnerPortionsInner model module.
 * @module model/IngredientObjectItemsInnerPortionsInner
 * @version 1.0.0-oas3
 */
class IngredientObjectItemsInnerPortionsInner {
    /**
     * Constructs a new <code>IngredientObjectItemsInnerPortionsInner</code>.
     * An object containing information on a specific food portion found in this item
     * @alias module:model/IngredientObjectItemsInnerPortionsInner
     */
    constructor() { 
        
        IngredientObjectItemsInnerPortionsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IngredientObjectItemsInnerPortionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngredientObjectItemsInnerPortionsInner} obj Optional instance to populate.
     * @return {module:model/IngredientObjectItemsInnerPortionsInner} The populated <code>IngredientObjectItemsInnerPortionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngredientObjectItemsInnerPortionsInner();

            if (data.hasOwnProperty('data_points')) {
                obj['data_points'] = ApiClient.convertToType(data['data_points'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('footnote')) {
                obj['footnote'] = ApiClient.convertToType(data['footnote'], 'String');
            }
            if (data.hasOwnProperty('gram_weight')) {
                obj['gram_weight'] = ApiClient.convertToType(data['gram_weight'], 'Number');
            }
            if (data.hasOwnProperty('measurement_unit')) {
                obj['measurement_unit'] = ApiClient.convertToType(data['measurement_unit'], 'String');
            }
            if (data.hasOwnProperty('modifier')) {
                obj['modifier'] = ApiClient.convertToType(data['modifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngredientObjectItemsInnerPortionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngredientObjectItemsInnerPortionsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['footnote'] && !(typeof data['footnote'] === 'string' || data['footnote'] instanceof String)) {
            throw new Error("Expected the field `footnote` to be a primitive type in the JSON string but got " + data['footnote']);
        }
        // ensure the json data is a string
        if (data['measurement_unit'] && !(typeof data['measurement_unit'] === 'string' || data['measurement_unit'] instanceof String)) {
            throw new Error("Expected the field `measurement_unit` to be a primitive type in the JSON string but got " + data['measurement_unit']);
        }
        // ensure the json data is a string
        if (data['modifier'] && !(typeof data['modifier'] === 'string' || data['modifier'] instanceof String)) {
            throw new Error("Expected the field `modifier` to be a primitive type in the JSON string but got " + data['modifier']);
        }

        return true;
    }


}



/**
 * The number of observations on which the measure is based
 * @member {Number} data_points
 */
IngredientObjectItemsInnerPortionsInner.prototype['data_points'] = undefined;

/**
 * Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.
 * @member {String} description
 */
IngredientObjectItemsInnerPortionsInner.prototype['description'] = undefined;

/**
 * Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.
 * @member {String} footnote
 */
IngredientObjectItemsInnerPortionsInner.prototype['footnote'] = undefined;

/**
 * The weight of the measure in grams
 * @member {Number} gram_weight
 */
IngredientObjectItemsInnerPortionsInner.prototype['gram_weight'] = undefined;

/**
 * The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)
 * @member {String} measurement_unit
 */
IngredientObjectItemsInnerPortionsInner.prototype['measurement_unit'] = undefined;

/**
 * Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)
 * @member {String} modifier
 */
IngredientObjectItemsInnerPortionsInner.prototype['modifier'] = undefined;






export default IngredientObjectItemsInnerPortionsInner;

