/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IngredientObjectItemsInnerCalorieConversionFactor from './IngredientObjectItemsInnerCalorieConversionFactor';
import IngredientObjectItemsInnerComponentsInner from './IngredientObjectItemsInnerComponentsInner';
import IngredientObjectItemsInnerNutrientsInner from './IngredientObjectItemsInnerNutrientsInner';
import IngredientObjectItemsInnerPortionsInner from './IngredientObjectItemsInnerPortionsInner';

/**
 * The IngredientObjectItemsInner model module.
 * @module model/IngredientObjectItemsInner
 * @version 1.0.0-oas3
 */
class IngredientObjectItemsInner {
    /**
     * Constructs a new <code>IngredientObjectItemsInner</code>.
     * An object containing information for this specific item.
     * @alias module:model/IngredientObjectItemsInner
     */
    constructor() { 
        
        IngredientObjectItemsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IngredientObjectItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngredientObjectItemsInner} obj Optional instance to populate.
     * @return {module:model/IngredientObjectItemsInner} The populated <code>IngredientObjectItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngredientObjectItemsInner();

            if (data.hasOwnProperty('calorie_conversion_factor')) {
                obj['calorie_conversion_factor'] = IngredientObjectItemsInnerCalorieConversionFactor.constructFromObject(data['calorie_conversion_factor']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], [IngredientObjectItemsInnerComponentsInner]);
            }
            if (data.hasOwnProperty('footnote')) {
                obj['footnote'] = ApiClient.convertToType(data['footnote'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nutrients')) {
                obj['nutrients'] = ApiClient.convertToType(data['nutrients'], [IngredientObjectItemsInnerNutrientsInner]);
            }
            if (data.hasOwnProperty('portions')) {
                obj['portions'] = ApiClient.convertToType(data['portions'], [IngredientObjectItemsInnerPortionsInner]);
            }
            if (data.hasOwnProperty('protein_conversion_factor')) {
                obj['protein_conversion_factor'] = ApiClient.convertToType(data['protein_conversion_factor'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'String');
            }
            if (data.hasOwnProperty('search_term')) {
                obj['search_term'] = ApiClient.convertToType(data['search_term'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngredientObjectItemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngredientObjectItemsInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `calorie_conversion_factor`
        if (data['calorie_conversion_factor']) { // data not null
          IngredientObjectItemsInnerCalorieConversionFactor.validateJSON(data['calorie_conversion_factor']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        if (data['components']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['components'])) {
                throw new Error("Expected the field `components` to be an array in the JSON data but got " + data['components']);
            }
            // validate the optional field `components` (array)
            for (const item of data['components']) {
                IngredientObjectItemsInnerComponentsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['footnote'] && !(typeof data['footnote'] === 'string' || data['footnote'] instanceof String)) {
            throw new Error("Expected the field `footnote` to be a primitive type in the JSON string but got " + data['footnote']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['nutrients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nutrients'])) {
                throw new Error("Expected the field `nutrients` to be an array in the JSON data but got " + data['nutrients']);
            }
            // validate the optional field `nutrients` (array)
            for (const item of data['nutrients']) {
                IngredientObjectItemsInnerNutrientsInner.validateJSON(item);
            };
        }
        if (data['portions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['portions'])) {
                throw new Error("Expected the field `portions` to be an array in the JSON data but got " + data['portions']);
            }
            // validate the optional field `portions` (array)
            for (const item of data['portions']) {
                IngredientObjectItemsInnerPortionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['score'] && !(typeof data['score'] === 'string' || data['score'] instanceof String)) {
            throw new Error("Expected the field `score` to be a primitive type in the JSON string but got " + data['score']);
        }
        // ensure the json data is a string
        if (data['search_term'] && !(typeof data['search_term'] === 'string' || data['search_term'] instanceof String)) {
            throw new Error("Expected the field `search_term` to be a primitive type in the JSON string but got " + data['search_term']);
        }

        return true;
    }


}



/**
 * @member {module:model/IngredientObjectItemsInnerCalorieConversionFactor} calorie_conversion_factor
 */
IngredientObjectItemsInner.prototype['calorie_conversion_factor'] = undefined;

/**
 * @member {Array.<String>} categories
 */
IngredientObjectItemsInner.prototype['categories'] = undefined;

/**
 * Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is \"BRAND's Spicy Enchilada\" the common name may be \"Chicken enchilada\")
 * @member {String} common_name
 */
IngredientObjectItemsInner.prototype['common_name'] = undefined;

/**
 * An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
 * @member {Array.<module:model/IngredientObjectItemsInnerComponentsInner>} components
 */
IngredientObjectItemsInner.prototype['components'] = undefined;

/**
 * Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall
 * @member {String} footnote
 */
IngredientObjectItemsInner.prototype['footnote'] = undefined;

/**
 * Item name as provided by brand owner or as shown on packaging
 * @member {String} name
 */
IngredientObjectItemsInner.prototype['name'] = undefined;

/**
 * An array containing nutrient informatio objects for this food item
 * @member {Array.<module:model/IngredientObjectItemsInnerNutrientsInner>} nutrients
 */
IngredientObjectItemsInner.prototype['nutrients'] = undefined;

/**
 * An array of objects containing information on discrete amounts of a food found in this item
 * @member {Array.<module:model/IngredientObjectItemsInnerPortionsInner>} portions
 */
IngredientObjectItemsInner.prototype['portions'] = undefined;

/**
 * The multiplication factor used to calculate protein from nitrogen
 * @member {Number} protein_conversion_factor
 */
IngredientObjectItemsInner.prototype['protein_conversion_factor'] = undefined;

/**
 * A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item's name is to the original search term.
 * @member {String} score
 */
IngredientObjectItemsInner.prototype['score'] = undefined;

/**
 * The original search term that found this food item
 * @member {String} search_term
 */
IngredientObjectItemsInner.prototype['search_term'] = undefined;






export default IngredientObjectItemsInner;

