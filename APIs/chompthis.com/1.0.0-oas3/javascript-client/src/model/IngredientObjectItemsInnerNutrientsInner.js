/**
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IngredientObjectItemsInnerNutrientsInner model module.
 * @module model/IngredientObjectItemsInnerNutrientsInner
 * @version 1.0.0-oas3
 */
class IngredientObjectItemsInnerNutrientsInner {
    /**
     * Constructs a new <code>IngredientObjectItemsInnerNutrientsInner</code>.
     * An object containing information for a specific nutrient found in this food item
     * @alias module:model/IngredientObjectItemsInnerNutrientsInner
     */
    constructor() { 
        
        IngredientObjectItemsInnerNutrientsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IngredientObjectItemsInnerNutrientsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngredientObjectItemsInnerNutrientsInner} obj Optional instance to populate.
     * @return {module:model/IngredientObjectItemsInnerNutrientsInner} The populated <code>IngredientObjectItemsInnerNutrientsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngredientObjectItemsInnerNutrientsInner();

            if (data.hasOwnProperty('data_points')) {
                obj['data_points'] = ApiClient.convertToType(data['data_points'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('footnote')) {
                obj['footnote'] = ApiClient.convertToType(data['footnote'], 'String');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('measurement_unit')) {
                obj['measurement_unit'] = ApiClient.convertToType(data['measurement_unit'], 'String');
            }
            if (data.hasOwnProperty('median')) {
                obj['median'] = ApiClient.convertToType(data['median'], 'Number');
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = ApiClient.convertToType(data['min'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('per_100g')) {
                obj['per_100g'] = ApiClient.convertToType(data['per_100g'], 'Number');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngredientObjectItemsInnerNutrientsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngredientObjectItemsInnerNutrientsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['footnote'] && !(typeof data['footnote'] === 'string' || data['footnote'] instanceof String)) {
            throw new Error("Expected the field `footnote` to be a primitive type in the JSON string but got " + data['footnote']);
        }
        // ensure the json data is a string
        if (data['measurement_unit'] && !(typeof data['measurement_unit'] === 'string' || data['measurement_unit'] instanceof String)) {
            throw new Error("Expected the field `measurement_unit` to be a primitive type in the JSON string but got " + data['measurement_unit']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Number of observations on which the value is based
 * @member {Number} data_points
 */
IngredientObjectItemsInnerNutrientsInner.prototype['data_points'] = undefined;

/**
 * Description of the nutrient source
 * @member {String} description
 */
IngredientObjectItemsInnerNutrientsInner.prototype['description'] = undefined;

/**
 * Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.
 * @member {String} footnote
 */
IngredientObjectItemsInnerNutrientsInner.prototype['footnote'] = undefined;

/**
 * Maximum nutrient value
 * @member {Number} max
 */
IngredientObjectItemsInnerNutrientsInner.prototype['max'] = undefined;

/**
 * The unit used for the measure of this nutrient
 * @member {String} measurement_unit
 */
IngredientObjectItemsInnerNutrientsInner.prototype['measurement_unit'] = undefined;

/**
 * Median nutrient value
 * @member {Number} median
 */
IngredientObjectItemsInnerNutrientsInner.prototype['median'] = undefined;

/**
 * Minimum nutrient value
 * @member {Number} min
 */
IngredientObjectItemsInnerNutrientsInner.prototype['min'] = undefined;

/**
 * Nutrient name
 * @member {String} name
 */
IngredientObjectItemsInnerNutrientsInner.prototype['name'] = undefined;

/**
 * Amount of the nutrient per 100g of food
 * @member {Number} per_100g
 */
IngredientObjectItemsInnerNutrientsInner.prototype['per_100g'] = undefined;

/**
 * Nutrient rank
 * @member {Number} rank
 */
IngredientObjectItemsInnerNutrientsInner.prototype['rank'] = undefined;






export default IngredientObjectItemsInnerNutrientsInner;

