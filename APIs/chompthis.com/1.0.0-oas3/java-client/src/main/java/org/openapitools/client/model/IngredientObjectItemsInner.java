/*
 * Chomp Food Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IngredientObjectItemsInnerCalorieConversionFactor;
import org.openapitools.client.model.IngredientObjectItemsInnerComponentsInner;
import org.openapitools.client.model.IngredientObjectItemsInnerNutrientsInner;
import org.openapitools.client.model.IngredientObjectItemsInnerPortionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing information for this specific item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:22.963103-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IngredientObjectItemsInner {
  public static final String SERIALIZED_NAME_CALORIE_CONVERSION_FACTOR = "calorie_conversion_factor";
  @SerializedName(SERIALIZED_NAME_CALORIE_CONVERSION_FACTOR)
  private IngredientObjectItemsInnerCalorieConversionFactor calorieConversionFactor;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMON_NAME = "common_name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<IngredientObjectItemsInnerComponentsInner> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOOTNOTE = "footnote";
  @SerializedName(SERIALIZED_NAME_FOOTNOTE)
  private String footnote;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUTRIENTS = "nutrients";
  @SerializedName(SERIALIZED_NAME_NUTRIENTS)
  private List<IngredientObjectItemsInnerNutrientsInner> nutrients = new ArrayList<>();

  public static final String SERIALIZED_NAME_PORTIONS = "portions";
  @SerializedName(SERIALIZED_NAME_PORTIONS)
  private List<IngredientObjectItemsInnerPortionsInner> portions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTEIN_CONVERSION_FACTOR = "protein_conversion_factor";
  @SerializedName(SERIALIZED_NAME_PROTEIN_CONVERSION_FACTOR)
  private BigDecimal proteinConversionFactor;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SEARCH_TERM = "search_term";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERM)
  private String searchTerm;

  public IngredientObjectItemsInner() {
  }

  public IngredientObjectItemsInner calorieConversionFactor(IngredientObjectItemsInnerCalorieConversionFactor calorieConversionFactor) {
    this.calorieConversionFactor = calorieConversionFactor;
    return this;
  }

  /**
   * Get calorieConversionFactor
   * @return calorieConversionFactor
   */
  @javax.annotation.Nullable
  public IngredientObjectItemsInnerCalorieConversionFactor getCalorieConversionFactor() {
    return calorieConversionFactor;
  }

  public void setCalorieConversionFactor(IngredientObjectItemsInnerCalorieConversionFactor calorieConversionFactor) {
    this.calorieConversionFactor = calorieConversionFactor;
  }


  public IngredientObjectItemsInner categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public IngredientObjectItemsInner addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public IngredientObjectItemsInner commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is \&quot;BRAND&#39;s Spicy Enchilada\&quot; the common name may be \&quot;Chicken enchilada\&quot;)
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public IngredientObjectItemsInner components(List<IngredientObjectItemsInnerComponentsInner> components) {
    this.components = components;
    return this;
  }

  public IngredientObjectItemsInner addComponentsItem(IngredientObjectItemsInnerComponentsInner componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
   * @return components
   */
  @javax.annotation.Nullable
  public List<IngredientObjectItemsInnerComponentsInner> getComponents() {
    return components;
  }

  public void setComponents(List<IngredientObjectItemsInnerComponentsInner> components) {
    this.components = components;
  }


  public IngredientObjectItemsInner footnote(String footnote) {
    this.footnote = footnote;
    return this;
  }

  /**
   * Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall
   * @return footnote
   */
  @javax.annotation.Nullable
  public String getFootnote() {
    return footnote;
  }

  public void setFootnote(String footnote) {
    this.footnote = footnote;
  }


  public IngredientObjectItemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Item name as provided by brand owner or as shown on packaging
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IngredientObjectItemsInner nutrients(List<IngredientObjectItemsInnerNutrientsInner> nutrients) {
    this.nutrients = nutrients;
    return this;
  }

  public IngredientObjectItemsInner addNutrientsItem(IngredientObjectItemsInnerNutrientsInner nutrientsItem) {
    if (this.nutrients == null) {
      this.nutrients = new ArrayList<>();
    }
    this.nutrients.add(nutrientsItem);
    return this;
  }

  /**
   * An array containing nutrient informatio objects for this food item
   * @return nutrients
   */
  @javax.annotation.Nullable
  public List<IngredientObjectItemsInnerNutrientsInner> getNutrients() {
    return nutrients;
  }

  public void setNutrients(List<IngredientObjectItemsInnerNutrientsInner> nutrients) {
    this.nutrients = nutrients;
  }


  public IngredientObjectItemsInner portions(List<IngredientObjectItemsInnerPortionsInner> portions) {
    this.portions = portions;
    return this;
  }

  public IngredientObjectItemsInner addPortionsItem(IngredientObjectItemsInnerPortionsInner portionsItem) {
    if (this.portions == null) {
      this.portions = new ArrayList<>();
    }
    this.portions.add(portionsItem);
    return this;
  }

  /**
   * An array of objects containing information on discrete amounts of a food found in this item
   * @return portions
   */
  @javax.annotation.Nullable
  public List<IngredientObjectItemsInnerPortionsInner> getPortions() {
    return portions;
  }

  public void setPortions(List<IngredientObjectItemsInnerPortionsInner> portions) {
    this.portions = portions;
  }


  public IngredientObjectItemsInner proteinConversionFactor(BigDecimal proteinConversionFactor) {
    this.proteinConversionFactor = proteinConversionFactor;
    return this;
  }

  /**
   * The multiplication factor used to calculate protein from nitrogen
   * @return proteinConversionFactor
   */
  @javax.annotation.Nullable
  public BigDecimal getProteinConversionFactor() {
    return proteinConversionFactor;
  }

  public void setProteinConversionFactor(BigDecimal proteinConversionFactor) {
    this.proteinConversionFactor = proteinConversionFactor;
  }


  public IngredientObjectItemsInner score(String score) {
    this.score = score;
    return this;
  }

  /**
   * A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item&#39;s name is to the original search term.
   * @return score
   */
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public IngredientObjectItemsInner searchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
    return this;
  }

  /**
   * The original search term that found this food item
   * @return searchTerm
   */
  @javax.annotation.Nullable
  public String getSearchTerm() {
    return searchTerm;
  }

  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngredientObjectItemsInner ingredientObjectItemsInner = (IngredientObjectItemsInner) o;
    return Objects.equals(this.calorieConversionFactor, ingredientObjectItemsInner.calorieConversionFactor) &&
        Objects.equals(this.categories, ingredientObjectItemsInner.categories) &&
        Objects.equals(this.commonName, ingredientObjectItemsInner.commonName) &&
        Objects.equals(this.components, ingredientObjectItemsInner.components) &&
        Objects.equals(this.footnote, ingredientObjectItemsInner.footnote) &&
        Objects.equals(this.name, ingredientObjectItemsInner.name) &&
        Objects.equals(this.nutrients, ingredientObjectItemsInner.nutrients) &&
        Objects.equals(this.portions, ingredientObjectItemsInner.portions) &&
        Objects.equals(this.proteinConversionFactor, ingredientObjectItemsInner.proteinConversionFactor) &&
        Objects.equals(this.score, ingredientObjectItemsInner.score) &&
        Objects.equals(this.searchTerm, ingredientObjectItemsInner.searchTerm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calorieConversionFactor, categories, commonName, components, footnote, name, nutrients, portions, proteinConversionFactor, score, searchTerm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngredientObjectItemsInner {\n");
    sb.append("    calorieConversionFactor: ").append(toIndentedString(calorieConversionFactor)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    footnote: ").append(toIndentedString(footnote)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nutrients: ").append(toIndentedString(nutrients)).append("\n");
    sb.append("    portions: ").append(toIndentedString(portions)).append("\n");
    sb.append("    proteinConversionFactor: ").append(toIndentedString(proteinConversionFactor)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calorie_conversion_factor");
    openapiFields.add("categories");
    openapiFields.add("common_name");
    openapiFields.add("components");
    openapiFields.add("footnote");
    openapiFields.add("name");
    openapiFields.add("nutrients");
    openapiFields.add("portions");
    openapiFields.add("protein_conversion_factor");
    openapiFields.add("score");
    openapiFields.add("search_term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngredientObjectItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngredientObjectItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngredientObjectItemsInner is not found in the empty JSON string", IngredientObjectItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngredientObjectItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngredientObjectItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `calorie_conversion_factor`
      if (jsonObj.get("calorie_conversion_factor") != null && !jsonObj.get("calorie_conversion_factor").isJsonNull()) {
        IngredientObjectItemsInnerCalorieConversionFactor.validateJsonElement(jsonObj.get("calorie_conversion_factor"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("common_name") != null && !jsonObj.get("common_name").isJsonNull()) && !jsonObj.get("common_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_name").toString()));
      }
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
        if (jsonArraycomponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
          }

          // validate the optional field `components` (array)
          for (int i = 0; i < jsonArraycomponents.size(); i++) {
            IngredientObjectItemsInnerComponentsInner.validateJsonElement(jsonArraycomponents.get(i));
          };
        }
      }
      if ((jsonObj.get("footnote") != null && !jsonObj.get("footnote").isJsonNull()) && !jsonObj.get("footnote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footnote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footnote").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("nutrients") != null && !jsonObj.get("nutrients").isJsonNull()) {
        JsonArray jsonArraynutrients = jsonObj.getAsJsonArray("nutrients");
        if (jsonArraynutrients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nutrients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nutrients` to be an array in the JSON string but got `%s`", jsonObj.get("nutrients").toString()));
          }

          // validate the optional field `nutrients` (array)
          for (int i = 0; i < jsonArraynutrients.size(); i++) {
            IngredientObjectItemsInnerNutrientsInner.validateJsonElement(jsonArraynutrients.get(i));
          };
        }
      }
      if (jsonObj.get("portions") != null && !jsonObj.get("portions").isJsonNull()) {
        JsonArray jsonArrayportions = jsonObj.getAsJsonArray("portions");
        if (jsonArrayportions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("portions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `portions` to be an array in the JSON string but got `%s`", jsonObj.get("portions").toString()));
          }

          // validate the optional field `portions` (array)
          for (int i = 0; i < jsonArrayportions.size(); i++) {
            IngredientObjectItemsInnerPortionsInner.validateJsonElement(jsonArrayportions.get(i));
          };
        }
      }
      if ((jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) && !jsonObj.get("score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("score").toString()));
      }
      if ((jsonObj.get("search_term") != null && !jsonObj.get("search_term").isJsonNull()) && !jsonObj.get("search_term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngredientObjectItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngredientObjectItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngredientObjectItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngredientObjectItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<IngredientObjectItemsInner>() {
           @Override
           public void write(JsonWriter out, IngredientObjectItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngredientObjectItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngredientObjectItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngredientObjectItemsInner
   * @throws IOException if the JSON string is invalid with respect to IngredientObjectItemsInner
   */
  public static IngredientObjectItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngredientObjectItemsInner.class);
  }

  /**
   * Convert an instance of IngredientObjectItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

