from typing import List, Dict
from aiohttp import web

from openapi_server.models.config_snmpv3 import ConfigSNMPv3
from openapi_server import util


async def protocol_snmpv3_access_add(request: web.Request, agent_num, group_name, prefix, security_model, security_level, context_match, read_view, write_view, notify_view) -> web.Response:
    """Adds a new access entry with the specified parameters.

    Adds a new access entry with the specified parameters.

    :param agent_num: Agent to add the SNMPv3 access
    :type agent_num: int
    :param group_name: SNMPv3 access name
    :type group_name: str
    :param prefix: SNMPv3 prefix
    :type prefix: str
    :param security_model: SNMPv3 access security model
    :type security_model: str
    :param security_level: SNMPv3 access security level
    :type security_level: str
    :param context_match: SNMPv3 access context match
    :type context_match: str
    :param read_view: SNMPv3 access read view
    :type read_view: str
    :param write_view: SNMPv3 access write view
    :type write_view: str
    :param notify_view: SNMPv3 access notify view
    :type notify_view: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_access_clear(request: web.Request, agent_num) -> web.Response:
    """Clears all access entries.

    Clears all access entries.

    :param agent_num: Agent to add the SNMPv3 access
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_access_del(request: web.Request, agent_num, access_name) -> web.Response:
    """Deletes the specified access entry.

    Deletes the specified access entry.

    :param agent_num: Agent to add the SNMPv3 access
    :type agent_num: int
    :param access_name: SNMPv3 access name
    :type access_name: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_access_list(request: web.Request, agent_num) -> web.Response:
    """Returns the current acccess entries as an array of strings.

    Returns the current acccess entries as an array of strings.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_get_config(request: web.Request, agent_num) -> web.Response:
    """Returns the SNMPv3 configuration.

    Returns the SNMPv3 configuration.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_get_context_engineid(request: web.Request, agent_num) -> web.Response:
    """Retrieves the contextEngineID for the agent instance.

    Retrieves the contextEngineID for the agent instance.

    :param agent_num: Agent to show the SNMPv3 engine
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_get_engineboots(request: web.Request, agent_num) -> web.Response:
    """Retrieves the number of times the agent has been restarted.

    Retrieves the number of times the agent has been restarted.

    :param agent_num: Agent to show the SNMPv3 engine
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_get_engineid(request: web.Request, agent_num) -> web.Response:
    """For started agents, retrieves the current engineID in use by the snmpv3 module.

    For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \\x01 23 45 67 89...

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_get_enginetime(request: web.Request, agent_num) -> web.Response:
    """Retrieves the time in seconds for which the agent has been running.

    Retrieves the time in seconds for which the agent has been running.

    :param agent_num: Agent to show the SNMPv3 engine
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_group_add(request: web.Request, agent_num, group_name, security_model, security_name) -> web.Response:
    """Adds a new group entry with the specified parameters.

    Adds a new group entry with the specified parameters.

    :param agent_num: Agent to add the SNMPv3 group
    :type agent_num: int
    :param group_name: SNMPv3 group name
    :type group_name: str
    :param security_model: SNMPv3 group security model
    :type security_model: str
    :param security_name: SNMPv3 group security name
    :type security_name: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_group_clear(request: web.Request, agent_num) -> web.Response:
    """Clears all group entries.

    Clears all group entries.

    :param agent_num: Agent to add the SNMPv3 group
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_group_del(request: web.Request, agent_num, group_name) -> web.Response:
    """Deletes the specified group entry.

    Deletes the specified group entry.

    :param agent_num: Agent to add the SNMPv3 group
    :type agent_num: int
    :param group_name: SNMPv3 group name
    :type group_name: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_group_list(request: web.Request, agent_num) -> web.Response:
    """Returns the current group entries as an array of strings.

    Returns the current group entries as an array of strings.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_set_config(request: web.Request, agent_num, parameter, value) -> web.Response:
    """Changes the SNMPv3 configuration.

    Changes the SNMPv3 configuration.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int
    :param parameter: SNMPv3 configuration parameter
    :type parameter: str
    :param value: SNMPv3 parameter value
    :type value: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_user_add(request: web.Request, agent_num, user_name, security_name, auth_protocol, auth_key, priv_protocol, priv_key) -> web.Response:
    """Adds a new user entry with the specified parameters.

    Adds a new user entry with the specified parameters.

    :param agent_num: Agent to add the SNMPv3 user
    :type agent_num: int
    :param user_name: SNMPv3 user name
    :type user_name: str
    :param security_name: SNMPv3 user security name
    :type security_name: str
    :param auth_protocol: SNMPv3 user authentication protocol
    :type auth_protocol: str
    :param auth_key: SNMPv3 user authentication key
    :type auth_key: str
    :param priv_protocol: SNMPv3 user privacy encryption protocol
    :type priv_protocol: str
    :param priv_key: SNMPv3 user privacy encryption key
    :type priv_key: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_user_clear(request: web.Request, agent_num) -> web.Response:
    """Clears all user entries.

    Clears all user entries.

    :param agent_num: Agent to add the SNMPv3 user
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_user_del(request: web.Request, agent_num, user_name) -> web.Response:
    """Deletes the specified user entry.

    Deletes the specified user entry.

    :param agent_num: Agent to add the SNMPv3 user
    :type agent_num: int
    :param user_name: SNMPv3 user name
    :type user_name: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_user_list(request: web.Request, agent_num) -> web.Response:
    """Returns the current user entries as a Tcl list.

    Returns the current user entries as a Tcl list.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_usm_save(request: web.Request, agent_num) -> web.Response:
    """Saves current user settings in the currently loaded USM config file.

    Saves current user settings in the currently loaded USM config file.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_usm_saveas(request: web.Request, agent_num, filename) -> web.Response:
    """Saves current user settings in the specified USM config file.

    Saves current user settings in the specified USM config file.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int
    :param filename: Filename to save
    :type filename: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_vacm_save(request: web.Request, agent_num) -> web.Response:
    """Saves current group, access, view settings in the currently loaded VACM config file.

    Saves current group, access, view settings in the currently loaded VACM config file.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_vacm_saveas(request: web.Request, agent_num, filename) -> web.Response:
    """Saves current group, access, view settings in the specified VACM config file.

    Saves current group, access, view settings in the specified VACM config file.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int
    :param filename: Filename to save
    :type filename: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_view_add(request: web.Request, agent_num, view_name, view_type, subtree, mask) -> web.Response:
    """Adds a new view entry with the specified parameters.

    Adds a new view entry with the specified parameters.

    :param agent_num: Agent to add the SNMPv3 view
    :type agent_num: int
    :param view_name: SNMPv3 view name
    :type view_name: str
    :param view_type: SNMPv3 view type
    :type view_type: str
    :param subtree: SNMPv3 view subtree
    :type subtree: str
    :param mask: SNMPv3 view mask
    :type mask: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_view_clear(request: web.Request, agent_num) -> web.Response:
    """Clears all view entries.

    Clears all view entries.

    :param agent_num: Agent to add the SNMPv3 view
    :type agent_num: int

    """
    return web.Response(status=200)


async def protocol_snmpv3_view_del(request: web.Request, agent_num, view_name) -> web.Response:
    """Deletes the specified view entry.

    Deletes the specified view entry.

    :param agent_num: Agent to add the SNMPv3 view
    :type agent_num: int
    :param view_name: SNMPv3 view name
    :type view_name: str

    """
    return web.Response(status=200)


async def protocol_snmpv3_view_list(request: web.Request, agent_num) -> web.Response:
    """Returns the current view entries as an array of strings.

    Returns the current view entries as an array of strings.

    :param agent_num: Agent to show the SNMPv3 configuration
    :type agent_num: int

    """
    return web.Response(status=200)
