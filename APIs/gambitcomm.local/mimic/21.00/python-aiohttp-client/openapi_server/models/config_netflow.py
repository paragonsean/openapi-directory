# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigNETFLOW(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundleflowsets: int=None, collector: str=None, collectorport: int=None, filename: str=None):
        """ConfigNETFLOW - a model defined in OpenAPI

        :param bundleflowsets: The bundleflowsets of this ConfigNETFLOW.
        :param collector: The collector of this ConfigNETFLOW.
        :param collectorport: The collectorport of this ConfigNETFLOW.
        :param filename: The filename of this ConfigNETFLOW.
        """
        self.openapi_types = {
            'bundleflowsets': int,
            'collector': str,
            'collectorport': int,
            'filename': str
        }

        self.attribute_map = {
            'bundleflowsets': 'bundleflowsets',
            'collector': 'collector',
            'collectorport': 'collectorport',
            'filename': 'filename'
        }

        self._bundleflowsets = bundleflowsets
        self._collector = collector
        self._collectorport = collectorport
        self._filename = filename

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigNETFLOW':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigNETFLOW of this ConfigNETFLOW.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundleflowsets(self):
        """Gets the bundleflowsets of this ConfigNETFLOW.


        :return: The bundleflowsets of this ConfigNETFLOW.
        :rtype: int
        """
        return self._bundleflowsets

    @bundleflowsets.setter
    def bundleflowsets(self, bundleflowsets):
        """Sets the bundleflowsets of this ConfigNETFLOW.


        :param bundleflowsets: The bundleflowsets of this ConfigNETFLOW.
        :type bundleflowsets: int
        """

        self._bundleflowsets = bundleflowsets

    @property
    def collector(self):
        """Gets the collector of this ConfigNETFLOW.


        :return: The collector of this ConfigNETFLOW.
        :rtype: str
        """
        return self._collector

    @collector.setter
    def collector(self, collector):
        """Sets the collector of this ConfigNETFLOW.


        :param collector: The collector of this ConfigNETFLOW.
        :type collector: str
        """

        self._collector = collector

    @property
    def collectorport(self):
        """Gets the collectorport of this ConfigNETFLOW.


        :return: The collectorport of this ConfigNETFLOW.
        :rtype: int
        """
        return self._collectorport

    @collectorport.setter
    def collectorport(self, collectorport):
        """Sets the collectorport of this ConfigNETFLOW.


        :param collectorport: The collectorport of this ConfigNETFLOW.
        :type collectorport: int
        """

        self._collectorport = collectorport

    @property
    def filename(self):
        """Gets the filename of this ConfigNETFLOW.


        :return: The filename of this ConfigNETFLOW.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ConfigNETFLOW.


        :param filename: The filename of this ConfigNETFLOW.
        :type filename: str
        """

        self._filename = filename
