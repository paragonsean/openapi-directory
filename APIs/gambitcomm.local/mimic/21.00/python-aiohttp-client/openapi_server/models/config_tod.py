# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigTOD(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port: int=None, retries: int=None, script: str=None, server: str=None, timeout: int=None):
        """ConfigTOD - a model defined in OpenAPI

        :param port: The port of this ConfigTOD.
        :param retries: The retries of this ConfigTOD.
        :param script: The script of this ConfigTOD.
        :param server: The server of this ConfigTOD.
        :param timeout: The timeout of this ConfigTOD.
        """
        self.openapi_types = {
            'port': int,
            'retries': int,
            'script': str,
            'server': str,
            'timeout': int
        }

        self.attribute_map = {
            'port': 'port',
            'retries': 'retries',
            'script': 'script',
            'server': 'server',
            'timeout': 'timeout'
        }

        self._port = port
        self._retries = retries
        self._script = script
        self._server = server
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigTOD':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigTOD of this ConfigTOD.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self):
        """Gets the port of this ConfigTOD.


        :return: The port of this ConfigTOD.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigTOD.


        :param port: The port of this ConfigTOD.
        :type port: int
        """

        self._port = port

    @property
    def retries(self):
        """Gets the retries of this ConfigTOD.


        :return: The retries of this ConfigTOD.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this ConfigTOD.


        :param retries: The retries of this ConfigTOD.
        :type retries: int
        """

        self._retries = retries

    @property
    def script(self):
        """Gets the script of this ConfigTOD.


        :return: The script of this ConfigTOD.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ConfigTOD.


        :param script: The script of this ConfigTOD.
        :type script: str
        """

        self._script = script

    @property
    def server(self):
        """Gets the server of this ConfigTOD.


        :return: The server of this ConfigTOD.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ConfigTOD.


        :param server: The server of this ConfigTOD.
        :type server: str
        """

        self._server = server

    @property
    def timeout(self):
        """Gets the timeout of this ConfigTOD.


        :return: The timeout of this ConfigTOD.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigTOD.


        :param timeout: The timeout of this ConfigTOD.
        :type timeout: int
        """

        self._timeout = timeout
