# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TelnetUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: List[str]=None, has_password: int=None, password: str=None, username: str=None):
        """TelnetUser - a model defined in OpenAPI

        :param groups: The groups of this TelnetUser.
        :param has_password: The has_password of this TelnetUser.
        :param password: The password of this TelnetUser.
        :param username: The username of this TelnetUser.
        """
        self.openapi_types = {
            'groups': List[str],
            'has_password': int,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'groups': 'groups',
            'has_password': 'hasPassword',
            'password': 'password',
            'username': 'username'
        }

        self._groups = groups
        self._has_password = has_password
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelnetUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelnetUser of this TelnetUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this TelnetUser.


        :return: The groups of this TelnetUser.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this TelnetUser.


        :param groups: The groups of this TelnetUser.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def has_password(self):
        """Gets the has_password of this TelnetUser.


        :return: The has_password of this TelnetUser.
        :rtype: int
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this TelnetUser.


        :param has_password: The has_password of this TelnetUser.
        :type has_password: int
        """

        self._has_password = has_password

    @property
    def password(self):
        """Gets the password of this TelnetUser.


        :return: The password of this TelnetUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TelnetUser.


        :param password: The password of this TelnetUser.
        :type password: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this TelnetUser.


        :return: The username of this TelnetUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TelnetUser.


        :param username: The username of this TelnetUser.
        :type username: str
        """

        self._username = username
