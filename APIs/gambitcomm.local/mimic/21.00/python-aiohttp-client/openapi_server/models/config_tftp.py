# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigTFTP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache: int=None, client: str=None, dstfile: str=None, mode: str=None, port: int=None, retries: int=None, script: str=None, server: str=None, srcfile: str=None, timeout: int=None, trace: str=None):
        """ConfigTFTP - a model defined in OpenAPI

        :param cache: The cache of this ConfigTFTP.
        :param client: The client of this ConfigTFTP.
        :param dstfile: The dstfile of this ConfigTFTP.
        :param mode: The mode of this ConfigTFTP.
        :param port: The port of this ConfigTFTP.
        :param retries: The retries of this ConfigTFTP.
        :param script: The script of this ConfigTFTP.
        :param server: The server of this ConfigTFTP.
        :param srcfile: The srcfile of this ConfigTFTP.
        :param timeout: The timeout of this ConfigTFTP.
        :param trace: The trace of this ConfigTFTP.
        """
        self.openapi_types = {
            'cache': int,
            'client': str,
            'dstfile': str,
            'mode': str,
            'port': int,
            'retries': int,
            'script': str,
            'server': str,
            'srcfile': str,
            'timeout': int,
            'trace': str
        }

        self.attribute_map = {
            'cache': 'cache',
            'client': 'client',
            'dstfile': 'dstfile',
            'mode': 'mode',
            'port': 'port',
            'retries': 'retries',
            'script': 'script',
            'server': 'server',
            'srcfile': 'srcfile',
            'timeout': 'timeout',
            'trace': 'trace'
        }

        self._cache = cache
        self._client = client
        self._dstfile = dstfile
        self._mode = mode
        self._port = port
        self._retries = retries
        self._script = script
        self._server = server
        self._srcfile = srcfile
        self._timeout = timeout
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigTFTP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigTFTP of this ConfigTFTP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache(self):
        """Gets the cache of this ConfigTFTP.


        :return: The cache of this ConfigTFTP.
        :rtype: int
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this ConfigTFTP.


        :param cache: The cache of this ConfigTFTP.
        :type cache: int
        """

        self._cache = cache

    @property
    def client(self):
        """Gets the client of this ConfigTFTP.


        :return: The client of this ConfigTFTP.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ConfigTFTP.


        :param client: The client of this ConfigTFTP.
        :type client: str
        """

        self._client = client

    @property
    def dstfile(self):
        """Gets the dstfile of this ConfigTFTP.


        :return: The dstfile of this ConfigTFTP.
        :rtype: str
        """
        return self._dstfile

    @dstfile.setter
    def dstfile(self, dstfile):
        """Sets the dstfile of this ConfigTFTP.


        :param dstfile: The dstfile of this ConfigTFTP.
        :type dstfile: str
        """

        self._dstfile = dstfile

    @property
    def mode(self):
        """Gets the mode of this ConfigTFTP.


        :return: The mode of this ConfigTFTP.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConfigTFTP.


        :param mode: The mode of this ConfigTFTP.
        :type mode: str
        """

        self._mode = mode

    @property
    def port(self):
        """Gets the port of this ConfigTFTP.


        :return: The port of this ConfigTFTP.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigTFTP.


        :param port: The port of this ConfigTFTP.
        :type port: int
        """

        self._port = port

    @property
    def retries(self):
        """Gets the retries of this ConfigTFTP.


        :return: The retries of this ConfigTFTP.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this ConfigTFTP.


        :param retries: The retries of this ConfigTFTP.
        :type retries: int
        """

        self._retries = retries

    @property
    def script(self):
        """Gets the script of this ConfigTFTP.


        :return: The script of this ConfigTFTP.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ConfigTFTP.


        :param script: The script of this ConfigTFTP.
        :type script: str
        """

        self._script = script

    @property
    def server(self):
        """Gets the server of this ConfigTFTP.


        :return: The server of this ConfigTFTP.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ConfigTFTP.


        :param server: The server of this ConfigTFTP.
        :type server: str
        """

        self._server = server

    @property
    def srcfile(self):
        """Gets the srcfile of this ConfigTFTP.


        :return: The srcfile of this ConfigTFTP.
        :rtype: str
        """
        return self._srcfile

    @srcfile.setter
    def srcfile(self, srcfile):
        """Sets the srcfile of this ConfigTFTP.


        :param srcfile: The srcfile of this ConfigTFTP.
        :type srcfile: str
        """

        self._srcfile = srcfile

    @property
    def timeout(self):
        """Gets the timeout of this ConfigTFTP.


        :return: The timeout of this ConfigTFTP.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigTFTP.


        :param timeout: The timeout of this ConfigTFTP.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def trace(self):
        """Gets the trace of this ConfigTFTP.


        :return: The trace of this ConfigTFTP.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ConfigTFTP.


        :param trace: The trace of this ConfigTFTP.
        :type trace: str
        """

        self._trace = trace
