# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigSFLOW(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collector: str=None, collectorport: int=None, encoding_type: str=None, filename: str=None, flows_per_min: int=None, include_samples: str=None, records_per_sample: str=None, samples_per_datagram: str=None):
        """ConfigSFLOW - a model defined in OpenAPI

        :param collector: The collector of this ConfigSFLOW.
        :param collectorport: The collectorport of this ConfigSFLOW.
        :param encoding_type: The encoding_type of this ConfigSFLOW.
        :param filename: The filename of this ConfigSFLOW.
        :param flows_per_min: The flows_per_min of this ConfigSFLOW.
        :param include_samples: The include_samples of this ConfigSFLOW.
        :param records_per_sample: The records_per_sample of this ConfigSFLOW.
        :param samples_per_datagram: The samples_per_datagram of this ConfigSFLOW.
        """
        self.openapi_types = {
            'collector': str,
            'collectorport': int,
            'encoding_type': str,
            'filename': str,
            'flows_per_min': int,
            'include_samples': str,
            'records_per_sample': str,
            'samples_per_datagram': str
        }

        self.attribute_map = {
            'collector': 'collector',
            'collectorport': 'collectorport',
            'encoding_type': 'encoding_type',
            'filename': 'filename',
            'flows_per_min': 'flows_per_min',
            'include_samples': 'include_samples',
            'records_per_sample': 'records_per_sample',
            'samples_per_datagram': 'samples_per_datagram'
        }

        self._collector = collector
        self._collectorport = collectorport
        self._encoding_type = encoding_type
        self._filename = filename
        self._flows_per_min = flows_per_min
        self._include_samples = include_samples
        self._records_per_sample = records_per_sample
        self._samples_per_datagram = samples_per_datagram

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigSFLOW':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigSFLOW of this ConfigSFLOW.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collector(self):
        """Gets the collector of this ConfigSFLOW.


        :return: The collector of this ConfigSFLOW.
        :rtype: str
        """
        return self._collector

    @collector.setter
    def collector(self, collector):
        """Sets the collector of this ConfigSFLOW.


        :param collector: The collector of this ConfigSFLOW.
        :type collector: str
        """

        self._collector = collector

    @property
    def collectorport(self):
        """Gets the collectorport of this ConfigSFLOW.


        :return: The collectorport of this ConfigSFLOW.
        :rtype: int
        """
        return self._collectorport

    @collectorport.setter
    def collectorport(self, collectorport):
        """Sets the collectorport of this ConfigSFLOW.


        :param collectorport: The collectorport of this ConfigSFLOW.
        :type collectorport: int
        """

        self._collectorport = collectorport

    @property
    def encoding_type(self):
        """Gets the encoding_type of this ConfigSFLOW.


        :return: The encoding_type of this ConfigSFLOW.
        :rtype: str
        """
        return self._encoding_type

    @encoding_type.setter
    def encoding_type(self, encoding_type):
        """Sets the encoding_type of this ConfigSFLOW.


        :param encoding_type: The encoding_type of this ConfigSFLOW.
        :type encoding_type: str
        """

        self._encoding_type = encoding_type

    @property
    def filename(self):
        """Gets the filename of this ConfigSFLOW.


        :return: The filename of this ConfigSFLOW.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ConfigSFLOW.


        :param filename: The filename of this ConfigSFLOW.
        :type filename: str
        """

        self._filename = filename

    @property
    def flows_per_min(self):
        """Gets the flows_per_min of this ConfigSFLOW.


        :return: The flows_per_min of this ConfigSFLOW.
        :rtype: int
        """
        return self._flows_per_min

    @flows_per_min.setter
    def flows_per_min(self, flows_per_min):
        """Sets the flows_per_min of this ConfigSFLOW.


        :param flows_per_min: The flows_per_min of this ConfigSFLOW.
        :type flows_per_min: int
        """

        self._flows_per_min = flows_per_min

    @property
    def include_samples(self):
        """Gets the include_samples of this ConfigSFLOW.


        :return: The include_samples of this ConfigSFLOW.
        :rtype: str
        """
        return self._include_samples

    @include_samples.setter
    def include_samples(self, include_samples):
        """Sets the include_samples of this ConfigSFLOW.


        :param include_samples: The include_samples of this ConfigSFLOW.
        :type include_samples: str
        """

        self._include_samples = include_samples

    @property
    def records_per_sample(self):
        """Gets the records_per_sample of this ConfigSFLOW.


        :return: The records_per_sample of this ConfigSFLOW.
        :rtype: str
        """
        return self._records_per_sample

    @records_per_sample.setter
    def records_per_sample(self, records_per_sample):
        """Sets the records_per_sample of this ConfigSFLOW.


        :param records_per_sample: The records_per_sample of this ConfigSFLOW.
        :type records_per_sample: str
        """

        self._records_per_sample = records_per_sample

    @property
    def samples_per_datagram(self):
        """Gets the samples_per_datagram of this ConfigSFLOW.


        :return: The samples_per_datagram of this ConfigSFLOW.
        :rtype: str
        """
        return self._samples_per_datagram

    @samples_per_datagram.setter
    def samples_per_datagram(self, samples_per_datagram):
        """Sets the samples_per_datagram of this ConfigSFLOW.


        :param samples_per_datagram: The samples_per_datagram of this ConfigSFLOW.
        :type samples_per_datagram: str
        """

        self._samples_per_datagram = samples_per_datagram
