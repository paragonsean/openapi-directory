# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigPROXY(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tcp_nodelay: int=None, client_to_server: str=None, disconnect_delay: int=None, max_connects: int=None, portno: int=None, pre_connect: str=None, server_to_client: str=None, target: str=None, transport: str=None):
        """ConfigPROXY - a model defined in OpenAPI

        :param tcp_nodelay: The tcp_nodelay of this ConfigPROXY.
        :param client_to_server: The client_to_server of this ConfigPROXY.
        :param disconnect_delay: The disconnect_delay of this ConfigPROXY.
        :param max_connects: The max_connects of this ConfigPROXY.
        :param portno: The portno of this ConfigPROXY.
        :param pre_connect: The pre_connect of this ConfigPROXY.
        :param server_to_client: The server_to_client of this ConfigPROXY.
        :param target: The target of this ConfigPROXY.
        :param transport: The transport of this ConfigPROXY.
        """
        self.openapi_types = {
            'tcp_nodelay': int,
            'client_to_server': str,
            'disconnect_delay': int,
            'max_connects': int,
            'portno': int,
            'pre_connect': str,
            'server_to_client': str,
            'target': str,
            'transport': str
        }

        self.attribute_map = {
            'tcp_nodelay': 'TCP_NODELAY',
            'client_to_server': 'client_to_server',
            'disconnect_delay': 'disconnect_delay',
            'max_connects': 'max_connects',
            'portno': 'portno',
            'pre_connect': 'pre_connect',
            'server_to_client': 'server_to_client',
            'target': 'target',
            'transport': 'transport'
        }

        self._tcp_nodelay = tcp_nodelay
        self._client_to_server = client_to_server
        self._disconnect_delay = disconnect_delay
        self._max_connects = max_connects
        self._portno = portno
        self._pre_connect = pre_connect
        self._server_to_client = server_to_client
        self._target = target
        self._transport = transport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigPROXY':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigPROXY of this ConfigPROXY.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tcp_nodelay(self):
        """Gets the tcp_nodelay of this ConfigPROXY.


        :return: The tcp_nodelay of this ConfigPROXY.
        :rtype: int
        """
        return self._tcp_nodelay

    @tcp_nodelay.setter
    def tcp_nodelay(self, tcp_nodelay):
        """Sets the tcp_nodelay of this ConfigPROXY.


        :param tcp_nodelay: The tcp_nodelay of this ConfigPROXY.
        :type tcp_nodelay: int
        """

        self._tcp_nodelay = tcp_nodelay

    @property
    def client_to_server(self):
        """Gets the client_to_server of this ConfigPROXY.


        :return: The client_to_server of this ConfigPROXY.
        :rtype: str
        """
        return self._client_to_server

    @client_to_server.setter
    def client_to_server(self, client_to_server):
        """Sets the client_to_server of this ConfigPROXY.


        :param client_to_server: The client_to_server of this ConfigPROXY.
        :type client_to_server: str
        """

        self._client_to_server = client_to_server

    @property
    def disconnect_delay(self):
        """Gets the disconnect_delay of this ConfigPROXY.


        :return: The disconnect_delay of this ConfigPROXY.
        :rtype: int
        """
        return self._disconnect_delay

    @disconnect_delay.setter
    def disconnect_delay(self, disconnect_delay):
        """Sets the disconnect_delay of this ConfigPROXY.


        :param disconnect_delay: The disconnect_delay of this ConfigPROXY.
        :type disconnect_delay: int
        """

        self._disconnect_delay = disconnect_delay

    @property
    def max_connects(self):
        """Gets the max_connects of this ConfigPROXY.


        :return: The max_connects of this ConfigPROXY.
        :rtype: int
        """
        return self._max_connects

    @max_connects.setter
    def max_connects(self, max_connects):
        """Sets the max_connects of this ConfigPROXY.


        :param max_connects: The max_connects of this ConfigPROXY.
        :type max_connects: int
        """

        self._max_connects = max_connects

    @property
    def portno(self):
        """Gets the portno of this ConfigPROXY.


        :return: The portno of this ConfigPROXY.
        :rtype: int
        """
        return self._portno

    @portno.setter
    def portno(self, portno):
        """Sets the portno of this ConfigPROXY.


        :param portno: The portno of this ConfigPROXY.
        :type portno: int
        """

        self._portno = portno

    @property
    def pre_connect(self):
        """Gets the pre_connect of this ConfigPROXY.


        :return: The pre_connect of this ConfigPROXY.
        :rtype: str
        """
        return self._pre_connect

    @pre_connect.setter
    def pre_connect(self, pre_connect):
        """Sets the pre_connect of this ConfigPROXY.


        :param pre_connect: The pre_connect of this ConfigPROXY.
        :type pre_connect: str
        """

        self._pre_connect = pre_connect

    @property
    def server_to_client(self):
        """Gets the server_to_client of this ConfigPROXY.


        :return: The server_to_client of this ConfigPROXY.
        :rtype: str
        """
        return self._server_to_client

    @server_to_client.setter
    def server_to_client(self, server_to_client):
        """Sets the server_to_client of this ConfigPROXY.


        :param server_to_client: The server_to_client of this ConfigPROXY.
        :type server_to_client: str
        """

        self._server_to_client = server_to_client

    @property
    def target(self):
        """Gets the target of this ConfigPROXY.


        :return: The target of this ConfigPROXY.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ConfigPROXY.


        :param target: The target of this ConfigPROXY.
        :type target: str
        """

        self._target = target

    @property
    def transport(self):
        """Gets the transport of this ConfigPROXY.


        :return: The transport of this ConfigPROXY.
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this ConfigPROXY.


        :param transport: The transport of this ConfigPROXY.
        :type transport: str
        """

        self._transport = transport
