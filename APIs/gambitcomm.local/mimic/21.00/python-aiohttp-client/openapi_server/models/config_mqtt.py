# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigMQTT(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broker: str=None, clientid: str=None, filename: str=None, is_tls: str=None, password: str=None, port: int=None, tls_conf_filename: str=None, username: str=None, version: str=None):
        """ConfigMQTT - a model defined in OpenAPI

        :param broker: The broker of this ConfigMQTT.
        :param clientid: The clientid of this ConfigMQTT.
        :param filename: The filename of this ConfigMQTT.
        :param is_tls: The is_tls of this ConfigMQTT.
        :param password: The password of this ConfigMQTT.
        :param port: The port of this ConfigMQTT.
        :param tls_conf_filename: The tls_conf_filename of this ConfigMQTT.
        :param username: The username of this ConfigMQTT.
        :param version: The version of this ConfigMQTT.
        """
        self.openapi_types = {
            'broker': str,
            'clientid': str,
            'filename': str,
            'is_tls': str,
            'password': str,
            'port': int,
            'tls_conf_filename': str,
            'username': str,
            'version': str
        }

        self.attribute_map = {
            'broker': 'broker',
            'clientid': 'clientid',
            'filename': 'filename',
            'is_tls': 'is_tls',
            'password': 'password',
            'port': 'port',
            'tls_conf_filename': 'tls_conf_filename',
            'username': 'username',
            'version': 'version'
        }

        self._broker = broker
        self._clientid = clientid
        self._filename = filename
        self._is_tls = is_tls
        self._password = password
        self._port = port
        self._tls_conf_filename = tls_conf_filename
        self._username = username
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigMQTT':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigMQTT of this ConfigMQTT.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broker(self):
        """Gets the broker of this ConfigMQTT.


        :return: The broker of this ConfigMQTT.
        :rtype: str
        """
        return self._broker

    @broker.setter
    def broker(self, broker):
        """Sets the broker of this ConfigMQTT.


        :param broker: The broker of this ConfigMQTT.
        :type broker: str
        """

        self._broker = broker

    @property
    def clientid(self):
        """Gets the clientid of this ConfigMQTT.


        :return: The clientid of this ConfigMQTT.
        :rtype: str
        """
        return self._clientid

    @clientid.setter
    def clientid(self, clientid):
        """Sets the clientid of this ConfigMQTT.


        :param clientid: The clientid of this ConfigMQTT.
        :type clientid: str
        """

        self._clientid = clientid

    @property
    def filename(self):
        """Gets the filename of this ConfigMQTT.


        :return: The filename of this ConfigMQTT.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ConfigMQTT.


        :param filename: The filename of this ConfigMQTT.
        :type filename: str
        """

        self._filename = filename

    @property
    def is_tls(self):
        """Gets the is_tls of this ConfigMQTT.


        :return: The is_tls of this ConfigMQTT.
        :rtype: str
        """
        return self._is_tls

    @is_tls.setter
    def is_tls(self, is_tls):
        """Sets the is_tls of this ConfigMQTT.


        :param is_tls: The is_tls of this ConfigMQTT.
        :type is_tls: str
        """

        self._is_tls = is_tls

    @property
    def password(self):
        """Gets the password of this ConfigMQTT.


        :return: The password of this ConfigMQTT.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConfigMQTT.


        :param password: The password of this ConfigMQTT.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this ConfigMQTT.


        :return: The port of this ConfigMQTT.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigMQTT.


        :param port: The port of this ConfigMQTT.
        :type port: int
        """

        self._port = port

    @property
    def tls_conf_filename(self):
        """Gets the tls_conf_filename of this ConfigMQTT.


        :return: The tls_conf_filename of this ConfigMQTT.
        :rtype: str
        """
        return self._tls_conf_filename

    @tls_conf_filename.setter
    def tls_conf_filename(self, tls_conf_filename):
        """Sets the tls_conf_filename of this ConfigMQTT.


        :param tls_conf_filename: The tls_conf_filename of this ConfigMQTT.
        :type tls_conf_filename: str
        """

        self._tls_conf_filename = tls_conf_filename

    @property
    def username(self):
        """Gets the username of this ConfigMQTT.


        :return: The username of this ConfigMQTT.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfigMQTT.


        :param username: The username of this ConfigMQTT.
        :type username: str
        """

        self._username = username

    @property
    def version(self):
        """Gets the version of this ConfigMQTT.


        :return: The version of this ConfigMQTT.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigMQTT.


        :param version: The version of this ConfigMQTT.
        :type version: str
        """

        self._version = version
