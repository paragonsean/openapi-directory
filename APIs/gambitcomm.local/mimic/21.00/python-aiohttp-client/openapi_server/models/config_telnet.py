# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigTELNET(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keymap: str=None, paging_prompt: str=None, port: int=None, prompt: str=None, rule: str=None, userdb: str=None):
        """ConfigTELNET - a model defined in OpenAPI

        :param keymap: The keymap of this ConfigTELNET.
        :param paging_prompt: The paging_prompt of this ConfigTELNET.
        :param port: The port of this ConfigTELNET.
        :param prompt: The prompt of this ConfigTELNET.
        :param rule: The rule of this ConfigTELNET.
        :param userdb: The userdb of this ConfigTELNET.
        """
        self.openapi_types = {
            'keymap': str,
            'paging_prompt': str,
            'port': int,
            'prompt': str,
            'rule': str,
            'userdb': str
        }

        self.attribute_map = {
            'keymap': 'keymap',
            'paging_prompt': 'paging_prompt',
            'port': 'port',
            'prompt': 'prompt',
            'rule': 'rule',
            'userdb': 'userdb'
        }

        self._keymap = keymap
        self._paging_prompt = paging_prompt
        self._port = port
        self._prompt = prompt
        self._rule = rule
        self._userdb = userdb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigTELNET':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigTELNET of this ConfigTELNET.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keymap(self):
        """Gets the keymap of this ConfigTELNET.


        :return: The keymap of this ConfigTELNET.
        :rtype: str
        """
        return self._keymap

    @keymap.setter
    def keymap(self, keymap):
        """Sets the keymap of this ConfigTELNET.


        :param keymap: The keymap of this ConfigTELNET.
        :type keymap: str
        """

        self._keymap = keymap

    @property
    def paging_prompt(self):
        """Gets the paging_prompt of this ConfigTELNET.


        :return: The paging_prompt of this ConfigTELNET.
        :rtype: str
        """
        return self._paging_prompt

    @paging_prompt.setter
    def paging_prompt(self, paging_prompt):
        """Sets the paging_prompt of this ConfigTELNET.


        :param paging_prompt: The paging_prompt of this ConfigTELNET.
        :type paging_prompt: str
        """

        self._paging_prompt = paging_prompt

    @property
    def port(self):
        """Gets the port of this ConfigTELNET.


        :return: The port of this ConfigTELNET.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConfigTELNET.


        :param port: The port of this ConfigTELNET.
        :type port: int
        """

        self._port = port

    @property
    def prompt(self):
        """Gets the prompt of this ConfigTELNET.


        :return: The prompt of this ConfigTELNET.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this ConfigTELNET.


        :param prompt: The prompt of this ConfigTELNET.
        :type prompt: str
        """

        self._prompt = prompt

    @property
    def rule(self):
        """Gets the rule of this ConfigTELNET.


        :return: The rule of this ConfigTELNET.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ConfigTELNET.


        :param rule: The rule of this ConfigTELNET.
        :type rule: str
        """

        self._rule = rule

    @property
    def userdb(self):
        """Gets the userdb of this ConfigTELNET.


        :return: The userdb of this ConfigTELNET.
        :rtype: str
        """
        return self._userdb

    @userdb.setter
    def userdb(self, userdb):
        """Sets the userdb of this ConfigTELNET.


        :param userdb: The userdb of this ConfigTELNET.
        :type userdb: str
        """

        self._userdb = userdb
