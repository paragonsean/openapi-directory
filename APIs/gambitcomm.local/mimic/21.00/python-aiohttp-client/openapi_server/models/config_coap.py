# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigCOAP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keystore: str=None, primary_port: int=None, rule: str=None, secure_port: int=None):
        """ConfigCOAP - a model defined in OpenAPI

        :param keystore: The keystore of this ConfigCOAP.
        :param primary_port: The primary_port of this ConfigCOAP.
        :param rule: The rule of this ConfigCOAP.
        :param secure_port: The secure_port of this ConfigCOAP.
        """
        self.openapi_types = {
            'keystore': str,
            'primary_port': int,
            'rule': str,
            'secure_port': int
        }

        self.attribute_map = {
            'keystore': 'keystore',
            'primary_port': 'primary_port',
            'rule': 'rule',
            'secure_port': 'secure_port'
        }

        self._keystore = keystore
        self._primary_port = primary_port
        self._rule = rule
        self._secure_port = secure_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigCOAP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigCOAP of this ConfigCOAP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keystore(self):
        """Gets the keystore of this ConfigCOAP.


        :return: The keystore of this ConfigCOAP.
        :rtype: str
        """
        return self._keystore

    @keystore.setter
    def keystore(self, keystore):
        """Sets the keystore of this ConfigCOAP.


        :param keystore: The keystore of this ConfigCOAP.
        :type keystore: str
        """

        self._keystore = keystore

    @property
    def primary_port(self):
        """Gets the primary_port of this ConfigCOAP.


        :return: The primary_port of this ConfigCOAP.
        :rtype: int
        """
        return self._primary_port

    @primary_port.setter
    def primary_port(self, primary_port):
        """Sets the primary_port of this ConfigCOAP.


        :param primary_port: The primary_port of this ConfigCOAP.
        :type primary_port: int
        """

        self._primary_port = primary_port

    @property
    def rule(self):
        """Gets the rule of this ConfigCOAP.


        :return: The rule of this ConfigCOAP.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ConfigCOAP.


        :param rule: The rule of this ConfigCOAP.
        :type rule: str
        """

        self._rule = rule

    @property
    def secure_port(self):
        """Gets the secure_port of this ConfigCOAP.


        :return: The secure_port of this ConfigCOAP.
        :rtype: int
        """
        return self._secure_port

    @secure_port.setter
    def secure_port(self, secure_port):
        """Sets the secure_port of this ConfigCOAP.


        :param secure_port: The secure_port of this ConfigCOAP.
        :type secure_port: int
        """

        self._secure_port = secure_port
