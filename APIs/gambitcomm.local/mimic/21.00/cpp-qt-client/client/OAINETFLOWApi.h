/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINETFLOWApi_H
#define OAI_OAINETFLOWApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigNETFLOW.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINETFLOWApi : public QObject {
    Q_OBJECT

public:
    OAINETFLOWApi(const int timeOut = 0);
    ~OAINETFLOWApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  flowset_uid qint32 [required]
    * @param[in]  field_num qint32 [required]
    * @param[in]  attr QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolNetflowChangeAttr(const qint32 &agent_num, const qint32 &flowset_uid, const qint32 &field_num, const QString &attr, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  interval qint32 [required]
    */
    virtual void protocolNetflowChangeDfs(const qint32 &agent_num, const qint32 &interval);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  interval qint32 [required]
    */
    virtual void protocolNetflowChangeTfs(const qint32 &agent_num, const qint32 &interval);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowGetStatistics(const qint32 &agent_num);


    virtual void protocolNetflowGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowHalt(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowReload(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolNetflowResume(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  collector_ip QString [required]
    */
    virtual void protocolNetflowSetCollector(const qint32 &agent_num, const QString &collector_ip);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolNetflowSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  file_name QString [required]
    */
    virtual void protocolNetflowSetFileName(const qint32 &agent_num, const QString &file_name);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolNetflowSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolNetflowChangeAttrCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowChangeDfsCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowChangeTfsCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowHaltCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowListCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowReloadCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowResumeCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowSetCollectorCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowSetFileNameCallback(OAIHttpRequestWorker *worker);
    void protocolNetflowSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolNetflowChangeAttrSignal(QString summary);
    void protocolNetflowChangeDfsSignal(QString summary);
    void protocolNetflowChangeTfsSignal(QString summary);
    void protocolNetflowGetArgsSignal(OAIObject summary);
    void protocolNetflowGetConfigSignal(OAIConfigNETFLOW summary);
    void protocolNetflowGetStatisticsSignal(QList<qint32> summary);
    void protocolNetflowGetStatsHdrSignal(QList<QString> summary);
    void protocolNetflowGetTraceSignal(OAIConfigNETFLOW summary);
    void protocolNetflowHaltSignal(QString summary);
    void protocolNetflowListSignal(QList<OAIObject> summary);
    void protocolNetflowReloadSignal(QString summary);
    void protocolNetflowResumeSignal(QString summary);
    void protocolNetflowSetCollectorSignal(QString summary);
    void protocolNetflowSetConfigSignal(QString summary);
    void protocolNetflowSetFileNameSignal(QString summary);
    void protocolNetflowSetTraceSignal(QString summary);


    void protocolNetflowChangeAttrSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowChangeDfsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowChangeTfsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolNetflowGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigNETFLOW summary);
    void protocolNetflowGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolNetflowGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolNetflowGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigNETFLOW summary);
    void protocolNetflowHaltSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowListSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void protocolNetflowReloadSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowResumeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowSetCollectorSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowSetFileNameSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolNetflowSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolNetflowChangeAttrSignalError() instead")
    void protocolNetflowChangeAttrSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowChangeAttrSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowChangeDfsSignalError() instead")
    void protocolNetflowChangeDfsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowChangeDfsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowChangeTfsSignalError() instead")
    void protocolNetflowChangeTfsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowChangeTfsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetArgsSignalError() instead")
    void protocolNetflowGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetConfigSignalError() instead")
    void protocolNetflowGetConfigSignalE(OAIConfigNETFLOW summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetConfigSignalError(OAIConfigNETFLOW summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetStatisticsSignalError() instead")
    void protocolNetflowGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetStatsHdrSignalError() instead")
    void protocolNetflowGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetTraceSignalError() instead")
    void protocolNetflowGetTraceSignalE(OAIConfigNETFLOW summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetTraceSignalError(OAIConfigNETFLOW summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowHaltSignalError() instead")
    void protocolNetflowHaltSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowHaltSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowListSignalError() instead")
    void protocolNetflowListSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowListSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowReloadSignalError() instead")
    void protocolNetflowReloadSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowReloadSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowResumeSignalError() instead")
    void protocolNetflowResumeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowResumeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetCollectorSignalError() instead")
    void protocolNetflowSetCollectorSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetCollectorSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetConfigSignalError() instead")
    void protocolNetflowSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetFileNameSignalError() instead")
    void protocolNetflowSetFileNameSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetFileNameSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetTraceSignalError() instead")
    void protocolNetflowSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolNetflowChangeAttrSignalErrorFull() instead")
    void protocolNetflowChangeAttrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowChangeAttrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowChangeDfsSignalErrorFull() instead")
    void protocolNetflowChangeDfsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowChangeDfsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowChangeTfsSignalErrorFull() instead")
    void protocolNetflowChangeTfsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowChangeTfsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetArgsSignalErrorFull() instead")
    void protocolNetflowGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetConfigSignalErrorFull() instead")
    void protocolNetflowGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetStatisticsSignalErrorFull() instead")
    void protocolNetflowGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetStatsHdrSignalErrorFull() instead")
    void protocolNetflowGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowGetTraceSignalErrorFull() instead")
    void protocolNetflowGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowHaltSignalErrorFull() instead")
    void protocolNetflowHaltSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowHaltSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowListSignalErrorFull() instead")
    void protocolNetflowListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowReloadSignalErrorFull() instead")
    void protocolNetflowReloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowReloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowResumeSignalErrorFull() instead")
    void protocolNetflowResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetCollectorSignalErrorFull() instead")
    void protocolNetflowSetCollectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetCollectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetConfigSignalErrorFull() instead")
    void protocolNetflowSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetFileNameSignalErrorFull() instead")
    void protocolNetflowSetFileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetFileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolNetflowSetTraceSignalErrorFull() instead")
    void protocolNetflowSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolNetflowSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
