/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelnetUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelnetUser::OAITelnetUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelnetUser::OAITelnetUser() {
    this->initializeModel();
}

OAITelnetUser::~OAITelnetUser() {}

void OAITelnetUser::initializeModel() {

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_has_password_isSet = false;
    m_has_password_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAITelnetUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelnetUser::fromJsonObject(QJsonObject json) {

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_has_password_isValid = ::OpenAPI::fromJsonValue(m_has_password, json[QString("hasPassword")]);
    m_has_password_isSet = !json[QString("hasPassword")].isNull() && m_has_password_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAITelnetUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelnetUser::asJsonObject() const {
    QJsonObject obj;
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_has_password_isSet) {
        obj.insert(QString("hasPassword"), ::OpenAPI::toJsonValue(m_has_password));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QList<QString> OAITelnetUser::getGroups() const {
    return m_groups;
}
void OAITelnetUser::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAITelnetUser::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAITelnetUser::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAITelnetUser::getHasPassword() const {
    return m_has_password;
}
void OAITelnetUser::setHasPassword(const qint32 &has_password) {
    m_has_password = has_password;
    m_has_password_isSet = true;
}

bool OAITelnetUser::is_has_password_Set() const{
    return m_has_password_isSet;
}

bool OAITelnetUser::is_has_password_Valid() const{
    return m_has_password_isValid;
}

QString OAITelnetUser::getPassword() const {
    return m_password;
}
void OAITelnetUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAITelnetUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAITelnetUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAITelnetUser::getUsername() const {
    return m_username;
}
void OAITelnetUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAITelnetUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAITelnetUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAITelnetUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelnetUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
