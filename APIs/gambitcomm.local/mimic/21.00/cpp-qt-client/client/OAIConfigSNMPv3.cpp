/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigSNMPv3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigSNMPv3::OAIConfigSNMPv3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigSNMPv3::OAIConfigSNMPv3() {
    this->initializeModel();
}

OAIConfigSNMPv3::~OAIConfigSNMPv3() {}

void OAIConfigSNMPv3::initializeModel() {

    m_context_engine_id_isSet = false;
    m_context_engine_id_isValid = false;

    m_engine_id_isSet = false;
    m_engine_id_isValid = false;

    m_usm_db_isSet = false;
    m_usm_db_isValid = false;

    m_vacm_db_isSet = false;
    m_vacm_db_isValid = false;
}

void OAIConfigSNMPv3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigSNMPv3::fromJsonObject(QJsonObject json) {

    m_context_engine_id_isValid = ::OpenAPI::fromJsonValue(m_context_engine_id, json[QString("context_engine_id")]);
    m_context_engine_id_isSet = !json[QString("context_engine_id")].isNull() && m_context_engine_id_isValid;

    m_engine_id_isValid = ::OpenAPI::fromJsonValue(m_engine_id, json[QString("engine_id")]);
    m_engine_id_isSet = !json[QString("engine_id")].isNull() && m_engine_id_isValid;

    m_usm_db_isValid = ::OpenAPI::fromJsonValue(m_usm_db, json[QString("usm_db")]);
    m_usm_db_isSet = !json[QString("usm_db")].isNull() && m_usm_db_isValid;

    m_vacm_db_isValid = ::OpenAPI::fromJsonValue(m_vacm_db, json[QString("vacm_db")]);
    m_vacm_db_isSet = !json[QString("vacm_db")].isNull() && m_vacm_db_isValid;
}

QString OAIConfigSNMPv3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigSNMPv3::asJsonObject() const {
    QJsonObject obj;
    if (m_context_engine_id_isSet) {
        obj.insert(QString("context_engine_id"), ::OpenAPI::toJsonValue(m_context_engine_id));
    }
    if (m_engine_id_isSet) {
        obj.insert(QString("engine_id"), ::OpenAPI::toJsonValue(m_engine_id));
    }
    if (m_usm_db_isSet) {
        obj.insert(QString("usm_db"), ::OpenAPI::toJsonValue(m_usm_db));
    }
    if (m_vacm_db_isSet) {
        obj.insert(QString("vacm_db"), ::OpenAPI::toJsonValue(m_vacm_db));
    }
    return obj;
}

QString OAIConfigSNMPv3::getContextEngineId() const {
    return m_context_engine_id;
}
void OAIConfigSNMPv3::setContextEngineId(const QString &context_engine_id) {
    m_context_engine_id = context_engine_id;
    m_context_engine_id_isSet = true;
}

bool OAIConfigSNMPv3::is_context_engine_id_Set() const{
    return m_context_engine_id_isSet;
}

bool OAIConfigSNMPv3::is_context_engine_id_Valid() const{
    return m_context_engine_id_isValid;
}

QString OAIConfigSNMPv3::getEngineId() const {
    return m_engine_id;
}
void OAIConfigSNMPv3::setEngineId(const QString &engine_id) {
    m_engine_id = engine_id;
    m_engine_id_isSet = true;
}

bool OAIConfigSNMPv3::is_engine_id_Set() const{
    return m_engine_id_isSet;
}

bool OAIConfigSNMPv3::is_engine_id_Valid() const{
    return m_engine_id_isValid;
}

QString OAIConfigSNMPv3::getUsmDb() const {
    return m_usm_db;
}
void OAIConfigSNMPv3::setUsmDb(const QString &usm_db) {
    m_usm_db = usm_db;
    m_usm_db_isSet = true;
}

bool OAIConfigSNMPv3::is_usm_db_Set() const{
    return m_usm_db_isSet;
}

bool OAIConfigSNMPv3::is_usm_db_Valid() const{
    return m_usm_db_isValid;
}

QString OAIConfigSNMPv3::getVacmDb() const {
    return m_vacm_db;
}
void OAIConfigSNMPv3::setVacmDb(const QString &vacm_db) {
    m_vacm_db = vacm_db;
    m_vacm_db_isSet = true;
}

bool OAIConfigSNMPv3::is_vacm_db_Set() const{
    return m_vacm_db_isSet;
}

bool OAIConfigSNMPv3::is_vacm_db_Valid() const{
    return m_vacm_db_isValid;
}

bool OAIConfigSNMPv3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_engine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usm_db_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vacm_db_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigSNMPv3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
