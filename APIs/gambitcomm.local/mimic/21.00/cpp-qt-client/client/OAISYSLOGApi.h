/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISYSLOGApi_H
#define OAI_OAISYSLOGApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigSYSLOG.h"
#include "OAIObject.h"
#include "OAISyslogMsg.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISYSLOGApi : public QObject {
    Q_OBJECT

public:
    OAISYSLOGApi(const int timeOut = 0);
    ~OAISYSLOGApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSyslogGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  attr QString [required]
    */
    virtual void protocolSyslogGetAttr(const qint32 &agent_num, const QString &attr);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSyslogGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSyslogGetStatistics(const qint32 &agent_num);


    virtual void protocolSyslogGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSyslogGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  pri qint32 [required]
    * @param[in]  oai_syslog_msg OAISyslogMsg [required]
    */
    virtual void protocolSyslogSend(const qint32 &agent_num, const qint32 &pri, const OAISyslogMsg &oai_syslog_msg);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  attr QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolSyslogSetAttr(const qint32 &agent_num, const QString &attr, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolSyslogSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolSyslogSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolSyslogGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogGetAttrCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogSendCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogSetAttrCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSyslogSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolSyslogGetArgsSignal(OAIObject summary);
    void protocolSyslogGetAttrSignal(QString summary);
    void protocolSyslogGetConfigSignal(OAIConfigSYSLOG summary);
    void protocolSyslogGetStatisticsSignal(QList<qint32> summary);
    void protocolSyslogGetStatsHdrSignal(QList<QString> summary);
    void protocolSyslogGetTraceSignal(OAIConfigSYSLOG summary);
    void protocolSyslogSendSignal(QString summary);
    void protocolSyslogSetAttrSignal(QString summary);
    void protocolSyslogSetConfigSignal(QString summary);
    void protocolSyslogSetTraceSignal(QString summary);


    void protocolSyslogGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolSyslogGetAttrSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSyslogGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigSYSLOG summary);
    void protocolSyslogGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolSyslogGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSyslogGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigSYSLOG summary);
    void protocolSyslogSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSyslogSetAttrSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSyslogSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSyslogSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolSyslogGetArgsSignalError() instead")
    void protocolSyslogGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetAttrSignalError() instead")
    void protocolSyslogGetAttrSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetAttrSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetConfigSignalError() instead")
    void protocolSyslogGetConfigSignalE(OAIConfigSYSLOG summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetConfigSignalError(OAIConfigSYSLOG summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetStatisticsSignalError() instead")
    void protocolSyslogGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetStatsHdrSignalError() instead")
    void protocolSyslogGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetTraceSignalError() instead")
    void protocolSyslogGetTraceSignalE(OAIConfigSYSLOG summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetTraceSignalError(OAIConfigSYSLOG summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSendSignalError() instead")
    void protocolSyslogSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSetAttrSignalError() instead")
    void protocolSyslogSetAttrSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSetAttrSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSetConfigSignalError() instead")
    void protocolSyslogSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSetTraceSignalError() instead")
    void protocolSyslogSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolSyslogGetArgsSignalErrorFull() instead")
    void protocolSyslogGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetAttrSignalErrorFull() instead")
    void protocolSyslogGetAttrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetAttrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetConfigSignalErrorFull() instead")
    void protocolSyslogGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetStatisticsSignalErrorFull() instead")
    void protocolSyslogGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetStatsHdrSignalErrorFull() instead")
    void protocolSyslogGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogGetTraceSignalErrorFull() instead")
    void protocolSyslogGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSendSignalErrorFull() instead")
    void protocolSyslogSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSetAttrSignalErrorFull() instead")
    void protocolSyslogSetAttrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSetAttrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSetConfigSignalErrorFull() instead")
    void protocolSyslogSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSyslogSetTraceSignalErrorFull() instead")
    void protocolSyslogSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSyslogSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
