/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISNMPv3Api_H
#define OAI_OAISNMPv3Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigSNMPv3.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISNMPv3Api : public QObject {
    Q_OBJECT

public:
    OAISNMPv3Api(const int timeOut = 0);
    ~OAISNMPv3Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  group_name QString [required]
    * @param[in]  prefix QString [required]
    * @param[in]  security_model QString [required]
    * @param[in]  security_level QString [required]
    * @param[in]  context_match QString [required]
    * @param[in]  read_view QString [required]
    * @param[in]  write_view QString [required]
    * @param[in]  notify_view QString [required]
    */
    virtual void protocolSnmpv3AccessAdd(const qint32 &agent_num, const QString &group_name, const QString &prefix, const QString &security_model, const QString &security_level, const QString &context_match, const QString &read_view, const QString &write_view, const QString &notify_view);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3AccessClear(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  access_name QString [required]
    */
    virtual void protocolSnmpv3AccessDel(const qint32 &agent_num, const QString &access_name);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3AccessList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GetContextEngineid(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GetEngineboots(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GetEngineid(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GetEnginetime(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  group_name QString [required]
    * @param[in]  security_model QString [required]
    * @param[in]  security_name QString [required]
    */
    virtual void protocolSnmpv3GroupAdd(const qint32 &agent_num, const QString &group_name, const QString &security_model, const QString &security_name);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GroupClear(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  group_name QString [required]
    */
    virtual void protocolSnmpv3GroupDel(const qint32 &agent_num, const QString &group_name);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3GroupList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  parameter QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolSnmpv3SetConfig(const qint32 &agent_num, const QString &parameter, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  user_name QString [required]
    * @param[in]  security_name QString [required]
    * @param[in]  auth_protocol QString [required]
    * @param[in]  auth_key QString [required]
    * @param[in]  priv_protocol QString [required]
    * @param[in]  priv_key QString [required]
    */
    virtual void protocolSnmpv3UserAdd(const qint32 &agent_num, const QString &user_name, const QString &security_name, const QString &auth_protocol, const QString &auth_key, const QString &priv_protocol, const QString &priv_key);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3UserClear(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  user_name QString [required]
    */
    virtual void protocolSnmpv3UserDel(const qint32 &agent_num, const QString &user_name);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3UserList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3UsmSave(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  filename QString [required]
    */
    virtual void protocolSnmpv3UsmSaveas(const qint32 &agent_num, const QString &filename);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3VacmSave(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  filename QString [required]
    */
    virtual void protocolSnmpv3VacmSaveas(const qint32 &agent_num, const QString &filename);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  view_name QString [required]
    * @param[in]  view_type QString [required]
    * @param[in]  subtree QString [required]
    * @param[in]  mask QString [required]
    */
    virtual void protocolSnmpv3ViewAdd(const qint32 &agent_num, const QString &view_name, const QString &view_type, const QString &subtree, const QString &mask);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3ViewClear(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  view_name QString [required]
    */
    virtual void protocolSnmpv3ViewDel(const qint32 &agent_num, const QString &view_name);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmpv3ViewList(const qint32 &agent_num);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolSnmpv3AccessAddCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3AccessClearCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3AccessDelCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3AccessListCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GetContextEngineidCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GetEnginebootsCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GetEngineidCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GetEnginetimeCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GroupAddCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GroupClearCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GroupDelCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3GroupListCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3SetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3UserAddCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3UserClearCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3UserDelCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3UserListCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3UsmSaveCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3UsmSaveasCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3VacmSaveCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3VacmSaveasCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3ViewAddCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3ViewClearCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3ViewDelCallback(OAIHttpRequestWorker *worker);
    void protocolSnmpv3ViewListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolSnmpv3AccessAddSignal(QString summary);
    void protocolSnmpv3AccessClearSignal(QString summary);
    void protocolSnmpv3AccessDelSignal(QString summary);
    void protocolSnmpv3AccessListSignal(QList<QString> summary);
    void protocolSnmpv3GetConfigSignal(OAIConfigSNMPv3 summary);
    void protocolSnmpv3GetContextEngineidSignal(QString summary);
    void protocolSnmpv3GetEnginebootsSignal(qint32 summary);
    void protocolSnmpv3GetEngineidSignal(QString summary);
    void protocolSnmpv3GetEnginetimeSignal(qint32 summary);
    void protocolSnmpv3GroupAddSignal(QString summary);
    void protocolSnmpv3GroupClearSignal(QString summary);
    void protocolSnmpv3GroupDelSignal(QString summary);
    void protocolSnmpv3GroupListSignal(QList<QString> summary);
    void protocolSnmpv3SetConfigSignal(QString summary);
    void protocolSnmpv3UserAddSignal(QString summary);
    void protocolSnmpv3UserClearSignal(QString summary);
    void protocolSnmpv3UserDelSignal(QString summary);
    void protocolSnmpv3UserListSignal(QList<QString> summary);
    void protocolSnmpv3UsmSaveSignal(QList<QString> summary);
    void protocolSnmpv3UsmSaveasSignal(QList<QString> summary);
    void protocolSnmpv3VacmSaveSignal(QList<QString> summary);
    void protocolSnmpv3VacmSaveasSignal(QList<QString> summary);
    void protocolSnmpv3ViewAddSignal(QString summary);
    void protocolSnmpv3ViewClearSignal(QString summary);
    void protocolSnmpv3ViewDelSignal(QString summary);
    void protocolSnmpv3ViewListSignal(QList<QString> summary);


    void protocolSnmpv3AccessAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3AccessClearSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3AccessDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3AccessListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3GetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigSNMPv3 summary);
    void protocolSnmpv3GetContextEngineidSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3GetEnginebootsSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void protocolSnmpv3GetEngineidSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3GetEnginetimeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void protocolSnmpv3GroupAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3GroupClearSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3GroupDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3GroupListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3SetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3UserAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3UserClearSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3UserDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3UserListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3UsmSaveSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3UsmSaveasSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3VacmSaveSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3VacmSaveasSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmpv3ViewAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3ViewClearSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3ViewDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmpv3ViewListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessAddSignalError() instead")
    void protocolSnmpv3AccessAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessClearSignalError() instead")
    void protocolSnmpv3AccessClearSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessClearSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessDelSignalError() instead")
    void protocolSnmpv3AccessDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessListSignalError() instead")
    void protocolSnmpv3AccessListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetConfigSignalError() instead")
    void protocolSnmpv3GetConfigSignalE(OAIConfigSNMPv3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetConfigSignalError(OAIConfigSNMPv3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetContextEngineidSignalError() instead")
    void protocolSnmpv3GetContextEngineidSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetContextEngineidSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetEnginebootsSignalError() instead")
    void protocolSnmpv3GetEnginebootsSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetEnginebootsSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetEngineidSignalError() instead")
    void protocolSnmpv3GetEngineidSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetEngineidSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetEnginetimeSignalError() instead")
    void protocolSnmpv3GetEnginetimeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetEnginetimeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupAddSignalError() instead")
    void protocolSnmpv3GroupAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupClearSignalError() instead")
    void protocolSnmpv3GroupClearSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupClearSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupDelSignalError() instead")
    void protocolSnmpv3GroupDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupListSignalError() instead")
    void protocolSnmpv3GroupListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3SetConfigSignalError() instead")
    void protocolSnmpv3SetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3SetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserAddSignalError() instead")
    void protocolSnmpv3UserAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserClearSignalError() instead")
    void protocolSnmpv3UserClearSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserClearSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserDelSignalError() instead")
    void protocolSnmpv3UserDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserListSignalError() instead")
    void protocolSnmpv3UserListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UsmSaveSignalError() instead")
    void protocolSnmpv3UsmSaveSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UsmSaveSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UsmSaveasSignalError() instead")
    void protocolSnmpv3UsmSaveasSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UsmSaveasSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3VacmSaveSignalError() instead")
    void protocolSnmpv3VacmSaveSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3VacmSaveSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3VacmSaveasSignalError() instead")
    void protocolSnmpv3VacmSaveasSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3VacmSaveasSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewAddSignalError() instead")
    void protocolSnmpv3ViewAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewClearSignalError() instead")
    void protocolSnmpv3ViewClearSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewClearSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewDelSignalError() instead")
    void protocolSnmpv3ViewDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewListSignalError() instead")
    void protocolSnmpv3ViewListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessAddSignalErrorFull() instead")
    void protocolSnmpv3AccessAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessClearSignalErrorFull() instead")
    void protocolSnmpv3AccessClearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessClearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessDelSignalErrorFull() instead")
    void protocolSnmpv3AccessDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3AccessListSignalErrorFull() instead")
    void protocolSnmpv3AccessListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3AccessListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetConfigSignalErrorFull() instead")
    void protocolSnmpv3GetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetContextEngineidSignalErrorFull() instead")
    void protocolSnmpv3GetContextEngineidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetContextEngineidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetEnginebootsSignalErrorFull() instead")
    void protocolSnmpv3GetEnginebootsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetEnginebootsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetEngineidSignalErrorFull() instead")
    void protocolSnmpv3GetEngineidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetEngineidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GetEnginetimeSignalErrorFull() instead")
    void protocolSnmpv3GetEnginetimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GetEnginetimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupAddSignalErrorFull() instead")
    void protocolSnmpv3GroupAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupClearSignalErrorFull() instead")
    void protocolSnmpv3GroupClearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupClearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupDelSignalErrorFull() instead")
    void protocolSnmpv3GroupDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3GroupListSignalErrorFull() instead")
    void protocolSnmpv3GroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3GroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3SetConfigSignalErrorFull() instead")
    void protocolSnmpv3SetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3SetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserAddSignalErrorFull() instead")
    void protocolSnmpv3UserAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserClearSignalErrorFull() instead")
    void protocolSnmpv3UserClearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserClearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserDelSignalErrorFull() instead")
    void protocolSnmpv3UserDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UserListSignalErrorFull() instead")
    void protocolSnmpv3UserListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UserListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UsmSaveSignalErrorFull() instead")
    void protocolSnmpv3UsmSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UsmSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3UsmSaveasSignalErrorFull() instead")
    void protocolSnmpv3UsmSaveasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3UsmSaveasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3VacmSaveSignalErrorFull() instead")
    void protocolSnmpv3VacmSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3VacmSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3VacmSaveasSignalErrorFull() instead")
    void protocolSnmpv3VacmSaveasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3VacmSaveasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewAddSignalErrorFull() instead")
    void protocolSnmpv3ViewAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewClearSignalErrorFull() instead")
    void protocolSnmpv3ViewClearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewClearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewDelSignalErrorFull() instead")
    void protocolSnmpv3ViewDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmpv3ViewListSignalErrorFull() instead")
    void protocolSnmpv3ViewListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmpv3ViewListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
