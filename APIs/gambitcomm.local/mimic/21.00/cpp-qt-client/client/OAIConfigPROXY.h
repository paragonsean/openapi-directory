/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigPROXY.h
 *
 * 
 */

#ifndef OAIConfigPROXY_H
#define OAIConfigPROXY_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConfigPROXY : public OAIObject {
public:
    OAIConfigPROXY();
    OAIConfigPROXY(QString json);
    ~OAIConfigPROXY() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getTcpNodelay() const;
    void setTcpNodelay(const qint32 &tcp_nodelay);
    bool is_tcp_nodelay_Set() const;
    bool is_tcp_nodelay_Valid() const;

    QString getClientToServer() const;
    void setClientToServer(const QString &client_to_server);
    bool is_client_to_server_Set() const;
    bool is_client_to_server_Valid() const;

    qint32 getDisconnectDelay() const;
    void setDisconnectDelay(const qint32 &disconnect_delay);
    bool is_disconnect_delay_Set() const;
    bool is_disconnect_delay_Valid() const;

    qint32 getMaxConnects() const;
    void setMaxConnects(const qint32 &max_connects);
    bool is_max_connects_Set() const;
    bool is_max_connects_Valid() const;

    qint32 getPortno() const;
    void setPortno(const qint32 &portno);
    bool is_portno_Set() const;
    bool is_portno_Valid() const;

    QString getPreConnect() const;
    void setPreConnect(const QString &pre_connect);
    bool is_pre_connect_Set() const;
    bool is_pre_connect_Valid() const;

    QString getServerToClient() const;
    void setServerToClient(const QString &server_to_client);
    bool is_server_to_client_Set() const;
    bool is_server_to_client_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    QString getTransport() const;
    void setTransport(const QString &transport);
    bool is_transport_Set() const;
    bool is_transport_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_tcp_nodelay;
    bool m_tcp_nodelay_isSet;
    bool m_tcp_nodelay_isValid;

    QString m_client_to_server;
    bool m_client_to_server_isSet;
    bool m_client_to_server_isValid;

    qint32 m_disconnect_delay;
    bool m_disconnect_delay_isSet;
    bool m_disconnect_delay_isValid;

    qint32 m_max_connects;
    bool m_max_connects_isSet;
    bool m_max_connects_isValid;

    qint32 m_portno;
    bool m_portno_isSet;
    bool m_portno_isValid;

    QString m_pre_connect;
    bool m_pre_connect_isSet;
    bool m_pre_connect_isValid;

    QString m_server_to_client;
    bool m_server_to_client_isSet;
    bool m_server_to_client_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    QString m_transport;
    bool m_transport_isSet;
    bool m_transport_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigPROXY)

#endif // OAIConfigPROXY_H
