/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimerScript.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimerScript::OAITimerScript(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimerScript::OAITimerScript() {
    this->initializeModel();
}

OAITimerScript::~OAITimerScript() {}

void OAITimerScript::initializeModel() {

    m_arg_isSet = false;
    m_arg_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAITimerScript::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimerScript::fromJsonObject(QJsonObject json) {

    m_arg_isValid = ::OpenAPI::fromJsonValue(m_arg, json[QString("arg")]);
    m_arg_isSet = !json[QString("arg")].isNull() && m_arg_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAITimerScript::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimerScript::asJsonObject() const {
    QJsonObject obj;
    if (m_arg_isSet) {
        obj.insert(QString("arg"), ::OpenAPI::toJsonValue(m_arg));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAITimerScript::getArg() const {
    return m_arg;
}
void OAITimerScript::setArg(const QString &arg) {
    m_arg = arg;
    m_arg_isSet = true;
}

bool OAITimerScript::is_arg_Set() const{
    return m_arg_isSet;
}

bool OAITimerScript::is_arg_Valid() const{
    return m_arg_isValid;
}

qint32 OAITimerScript::getInterval() const {
    return m_interval;
}
void OAITimerScript::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAITimerScript::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAITimerScript::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAITimerScript::getScript() const {
    return m_script;
}
void OAITimerScript::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAITimerScript::is_script_Set() const{
    return m_script_isSet;
}

bool OAITimerScript::is_script_Valid() const{
    return m_script_isValid;
}

bool OAITimerScript::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimerScript::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
