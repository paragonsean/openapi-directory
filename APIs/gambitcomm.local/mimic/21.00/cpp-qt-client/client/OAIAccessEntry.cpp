/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessEntry::OAIAccessEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessEntry::OAIAccessEntry() {
    this->initializeModel();
}

OAIAccessEntry::~OAIAccessEntry() {}

void OAIAccessEntry::initializeModel() {

    m_access_mask_isSet = false;
    m_access_mask_isValid = false;

    m_agent_range_isSet = false;
    m_agent_range_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAccessEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessEntry::fromJsonObject(QJsonObject json) {

    m_access_mask_isValid = ::OpenAPI::fromJsonValue(m_access_mask, json[QString("access_mask")]);
    m_access_mask_isSet = !json[QString("access_mask")].isNull() && m_access_mask_isValid;

    m_agent_range_isValid = ::OpenAPI::fromJsonValue(m_agent_range, json[QString("agent_range")]);
    m_agent_range_isSet = !json[QString("agent_range")].isNull() && m_agent_range_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAccessEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_access_mask_isSet) {
        obj.insert(QString("access_mask"), ::OpenAPI::toJsonValue(m_access_mask));
    }
    if (m_agent_range_isSet) {
        obj.insert(QString("agent_range"), ::OpenAPI::toJsonValue(m_agent_range));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAccessEntry::getAccessMask() const {
    return m_access_mask;
}
void OAIAccessEntry::setAccessMask(const QString &access_mask) {
    m_access_mask = access_mask;
    m_access_mask_isSet = true;
}

bool OAIAccessEntry::is_access_mask_Set() const{
    return m_access_mask_isSet;
}

bool OAIAccessEntry::is_access_mask_Valid() const{
    return m_access_mask_isValid;
}

QString OAIAccessEntry::getAgentRange() const {
    return m_agent_range;
}
void OAIAccessEntry::setAgentRange(const QString &agent_range) {
    m_agent_range = agent_range;
    m_agent_range_isSet = true;
}

bool OAIAccessEntry::is_agent_range_Set() const{
    return m_agent_range_isSet;
}

bool OAIAccessEntry::is_agent_range_Valid() const{
    return m_agent_range_isValid;
}

QString OAIAccessEntry::getUser() const {
    return m_user;
}
void OAIAccessEntry::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAccessEntry::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAccessEntry::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAccessEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
