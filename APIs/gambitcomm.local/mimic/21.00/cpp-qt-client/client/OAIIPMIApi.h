/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIPMIApi_H
#define OAI_OAIIPMIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigIPMI.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIPMIApi : public QObject {
    Q_OBJECT

public:
    OAIIPMIApi(const int timeOut = 0);
    ~OAIIPMIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolIpmiGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  attr QString [required]
    */
    virtual void protocolIpmiGetAttr(const qint32 &agent_num, const QString &attr);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolIpmiGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolIpmiGetStatistics(const qint32 &agent_num);


    virtual void protocolIpmiGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolIpmiGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  attr QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolIpmiSetAttr(const qint32 &agent_num, const QString &attr, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolIpmiSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolIpmiSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolIpmiGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiGetAttrCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiSetAttrCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolIpmiSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolIpmiGetArgsSignal(OAIObject summary);
    void protocolIpmiGetAttrSignal(QString summary);
    void protocolIpmiGetConfigSignal(OAIConfigIPMI summary);
    void protocolIpmiGetStatisticsSignal(QList<qint32> summary);
    void protocolIpmiGetStatsHdrSignal(QList<QString> summary);
    void protocolIpmiGetTraceSignal(OAIConfigIPMI summary);
    void protocolIpmiSetAttrSignal(QString summary);
    void protocolIpmiSetConfigSignal(QString summary);
    void protocolIpmiSetTraceSignal(QString summary);


    void protocolIpmiGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolIpmiGetAttrSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolIpmiGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigIPMI summary);
    void protocolIpmiGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolIpmiGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolIpmiGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigIPMI summary);
    void protocolIpmiSetAttrSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolIpmiSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolIpmiSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolIpmiGetArgsSignalError() instead")
    void protocolIpmiGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetAttrSignalError() instead")
    void protocolIpmiGetAttrSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetAttrSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetConfigSignalError() instead")
    void protocolIpmiGetConfigSignalE(OAIConfigIPMI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetConfigSignalError(OAIConfigIPMI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetStatisticsSignalError() instead")
    void protocolIpmiGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetStatsHdrSignalError() instead")
    void protocolIpmiGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetTraceSignalError() instead")
    void protocolIpmiGetTraceSignalE(OAIConfigIPMI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetTraceSignalError(OAIConfigIPMI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiSetAttrSignalError() instead")
    void protocolIpmiSetAttrSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiSetAttrSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiSetConfigSignalError() instead")
    void protocolIpmiSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiSetTraceSignalError() instead")
    void protocolIpmiSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolIpmiGetArgsSignalErrorFull() instead")
    void protocolIpmiGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetAttrSignalErrorFull() instead")
    void protocolIpmiGetAttrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetAttrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetConfigSignalErrorFull() instead")
    void protocolIpmiGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetStatisticsSignalErrorFull() instead")
    void protocolIpmiGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetStatsHdrSignalErrorFull() instead")
    void protocolIpmiGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiGetTraceSignalErrorFull() instead")
    void protocolIpmiGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiSetAttrSignalErrorFull() instead")
    void protocolIpmiSetAttrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiSetAttrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiSetConfigSignalErrorFull() instead")
    void protocolIpmiSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolIpmiSetTraceSignalErrorFull() instead")
    void protocolIpmiSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolIpmiSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
