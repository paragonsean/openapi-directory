/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITFTPApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITFTPApi::OAITFTPApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITFTPApi::~OAITFTPApi() {
}

void OAITFTPApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://gambitcomm.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://127.0.0.1"),
    "Gambit Communications MIMIC simulator REST API",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("protocolTftpGetArgs", defaultConf);
    _serverIndices.insert("protocolTftpGetArgs", 0);
    _serverConfigs.insert("protocolTftpGetConfig", defaultConf);
    _serverIndices.insert("protocolTftpGetConfig", 0);
    _serverConfigs.insert("protocolTftpGetStatistics", defaultConf);
    _serverIndices.insert("protocolTftpGetStatistics", 0);
    _serverConfigs.insert("protocolTftpGetStatsHdr", defaultConf);
    _serverIndices.insert("protocolTftpGetStatsHdr", 0);
    _serverConfigs.insert("protocolTftpGetTrace", defaultConf);
    _serverIndices.insert("protocolTftpGetTrace", 0);
    _serverConfigs.insert("protocolTftpSessionGetParameter", defaultConf);
    _serverIndices.insert("protocolTftpSessionGetParameter", 0);
    _serverConfigs.insert("protocolTftpSessionRead", defaultConf);
    _serverIndices.insert("protocolTftpSessionRead", 0);
    _serverConfigs.insert("protocolTftpSessionSetParameter", defaultConf);
    _serverIndices.insert("protocolTftpSessionSetParameter", 0);
    _serverConfigs.insert("protocolTftpSessionStart", defaultConf);
    _serverIndices.insert("protocolTftpSessionStart", 0);
    _serverConfigs.insert("protocolTftpSessionStatus", defaultConf);
    _serverIndices.insert("protocolTftpSessionStatus", 0);
    _serverConfigs.insert("protocolTftpSessionStop", defaultConf);
    _serverIndices.insert("protocolTftpSessionStop", 0);
    _serverConfigs.insert("protocolTftpSessionWrite", defaultConf);
    _serverIndices.insert("protocolTftpSessionWrite", 0);
    _serverConfigs.insert("protocolTftpSetConfig", defaultConf);
    _serverIndices.insert("protocolTftpSetConfig", 0);
    _serverConfigs.insert("protocolTftpSetTrace", defaultConf);
    _serverIndices.insert("protocolTftpSetTrace", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITFTPApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITFTPApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITFTPApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITFTPApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITFTPApi::setUsername(const QString &username) {
    _username = username;
}

void OAITFTPApi::setPassword(const QString &password) {
    _password = password;
}


void OAITFTPApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITFTPApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITFTPApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITFTPApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITFTPApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITFTPApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITFTPApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITFTPApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITFTPApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITFTPApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITFTPApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITFTPApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITFTPApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITFTPApi::protocolTftpGetArgs(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolTftpGetArgs"][_serverIndices.value("protocolTftpGetArgs")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/get/args");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpGetArgsCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpGetArgsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpGetArgsSignal(output);
        Q_EMIT protocolTftpGetArgsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpGetArgsSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpGetArgsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpGetArgsSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpGetArgsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpGetConfig(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolTftpGetConfig"][_serverIndices.value("protocolTftpGetConfig")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/get/config");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpGetConfigCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpGetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfigTFTP output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpGetConfigSignal(output);
        Q_EMIT protocolTftpGetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpGetConfigSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpGetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpGetConfigSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpGetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpGetStatistics(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolTftpGetStatistics"][_serverIndices.value("protocolTftpGetStatistics")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/get/statistics");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpGetStatisticsCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpGetStatisticsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpGetStatisticsSignal(output);
        Q_EMIT protocolTftpGetStatisticsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpGetStatisticsSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpGetStatisticsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpGetStatisticsSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpGetStatisticsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpGetStatsHdr() {
    QString fullPath = QString(_serverConfigs["protocolTftpGetStatsHdr"][_serverIndices.value("protocolTftpGetStatsHdr")].URL()+"/mimic/protocol/msg/tftp/get/stats_hdr");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpGetStatsHdrCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpGetStatsHdrCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpGetStatsHdrSignal(output);
        Q_EMIT protocolTftpGetStatsHdrSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpGetStatsHdrSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpGetStatsHdrSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpGetStatsHdrSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpGetStatsHdrSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpGetTrace(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolTftpGetTrace"][_serverIndices.value("protocolTftpGetTrace")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/get/trace");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpGetTraceCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpGetTraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfigTFTP output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpGetTraceSignal(output);
        Q_EMIT protocolTftpGetTraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpGetTraceSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpGetTraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpGetTraceSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpGetTraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionGetParameter(const qint32 &agent_num, const QString &session_id, const QString &parameter) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionGetParameter"][_serverIndices.value("protocolTftpSessionGetParameter")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/get/{parameter}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionID"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    
    {
        QString parameterPathParam("{");
        parameterPathParam.append("parameter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "parameter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"parameter"+pathSuffix : pathPrefix;
        fullPath.replace(parameterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(parameter)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionGetParameterCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionGetParameterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionGetParameterSignal(output);
        Q_EMIT protocolTftpSessionGetParameterSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionGetParameterSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionGetParameterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionGetParameterSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionGetParameterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionRead(const qint32 &agent_num, const QString &srcfile) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionRead"][_serverIndices.value("protocolTftpSessionRead")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/session/read/server/{srcfile}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString srcfilePathParam("{");
        srcfilePathParam.append("srcfile").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "srcfile", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"srcfile"+pathSuffix : pathPrefix;
        fullPath.replace(srcfilePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(srcfile)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionReadCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionReadSignal(output);
        Q_EMIT protocolTftpSessionReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionReadSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionReadSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionSetParameter(const qint32 &agent_num, const QString &session_id, const QString &parameter, const QString &value) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionSetParameter"][_serverIndices.value("protocolTftpSessionSetParameter")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/set/{parameter}/{value}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionID"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    
    {
        QString parameterPathParam("{");
        parameterPathParam.append("parameter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "parameter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"parameter"+pathSuffix : pathPrefix;
        fullPath.replace(parameterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(parameter)));
    }
    
    {
        QString valuePathParam("{");
        valuePathParam.append("value").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "value", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"value"+pathSuffix : pathPrefix;
        fullPath.replace(valuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(value)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionSetParameterCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionSetParameterCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionSetParameterSignal(output);
        Q_EMIT protocolTftpSessionSetParameterSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionSetParameterSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionSetParameterSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionSetParameterSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionSetParameterSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionStart(const qint32 &agent_num, const QString &session_id) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionStart"][_serverIndices.value("protocolTftpSessionStart")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/start");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionID"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionStartCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionStartCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionStartSignal(output);
        Q_EMIT protocolTftpSessionStartSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionStartSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionStartSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionStartSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionStartSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionStatus(const qint32 &agent_num, const QString &session_id) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionStatus"][_serverIndices.value("protocolTftpSessionStatus")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/status");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionID"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionStatusCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionStatusSignal(output);
        Q_EMIT protocolTftpSessionStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionStatusSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionStatusSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionStop(const qint32 &agent_num, const QString &session_id) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionStop"][_serverIndices.value("protocolTftpSessionStop")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/stop");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString session_idPathParam("{");
        session_idPathParam.append("sessionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sessionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sessionID"+pathSuffix : pathPrefix;
        fullPath.replace(session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionStopCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionStopCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionStopSignal(output);
        Q_EMIT protocolTftpSessionStopSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionStopSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionStopSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionStopSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionStopSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSessionWrite(const qint32 &agent_num, const QString &srcfile) {
    QString fullPath = QString(_serverConfigs["protocolTftpSessionWrite"][_serverIndices.value("protocolTftpSessionWrite")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/session/write/server/{srcfile}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString srcfilePathParam("{");
        srcfilePathParam.append("srcfile").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "srcfile", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"srcfile"+pathSuffix : pathPrefix;
        fullPath.replace(srcfilePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(srcfile)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSessionWriteCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSessionWriteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSessionWriteSignal(output);
        Q_EMIT protocolTftpSessionWriteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSessionWriteSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSessionWriteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSessionWriteSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSessionWriteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSetConfig(const qint32 &agent_num, const QString &argument, const QString &value) {
    QString fullPath = QString(_serverConfigs["protocolTftpSetConfig"][_serverIndices.value("protocolTftpSetConfig")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/set/config/{argument}/{value}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString argumentPathParam("{");
        argumentPathParam.append("argument").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "argument", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"argument"+pathSuffix : pathPrefix;
        fullPath.replace(argumentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(argument)));
    }
    
    {
        QString valuePathParam("{");
        valuePathParam.append("value").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "value", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"value"+pathSuffix : pathPrefix;
        fullPath.replace(valuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(value)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSetConfigCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSetConfigSignal(output);
        Q_EMIT protocolTftpSetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSetConfigSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSetConfigSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::protocolTftpSetTrace(const qint32 &agent_num, const QString &enable_or_not) {
    QString fullPath = QString(_serverConfigs["protocolTftpSetTrace"][_serverIndices.value("protocolTftpSetTrace")].URL()+"/mimic/agent/{agentNum}/protocol/msg/tftp/set/trace/{enableOrNot}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString enable_or_notPathParam("{");
        enable_or_notPathParam.append("enableOrNot").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enableOrNot", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enableOrNot"+pathSuffix : pathPrefix;
        fullPath.replace(enable_or_notPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_or_not)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITFTPApi::protocolTftpSetTraceCallback);
    connect(this, &OAITFTPApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITFTPApi::protocolTftpSetTraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolTftpSetTraceSignal(output);
        Q_EMIT protocolTftpSetTraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolTftpSetTraceSignalE(output, error_type, error_str);
        Q_EMIT protocolTftpSetTraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolTftpSetTraceSignalError(output, error_type, error_str);
        Q_EMIT protocolTftpSetTraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITFTPApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
