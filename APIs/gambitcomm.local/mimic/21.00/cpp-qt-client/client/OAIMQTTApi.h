/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMQTTApi_H
#define OAI_OAIMQTTApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigMQTT.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMQTTApi : public QObject {
    Q_OBJECT

public:
    OAIMQTTApi(const int timeOut = 0);
    ~OAIMQTTApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientGetProtstate(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientGetState(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientMessageCard(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  msg_num qint32 [required]
    * @param[in]  attr QString [required]
    */
    virtual void protocolMqttClientMessageGet(const qint32 &agent_num, const qint32 &msg_num, const QString &attr);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  msg_num qint32 [required]
    * @param[in]  attr QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolMqttClientMessageSet(const qint32 &agent_num, const qint32 &msg_num, const QString &attr, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  sub_num qint32 [required]
    */
    virtual void protocolMqttClientResubscribe(const qint32 &agent_num, const qint32 &sub_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientRuntimeAbort(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientRuntimeConnect(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientRuntimeDisconnect(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  broker_addr QString [required]
    */
    virtual void protocolMqttClientSetBroker(const qint32 &agent_num, const QString &broker_addr);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  clean_or_not qint32 [required]
    */
    virtual void protocolMqttClientSetCleansession(const qint32 &agent_num, const qint32 &clean_or_not);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  client_id QString [required]
    */
    virtual void protocolMqttClientSetClientid(const qint32 &agent_num, const QString &client_id);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  alive_time qint32 [required]
    */
    virtual void protocolMqttClientSetKeepalive(const qint32 &agent_num, const qint32 &alive_time);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  action QString [required]
    */
    virtual void protocolMqttClientSetOnDisconnect(const qint32 &agent_num, const QString &action);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  password QString [required]
    */
    virtual void protocolMqttClientSetPassword(const qint32 &agent_num, const QString &password);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port QString [required]
    */
    virtual void protocolMqttClientSetPort(const qint32 &agent_num, const QString &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  username QString [required]
    */
    virtual void protocolMqttClientSetUsername(const qint32 &agent_num, const QString &username);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  msg QString [required]
    */
    virtual void protocolMqttClientSetWillmsg(const qint32 &agent_num, const QString &msg);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  qos QString [required]
    */
    virtual void protocolMqttClientSetWillqos(const qint32 &agent_num, const QString &qos);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  retain QString [required]
    */
    virtual void protocolMqttClientSetWillretain(const qint32 &agent_num, const QString &retain);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  topic QString [required]
    */
    virtual void protocolMqttClientSetWilltopic(const qint32 &agent_num, const QString &topic);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttClientSubscribeCard(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  sub_num qint32 [required]
    * @param[in]  attr QString [required]
    */
    virtual void protocolMqttClientSubscribeGet(const qint32 &agent_num, const qint32 &sub_num, const QString &attr);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  sub_num qint32 [required]
    * @param[in]  attr QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolMqttClientSubscribeSet(const qint32 &agent_num, const qint32 &sub_num, const QString &attr, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  sub_num qint32 [required]
    */
    virtual void protocolMqttClientUnsubscribe(const qint32 &agent_num, const qint32 &sub_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttGetStatistics(const qint32 &agent_num);


    virtual void protocolMqttGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolMqttGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolMqttSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolMqttSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolMqttClientGetProtstateCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientGetStateCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientMessageCardCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientMessageGetCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientMessageSetCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientResubscribeCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientRuntimeAbortCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientRuntimeConnectCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientRuntimeDisconnectCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetBrokerCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetCleansessionCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetClientidCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetKeepaliveCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetOnDisconnectCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetPasswordCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetPortCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetUsernameCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetWillmsgCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetWillqosCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetWillretainCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSetWilltopicCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSubscribeCardCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSubscribeGetCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientSubscribeSetCallback(OAIHttpRequestWorker *worker);
    void protocolMqttClientUnsubscribeCallback(OAIHttpRequestWorker *worker);
    void protocolMqttGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolMqttGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolMqttGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolMqttGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolMqttGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolMqttSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolMqttSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolMqttClientGetProtstateSignal(QList<qint32> summary);
    void protocolMqttClientGetStateSignal(QList<qint32> summary);
    void protocolMqttClientMessageCardSignal(QList<qint32> summary);
    void protocolMqttClientMessageGetSignal(QList<QString> summary);
    void protocolMqttClientMessageSetSignal(QList<QString> summary);
    void protocolMqttClientResubscribeSignal(QString summary);
    void protocolMqttClientRuntimeAbortSignal(QList<QString> summary);
    void protocolMqttClientRuntimeConnectSignal(QList<QString> summary);
    void protocolMqttClientRuntimeDisconnectSignal(QList<QString> summary);
    void protocolMqttClientSetBrokerSignal(QList<qint32> summary);
    void protocolMqttClientSetCleansessionSignal(QList<qint32> summary);
    void protocolMqttClientSetClientidSignal(QList<qint32> summary);
    void protocolMqttClientSetKeepaliveSignal(QList<qint32> summary);
    void protocolMqttClientSetOnDisconnectSignal(QList<qint32> summary);
    void protocolMqttClientSetPasswordSignal(QList<qint32> summary);
    void protocolMqttClientSetPortSignal(QList<qint32> summary);
    void protocolMqttClientSetUsernameSignal(QList<qint32> summary);
    void protocolMqttClientSetWillmsgSignal(QList<qint32> summary);
    void protocolMqttClientSetWillqosSignal(QList<qint32> summary);
    void protocolMqttClientSetWillretainSignal(QList<qint32> summary);
    void protocolMqttClientSetWilltopicSignal(QList<qint32> summary);
    void protocolMqttClientSubscribeCardSignal(QList<qint32> summary);
    void protocolMqttClientSubscribeGetSignal(QList<QString> summary);
    void protocolMqttClientSubscribeSetSignal(QList<QString> summary);
    void protocolMqttClientUnsubscribeSignal(QString summary);
    void protocolMqttGetArgsSignal(OAIObject summary);
    void protocolMqttGetConfigSignal(OAIConfigMQTT summary);
    void protocolMqttGetStatisticsSignal(QList<qint32> summary);
    void protocolMqttGetStatsHdrSignal(QList<QString> summary);
    void protocolMqttGetTraceSignal(OAIConfigMQTT summary);
    void protocolMqttSetConfigSignal(QString summary);
    void protocolMqttSetTraceSignal(QString summary);


    void protocolMqttClientGetProtstateSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientGetStateSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientMessageCardSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientMessageGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientMessageSetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientResubscribeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolMqttClientRuntimeAbortSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientRuntimeConnectSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientRuntimeDisconnectSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientSetBrokerSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetCleansessionSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetClientidSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetKeepaliveSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetOnDisconnectSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetPasswordSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetPortSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetUsernameSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetWillmsgSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetWillqosSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetWillretainSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSetWilltopicSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSubscribeCardSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttClientSubscribeGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientSubscribeSetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttClientUnsubscribeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolMqttGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolMqttGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigMQTT summary);
    void protocolMqttGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolMqttGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolMqttGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigMQTT summary);
    void protocolMqttSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolMqttSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolMqttClientGetProtstateSignalError() instead")
    void protocolMqttClientGetProtstateSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientGetProtstateSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientGetStateSignalError() instead")
    void protocolMqttClientGetStateSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientGetStateSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientMessageCardSignalError() instead")
    void protocolMqttClientMessageCardSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientMessageCardSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientMessageGetSignalError() instead")
    void protocolMqttClientMessageGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientMessageGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientMessageSetSignalError() instead")
    void protocolMqttClientMessageSetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientMessageSetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientResubscribeSignalError() instead")
    void protocolMqttClientResubscribeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientResubscribeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientRuntimeAbortSignalError() instead")
    void protocolMqttClientRuntimeAbortSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientRuntimeAbortSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientRuntimeConnectSignalError() instead")
    void protocolMqttClientRuntimeConnectSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientRuntimeConnectSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientRuntimeDisconnectSignalError() instead")
    void protocolMqttClientRuntimeDisconnectSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientRuntimeDisconnectSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetBrokerSignalError() instead")
    void protocolMqttClientSetBrokerSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetBrokerSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetCleansessionSignalError() instead")
    void protocolMqttClientSetCleansessionSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetCleansessionSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetClientidSignalError() instead")
    void protocolMqttClientSetClientidSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetClientidSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetKeepaliveSignalError() instead")
    void protocolMqttClientSetKeepaliveSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetKeepaliveSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetOnDisconnectSignalError() instead")
    void protocolMqttClientSetOnDisconnectSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetOnDisconnectSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetPasswordSignalError() instead")
    void protocolMqttClientSetPasswordSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetPasswordSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetPortSignalError() instead")
    void protocolMqttClientSetPortSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetPortSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetUsernameSignalError() instead")
    void protocolMqttClientSetUsernameSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetUsernameSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWillmsgSignalError() instead")
    void protocolMqttClientSetWillmsgSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWillmsgSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWillqosSignalError() instead")
    void protocolMqttClientSetWillqosSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWillqosSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWillretainSignalError() instead")
    void protocolMqttClientSetWillretainSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWillretainSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWilltopicSignalError() instead")
    void protocolMqttClientSetWilltopicSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWilltopicSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSubscribeCardSignalError() instead")
    void protocolMqttClientSubscribeCardSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSubscribeCardSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSubscribeGetSignalError() instead")
    void protocolMqttClientSubscribeGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSubscribeGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSubscribeSetSignalError() instead")
    void protocolMqttClientSubscribeSetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSubscribeSetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientUnsubscribeSignalError() instead")
    void protocolMqttClientUnsubscribeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientUnsubscribeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetArgsSignalError() instead")
    void protocolMqttGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetConfigSignalError() instead")
    void protocolMqttGetConfigSignalE(OAIConfigMQTT summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetConfigSignalError(OAIConfigMQTT summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetStatisticsSignalError() instead")
    void protocolMqttGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetStatsHdrSignalError() instead")
    void protocolMqttGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetTraceSignalError() instead")
    void protocolMqttGetTraceSignalE(OAIConfigMQTT summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetTraceSignalError(OAIConfigMQTT summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttSetConfigSignalError() instead")
    void protocolMqttSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttSetTraceSignalError() instead")
    void protocolMqttSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolMqttClientGetProtstateSignalErrorFull() instead")
    void protocolMqttClientGetProtstateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientGetProtstateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientGetStateSignalErrorFull() instead")
    void protocolMqttClientGetStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientGetStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientMessageCardSignalErrorFull() instead")
    void protocolMqttClientMessageCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientMessageCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientMessageGetSignalErrorFull() instead")
    void protocolMqttClientMessageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientMessageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientMessageSetSignalErrorFull() instead")
    void protocolMqttClientMessageSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientMessageSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientResubscribeSignalErrorFull() instead")
    void protocolMqttClientResubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientResubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientRuntimeAbortSignalErrorFull() instead")
    void protocolMqttClientRuntimeAbortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientRuntimeAbortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientRuntimeConnectSignalErrorFull() instead")
    void protocolMqttClientRuntimeConnectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientRuntimeConnectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientRuntimeDisconnectSignalErrorFull() instead")
    void protocolMqttClientRuntimeDisconnectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientRuntimeDisconnectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetBrokerSignalErrorFull() instead")
    void protocolMqttClientSetBrokerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetBrokerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetCleansessionSignalErrorFull() instead")
    void protocolMqttClientSetCleansessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetCleansessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetClientidSignalErrorFull() instead")
    void protocolMqttClientSetClientidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetClientidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetKeepaliveSignalErrorFull() instead")
    void protocolMqttClientSetKeepaliveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetKeepaliveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetOnDisconnectSignalErrorFull() instead")
    void protocolMqttClientSetOnDisconnectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetOnDisconnectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetPasswordSignalErrorFull() instead")
    void protocolMqttClientSetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetPortSignalErrorFull() instead")
    void protocolMqttClientSetPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetUsernameSignalErrorFull() instead")
    void protocolMqttClientSetUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWillmsgSignalErrorFull() instead")
    void protocolMqttClientSetWillmsgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWillmsgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWillqosSignalErrorFull() instead")
    void protocolMqttClientSetWillqosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWillqosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWillretainSignalErrorFull() instead")
    void protocolMqttClientSetWillretainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWillretainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSetWilltopicSignalErrorFull() instead")
    void protocolMqttClientSetWilltopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSetWilltopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSubscribeCardSignalErrorFull() instead")
    void protocolMqttClientSubscribeCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSubscribeCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSubscribeGetSignalErrorFull() instead")
    void protocolMqttClientSubscribeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSubscribeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientSubscribeSetSignalErrorFull() instead")
    void protocolMqttClientSubscribeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientSubscribeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttClientUnsubscribeSignalErrorFull() instead")
    void protocolMqttClientUnsubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttClientUnsubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetArgsSignalErrorFull() instead")
    void protocolMqttGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetConfigSignalErrorFull() instead")
    void protocolMqttGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetStatisticsSignalErrorFull() instead")
    void protocolMqttGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetStatsHdrSignalErrorFull() instead")
    void protocolMqttGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttGetTraceSignalErrorFull() instead")
    void protocolMqttGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttSetConfigSignalErrorFull() instead")
    void protocolMqttSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolMqttSetTraceSignalErrorFull() instead")
    void protocolMqttSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolMqttSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
