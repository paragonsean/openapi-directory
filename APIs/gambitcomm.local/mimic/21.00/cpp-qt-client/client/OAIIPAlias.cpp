/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPAlias.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPAlias::OAIIPAlias(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPAlias::OAIIPAlias() {
    this->initializeModel();
}

OAIIPAlias::~OAIIPAlias() {}

void OAIIPAlias::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIIPAlias::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPAlias::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("IP")]);
    m_ip_isSet = !json[QString("IP")].isNull() && m_ip_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAIIPAlias::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPAlias::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("IP"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAIIPAlias::getIp() const {
    return m_ip;
}
void OAIIPAlias::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIIPAlias::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIIPAlias::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIIPAlias::getInterface() const {
    return m_interface;
}
void OAIIPAlias::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIIPAlias::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIIPAlias::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIIPAlias::getMask() const {
    return m_mask;
}
void OAIIPAlias::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIIPAlias::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIIPAlias::is_mask_Valid() const{
    return m_mask_isValid;
}

qint32 OAIIPAlias::getPort() const {
    return m_port;
}
void OAIIPAlias::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIIPAlias::is_port_Set() const{
    return m_port_isSet;
}

bool OAIIPAlias::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIIPAlias::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPAlias::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
