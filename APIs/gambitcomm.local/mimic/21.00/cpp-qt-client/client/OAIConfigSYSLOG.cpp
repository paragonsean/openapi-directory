/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigSYSLOG.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigSYSLOG::OAIConfigSYSLOG(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigSYSLOG::OAIConfigSYSLOG() {
    this->initializeModel();
}

OAIConfigSYSLOG::~OAIConfigSYSLOG() {}

void OAIConfigSYSLOG::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_localport_isSet = false;
    m_localport_isValid = false;

    m_separator_isSet = false;
    m_separator_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_serverport_isSet = false;
    m_serverport_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIConfigSYSLOG::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigSYSLOG::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_localport_isValid = ::OpenAPI::fromJsonValue(m_localport, json[QString("localport")]);
    m_localport_isSet = !json[QString("localport")].isNull() && m_localport_isValid;

    m_separator_isValid = ::OpenAPI::fromJsonValue(m_separator, json[QString("separator")]);
    m_separator_isSet = !json[QString("separator")].isNull() && m_separator_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_serverport_isValid = ::OpenAPI::fromJsonValue(m_serverport, json[QString("serverport")]);
    m_serverport_isSet = !json[QString("serverport")].isNull() && m_serverport_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIConfigSYSLOG::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigSYSLOG::asJsonObject() const {
    QJsonObject obj;
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_localport_isSet) {
        obj.insert(QString("localport"), ::OpenAPI::toJsonValue(m_localport));
    }
    if (m_separator_isSet) {
        obj.insert(QString("separator"), ::OpenAPI::toJsonValue(m_separator));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_serverport_isSet) {
        obj.insert(QString("serverport"), ::OpenAPI::toJsonValue(m_serverport));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIConfigSYSLOG::getClient() const {
    return m_client;
}
void OAIConfigSYSLOG::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIConfigSYSLOG::is_client_Set() const{
    return m_client_isSet;
}

bool OAIConfigSYSLOG::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIConfigSYSLOG::getHostname() const {
    return m_hostname;
}
void OAIConfigSYSLOG::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIConfigSYSLOG::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIConfigSYSLOG::is_hostname_Valid() const{
    return m_hostname_isValid;
}

qint32 OAIConfigSYSLOG::getLocalport() const {
    return m_localport;
}
void OAIConfigSYSLOG::setLocalport(const qint32 &localport) {
    m_localport = localport;
    m_localport_isSet = true;
}

bool OAIConfigSYSLOG::is_localport_Set() const{
    return m_localport_isSet;
}

bool OAIConfigSYSLOG::is_localport_Valid() const{
    return m_localport_isValid;
}

QString OAIConfigSYSLOG::getSeparator() const {
    return m_separator;
}
void OAIConfigSYSLOG::setSeparator(const QString &separator) {
    m_separator = separator;
    m_separator_isSet = true;
}

bool OAIConfigSYSLOG::is_separator_Set() const{
    return m_separator_isSet;
}

bool OAIConfigSYSLOG::is_separator_Valid() const{
    return m_separator_isValid;
}

qint32 OAIConfigSYSLOG::getSequence() const {
    return m_sequence;
}
void OAIConfigSYSLOG::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIConfigSYSLOG::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIConfigSYSLOG::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIConfigSYSLOG::getServer() const {
    return m_server;
}
void OAIConfigSYSLOG::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIConfigSYSLOG::is_server_Set() const{
    return m_server_isSet;
}

bool OAIConfigSYSLOG::is_server_Valid() const{
    return m_server_isValid;
}

qint32 OAIConfigSYSLOG::getServerport() const {
    return m_serverport;
}
void OAIConfigSYSLOG::setServerport(const qint32 &serverport) {
    m_serverport = serverport;
    m_serverport_isSet = true;
}

bool OAIConfigSYSLOG::is_serverport_Set() const{
    return m_serverport_isSet;
}

bool OAIConfigSYSLOG::is_serverport_Valid() const{
    return m_serverport_isValid;
}

QString OAIConfigSYSLOG::getTimestamp() const {
    return m_timestamp;
}
void OAIConfigSYSLOG::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIConfigSYSLOG::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIConfigSYSLOG::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIConfigSYSLOG::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigSYSLOG::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
