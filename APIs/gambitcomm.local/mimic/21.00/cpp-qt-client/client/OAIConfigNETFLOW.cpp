/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigNETFLOW.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigNETFLOW::OAIConfigNETFLOW(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigNETFLOW::OAIConfigNETFLOW() {
    this->initializeModel();
}

OAIConfigNETFLOW::~OAIConfigNETFLOW() {}

void OAIConfigNETFLOW::initializeModel() {

    m_bundleflowsets_isSet = false;
    m_bundleflowsets_isValid = false;

    m_collector_isSet = false;
    m_collector_isValid = false;

    m_collectorport_isSet = false;
    m_collectorport_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;
}

void OAIConfigNETFLOW::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigNETFLOW::fromJsonObject(QJsonObject json) {

    m_bundleflowsets_isValid = ::OpenAPI::fromJsonValue(m_bundleflowsets, json[QString("bundleflowsets")]);
    m_bundleflowsets_isSet = !json[QString("bundleflowsets")].isNull() && m_bundleflowsets_isValid;

    m_collector_isValid = ::OpenAPI::fromJsonValue(m_collector, json[QString("collector")]);
    m_collector_isSet = !json[QString("collector")].isNull() && m_collector_isValid;

    m_collectorport_isValid = ::OpenAPI::fromJsonValue(m_collectorport, json[QString("collectorport")]);
    m_collectorport_isSet = !json[QString("collectorport")].isNull() && m_collectorport_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;
}

QString OAIConfigNETFLOW::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigNETFLOW::asJsonObject() const {
    QJsonObject obj;
    if (m_bundleflowsets_isSet) {
        obj.insert(QString("bundleflowsets"), ::OpenAPI::toJsonValue(m_bundleflowsets));
    }
    if (m_collector_isSet) {
        obj.insert(QString("collector"), ::OpenAPI::toJsonValue(m_collector));
    }
    if (m_collectorport_isSet) {
        obj.insert(QString("collectorport"), ::OpenAPI::toJsonValue(m_collectorport));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    return obj;
}

qint32 OAIConfigNETFLOW::getBundleflowsets() const {
    return m_bundleflowsets;
}
void OAIConfigNETFLOW::setBundleflowsets(const qint32 &bundleflowsets) {
    m_bundleflowsets = bundleflowsets;
    m_bundleflowsets_isSet = true;
}

bool OAIConfigNETFLOW::is_bundleflowsets_Set() const{
    return m_bundleflowsets_isSet;
}

bool OAIConfigNETFLOW::is_bundleflowsets_Valid() const{
    return m_bundleflowsets_isValid;
}

QString OAIConfigNETFLOW::getCollector() const {
    return m_collector;
}
void OAIConfigNETFLOW::setCollector(const QString &collector) {
    m_collector = collector;
    m_collector_isSet = true;
}

bool OAIConfigNETFLOW::is_collector_Set() const{
    return m_collector_isSet;
}

bool OAIConfigNETFLOW::is_collector_Valid() const{
    return m_collector_isValid;
}

qint32 OAIConfigNETFLOW::getCollectorport() const {
    return m_collectorport;
}
void OAIConfigNETFLOW::setCollectorport(const qint32 &collectorport) {
    m_collectorport = collectorport;
    m_collectorport_isSet = true;
}

bool OAIConfigNETFLOW::is_collectorport_Set() const{
    return m_collectorport_isSet;
}

bool OAIConfigNETFLOW::is_collectorport_Valid() const{
    return m_collectorport_isValid;
}

QString OAIConfigNETFLOW::getFilename() const {
    return m_filename;
}
void OAIConfigNETFLOW::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIConfigNETFLOW::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIConfigNETFLOW::is_filename_Valid() const{
    return m_filename_isValid;
}

bool OAIConfigNETFLOW::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundleflowsets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collectorport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigNETFLOW::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
