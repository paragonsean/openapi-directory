/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISNMPTCPApi_H
#define OAI_OAISNMPTCPApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigSNMPTCP.h"
#include "OAIIPAlias.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISNMPTCPApi : public QObject {
    Q_OBJECT

public:
    OAISNMPTCPApi(const int timeOut = 0);
    ~OAISNMPTCPApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmptcpGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmptcpGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmptcpGetStatistics(const qint32 &agent_num);


    virtual void protocolSnmptcpGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmptcpGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ipaddress QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolSnmptcpIpaliasDisable(const qint32 &agent_num, const QString &ipaddress, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ipaddress QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolSnmptcpIpaliasEnable(const qint32 &agent_num, const QString &ipaddress, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ipaddress QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolSnmptcpIpaliasIsenabled(const qint32 &agent_num, const QString &ipaddress, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSnmptcpIpaliasList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolSnmptcpSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolSnmptcpSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolSnmptcpGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpIpaliasDisableCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpIpaliasEnableCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpIpaliasIsenabledCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpIpaliasListCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSnmptcpSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolSnmptcpGetArgsSignal(OAIObject summary);
    void protocolSnmptcpGetConfigSignal(OAIConfigSNMPTCP summary);
    void protocolSnmptcpGetStatisticsSignal(QList<qint32> summary);
    void protocolSnmptcpGetStatsHdrSignal(QList<QString> summary);
    void protocolSnmptcpGetTraceSignal(OAIConfigSNMPTCP summary);
    void protocolSnmptcpIpaliasDisableSignal(QString summary);
    void protocolSnmptcpIpaliasEnableSignal(QString summary);
    void protocolSnmptcpIpaliasIsenabledSignal(QString summary);
    void protocolSnmptcpIpaliasListSignal(QList<OAIIPAlias> summary);
    void protocolSnmptcpSetConfigSignal(QString summary);
    void protocolSnmptcpSetTraceSignal(QString summary);


    void protocolSnmptcpGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolSnmptcpGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigSNMPTCP summary);
    void protocolSnmptcpGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolSnmptcpGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSnmptcpGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigSNMPTCP summary);
    void protocolSnmptcpIpaliasDisableSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmptcpIpaliasEnableSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmptcpIpaliasIsenabledSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmptcpIpaliasListSignalFull(OAIHttpRequestWorker *worker, QList<OAIIPAlias> summary);
    void protocolSnmptcpSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSnmptcpSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetArgsSignalError() instead")
    void protocolSnmptcpGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetConfigSignalError() instead")
    void protocolSnmptcpGetConfigSignalE(OAIConfigSNMPTCP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetConfigSignalError(OAIConfigSNMPTCP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetStatisticsSignalError() instead")
    void protocolSnmptcpGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetStatsHdrSignalError() instead")
    void protocolSnmptcpGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetTraceSignalError() instead")
    void protocolSnmptcpGetTraceSignalE(OAIConfigSNMPTCP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetTraceSignalError(OAIConfigSNMPTCP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasDisableSignalError() instead")
    void protocolSnmptcpIpaliasDisableSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasDisableSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasEnableSignalError() instead")
    void protocolSnmptcpIpaliasEnableSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasEnableSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasIsenabledSignalError() instead")
    void protocolSnmptcpIpaliasIsenabledSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasIsenabledSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasListSignalError() instead")
    void protocolSnmptcpIpaliasListSignalE(QList<OAIIPAlias> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasListSignalError(QList<OAIIPAlias> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpSetConfigSignalError() instead")
    void protocolSnmptcpSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpSetTraceSignalError() instead")
    void protocolSnmptcpSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetArgsSignalErrorFull() instead")
    void protocolSnmptcpGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetConfigSignalErrorFull() instead")
    void protocolSnmptcpGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetStatisticsSignalErrorFull() instead")
    void protocolSnmptcpGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetStatsHdrSignalErrorFull() instead")
    void protocolSnmptcpGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpGetTraceSignalErrorFull() instead")
    void protocolSnmptcpGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasDisableSignalErrorFull() instead")
    void protocolSnmptcpIpaliasDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasEnableSignalErrorFull() instead")
    void protocolSnmptcpIpaliasEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasIsenabledSignalErrorFull() instead")
    void protocolSnmptcpIpaliasIsenabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasIsenabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpIpaliasListSignalErrorFull() instead")
    void protocolSnmptcpIpaliasListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpIpaliasListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpSetConfigSignalErrorFull() instead")
    void protocolSnmptcpSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSnmptcpSetTraceSignalErrorFull() instead")
    void protocolSnmptcpSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSnmptcpSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
