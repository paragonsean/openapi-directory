/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIValuespaceApi_H
#define OAI_OAIValuespaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIValuespaceApi : public QObject {
    Q_OBJECT

public:
    OAIValuespaceApi(const int timeOut = 0);
    ~OAIValuespaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    */
    virtual void add(const qint32 &agent_num, const QString &object, const QString &instance);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    */
    virtual void evalValue(const qint32 &agent_num, const QString &object, const QString &instance);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    */
    virtual void getInfo(const qint32 &agent_num, const QString &object);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    */
    virtual void getInstances(const qint32 &agent_num, const QString &object);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    */
    virtual void getMib(const qint32 &agent_num, const QString &object);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  oid QString [required]
    */
    virtual void getName(const qint32 &agent_num, const QString &oid);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  oid QString [required]
    */
    virtual void getObjects(const qint32 &agent_num, const QString &oid);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    */
    virtual void getOid(const qint32 &agent_num, const QString &object);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    */
    virtual void getState(const qint32 &agent_num, const QString &object);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  variable QString [required]
    */
    virtual void getValue(const qint32 &agent_num, const QString &object, const QString &instance, const QString &variable);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    */
    virtual void getVariables(const qint32 &agent_num, const QString &object, const QString &instance);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  obj_ins_array QList<QList<QString>> [required]
    */
    virtual void mevalValue(const qint32 &agent_num, const QList<QList<QString>> &obj_ins_array);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  obj_ins_var_array QList<QList<QString>> [required]
    */
    virtual void mgetValue(const qint32 &agent_num, const QList<QList<QString>> &obj_ins_var_array);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  request_body QList<QList<QString>> [optional]
    */
    virtual void msetValue(const qint32 &agent_num, const ::OpenAPI::OptionalParam<QList<QList<QString>>> &request_body = ::OpenAPI::OptionalParam<QList<QList<QString>>>());

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  request_body QList<QList<QString>> [optional]
    */
    virtual void munsetValue(const qint32 &agent_num, const ::OpenAPI::OptionalParam<QList<QList<QString>>> &request_body = ::OpenAPI::OptionalParam<QList<QList<QString>>>());

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    */
    virtual void remove(const qint32 &agent_num, const QString &object, const QString &instance);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  state qint32 [required]
    */
    virtual void setState(const qint32 &agent_num, const QString &object, const qint32 &state);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  variable QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void setValue(const qint32 &agent_num, const QString &object, const QString &instance, const QString &variable, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  oid QString [required]
    */
    virtual void splitOid(const qint32 &agent_num, const QString &oid);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  object QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  variable QString [required]
    */
    virtual void unsetValue(const qint32 &agent_num, const QString &object, const QString &instance, const QString &variable);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addCallback(OAIHttpRequestWorker *worker);
    void evalValueCallback(OAIHttpRequestWorker *worker);
    void getInfoCallback(OAIHttpRequestWorker *worker);
    void getInstancesCallback(OAIHttpRequestWorker *worker);
    void getMibCallback(OAIHttpRequestWorker *worker);
    void getNameCallback(OAIHttpRequestWorker *worker);
    void getObjectsCallback(OAIHttpRequestWorker *worker);
    void getOidCallback(OAIHttpRequestWorker *worker);
    void getStateCallback(OAIHttpRequestWorker *worker);
    void getValueCallback(OAIHttpRequestWorker *worker);
    void getVariablesCallback(OAIHttpRequestWorker *worker);
    void mevalValueCallback(OAIHttpRequestWorker *worker);
    void mgetValueCallback(OAIHttpRequestWorker *worker);
    void msetValueCallback(OAIHttpRequestWorker *worker);
    void munsetValueCallback(OAIHttpRequestWorker *worker);
    void removeCallback(OAIHttpRequestWorker *worker);
    void setStateCallback(OAIHttpRequestWorker *worker);
    void setValueCallback(OAIHttpRequestWorker *worker);
    void splitOidCallback(OAIHttpRequestWorker *worker);
    void unsetValueCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSignal(QString summary);
    void evalValueSignal(QString summary);
    void getInfoSignal(QString summary);
    void getInstancesSignal(QList<QString> summary);
    void getMibSignal(QString summary);
    void getNameSignal(QString summary);
    void getObjectsSignal(QList<QString> summary);
    void getOidSignal(QString summary);
    void getStateSignal(QString summary);
    void getValueSignal(QString summary);
    void getVariablesSignal(QList<QString> summary);
    void mevalValueSignal(QList<QString> summary);
    void mgetValueSignal(QList<QString> summary);
    void msetValueSignal(QString summary);
    void munsetValueSignal(QString summary);
    void removeSignal(QString summary);
    void setStateSignal(QString summary);
    void setValueSignal(QString summary);
    void splitOidSignal(QList<QString> summary);
    void unsetValueSignal(QString summary);


    void addSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void evalValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getInfoSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getInstancesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getMibSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getNameSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getObjectsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOidSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getStateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getVariablesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void mevalValueSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void mgetValueSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void msetValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void munsetValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void removeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setStateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void splitOidSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void unsetValueSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use addSignalError() instead")
    void addSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use evalValueSignalError() instead")
    void evalValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void evalValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalError() instead")
    void getInfoSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstancesSignalError() instead")
    void getInstancesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstancesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMibSignalError() instead")
    void getMibSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMibSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNameSignalError() instead")
    void getNameSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNameSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectsSignalError() instead")
    void getObjectsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOidSignalError() instead")
    void getOidSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOidSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStateSignalError() instead")
    void getStateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getValueSignalError() instead")
    void getValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesSignalError() instead")
    void getVariablesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mevalValueSignalError() instead")
    void mevalValueSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mevalValueSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mgetValueSignalError() instead")
    void mgetValueSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mgetValueSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use msetValueSignalError() instead")
    void msetValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void msetValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use munsetValueSignalError() instead")
    void munsetValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void munsetValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSignalError() instead")
    void removeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStateSignalError() instead")
    void setStateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setStateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setValueSignalError() instead")
    void setValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitOidSignalError() instead")
    void splitOidSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void splitOidSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsetValueSignalError() instead")
    void unsetValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unsetValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSignalErrorFull() instead")
    void addSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use evalValueSignalErrorFull() instead")
    void evalValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void evalValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalErrorFull() instead")
    void getInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstancesSignalErrorFull() instead")
    void getInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMibSignalErrorFull() instead")
    void getMibSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMibSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNameSignalErrorFull() instead")
    void getNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectsSignalErrorFull() instead")
    void getObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOidSignalErrorFull() instead")
    void getOidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStateSignalErrorFull() instead")
    void getStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getValueSignalErrorFull() instead")
    void getValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesSignalErrorFull() instead")
    void getVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mevalValueSignalErrorFull() instead")
    void mevalValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mevalValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mgetValueSignalErrorFull() instead")
    void mgetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mgetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use msetValueSignalErrorFull() instead")
    void msetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void msetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use munsetValueSignalErrorFull() instead")
    void munsetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void munsetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSignalErrorFull() instead")
    void removeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStateSignalErrorFull() instead")
    void setStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setValueSignalErrorFull() instead")
    void setValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use splitOidSignalErrorFull() instead")
    void splitOidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void splitOidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsetValueSignalErrorFull() instead")
    void unsetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
