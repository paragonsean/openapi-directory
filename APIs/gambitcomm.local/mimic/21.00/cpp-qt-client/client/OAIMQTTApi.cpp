/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMQTTApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMQTTApi::OAIMQTTApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMQTTApi::~OAIMQTTApi() {
}

void OAIMQTTApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://gambitcomm.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://127.0.0.1"),
    "Gambit Communications MIMIC simulator REST API",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("protocolMqttClientGetProtstate", defaultConf);
    _serverIndices.insert("protocolMqttClientGetProtstate", 0);
    _serverConfigs.insert("protocolMqttClientGetState", defaultConf);
    _serverIndices.insert("protocolMqttClientGetState", 0);
    _serverConfigs.insert("protocolMqttClientMessageCard", defaultConf);
    _serverIndices.insert("protocolMqttClientMessageCard", 0);
    _serverConfigs.insert("protocolMqttClientMessageGet", defaultConf);
    _serverIndices.insert("protocolMqttClientMessageGet", 0);
    _serverConfigs.insert("protocolMqttClientMessageSet", defaultConf);
    _serverIndices.insert("protocolMqttClientMessageSet", 0);
    _serverConfigs.insert("protocolMqttClientResubscribe", defaultConf);
    _serverIndices.insert("protocolMqttClientResubscribe", 0);
    _serverConfigs.insert("protocolMqttClientRuntimeAbort", defaultConf);
    _serverIndices.insert("protocolMqttClientRuntimeAbort", 0);
    _serverConfigs.insert("protocolMqttClientRuntimeConnect", defaultConf);
    _serverIndices.insert("protocolMqttClientRuntimeConnect", 0);
    _serverConfigs.insert("protocolMqttClientRuntimeDisconnect", defaultConf);
    _serverIndices.insert("protocolMqttClientRuntimeDisconnect", 0);
    _serverConfigs.insert("protocolMqttClientSetBroker", defaultConf);
    _serverIndices.insert("protocolMqttClientSetBroker", 0);
    _serverConfigs.insert("protocolMqttClientSetCleansession", defaultConf);
    _serverIndices.insert("protocolMqttClientSetCleansession", 0);
    _serverConfigs.insert("protocolMqttClientSetClientid", defaultConf);
    _serverIndices.insert("protocolMqttClientSetClientid", 0);
    _serverConfigs.insert("protocolMqttClientSetKeepalive", defaultConf);
    _serverIndices.insert("protocolMqttClientSetKeepalive", 0);
    _serverConfigs.insert("protocolMqttClientSetOnDisconnect", defaultConf);
    _serverIndices.insert("protocolMqttClientSetOnDisconnect", 0);
    _serverConfigs.insert("protocolMqttClientSetPassword", defaultConf);
    _serverIndices.insert("protocolMqttClientSetPassword", 0);
    _serverConfigs.insert("protocolMqttClientSetPort", defaultConf);
    _serverIndices.insert("protocolMqttClientSetPort", 0);
    _serverConfigs.insert("protocolMqttClientSetUsername", defaultConf);
    _serverIndices.insert("protocolMqttClientSetUsername", 0);
    _serverConfigs.insert("protocolMqttClientSetWillmsg", defaultConf);
    _serverIndices.insert("protocolMqttClientSetWillmsg", 0);
    _serverConfigs.insert("protocolMqttClientSetWillqos", defaultConf);
    _serverIndices.insert("protocolMqttClientSetWillqos", 0);
    _serverConfigs.insert("protocolMqttClientSetWillretain", defaultConf);
    _serverIndices.insert("protocolMqttClientSetWillretain", 0);
    _serverConfigs.insert("protocolMqttClientSetWilltopic", defaultConf);
    _serverIndices.insert("protocolMqttClientSetWilltopic", 0);
    _serverConfigs.insert("protocolMqttClientSubscribeCard", defaultConf);
    _serverIndices.insert("protocolMqttClientSubscribeCard", 0);
    _serverConfigs.insert("protocolMqttClientSubscribeGet", defaultConf);
    _serverIndices.insert("protocolMqttClientSubscribeGet", 0);
    _serverConfigs.insert("protocolMqttClientSubscribeSet", defaultConf);
    _serverIndices.insert("protocolMqttClientSubscribeSet", 0);
    _serverConfigs.insert("protocolMqttClientUnsubscribe", defaultConf);
    _serverIndices.insert("protocolMqttClientUnsubscribe", 0);
    _serverConfigs.insert("protocolMqttGetArgs", defaultConf);
    _serverIndices.insert("protocolMqttGetArgs", 0);
    _serverConfigs.insert("protocolMqttGetConfig", defaultConf);
    _serverIndices.insert("protocolMqttGetConfig", 0);
    _serverConfigs.insert("protocolMqttGetStatistics", defaultConf);
    _serverIndices.insert("protocolMqttGetStatistics", 0);
    _serverConfigs.insert("protocolMqttGetStatsHdr", defaultConf);
    _serverIndices.insert("protocolMqttGetStatsHdr", 0);
    _serverConfigs.insert("protocolMqttGetTrace", defaultConf);
    _serverIndices.insert("protocolMqttGetTrace", 0);
    _serverConfigs.insert("protocolMqttSetConfig", defaultConf);
    _serverIndices.insert("protocolMqttSetConfig", 0);
    _serverConfigs.insert("protocolMqttSetTrace", defaultConf);
    _serverIndices.insert("protocolMqttSetTrace", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMQTTApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMQTTApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMQTTApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMQTTApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMQTTApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMQTTApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMQTTApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMQTTApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMQTTApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMQTTApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMQTTApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMQTTApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMQTTApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMQTTApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMQTTApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMQTTApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMQTTApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMQTTApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMQTTApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMQTTApi::protocolMqttClientGetProtstate(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientGetProtstate"][_serverIndices.value("protocolMqttClientGetProtstate")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/protstate");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientGetProtstateCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientGetProtstateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientGetProtstateSignal(output);
        Q_EMIT protocolMqttClientGetProtstateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientGetProtstateSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientGetProtstateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientGetProtstateSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientGetProtstateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientGetState(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientGetState"][_serverIndices.value("protocolMqttClientGetState")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/state");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientGetStateCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientGetStateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientGetStateSignal(output);
        Q_EMIT protocolMqttClientGetStateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientGetStateSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientGetStateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientGetStateSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientGetStateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientMessageCard(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientMessageCard"][_serverIndices.value("protocolMqttClientMessageCard")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/card");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientMessageCardCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientMessageCardCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientMessageCardSignal(output);
        Q_EMIT protocolMqttClientMessageCardSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientMessageCardSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientMessageCardSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientMessageCardSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientMessageCardSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientMessageGet(const qint32 &agent_num, const qint32 &msg_num, const QString &attr) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientMessageGet"][_serverIndices.value("protocolMqttClientMessageGet")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/get/{msgNum}/{attr}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString msg_numPathParam("{");
        msg_numPathParam.append("msgNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "msgNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"msgNum"+pathSuffix : pathPrefix;
        fullPath.replace(msg_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(msg_num)));
    }
    
    {
        QString attrPathParam("{");
        attrPathParam.append("attr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attr"+pathSuffix : pathPrefix;
        fullPath.replace(attrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attr)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientMessageGetCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientMessageGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientMessageGetSignal(output);
        Q_EMIT protocolMqttClientMessageGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientMessageGetSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientMessageGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientMessageGetSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientMessageGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientMessageSet(const qint32 &agent_num, const qint32 &msg_num, const QString &attr, const QString &value) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientMessageSet"][_serverIndices.value("protocolMqttClientMessageSet")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/set/{msgNum}/{attr}/{value}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString msg_numPathParam("{");
        msg_numPathParam.append("msgNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "msgNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"msgNum"+pathSuffix : pathPrefix;
        fullPath.replace(msg_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(msg_num)));
    }
    
    {
        QString attrPathParam("{");
        attrPathParam.append("attr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attr"+pathSuffix : pathPrefix;
        fullPath.replace(attrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attr)));
    }
    
    {
        QString valuePathParam("{");
        valuePathParam.append("value").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "value", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"value"+pathSuffix : pathPrefix;
        fullPath.replace(valuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(value)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientMessageSetCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientMessageSetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientMessageSetSignal(output);
        Q_EMIT protocolMqttClientMessageSetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientMessageSetSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientMessageSetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientMessageSetSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientMessageSetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientResubscribe(const qint32 &agent_num, const qint32 &sub_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientResubscribe"][_serverIndices.value("protocolMqttClientResubscribe")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/resubscribe/{subNum}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString sub_numPathParam("{");
        sub_numPathParam.append("subNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subNum"+pathSuffix : pathPrefix;
        fullPath.replace(sub_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sub_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientResubscribeCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientResubscribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientResubscribeSignal(output);
        Q_EMIT protocolMqttClientResubscribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientResubscribeSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientResubscribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientResubscribeSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientResubscribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientRuntimeAbort(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientRuntimeAbort"][_serverIndices.value("protocolMqttClientRuntimeAbort")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/abort");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientRuntimeAbortCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientRuntimeAbortCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientRuntimeAbortSignal(output);
        Q_EMIT protocolMqttClientRuntimeAbortSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientRuntimeAbortSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientRuntimeAbortSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientRuntimeAbortSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientRuntimeAbortSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientRuntimeConnect(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientRuntimeConnect"][_serverIndices.value("protocolMqttClientRuntimeConnect")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/connect");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientRuntimeConnectCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientRuntimeConnectCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientRuntimeConnectSignal(output);
        Q_EMIT protocolMqttClientRuntimeConnectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientRuntimeConnectSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientRuntimeConnectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientRuntimeConnectSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientRuntimeConnectSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientRuntimeDisconnect(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientRuntimeDisconnect"][_serverIndices.value("protocolMqttClientRuntimeDisconnect")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/disconnect");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientRuntimeDisconnectCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientRuntimeDisconnectCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientRuntimeDisconnectSignal(output);
        Q_EMIT protocolMqttClientRuntimeDisconnectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientRuntimeDisconnectSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientRuntimeDisconnectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientRuntimeDisconnectSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientRuntimeDisconnectSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetBroker(const qint32 &agent_num, const QString &broker_addr) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetBroker"][_serverIndices.value("protocolMqttClientSetBroker")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/broker/{brokerAddr}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString broker_addrPathParam("{");
        broker_addrPathParam.append("brokerAddr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brokerAddr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brokerAddr"+pathSuffix : pathPrefix;
        fullPath.replace(broker_addrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_addr)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetBrokerCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetBrokerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetBrokerSignal(output);
        Q_EMIT protocolMqttClientSetBrokerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetBrokerSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetBrokerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetBrokerSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetBrokerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetCleansession(const qint32 &agent_num, const qint32 &clean_or_not) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetCleansession"][_serverIndices.value("protocolMqttClientSetCleansession")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/cleansession/{cleanOrNot}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString clean_or_notPathParam("{");
        clean_or_notPathParam.append("cleanOrNot").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cleanOrNot", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cleanOrNot"+pathSuffix : pathPrefix;
        fullPath.replace(clean_or_notPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(clean_or_not)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetCleansessionCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetCleansessionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetCleansessionSignal(output);
        Q_EMIT protocolMqttClientSetCleansessionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetCleansessionSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetCleansessionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetCleansessionSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetCleansessionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetClientid(const qint32 &agent_num, const QString &client_id) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetClientid"][_serverIndices.value("protocolMqttClientSetClientid")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/clientid/{clientID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString client_idPathParam("{");
        client_idPathParam.append("clientID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "clientID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"clientID"+pathSuffix : pathPrefix;
        fullPath.replace(client_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetClientidCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetClientidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetClientidSignal(output);
        Q_EMIT protocolMqttClientSetClientidSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetClientidSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetClientidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetClientidSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetClientidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetKeepalive(const qint32 &agent_num, const qint32 &alive_time) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetKeepalive"][_serverIndices.value("protocolMqttClientSetKeepalive")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/keepalive/{aliveTime}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString alive_timePathParam("{");
        alive_timePathParam.append("aliveTime").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "aliveTime", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"aliveTime"+pathSuffix : pathPrefix;
        fullPath.replace(alive_timePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(alive_time)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetKeepaliveCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetKeepaliveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetKeepaliveSignal(output);
        Q_EMIT protocolMqttClientSetKeepaliveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetKeepaliveSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetKeepaliveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetKeepaliveSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetKeepaliveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetOnDisconnect(const qint32 &agent_num, const QString &action) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetOnDisconnect"][_serverIndices.value("protocolMqttClientSetOnDisconnect")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/on_disconnect/{action}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString actionPathParam("{");
        actionPathParam.append("action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action"+pathSuffix : pathPrefix;
        fullPath.replace(actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetOnDisconnectCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetOnDisconnectCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetOnDisconnectSignal(output);
        Q_EMIT protocolMqttClientSetOnDisconnectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetOnDisconnectSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetOnDisconnectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetOnDisconnectSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetOnDisconnectSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetPassword(const qint32 &agent_num, const QString &password) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetPassword"][_serverIndices.value("protocolMqttClientSetPassword")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/password/{password}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString passwordPathParam("{");
        passwordPathParam.append("password").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "password", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"password"+pathSuffix : pathPrefix;
        fullPath.replace(passwordPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(password)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetPasswordCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetPasswordCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetPasswordSignal(output);
        Q_EMIT protocolMqttClientSetPasswordSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetPasswordSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetPasswordSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetPasswordSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetPasswordSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetPort(const qint32 &agent_num, const QString &port) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetPort"][_serverIndices.value("protocolMqttClientSetPort")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/port/{port}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString portPathParam("{");
        portPathParam.append("port").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "port", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"port"+pathSuffix : pathPrefix;
        fullPath.replace(portPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(port)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetPortCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetPortCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetPortSignal(output);
        Q_EMIT protocolMqttClientSetPortSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetPortSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetPortSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetPortSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetPortSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetUsername(const qint32 &agent_num, const QString &username) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetUsername"][_serverIndices.value("protocolMqttClientSetUsername")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/username/{username}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetUsernameCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetUsernameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetUsernameSignal(output);
        Q_EMIT protocolMqttClientSetUsernameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetUsernameSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetUsernameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetUsernameSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetUsernameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetWillmsg(const qint32 &agent_num, const QString &msg) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetWillmsg"][_serverIndices.value("protocolMqttClientSetWillmsg")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willmsg/{msg}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString msgPathParam("{");
        msgPathParam.append("msg").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "msg", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"msg"+pathSuffix : pathPrefix;
        fullPath.replace(msgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(msg)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetWillmsgCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetWillmsgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetWillmsgSignal(output);
        Q_EMIT protocolMqttClientSetWillmsgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetWillmsgSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWillmsgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetWillmsgSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWillmsgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetWillqos(const qint32 &agent_num, const QString &qos) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetWillqos"][_serverIndices.value("protocolMqttClientSetWillqos")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willqos/{qos}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString qosPathParam("{");
        qosPathParam.append("qos").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "qos", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"qos"+pathSuffix : pathPrefix;
        fullPath.replace(qosPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(qos)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetWillqosCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetWillqosCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetWillqosSignal(output);
        Q_EMIT protocolMqttClientSetWillqosSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetWillqosSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWillqosSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetWillqosSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWillqosSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetWillretain(const qint32 &agent_num, const QString &retain) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetWillretain"][_serverIndices.value("protocolMqttClientSetWillretain")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willretain/{retain}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString retainPathParam("{");
        retainPathParam.append("retain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "retain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"retain"+pathSuffix : pathPrefix;
        fullPath.replace(retainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(retain)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetWillretainCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetWillretainCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetWillretainSignal(output);
        Q_EMIT protocolMqttClientSetWillretainSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetWillretainSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWillretainSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetWillretainSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWillretainSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSetWilltopic(const qint32 &agent_num, const QString &topic) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSetWilltopic"][_serverIndices.value("protocolMqttClientSetWilltopic")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willtopic/{topic}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString topicPathParam("{");
        topicPathParam.append("topic").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "topic", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"topic"+pathSuffix : pathPrefix;
        fullPath.replace(topicPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(topic)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSetWilltopicCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSetWilltopicCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSetWilltopicSignal(output);
        Q_EMIT protocolMqttClientSetWilltopicSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSetWilltopicSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWilltopicSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSetWilltopicSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSetWilltopicSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSubscribeCard(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSubscribeCard"][_serverIndices.value("protocolMqttClientSubscribeCard")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/card");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSubscribeCardCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSubscribeCardCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSubscribeCardSignal(output);
        Q_EMIT protocolMqttClientSubscribeCardSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSubscribeCardSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSubscribeCardSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSubscribeCardSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSubscribeCardSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSubscribeGet(const qint32 &agent_num, const qint32 &sub_num, const QString &attr) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSubscribeGet"][_serverIndices.value("protocolMqttClientSubscribeGet")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/get/{subNum}/{attr}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString sub_numPathParam("{");
        sub_numPathParam.append("subNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subNum"+pathSuffix : pathPrefix;
        fullPath.replace(sub_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sub_num)));
    }
    
    {
        QString attrPathParam("{");
        attrPathParam.append("attr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attr"+pathSuffix : pathPrefix;
        fullPath.replace(attrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attr)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSubscribeGetCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSubscribeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSubscribeGetSignal(output);
        Q_EMIT protocolMqttClientSubscribeGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSubscribeGetSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSubscribeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSubscribeGetSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSubscribeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientSubscribeSet(const qint32 &agent_num, const qint32 &sub_num, const QString &attr, const QString &value) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientSubscribeSet"][_serverIndices.value("protocolMqttClientSubscribeSet")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/set/{subNum}/{attr}/{value}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString sub_numPathParam("{");
        sub_numPathParam.append("subNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subNum"+pathSuffix : pathPrefix;
        fullPath.replace(sub_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sub_num)));
    }
    
    {
        QString attrPathParam("{");
        attrPathParam.append("attr").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attr", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attr"+pathSuffix : pathPrefix;
        fullPath.replace(attrPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attr)));
    }
    
    {
        QString valuePathParam("{");
        valuePathParam.append("value").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "value", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"value"+pathSuffix : pathPrefix;
        fullPath.replace(valuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(value)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientSubscribeSetCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientSubscribeSetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientSubscribeSetSignal(output);
        Q_EMIT protocolMqttClientSubscribeSetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientSubscribeSetSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientSubscribeSetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientSubscribeSetSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientSubscribeSetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttClientUnsubscribe(const qint32 &agent_num, const qint32 &sub_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttClientUnsubscribe"][_serverIndices.value("protocolMqttClientUnsubscribe")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/client/unsubscribe/{subNum}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString sub_numPathParam("{");
        sub_numPathParam.append("subNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subNum"+pathSuffix : pathPrefix;
        fullPath.replace(sub_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sub_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttClientUnsubscribeCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttClientUnsubscribeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttClientUnsubscribeSignal(output);
        Q_EMIT protocolMqttClientUnsubscribeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttClientUnsubscribeSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttClientUnsubscribeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttClientUnsubscribeSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttClientUnsubscribeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttGetArgs(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttGetArgs"][_serverIndices.value("protocolMqttGetArgs")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/get/args");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttGetArgsCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttGetArgsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttGetArgsSignal(output);
        Q_EMIT protocolMqttGetArgsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttGetArgsSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttGetArgsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttGetArgsSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttGetArgsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttGetConfig(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttGetConfig"][_serverIndices.value("protocolMqttGetConfig")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/get/config");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttGetConfigCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttGetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfigMQTT output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttGetConfigSignal(output);
        Q_EMIT protocolMqttGetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttGetConfigSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttGetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttGetConfigSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttGetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttGetStatistics(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttGetStatistics"][_serverIndices.value("protocolMqttGetStatistics")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/get/statistics");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttGetStatisticsCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttGetStatisticsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttGetStatisticsSignal(output);
        Q_EMIT protocolMqttGetStatisticsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttGetStatisticsSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttGetStatisticsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttGetStatisticsSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttGetStatisticsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttGetStatsHdr() {
    QString fullPath = QString(_serverConfigs["protocolMqttGetStatsHdr"][_serverIndices.value("protocolMqttGetStatsHdr")].URL()+"/mimic/protocol/msg/mqtt/get/stats_hdr");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttGetStatsHdrCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttGetStatsHdrCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttGetStatsHdrSignal(output);
        Q_EMIT protocolMqttGetStatsHdrSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttGetStatsHdrSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttGetStatsHdrSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttGetStatsHdrSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttGetStatsHdrSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttGetTrace(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolMqttGetTrace"][_serverIndices.value("protocolMqttGetTrace")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/get/trace");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttGetTraceCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttGetTraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfigMQTT output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttGetTraceSignal(output);
        Q_EMIT protocolMqttGetTraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttGetTraceSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttGetTraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttGetTraceSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttGetTraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttSetConfig(const qint32 &agent_num, const QString &argument, const QString &value) {
    QString fullPath = QString(_serverConfigs["protocolMqttSetConfig"][_serverIndices.value("protocolMqttSetConfig")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/set/config/{argument}/{value}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString argumentPathParam("{");
        argumentPathParam.append("argument").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "argument", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"argument"+pathSuffix : pathPrefix;
        fullPath.replace(argumentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(argument)));
    }
    
    {
        QString valuePathParam("{");
        valuePathParam.append("value").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "value", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"value"+pathSuffix : pathPrefix;
        fullPath.replace(valuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(value)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttSetConfigCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttSetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttSetConfigSignal(output);
        Q_EMIT protocolMqttSetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttSetConfigSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttSetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttSetConfigSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttSetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::protocolMqttSetTrace(const qint32 &agent_num, const QString &enable_or_not) {
    QString fullPath = QString(_serverConfigs["protocolMqttSetTrace"][_serverIndices.value("protocolMqttSetTrace")].URL()+"/mimic/agent/{agentNum}/protocol/msg/mqtt/set/trace/{enableOrNot}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString enable_or_notPathParam("{");
        enable_or_notPathParam.append("enableOrNot").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enableOrNot", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enableOrNot"+pathSuffix : pathPrefix;
        fullPath.replace(enable_or_notPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_or_not)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMQTTApi::protocolMqttSetTraceCallback);
    connect(this, &OAIMQTTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMQTTApi::protocolMqttSetTraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolMqttSetTraceSignal(output);
        Q_EMIT protocolMqttSetTraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolMqttSetTraceSignalE(output, error_type, error_str);
        Q_EMIT protocolMqttSetTraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolMqttSetTraceSignalError(output, error_type, error_str);
        Q_EMIT protocolMqttSetTraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMQTTApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
