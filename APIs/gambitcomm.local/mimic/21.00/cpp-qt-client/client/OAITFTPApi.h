/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITFTPApi_H
#define OAI_OAITFTPApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigTFTP.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITFTPApi : public QObject {
    Q_OBJECT

public:
    OAITFTPApi(const int timeOut = 0);
    ~OAITFTPApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTftpGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTftpGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTftpGetStatistics(const qint32 &agent_num);


    virtual void protocolTftpGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTftpGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  session_id QString [required]
    * @param[in]  parameter QString [required]
    */
    virtual void protocolTftpSessionGetParameter(const qint32 &agent_num, const QString &session_id, const QString &parameter);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  srcfile QString [required]
    */
    virtual void protocolTftpSessionRead(const qint32 &agent_num, const QString &srcfile);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  session_id QString [required]
    * @param[in]  parameter QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolTftpSessionSetParameter(const qint32 &agent_num, const QString &session_id, const QString &parameter, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  session_id QString [required]
    */
    virtual void protocolTftpSessionStart(const qint32 &agent_num, const QString &session_id);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  session_id QString [required]
    */
    virtual void protocolTftpSessionStatus(const qint32 &agent_num, const QString &session_id);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  session_id QString [required]
    */
    virtual void protocolTftpSessionStop(const qint32 &agent_num, const QString &session_id);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  srcfile QString [required]
    */
    virtual void protocolTftpSessionWrite(const qint32 &agent_num, const QString &srcfile);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolTftpSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolTftpSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolTftpGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolTftpGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolTftpGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolTftpGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolTftpGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionGetParameterCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionReadCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionSetParameterCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionStartCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionStatusCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionStopCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSessionWriteCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolTftpSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolTftpGetArgsSignal(OAIObject summary);
    void protocolTftpGetConfigSignal(OAIConfigTFTP summary);
    void protocolTftpGetStatisticsSignal(QList<qint32> summary);
    void protocolTftpGetStatsHdrSignal(QList<QString> summary);
    void protocolTftpGetTraceSignal(OAIConfigTFTP summary);
    void protocolTftpSessionGetParameterSignal(QString summary);
    void protocolTftpSessionReadSignal(QList<qint32> summary);
    void protocolTftpSessionSetParameterSignal(QString summary);
    void protocolTftpSessionStartSignal(QString summary);
    void protocolTftpSessionStatusSignal(QString summary);
    void protocolTftpSessionStopSignal(QString summary);
    void protocolTftpSessionWriteSignal(QList<qint32> summary);
    void protocolTftpSetConfigSignal(QString summary);
    void protocolTftpSetTraceSignal(QString summary);


    void protocolTftpGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolTftpGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigTFTP summary);
    void protocolTftpGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTftpGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTftpGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigTFTP summary);
    void protocolTftpSessionGetParameterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTftpSessionReadSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTftpSessionSetParameterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTftpSessionStartSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTftpSessionStatusSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTftpSessionStopSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTftpSessionWriteSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTftpSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTftpSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolTftpGetArgsSignalError() instead")
    void protocolTftpGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetConfigSignalError() instead")
    void protocolTftpGetConfigSignalE(OAIConfigTFTP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetConfigSignalError(OAIConfigTFTP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetStatisticsSignalError() instead")
    void protocolTftpGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetStatsHdrSignalError() instead")
    void protocolTftpGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetTraceSignalError() instead")
    void protocolTftpGetTraceSignalE(OAIConfigTFTP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetTraceSignalError(OAIConfigTFTP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionGetParameterSignalError() instead")
    void protocolTftpSessionGetParameterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionGetParameterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionReadSignalError() instead")
    void protocolTftpSessionReadSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionReadSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionSetParameterSignalError() instead")
    void protocolTftpSessionSetParameterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionSetParameterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionStartSignalError() instead")
    void protocolTftpSessionStartSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionStartSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionStatusSignalError() instead")
    void protocolTftpSessionStatusSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionStatusSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionStopSignalError() instead")
    void protocolTftpSessionStopSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionStopSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionWriteSignalError() instead")
    void protocolTftpSessionWriteSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionWriteSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSetConfigSignalError() instead")
    void protocolTftpSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSetTraceSignalError() instead")
    void protocolTftpSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolTftpGetArgsSignalErrorFull() instead")
    void protocolTftpGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetConfigSignalErrorFull() instead")
    void protocolTftpGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetStatisticsSignalErrorFull() instead")
    void protocolTftpGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetStatsHdrSignalErrorFull() instead")
    void protocolTftpGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpGetTraceSignalErrorFull() instead")
    void protocolTftpGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionGetParameterSignalErrorFull() instead")
    void protocolTftpSessionGetParameterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionGetParameterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionReadSignalErrorFull() instead")
    void protocolTftpSessionReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionSetParameterSignalErrorFull() instead")
    void protocolTftpSessionSetParameterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionSetParameterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionStartSignalErrorFull() instead")
    void protocolTftpSessionStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionStatusSignalErrorFull() instead")
    void protocolTftpSessionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionStopSignalErrorFull() instead")
    void protocolTftpSessionStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSessionWriteSignalErrorFull() instead")
    void protocolTftpSessionWriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSessionWriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSetConfigSignalErrorFull() instead")
    void protocolTftpSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTftpSetTraceSignalErrorFull() instead")
    void protocolTftpSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTftpSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
