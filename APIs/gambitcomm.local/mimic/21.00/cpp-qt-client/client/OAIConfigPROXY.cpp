/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigPROXY.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigPROXY::OAIConfigPROXY(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigPROXY::OAIConfigPROXY() {
    this->initializeModel();
}

OAIConfigPROXY::~OAIConfigPROXY() {}

void OAIConfigPROXY::initializeModel() {

    m_tcp_nodelay_isSet = false;
    m_tcp_nodelay_isValid = false;

    m_client_to_server_isSet = false;
    m_client_to_server_isValid = false;

    m_disconnect_delay_isSet = false;
    m_disconnect_delay_isValid = false;

    m_max_connects_isSet = false;
    m_max_connects_isValid = false;

    m_portno_isSet = false;
    m_portno_isValid = false;

    m_pre_connect_isSet = false;
    m_pre_connect_isValid = false;

    m_server_to_client_isSet = false;
    m_server_to_client_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;
}

void OAIConfigPROXY::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigPROXY::fromJsonObject(QJsonObject json) {

    m_tcp_nodelay_isValid = ::OpenAPI::fromJsonValue(m_tcp_nodelay, json[QString("TCP_NODELAY")]);
    m_tcp_nodelay_isSet = !json[QString("TCP_NODELAY")].isNull() && m_tcp_nodelay_isValid;

    m_client_to_server_isValid = ::OpenAPI::fromJsonValue(m_client_to_server, json[QString("client_to_server")]);
    m_client_to_server_isSet = !json[QString("client_to_server")].isNull() && m_client_to_server_isValid;

    m_disconnect_delay_isValid = ::OpenAPI::fromJsonValue(m_disconnect_delay, json[QString("disconnect_delay")]);
    m_disconnect_delay_isSet = !json[QString("disconnect_delay")].isNull() && m_disconnect_delay_isValid;

    m_max_connects_isValid = ::OpenAPI::fromJsonValue(m_max_connects, json[QString("max_connects")]);
    m_max_connects_isSet = !json[QString("max_connects")].isNull() && m_max_connects_isValid;

    m_portno_isValid = ::OpenAPI::fromJsonValue(m_portno, json[QString("portno")]);
    m_portno_isSet = !json[QString("portno")].isNull() && m_portno_isValid;

    m_pre_connect_isValid = ::OpenAPI::fromJsonValue(m_pre_connect, json[QString("pre_connect")]);
    m_pre_connect_isSet = !json[QString("pre_connect")].isNull() && m_pre_connect_isValid;

    m_server_to_client_isValid = ::OpenAPI::fromJsonValue(m_server_to_client, json[QString("server_to_client")]);
    m_server_to_client_isSet = !json[QString("server_to_client")].isNull() && m_server_to_client_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;
}

QString OAIConfigPROXY::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigPROXY::asJsonObject() const {
    QJsonObject obj;
    if (m_tcp_nodelay_isSet) {
        obj.insert(QString("TCP_NODELAY"), ::OpenAPI::toJsonValue(m_tcp_nodelay));
    }
    if (m_client_to_server_isSet) {
        obj.insert(QString("client_to_server"), ::OpenAPI::toJsonValue(m_client_to_server));
    }
    if (m_disconnect_delay_isSet) {
        obj.insert(QString("disconnect_delay"), ::OpenAPI::toJsonValue(m_disconnect_delay));
    }
    if (m_max_connects_isSet) {
        obj.insert(QString("max_connects"), ::OpenAPI::toJsonValue(m_max_connects));
    }
    if (m_portno_isSet) {
        obj.insert(QString("portno"), ::OpenAPI::toJsonValue(m_portno));
    }
    if (m_pre_connect_isSet) {
        obj.insert(QString("pre_connect"), ::OpenAPI::toJsonValue(m_pre_connect));
    }
    if (m_server_to_client_isSet) {
        obj.insert(QString("server_to_client"), ::OpenAPI::toJsonValue(m_server_to_client));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_transport_isSet) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    return obj;
}

qint32 OAIConfigPROXY::getTcpNodelay() const {
    return m_tcp_nodelay;
}
void OAIConfigPROXY::setTcpNodelay(const qint32 &tcp_nodelay) {
    m_tcp_nodelay = tcp_nodelay;
    m_tcp_nodelay_isSet = true;
}

bool OAIConfigPROXY::is_tcp_nodelay_Set() const{
    return m_tcp_nodelay_isSet;
}

bool OAIConfigPROXY::is_tcp_nodelay_Valid() const{
    return m_tcp_nodelay_isValid;
}

QString OAIConfigPROXY::getClientToServer() const {
    return m_client_to_server;
}
void OAIConfigPROXY::setClientToServer(const QString &client_to_server) {
    m_client_to_server = client_to_server;
    m_client_to_server_isSet = true;
}

bool OAIConfigPROXY::is_client_to_server_Set() const{
    return m_client_to_server_isSet;
}

bool OAIConfigPROXY::is_client_to_server_Valid() const{
    return m_client_to_server_isValid;
}

qint32 OAIConfigPROXY::getDisconnectDelay() const {
    return m_disconnect_delay;
}
void OAIConfigPROXY::setDisconnectDelay(const qint32 &disconnect_delay) {
    m_disconnect_delay = disconnect_delay;
    m_disconnect_delay_isSet = true;
}

bool OAIConfigPROXY::is_disconnect_delay_Set() const{
    return m_disconnect_delay_isSet;
}

bool OAIConfigPROXY::is_disconnect_delay_Valid() const{
    return m_disconnect_delay_isValid;
}

qint32 OAIConfigPROXY::getMaxConnects() const {
    return m_max_connects;
}
void OAIConfigPROXY::setMaxConnects(const qint32 &max_connects) {
    m_max_connects = max_connects;
    m_max_connects_isSet = true;
}

bool OAIConfigPROXY::is_max_connects_Set() const{
    return m_max_connects_isSet;
}

bool OAIConfigPROXY::is_max_connects_Valid() const{
    return m_max_connects_isValid;
}

qint32 OAIConfigPROXY::getPortno() const {
    return m_portno;
}
void OAIConfigPROXY::setPortno(const qint32 &portno) {
    m_portno = portno;
    m_portno_isSet = true;
}

bool OAIConfigPROXY::is_portno_Set() const{
    return m_portno_isSet;
}

bool OAIConfigPROXY::is_portno_Valid() const{
    return m_portno_isValid;
}

QString OAIConfigPROXY::getPreConnect() const {
    return m_pre_connect;
}
void OAIConfigPROXY::setPreConnect(const QString &pre_connect) {
    m_pre_connect = pre_connect;
    m_pre_connect_isSet = true;
}

bool OAIConfigPROXY::is_pre_connect_Set() const{
    return m_pre_connect_isSet;
}

bool OAIConfigPROXY::is_pre_connect_Valid() const{
    return m_pre_connect_isValid;
}

QString OAIConfigPROXY::getServerToClient() const {
    return m_server_to_client;
}
void OAIConfigPROXY::setServerToClient(const QString &server_to_client) {
    m_server_to_client = server_to_client;
    m_server_to_client_isSet = true;
}

bool OAIConfigPROXY::is_server_to_client_Set() const{
    return m_server_to_client_isSet;
}

bool OAIConfigPROXY::is_server_to_client_Valid() const{
    return m_server_to_client_isValid;
}

QString OAIConfigPROXY::getTarget() const {
    return m_target;
}
void OAIConfigPROXY::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIConfigPROXY::is_target_Set() const{
    return m_target_isSet;
}

bool OAIConfigPROXY::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIConfigPROXY::getTransport() const {
    return m_transport;
}
void OAIConfigPROXY::setTransport(const QString &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIConfigPROXY::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIConfigPROXY::is_transport_Valid() const{
    return m_transport_isValid;
}

bool OAIConfigPROXY::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tcp_nodelay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_to_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disconnect_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_connects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portno_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_connect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_to_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigPROXY::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
