/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITELNETApi_H
#define OAI_OAITELNETApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigTELNET.h"
#include "OAIIPAlias.h"
#include "OAIObject.h"
#include "OAITelnetUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITELNETApi : public QObject {
    Q_OBJECT

public:
    OAITELNETApi(const int timeOut = 0);
    ~OAITELNETApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  connection_id qint32 [required]
    * @param[in]  user QString [required]
    * @param[in]  password QString [required]
    */
    virtual void protocolTelnetConnectionLogon(const qint32 &agent_num, const qint32 &connection_id, const QString &user, const QString &password);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  connection_id qint32 [required]
    * @param[in]  command QString [required]
    */
    virtual void protocolTelnetConnectionRequest(const qint32 &agent_num, const qint32 &connection_id, const QString &command);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  connection_id qint32 [required]
    * @param[in]  signal_name QString [required]
    */
    virtual void protocolTelnetConnectionSignal(const qint32 &agent_num, const qint32 &connection_id, const QString &signal_name);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetGetStatistics(const qint32 &agent_num);


    virtual void protocolTelnetGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ipaddress QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolTelnetIpaliasDisable(const qint32 &agent_num, const QString &ipaddress, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ipaddress QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolTelnetIpaliasEnable(const qint32 &agent_num, const QString &ipaddress, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ipaddress QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolTelnetIpaliasIsenabled(const qint32 &agent_num, const QString &ipaddress, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetIpaliasList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetServerGetConnections(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetServerGetKeymap(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetServerGetRulesdb(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetServerGetState(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetServerGetUserdb(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTelnetServerGetUsers(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolTelnetSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolTelnetSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolTelnetConnectionLogonCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetConnectionRequestCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetConnectionSignalCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetIpaliasDisableCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetIpaliasEnableCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetIpaliasIsenabledCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetIpaliasListCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetServerGetConnectionsCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetServerGetKeymapCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetServerGetRulesdbCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetServerGetStateCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetServerGetUserdbCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetServerGetUsersCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolTelnetSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolTelnetConnectionLogonSignal(QList<QString> summary);
    void protocolTelnetConnectionRequestSignal(QList<QString> summary);
    void protocolTelnetConnectionSignalSignal(QList<QString> summary);
    void protocolTelnetGetArgsSignal(OAIObject summary);
    void protocolTelnetGetConfigSignal(OAIConfigTELNET summary);
    void protocolTelnetGetStatisticsSignal(QList<qint32> summary);
    void protocolTelnetGetStatsHdrSignal(QList<QString> summary);
    void protocolTelnetGetTraceSignal(OAIConfigTELNET summary);
    void protocolTelnetIpaliasDisableSignal(QString summary);
    void protocolTelnetIpaliasEnableSignal(QString summary);
    void protocolTelnetIpaliasIsenabledSignal(QString summary);
    void protocolTelnetIpaliasListSignal(QList<OAIIPAlias> summary);
    void protocolTelnetServerGetConnectionsSignal(QList<qint32> summary);
    void protocolTelnetServerGetKeymapSignal(QList<QString> summary);
    void protocolTelnetServerGetRulesdbSignal(QList<QString> summary);
    void protocolTelnetServerGetStateSignal(QList<qint32> summary);
    void protocolTelnetServerGetUserdbSignal(QList<QString> summary);
    void protocolTelnetServerGetUsersSignal(QList<OAITelnetUser> summary);
    void protocolTelnetSetConfigSignal(QString summary);
    void protocolTelnetSetTraceSignal(QString summary);


    void protocolTelnetConnectionLogonSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetConnectionRequestSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetConnectionSignalSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolTelnetGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigTELNET summary);
    void protocolTelnetGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTelnetGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigTELNET summary);
    void protocolTelnetIpaliasDisableSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTelnetIpaliasEnableSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTelnetIpaliasIsenabledSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTelnetIpaliasListSignalFull(OAIHttpRequestWorker *worker, QList<OAIIPAlias> summary);
    void protocolTelnetServerGetConnectionsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTelnetServerGetKeymapSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetServerGetRulesdbSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetServerGetStateSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTelnetServerGetUserdbSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTelnetServerGetUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAITelnetUser> summary);
    void protocolTelnetSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTelnetSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolTelnetConnectionLogonSignalError() instead")
    void protocolTelnetConnectionLogonSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetConnectionLogonSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetConnectionRequestSignalError() instead")
    void protocolTelnetConnectionRequestSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetConnectionRequestSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetConnectionSignalSignalError() instead")
    void protocolTelnetConnectionSignalSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetConnectionSignalSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetArgsSignalError() instead")
    void protocolTelnetGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetConfigSignalError() instead")
    void protocolTelnetGetConfigSignalE(OAIConfigTELNET summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetConfigSignalError(OAIConfigTELNET summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetStatisticsSignalError() instead")
    void protocolTelnetGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetStatsHdrSignalError() instead")
    void protocolTelnetGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetTraceSignalError() instead")
    void protocolTelnetGetTraceSignalE(OAIConfigTELNET summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetTraceSignalError(OAIConfigTELNET summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasDisableSignalError() instead")
    void protocolTelnetIpaliasDisableSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasDisableSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasEnableSignalError() instead")
    void protocolTelnetIpaliasEnableSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasEnableSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasIsenabledSignalError() instead")
    void protocolTelnetIpaliasIsenabledSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasIsenabledSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasListSignalError() instead")
    void protocolTelnetIpaliasListSignalE(QList<OAIIPAlias> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasListSignalError(QList<OAIIPAlias> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetConnectionsSignalError() instead")
    void protocolTelnetServerGetConnectionsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetConnectionsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetKeymapSignalError() instead")
    void protocolTelnetServerGetKeymapSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetKeymapSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetRulesdbSignalError() instead")
    void protocolTelnetServerGetRulesdbSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetRulesdbSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetStateSignalError() instead")
    void protocolTelnetServerGetStateSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetStateSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetUserdbSignalError() instead")
    void protocolTelnetServerGetUserdbSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetUserdbSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetUsersSignalError() instead")
    void protocolTelnetServerGetUsersSignalE(QList<OAITelnetUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetUsersSignalError(QList<OAITelnetUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetSetConfigSignalError() instead")
    void protocolTelnetSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetSetTraceSignalError() instead")
    void protocolTelnetSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolTelnetConnectionLogonSignalErrorFull() instead")
    void protocolTelnetConnectionLogonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetConnectionLogonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetConnectionRequestSignalErrorFull() instead")
    void protocolTelnetConnectionRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetConnectionRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetConnectionSignalSignalErrorFull() instead")
    void protocolTelnetConnectionSignalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetConnectionSignalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetArgsSignalErrorFull() instead")
    void protocolTelnetGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetConfigSignalErrorFull() instead")
    void protocolTelnetGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetStatisticsSignalErrorFull() instead")
    void protocolTelnetGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetStatsHdrSignalErrorFull() instead")
    void protocolTelnetGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetGetTraceSignalErrorFull() instead")
    void protocolTelnetGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasDisableSignalErrorFull() instead")
    void protocolTelnetIpaliasDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasEnableSignalErrorFull() instead")
    void protocolTelnetIpaliasEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasIsenabledSignalErrorFull() instead")
    void protocolTelnetIpaliasIsenabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasIsenabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetIpaliasListSignalErrorFull() instead")
    void protocolTelnetIpaliasListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetIpaliasListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetConnectionsSignalErrorFull() instead")
    void protocolTelnetServerGetConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetKeymapSignalErrorFull() instead")
    void protocolTelnetServerGetKeymapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetKeymapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetRulesdbSignalErrorFull() instead")
    void protocolTelnetServerGetRulesdbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetRulesdbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetStateSignalErrorFull() instead")
    void protocolTelnetServerGetStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetUserdbSignalErrorFull() instead")
    void protocolTelnetServerGetUserdbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetUserdbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetServerGetUsersSignalErrorFull() instead")
    void protocolTelnetServerGetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetServerGetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetSetConfigSignalErrorFull() instead")
    void protocolTelnetSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTelnetSetTraceSignalErrorFull() instead")
    void protocolTelnetSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTelnetSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
