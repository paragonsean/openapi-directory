/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISFLOWApi_H
#define OAI_OAISFLOWApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigSFLOW.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISFLOWApi : public QObject {
    Q_OBJECT

public:
    OAISFLOWApi(const int timeOut = 0);
    ~OAISFLOWApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowGetStatistics(const qint32 &agent_num);


    virtual void protocolSflowGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowHalt(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowReload(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolSflowResume(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolSflowSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolSflowSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolSflowGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolSflowGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSflowGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolSflowGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolSflowGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolSflowHaltCallback(OAIHttpRequestWorker *worker);
    void protocolSflowReloadCallback(OAIHttpRequestWorker *worker);
    void protocolSflowResumeCallback(OAIHttpRequestWorker *worker);
    void protocolSflowSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolSflowSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolSflowGetArgsSignal(OAIObject summary);
    void protocolSflowGetConfigSignal(OAIConfigSFLOW summary);
    void protocolSflowGetStatisticsSignal(QList<qint32> summary);
    void protocolSflowGetStatsHdrSignal(QList<QString> summary);
    void protocolSflowGetTraceSignal(OAIConfigSFLOW summary);
    void protocolSflowHaltSignal(QString summary);
    void protocolSflowReloadSignal(QString summary);
    void protocolSflowResumeSignal(QString summary);
    void protocolSflowSetConfigSignal(QString summary);
    void protocolSflowSetTraceSignal(QString summary);


    void protocolSflowGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolSflowGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigSFLOW summary);
    void protocolSflowGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolSflowGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolSflowGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigSFLOW summary);
    void protocolSflowHaltSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSflowReloadSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSflowResumeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSflowSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolSflowSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolSflowGetArgsSignalError() instead")
    void protocolSflowGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetConfigSignalError() instead")
    void protocolSflowGetConfigSignalE(OAIConfigSFLOW summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetConfigSignalError(OAIConfigSFLOW summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetStatisticsSignalError() instead")
    void protocolSflowGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetStatsHdrSignalError() instead")
    void protocolSflowGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetTraceSignalError() instead")
    void protocolSflowGetTraceSignalE(OAIConfigSFLOW summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetTraceSignalError(OAIConfigSFLOW summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowHaltSignalError() instead")
    void protocolSflowHaltSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowHaltSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowReloadSignalError() instead")
    void protocolSflowReloadSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowReloadSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowResumeSignalError() instead")
    void protocolSflowResumeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowResumeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowSetConfigSignalError() instead")
    void protocolSflowSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowSetTraceSignalError() instead")
    void protocolSflowSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolSflowGetArgsSignalErrorFull() instead")
    void protocolSflowGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetConfigSignalErrorFull() instead")
    void protocolSflowGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetStatisticsSignalErrorFull() instead")
    void protocolSflowGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetStatsHdrSignalErrorFull() instead")
    void protocolSflowGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowGetTraceSignalErrorFull() instead")
    void protocolSflowGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowHaltSignalErrorFull() instead")
    void protocolSflowHaltSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowHaltSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowReloadSignalErrorFull() instead")
    void protocolSflowReloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowReloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowResumeSignalErrorFull() instead")
    void protocolSflowResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowSetConfigSignalErrorFull() instead")
    void protocolSflowSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolSflowSetTraceSignalErrorFull() instead")
    void protocolSflowSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolSflowSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
