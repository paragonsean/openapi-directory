/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigTOD.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigTOD::OAIConfigTOD(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigTOD::OAIConfigTOD() {
    this->initializeModel();
}

OAIConfigTOD::~OAIConfigTOD() {}

void OAIConfigTOD::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_retries_isSet = false;
    m_retries_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIConfigTOD::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigTOD::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_retries_isValid = ::OpenAPI::fromJsonValue(m_retries, json[QString("retries")]);
    m_retries_isSet = !json[QString("retries")].isNull() && m_retries_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIConfigTOD::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigTOD::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_retries_isSet) {
        obj.insert(QString("retries"), ::OpenAPI::toJsonValue(m_retries));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

qint32 OAIConfigTOD::getPort() const {
    return m_port;
}
void OAIConfigTOD::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConfigTOD::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConfigTOD::is_port_Valid() const{
    return m_port_isValid;
}

qint32 OAIConfigTOD::getRetries() const {
    return m_retries;
}
void OAIConfigTOD::setRetries(const qint32 &retries) {
    m_retries = retries;
    m_retries_isSet = true;
}

bool OAIConfigTOD::is_retries_Set() const{
    return m_retries_isSet;
}

bool OAIConfigTOD::is_retries_Valid() const{
    return m_retries_isValid;
}

QString OAIConfigTOD::getScript() const {
    return m_script;
}
void OAIConfigTOD::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIConfigTOD::is_script_Set() const{
    return m_script_isSet;
}

bool OAIConfigTOD::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIConfigTOD::getServer() const {
    return m_server;
}
void OAIConfigTOD::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIConfigTOD::is_server_Set() const{
    return m_server_isSet;
}

bool OAIConfigTOD::is_server_Valid() const{
    return m_server_isValid;
}

qint32 OAIConfigTOD::getTimeout() const {
    return m_timeout;
}
void OAIConfigTOD::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIConfigTOD::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIConfigTOD::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIConfigTOD::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigTOD::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
