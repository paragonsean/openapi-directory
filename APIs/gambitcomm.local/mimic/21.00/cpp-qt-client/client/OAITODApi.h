/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITODApi_H
#define OAI_OAITODApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigTOD.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITODApi : public QObject {
    Q_OBJECT

public:
    OAITODApi(const int timeOut = 0);
    ~OAITODApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTodGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTodGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTodGetStatistics(const qint32 &agent_num);


    virtual void protocolTodGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolTodGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  server_addr QString [required]
    * @param[in]  port_num qint32 [required]
    * @param[in]  script_name QString [required]
    * @param[in]  time_sec qint32 [required]
    * @param[in]  num_retries qint32 [required]
    */
    virtual void protocolTodGettime(const qint32 &agent_num, const QString &server_addr, const qint32 &port_num, const QString &script_name, const qint32 &time_sec, const qint32 &num_retries);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolTodSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolTodSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolTodGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolTodGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolTodGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolTodGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolTodGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolTodGettimeCallback(OAIHttpRequestWorker *worker);
    void protocolTodSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolTodSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolTodGetArgsSignal(OAIObject summary);
    void protocolTodGetConfigSignal(OAIConfigTOD summary);
    void protocolTodGetStatisticsSignal(QList<qint32> summary);
    void protocolTodGetStatsHdrSignal(QList<QString> summary);
    void protocolTodGetTraceSignal(OAIConfigTOD summary);
    void protocolTodGettimeSignal(QList<QString> summary);
    void protocolTodSetConfigSignal(QString summary);
    void protocolTodSetTraceSignal(QString summary);


    void protocolTodGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolTodGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigTOD summary);
    void protocolTodGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolTodGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTodGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigTOD summary);
    void protocolTodGettimeSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolTodSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolTodSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolTodGetArgsSignalError() instead")
    void protocolTodGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetConfigSignalError() instead")
    void protocolTodGetConfigSignalE(OAIConfigTOD summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetConfigSignalError(OAIConfigTOD summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetStatisticsSignalError() instead")
    void protocolTodGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetStatsHdrSignalError() instead")
    void protocolTodGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetTraceSignalError() instead")
    void protocolTodGetTraceSignalE(OAIConfigTOD summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetTraceSignalError(OAIConfigTOD summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGettimeSignalError() instead")
    void protocolTodGettimeSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGettimeSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodSetConfigSignalError() instead")
    void protocolTodSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodSetTraceSignalError() instead")
    void protocolTodSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolTodGetArgsSignalErrorFull() instead")
    void protocolTodGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetConfigSignalErrorFull() instead")
    void protocolTodGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetStatisticsSignalErrorFull() instead")
    void protocolTodGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetStatsHdrSignalErrorFull() instead")
    void protocolTodGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGetTraceSignalErrorFull() instead")
    void protocolTodGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodGettimeSignalErrorFull() instead")
    void protocolTodGettimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodGettimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodSetConfigSignalErrorFull() instead")
    void protocolTodSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolTodSetTraceSignalErrorFull() instead")
    void protocolTodSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolTodSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
