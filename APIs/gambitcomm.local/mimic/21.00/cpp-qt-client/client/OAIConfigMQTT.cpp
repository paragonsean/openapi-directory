/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigMQTT.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigMQTT::OAIConfigMQTT(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigMQTT::OAIConfigMQTT() {
    this->initializeModel();
}

OAIConfigMQTT::~OAIConfigMQTT() {}

void OAIConfigMQTT::initializeModel() {

    m_broker_isSet = false;
    m_broker_isValid = false;

    m_clientid_isSet = false;
    m_clientid_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_is_tls_isSet = false;
    m_is_tls_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_tls_conf_filename_isSet = false;
    m_tls_conf_filename_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConfigMQTT::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigMQTT::fromJsonObject(QJsonObject json) {

    m_broker_isValid = ::OpenAPI::fromJsonValue(m_broker, json[QString("broker")]);
    m_broker_isSet = !json[QString("broker")].isNull() && m_broker_isValid;

    m_clientid_isValid = ::OpenAPI::fromJsonValue(m_clientid, json[QString("clientid")]);
    m_clientid_isSet = !json[QString("clientid")].isNull() && m_clientid_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_is_tls_isValid = ::OpenAPI::fromJsonValue(m_is_tls, json[QString("is_tls")]);
    m_is_tls_isSet = !json[QString("is_tls")].isNull() && m_is_tls_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_tls_conf_filename_isValid = ::OpenAPI::fromJsonValue(m_tls_conf_filename, json[QString("tls_conf_filename")]);
    m_tls_conf_filename_isSet = !json[QString("tls_conf_filename")].isNull() && m_tls_conf_filename_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConfigMQTT::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigMQTT::asJsonObject() const {
    QJsonObject obj;
    if (m_broker_isSet) {
        obj.insert(QString("broker"), ::OpenAPI::toJsonValue(m_broker));
    }
    if (m_clientid_isSet) {
        obj.insert(QString("clientid"), ::OpenAPI::toJsonValue(m_clientid));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_is_tls_isSet) {
        obj.insert(QString("is_tls"), ::OpenAPI::toJsonValue(m_is_tls));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_tls_conf_filename_isSet) {
        obj.insert(QString("tls_conf_filename"), ::OpenAPI::toJsonValue(m_tls_conf_filename));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIConfigMQTT::getBroker() const {
    return m_broker;
}
void OAIConfigMQTT::setBroker(const QString &broker) {
    m_broker = broker;
    m_broker_isSet = true;
}

bool OAIConfigMQTT::is_broker_Set() const{
    return m_broker_isSet;
}

bool OAIConfigMQTT::is_broker_Valid() const{
    return m_broker_isValid;
}

QString OAIConfigMQTT::getClientid() const {
    return m_clientid;
}
void OAIConfigMQTT::setClientid(const QString &clientid) {
    m_clientid = clientid;
    m_clientid_isSet = true;
}

bool OAIConfigMQTT::is_clientid_Set() const{
    return m_clientid_isSet;
}

bool OAIConfigMQTT::is_clientid_Valid() const{
    return m_clientid_isValid;
}

QString OAIConfigMQTT::getFilename() const {
    return m_filename;
}
void OAIConfigMQTT::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIConfigMQTT::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIConfigMQTT::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIConfigMQTT::getIsTls() const {
    return m_is_tls;
}
void OAIConfigMQTT::setIsTls(const QString &is_tls) {
    m_is_tls = is_tls;
    m_is_tls_isSet = true;
}

bool OAIConfigMQTT::is_is_tls_Set() const{
    return m_is_tls_isSet;
}

bool OAIConfigMQTT::is_is_tls_Valid() const{
    return m_is_tls_isValid;
}

QString OAIConfigMQTT::getPassword() const {
    return m_password;
}
void OAIConfigMQTT::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIConfigMQTT::is_password_Set() const{
    return m_password_isSet;
}

bool OAIConfigMQTT::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIConfigMQTT::getPort() const {
    return m_port;
}
void OAIConfigMQTT::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConfigMQTT::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConfigMQTT::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIConfigMQTT::getTlsConfFilename() const {
    return m_tls_conf_filename;
}
void OAIConfigMQTT::setTlsConfFilename(const QString &tls_conf_filename) {
    m_tls_conf_filename = tls_conf_filename;
    m_tls_conf_filename_isSet = true;
}

bool OAIConfigMQTT::is_tls_conf_filename_Set() const{
    return m_tls_conf_filename_isSet;
}

bool OAIConfigMQTT::is_tls_conf_filename_Valid() const{
    return m_tls_conf_filename_isValid;
}

QString OAIConfigMQTT::getUsername() const {
    return m_username;
}
void OAIConfigMQTT::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIConfigMQTT::is_username_Set() const{
    return m_username_isSet;
}

bool OAIConfigMQTT::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIConfigMQTT::getVersion() const {
    return m_version;
}
void OAIConfigMQTT::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConfigMQTT::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConfigMQTT::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConfigMQTT::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clientid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_conf_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigMQTT::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
