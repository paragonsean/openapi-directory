/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigCOAP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigCOAP::OAIConfigCOAP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigCOAP::OAIConfigCOAP() {
    this->initializeModel();
}

OAIConfigCOAP::~OAIConfigCOAP() {}

void OAIConfigCOAP::initializeModel() {

    m_keystore_isSet = false;
    m_keystore_isValid = false;

    m_primary_port_isSet = false;
    m_primary_port_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_secure_port_isSet = false;
    m_secure_port_isValid = false;
}

void OAIConfigCOAP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigCOAP::fromJsonObject(QJsonObject json) {

    m_keystore_isValid = ::OpenAPI::fromJsonValue(m_keystore, json[QString("keystore")]);
    m_keystore_isSet = !json[QString("keystore")].isNull() && m_keystore_isValid;

    m_primary_port_isValid = ::OpenAPI::fromJsonValue(m_primary_port, json[QString("primary_port")]);
    m_primary_port_isSet = !json[QString("primary_port")].isNull() && m_primary_port_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_secure_port_isValid = ::OpenAPI::fromJsonValue(m_secure_port, json[QString("secure_port")]);
    m_secure_port_isSet = !json[QString("secure_port")].isNull() && m_secure_port_isValid;
}

QString OAIConfigCOAP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigCOAP::asJsonObject() const {
    QJsonObject obj;
    if (m_keystore_isSet) {
        obj.insert(QString("keystore"), ::OpenAPI::toJsonValue(m_keystore));
    }
    if (m_primary_port_isSet) {
        obj.insert(QString("primary_port"), ::OpenAPI::toJsonValue(m_primary_port));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_secure_port_isSet) {
        obj.insert(QString("secure_port"), ::OpenAPI::toJsonValue(m_secure_port));
    }
    return obj;
}

QString OAIConfigCOAP::getKeystore() const {
    return m_keystore;
}
void OAIConfigCOAP::setKeystore(const QString &keystore) {
    m_keystore = keystore;
    m_keystore_isSet = true;
}

bool OAIConfigCOAP::is_keystore_Set() const{
    return m_keystore_isSet;
}

bool OAIConfigCOAP::is_keystore_Valid() const{
    return m_keystore_isValid;
}

qint32 OAIConfigCOAP::getPrimaryPort() const {
    return m_primary_port;
}
void OAIConfigCOAP::setPrimaryPort(const qint32 &primary_port) {
    m_primary_port = primary_port;
    m_primary_port_isSet = true;
}

bool OAIConfigCOAP::is_primary_port_Set() const{
    return m_primary_port_isSet;
}

bool OAIConfigCOAP::is_primary_port_Valid() const{
    return m_primary_port_isValid;
}

QString OAIConfigCOAP::getRule() const {
    return m_rule;
}
void OAIConfigCOAP::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIConfigCOAP::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIConfigCOAP::is_rule_Valid() const{
    return m_rule_isValid;
}

qint32 OAIConfigCOAP::getSecurePort() const {
    return m_secure_port;
}
void OAIConfigCOAP::setSecurePort(const qint32 &secure_port) {
    m_secure_port = secure_port;
    m_secure_port_isSet = true;
}

bool OAIConfigCOAP::is_secure_port_Set() const{
    return m_secure_port_isSet;
}

bool OAIConfigCOAP::is_secure_port_Valid() const{
    return m_secure_port_isValid;
}

bool OAIConfigCOAP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keystore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigCOAP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
