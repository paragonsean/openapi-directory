/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDaemonApi_H
#define OAI_OAIDaemonApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgentState.h"
#include "OAIObject.h"
#include "OAITimerScript.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDaemonApi : public QObject {
    Q_OBJECT

public:
    OAIDaemonApi(const int timeOut = 0);
    ~OAIDaemonApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  script QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  arg QString [required]
    */
    virtual void addDaemonTimerScript(const QString &script, const qint32 &interval, const QString &arg);

    /**
    * @param[in]  cfg_file QString [required]
    * @param[in]  first_agent_num qint32 [required]
    * @param[in]  last_agent_num qint32 [required]
    * @param[in]  start_agent_num qint32 [required]
    */
    virtual void cfgLoad(const QString &cfg_file, const qint32 &first_agent_num, const qint32 &last_agent_num, const qint32 &start_agent_num);

    /**
    * @param[in]  first_agent_num qint32 [required]
    * @param[in]  last_agent_num qint32 [required]
    */
    virtual void cfgNew(const qint32 &first_agent_num, const qint32 &last_agent_num);


    virtual void cfgSave();

    /**
    * @param[in]  cfg_file QString [required]
    * @param[in]  first_agent_num qint32 [required]
    * @param[in]  last_agent_num qint32 [required]
    */
    virtual void cfgSaveas(const QString &cfg_file, const qint32 &first_agent_num, const qint32 &last_agent_num);

    /**
    * @param[in]  script QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  arg QString [required]
    */
    virtual void delDaemonTimerScript(const QString &script, const qint32 &interval, const QString &arg);


    virtual void getActiveDataList();


    virtual void getActiveList();


    virtual void getCfgFileChanged();


    virtual void getCfgfile();


    virtual void getChangedConfigList();


    virtual void getChangedStateList();


    virtual void getClients();


    virtual void getConfiguredList();


    virtual void getDaemonProtocols();


    virtual void getInterfaces();


    virtual void getLast();


    virtual void getLog();


    virtual void getMax();


    virtual void getNetaddr();


    virtual void getNetdev();


    virtual void getProduct();


    virtual void getReturn();


    virtual void getVersion();


    virtual void listDaemonTimerScripts();

    /**
    * @param[in]  info_array QList<QString> [required]
    */
    virtual void mgetInfo(const QList<QString> &info_array);

    /**
    * @param[in]  body QString [required]
    */
    virtual void setLog(const QString &body);


    virtual void setNetdev();


    virtual void startAllAgents();


    virtual void stopAllAgents();

    /**
    * @param[in]  var QString [required]
    */
    virtual void storeExists(const QString &var);

    /**
    * @param[in]  var QString [required]
    */
    virtual void storeGet(const QString &var);


    virtual void storeList();

    /**
    * @param[in]  var QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  body QString [optional]
    */
    virtual void storeLreplace(const QString &var, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  var QString [required]
    */
    virtual void storePersists(const QString &var);


    virtual void storeSave();

    /**
    * @param[in]  var QString [required]
    * @param[in]  persist qint32 [required]
    * @param[in]  body QString [optional]
    */
    virtual void storeSet(const QString &var, const qint32 &persist, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  var QString [required]
    */
    virtual void storeUnset(const QString &var);


    virtual void terminate();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addDaemonTimerScriptCallback(OAIHttpRequestWorker *worker);
    void cfgLoadCallback(OAIHttpRequestWorker *worker);
    void cfgNewCallback(OAIHttpRequestWorker *worker);
    void cfgSaveCallback(OAIHttpRequestWorker *worker);
    void cfgSaveasCallback(OAIHttpRequestWorker *worker);
    void delDaemonTimerScriptCallback(OAIHttpRequestWorker *worker);
    void getActiveDataListCallback(OAIHttpRequestWorker *worker);
    void getActiveListCallback(OAIHttpRequestWorker *worker);
    void getCfgFileChangedCallback(OAIHttpRequestWorker *worker);
    void getCfgfileCallback(OAIHttpRequestWorker *worker);
    void getChangedConfigListCallback(OAIHttpRequestWorker *worker);
    void getChangedStateListCallback(OAIHttpRequestWorker *worker);
    void getClientsCallback(OAIHttpRequestWorker *worker);
    void getConfiguredListCallback(OAIHttpRequestWorker *worker);
    void getDaemonProtocolsCallback(OAIHttpRequestWorker *worker);
    void getInterfacesCallback(OAIHttpRequestWorker *worker);
    void getLastCallback(OAIHttpRequestWorker *worker);
    void getLogCallback(OAIHttpRequestWorker *worker);
    void getMaxCallback(OAIHttpRequestWorker *worker);
    void getNetaddrCallback(OAIHttpRequestWorker *worker);
    void getNetdevCallback(OAIHttpRequestWorker *worker);
    void getProductCallback(OAIHttpRequestWorker *worker);
    void getReturnCallback(OAIHttpRequestWorker *worker);
    void getVersionCallback(OAIHttpRequestWorker *worker);
    void listDaemonTimerScriptsCallback(OAIHttpRequestWorker *worker);
    void mgetInfoCallback(OAIHttpRequestWorker *worker);
    void setLogCallback(OAIHttpRequestWorker *worker);
    void setNetdevCallback(OAIHttpRequestWorker *worker);
    void startAllAgentsCallback(OAIHttpRequestWorker *worker);
    void stopAllAgentsCallback(OAIHttpRequestWorker *worker);
    void storeExistsCallback(OAIHttpRequestWorker *worker);
    void storeGetCallback(OAIHttpRequestWorker *worker);
    void storeListCallback(OAIHttpRequestWorker *worker);
    void storeLreplaceCallback(OAIHttpRequestWorker *worker);
    void storePersistsCallback(OAIHttpRequestWorker *worker);
    void storeSaveCallback(OAIHttpRequestWorker *worker);
    void storeSetCallback(OAIHttpRequestWorker *worker);
    void storeUnsetCallback(OAIHttpRequestWorker *worker);
    void terminateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addDaemonTimerScriptSignal(QString summary);
    void cfgLoadSignal(QMap<QString, qint32> summary);
    void cfgNewSignal(QMap<QString, qint32> summary);
    void cfgSaveSignal(QMap<QString, qint32> summary);
    void cfgSaveasSignal(QMap<QString, qint32> summary);
    void delDaemonTimerScriptSignal(QString summary);
    void getActiveDataListSignal(QList<qint32> summary);
    void getActiveListSignal(QList<qint32> summary);
    void getCfgFileChangedSignal(QMap<QString, qint32> summary);
    void getCfgfileSignal(QMap<QString, qint32> summary);
    void getChangedConfigListSignal(QList<qint32> summary);
    void getChangedStateListSignal(QList<OAIAgentState> summary);
    void getClientsSignal(QMap<QString, qint32> summary);
    void getConfiguredListSignal(QList<qint32> summary);
    void getDaemonProtocolsSignal(QMap<QString, qint32> summary);
    void getInterfacesSignal(QMap<QString, qint32> summary);
    void getLastSignal(qint32 summary);
    void getLogSignal(QMap<QString, qint32> summary);
    void getMaxSignal(qint32 summary);
    void getNetaddrSignal(QMap<QString, qint32> summary);
    void getNetdevSignal(QMap<QString, qint32> summary);
    void getProductSignal(QMap<QString, qint32> summary);
    void getReturnSignal(QMap<QString, qint32> summary);
    void getVersionSignal(QString summary);
    void listDaemonTimerScriptsSignal(QList<OAITimerScript> summary);
    void mgetInfoSignal(QList<OAIObject> summary);
    void setLogSignal(QString summary);
    void setNetdevSignal(QMap<QString, qint32> summary);
    void startAllAgentsSignal(QMap<QString, qint32> summary);
    void stopAllAgentsSignal(QMap<QString, qint32> summary);
    void storeExistsSignal(QString summary);
    void storeGetSignal(QString summary);
    void storeListSignal(QList<QString> summary);
    void storeLreplaceSignal(QString summary);
    void storePersistsSignal(QString summary);
    void storeSaveSignal(QMap<QString, qint32> summary);
    void storeSetSignal(QString summary);
    void storeUnsetSignal(QString summary);
    void terminateSignal(QMap<QString, qint32> summary);


    void addDaemonTimerScriptSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void cfgLoadSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void cfgNewSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void cfgSaveSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void cfgSaveasSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void delDaemonTimerScriptSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getActiveDataListSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getActiveListSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getCfgFileChangedSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getCfgfileSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getChangedConfigListSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getChangedStateListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAgentState> summary);
    void getClientsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getConfiguredListSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getDaemonProtocolsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getInterfacesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getLastSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getLogSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getMaxSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getNetaddrSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getNetdevSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getProductSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getReturnSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getVersionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listDaemonTimerScriptsSignalFull(OAIHttpRequestWorker *worker, QList<OAITimerScript> summary);
    void mgetInfoSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void setLogSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setNetdevSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void startAllAgentsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void stopAllAgentsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void storeExistsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storeGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storeListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void storeLreplaceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storePersistsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storeSaveSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void storeSetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storeUnsetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void terminateSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);

    Q_DECL_DEPRECATED_X("Use addDaemonTimerScriptSignalError() instead")
    void addDaemonTimerScriptSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDaemonTimerScriptSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgLoadSignalError() instead")
    void cfgLoadSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgLoadSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgNewSignalError() instead")
    void cfgNewSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgNewSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgSaveSignalError() instead")
    void cfgSaveSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgSaveSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgSaveasSignalError() instead")
    void cfgSaveasSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgSaveasSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delDaemonTimerScriptSignalError() instead")
    void delDaemonTimerScriptSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void delDaemonTimerScriptSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveDataListSignalError() instead")
    void getActiveDataListSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveDataListSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveListSignalError() instead")
    void getActiveListSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveListSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCfgFileChangedSignalError() instead")
    void getCfgFileChangedSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCfgFileChangedSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCfgfileSignalError() instead")
    void getCfgfileSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCfgfileSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangedConfigListSignalError() instead")
    void getChangedConfigListSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangedConfigListSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangedStateListSignalError() instead")
    void getChangedStateListSignalE(QList<OAIAgentState> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangedStateListSignalError(QList<OAIAgentState> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientsSignalError() instead")
    void getClientsSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientsSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfiguredListSignalError() instead")
    void getConfiguredListSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfiguredListSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDaemonProtocolsSignalError() instead")
    void getDaemonProtocolsSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDaemonProtocolsSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInterfacesSignalError() instead")
    void getInterfacesSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInterfacesSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastSignalError() instead")
    void getLastSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLogSignalError() instead")
    void getLogSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLogSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMaxSignalError() instead")
    void getMaxSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMaxSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetaddrSignalError() instead")
    void getNetaddrSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetaddrSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetdevSignalError() instead")
    void getNetdevSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetdevSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductSignalError() instead")
    void getProductSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnSignalError() instead")
    void getReturnSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalError() instead")
    void getVersionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDaemonTimerScriptsSignalError() instead")
    void listDaemonTimerScriptsSignalE(QList<OAITimerScript> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDaemonTimerScriptsSignalError(QList<OAITimerScript> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mgetInfoSignalError() instead")
    void mgetInfoSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mgetInfoSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLogSignalError() instead")
    void setLogSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setLogSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNetdevSignalError() instead")
    void setNetdevSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setNetdevSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAllAgentsSignalError() instead")
    void startAllAgentsSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startAllAgentsSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopAllAgentsSignalError() instead")
    void stopAllAgentsSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopAllAgentsSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeExistsSignalError() instead")
    void storeExistsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeExistsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeGetSignalError() instead")
    void storeGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeListSignalError() instead")
    void storeListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeLreplaceSignalError() instead")
    void storeLreplaceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeLreplaceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storePersistsSignalError() instead")
    void storePersistsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storePersistsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeSaveSignalError() instead")
    void storeSaveSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeSaveSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeSetSignalError() instead")
    void storeSetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeSetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeUnsetSignalError() instead")
    void storeUnsetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeUnsetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use terminateSignalError() instead")
    void terminateSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void terminateSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addDaemonTimerScriptSignalErrorFull() instead")
    void addDaemonTimerScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDaemonTimerScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgLoadSignalErrorFull() instead")
    void cfgLoadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgLoadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgNewSignalErrorFull() instead")
    void cfgNewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgNewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgSaveSignalErrorFull() instead")
    void cfgSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfgSaveasSignalErrorFull() instead")
    void cfgSaveasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cfgSaveasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delDaemonTimerScriptSignalErrorFull() instead")
    void delDaemonTimerScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delDaemonTimerScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveDataListSignalErrorFull() instead")
    void getActiveDataListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveDataListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveListSignalErrorFull() instead")
    void getActiveListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCfgFileChangedSignalErrorFull() instead")
    void getCfgFileChangedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCfgFileChangedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCfgfileSignalErrorFull() instead")
    void getCfgfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCfgfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangedConfigListSignalErrorFull() instead")
    void getChangedConfigListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangedConfigListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangedStateListSignalErrorFull() instead")
    void getChangedStateListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangedStateListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientsSignalErrorFull() instead")
    void getClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfiguredListSignalErrorFull() instead")
    void getConfiguredListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfiguredListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDaemonProtocolsSignalErrorFull() instead")
    void getDaemonProtocolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDaemonProtocolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInterfacesSignalErrorFull() instead")
    void getInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastSignalErrorFull() instead")
    void getLastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLogSignalErrorFull() instead")
    void getLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMaxSignalErrorFull() instead")
    void getMaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetaddrSignalErrorFull() instead")
    void getNetaddrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetaddrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetdevSignalErrorFull() instead")
    void getNetdevSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetdevSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductSignalErrorFull() instead")
    void getProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReturnSignalErrorFull() instead")
    void getReturnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReturnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalErrorFull() instead")
    void getVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDaemonTimerScriptsSignalErrorFull() instead")
    void listDaemonTimerScriptsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDaemonTimerScriptsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mgetInfoSignalErrorFull() instead")
    void mgetInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mgetInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLogSignalErrorFull() instead")
    void setLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNetdevSignalErrorFull() instead")
    void setNetdevSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setNetdevSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAllAgentsSignalErrorFull() instead")
    void startAllAgentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAllAgentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopAllAgentsSignalErrorFull() instead")
    void stopAllAgentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopAllAgentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeExistsSignalErrorFull() instead")
    void storeExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeGetSignalErrorFull() instead")
    void storeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeListSignalErrorFull() instead")
    void storeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeLreplaceSignalErrorFull() instead")
    void storeLreplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeLreplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storePersistsSignalErrorFull() instead")
    void storePersistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storePersistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeSaveSignalErrorFull() instead")
    void storeSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeSetSignalErrorFull() instead")
    void storeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeUnsetSignalErrorFull() instead")
    void storeUnsetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeUnsetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use terminateSignalErrorFull() instead")
    void terminateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void terminateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
