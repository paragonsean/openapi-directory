/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigDHCP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigDHCP::OAIConfigDHCP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigDHCP::OAIConfigDHCP() {
    this->initializeModel();
}

OAIConfigDHCP::~OAIConfigDHCP() {}

void OAIConfigDHCP::initializeModel() {

    m_add_options_isSet = false;
    m_add_options_isValid = false;

    m_classid_isSet = false;
    m_classid_isValid = false;

    m_hwaddr_isSet = false;
    m_hwaddr_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIConfigDHCP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigDHCP::fromJsonObject(QJsonObject json) {

    m_add_options_isValid = ::OpenAPI::fromJsonValue(m_add_options, json[QString("add_options")]);
    m_add_options_isSet = !json[QString("add_options")].isNull() && m_add_options_isValid;

    m_classid_isValid = ::OpenAPI::fromJsonValue(m_classid, json[QString("classid")]);
    m_classid_isSet = !json[QString("classid")].isNull() && m_classid_isValid;

    m_hwaddr_isValid = ::OpenAPI::fromJsonValue(m_hwaddr, json[QString("hwaddr")]);
    m_hwaddr_isSet = !json[QString("hwaddr")].isNull() && m_hwaddr_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIConfigDHCP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigDHCP::asJsonObject() const {
    QJsonObject obj;
    if (m_add_options_isSet) {
        obj.insert(QString("add_options"), ::OpenAPI::toJsonValue(m_add_options));
    }
    if (m_classid_isSet) {
        obj.insert(QString("classid"), ::OpenAPI::toJsonValue(m_classid));
    }
    if (m_hwaddr_isSet) {
        obj.insert(QString("hwaddr"), ::OpenAPI::toJsonValue(m_hwaddr));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIConfigDHCP::getAddOptions() const {
    return m_add_options;
}
void OAIConfigDHCP::setAddOptions(const QString &add_options) {
    m_add_options = add_options;
    m_add_options_isSet = true;
}

bool OAIConfigDHCP::is_add_options_Set() const{
    return m_add_options_isSet;
}

bool OAIConfigDHCP::is_add_options_Valid() const{
    return m_add_options_isValid;
}

QString OAIConfigDHCP::getClassid() const {
    return m_classid;
}
void OAIConfigDHCP::setClassid(const QString &classid) {
    m_classid = classid;
    m_classid_isSet = true;
}

bool OAIConfigDHCP::is_classid_Set() const{
    return m_classid_isSet;
}

bool OAIConfigDHCP::is_classid_Valid() const{
    return m_classid_isValid;
}

QString OAIConfigDHCP::getHwaddr() const {
    return m_hwaddr;
}
void OAIConfigDHCP::setHwaddr(const QString &hwaddr) {
    m_hwaddr = hwaddr;
    m_hwaddr_isSet = true;
}

bool OAIConfigDHCP::is_hwaddr_Set() const{
    return m_hwaddr_isSet;
}

bool OAIConfigDHCP::is_hwaddr_Valid() const{
    return m_hwaddr_isValid;
}

QString OAIConfigDHCP::getScript() const {
    return m_script;
}
void OAIConfigDHCP::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIConfigDHCP::is_script_Set() const{
    return m_script_isSet;
}

bool OAIConfigDHCP::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIConfigDHCP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hwaddr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigDHCP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
