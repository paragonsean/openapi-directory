/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigTFTP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigTFTP::OAIConfigTFTP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigTFTP::OAIConfigTFTP() {
    this->initializeModel();
}

OAIConfigTFTP::~OAIConfigTFTP() {}

void OAIConfigTFTP::initializeModel() {

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_dstfile_isSet = false;
    m_dstfile_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_retries_isSet = false;
    m_retries_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_srcfile_isSet = false;
    m_srcfile_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_trace_isSet = false;
    m_trace_isValid = false;
}

void OAIConfigTFTP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigTFTP::fromJsonObject(QJsonObject json) {

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_dstfile_isValid = ::OpenAPI::fromJsonValue(m_dstfile, json[QString("dstfile")]);
    m_dstfile_isSet = !json[QString("dstfile")].isNull() && m_dstfile_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_retries_isValid = ::OpenAPI::fromJsonValue(m_retries, json[QString("retries")]);
    m_retries_isSet = !json[QString("retries")].isNull() && m_retries_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_srcfile_isValid = ::OpenAPI::fromJsonValue(m_srcfile, json[QString("srcfile")]);
    m_srcfile_isSet = !json[QString("srcfile")].isNull() && m_srcfile_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_trace_isValid = ::OpenAPI::fromJsonValue(m_trace, json[QString("trace")]);
    m_trace_isSet = !json[QString("trace")].isNull() && m_trace_isValid;
}

QString OAIConfigTFTP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigTFTP::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_dstfile_isSet) {
        obj.insert(QString("dstfile"), ::OpenAPI::toJsonValue(m_dstfile));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_retries_isSet) {
        obj.insert(QString("retries"), ::OpenAPI::toJsonValue(m_retries));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_srcfile_isSet) {
        obj.insert(QString("srcfile"), ::OpenAPI::toJsonValue(m_srcfile));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_trace_isSet) {
        obj.insert(QString("trace"), ::OpenAPI::toJsonValue(m_trace));
    }
    return obj;
}

qint32 OAIConfigTFTP::getCache() const {
    return m_cache;
}
void OAIConfigTFTP::setCache(const qint32 &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIConfigTFTP::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIConfigTFTP::is_cache_Valid() const{
    return m_cache_isValid;
}

QString OAIConfigTFTP::getClient() const {
    return m_client;
}
void OAIConfigTFTP::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIConfigTFTP::is_client_Set() const{
    return m_client_isSet;
}

bool OAIConfigTFTP::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIConfigTFTP::getDstfile() const {
    return m_dstfile;
}
void OAIConfigTFTP::setDstfile(const QString &dstfile) {
    m_dstfile = dstfile;
    m_dstfile_isSet = true;
}

bool OAIConfigTFTP::is_dstfile_Set() const{
    return m_dstfile_isSet;
}

bool OAIConfigTFTP::is_dstfile_Valid() const{
    return m_dstfile_isValid;
}

QString OAIConfigTFTP::getMode() const {
    return m_mode;
}
void OAIConfigTFTP::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIConfigTFTP::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIConfigTFTP::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIConfigTFTP::getPort() const {
    return m_port;
}
void OAIConfigTFTP::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConfigTFTP::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConfigTFTP::is_port_Valid() const{
    return m_port_isValid;
}

qint32 OAIConfigTFTP::getRetries() const {
    return m_retries;
}
void OAIConfigTFTP::setRetries(const qint32 &retries) {
    m_retries = retries;
    m_retries_isSet = true;
}

bool OAIConfigTFTP::is_retries_Set() const{
    return m_retries_isSet;
}

bool OAIConfigTFTP::is_retries_Valid() const{
    return m_retries_isValid;
}

QString OAIConfigTFTP::getScript() const {
    return m_script;
}
void OAIConfigTFTP::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIConfigTFTP::is_script_Set() const{
    return m_script_isSet;
}

bool OAIConfigTFTP::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIConfigTFTP::getServer() const {
    return m_server;
}
void OAIConfigTFTP::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIConfigTFTP::is_server_Set() const{
    return m_server_isSet;
}

bool OAIConfigTFTP::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIConfigTFTP::getSrcfile() const {
    return m_srcfile;
}
void OAIConfigTFTP::setSrcfile(const QString &srcfile) {
    m_srcfile = srcfile;
    m_srcfile_isSet = true;
}

bool OAIConfigTFTP::is_srcfile_Set() const{
    return m_srcfile_isSet;
}

bool OAIConfigTFTP::is_srcfile_Valid() const{
    return m_srcfile_isValid;
}

qint32 OAIConfigTFTP::getTimeout() const {
    return m_timeout;
}
void OAIConfigTFTP::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIConfigTFTP::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIConfigTFTP::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIConfigTFTP::getTrace() const {
    return m_trace;
}
void OAIConfigTFTP::setTrace(const QString &trace) {
    m_trace = trace;
    m_trace_isSet = true;
}

bool OAIConfigTFTP::is_trace_Set() const{
    return m_trace_isSet;
}

bool OAIConfigTFTP::is_trace_Valid() const{
    return m_trace_isValid;
}

bool OAIConfigTFTP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dstfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_srcfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigTFTP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
