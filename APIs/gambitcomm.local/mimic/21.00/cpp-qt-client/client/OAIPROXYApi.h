/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPROXYApi_H
#define OAI_OAIPROXYApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigPROXY.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPROXYApi : public QObject {
    Q_OBJECT

public:
    OAIPROXYApi(const int timeOut = 0);
    ~OAIPROXYApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolProxyGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolProxyGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolProxyGetStatistics(const qint32 &agent_num);


    virtual void protocolProxyGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolProxyGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port qint32 [required]
    * @param[in]  target QString [required]
    * @param[in]  target_port qint32 [required]
    */
    virtual void protocolProxyPortAdd(const qint32 &agent_num, const qint32 &port, const QString &target, const qint32 &target_port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolProxyPortIsstarted(const qint32 &agent_num, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolProxyPortList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolProxyPortRemove(const qint32 &agent_num, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolProxyPortStart(const qint32 &agent_num, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port qint32 [required]
    */
    virtual void protocolProxyPortStop(const qint32 &agent_num, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolProxySetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolProxySetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolProxyGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolProxyGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolProxyGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolProxyGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolProxyGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolProxyPortAddCallback(OAIHttpRequestWorker *worker);
    void protocolProxyPortIsstartedCallback(OAIHttpRequestWorker *worker);
    void protocolProxyPortListCallback(OAIHttpRequestWorker *worker);
    void protocolProxyPortRemoveCallback(OAIHttpRequestWorker *worker);
    void protocolProxyPortStartCallback(OAIHttpRequestWorker *worker);
    void protocolProxyPortStopCallback(OAIHttpRequestWorker *worker);
    void protocolProxySetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolProxySetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolProxyGetArgsSignal(OAIObject summary);
    void protocolProxyGetConfigSignal(OAIConfigPROXY summary);
    void protocolProxyGetStatisticsSignal(QList<qint32> summary);
    void protocolProxyGetStatsHdrSignal(QList<QString> summary);
    void protocolProxyGetTraceSignal(OAIConfigPROXY summary);
    void protocolProxyPortAddSignal(QString summary);
    void protocolProxyPortIsstartedSignal(QString summary);
    void protocolProxyPortListSignal(QList<qint32> summary);
    void protocolProxyPortRemoveSignal(QString summary);
    void protocolProxyPortStartSignal(QString summary);
    void protocolProxyPortStopSignal(QString summary);
    void protocolProxySetConfigSignal(QString summary);
    void protocolProxySetTraceSignal(QString summary);


    void protocolProxyGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolProxyGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigPROXY summary);
    void protocolProxyGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolProxyGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolProxyGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigPROXY summary);
    void protocolProxyPortAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolProxyPortIsstartedSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolProxyPortListSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolProxyPortRemoveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolProxyPortStartSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolProxyPortStopSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolProxySetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolProxySetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolProxyGetArgsSignalError() instead")
    void protocolProxyGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetConfigSignalError() instead")
    void protocolProxyGetConfigSignalE(OAIConfigPROXY summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetConfigSignalError(OAIConfigPROXY summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetStatisticsSignalError() instead")
    void protocolProxyGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetStatsHdrSignalError() instead")
    void protocolProxyGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetTraceSignalError() instead")
    void protocolProxyGetTraceSignalE(OAIConfigPROXY summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetTraceSignalError(OAIConfigPROXY summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortAddSignalError() instead")
    void protocolProxyPortAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortIsstartedSignalError() instead")
    void protocolProxyPortIsstartedSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortIsstartedSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortListSignalError() instead")
    void protocolProxyPortListSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortListSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortRemoveSignalError() instead")
    void protocolProxyPortRemoveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortRemoveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortStartSignalError() instead")
    void protocolProxyPortStartSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortStartSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortStopSignalError() instead")
    void protocolProxyPortStopSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortStopSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxySetConfigSignalError() instead")
    void protocolProxySetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxySetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxySetTraceSignalError() instead")
    void protocolProxySetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxySetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolProxyGetArgsSignalErrorFull() instead")
    void protocolProxyGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetConfigSignalErrorFull() instead")
    void protocolProxyGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetStatisticsSignalErrorFull() instead")
    void protocolProxyGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetStatsHdrSignalErrorFull() instead")
    void protocolProxyGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyGetTraceSignalErrorFull() instead")
    void protocolProxyGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortAddSignalErrorFull() instead")
    void protocolProxyPortAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortIsstartedSignalErrorFull() instead")
    void protocolProxyPortIsstartedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortIsstartedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortListSignalErrorFull() instead")
    void protocolProxyPortListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortRemoveSignalErrorFull() instead")
    void protocolProxyPortRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortStartSignalErrorFull() instead")
    void protocolProxyPortStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxyPortStopSignalErrorFull() instead")
    void protocolProxyPortStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxyPortStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxySetConfigSignalErrorFull() instead")
    void protocolProxySetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxySetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolProxySetTraceSignalErrorFull() instead")
    void protocolProxySetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolProxySetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
