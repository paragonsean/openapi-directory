/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAgentApi_H
#define OAI_OAIAgentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIPAlias.h"
#include "OAIIPSource.h"
#include "OAIObject.h"
#include "OAITimerScript.h"
#include "OAITrapDest.h"
#include "OAITriplet.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAgentApi : public QObject {
    Q_OBJECT

public:
    OAIAgentApi(const int timeOut = 0);
    ~OAIAgentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    * @param[in]  mask QString [required]
    * @param[in]  interface QString [required]
    */
    virtual void addIpalias(const qint32 &agent_num, const QString &ip, const qint32 &port, const QString &mask, const QString &interface);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  script QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  arg QString [required]
    */
    virtual void addTimerScript(const qint32 &agent_num, const QString &script, const qint32 &interval, const QString &arg);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void agentRemove(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  other_agent qint32 [required]
    */
    virtual void agentStoreCopy(const qint32 &agent_num, const qint32 &other_agent);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  var QString [required]
    */
    virtual void agentStoreExists(const qint32 &agent_num, const QString &var);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  var QString [required]
    */
    virtual void agentStoreGet(const qint32 &agent_num, const QString &var);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void agentStoreList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  var QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  body QString [optional]
    */
    virtual void agentStoreLreplace(const qint32 &agent_num, const QString &var, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  var QString [required]
    */
    virtual void agentStorePersists(const qint32 &agent_num, const QString &var);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  var QString [required]
    * @param[in]  persist qint32 [required]
    * @param[in]  body QString [optional]
    */
    virtual void agentStoreSet(const qint32 &agent_num, const QString &var, const qint32 &persist, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  var QString [required]
    */
    virtual void agentStoreUnset(const qint32 &agent_num, const QString &var);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void delIpalias(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  script QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  arg QString [required]
    */
    virtual void delTimerScript(const qint32 &agent_num, const QString &script, const qint32 &interval, const QString &arg);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void fromAdd(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void fromDel(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void fromList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getAgentState(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getChanged(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getConfigChanged(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getDelay(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getDrops(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getHost(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getInformTimeout(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getInterface(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getMask(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getMibs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getNumberStarts(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getOiddir(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getOwner(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getPdusize(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getPort(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getPrivdir(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getProtocols(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getReadCommunity(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getScen(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getSim(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getStarttime(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getStateChanged(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getStatistics(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getValidate(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void getWriteCommunity(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void halt(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void listIpaliases(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void listTimerScripts(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void pauseNow(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  prot QString [required]
    */
    virtual void protocolGetConfig(const qint32 &agent_num, const QString &prot);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  oai_triplet QList<OAITriplet> [required]
    */
    virtual void r_new(const qint32 &agent_num, const QString &ip, const QList<OAITriplet> &oai_triplet);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void reload(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void resume(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void save(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  delay qint32 [required]
    */
    virtual void setDelay(const qint32 &agent_num, const qint32 &delay);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  drops qint32 [required]
    */
    virtual void setDrops(const qint32 &agent_num, const qint32 &drops);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  host QString [required]
    */
    virtual void setHost(const qint32 &agent_num, const QString &host);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  inform_timeout qint32 [required]
    */
    virtual void setInformTimeout(const qint32 &agent_num, const qint32 &inform_timeout);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  interface QString [required]
    */
    virtual void setInterface(const qint32 &agent_num, const QString &interface);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  mask QString [required]
    */
    virtual void setMask(const qint32 &agent_num, const QString &mask);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  oai_triplet QList<OAITriplet> [required]
    */
    virtual void setMibs(const qint32 &agent_num, const QList<OAITriplet> &oai_triplet);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  oiddir QString [required]
    */
    virtual void setOiddir(const qint32 &agent_num, const QString &oiddir);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  owner QString [required]
    */
    virtual void setOwner(const qint32 &agent_num, const QString &owner);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  pdusize qint32 [required]
    */
    virtual void setPdusize(const qint32 &agent_num, const qint32 &pdusize);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  port qint32 [required]
    */
    virtual void setPort(const qint32 &agent_num, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  privdir QString [required]
    */
    virtual void setPrivdir(const qint32 &agent_num, const QString &privdir);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void setProtocols(const qint32 &agent_num, const QList<QString> &request_body);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  read QString [required]
    */
    virtual void setReadCommunity(const qint32 &agent_num, const QString &read);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  start qint32 [required]
    */
    virtual void setStarttime(const qint32 &agent_num, const qint32 &start);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  trace qint32 [required]
    */
    virtual void setTrace(const qint32 &agent_num, const qint32 &trace);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  validate qint32 [required]
    */
    virtual void setValidate(const qint32 &agent_num, const qint32 &validate);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  write QString [required]
    */
    virtual void setWriteCommunity(const qint32 &agent_num, const QString &write);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void start(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void startIpalias(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void statusIpalias(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void stop(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void stopIpalias(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void trapConfigAdd(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  ip QString [required]
    * @param[in]  port qint32 [required]
    */
    virtual void trapConfigDel(const qint32 &agent_num, const QString &ip, const qint32 &port);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void trapConfigList(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void trapList(const qint32 &agent_num);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addIpaliasCallback(OAIHttpRequestWorker *worker);
    void addTimerScriptCallback(OAIHttpRequestWorker *worker);
    void agentRemoveCallback(OAIHttpRequestWorker *worker);
    void agentStoreCopyCallback(OAIHttpRequestWorker *worker);
    void agentStoreExistsCallback(OAIHttpRequestWorker *worker);
    void agentStoreGetCallback(OAIHttpRequestWorker *worker);
    void agentStoreListCallback(OAIHttpRequestWorker *worker);
    void agentStoreLreplaceCallback(OAIHttpRequestWorker *worker);
    void agentStorePersistsCallback(OAIHttpRequestWorker *worker);
    void agentStoreSetCallback(OAIHttpRequestWorker *worker);
    void agentStoreUnsetCallback(OAIHttpRequestWorker *worker);
    void delIpaliasCallback(OAIHttpRequestWorker *worker);
    void delTimerScriptCallback(OAIHttpRequestWorker *worker);
    void fromAddCallback(OAIHttpRequestWorker *worker);
    void fromDelCallback(OAIHttpRequestWorker *worker);
    void fromListCallback(OAIHttpRequestWorker *worker);
    void getAgentStateCallback(OAIHttpRequestWorker *worker);
    void getChangedCallback(OAIHttpRequestWorker *worker);
    void getConfigChangedCallback(OAIHttpRequestWorker *worker);
    void getDelayCallback(OAIHttpRequestWorker *worker);
    void getDropsCallback(OAIHttpRequestWorker *worker);
    void getHostCallback(OAIHttpRequestWorker *worker);
    void getInformTimeoutCallback(OAIHttpRequestWorker *worker);
    void getInterfaceCallback(OAIHttpRequestWorker *worker);
    void getMaskCallback(OAIHttpRequestWorker *worker);
    void getMibsCallback(OAIHttpRequestWorker *worker);
    void getNumberStartsCallback(OAIHttpRequestWorker *worker);
    void getOiddirCallback(OAIHttpRequestWorker *worker);
    void getOwnerCallback(OAIHttpRequestWorker *worker);
    void getPdusizeCallback(OAIHttpRequestWorker *worker);
    void getPortCallback(OAIHttpRequestWorker *worker);
    void getPrivdirCallback(OAIHttpRequestWorker *worker);
    void getProtocolsCallback(OAIHttpRequestWorker *worker);
    void getReadCommunityCallback(OAIHttpRequestWorker *worker);
    void getScenCallback(OAIHttpRequestWorker *worker);
    void getSimCallback(OAIHttpRequestWorker *worker);
    void getStarttimeCallback(OAIHttpRequestWorker *worker);
    void getStateChangedCallback(OAIHttpRequestWorker *worker);
    void getStatisticsCallback(OAIHttpRequestWorker *worker);
    void getTraceCallback(OAIHttpRequestWorker *worker);
    void getValidateCallback(OAIHttpRequestWorker *worker);
    void getWriteCommunityCallback(OAIHttpRequestWorker *worker);
    void haltCallback(OAIHttpRequestWorker *worker);
    void listIpaliasesCallback(OAIHttpRequestWorker *worker);
    void listTimerScriptsCallback(OAIHttpRequestWorker *worker);
    void pauseNowCallback(OAIHttpRequestWorker *worker);
    void protocolGetConfigCallback(OAIHttpRequestWorker *worker);
    void r_newCallback(OAIHttpRequestWorker *worker);
    void reloadCallback(OAIHttpRequestWorker *worker);
    void resumeCallback(OAIHttpRequestWorker *worker);
    void saveCallback(OAIHttpRequestWorker *worker);
    void setDelayCallback(OAIHttpRequestWorker *worker);
    void setDropsCallback(OAIHttpRequestWorker *worker);
    void setHostCallback(OAIHttpRequestWorker *worker);
    void setInformTimeoutCallback(OAIHttpRequestWorker *worker);
    void setInterfaceCallback(OAIHttpRequestWorker *worker);
    void setMaskCallback(OAIHttpRequestWorker *worker);
    void setMibsCallback(OAIHttpRequestWorker *worker);
    void setOiddirCallback(OAIHttpRequestWorker *worker);
    void setOwnerCallback(OAIHttpRequestWorker *worker);
    void setPdusizeCallback(OAIHttpRequestWorker *worker);
    void setPortCallback(OAIHttpRequestWorker *worker);
    void setPrivdirCallback(OAIHttpRequestWorker *worker);
    void setProtocolsCallback(OAIHttpRequestWorker *worker);
    void setReadCommunityCallback(OAIHttpRequestWorker *worker);
    void setStarttimeCallback(OAIHttpRequestWorker *worker);
    void setTraceCallback(OAIHttpRequestWorker *worker);
    void setValidateCallback(OAIHttpRequestWorker *worker);
    void setWriteCommunityCallback(OAIHttpRequestWorker *worker);
    void startCallback(OAIHttpRequestWorker *worker);
    void startIpaliasCallback(OAIHttpRequestWorker *worker);
    void statusIpaliasCallback(OAIHttpRequestWorker *worker);
    void stopCallback(OAIHttpRequestWorker *worker);
    void stopIpaliasCallback(OAIHttpRequestWorker *worker);
    void trapConfigAddCallback(OAIHttpRequestWorker *worker);
    void trapConfigDelCallback(OAIHttpRequestWorker *worker);
    void trapConfigListCallback(OAIHttpRequestWorker *worker);
    void trapListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addIpaliasSignal(QString summary);
    void addTimerScriptSignal(QString summary);
    void agentRemoveSignal(QString summary);
    void agentStoreCopySignal(QString summary);
    void agentStoreExistsSignal(QString summary);
    void agentStoreGetSignal(QString summary);
    void agentStoreListSignal(QList<QString> summary);
    void agentStoreLreplaceSignal(QString summary);
    void agentStorePersistsSignal(QString summary);
    void agentStoreSetSignal(QString summary);
    void agentStoreUnsetSignal(QString summary);
    void delIpaliasSignal(QString summary);
    void delTimerScriptSignal(QString summary);
    void fromAddSignal(QString summary);
    void fromDelSignal(QString summary);
    void fromListSignal(QList<OAIIPSource> summary);
    void getAgentStateSignal(qint32 summary);
    void getChangedSignal(qint32 summary);
    void getConfigChangedSignal(qint32 summary);
    void getDelaySignal(qint32 summary);
    void getDropsSignal(qint32 summary);
    void getHostSignal(QString summary);
    void getInformTimeoutSignal(qint32 summary);
    void getInterfaceSignal(QString summary);
    void getMaskSignal(QString summary);
    void getMibsSignal(QList<OAITriplet> summary);
    void getNumberStartsSignal(qint32 summary);
    void getOiddirSignal(QString summary);
    void getOwnerSignal(QString summary);
    void getPdusizeSignal(qint32 summary);
    void getPortSignal(QString summary);
    void getPrivdirSignal(QString summary);
    void getProtocolsSignal(QList<QString> summary);
    void getReadCommunitySignal(QString summary);
    void getScenSignal(qint32 summary);
    void getSimSignal(QString summary);
    void getStarttimeSignal(QString summary);
    void getStateChangedSignal(qint32 summary);
    void getStatisticsSignal(QList<qint32> summary);
    void getTraceSignal(qint32 summary);
    void getValidateSignal(qint32 summary);
    void getWriteCommunitySignal(QString summary);
    void haltSignal(QString summary);
    void listIpaliasesSignal(QList<OAIIPAlias> summary);
    void listTimerScriptsSignal(QList<OAITimerScript> summary);
    void pauseNowSignal(QString summary);
    void protocolGetConfigSignal(OAIObject summary);
    void r_newSignal(QString summary);
    void reloadSignal(QString summary);
    void resumeSignal(QString summary);
    void saveSignal(QString summary);
    void setDelaySignal(qint32 summary);
    void setDropsSignal(qint32 summary);
    void setHostSignal(QString summary);
    void setInformTimeoutSignal(qint32 summary);
    void setInterfaceSignal(QString summary);
    void setMaskSignal(QString summary);
    void setMibsSignal(QString summary);
    void setOiddirSignal(QString summary);
    void setOwnerSignal(QString summary);
    void setPdusizeSignal(qint32 summary);
    void setPortSignal(QString summary);
    void setPrivdirSignal(QString summary);
    void setProtocolsSignal(QList<qint32> summary);
    void setReadCommunitySignal(QString summary);
    void setStarttimeSignal(QString summary);
    void setTraceSignal(qint32 summary);
    void setValidateSignal(qint32 summary);
    void setWriteCommunitySignal(QString summary);
    void startSignal(QString summary);
    void startIpaliasSignal(QString summary);
    void statusIpaliasSignal(QString summary);
    void stopSignal(QString summary);
    void stopIpaliasSignal(QString summary);
    void trapConfigAddSignal(QString summary);
    void trapConfigDelSignal(QString summary);
    void trapConfigListSignal(QList<OAITrapDest> summary);
    void trapListSignal(QList<QString> summary);


    void addIpaliasSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void addTimerScriptSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentRemoveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStoreCopySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStoreExistsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStoreGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStoreListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void agentStoreLreplaceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStorePersistsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStoreSetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void agentStoreUnsetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void delIpaliasSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void delTimerScriptSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void fromAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void fromDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void fromListSignalFull(OAIHttpRequestWorker *worker, QList<OAIIPSource> summary);
    void getAgentStateSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getChangedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getConfigChangedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getDelaySignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getDropsSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getHostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getInformTimeoutSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getInterfaceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getMaskSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getMibsSignalFull(OAIHttpRequestWorker *worker, QList<OAITriplet> summary);
    void getNumberStartsSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getOiddirSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getOwnerSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getPdusizeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getPortSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getPrivdirSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getProtocolsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getReadCommunitySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getScenSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getSimSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getStarttimeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getStateChangedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getTraceSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getValidateSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getWriteCommunitySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void haltSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listIpaliasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIPAlias> summary);
    void listTimerScriptsSignalFull(OAIHttpRequestWorker *worker, QList<OAITimerScript> summary);
    void pauseNowSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void r_newSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void reloadSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void resumeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void saveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setDelaySignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void setDropsSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void setHostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setInformTimeoutSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void setInterfaceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setMaskSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setMibsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setOiddirSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setOwnerSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setPdusizeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void setPortSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setPrivdirSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setProtocolsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void setReadCommunitySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setStarttimeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setTraceSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void setValidateSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void setWriteCommunitySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void startSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void startIpaliasSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void statusIpaliasSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void stopSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void stopIpaliasSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void trapConfigAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void trapConfigDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void trapConfigListSignalFull(OAIHttpRequestWorker *worker, QList<OAITrapDest> summary);
    void trapListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use addIpaliasSignalError() instead")
    void addIpaliasSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addIpaliasSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTimerScriptSignalError() instead")
    void addTimerScriptSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTimerScriptSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentRemoveSignalError() instead")
    void agentRemoveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentRemoveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreCopySignalError() instead")
    void agentStoreCopySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreCopySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreExistsSignalError() instead")
    void agentStoreExistsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreExistsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreGetSignalError() instead")
    void agentStoreGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreListSignalError() instead")
    void agentStoreListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreLreplaceSignalError() instead")
    void agentStoreLreplaceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreLreplaceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStorePersistsSignalError() instead")
    void agentStorePersistsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStorePersistsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreSetSignalError() instead")
    void agentStoreSetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreSetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreUnsetSignalError() instead")
    void agentStoreUnsetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreUnsetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delIpaliasSignalError() instead")
    void delIpaliasSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void delIpaliasSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delTimerScriptSignalError() instead")
    void delTimerScriptSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void delTimerScriptSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fromAddSignalError() instead")
    void fromAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fromAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fromDelSignalError() instead")
    void fromDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fromDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fromListSignalError() instead")
    void fromListSignalE(QList<OAIIPSource> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fromListSignalError(QList<OAIIPSource> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgentStateSignalError() instead")
    void getAgentStateSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgentStateSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangedSignalError() instead")
    void getChangedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigChangedSignalError() instead")
    void getConfigChangedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigChangedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDelaySignalError() instead")
    void getDelaySignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDelaySignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDropsSignalError() instead")
    void getDropsSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDropsSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostSignalError() instead")
    void getHostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInformTimeoutSignalError() instead")
    void getInformTimeoutSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInformTimeoutSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInterfaceSignalError() instead")
    void getInterfaceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInterfaceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMaskSignalError() instead")
    void getMaskSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMaskSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMibsSignalError() instead")
    void getMibsSignalE(QList<OAITriplet> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMibsSignalError(QList<OAITriplet> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberStartsSignalError() instead")
    void getNumberStartsSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberStartsSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOiddirSignalError() instead")
    void getOiddirSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOiddirSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerSignalError() instead")
    void getOwnerSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPdusizeSignalError() instead")
    void getPdusizeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPdusizeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortSignalError() instead")
    void getPortSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrivdirSignalError() instead")
    void getPrivdirSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrivdirSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProtocolsSignalError() instead")
    void getProtocolsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProtocolsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadCommunitySignalError() instead")
    void getReadCommunitySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadCommunitySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScenSignalError() instead")
    void getScenSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScenSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimSignalError() instead")
    void getSimSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStarttimeSignalError() instead")
    void getStarttimeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStarttimeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStateChangedSignalError() instead")
    void getStateChangedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateChangedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsSignalError() instead")
    void getStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTraceSignalError() instead")
    void getTraceSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTraceSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getValidateSignalError() instead")
    void getValidateSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getValidateSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWriteCommunitySignalError() instead")
    void getWriteCommunitySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWriteCommunitySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haltSignalError() instead")
    void haltSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void haltSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIpaliasesSignalError() instead")
    void listIpaliasesSignalE(QList<OAIIPAlias> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIpaliasesSignalError(QList<OAIIPAlias> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTimerScriptsSignalError() instead")
    void listTimerScriptsSignalE(QList<OAITimerScript> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTimerScriptsSignalError(QList<OAITimerScript> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pauseNowSignalError() instead")
    void pauseNowSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pauseNowSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolGetConfigSignalError() instead")
    void protocolGetConfigSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolGetConfigSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_newSignalError() instead")
    void r_newSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_newSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reloadSignalError() instead")
    void reloadSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reloadSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeSignalError() instead")
    void resumeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveSignalError() instead")
    void saveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDelaySignalError() instead")
    void setDelaySignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDelaySignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDropsSignalError() instead")
    void setDropsSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setDropsSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setHostSignalError() instead")
    void setHostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setHostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInformTimeoutSignalError() instead")
    void setInformTimeoutSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setInformTimeoutSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInterfaceSignalError() instead")
    void setInterfaceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setInterfaceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMaskSignalError() instead")
    void setMaskSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setMaskSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMibsSignalError() instead")
    void setMibsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setMibsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOiddirSignalError() instead")
    void setOiddirSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOiddirSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOwnerSignalError() instead")
    void setOwnerSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOwnerSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPdusizeSignalError() instead")
    void setPdusizeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPdusizeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPortSignalError() instead")
    void setPortSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPortSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPrivdirSignalError() instead")
    void setPrivdirSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setPrivdirSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setProtocolsSignalError() instead")
    void setProtocolsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setProtocolsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReadCommunitySignalError() instead")
    void setReadCommunitySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setReadCommunitySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStarttimeSignalError() instead")
    void setStarttimeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setStarttimeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTraceSignalError() instead")
    void setTraceSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setTraceSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setValidateSignalError() instead")
    void setValidateSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setValidateSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWriteCommunitySignalError() instead")
    void setWriteCommunitySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setWriteCommunitySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalError() instead")
    void startSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startIpaliasSignalError() instead")
    void startIpaliasSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startIpaliasSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusIpaliasSignalError() instead")
    void statusIpaliasSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void statusIpaliasSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSignalError() instead")
    void stopSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopIpaliasSignalError() instead")
    void stopIpaliasSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopIpaliasSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapConfigAddSignalError() instead")
    void trapConfigAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trapConfigAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapConfigDelSignalError() instead")
    void trapConfigDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trapConfigDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapConfigListSignalError() instead")
    void trapConfigListSignalE(QList<OAITrapDest> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trapConfigListSignalError(QList<OAITrapDest> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapListSignalError() instead")
    void trapListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trapListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addIpaliasSignalErrorFull() instead")
    void addIpaliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addIpaliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTimerScriptSignalErrorFull() instead")
    void addTimerScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTimerScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentRemoveSignalErrorFull() instead")
    void agentRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreCopySignalErrorFull() instead")
    void agentStoreCopySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreCopySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreExistsSignalErrorFull() instead")
    void agentStoreExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreGetSignalErrorFull() instead")
    void agentStoreGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreListSignalErrorFull() instead")
    void agentStoreListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreLreplaceSignalErrorFull() instead")
    void agentStoreLreplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreLreplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStorePersistsSignalErrorFull() instead")
    void agentStorePersistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStorePersistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreSetSignalErrorFull() instead")
    void agentStoreSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentStoreUnsetSignalErrorFull() instead")
    void agentStoreUnsetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentStoreUnsetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delIpaliasSignalErrorFull() instead")
    void delIpaliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delIpaliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delTimerScriptSignalErrorFull() instead")
    void delTimerScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delTimerScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fromAddSignalErrorFull() instead")
    void fromAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fromAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fromDelSignalErrorFull() instead")
    void fromDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fromDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fromListSignalErrorFull() instead")
    void fromListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fromListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgentStateSignalErrorFull() instead")
    void getAgentStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgentStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangedSignalErrorFull() instead")
    void getChangedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigChangedSignalErrorFull() instead")
    void getConfigChangedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigChangedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDelaySignalErrorFull() instead")
    void getDelaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDelaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDropsSignalErrorFull() instead")
    void getDropsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDropsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostSignalErrorFull() instead")
    void getHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInformTimeoutSignalErrorFull() instead")
    void getInformTimeoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInformTimeoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInterfaceSignalErrorFull() instead")
    void getInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMaskSignalErrorFull() instead")
    void getMaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMibsSignalErrorFull() instead")
    void getMibsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMibsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNumberStartsSignalErrorFull() instead")
    void getNumberStartsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNumberStartsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOiddirSignalErrorFull() instead")
    void getOiddirSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOiddirSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerSignalErrorFull() instead")
    void getOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPdusizeSignalErrorFull() instead")
    void getPdusizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPdusizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortSignalErrorFull() instead")
    void getPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrivdirSignalErrorFull() instead")
    void getPrivdirSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrivdirSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProtocolsSignalErrorFull() instead")
    void getProtocolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProtocolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadCommunitySignalErrorFull() instead")
    void getReadCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScenSignalErrorFull() instead")
    void getScenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimSignalErrorFull() instead")
    void getSimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStarttimeSignalErrorFull() instead")
    void getStarttimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStarttimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStateChangedSignalErrorFull() instead")
    void getStateChangedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateChangedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsSignalErrorFull() instead")
    void getStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTraceSignalErrorFull() instead")
    void getTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getValidateSignalErrorFull() instead")
    void getValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWriteCommunitySignalErrorFull() instead")
    void getWriteCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWriteCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haltSignalErrorFull() instead")
    void haltSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haltSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIpaliasesSignalErrorFull() instead")
    void listIpaliasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIpaliasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTimerScriptsSignalErrorFull() instead")
    void listTimerScriptsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTimerScriptsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pauseNowSignalErrorFull() instead")
    void pauseNowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pauseNowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolGetConfigSignalErrorFull() instead")
    void protocolGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_newSignalErrorFull() instead")
    void r_newSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_newSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reloadSignalErrorFull() instead")
    void reloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeSignalErrorFull() instead")
    void resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveSignalErrorFull() instead")
    void saveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDelaySignalErrorFull() instead")
    void setDelaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDelaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDropsSignalErrorFull() instead")
    void setDropsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDropsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setHostSignalErrorFull() instead")
    void setHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInformTimeoutSignalErrorFull() instead")
    void setInformTimeoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setInformTimeoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setInterfaceSignalErrorFull() instead")
    void setInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMaskSignalErrorFull() instead")
    void setMaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setMaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setMibsSignalErrorFull() instead")
    void setMibsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setMibsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOiddirSignalErrorFull() instead")
    void setOiddirSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOiddirSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOwnerSignalErrorFull() instead")
    void setOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPdusizeSignalErrorFull() instead")
    void setPdusizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPdusizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPortSignalErrorFull() instead")
    void setPortSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPortSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPrivdirSignalErrorFull() instead")
    void setPrivdirSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPrivdirSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setProtocolsSignalErrorFull() instead")
    void setProtocolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setProtocolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReadCommunitySignalErrorFull() instead")
    void setReadCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setReadCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStarttimeSignalErrorFull() instead")
    void setStarttimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setStarttimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTraceSignalErrorFull() instead")
    void setTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setValidateSignalErrorFull() instead")
    void setValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWriteCommunitySignalErrorFull() instead")
    void setWriteCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setWriteCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalErrorFull() instead")
    void startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startIpaliasSignalErrorFull() instead")
    void startIpaliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startIpaliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusIpaliasSignalErrorFull() instead")
    void statusIpaliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statusIpaliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSignalErrorFull() instead")
    void stopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopIpaliasSignalErrorFull() instead")
    void stopIpaliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopIpaliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapConfigAddSignalErrorFull() instead")
    void trapConfigAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trapConfigAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapConfigDelSignalErrorFull() instead")
    void trapConfigDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trapConfigDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapConfigListSignalErrorFull() instead")
    void trapConfigListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trapConfigListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trapListSignalErrorFull() instead")
    void trapListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trapListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
