/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigTFTP.h
 *
 * 
 */

#ifndef OAIConfigTFTP_H
#define OAIConfigTFTP_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConfigTFTP : public OAIObject {
public:
    OAIConfigTFTP();
    OAIConfigTFTP(QString json);
    ~OAIConfigTFTP() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCache() const;
    void setCache(const qint32 &cache);
    bool is_cache_Set() const;
    bool is_cache_Valid() const;

    QString getClient() const;
    void setClient(const QString &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    QString getDstfile() const;
    void setDstfile(const QString &dstfile);
    bool is_dstfile_Set() const;
    bool is_dstfile_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    qint32 getRetries() const;
    void setRetries(const qint32 &retries);
    bool is_retries_Set() const;
    bool is_retries_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    QString getServer() const;
    void setServer(const QString &server);
    bool is_server_Set() const;
    bool is_server_Valid() const;

    QString getSrcfile() const;
    void setSrcfile(const QString &srcfile);
    bool is_srcfile_Set() const;
    bool is_srcfile_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    QString getTrace() const;
    void setTrace(const QString &trace);
    bool is_trace_Set() const;
    bool is_trace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cache;
    bool m_cache_isSet;
    bool m_cache_isValid;

    QString m_client;
    bool m_client_isSet;
    bool m_client_isValid;

    QString m_dstfile;
    bool m_dstfile_isSet;
    bool m_dstfile_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    qint32 m_retries;
    bool m_retries_isSet;
    bool m_retries_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;

    QString m_server;
    bool m_server_isSet;
    bool m_server_isValid;

    QString m_srcfile;
    bool m_srcfile_isSet;
    bool m_srcfile_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    QString m_trace;
    bool m_trace_isSet;
    bool m_trace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigTFTP)

#endif // OAIConfigTFTP_H
