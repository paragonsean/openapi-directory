/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDHCPApi_H
#define OAI_OAIDHCPApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigDHCP.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDHCPApi : public QObject {
    Q_OBJECT

public:
    OAIDHCPApi(const int timeOut = 0);
    ~OAIDHCPApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolDhcpGetArgs(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolDhcpGetConfig(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolDhcpGetStatistics(const qint32 &agent_num);


    virtual void protocolDhcpGetStatsHdr();

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolDhcpGetTrace(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    */
    virtual void protocolDhcpParams(const qint32 &agent_num);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  argument QString [required]
    * @param[in]  value QString [required]
    */
    virtual void protocolDhcpSetConfig(const qint32 &agent_num, const QString &argument, const QString &value);

    /**
    * @param[in]  agent_num qint32 [required]
    * @param[in]  enable_or_not QString [required]
    */
    virtual void protocolDhcpSetTrace(const qint32 &agent_num, const QString &enable_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void protocolDhcpGetArgsCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpGetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpGetStatsHdrCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpGetTraceCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpParamsCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpSetConfigCallback(OAIHttpRequestWorker *worker);
    void protocolDhcpSetTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void protocolDhcpGetArgsSignal(OAIObject summary);
    void protocolDhcpGetConfigSignal(OAIConfigDHCP summary);
    void protocolDhcpGetStatisticsSignal(QList<qint32> summary);
    void protocolDhcpGetStatsHdrSignal(QList<QString> summary);
    void protocolDhcpGetTraceSignal(OAIConfigDHCP summary);
    void protocolDhcpParamsSignal(QList<OAIObject> summary);
    void protocolDhcpSetConfigSignal(QString summary);
    void protocolDhcpSetTraceSignal(QString summary);


    void protocolDhcpGetArgsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void protocolDhcpGetConfigSignalFull(OAIHttpRequestWorker *worker, OAIConfigDHCP summary);
    void protocolDhcpGetStatisticsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void protocolDhcpGetStatsHdrSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void protocolDhcpGetTraceSignalFull(OAIHttpRequestWorker *worker, OAIConfigDHCP summary);
    void protocolDhcpParamsSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void protocolDhcpSetConfigSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void protocolDhcpSetTraceSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use protocolDhcpGetArgsSignalError() instead")
    void protocolDhcpGetArgsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetArgsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetConfigSignalError() instead")
    void protocolDhcpGetConfigSignalE(OAIConfigDHCP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetConfigSignalError(OAIConfigDHCP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetStatisticsSignalError() instead")
    void protocolDhcpGetStatisticsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetStatisticsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetStatsHdrSignalError() instead")
    void protocolDhcpGetStatsHdrSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetStatsHdrSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetTraceSignalError() instead")
    void protocolDhcpGetTraceSignalE(OAIConfigDHCP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetTraceSignalError(OAIConfigDHCP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpParamsSignalError() instead")
    void protocolDhcpParamsSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpParamsSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpSetConfigSignalError() instead")
    void protocolDhcpSetConfigSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpSetConfigSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpSetTraceSignalError() instead")
    void protocolDhcpSetTraceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpSetTraceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use protocolDhcpGetArgsSignalErrorFull() instead")
    void protocolDhcpGetArgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetArgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetConfigSignalErrorFull() instead")
    void protocolDhcpGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetStatisticsSignalErrorFull() instead")
    void protocolDhcpGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetStatsHdrSignalErrorFull() instead")
    void protocolDhcpGetStatsHdrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetStatsHdrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpGetTraceSignalErrorFull() instead")
    void protocolDhcpGetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpGetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpParamsSignalErrorFull() instead")
    void protocolDhcpParamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpParamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpSetConfigSignalErrorFull() instead")
    void protocolDhcpSetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpSetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use protocolDhcpSetTraceSignalErrorFull() instead")
    void protocolDhcpSetTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void protocolDhcpSetTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
