/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigTELNET.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigTELNET::OAIConfigTELNET(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigTELNET::OAIConfigTELNET() {
    this->initializeModel();
}

OAIConfigTELNET::~OAIConfigTELNET() {}

void OAIConfigTELNET::initializeModel() {

    m_keymap_isSet = false;
    m_keymap_isValid = false;

    m_paging_prompt_isSet = false;
    m_paging_prompt_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_prompt_isSet = false;
    m_prompt_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_userdb_isSet = false;
    m_userdb_isValid = false;
}

void OAIConfigTELNET::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigTELNET::fromJsonObject(QJsonObject json) {

    m_keymap_isValid = ::OpenAPI::fromJsonValue(m_keymap, json[QString("keymap")]);
    m_keymap_isSet = !json[QString("keymap")].isNull() && m_keymap_isValid;

    m_paging_prompt_isValid = ::OpenAPI::fromJsonValue(m_paging_prompt, json[QString("paging_prompt")]);
    m_paging_prompt_isSet = !json[QString("paging_prompt")].isNull() && m_paging_prompt_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_prompt_isValid = ::OpenAPI::fromJsonValue(m_prompt, json[QString("prompt")]);
    m_prompt_isSet = !json[QString("prompt")].isNull() && m_prompt_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_userdb_isValid = ::OpenAPI::fromJsonValue(m_userdb, json[QString("userdb")]);
    m_userdb_isSet = !json[QString("userdb")].isNull() && m_userdb_isValid;
}

QString OAIConfigTELNET::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigTELNET::asJsonObject() const {
    QJsonObject obj;
    if (m_keymap_isSet) {
        obj.insert(QString("keymap"), ::OpenAPI::toJsonValue(m_keymap));
    }
    if (m_paging_prompt_isSet) {
        obj.insert(QString("paging_prompt"), ::OpenAPI::toJsonValue(m_paging_prompt));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_prompt_isSet) {
        obj.insert(QString("prompt"), ::OpenAPI::toJsonValue(m_prompt));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_userdb_isSet) {
        obj.insert(QString("userdb"), ::OpenAPI::toJsonValue(m_userdb));
    }
    return obj;
}

QString OAIConfigTELNET::getKeymap() const {
    return m_keymap;
}
void OAIConfigTELNET::setKeymap(const QString &keymap) {
    m_keymap = keymap;
    m_keymap_isSet = true;
}

bool OAIConfigTELNET::is_keymap_Set() const{
    return m_keymap_isSet;
}

bool OAIConfigTELNET::is_keymap_Valid() const{
    return m_keymap_isValid;
}

QString OAIConfigTELNET::getPagingPrompt() const {
    return m_paging_prompt;
}
void OAIConfigTELNET::setPagingPrompt(const QString &paging_prompt) {
    m_paging_prompt = paging_prompt;
    m_paging_prompt_isSet = true;
}

bool OAIConfigTELNET::is_paging_prompt_Set() const{
    return m_paging_prompt_isSet;
}

bool OAIConfigTELNET::is_paging_prompt_Valid() const{
    return m_paging_prompt_isValid;
}

qint32 OAIConfigTELNET::getPort() const {
    return m_port;
}
void OAIConfigTELNET::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConfigTELNET::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConfigTELNET::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIConfigTELNET::getPrompt() const {
    return m_prompt;
}
void OAIConfigTELNET::setPrompt(const QString &prompt) {
    m_prompt = prompt;
    m_prompt_isSet = true;
}

bool OAIConfigTELNET::is_prompt_Set() const{
    return m_prompt_isSet;
}

bool OAIConfigTELNET::is_prompt_Valid() const{
    return m_prompt_isValid;
}

QString OAIConfigTELNET::getRule() const {
    return m_rule;
}
void OAIConfigTELNET::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIConfigTELNET::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIConfigTELNET::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAIConfigTELNET::getUserdb() const {
    return m_userdb;
}
void OAIConfigTELNET::setUserdb(const QString &userdb) {
    m_userdb = userdb;
    m_userdb_isSet = true;
}

bool OAIConfigTELNET::is_userdb_Set() const{
    return m_userdb_isSet;
}

bool OAIConfigTELNET::is_userdb_Valid() const{
    return m_userdb_isValid;
}

bool OAIConfigTELNET::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keymap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userdb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigTELNET::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
