/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccessApi_H
#define OAI_OAIAccessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccessApi : public QObject {
    Q_OBJECT

public:
    OAIAccessApi(const int timeOut = 0);
    ~OAIAccessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user QString [required]
    * @param[in]  agents QString [required]
    * @param[in]  mask QString [required]
    */
    virtual void accessAdd(const QString &user, const QString &agents, const QString &mask);

    /**
    * @param[in]  user QString [required]
    */
    virtual void accessDel(const QString &user);


    virtual void accessGetAcldb();


    virtual void accessGetAdmindir();


    virtual void accessGetAdminuser();


    virtual void accessGetEnabled();


    virtual void accessList();

    /**
    * @param[in]  filename QString [required]
    */
    virtual void accessLoad(const QString &filename);

    /**
    * @param[in]  filename QString [required]
    */
    virtual void accessSave(const QString &filename);

    /**
    * @param[in]  database_name QString [required]
    */
    virtual void accessSetAcldb(const QString &database_name);

    /**
    * @param[in]  enabled_or_not QString [required]
    */
    virtual void accessSetEnabled(const QString &enabled_or_not);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accessAddCallback(OAIHttpRequestWorker *worker);
    void accessDelCallback(OAIHttpRequestWorker *worker);
    void accessGetAcldbCallback(OAIHttpRequestWorker *worker);
    void accessGetAdmindirCallback(OAIHttpRequestWorker *worker);
    void accessGetAdminuserCallback(OAIHttpRequestWorker *worker);
    void accessGetEnabledCallback(OAIHttpRequestWorker *worker);
    void accessListCallback(OAIHttpRequestWorker *worker);
    void accessLoadCallback(OAIHttpRequestWorker *worker);
    void accessSaveCallback(OAIHttpRequestWorker *worker);
    void accessSetAcldbCallback(OAIHttpRequestWorker *worker);
    void accessSetEnabledCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accessAddSignal(QString summary);
    void accessDelSignal(QString summary);
    void accessGetAcldbSignal(QString summary);
    void accessGetAdmindirSignal(QString summary);
    void accessGetAdminuserSignal(QString summary);
    void accessGetEnabledSignal(QString summary);
    void accessListSignal(QList<OAIAccessEntry> summary);
    void accessLoadSignal(QList<QString> summary);
    void accessSaveSignal(QList<QString> summary);
    void accessSetAcldbSignal(QString summary);
    void accessSetEnabledSignal(QString summary);


    void accessAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessDelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessGetAcldbSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessGetAdmindirSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessGetAdminuserSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessGetEnabledSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessEntry> summary);
    void accessLoadSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void accessSaveSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void accessSetAcldbSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void accessSetEnabledSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use accessAddSignalError() instead")
    void accessAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessDelSignalError() instead")
    void accessDelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessDelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetAcldbSignalError() instead")
    void accessGetAcldbSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetAcldbSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetAdmindirSignalError() instead")
    void accessGetAdmindirSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetAdmindirSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetAdminuserSignalError() instead")
    void accessGetAdminuserSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetAdminuserSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetEnabledSignalError() instead")
    void accessGetEnabledSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetEnabledSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessListSignalError() instead")
    void accessListSignalE(QList<OAIAccessEntry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessListSignalError(QList<OAIAccessEntry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessLoadSignalError() instead")
    void accessLoadSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessLoadSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessSaveSignalError() instead")
    void accessSaveSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessSaveSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessSetAcldbSignalError() instead")
    void accessSetAcldbSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessSetAcldbSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessSetEnabledSignalError() instead")
    void accessSetEnabledSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessSetEnabledSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accessAddSignalErrorFull() instead")
    void accessAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessDelSignalErrorFull() instead")
    void accessDelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessDelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetAcldbSignalErrorFull() instead")
    void accessGetAcldbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetAcldbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetAdmindirSignalErrorFull() instead")
    void accessGetAdmindirSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetAdmindirSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetAdminuserSignalErrorFull() instead")
    void accessGetAdminuserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetAdminuserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessGetEnabledSignalErrorFull() instead")
    void accessGetEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessGetEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessListSignalErrorFull() instead")
    void accessListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessLoadSignalErrorFull() instead")
    void accessLoadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessLoadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessSaveSignalErrorFull() instead")
    void accessSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessSetAcldbSignalErrorFull() instead")
    void accessSetAcldbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessSetAcldbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessSetEnabledSignalErrorFull() instead")
    void accessSetEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessSetEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
