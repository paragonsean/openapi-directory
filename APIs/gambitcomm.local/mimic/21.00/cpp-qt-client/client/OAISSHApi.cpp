/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSHApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISSHApi::OAISSHApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISSHApi::~OAISSHApi() {
}

void OAISSHApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://gambitcomm.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://127.0.0.1"),
    "Gambit Communications MIMIC simulator REST API",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("protocolSshGetArgs", defaultConf);
    _serverIndices.insert("protocolSshGetArgs", 0);
    _serverConfigs.insert("protocolSshGetConfig", defaultConf);
    _serverIndices.insert("protocolSshGetConfig", 0);
    _serverConfigs.insert("protocolSshGetStatistics", defaultConf);
    _serverIndices.insert("protocolSshGetStatistics", 0);
    _serverConfigs.insert("protocolSshGetStatsHdr", defaultConf);
    _serverIndices.insert("protocolSshGetStatsHdr", 0);
    _serverConfigs.insert("protocolSshGetTrace", defaultConf);
    _serverIndices.insert("protocolSshGetTrace", 0);
    _serverConfigs.insert("protocolSshIpaliasDisable", defaultConf);
    _serverIndices.insert("protocolSshIpaliasDisable", 0);
    _serverConfigs.insert("protocolSshIpaliasEnable", defaultConf);
    _serverIndices.insert("protocolSshIpaliasEnable", 0);
    _serverConfigs.insert("protocolSshIpaliasIsenabled", defaultConf);
    _serverIndices.insert("protocolSshIpaliasIsenabled", 0);
    _serverConfigs.insert("protocolSshIpaliasList", defaultConf);
    _serverIndices.insert("protocolSshIpaliasList", 0);
    _serverConfigs.insert("protocolSshSetConfig", defaultConf);
    _serverIndices.insert("protocolSshSetConfig", 0);
    _serverConfigs.insert("protocolSshSetTrace", defaultConf);
    _serverIndices.insert("protocolSshSetTrace", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISSHApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISSHApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISSHApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISSHApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISSHApi::setUsername(const QString &username) {
    _username = username;
}

void OAISSHApi::setPassword(const QString &password) {
    _password = password;
}


void OAISSHApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISSHApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISSHApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISSHApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISSHApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISSHApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISSHApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISSHApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISSHApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISSHApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISSHApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISSHApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISSHApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISSHApi::protocolSshGetArgs(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolSshGetArgs"][_serverIndices.value("protocolSshGetArgs")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/get/args");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshGetArgsCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshGetArgsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshGetArgsSignal(output);
        Q_EMIT protocolSshGetArgsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshGetArgsSignalE(output, error_type, error_str);
        Q_EMIT protocolSshGetArgsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshGetArgsSignalError(output, error_type, error_str);
        Q_EMIT protocolSshGetArgsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshGetConfig(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolSshGetConfig"][_serverIndices.value("protocolSshGetConfig")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/get/config");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshGetConfigCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshGetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfigSSH output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshGetConfigSignal(output);
        Q_EMIT protocolSshGetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshGetConfigSignalE(output, error_type, error_str);
        Q_EMIT protocolSshGetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshGetConfigSignalError(output, error_type, error_str);
        Q_EMIT protocolSshGetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshGetStatistics(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolSshGetStatistics"][_serverIndices.value("protocolSshGetStatistics")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/get/statistics");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshGetStatisticsCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshGetStatisticsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshGetStatisticsSignal(output);
        Q_EMIT protocolSshGetStatisticsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshGetStatisticsSignalE(output, error_type, error_str);
        Q_EMIT protocolSshGetStatisticsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshGetStatisticsSignalError(output, error_type, error_str);
        Q_EMIT protocolSshGetStatisticsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshGetStatsHdr() {
    QString fullPath = QString(_serverConfigs["protocolSshGetStatsHdr"][_serverIndices.value("protocolSshGetStatsHdr")].URL()+"/mimic/protocol/msg/ssh/get/stats_hdr");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshGetStatsHdrCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshGetStatsHdrCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshGetStatsHdrSignal(output);
        Q_EMIT protocolSshGetStatsHdrSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshGetStatsHdrSignalE(output, error_type, error_str);
        Q_EMIT protocolSshGetStatsHdrSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshGetStatsHdrSignalError(output, error_type, error_str);
        Q_EMIT protocolSshGetStatsHdrSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshGetTrace(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolSshGetTrace"][_serverIndices.value("protocolSshGetTrace")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/get/trace");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshGetTraceCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshGetTraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfigSSH output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshGetTraceSignal(output);
        Q_EMIT protocolSshGetTraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshGetTraceSignalE(output, error_type, error_str);
        Q_EMIT protocolSshGetTraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshGetTraceSignalError(output, error_type, error_str);
        Q_EMIT protocolSshGetTraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshIpaliasDisable(const qint32 &agent_num, const QString &ipaddress, const qint32 &port) {
    QString fullPath = QString(_serverConfigs["protocolSshIpaliasDisable"][_serverIndices.value("protocolSshIpaliasDisable")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/disable/{ipaddress}/{port}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString ipaddressPathParam("{");
        ipaddressPathParam.append("ipaddress").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ipaddress", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ipaddress"+pathSuffix : pathPrefix;
        fullPath.replace(ipaddressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ipaddress)));
    }
    
    {
        QString portPathParam("{");
        portPathParam.append("port").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "port", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"port"+pathSuffix : pathPrefix;
        fullPath.replace(portPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(port)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshIpaliasDisableCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshIpaliasDisableCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshIpaliasDisableSignal(output);
        Q_EMIT protocolSshIpaliasDisableSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshIpaliasDisableSignalE(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasDisableSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshIpaliasDisableSignalError(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasDisableSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshIpaliasEnable(const qint32 &agent_num, const QString &ipaddress, const qint32 &port) {
    QString fullPath = QString(_serverConfigs["protocolSshIpaliasEnable"][_serverIndices.value("protocolSshIpaliasEnable")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/enable/{ipaddress}/{port}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString ipaddressPathParam("{");
        ipaddressPathParam.append("ipaddress").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ipaddress", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ipaddress"+pathSuffix : pathPrefix;
        fullPath.replace(ipaddressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ipaddress)));
    }
    
    {
        QString portPathParam("{");
        portPathParam.append("port").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "port", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"port"+pathSuffix : pathPrefix;
        fullPath.replace(portPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(port)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshIpaliasEnableCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshIpaliasEnableCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshIpaliasEnableSignal(output);
        Q_EMIT protocolSshIpaliasEnableSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshIpaliasEnableSignalE(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasEnableSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshIpaliasEnableSignalError(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasEnableSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshIpaliasIsenabled(const qint32 &agent_num, const QString &ipaddress, const qint32 &port) {
    QString fullPath = QString(_serverConfigs["protocolSshIpaliasIsenabled"][_serverIndices.value("protocolSshIpaliasIsenabled")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/isenabled/{ipaddress}/{port}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString ipaddressPathParam("{");
        ipaddressPathParam.append("ipaddress").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ipaddress", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ipaddress"+pathSuffix : pathPrefix;
        fullPath.replace(ipaddressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(ipaddress)));
    }
    
    {
        QString portPathParam("{");
        portPathParam.append("port").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "port", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"port"+pathSuffix : pathPrefix;
        fullPath.replace(portPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(port)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshIpaliasIsenabledCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshIpaliasIsenabledCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshIpaliasIsenabledSignal(output);
        Q_EMIT protocolSshIpaliasIsenabledSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshIpaliasIsenabledSignalE(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasIsenabledSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshIpaliasIsenabledSignalError(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasIsenabledSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshIpaliasList(const qint32 &agent_num) {
    QString fullPath = QString(_serverConfigs["protocolSshIpaliasList"][_serverIndices.value("protocolSshIpaliasList")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/list");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshIpaliasListCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshIpaliasListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIIPAlias> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIIPAlias val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshIpaliasListSignal(output);
        Q_EMIT protocolSshIpaliasListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshIpaliasListSignalE(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshIpaliasListSignalError(output, error_type, error_str);
        Q_EMIT protocolSshIpaliasListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshSetConfig(const qint32 &agent_num, const QString &argument, const QString &value) {
    QString fullPath = QString(_serverConfigs["protocolSshSetConfig"][_serverIndices.value("protocolSshSetConfig")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/set/config/{argument}/{value}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString argumentPathParam("{");
        argumentPathParam.append("argument").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "argument", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"argument"+pathSuffix : pathPrefix;
        fullPath.replace(argumentPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(argument)));
    }
    
    {
        QString valuePathParam("{");
        valuePathParam.append("value").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "value", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"value"+pathSuffix : pathPrefix;
        fullPath.replace(valuePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(value)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshSetConfigCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshSetConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshSetConfigSignal(output);
        Q_EMIT protocolSshSetConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshSetConfigSignalE(output, error_type, error_str);
        Q_EMIT protocolSshSetConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshSetConfigSignalError(output, error_type, error_str);
        Q_EMIT protocolSshSetConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::protocolSshSetTrace(const qint32 &agent_num, const QString &enable_or_not) {
    QString fullPath = QString(_serverConfigs["protocolSshSetTrace"][_serverIndices.value("protocolSshSetTrace")].URL()+"/mimic/agent/{agentNum}/protocol/msg/ssh/set/trace/{enableOrNot}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString agent_numPathParam("{");
        agent_numPathParam.append("agentNum").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "agentNum", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"agentNum"+pathSuffix : pathPrefix;
        fullPath.replace(agent_numPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(agent_num)));
    }
    
    {
        QString enable_or_notPathParam("{");
        enable_or_notPathParam.append("enableOrNot").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enableOrNot", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enableOrNot"+pathSuffix : pathPrefix;
        fullPath.replace(enable_or_notPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_or_not)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISSHApi::protocolSshSetTraceCallback);
    connect(this, &OAISSHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISSHApi::protocolSshSetTraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT protocolSshSetTraceSignal(output);
        Q_EMIT protocolSshSetTraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT protocolSshSetTraceSignalE(output, error_type, error_str);
        Q_EMIT protocolSshSetTraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT protocolSshSetTraceSignalError(output, error_type, error_str);
        Q_EMIT protocolSshSetTraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISSHApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
