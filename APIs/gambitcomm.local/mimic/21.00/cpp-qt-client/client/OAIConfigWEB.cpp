/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigWEB.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigWEB::OAIConfigWEB(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigWEB::OAIConfigWEB() {
    this->initializeModel();
}

OAIConfigWEB::~OAIConfigWEB() {}

void OAIConfigWEB::initializeModel() {

    m_is_persistent_connections_isSet = false;
    m_is_persistent_connections_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_wsdl_isSet = false;
    m_wsdl_isValid = false;
}

void OAIConfigWEB::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigWEB::fromJsonObject(QJsonObject json) {

    m_is_persistent_connections_isValid = ::OpenAPI::fromJsonValue(m_is_persistent_connections, json[QString("is_persistent_connections")]);
    m_is_persistent_connections_isSet = !json[QString("is_persistent_connections")].isNull() && m_is_persistent_connections_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_wsdl_isValid = ::OpenAPI::fromJsonValue(m_wsdl, json[QString("wsdl")]);
    m_wsdl_isSet = !json[QString("wsdl")].isNull() && m_wsdl_isValid;
}

QString OAIConfigWEB::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigWEB::asJsonObject() const {
    QJsonObject obj;
    if (m_is_persistent_connections_isSet) {
        obj.insert(QString("is_persistent_connections"), ::OpenAPI::toJsonValue(m_is_persistent_connections));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_wsdl_isSet) {
        obj.insert(QString("wsdl"), ::OpenAPI::toJsonValue(m_wsdl));
    }
    return obj;
}

qint32 OAIConfigWEB::getIsPersistentConnections() const {
    return m_is_persistent_connections;
}
void OAIConfigWEB::setIsPersistentConnections(const qint32 &is_persistent_connections) {
    m_is_persistent_connections = is_persistent_connections;
    m_is_persistent_connections_isSet = true;
}

bool OAIConfigWEB::is_is_persistent_connections_Set() const{
    return m_is_persistent_connections_isSet;
}

bool OAIConfigWEB::is_is_persistent_connections_Valid() const{
    return m_is_persistent_connections_isValid;
}

QString OAIConfigWEB::getPassword() const {
    return m_password;
}
void OAIConfigWEB::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIConfigWEB::is_password_Set() const{
    return m_password_isSet;
}

bool OAIConfigWEB::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIConfigWEB::getPort() const {
    return m_port;
}
void OAIConfigWEB::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIConfigWEB::is_port_Set() const{
    return m_port_isSet;
}

bool OAIConfigWEB::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIConfigWEB::getRule() const {
    return m_rule;
}
void OAIConfigWEB::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIConfigWEB::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIConfigWEB::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAIConfigWEB::getUsername() const {
    return m_username;
}
void OAIConfigWEB::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIConfigWEB::is_username_Set() const{
    return m_username_isSet;
}

bool OAIConfigWEB::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIConfigWEB::getWsdl() const {
    return m_wsdl;
}
void OAIConfigWEB::setWsdl(const QString &wsdl) {
    m_wsdl = wsdl;
    m_wsdl_isSet = true;
}

bool OAIConfigWEB::is_wsdl_Set() const{
    return m_wsdl_isSet;
}

bool OAIConfigWEB::is_wsdl_Valid() const{
    return m_wsdl_isValid;
}

bool OAIConfigWEB::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_persistent_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsdl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigWEB::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
