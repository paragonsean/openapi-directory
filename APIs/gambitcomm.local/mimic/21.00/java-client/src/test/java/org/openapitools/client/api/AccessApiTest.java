/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessApi
 */
@Disabled
public class AccessApiTest {

    private final AccessApi api = new AccessApi();

    /**
     * Adds/Overwrites the user entry in the access control database.
     *
     * Adds/Overwrites the user entry in the access control database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessAddTest() throws ApiException {
        String user = null;
        String agents = null;
        String mask = null;
        String response = api.accessAdd(user, agents, mask);
        // TODO: test validations
    }

    /**
     * Clears a users entry from access control database.
     *
     * Using &#39;*&#39; for user clears all the users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessDelTest() throws ApiException {
        String user = null;
        String response = api.accessDel(user);
        // TODO: test validations
    }

    /**
     * Returns the current access control database in use.
     *
     * If nothing is specified then this returns \&quot;\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessGetAcldbTest() throws ApiException {
        String response = api.accessGetAcldb();
        // TODO: test validations
    }

    /**
     * Returns the current admin directory.
     *
     * If nothing is specified in admin/settings.cfg then returns \&quot;\&quot;. If no admin directory is specified then the shared area will be used where needed (e.g. for persistent info, access control data files etc. )
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessGetAdmindirTest() throws ApiException {
        String response = api.accessGetAdmindir();
        // TODO: test validations
    }

    /**
     * Returns the current administrator.
     *
     * If nothing is specified in admin/settings.cfg then returns \&quot;\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessGetAdminuserTest() throws ApiException {
        String response = api.accessGetAdminuser();
        // TODO: test validations
    }

    /**
     * Returns the state of access control checking.
     *
     * 0 indicates that it is disabled, 1 indicates it is enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessGetEnabledTest() throws ApiException {
        String response = api.accessGetEnabled();
        // TODO: test validations
    }

    /**
     * Returns an array of entries.
     *
     * Each entry consists of user, agents (in minimal range representation) and access mask (not used currently).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessListTest() throws ApiException {
        List<AccessEntry> response = api.accessList();
        // TODO: test validations
    }

    /**
     * Loads the specified file for access control data.
     *
     * If filename is not specified then the currently set &#39;acldb&#39; parameter is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessLoadTest() throws ApiException {
        String filename = null;
        List<String> response = api.accessLoad(filename);
        // TODO: test validations
    }

    /**
     * Saves current access control data in specified file.
     *
     * If filename is not specified then the currently set &#39;acldb&#39; parameter is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessSaveTest() throws ApiException {
        String filename = null;
        List<String> response = api.accessSave(filename);
        // TODO: test validations
    }

    /**
     * Allows setting the name of the current access control database.
     *
     * This will be used for subsequent load and save operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessSetAcldbTest() throws ApiException {
        String databaseName = null;
        String response = api.accessSetAcldb(databaseName);
        // TODO: test validations
    }

    /**
     * Allows the user to enable/disable the access control check.
     *
     * 0 indicates disabled, 1 indicates enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessSetEnabledTest() throws ApiException {
        String enabledOrNot = null;
        String response = api.accessSetEnabled(enabledOrNot);
        // TODO: test validations
    }

}
