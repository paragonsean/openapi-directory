/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigMQTT;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MqttApi
 */
@Disabled
public class MqttApiTest {

    private final MqttApi api = new MqttApi();

    /**
     * Show the agent&#39;s MQTT TCP connection state
     *
     * 0 - stopped, 2 - disconnected, 3 - connecting, 4 - connected, 5 - waiting for CONNACK, 6 - waiting for SUBACK, 7 - CONNACK received, in steady state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientGetProtstateTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolMqttClientGetProtstate(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s MQTT state
     *
     * 0 means stopped, 1 means running
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientGetStateTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolMqttClientGetState(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s current messages&#39; cardinality
     *
     * 0 or more
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientMessageCardTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolMqttClientMessageCard(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s message attributes
     *
     * Attribute can be topic, interval, count, sent , pre, post, properties(list of PUBLISH properties), properties.i (i-th PUBLISH property), properties.PROP-NAME (PUBLISH property with name PROP-NAME)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientMessageGetTest() throws ApiException {
        Integer agentNum = null;
        Integer msgNum = null;
        String attr = null;
        List<String> response = api.protocolMqttClientMessageGet(agentNum, msgNum, attr);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s message attributes
     *
     * Attribute can not be sent or properties . Use set/{msgNum}/count/{value} together with get/{msgNum}/count to throttle the outgoing MQTT message to the broker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientMessageSetTest() throws ApiException {
        Integer agentNum = null;
        Integer msgNum = null;
        String attr = null;
        String value = null;
        List<String> response = api.protocolMqttClientMessageSet(agentNum, msgNum, attr, value);
        // TODO: test validations
    }

    /**
     * Restart receiving messages from a subcription of the agent
     *
     * Restarts a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientResubscribeTest() throws ApiException {
        Integer agentNum = null;
        Integer subNum = null;
        String response = api.protocolMqttClientResubscribe(agentNum, subNum);
        // TODO: test validations
    }

    /**
     * Abort agent&#39;s MQTT TCP session without sending DISCONNECT command
     *
     * Abort a connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientRuntimeAbortTest() throws ApiException {
        Integer agentNum = null;
        List<String> response = api.protocolMqttClientRuntimeAbort(agentNum);
        // TODO: test validations
    }

    /**
     * Start agent&#39;s MQTT TCP session
     *
     * Start a connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientRuntimeConnectTest() throws ApiException {
        Integer agentNum = null;
        List<String> response = api.protocolMqttClientRuntimeConnect(agentNum);
        // TODO: test validations
    }

    /**
     * Disconnect agent&#39;s MQTT TCP session by sending DISCONNECT command
     *
     * Graceful disconnect
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientRuntimeDisconnectTest() throws ApiException {
        Integer agentNum = null;
        List<String> response = api.protocolMqttClientRuntimeDisconnect(agentNum);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT TCP connection target broker
     *
     * Broker IP address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetBrokerTest() throws ApiException {
        Integer agentNum = null;
        String brokerAddr = null;
        List<Integer> response = api.protocolMqttClientSetBroker(agentNum, brokerAddr);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT session
     *
     * 1 for clean session , 0 not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetCleansessionTest() throws ApiException {
        Integer agentNum = null;
        Integer cleanOrNot = null;
        List<Integer> response = api.protocolMqttClientSetCleansession(agentNum, cleanOrNot);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT client ID
     *
     * MQTT client ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetClientidTest() throws ApiException {
        Integer agentNum = null;
        String clientID = null;
        List<Integer> response = api.protocolMqttClientSetClientid(agentNum, clientID);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT TCP keepalive
     *
     * Keep alive the TCP connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetKeepaliveTest() throws ApiException {
        Integer agentNum = null;
        Integer aliveTime = null;
        List<Integer> response = api.protocolMqttClientSetKeepalive(agentNum, aliveTime);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT disconnection action
     *
     * Action to take when MQTT session is disconnected
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetOnDisconnectTest() throws ApiException {
        Integer agentNum = null;
        String action = null;
        List<Integer> response = api.protocolMqttClientSetOnDisconnect(agentNum, action);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT client password
     *
     * Client password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetPasswordTest() throws ApiException {
        Integer agentNum = null;
        String password = null;
        List<Integer> response = api.protocolMqttClientSetPassword(agentNum, password);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT TCP connection target port
     *
     * target TCP port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetPortTest() throws ApiException {
        Integer agentNum = null;
        String port = null;
        List<Integer> response = api.protocolMqttClientSetPort(agentNum, port);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT client username
     *
     * Client username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetUsernameTest() throws ApiException {
        Integer agentNum = null;
        String username = null;
        List<Integer> response = api.protocolMqttClientSetUsername(agentNum, username);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT client&#39;s will
     *
     * Will message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetWillmsgTest() throws ApiException {
        Integer agentNum = null;
        String msg = null;
        List<Integer> response = api.protocolMqttClientSetWillmsg(agentNum, msg);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT will message&#39;s QOS field
     *
     * QOS field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetWillqosTest() throws ApiException {
        Integer agentNum = null;
        String qos = null;
        List<Integer> response = api.protocolMqttClientSetWillqos(agentNum, qos);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT retained will
     *
     * Retaining will
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetWillretainTest() throws ApiException {
        Integer agentNum = null;
        String retain = null;
        List<Integer> response = api.protocolMqttClientSetWillretain(agentNum, retain);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT client will&#39;s topic
     *
     * Will topic for the will message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSetWilltopicTest() throws ApiException {
        Integer agentNum = null;
        String topic = null;
        List<Integer> response = api.protocolMqttClientSetWilltopic(agentNum, topic);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s current subscriptions&#39; cardinality
     *
     * 0 or more
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSubscribeCardTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolMqttClientSubscribeCard(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s subscription attributes
     *
     * Attribute can be topic, properties(list of SUBSCRIBE properties), properties.i (i-th SUBSCRIBE property), properties.PROP-NAME (SUBSCRIBE property with name PROP-NAME)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSubscribeGetTest() throws ApiException {
        Integer agentNum = null;
        Integer subNum = null;
        String attr = null;
        List<String> response = api.protocolMqttClientSubscribeGet(agentNum, subNum, attr);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s subscribe attributes
     *
     * Attribute can not be properties .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientSubscribeSetTest() throws ApiException {
        Integer agentNum = null;
        Integer subNum = null;
        String attr = null;
        String value = null;
        List<String> response = api.protocolMqttClientSubscribeSet(agentNum, subNum, attr, value);
        // TODO: test validations
    }

    /**
     * Stops receiving messages from a subcription of the agent
     *
     * Stops a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttClientUnsubscribeTest() throws ApiException {
        Integer agentNum = null;
        Integer subNum = null;
        String response = api.protocolMqttClientUnsubscribe(agentNum, subNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s MQTT argument structure
     *
     * Agent&#39;s MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttGetArgsTest() throws ApiException {
        Integer agentNum = null;
        Object response = api.protocolMqttGetArgs(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s MQTT configuration
     *
     * Agent&#39;s MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttGetConfigTest() throws ApiException {
        Integer agentNum = null;
        ConfigMQTT response = api.protocolMqttGetConfig(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s MQTT statistics
     *
     * Statistics of fields indicated in the headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttGetStatisticsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolMqttGetStatistics(agentNum);
        // TODO: test validations
    }

    /**
     * Show the MQTT statistics headers
     *
     * The headers of statistics fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttGetStatsHdrTest() throws ApiException {
        List<String> response = api.protocolMqttGetStatsHdr();
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s MQTT traffic tracing
     *
     * Trace 1 means enabled, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttGetTraceTest() throws ApiException {
        Integer agentNum = null;
        ConfigMQTT response = api.protocolMqttGetTrace(agentNum);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT configuration
     *
     * Agent&#39;s MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttSetConfigTest() throws ApiException {
        Integer agentNum = null;
        String argument = null;
        String value = null;
        String response = api.protocolMqttSetConfig(agentNum, argument, value);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s MQTT traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolMqttSetTraceTest() throws ApiException {
        Integer agentNum = null;
        String enableOrNot = null;
        String response = api.protocolMqttSetTrace(agentNum, enableOrNot);
        // TODO: test validations
    }

}
