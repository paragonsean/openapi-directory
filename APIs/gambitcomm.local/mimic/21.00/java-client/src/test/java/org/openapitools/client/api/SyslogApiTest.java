/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigSYSLOG;
import org.openapitools.client.model.SyslogMsg;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SyslogApi
 */
@Disabled
public class SyslogApiTest {

    private final SyslogApi api = new SyslogApi();

    /**
     * Show the agent&#39;s SYSLOG argument structure
     *
     * Agent&#39;s SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogGetArgsTest() throws ApiException {
        Integer agentNum = null;
        Object response = api.protocolSyslogGetArgs(agentNum);
        // TODO: test validations
    }

    /**
     * Show the outgoing message&#39;s attributes
     *
     * Attribute can be server , sequence , separator , hostname , timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogGetAttrTest() throws ApiException {
        Integer agentNum = null;
        String attr = null;
        String response = api.protocolSyslogGetAttr(agentNum, attr);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s SYSLOG configuration
     *
     * Agent&#39;s SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogGetConfigTest() throws ApiException {
        Integer agentNum = null;
        ConfigSYSLOG response = api.protocolSyslogGetConfig(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s SYSLOG statistics
     *
     * Statistics of fields indicated in the headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogGetStatisticsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolSyslogGetStatistics(agentNum);
        // TODO: test validations
    }

    /**
     * Show the SYSLOG statistics headers
     *
     * The headers of statistics fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogGetStatsHdrTest() throws ApiException {
        List<String> response = api.protocolSyslogGetStatsHdr();
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s SYSLOG traffic tracing
     *
     * Trace 1 means enabled, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogGetTraceTest() throws ApiException {
        Integer agentNum = null;
        ConfigSYSLOG response = api.protocolSyslogGetTrace(agentNum);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s SYSLOG traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogSendTest() throws ApiException {
        Integer agentNum = null;
        Integer pri = null;
        SyslogMsg syslogMsg = null;
        String response = api.protocolSyslogSend(agentNum, pri, syslogMsg);
        // TODO: test validations
    }

    /**
     * Set the outgoing message&#39;s attributes
     *
     * Attribute can be server , sequence , separator , hostname , timestamp
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogSetAttrTest() throws ApiException {
        Integer agentNum = null;
        String attr = null;
        String value = null;
        String response = api.protocolSyslogSetAttr(agentNum, attr, value);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s SYSLOG configuration
     *
     * Agent&#39;s SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogSetConfigTest() throws ApiException {
        Integer agentNum = null;
        String argument = null;
        String value = null;
        String response = api.protocolSyslogSetConfig(agentNum, argument, value);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s SYSLOG traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolSyslogSetTraceTest() throws ApiException {
        Integer agentNum = null;
        String enableOrNot = null;
        String response = api.protocolSyslogSetTrace(agentNum, enableOrNot);
        // TODO: test validations
    }

}
