/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigTFTP;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TftpApi
 */
@Disabled
public class TftpApiTest {

    private final TftpApi api = new TftpApi();

    /**
     * Show the agent&#39;s TFTP argument structure
     *
     * Agent&#39;s TFTP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpGetArgsTest() throws ApiException {
        Integer agentNum = null;
        Object response = api.protocolTftpGetArgs(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TFTP configuration
     *
     * Agent&#39;s TFTP configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpGetConfigTest() throws ApiException {
        Integer agentNum = null;
        ConfigTFTP response = api.protocolTftpGetConfig(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TFTP statistics
     *
     * Statistics of fields indicated in the headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpGetStatisticsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolTftpGetStatistics(agentNum);
        // TODO: test validations
    }

    /**
     * Show the TFTP statistics headers
     *
     * The headers of statistics fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpGetStatsHdrTest() throws ApiException {
        List<String> response = api.protocolTftpGetStatsHdr();
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TFTP traffic tracing
     *
     * Trace 1 means enabled, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpGetTraceTest() throws ApiException {
        Integer agentNum = null;
        ConfigTFTP response = api.protocolTftpGetTrace(agentNum);
        // TODO: test validations
    }

    /**
     * Show a parameter of a TFTP sesssion
     *
     * Parameter is server , port , or dstfile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionGetParameterTest() throws ApiException {
        Integer agentNum = null;
        String sessionID = null;
        String parameter = null;
        String response = api.protocolTftpSessionGetParameter(agentNum, sessionID, parameter);
        // TODO: test validations
    }

    /**
     * Create a read session to download srcfile from server
     *
     * Session ID is returned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionReadTest() throws ApiException {
        Integer agentNum = null;
        String srcfile = null;
        List<Integer> response = api.protocolTftpSessionRead(agentNum, srcfile);
        // TODO: test validations
    }

    /**
     * Set a parameter of a TFTP sesssion
     *
     * Parameter is server , port , or dstfile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionSetParameterTest() throws ApiException {
        Integer agentNum = null;
        String sessionID = null;
        String parameter = null;
        String value = null;
        String response = api.protocolTftpSessionSetParameter(agentNum, sessionID, parameter, value);
        // TODO: test validations
    }

    /**
     * Start a TFTP sesssion
     *
     * Start uploading or downloading the file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionStartTest() throws ApiException {
        Integer agentNum = null;
        String sessionID = null;
        String response = api.protocolTftpSessionStart(agentNum, sessionID);
        // TODO: test validations
    }

    /**
     * Check a TFTP sesssion&#39;s status
     *
     * Status includes running state, bytes transfered, and time elapsed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionStatusTest() throws ApiException {
        Integer agentNum = null;
        String sessionID = null;
        String response = api.protocolTftpSessionStatus(agentNum, sessionID);
        // TODO: test validations
    }

    /**
     * Stop a TFTP sesssion
     *
     * Stop uploading or downloading the file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionStopTest() throws ApiException {
        Integer agentNum = null;
        String sessionID = null;
        String response = api.protocolTftpSessionStop(agentNum, sessionID);
        // TODO: test validations
    }

    /**
     * Create a read session to upload srcfile to server
     *
     * Session ID is returned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSessionWriteTest() throws ApiException {
        Integer agentNum = null;
        String srcfile = null;
        List<Integer> response = api.protocolTftpSessionWrite(agentNum, srcfile);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s TFTP configuration
     *
     * Agent&#39;s TFTP configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSetConfigTest() throws ApiException {
        Integer agentNum = null;
        String argument = null;
        String value = null;
        String response = api.protocolTftpSetConfig(agentNum, argument, value);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s TFTP traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTftpSetTraceTest() throws ApiException {
        Integer agentNum = null;
        String enableOrNot = null;
        String response = api.protocolTftpSetTrace(agentNum, enableOrNot);
        // TODO: test validations
    }

}
