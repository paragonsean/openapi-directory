/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigWEB;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebApi
 */
@Disabled
public class WebApiTest {

    private final WebApi api = new WebApi();

    /**
     * Show the agent&#39;s WEB argument structure
     *
     * Agent&#39;s WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebGetArgsTest() throws ApiException {
        Integer agentNum = null;
        Object response = api.protocolWebGetArgs(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s WEB configuration
     *
     * Agent&#39;s WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebGetConfigTest() throws ApiException {
        Integer agentNum = null;
        ConfigWEB response = api.protocolWebGetConfig(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s WEB statistics
     *
     * Statistics of fields indicated in the headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebGetStatisticsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolWebGetStatistics(agentNum);
        // TODO: test validations
    }

    /**
     * Show the WEB statistics headers
     *
     * The headers of statistics fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebGetStatsHdrTest() throws ApiException {
        List<String> response = api.protocolWebGetStatsHdr();
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s WEB traffic tracing
     *
     * Trace 1 means enabled, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebGetTraceTest() throws ApiException {
        Integer agentNum = null;
        ConfigWEB response = api.protocolWebGetTrace(agentNum);
        // TODO: test validations
    }

    /**
     * Add the agent&#39;s WEB port
     *
     * Add port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebPortAddTest() throws ApiException {
        Integer agentNum = null;
        Integer port = null;
        String response = api.protocolWebPortAdd(agentNum, port);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s WEB port
     *
     * Check the port. 1 means existing, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebPortExistsTest() throws ApiException {
        Integer agentNum = null;
        Integer port = null;
        List<String> response = api.protocolWebPortExists(agentNum, port);
        // TODO: test validations
    }

    /**
     * Remove the agent&#39;s WEB port
     *
     * Remove port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebPortRemoveTest() throws ApiException {
        Integer agentNum = null;
        Integer port = null;
        String response = api.protocolWebPortRemove(agentNum, port);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s WEB port attribute
     *
     * Set port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebPortSetTest() throws ApiException {
        Integer agentNum = null;
        Integer port = null;
        String protocol = null;
        String version = null;
        String response = api.protocolWebPortSet(agentNum, port, protocol, version);
        // TODO: test validations
    }

    /**
     * Start the agent&#39;s WEB port
     *
     * Start port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebPortStartTest() throws ApiException {
        Integer agentNum = null;
        Integer port = null;
        String response = api.protocolWebPortStart(agentNum, port);
        // TODO: test validations
    }

    /**
     * Stop the agent&#39;s WEB port
     *
     * Stop port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebPortStopTest() throws ApiException {
        Integer agentNum = null;
        Integer port = null;
        String response = api.protocolWebPortStop(agentNum, port);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s WEB configuration
     *
     * Agent&#39;s WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebSetConfigTest() throws ApiException {
        Integer agentNum = null;
        String argument = null;
        String value = null;
        String response = api.protocolWebSetConfig(agentNum, argument, value);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s WEB traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolWebSetTraceTest() throws ApiException {
        Integer agentNum = null;
        String enableOrNot = null;
        String response = api.protocolWebSetTrace(agentNum, enableOrNot);
        // TODO: test validations
    }

}
