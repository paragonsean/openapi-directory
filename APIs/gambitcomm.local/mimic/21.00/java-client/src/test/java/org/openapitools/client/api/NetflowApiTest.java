/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigNETFLOW;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetflowApi
 */
@Disabled
public class NetflowApiTest {

    private final NetflowApi api = new NetflowApi();

    /**
     * Change NETFLOW export attributes
     *
     * Change attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowChangeAttrTest() throws ApiException {
        Integer agentNum = null;
        Integer flowsetUid = null;
        Integer fieldNum = null;
        String attr = null;
        String value = null;
        String response = api.protocolNetflowChangeAttr(agentNum, flowsetUid, fieldNum, attr, value);
        // TODO: test validations
    }

    /**
     * Change NETFLOW data export interval
     *
     * Interval in msec .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowChangeDfsTest() throws ApiException {
        Integer agentNum = null;
        Integer interval = null;
        String response = api.protocolNetflowChangeDfs(agentNum, interval);
        // TODO: test validations
    }

    /**
     * Change NETFLOW template export interval
     *
     * Interval in msec .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowChangeTfsTest() throws ApiException {
        Integer agentNum = null;
        Integer interval = null;
        String response = api.protocolNetflowChangeTfs(agentNum, interval);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s NETFLOW argument structure
     *
     * Agent&#39;s NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowGetArgsTest() throws ApiException {
        Integer agentNum = null;
        Object response = api.protocolNetflowGetArgs(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s NETFLOW configuration
     *
     * Agent&#39;s NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowGetConfigTest() throws ApiException {
        Integer agentNum = null;
        ConfigNETFLOW response = api.protocolNetflowGetConfig(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s NETFLOW statistics
     *
     * Statistics of fields indicated in the headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowGetStatisticsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolNetflowGetStatistics(agentNum);
        // TODO: test validations
    }

    /**
     * Show the NETFLOW statistics headers
     *
     * The headers of statistics fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowGetStatsHdrTest() throws ApiException {
        List<String> response = api.protocolNetflowGetStatsHdr();
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s NETFLOW traffic tracing
     *
     * Trace 1 means enabled, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowGetTraceTest() throws ApiException {
        Integer agentNum = null;
        ConfigNETFLOW response = api.protocolNetflowGetTrace(agentNum);
        // TODO: test validations
    }

    /**
     * Halt NETFLOW traffic
     *
     * Halt NETFLOW traffic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowHaltTest() throws ApiException {
        Integer agentNum = null;
        String response = api.protocolNetflowHalt(agentNum);
        // TODO: test validations
    }

    /**
     * Show list of NETFLOW exports
     *
     * Show list of NETFLOW exports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowListTest() throws ApiException {
        Integer agentNum = null;
        List<Object> response = api.protocolNetflowList(agentNum);
        // TODO: test validations
    }

    /**
     * Reload NETFLOW configuration before resuming traffic
     *
     * Reload NETFLOW configuration before resuming traffic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowReloadTest() throws ApiException {
        Integer agentNum = null;
        String response = api.protocolNetflowReload(agentNum);
        // TODO: test validations
    }

    /**
     * Resuming traffic
     *
     * Resuming traffic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowResumeTest() throws ApiException {
        Integer agentNum = null;
        String response = api.protocolNetflowResume(agentNum);
        // TODO: test validations
    }

    /**
     * Swap NETFLOW collector
     *
     * Allow changing collector without stopping agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowSetCollectorTest() throws ApiException {
        Integer agentNum = null;
        String collectorIP = null;
        String response = api.protocolNetflowSetCollector(agentNum, collectorIP);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s NETFLOW configuration
     *
     * Agent&#39;s NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowSetConfigTest() throws ApiException {
        Integer agentNum = null;
        String argument = null;
        String value = null;
        String response = api.protocolNetflowSetConfig(agentNum, argument, value);
        // TODO: test validations
    }

    /**
     * Swap NETFLOW configuration file
     *
     * Allow reloading the configuration file for an agent without stopping agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowSetFileNameTest() throws ApiException {
        Integer agentNum = null;
        String fileName = null;
        String response = api.protocolNetflowSetFileName(agentNum, fileName);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s NETFLOW traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolNetflowSetTraceTest() throws ApiException {
        Integer agentNum = null;
        String enableOrNot = null;
        String response = api.protocolNetflowSetTrace(agentNum, enableOrNot);
        // TODO: test validations
    }

}
