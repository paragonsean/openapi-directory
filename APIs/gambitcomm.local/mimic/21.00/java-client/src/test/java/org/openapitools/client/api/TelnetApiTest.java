/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigTELNET;
import org.openapitools.client.model.IPAlias;
import org.openapitools.client.model.TelnetUser;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TelnetApi
 */
@Disabled
public class TelnetApiTest {

    private final TelnetApi api = new TelnetApi();

    /**
     * Changes the connection&#39;s current logon.
     *
     * Logon change allows (hidden) commands for a different access mode to run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetConnectionLogonTest() throws ApiException {
        Integer agentNum = null;
        Integer connectionID = null;
        String user = null;
        String password = null;
        List<String> response = api.protocolTelnetConnectionLogon(agentNum, connectionID, user, password);
        // TODO: test validations
    }

    /**
     * Executes the command asynchronously .
     *
     * Equivalent of the command typed in by the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetConnectionRequestTest() throws ApiException {
        Integer agentNum = null;
        Integer connectionID = null;
        String command = null;
        List<String> response = api.protocolTelnetConnectionRequest(agentNum, connectionID, command);
        // TODO: test validations
    }

    /**
     * Triggers the asynchronous signal event with the specified signal name
     *
     * Signal name is either connect or idle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetConnectionSignalTest() throws ApiException {
        Integer agentNum = null;
        Integer connectionID = null;
        String signalName = null;
        List<String> response = api.protocolTelnetConnectionSignal(agentNum, connectionID, signalName);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET argument structure
     *
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetGetArgsTest() throws ApiException {
        Integer agentNum = null;
        Object response = api.protocolTelnetGetArgs(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET configuration
     *
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetGetConfigTest() throws ApiException {
        Integer agentNum = null;
        ConfigTELNET response = api.protocolTelnetGetConfig(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET statistics
     *
     * Statistics of fields indicated in the headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetGetStatisticsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolTelnetGetStatistics(agentNum);
        // TODO: test validations
    }

    /**
     * Show the TELNET statistics headers
     *
     * The headers of statistics fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetGetStatsHdrTest() throws ApiException {
        List<String> response = api.protocolTelnetGetStatsHdr();
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET traffic tracing
     *
     * Trace 1 means enabled, 0 means not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetGetTraceTest() throws ApiException {
        Integer agentNum = null;
        ConfigTELNET response = api.protocolTelnetGetTrace(agentNum);
        // TODO: test validations
    }

    /**
     * Disable individual IP aliases on the agent and the simulator host
     *
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetIpaliasDisableTest() throws ApiException {
        Integer agentNum = null;
        String ipaddress = null;
        Integer port = null;
        String response = api.protocolTelnetIpaliasDisable(agentNum, ipaddress, port);
        // TODO: test validations
    }

    /**
     * Enable individual IP aliases on the agent and the simulator host
     *
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetIpaliasEnableTest() throws ApiException {
        Integer agentNum = null;
        String ipaddress = null;
        Integer port = null;
        String response = api.protocolTelnetIpaliasEnable(agentNum, ipaddress, port);
        // TODO: test validations
    }

    /**
     * Check individual IP aliases on the agent and the simulator host
     *
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetIpaliasIsenabledTest() throws ApiException {
        Integer agentNum = null;
        String ipaddress = null;
        Integer port = null;
        String response = api.protocolTelnetIpaliasIsenabled(agentNum, ipaddress, port);
        // TODO: test validations
    }

    /**
     * List all IP aliases on the agent and the simulator host
     *
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetIpaliasListTest() throws ApiException {
        Integer agentNum = null;
        List<IPAlias> response = api.protocolTelnetIpaliasList(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET connections
     *
     * IDs of all connected connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetServerGetConnectionsTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolTelnetServerGetConnections(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET keymap file name
     *
     * Keymap file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetServerGetKeymapTest() throws ApiException {
        Integer agentNum = null;
        List<String> response = api.protocolTelnetServerGetKeymap(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET rules db file name
     *
     * Rules db file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetServerGetRulesdbTest() throws ApiException {
        Integer agentNum = null;
        List<String> response = api.protocolTelnetServerGetRulesdb(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET server state
     *
     * Return 1 means accepting connections, 0 not
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetServerGetStateTest() throws ApiException {
        Integer agentNum = null;
        List<Integer> response = api.protocolTelnetServerGetState(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET user db file name
     *
     * User db file name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetServerGetUserdbTest() throws ApiException {
        Integer agentNum = null;
        List<String> response = api.protocolTelnetServerGetUserdb(agentNum);
        // TODO: test validations
    }

    /**
     * Show the agent&#39;s TELNET users
     *
     * List of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetServerGetUsersTest() throws ApiException {
        Integer agentNum = null;
        List<TelnetUser> response = api.protocolTelnetServerGetUsers(agentNum);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s TELNET configuration
     *
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetSetConfigTest() throws ApiException {
        Integer agentNum = null;
        String argument = null;
        String value = null;
        String response = api.protocolTelnetSetConfig(agentNum, argument, value);
        // TODO: test validations
    }

    /**
     * Set the agent&#39;s TELNET traffic tracing
     *
     * 1 to enable, 0 to disable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protocolTelnetSetTraceTest() throws ApiException {
        Integer agentNum = null;
        String enableOrNot = null;
        String response = api.protocolTelnetSetTrace(agentNum, enableOrNot);
        // TODO: test validations
    }

}
