/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigTELNET
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:08.940356-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigTELNET {
  public static final String SERIALIZED_NAME_KEYMAP = "keymap";
  @SerializedName(SERIALIZED_NAME_KEYMAP)
  private String keymap;

  public static final String SERIALIZED_NAME_PAGING_PROMPT = "paging_prompt";
  @SerializedName(SERIALIZED_NAME_PAGING_PROMPT)
  private String pagingPrompt;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_USERDB = "userdb";
  @SerializedName(SERIALIZED_NAME_USERDB)
  private String userdb;

  public ConfigTELNET() {
  }

  public ConfigTELNET keymap(String keymap) {
    this.keymap = keymap;
    return this;
  }

  /**
   * Get keymap
   * @return keymap
   */
  @javax.annotation.Nullable
  public String getKeymap() {
    return keymap;
  }

  public void setKeymap(String keymap) {
    this.keymap = keymap;
  }


  public ConfigTELNET pagingPrompt(String pagingPrompt) {
    this.pagingPrompt = pagingPrompt;
    return this;
  }

  /**
   * Get pagingPrompt
   * @return pagingPrompt
   */
  @javax.annotation.Nullable
  public String getPagingPrompt() {
    return pagingPrompt;
  }

  public void setPagingPrompt(String pagingPrompt) {
    this.pagingPrompt = pagingPrompt;
  }


  public ConfigTELNET port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ConfigTELNET prompt(String prompt) {
    this.prompt = prompt;
    return this;
  }

  /**
   * Get prompt
   * @return prompt
   */
  @javax.annotation.Nullable
  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public ConfigTELNET rule(String rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }


  public ConfigTELNET userdb(String userdb) {
    this.userdb = userdb;
    return this;
  }

  /**
   * Get userdb
   * @return userdb
   */
  @javax.annotation.Nullable
  public String getUserdb() {
    return userdb;
  }

  public void setUserdb(String userdb) {
    this.userdb = userdb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigTELNET configTELNET = (ConfigTELNET) o;
    return Objects.equals(this.keymap, configTELNET.keymap) &&
        Objects.equals(this.pagingPrompt, configTELNET.pagingPrompt) &&
        Objects.equals(this.port, configTELNET.port) &&
        Objects.equals(this.prompt, configTELNET.prompt) &&
        Objects.equals(this.rule, configTELNET.rule) &&
        Objects.equals(this.userdb, configTELNET.userdb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keymap, pagingPrompt, port, prompt, rule, userdb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigTELNET {\n");
    sb.append("    keymap: ").append(toIndentedString(keymap)).append("\n");
    sb.append("    pagingPrompt: ").append(toIndentedString(pagingPrompt)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    userdb: ").append(toIndentedString(userdb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keymap");
    openapiFields.add("paging_prompt");
    openapiFields.add("port");
    openapiFields.add("prompt");
    openapiFields.add("rule");
    openapiFields.add("userdb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigTELNET
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigTELNET.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigTELNET is not found in the empty JSON string", ConfigTELNET.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigTELNET.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigTELNET` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keymap") != null && !jsonObj.get("keymap").isJsonNull()) && !jsonObj.get("keymap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keymap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keymap").toString()));
      }
      if ((jsonObj.get("paging_prompt") != null && !jsonObj.get("paging_prompt").isJsonNull()) && !jsonObj.get("paging_prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paging_prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paging_prompt").toString()));
      }
      if ((jsonObj.get("prompt") != null && !jsonObj.get("prompt").isJsonNull()) && !jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
      if ((jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if ((jsonObj.get("userdb") != null && !jsonObj.get("userdb").isJsonNull()) && !jsonObj.get("userdb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userdb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userdb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigTELNET.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigTELNET' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigTELNET> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigTELNET.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigTELNET>() {
           @Override
           public void write(JsonWriter out, ConfigTELNET value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigTELNET read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigTELNET given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigTELNET
   * @throws IOException if the JSON string is invalid with respect to ConfigTELNET
   */
  public static ConfigTELNET fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigTELNET.class);
  }

  /**
   * Convert an instance of ConfigTELNET to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

