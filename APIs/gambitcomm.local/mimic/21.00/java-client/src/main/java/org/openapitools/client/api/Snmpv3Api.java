/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigSNMPv3;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Snmpv3Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Snmpv3Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Snmpv3Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protocolSnmpv3AccessAdd
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param groupName SNMPv3 access name (required)
     * @param prefix SNMPv3 prefix (required)
     * @param securityModel SNMPv3 access security model (required)
     * @param securityLevel SNMPv3 access security level (required)
     * @param contextMatch SNMPv3 access context match (required)
     * @param readView SNMPv3 access read view (required)
     * @param writeView SNMPv3 access write view (required)
     * @param notifyView SNMPv3 access notify view (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessAddCall(Integer agentNum, String groupName, String prefix, String securityModel, String securityLevel, String contextMatch, String readView, String writeView, String notifyView, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/add/{groupName}/{prefix}/{securityModel}/{securityLevel}/{contextMatch}/{readView}/{writeView}/{notifyView}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "prefix" + "}", localVarApiClient.escapeString(prefix.toString()))
            .replace("{" + "securityModel" + "}", localVarApiClient.escapeString(securityModel.toString()))
            .replace("{" + "securityLevel" + "}", localVarApiClient.escapeString(securityLevel.toString()))
            .replace("{" + "contextMatch" + "}", localVarApiClient.escapeString(contextMatch.toString()))
            .replace("{" + "readView" + "}", localVarApiClient.escapeString(readView.toString()))
            .replace("{" + "writeView" + "}", localVarApiClient.escapeString(writeView.toString()))
            .replace("{" + "notifyView" + "}", localVarApiClient.escapeString(notifyView.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3AccessAddValidateBeforeCall(Integer agentNum, String groupName, String prefix, String securityModel, String securityLevel, String contextMatch, String readView, String writeView, String notifyView, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'securityModel' is set
        if (securityModel == null) {
            throw new ApiException("Missing the required parameter 'securityModel' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'securityLevel' is set
        if (securityLevel == null) {
            throw new ApiException("Missing the required parameter 'securityLevel' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'contextMatch' is set
        if (contextMatch == null) {
            throw new ApiException("Missing the required parameter 'contextMatch' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'readView' is set
        if (readView == null) {
            throw new ApiException("Missing the required parameter 'readView' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'writeView' is set
        if (writeView == null) {
            throw new ApiException("Missing the required parameter 'writeView' when calling protocolSnmpv3AccessAdd(Async)");
        }

        // verify the required parameter 'notifyView' is set
        if (notifyView == null) {
            throw new ApiException("Missing the required parameter 'notifyView' when calling protocolSnmpv3AccessAdd(Async)");
        }

        return protocolSnmpv3AccessAddCall(agentNum, groupName, prefix, securityModel, securityLevel, contextMatch, readView, writeView, notifyView, _callback);

    }

    /**
     * Adds a new access entry with the specified parameters.
     * Adds a new access entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param groupName SNMPv3 access name (required)
     * @param prefix SNMPv3 prefix (required)
     * @param securityModel SNMPv3 access security model (required)
     * @param securityLevel SNMPv3 access security level (required)
     * @param contextMatch SNMPv3 access context match (required)
     * @param readView SNMPv3 access read view (required)
     * @param writeView SNMPv3 access write view (required)
     * @param notifyView SNMPv3 access notify view (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3AccessAdd(Integer agentNum, String groupName, String prefix, String securityModel, String securityLevel, String contextMatch, String readView, String writeView, String notifyView) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3AccessAddWithHttpInfo(agentNum, groupName, prefix, securityModel, securityLevel, contextMatch, readView, writeView, notifyView);
        return localVarResp.getData();
    }

    /**
     * Adds a new access entry with the specified parameters.
     * Adds a new access entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param groupName SNMPv3 access name (required)
     * @param prefix SNMPv3 prefix (required)
     * @param securityModel SNMPv3 access security model (required)
     * @param securityLevel SNMPv3 access security level (required)
     * @param contextMatch SNMPv3 access context match (required)
     * @param readView SNMPv3 access read view (required)
     * @param writeView SNMPv3 access write view (required)
     * @param notifyView SNMPv3 access notify view (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3AccessAddWithHttpInfo(Integer agentNum, String groupName, String prefix, String securityModel, String securityLevel, String contextMatch, String readView, String writeView, String notifyView) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3AccessAddValidateBeforeCall(agentNum, groupName, prefix, securityModel, securityLevel, contextMatch, readView, writeView, notifyView, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new access entry with the specified parameters. (asynchronously)
     * Adds a new access entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param groupName SNMPv3 access name (required)
     * @param prefix SNMPv3 prefix (required)
     * @param securityModel SNMPv3 access security model (required)
     * @param securityLevel SNMPv3 access security level (required)
     * @param contextMatch SNMPv3 access context match (required)
     * @param readView SNMPv3 access read view (required)
     * @param writeView SNMPv3 access write view (required)
     * @param notifyView SNMPv3 access notify view (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessAddAsync(Integer agentNum, String groupName, String prefix, String securityModel, String securityLevel, String contextMatch, String readView, String writeView, String notifyView, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3AccessAddValidateBeforeCall(agentNum, groupName, prefix, securityModel, securityLevel, contextMatch, readView, writeView, notifyView, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3AccessClear
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessClearCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/clear"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3AccessClearValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessClear(Async)");
        }

        return protocolSnmpv3AccessClearCall(agentNum, _callback);

    }

    /**
     * Clears all access entries.
     * Clears all access entries.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3AccessClear(Integer agentNum) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3AccessClearWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Clears all access entries.
     * Clears all access entries.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3AccessClearWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3AccessClearValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears all access entries. (asynchronously)
     * Clears all access entries.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessClearAsync(Integer agentNum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3AccessClearValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3AccessDel
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param accessName SNMPv3 access name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessDelCall(Integer agentNum, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/del/{accessName}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3AccessDelValidateBeforeCall(Integer agentNum, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessDel(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling protocolSnmpv3AccessDel(Async)");
        }

        return protocolSnmpv3AccessDelCall(agentNum, accessName, _callback);

    }

    /**
     * Deletes the specified access entry.
     * Deletes the specified access entry.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param accessName SNMPv3 access name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3AccessDel(Integer agentNum, String accessName) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3AccessDelWithHttpInfo(agentNum, accessName);
        return localVarResp.getData();
    }

    /**
     * Deletes the specified access entry.
     * Deletes the specified access entry.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param accessName SNMPv3 access name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3AccessDelWithHttpInfo(Integer agentNum, String accessName) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3AccessDelValidateBeforeCall(agentNum, accessName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the specified access entry. (asynchronously)
     * Deletes the specified access entry.
     * @param agentNum Agent to add the SNMPv3 access (required)
     * @param accessName SNMPv3 access name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessDelAsync(Integer agentNum, String accessName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3AccessDelValidateBeforeCall(agentNum, accessName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3AccessList
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessListCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/list"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3AccessListValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessList(Async)");
        }

        return protocolSnmpv3AccessListCall(agentNum, _callback);

    }

    /**
     * Returns the current acccess entries as an array of strings.
     * Returns the current acccess entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3AccessList(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3AccessListWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Returns the current acccess entries as an array of strings.
     * Returns the current acccess entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3AccessListWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3AccessListValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the current acccess entries as an array of strings. (asynchronously)
     * Returns the current acccess entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3AccessListAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3AccessListValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GetConfig
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetConfigCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/config"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GetConfigValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetConfig(Async)");
        }

        return protocolSnmpv3GetConfigCall(agentNum, _callback);

    }

    /**
     * Returns the SNMPv3 configuration.
     * Returns the SNMPv3 configuration.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ConfigSNMPv3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigSNMPv3 protocolSnmpv3GetConfig(Integer agentNum) throws ApiException {
        ApiResponse<ConfigSNMPv3> localVarResp = protocolSnmpv3GetConfigWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Returns the SNMPv3 configuration.
     * Returns the SNMPv3 configuration.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;ConfigSNMPv3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigSNMPv3> protocolSnmpv3GetConfigWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GetConfigValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigSNMPv3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the SNMPv3 configuration. (asynchronously)
     * Returns the SNMPv3 configuration.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetConfigAsync(Integer agentNum, final ApiCallback<ConfigSNMPv3> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GetConfigValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigSNMPv3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GetContextEngineid
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetContextEngineidCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/context_engineid"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GetContextEngineidValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetContextEngineid(Async)");
        }

        return protocolSnmpv3GetContextEngineidCall(agentNum, _callback);

    }

    /**
     * Retrieves the contextEngineID for the agent instance.
     * Retrieves the contextEngineID for the agent instance.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3GetContextEngineid(Integer agentNum) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3GetContextEngineidWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Retrieves the contextEngineID for the agent instance.
     * Retrieves the contextEngineID for the agent instance.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3GetContextEngineidWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GetContextEngineidValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the contextEngineID for the agent instance. (asynchronously)
     * Retrieves the contextEngineID for the agent instance.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetContextEngineidAsync(Integer agentNum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GetContextEngineidValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GetEngineboots
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetEnginebootsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineboots"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GetEnginebootsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetEngineboots(Async)");
        }

        return protocolSnmpv3GetEnginebootsCall(agentNum, _callback);

    }

    /**
     * Retrieves the number of times the agent has been restarted.
     * Retrieves the number of times the agent has been restarted.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public Integer protocolSnmpv3GetEngineboots(Integer agentNum) throws ApiException {
        ApiResponse<Integer> localVarResp = protocolSnmpv3GetEnginebootsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Retrieves the number of times the agent has been restarted.
     * Retrieves the number of times the agent has been restarted.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> protocolSnmpv3GetEnginebootsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GetEnginebootsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the number of times the agent has been restarted. (asynchronously)
     * Retrieves the number of times the agent has been restarted.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetEnginebootsAsync(Integer agentNum, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GetEnginebootsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GetEngineid
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetEngineidCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineid"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GetEngineidValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetEngineid(Async)");
        }

        return protocolSnmpv3GetEngineidCall(agentNum, _callback);

    }

    /**
     * For started agents, retrieves the current engineID in use by the snmpv3 module.
     * For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \\x01 23 45 67 89...
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3GetEngineid(Integer agentNum) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3GetEngineidWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * For started agents, retrieves the current engineID in use by the snmpv3 module.
     * For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \\x01 23 45 67 89...
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3GetEngineidWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GetEngineidValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * For started agents, retrieves the current engineID in use by the snmpv3 module. (asynchronously)
     * For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \\x01 23 45 67 89...
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetEngineidAsync(Integer agentNum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GetEngineidValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GetEnginetime
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetEnginetimeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/enginetime"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GetEnginetimeValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetEnginetime(Async)");
        }

        return protocolSnmpv3GetEnginetimeCall(agentNum, _callback);

    }

    /**
     * Retrieves the time in seconds for which the agent has been running.
     * Retrieves the time in seconds for which the agent has been running.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public Integer protocolSnmpv3GetEnginetime(Integer agentNum) throws ApiException {
        ApiResponse<Integer> localVarResp = protocolSnmpv3GetEnginetimeWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Retrieves the time in seconds for which the agent has been running.
     * Retrieves the time in seconds for which the agent has been running.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> protocolSnmpv3GetEnginetimeWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GetEnginetimeValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the time in seconds for which the agent has been running. (asynchronously)
     * Retrieves the time in seconds for which the agent has been running.
     * @param agentNum Agent to show the SNMPv3 engine (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GetEnginetimeAsync(Integer agentNum, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GetEnginetimeValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GroupAdd
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @param securityModel SNMPv3 group security model (required)
     * @param securityName SNMPv3 group security name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupAddCall(Integer agentNum, String groupName, String securityModel, String securityName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/add/{groupName}/{securityModel}/{securityName}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "securityModel" + "}", localVarApiClient.escapeString(securityModel.toString()))
            .replace("{" + "securityName" + "}", localVarApiClient.escapeString(securityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GroupAddValidateBeforeCall(Integer agentNum, String groupName, String securityModel, String securityName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupAdd(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling protocolSnmpv3GroupAdd(Async)");
        }

        // verify the required parameter 'securityModel' is set
        if (securityModel == null) {
            throw new ApiException("Missing the required parameter 'securityModel' when calling protocolSnmpv3GroupAdd(Async)");
        }

        // verify the required parameter 'securityName' is set
        if (securityName == null) {
            throw new ApiException("Missing the required parameter 'securityName' when calling protocolSnmpv3GroupAdd(Async)");
        }

        return protocolSnmpv3GroupAddCall(agentNum, groupName, securityModel, securityName, _callback);

    }

    /**
     * Adds a new group entry with the specified parameters.
     * Adds a new group entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @param securityModel SNMPv3 group security model (required)
     * @param securityName SNMPv3 group security name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3GroupAdd(Integer agentNum, String groupName, String securityModel, String securityName) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3GroupAddWithHttpInfo(agentNum, groupName, securityModel, securityName);
        return localVarResp.getData();
    }

    /**
     * Adds a new group entry with the specified parameters.
     * Adds a new group entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @param securityModel SNMPv3 group security model (required)
     * @param securityName SNMPv3 group security name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3GroupAddWithHttpInfo(Integer agentNum, String groupName, String securityModel, String securityName) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GroupAddValidateBeforeCall(agentNum, groupName, securityModel, securityName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new group entry with the specified parameters. (asynchronously)
     * Adds a new group entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @param securityModel SNMPv3 group security model (required)
     * @param securityName SNMPv3 group security name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupAddAsync(Integer agentNum, String groupName, String securityModel, String securityName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GroupAddValidateBeforeCall(agentNum, groupName, securityModel, securityName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GroupClear
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupClearCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/clear"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GroupClearValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupClear(Async)");
        }

        return protocolSnmpv3GroupClearCall(agentNum, _callback);

    }

    /**
     * Clears all group entries.
     * Clears all group entries.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3GroupClear(Integer agentNum) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3GroupClearWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Clears all group entries.
     * Clears all group entries.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3GroupClearWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GroupClearValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears all group entries. (asynchronously)
     * Clears all group entries.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupClearAsync(Integer agentNum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GroupClearValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GroupDel
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupDelCall(Integer agentNum, String groupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/del/{groupName}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GroupDelValidateBeforeCall(Integer agentNum, String groupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupDel(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling protocolSnmpv3GroupDel(Async)");
        }

        return protocolSnmpv3GroupDelCall(agentNum, groupName, _callback);

    }

    /**
     * Deletes the specified group entry.
     * Deletes the specified group entry.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3GroupDel(Integer agentNum, String groupName) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3GroupDelWithHttpInfo(agentNum, groupName);
        return localVarResp.getData();
    }

    /**
     * Deletes the specified group entry.
     * Deletes the specified group entry.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3GroupDelWithHttpInfo(Integer agentNum, String groupName) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GroupDelValidateBeforeCall(agentNum, groupName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the specified group entry. (asynchronously)
     * Deletes the specified group entry.
     * @param agentNum Agent to add the SNMPv3 group (required)
     * @param groupName SNMPv3 group name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupDelAsync(Integer agentNum, String groupName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GroupDelValidateBeforeCall(agentNum, groupName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3GroupList
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupListCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/list"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3GroupListValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupList(Async)");
        }

        return protocolSnmpv3GroupListCall(agentNum, _callback);

    }

    /**
     * Returns the current group entries as an array of strings.
     * Returns the current group entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3GroupList(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3GroupListWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Returns the current group entries as an array of strings.
     * Returns the current group entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3GroupListWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3GroupListValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the current group entries as an array of strings. (asynchronously)
     * Returns the current group entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3GroupListAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3GroupListValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3SetConfig
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param parameter SNMPv3 configuration parameter (required)
     * @param value SNMPv3 parameter value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3SetConfigCall(Integer agentNum, String parameter, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/set/config/{parameter}/{value}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "parameter" + "}", localVarApiClient.escapeString(parameter.toString()))
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3SetConfigValidateBeforeCall(Integer agentNum, String parameter, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3SetConfig(Async)");
        }

        // verify the required parameter 'parameter' is set
        if (parameter == null) {
            throw new ApiException("Missing the required parameter 'parameter' when calling protocolSnmpv3SetConfig(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling protocolSnmpv3SetConfig(Async)");
        }

        return protocolSnmpv3SetConfigCall(agentNum, parameter, value, _callback);

    }

    /**
     * Changes the SNMPv3 configuration.
     * Changes the SNMPv3 configuration.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param parameter SNMPv3 configuration parameter (required)
     * @param value SNMPv3 parameter value (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3SetConfig(Integer agentNum, String parameter, String value) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3SetConfigWithHttpInfo(agentNum, parameter, value);
        return localVarResp.getData();
    }

    /**
     * Changes the SNMPv3 configuration.
     * Changes the SNMPv3 configuration.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param parameter SNMPv3 configuration parameter (required)
     * @param value SNMPv3 parameter value (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3SetConfigWithHttpInfo(Integer agentNum, String parameter, String value) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3SetConfigValidateBeforeCall(agentNum, parameter, value, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Changes the SNMPv3 configuration. (asynchronously)
     * Changes the SNMPv3 configuration.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param parameter SNMPv3 configuration parameter (required)
     * @param value SNMPv3 parameter value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3SetConfigAsync(Integer agentNum, String parameter, String value, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3SetConfigValidateBeforeCall(agentNum, parameter, value, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3UserAdd
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @param securityName SNMPv3 user security name (required)
     * @param authProtocol SNMPv3 user authentication protocol (required)
     * @param authKey SNMPv3 user authentication key (required)
     * @param privProtocol SNMPv3 user privacy encryption protocol (required)
     * @param privKey SNMPv3 user privacy encryption key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserAddCall(Integer agentNum, String userName, String securityName, String authProtocol, String authKey, String privProtocol, String privKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/add/{userName}/{securityName}/{authProtocol}/{authKey}/{privProtocol}/{privKey}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "securityName" + "}", localVarApiClient.escapeString(securityName.toString()))
            .replace("{" + "authProtocol" + "}", localVarApiClient.escapeString(authProtocol.toString()))
            .replace("{" + "authKey" + "}", localVarApiClient.escapeString(authKey.toString()))
            .replace("{" + "privProtocol" + "}", localVarApiClient.escapeString(privProtocol.toString()))
            .replace("{" + "privKey" + "}", localVarApiClient.escapeString(privKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3UserAddValidateBeforeCall(Integer agentNum, String userName, String securityName, String authProtocol, String authKey, String privProtocol, String privKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserAdd(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling protocolSnmpv3UserAdd(Async)");
        }

        // verify the required parameter 'securityName' is set
        if (securityName == null) {
            throw new ApiException("Missing the required parameter 'securityName' when calling protocolSnmpv3UserAdd(Async)");
        }

        // verify the required parameter 'authProtocol' is set
        if (authProtocol == null) {
            throw new ApiException("Missing the required parameter 'authProtocol' when calling protocolSnmpv3UserAdd(Async)");
        }

        // verify the required parameter 'authKey' is set
        if (authKey == null) {
            throw new ApiException("Missing the required parameter 'authKey' when calling protocolSnmpv3UserAdd(Async)");
        }

        // verify the required parameter 'privProtocol' is set
        if (privProtocol == null) {
            throw new ApiException("Missing the required parameter 'privProtocol' when calling protocolSnmpv3UserAdd(Async)");
        }

        // verify the required parameter 'privKey' is set
        if (privKey == null) {
            throw new ApiException("Missing the required parameter 'privKey' when calling protocolSnmpv3UserAdd(Async)");
        }

        return protocolSnmpv3UserAddCall(agentNum, userName, securityName, authProtocol, authKey, privProtocol, privKey, _callback);

    }

    /**
     * Adds a new user entry with the specified parameters.
     * Adds a new user entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @param securityName SNMPv3 user security name (required)
     * @param authProtocol SNMPv3 user authentication protocol (required)
     * @param authKey SNMPv3 user authentication key (required)
     * @param privProtocol SNMPv3 user privacy encryption protocol (required)
     * @param privKey SNMPv3 user privacy encryption key (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3UserAdd(Integer agentNum, String userName, String securityName, String authProtocol, String authKey, String privProtocol, String privKey) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3UserAddWithHttpInfo(agentNum, userName, securityName, authProtocol, authKey, privProtocol, privKey);
        return localVarResp.getData();
    }

    /**
     * Adds a new user entry with the specified parameters.
     * Adds a new user entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @param securityName SNMPv3 user security name (required)
     * @param authProtocol SNMPv3 user authentication protocol (required)
     * @param authKey SNMPv3 user authentication key (required)
     * @param privProtocol SNMPv3 user privacy encryption protocol (required)
     * @param privKey SNMPv3 user privacy encryption key (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3UserAddWithHttpInfo(Integer agentNum, String userName, String securityName, String authProtocol, String authKey, String privProtocol, String privKey) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3UserAddValidateBeforeCall(agentNum, userName, securityName, authProtocol, authKey, privProtocol, privKey, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new user entry with the specified parameters. (asynchronously)
     * Adds a new user entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @param securityName SNMPv3 user security name (required)
     * @param authProtocol SNMPv3 user authentication protocol (required)
     * @param authKey SNMPv3 user authentication key (required)
     * @param privProtocol SNMPv3 user privacy encryption protocol (required)
     * @param privKey SNMPv3 user privacy encryption key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserAddAsync(Integer agentNum, String userName, String securityName, String authProtocol, String authKey, String privProtocol, String privKey, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3UserAddValidateBeforeCall(agentNum, userName, securityName, authProtocol, authKey, privProtocol, privKey, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3UserClear
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserClearCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/clear"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3UserClearValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserClear(Async)");
        }

        return protocolSnmpv3UserClearCall(agentNum, _callback);

    }

    /**
     * Clears all user entries.
     * Clears all user entries.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3UserClear(Integer agentNum) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3UserClearWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Clears all user entries.
     * Clears all user entries.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3UserClearWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3UserClearValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears all user entries. (asynchronously)
     * Clears all user entries.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserClearAsync(Integer agentNum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3UserClearValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3UserDel
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserDelCall(Integer agentNum, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/del/{userName}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3UserDelValidateBeforeCall(Integer agentNum, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserDel(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling protocolSnmpv3UserDel(Async)");
        }

        return protocolSnmpv3UserDelCall(agentNum, userName, _callback);

    }

    /**
     * Deletes the specified user entry.
     * Deletes the specified user entry.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3UserDel(Integer agentNum, String userName) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3UserDelWithHttpInfo(agentNum, userName);
        return localVarResp.getData();
    }

    /**
     * Deletes the specified user entry.
     * Deletes the specified user entry.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3UserDelWithHttpInfo(Integer agentNum, String userName) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3UserDelValidateBeforeCall(agentNum, userName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the specified user entry. (asynchronously)
     * Deletes the specified user entry.
     * @param agentNum Agent to add the SNMPv3 user (required)
     * @param userName SNMPv3 user name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserDelAsync(Integer agentNum, String userName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3UserDelValidateBeforeCall(agentNum, userName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3UserList
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserListCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/list"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3UserListValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserList(Async)");
        }

        return protocolSnmpv3UserListCall(agentNum, _callback);

    }

    /**
     * Returns the current user entries as a Tcl list.
     * Returns the current user entries as a Tcl list.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3UserList(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3UserListWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Returns the current user entries as a Tcl list.
     * Returns the current user entries as a Tcl list.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3UserListWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3UserListValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the current user entries as a Tcl list. (asynchronously)
     * Returns the current user entries as a Tcl list.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UserListAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3UserListValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3UsmSave
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UsmSaveCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/save"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3UsmSaveValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3UsmSave(Async)");
        }

        return protocolSnmpv3UsmSaveCall(agentNum, _callback);

    }

    /**
     * Saves current user settings in the currently loaded USM config file.
     * Saves current user settings in the currently loaded USM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3UsmSave(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3UsmSaveWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Saves current user settings in the currently loaded USM config file.
     * Saves current user settings in the currently loaded USM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3UsmSaveWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3UsmSaveValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves current user settings in the currently loaded USM config file. (asynchronously)
     * Saves current user settings in the currently loaded USM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UsmSaveAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3UsmSaveValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3UsmSaveas
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UsmSaveasCall(Integer agentNum, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/saveas/{filename}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3UsmSaveasValidateBeforeCall(Integer agentNum, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3UsmSaveas(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling protocolSnmpv3UsmSaveas(Async)");
        }

        return protocolSnmpv3UsmSaveasCall(agentNum, filename, _callback);

    }

    /**
     * Saves current user settings in the specified USM config file.
     * Saves current user settings in the specified USM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3UsmSaveas(Integer agentNum, String filename) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3UsmSaveasWithHttpInfo(agentNum, filename);
        return localVarResp.getData();
    }

    /**
     * Saves current user settings in the specified USM config file.
     * Saves current user settings in the specified USM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3UsmSaveasWithHttpInfo(Integer agentNum, String filename) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3UsmSaveasValidateBeforeCall(agentNum, filename, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves current user settings in the specified USM config file. (asynchronously)
     * Saves current user settings in the specified USM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3UsmSaveasAsync(Integer agentNum, String filename, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3UsmSaveasValidateBeforeCall(agentNum, filename, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3VacmSave
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3VacmSaveCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/save"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3VacmSaveValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3VacmSave(Async)");
        }

        return protocolSnmpv3VacmSaveCall(agentNum, _callback);

    }

    /**
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3VacmSave(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3VacmSaveWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3VacmSaveWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3VacmSaveValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves current group, access, view settings in the currently loaded VACM config file. (asynchronously)
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3VacmSaveAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3VacmSaveValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3VacmSaveas
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3VacmSaveasCall(Integer agentNum, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/saveas/{filename}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3VacmSaveasValidateBeforeCall(Integer agentNum, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3VacmSaveas(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling protocolSnmpv3VacmSaveas(Async)");
        }

        return protocolSnmpv3VacmSaveasCall(agentNum, filename, _callback);

    }

    /**
     * Saves current group, access, view settings in the specified VACM config file.
     * Saves current group, access, view settings in the specified VACM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3VacmSaveas(Integer agentNum, String filename) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3VacmSaveasWithHttpInfo(agentNum, filename);
        return localVarResp.getData();
    }

    /**
     * Saves current group, access, view settings in the specified VACM config file.
     * Saves current group, access, view settings in the specified VACM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3VacmSaveasWithHttpInfo(Integer agentNum, String filename) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3VacmSaveasValidateBeforeCall(agentNum, filename, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves current group, access, view settings in the specified VACM config file. (asynchronously)
     * Saves current group, access, view settings in the specified VACM config file.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param filename Filename to save (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3VacmSaveasAsync(Integer agentNum, String filename, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3VacmSaveasValidateBeforeCall(agentNum, filename, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3ViewAdd
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @param viewType SNMPv3 view type (required)
     * @param subtree SNMPv3 view subtree (required)
     * @param mask SNMPv3 view mask (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewAddCall(Integer agentNum, String viewName, String viewType, String subtree, String mask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/add/{viewName}/{viewType}/{subtree}/{mask}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "viewName" + "}", localVarApiClient.escapeString(viewName.toString()))
            .replace("{" + "viewType" + "}", localVarApiClient.escapeString(viewType.toString()))
            .replace("{" + "subtree" + "}", localVarApiClient.escapeString(subtree.toString()))
            .replace("{" + "mask" + "}", localVarApiClient.escapeString(mask.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3ViewAddValidateBeforeCall(Integer agentNum, String viewName, String viewType, String subtree, String mask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewAdd(Async)");
        }

        // verify the required parameter 'viewName' is set
        if (viewName == null) {
            throw new ApiException("Missing the required parameter 'viewName' when calling protocolSnmpv3ViewAdd(Async)");
        }

        // verify the required parameter 'viewType' is set
        if (viewType == null) {
            throw new ApiException("Missing the required parameter 'viewType' when calling protocolSnmpv3ViewAdd(Async)");
        }

        // verify the required parameter 'subtree' is set
        if (subtree == null) {
            throw new ApiException("Missing the required parameter 'subtree' when calling protocolSnmpv3ViewAdd(Async)");
        }

        // verify the required parameter 'mask' is set
        if (mask == null) {
            throw new ApiException("Missing the required parameter 'mask' when calling protocolSnmpv3ViewAdd(Async)");
        }

        return protocolSnmpv3ViewAddCall(agentNum, viewName, viewType, subtree, mask, _callback);

    }

    /**
     * Adds a new view entry with the specified parameters.
     * Adds a new view entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @param viewType SNMPv3 view type (required)
     * @param subtree SNMPv3 view subtree (required)
     * @param mask SNMPv3 view mask (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3ViewAdd(Integer agentNum, String viewName, String viewType, String subtree, String mask) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3ViewAddWithHttpInfo(agentNum, viewName, viewType, subtree, mask);
        return localVarResp.getData();
    }

    /**
     * Adds a new view entry with the specified parameters.
     * Adds a new view entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @param viewType SNMPv3 view type (required)
     * @param subtree SNMPv3 view subtree (required)
     * @param mask SNMPv3 view mask (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3ViewAddWithHttpInfo(Integer agentNum, String viewName, String viewType, String subtree, String mask) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3ViewAddValidateBeforeCall(agentNum, viewName, viewType, subtree, mask, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new view entry with the specified parameters. (asynchronously)
     * Adds a new view entry with the specified parameters.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @param viewType SNMPv3 view type (required)
     * @param subtree SNMPv3 view subtree (required)
     * @param mask SNMPv3 view mask (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewAddAsync(Integer agentNum, String viewName, String viewType, String subtree, String mask, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3ViewAddValidateBeforeCall(agentNum, viewName, viewType, subtree, mask, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3ViewClear
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewClearCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/clear"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3ViewClearValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewClear(Async)");
        }

        return protocolSnmpv3ViewClearCall(agentNum, _callback);

    }

    /**
     * Clears all view entries.
     * Clears all view entries.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3ViewClear(Integer agentNum) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3ViewClearWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Clears all view entries.
     * Clears all view entries.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3ViewClearWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3ViewClearValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears all view entries. (asynchronously)
     * Clears all view entries.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewClearAsync(Integer agentNum, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3ViewClearValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3ViewDel
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewDelCall(Integer agentNum, String viewName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/del/{viewName}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "viewName" + "}", localVarApiClient.escapeString(viewName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3ViewDelValidateBeforeCall(Integer agentNum, String viewName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewDel(Async)");
        }

        // verify the required parameter 'viewName' is set
        if (viewName == null) {
            throw new ApiException("Missing the required parameter 'viewName' when calling protocolSnmpv3ViewDel(Async)");
        }

        return protocolSnmpv3ViewDelCall(agentNum, viewName, _callback);

    }

    /**
     * Deletes the specified view entry.
     * Deletes the specified view entry.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSnmpv3ViewDel(Integer agentNum, String viewName) throws ApiException {
        ApiResponse<String> localVarResp = protocolSnmpv3ViewDelWithHttpInfo(agentNum, viewName);
        return localVarResp.getData();
    }

    /**
     * Deletes the specified view entry.
     * Deletes the specified view entry.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSnmpv3ViewDelWithHttpInfo(Integer agentNum, String viewName) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3ViewDelValidateBeforeCall(agentNum, viewName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the specified view entry. (asynchronously)
     * Deletes the specified view entry.
     * @param agentNum Agent to add the SNMPv3 view (required)
     * @param viewName SNMPv3 view name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewDelAsync(Integer agentNum, String viewName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3ViewDelValidateBeforeCall(agentNum, viewName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSnmpv3ViewList
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewListCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/list"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSnmpv3ViewListValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewList(Async)");
        }

        return protocolSnmpv3ViewListCall(agentNum, _callback);

    }

    /**
     * Returns the current view entries as an array of strings.
     * Returns the current view entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSnmpv3ViewList(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSnmpv3ViewListWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Returns the current view entries as an array of strings.
     * Returns the current view entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSnmpv3ViewListWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSnmpv3ViewListValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the current view entries as an array of strings. (asynchronously)
     * Returns the current view entries as an array of strings.
     * @param agentNum Agent to show the SNMPv3 configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSnmpv3ViewListAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSnmpv3ViewListValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
