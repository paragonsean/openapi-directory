/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigDHCP;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DhcpApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DhcpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DhcpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protocolDhcpGetArgs
     * @param agentNum Agent to show the DHCP argument structure (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetArgsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/args"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpGetArgsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpGetArgs(Async)");
        }

        return protocolDhcpGetArgsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s DHCP argument structure
     * Agent&#39;s DHCP configuration particulars
     * @param agentNum Agent to show the DHCP argument structure (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public Object protocolDhcpGetArgs(Integer agentNum) throws ApiException {
        ApiResponse<Object> localVarResp = protocolDhcpGetArgsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s DHCP argument structure
     * Agent&#39;s DHCP configuration particulars
     * @param agentNum Agent to show the DHCP argument structure (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> protocolDhcpGetArgsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpGetArgsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s DHCP argument structure (asynchronously)
     * Agent&#39;s DHCP configuration particulars
     * @param agentNum Agent to show the DHCP argument structure (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetArgsAsync(Integer agentNum, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpGetArgsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpGetConfig
     * @param agentNum Agent to show the DHCP configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetConfigCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/config"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpGetConfigValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpGetConfig(Async)");
        }

        return protocolDhcpGetConfigCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s DHCP configuration
     * Agent&#39;s DHCP configuration hwaddr,classid,add_options,script
     * @param agentNum Agent to show the DHCP configuration (required)
     * @return ConfigDHCP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigDHCP protocolDhcpGetConfig(Integer agentNum) throws ApiException {
        ApiResponse<ConfigDHCP> localVarResp = protocolDhcpGetConfigWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s DHCP configuration
     * Agent&#39;s DHCP configuration hwaddr,classid,add_options,script
     * @param agentNum Agent to show the DHCP configuration (required)
     * @return ApiResponse&lt;ConfigDHCP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigDHCP> protocolDhcpGetConfigWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpGetConfigValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigDHCP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s DHCP configuration (asynchronously)
     * Agent&#39;s DHCP configuration hwaddr,classid,add_options,script
     * @param agentNum Agent to show the DHCP configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetConfigAsync(Integer agentNum, final ApiCallback<ConfigDHCP> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpGetConfigValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigDHCP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpGetStatistics
     * @param agentNum Agent to show DHCP statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetStatisticsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/statistics"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpGetStatisticsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpGetStatistics(Async)");
        }

        return protocolDhcpGetStatisticsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s DHCP statistics
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show DHCP statistics (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> protocolDhcpGetStatistics(Integer agentNum) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = protocolDhcpGetStatisticsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s DHCP statistics
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show DHCP statistics (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> protocolDhcpGetStatisticsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpGetStatisticsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s DHCP statistics (asynchronously)
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show DHCP statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetStatisticsAsync(Integer agentNum, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpGetStatisticsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpGetStatsHdr
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetStatsHdrCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/protocol/msg/dhcp/get/stats_hdr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpGetStatsHdrValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return protocolDhcpGetStatsHdrCall(_callback);

    }

    /**
     * Show the DHCP statistics headers
     * The headers of statistics fields
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolDhcpGetStatsHdr() throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolDhcpGetStatsHdrWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Show the DHCP statistics headers
     * The headers of statistics fields
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolDhcpGetStatsHdrWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpGetStatsHdrValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the DHCP statistics headers (asynchronously)
     * The headers of statistics fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetStatsHdrAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpGetStatsHdrValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpGetTrace
     * @param agentNum Agent to show whether DHCP tracing is enabled (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetTraceCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/trace"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpGetTraceValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpGetTrace(Async)");
        }

        return protocolDhcpGetTraceCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s DHCP traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether DHCP tracing is enabled (required)
     * @return ConfigDHCP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigDHCP protocolDhcpGetTrace(Integer agentNum) throws ApiException {
        ApiResponse<ConfigDHCP> localVarResp = protocolDhcpGetTraceWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s DHCP traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether DHCP tracing is enabled (required)
     * @return ApiResponse&lt;ConfigDHCP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigDHCP> protocolDhcpGetTraceWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpGetTraceValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigDHCP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s DHCP traffic tracing (asynchronously)
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether DHCP tracing is enabled (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpGetTraceAsync(Integer agentNum, final ApiCallback<ConfigDHCP> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpGetTraceValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigDHCP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpParams
     * @param agentNum Agent to show DHCP DHCP-OFFER message (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpParamsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/params"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpParamsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpParams(Async)");
        }

        return protocolDhcpParamsCall(agentNum, _callback);

    }

    /**
     * Show the parameters configured by the server in its DHCP-OFFER message
     * DHCP-OFFER message parameters
     * @param agentNum Agent to show DHCP DHCP-OFFER message (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> protocolDhcpParams(Integer agentNum) throws ApiException {
        ApiResponse<List<Object>> localVarResp = protocolDhcpParamsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the parameters configured by the server in its DHCP-OFFER message
     * DHCP-OFFER message parameters
     * @param agentNum Agent to show DHCP DHCP-OFFER message (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> protocolDhcpParamsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpParamsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the parameters configured by the server in its DHCP-OFFER message (asynchronously)
     * DHCP-OFFER message parameters
     * @param agentNum Agent to show DHCP DHCP-OFFER message (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpParamsAsync(Integer agentNum, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpParamsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpSetConfig
     * @param agentNum Agent to set the DHCP configuration (required)
     * @param argument Parameter to set the DHCP configuration (required)
     * @param value Value to set the DHCP configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpSetConfigCall(Integer agentNum, String argument, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/set/config/{argument}/{value}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "argument" + "}", localVarApiClient.escapeString(argument.toString()))
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpSetConfigValidateBeforeCall(Integer agentNum, String argument, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpSetConfig(Async)");
        }

        // verify the required parameter 'argument' is set
        if (argument == null) {
            throw new ApiException("Missing the required parameter 'argument' when calling protocolDhcpSetConfig(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling protocolDhcpSetConfig(Async)");
        }

        return protocolDhcpSetConfigCall(agentNum, argument, value, _callback);

    }

    /**
     * Set the agent&#39;s DHCP configuration
     * Agent&#39;s DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the DHCP configuration (required)
     * @param argument Parameter to set the DHCP configuration (required)
     * @param value Value to set the DHCP configuration (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolDhcpSetConfig(Integer agentNum, String argument, String value) throws ApiException {
        ApiResponse<String> localVarResp = protocolDhcpSetConfigWithHttpInfo(agentNum, argument, value);
        return localVarResp.getData();
    }

    /**
     * Set the agent&#39;s DHCP configuration
     * Agent&#39;s DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the DHCP configuration (required)
     * @param argument Parameter to set the DHCP configuration (required)
     * @param value Value to set the DHCP configuration (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolDhcpSetConfigWithHttpInfo(Integer agentNum, String argument, String value) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpSetConfigValidateBeforeCall(agentNum, argument, value, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the agent&#39;s DHCP configuration (asynchronously)
     * Agent&#39;s DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the DHCP configuration (required)
     * @param argument Parameter to set the DHCP configuration (required)
     * @param value Value to set the DHCP configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpSetConfigAsync(Integer agentNum, String argument, String value, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpSetConfigValidateBeforeCall(agentNum, argument, value, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolDhcpSetTrace
     * @param agentNum Agent to set the DHCP tracing (required)
     * @param enableOrNot Value to set the DHCP tracing (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpSetTraceCall(Integer agentNum, String enableOrNot, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/dhcp/set/trace/{enableOrNot}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "enableOrNot" + "}", localVarApiClient.escapeString(enableOrNot.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolDhcpSetTraceValidateBeforeCall(Integer agentNum, String enableOrNot, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolDhcpSetTrace(Async)");
        }

        // verify the required parameter 'enableOrNot' is set
        if (enableOrNot == null) {
            throw new ApiException("Missing the required parameter 'enableOrNot' when calling protocolDhcpSetTrace(Async)");
        }

        return protocolDhcpSetTraceCall(agentNum, enableOrNot, _callback);

    }

    /**
     * Set the agent&#39;s DHCP traffic tracing
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the DHCP tracing (required)
     * @param enableOrNot Value to set the DHCP tracing (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolDhcpSetTrace(Integer agentNum, String enableOrNot) throws ApiException {
        ApiResponse<String> localVarResp = protocolDhcpSetTraceWithHttpInfo(agentNum, enableOrNot);
        return localVarResp.getData();
    }

    /**
     * Set the agent&#39;s DHCP traffic tracing
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the DHCP tracing (required)
     * @param enableOrNot Value to set the DHCP tracing (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolDhcpSetTraceWithHttpInfo(Integer agentNum, String enableOrNot) throws ApiException {
        okhttp3.Call localVarCall = protocolDhcpSetTraceValidateBeforeCall(agentNum, enableOrNot, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the agent&#39;s DHCP traffic tracing (asynchronously)
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the DHCP tracing (required)
     * @param enableOrNot Value to set the DHCP tracing (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolDhcpSetTraceAsync(Integer agentNum, String enableOrNot, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolDhcpSetTraceValidateBeforeCall(agentNum, enableOrNot, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
