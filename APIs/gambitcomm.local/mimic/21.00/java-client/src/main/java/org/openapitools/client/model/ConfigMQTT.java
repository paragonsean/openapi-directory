/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigMQTT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:08.940356-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigMQTT {
  public static final String SERIALIZED_NAME_BROKER = "broker";
  @SerializedName(SERIALIZED_NAME_BROKER)
  private String broker;

  public static final String SERIALIZED_NAME_CLIENTID = "clientid";
  @SerializedName(SERIALIZED_NAME_CLIENTID)
  private String clientid;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_IS_TLS = "is_tls";
  @SerializedName(SERIALIZED_NAME_IS_TLS)
  private String isTls;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_TLS_CONF_FILENAME = "tls_conf_filename";
  @SerializedName(SERIALIZED_NAME_TLS_CONF_FILENAME)
  private String tlsConfFilename;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ConfigMQTT() {
  }

  public ConfigMQTT broker(String broker) {
    this.broker = broker;
    return this;
  }

  /**
   * Get broker
   * @return broker
   */
  @javax.annotation.Nullable
  public String getBroker() {
    return broker;
  }

  public void setBroker(String broker) {
    this.broker = broker;
  }


  public ConfigMQTT clientid(String clientid) {
    this.clientid = clientid;
    return this;
  }

  /**
   * Get clientid
   * @return clientid
   */
  @javax.annotation.Nullable
  public String getClientid() {
    return clientid;
  }

  public void setClientid(String clientid) {
    this.clientid = clientid;
  }


  public ConfigMQTT filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public ConfigMQTT isTls(String isTls) {
    this.isTls = isTls;
    return this;
  }

  /**
   * Get isTls
   * @return isTls
   */
  @javax.annotation.Nullable
  public String getIsTls() {
    return isTls;
  }

  public void setIsTls(String isTls) {
    this.isTls = isTls;
  }


  public ConfigMQTT password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ConfigMQTT port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ConfigMQTT tlsConfFilename(String tlsConfFilename) {
    this.tlsConfFilename = tlsConfFilename;
    return this;
  }

  /**
   * Get tlsConfFilename
   * @return tlsConfFilename
   */
  @javax.annotation.Nullable
  public String getTlsConfFilename() {
    return tlsConfFilename;
  }

  public void setTlsConfFilename(String tlsConfFilename) {
    this.tlsConfFilename = tlsConfFilename;
  }


  public ConfigMQTT username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public ConfigMQTT version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigMQTT configMQTT = (ConfigMQTT) o;
    return Objects.equals(this.broker, configMQTT.broker) &&
        Objects.equals(this.clientid, configMQTT.clientid) &&
        Objects.equals(this.filename, configMQTT.filename) &&
        Objects.equals(this.isTls, configMQTT.isTls) &&
        Objects.equals(this.password, configMQTT.password) &&
        Objects.equals(this.port, configMQTT.port) &&
        Objects.equals(this.tlsConfFilename, configMQTT.tlsConfFilename) &&
        Objects.equals(this.username, configMQTT.username) &&
        Objects.equals(this.version, configMQTT.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(broker, clientid, filename, isTls, password, port, tlsConfFilename, username, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigMQTT {\n");
    sb.append("    broker: ").append(toIndentedString(broker)).append("\n");
    sb.append("    clientid: ").append(toIndentedString(clientid)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    isTls: ").append(toIndentedString(isTls)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    tlsConfFilename: ").append(toIndentedString(tlsConfFilename)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("broker");
    openapiFields.add("clientid");
    openapiFields.add("filename");
    openapiFields.add("is_tls");
    openapiFields.add("password");
    openapiFields.add("port");
    openapiFields.add("tls_conf_filename");
    openapiFields.add("username");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigMQTT
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigMQTT.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigMQTT is not found in the empty JSON string", ConfigMQTT.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigMQTT.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigMQTT` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("broker") != null && !jsonObj.get("broker").isJsonNull()) && !jsonObj.get("broker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `broker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("broker").toString()));
      }
      if ((jsonObj.get("clientid") != null && !jsonObj.get("clientid").isJsonNull()) && !jsonObj.get("clientid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientid").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("is_tls") != null && !jsonObj.get("is_tls").isJsonNull()) && !jsonObj.get("is_tls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_tls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_tls").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("tls_conf_filename") != null && !jsonObj.get("tls_conf_filename").isJsonNull()) && !jsonObj.get("tls_conf_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls_conf_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls_conf_filename").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigMQTT.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigMQTT' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigMQTT> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigMQTT.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigMQTT>() {
           @Override
           public void write(JsonWriter out, ConfigMQTT value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigMQTT read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigMQTT given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigMQTT
   * @throws IOException if the JSON string is invalid with respect to ConfigMQTT
   */
  public static ConfigMQTT fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigMQTT.class);
  }

  /**
   * Convert an instance of ConfigMQTT to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

