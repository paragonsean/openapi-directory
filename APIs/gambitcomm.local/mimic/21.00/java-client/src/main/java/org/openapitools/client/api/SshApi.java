/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigSSH;
import org.openapitools.client.model.IPAlias;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SshApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SshApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SshApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protocolSshGetArgs
     * @param agentNum Agent to show the SSH argument structure (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetArgsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/get/args"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshGetArgsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshGetArgs(Async)");
        }

        return protocolSshGetArgsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s SSH argument structure
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the SSH argument structure (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public Object protocolSshGetArgs(Integer agentNum) throws ApiException {
        ApiResponse<Object> localVarResp = protocolSshGetArgsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s SSH argument structure
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the SSH argument structure (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> protocolSshGetArgsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSshGetArgsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s SSH argument structure (asynchronously)
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the SSH argument structure (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetArgsAsync(Integer agentNum, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshGetArgsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshGetConfig
     * @param agentNum Agent to show the SSH configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetConfigCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/get/config"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshGetConfigValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshGetConfig(Async)");
        }

        return protocolSshGetConfigCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s SSH configuration
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the SSH configuration (required)
     * @return ConfigSSH
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigSSH protocolSshGetConfig(Integer agentNum) throws ApiException {
        ApiResponse<ConfigSSH> localVarResp = protocolSshGetConfigWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s SSH configuration
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the SSH configuration (required)
     * @return ApiResponse&lt;ConfigSSH&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigSSH> protocolSshGetConfigWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSshGetConfigValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigSSH>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s SSH configuration (asynchronously)
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the SSH configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetConfigAsync(Integer agentNum, final ApiCallback<ConfigSSH> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshGetConfigValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigSSH>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshGetStatistics
     * @param agentNum Agent to show SSH statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetStatisticsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/get/statistics"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshGetStatisticsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshGetStatistics(Async)");
        }

        return protocolSshGetStatisticsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s SSH statistics
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show SSH statistics (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> protocolSshGetStatistics(Integer agentNum) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = protocolSshGetStatisticsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s SSH statistics
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show SSH statistics (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> protocolSshGetStatisticsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSshGetStatisticsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s SSH statistics (asynchronously)
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show SSH statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetStatisticsAsync(Integer agentNum, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshGetStatisticsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshGetStatsHdr
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetStatsHdrCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/protocol/msg/ssh/get/stats_hdr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshGetStatsHdrValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return protocolSshGetStatsHdrCall(_callback);

    }

    /**
     * Show the SSH statistics headers
     * The headers of statistics fields
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolSshGetStatsHdr() throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolSshGetStatsHdrWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Show the SSH statistics headers
     * The headers of statistics fields
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolSshGetStatsHdrWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = protocolSshGetStatsHdrValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the SSH statistics headers (asynchronously)
     * The headers of statistics fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetStatsHdrAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshGetStatsHdrValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshGetTrace
     * @param agentNum Agent to show whether SSH tracing is enabled (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetTraceCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/get/trace"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshGetTraceValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshGetTrace(Async)");
        }

        return protocolSshGetTraceCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s SSH traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether SSH tracing is enabled (required)
     * @return ConfigSSH
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigSSH protocolSshGetTrace(Integer agentNum) throws ApiException {
        ApiResponse<ConfigSSH> localVarResp = protocolSshGetTraceWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s SSH traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether SSH tracing is enabled (required)
     * @return ApiResponse&lt;ConfigSSH&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigSSH> protocolSshGetTraceWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSshGetTraceValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigSSH>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s SSH traffic tracing (asynchronously)
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether SSH tracing is enabled (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshGetTraceAsync(Integer agentNum, final ApiCallback<ConfigSSH> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshGetTraceValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigSSH>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshIpaliasDisable
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasDisableCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/disable/{ipaddress}/{port}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "ipaddress" + "}", localVarApiClient.escapeString(ipaddress.toString()))
            .replace("{" + "port" + "}", localVarApiClient.escapeString(port.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshIpaliasDisableValidateBeforeCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshIpaliasDisable(Async)");
        }

        // verify the required parameter 'ipaddress' is set
        if (ipaddress == null) {
            throw new ApiException("Missing the required parameter 'ipaddress' when calling protocolSshIpaliasDisable(Async)");
        }

        // verify the required parameter 'port' is set
        if (port == null) {
            throw new ApiException("Missing the required parameter 'port' when calling protocolSshIpaliasDisable(Async)");
        }

        return protocolSshIpaliasDisableCall(agentNum, ipaddress, port, _callback);

    }

    /**
     * Disable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSshIpaliasDisable(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        ApiResponse<String> localVarResp = protocolSshIpaliasDisableWithHttpInfo(agentNum, ipaddress, port);
        return localVarResp.getData();
    }

    /**
     * Disable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSshIpaliasDisableWithHttpInfo(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        okhttp3.Call localVarCall = protocolSshIpaliasDisableValidateBeforeCall(agentNum, ipaddress, port, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable individual IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasDisableAsync(Integer agentNum, String ipaddress, Integer port, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshIpaliasDisableValidateBeforeCall(agentNum, ipaddress, port, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshIpaliasEnable
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasEnableCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/enable/{ipaddress}/{port}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "ipaddress" + "}", localVarApiClient.escapeString(ipaddress.toString()))
            .replace("{" + "port" + "}", localVarApiClient.escapeString(port.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshIpaliasEnableValidateBeforeCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshIpaliasEnable(Async)");
        }

        // verify the required parameter 'ipaddress' is set
        if (ipaddress == null) {
            throw new ApiException("Missing the required parameter 'ipaddress' when calling protocolSshIpaliasEnable(Async)");
        }

        // verify the required parameter 'port' is set
        if (port == null) {
            throw new ApiException("Missing the required parameter 'port' when calling protocolSshIpaliasEnable(Async)");
        }

        return protocolSshIpaliasEnableCall(agentNum, ipaddress, port, _callback);

    }

    /**
     * Enable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSshIpaliasEnable(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        ApiResponse<String> localVarResp = protocolSshIpaliasEnableWithHttpInfo(agentNum, ipaddress, port);
        return localVarResp.getData();
    }

    /**
     * Enable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSshIpaliasEnableWithHttpInfo(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        okhttp3.Call localVarCall = protocolSshIpaliasEnableValidateBeforeCall(agentNum, ipaddress, port, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable individual IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasEnableAsync(Integer agentNum, String ipaddress, Integer port, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshIpaliasEnableValidateBeforeCall(agentNum, ipaddress, port, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshIpaliasIsenabled
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasIsenabledCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/isenabled/{ipaddress}/{port}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "ipaddress" + "}", localVarApiClient.escapeString(ipaddress.toString()))
            .replace("{" + "port" + "}", localVarApiClient.escapeString(port.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshIpaliasIsenabledValidateBeforeCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshIpaliasIsenabled(Async)");
        }

        // verify the required parameter 'ipaddress' is set
        if (ipaddress == null) {
            throw new ApiException("Missing the required parameter 'ipaddress' when calling protocolSshIpaliasIsenabled(Async)");
        }

        // verify the required parameter 'port' is set
        if (port == null) {
            throw new ApiException("Missing the required parameter 'port' when calling protocolSshIpaliasIsenabled(Async)");
        }

        return protocolSshIpaliasIsenabledCall(agentNum, ipaddress, port, _callback);

    }

    /**
     * Check individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSshIpaliasIsenabled(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        ApiResponse<String> localVarResp = protocolSshIpaliasIsenabledWithHttpInfo(agentNum, ipaddress, port);
        return localVarResp.getData();
    }

    /**
     * Check individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSshIpaliasIsenabledWithHttpInfo(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        okhttp3.Call localVarCall = protocolSshIpaliasIsenabledValidateBeforeCall(agentNum, ipaddress, port, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check individual IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasIsenabledAsync(Integer agentNum, String ipaddress, Integer port, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshIpaliasIsenabledValidateBeforeCall(agentNum, ipaddress, port, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshIpaliasList
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasListCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/list"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshIpaliasListValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshIpaliasList(Async)");
        }

        return protocolSshIpaliasListCall(agentNum, _callback);

    }

    /**
     * List all IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @return List&lt;IPAlias&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<IPAlias> protocolSshIpaliasList(Integer agentNum) throws ApiException {
        ApiResponse<List<IPAlias>> localVarResp = protocolSshIpaliasListWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * List all IP aliases on the agent and the simulator host
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @return ApiResponse&lt;List&lt;IPAlias&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IPAlias>> protocolSshIpaliasListWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolSshIpaliasListValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<IPAlias>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate SSH IP alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshIpaliasListAsync(Integer agentNum, final ApiCallback<List<IPAlias>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshIpaliasListValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<IPAlias>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshSetConfig
     * @param agentNum Agent to set the SSH configuration (required)
     * @param argument Parameter to set the SSH configuration (required)
     * @param value Value to set the SSH configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshSetConfigCall(Integer agentNum, String argument, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/set/config/{argument}/{value}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "argument" + "}", localVarApiClient.escapeString(argument.toString()))
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshSetConfigValidateBeforeCall(Integer agentNum, String argument, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshSetConfig(Async)");
        }

        // verify the required parameter 'argument' is set
        if (argument == null) {
            throw new ApiException("Missing the required parameter 'argument' when calling protocolSshSetConfig(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling protocolSshSetConfig(Async)");
        }

        return protocolSshSetConfigCall(agentNum, argument, value, _callback);

    }

    /**
     * Set the agent&#39;s SSH configuration
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the SSH configuration (required)
     * @param argument Parameter to set the SSH configuration (required)
     * @param value Value to set the SSH configuration (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSshSetConfig(Integer agentNum, String argument, String value) throws ApiException {
        ApiResponse<String> localVarResp = protocolSshSetConfigWithHttpInfo(agentNum, argument, value);
        return localVarResp.getData();
    }

    /**
     * Set the agent&#39;s SSH configuration
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the SSH configuration (required)
     * @param argument Parameter to set the SSH configuration (required)
     * @param value Value to set the SSH configuration (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSshSetConfigWithHttpInfo(Integer agentNum, String argument, String value) throws ApiException {
        okhttp3.Call localVarCall = protocolSshSetConfigValidateBeforeCall(agentNum, argument, value, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the agent&#39;s SSH configuration (asynchronously)
     * Agent&#39;s SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the SSH configuration (required)
     * @param argument Parameter to set the SSH configuration (required)
     * @param value Value to set the SSH configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshSetConfigAsync(Integer agentNum, String argument, String value, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshSetConfigValidateBeforeCall(agentNum, argument, value, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolSshSetTrace
     * @param agentNum Agent to set the SSH tracing (required)
     * @param enableOrNot Value to set the SSH tracing (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshSetTraceCall(Integer agentNum, String enableOrNot, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/ssh/set/trace/{enableOrNot}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "enableOrNot" + "}", localVarApiClient.escapeString(enableOrNot.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolSshSetTraceValidateBeforeCall(Integer agentNum, String enableOrNot, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolSshSetTrace(Async)");
        }

        // verify the required parameter 'enableOrNot' is set
        if (enableOrNot == null) {
            throw new ApiException("Missing the required parameter 'enableOrNot' when calling protocolSshSetTrace(Async)");
        }

        return protocolSshSetTraceCall(agentNum, enableOrNot, _callback);

    }

    /**
     * Set the agent&#39;s SSH traffic tracing
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the SSH tracing (required)
     * @param enableOrNot Value to set the SSH tracing (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolSshSetTrace(Integer agentNum, String enableOrNot) throws ApiException {
        ApiResponse<String> localVarResp = protocolSshSetTraceWithHttpInfo(agentNum, enableOrNot);
        return localVarResp.getData();
    }

    /**
     * Set the agent&#39;s SSH traffic tracing
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the SSH tracing (required)
     * @param enableOrNot Value to set the SSH tracing (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolSshSetTraceWithHttpInfo(Integer agentNum, String enableOrNot) throws ApiException {
        okhttp3.Call localVarCall = protocolSshSetTraceValidateBeforeCall(agentNum, enableOrNot, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the agent&#39;s SSH traffic tracing (asynchronously)
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the SSH tracing (required)
     * @param enableOrNot Value to set the SSH tracing (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolSshSetTraceAsync(Integer agentNum, String enableOrNot, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolSshSetTraceValidateBeforeCall(agentNum, enableOrNot, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
