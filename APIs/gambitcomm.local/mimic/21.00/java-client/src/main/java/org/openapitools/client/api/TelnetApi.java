/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigTELNET;
import org.openapitools.client.model.IPAlias;
import org.openapitools.client.model.TelnetUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TelnetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TelnetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TelnetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protocolTelnetConnectionLogon
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param user  (required)
     * @param password  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetConnectionLogonCall(Integer agentNum, Integer connectionID, String user, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/connection/logon/{connectionID}/{user}/{password}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "connectionID" + "}", localVarApiClient.escapeString(connectionID.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "password" + "}", localVarApiClient.escapeString(password.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetConnectionLogonValidateBeforeCall(Integer agentNum, Integer connectionID, String user, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetConnectionLogon(Async)");
        }

        // verify the required parameter 'connectionID' is set
        if (connectionID == null) {
            throw new ApiException("Missing the required parameter 'connectionID' when calling protocolTelnetConnectionLogon(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling protocolTelnetConnectionLogon(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling protocolTelnetConnectionLogon(Async)");
        }

        return protocolTelnetConnectionLogonCall(agentNum, connectionID, user, password, _callback);

    }

    /**
     * Changes the connection&#39;s current logon.
     * Logon change allows (hidden) commands for a different access mode to run.
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param user  (required)
     * @param password  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetConnectionLogon(Integer agentNum, Integer connectionID, String user, String password) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetConnectionLogonWithHttpInfo(agentNum, connectionID, user, password);
        return localVarResp.getData();
    }

    /**
     * Changes the connection&#39;s current logon.
     * Logon change allows (hidden) commands for a different access mode to run.
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param user  (required)
     * @param password  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetConnectionLogonWithHttpInfo(Integer agentNum, Integer connectionID, String user, String password) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetConnectionLogonValidateBeforeCall(agentNum, connectionID, user, password, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Changes the connection&#39;s current logon. (asynchronously)
     * Logon change allows (hidden) commands for a different access mode to run.
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param user  (required)
     * @param password  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetConnectionLogonAsync(Integer agentNum, Integer connectionID, String user, String password, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetConnectionLogonValidateBeforeCall(agentNum, connectionID, user, password, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetConnectionRequest
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param command  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetConnectionRequestCall(Integer agentNum, Integer connectionID, String command, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/connection/request/{connectionID}/{command}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "connectionID" + "}", localVarApiClient.escapeString(connectionID.toString()))
            .replace("{" + "command" + "}", localVarApiClient.escapeString(command.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetConnectionRequestValidateBeforeCall(Integer agentNum, Integer connectionID, String command, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetConnectionRequest(Async)");
        }

        // verify the required parameter 'connectionID' is set
        if (connectionID == null) {
            throw new ApiException("Missing the required parameter 'connectionID' when calling protocolTelnetConnectionRequest(Async)");
        }

        // verify the required parameter 'command' is set
        if (command == null) {
            throw new ApiException("Missing the required parameter 'command' when calling protocolTelnetConnectionRequest(Async)");
        }

        return protocolTelnetConnectionRequestCall(agentNum, connectionID, command, _callback);

    }

    /**
     * Executes the command asynchronously .
     * Equivalent of the command typed in by the user.
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param command  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetConnectionRequest(Integer agentNum, Integer connectionID, String command) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetConnectionRequestWithHttpInfo(agentNum, connectionID, command);
        return localVarResp.getData();
    }

    /**
     * Executes the command asynchronously .
     * Equivalent of the command typed in by the user.
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param command  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetConnectionRequestWithHttpInfo(Integer agentNum, Integer connectionID, String command) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetConnectionRequestValidateBeforeCall(agentNum, connectionID, command, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Executes the command asynchronously . (asynchronously)
     * Equivalent of the command typed in by the user.
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param command  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetConnectionRequestAsync(Integer agentNum, Integer connectionID, String command, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetConnectionRequestValidateBeforeCall(agentNum, connectionID, command, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetConnectionSignal
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param signalName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetConnectionSignalCall(Integer agentNum, Integer connectionID, String signalName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/connection/signal/{connectionID}/{signalName}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "connectionID" + "}", localVarApiClient.escapeString(connectionID.toString()))
            .replace("{" + "signalName" + "}", localVarApiClient.escapeString(signalName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetConnectionSignalValidateBeforeCall(Integer agentNum, Integer connectionID, String signalName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetConnectionSignal(Async)");
        }

        // verify the required parameter 'connectionID' is set
        if (connectionID == null) {
            throw new ApiException("Missing the required parameter 'connectionID' when calling protocolTelnetConnectionSignal(Async)");
        }

        // verify the required parameter 'signalName' is set
        if (signalName == null) {
            throw new ApiException("Missing the required parameter 'signalName' when calling protocolTelnetConnectionSignal(Async)");
        }

        return protocolTelnetConnectionSignalCall(agentNum, connectionID, signalName, _callback);

    }

    /**
     * Triggers the asynchronous signal event with the specified signal name
     * Signal name is either connect or idle
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param signalName  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetConnectionSignal(Integer agentNum, Integer connectionID, String signalName) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetConnectionSignalWithHttpInfo(agentNum, connectionID, signalName);
        return localVarResp.getData();
    }

    /**
     * Triggers the asynchronous signal event with the specified signal name
     * Signal name is either connect or idle
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param signalName  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetConnectionSignalWithHttpInfo(Integer agentNum, Integer connectionID, String signalName) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetConnectionSignalValidateBeforeCall(agentNum, connectionID, signalName, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Triggers the asynchronous signal event with the specified signal name (asynchronously)
     * Signal name is either connect or idle
     * @param agentNum Agent to manipulate TELNET connection (required)
     * @param connectionID  (required)
     * @param signalName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetConnectionSignalAsync(Integer agentNum, Integer connectionID, String signalName, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetConnectionSignalValidateBeforeCall(agentNum, connectionID, signalName, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetGetArgs
     * @param agentNum Agent to show the TELNET argument structure (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetArgsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/get/args"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetGetArgsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetGetArgs(Async)");
        }

        return protocolTelnetGetArgsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET argument structure
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the TELNET argument structure (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public Object protocolTelnetGetArgs(Integer agentNum) throws ApiException {
        ApiResponse<Object> localVarResp = protocolTelnetGetArgsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET argument structure
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the TELNET argument structure (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> protocolTelnetGetArgsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetGetArgsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET argument structure (asynchronously)
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the TELNET argument structure (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetArgsAsync(Integer agentNum, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetGetArgsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetGetConfig
     * @param agentNum Agent to show the TELNET configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetConfigCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/get/config"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetGetConfigValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetGetConfig(Async)");
        }

        return protocolTelnetGetConfigCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET configuration
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the TELNET configuration (required)
     * @return ConfigTELNET
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigTELNET protocolTelnetGetConfig(Integer agentNum) throws ApiException {
        ApiResponse<ConfigTELNET> localVarResp = protocolTelnetGetConfigWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET configuration
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the TELNET configuration (required)
     * @return ApiResponse&lt;ConfigTELNET&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigTELNET> protocolTelnetGetConfigWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetGetConfigValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigTELNET>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET configuration (asynchronously)
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to show the TELNET configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetConfigAsync(Integer agentNum, final ApiCallback<ConfigTELNET> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetGetConfigValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigTELNET>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetGetStatistics
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetStatisticsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/get/statistics"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetGetStatisticsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetGetStatistics(Async)");
        }

        return protocolTelnetGetStatisticsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET statistics
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show TELNET statistics (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> protocolTelnetGetStatistics(Integer agentNum) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = protocolTelnetGetStatisticsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET statistics
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show TELNET statistics (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> protocolTelnetGetStatisticsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetGetStatisticsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET statistics (asynchronously)
     * Statistics of fields indicated in the headers
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetStatisticsAsync(Integer agentNum, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetGetStatisticsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetGetStatsHdr
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetStatsHdrCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/protocol/msg/telnet/get/stats_hdr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetGetStatsHdrValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return protocolTelnetGetStatsHdrCall(_callback);

    }

    /**
     * Show the TELNET statistics headers
     * The headers of statistics fields
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetGetStatsHdr() throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetGetStatsHdrWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Show the TELNET statistics headers
     * The headers of statistics fields
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetGetStatsHdrWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetGetStatsHdrValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the TELNET statistics headers (asynchronously)
     * The headers of statistics fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetStatsHdrAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetGetStatsHdrValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetGetTrace
     * @param agentNum Agent to show whether TELNET tracing is enabled (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetTraceCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/get/trace"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetGetTraceValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetGetTrace(Async)");
        }

        return protocolTelnetGetTraceCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether TELNET tracing is enabled (required)
     * @return ConfigTELNET
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ConfigTELNET protocolTelnetGetTrace(Integer agentNum) throws ApiException {
        ApiResponse<ConfigTELNET> localVarResp = protocolTelnetGetTraceWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether TELNET tracing is enabled (required)
     * @return ApiResponse&lt;ConfigTELNET&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigTELNET> protocolTelnetGetTraceWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetGetTraceValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<ConfigTELNET>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET traffic tracing (asynchronously)
     * Trace 1 means enabled, 0 means not
     * @param agentNum Agent to show whether TELNET tracing is enabled (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetGetTraceAsync(Integer agentNum, final ApiCallback<ConfigTELNET> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetGetTraceValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<ConfigTELNET>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetIpaliasDisable
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasDisableCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/disable/{ipaddress}/{port}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "ipaddress" + "}", localVarApiClient.escapeString(ipaddress.toString()))
            .replace("{" + "port" + "}", localVarApiClient.escapeString(port.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetIpaliasDisableValidateBeforeCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasDisable(Async)");
        }

        // verify the required parameter 'ipaddress' is set
        if (ipaddress == null) {
            throw new ApiException("Missing the required parameter 'ipaddress' when calling protocolTelnetIpaliasDisable(Async)");
        }

        // verify the required parameter 'port' is set
        if (port == null) {
            throw new ApiException("Missing the required parameter 'port' when calling protocolTelnetIpaliasDisable(Async)");
        }

        return protocolTelnetIpaliasDisableCall(agentNum, ipaddress, port, _callback);

    }

    /**
     * Disable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolTelnetIpaliasDisable(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        ApiResponse<String> localVarResp = protocolTelnetIpaliasDisableWithHttpInfo(agentNum, ipaddress, port);
        return localVarResp.getData();
    }

    /**
     * Disable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolTelnetIpaliasDisableWithHttpInfo(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetIpaliasDisableValidateBeforeCall(agentNum, ipaddress, port, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable individual IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasDisableAsync(Integer agentNum, String ipaddress, Integer port, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetIpaliasDisableValidateBeforeCall(agentNum, ipaddress, port, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetIpaliasEnable
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasEnableCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/enable/{ipaddress}/{port}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "ipaddress" + "}", localVarApiClient.escapeString(ipaddress.toString()))
            .replace("{" + "port" + "}", localVarApiClient.escapeString(port.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetIpaliasEnableValidateBeforeCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasEnable(Async)");
        }

        // verify the required parameter 'ipaddress' is set
        if (ipaddress == null) {
            throw new ApiException("Missing the required parameter 'ipaddress' when calling protocolTelnetIpaliasEnable(Async)");
        }

        // verify the required parameter 'port' is set
        if (port == null) {
            throw new ApiException("Missing the required parameter 'port' when calling protocolTelnetIpaliasEnable(Async)");
        }

        return protocolTelnetIpaliasEnableCall(agentNum, ipaddress, port, _callback);

    }

    /**
     * Enable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolTelnetIpaliasEnable(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        ApiResponse<String> localVarResp = protocolTelnetIpaliasEnableWithHttpInfo(agentNum, ipaddress, port);
        return localVarResp.getData();
    }

    /**
     * Enable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolTelnetIpaliasEnableWithHttpInfo(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetIpaliasEnableValidateBeforeCall(agentNum, ipaddress, port, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable individual IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasEnableAsync(Integer agentNum, String ipaddress, Integer port, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetIpaliasEnableValidateBeforeCall(agentNum, ipaddress, port, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetIpaliasIsenabled
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasIsenabledCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/isenabled/{ipaddress}/{port}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "ipaddress" + "}", localVarApiClient.escapeString(ipaddress.toString()))
            .replace("{" + "port" + "}", localVarApiClient.escapeString(port.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetIpaliasIsenabledValidateBeforeCall(Integer agentNum, String ipaddress, Integer port, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasIsenabled(Async)");
        }

        // verify the required parameter 'ipaddress' is set
        if (ipaddress == null) {
            throw new ApiException("Missing the required parameter 'ipaddress' when calling protocolTelnetIpaliasIsenabled(Async)");
        }

        // verify the required parameter 'port' is set
        if (port == null) {
            throw new ApiException("Missing the required parameter 'port' when calling protocolTelnetIpaliasIsenabled(Async)");
        }

        return protocolTelnetIpaliasIsenabledCall(agentNum, ipaddress, port, _callback);

    }

    /**
     * Check individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolTelnetIpaliasIsenabled(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        ApiResponse<String> localVarResp = protocolTelnetIpaliasIsenabledWithHttpInfo(agentNum, ipaddress, port);
        return localVarResp.getData();
    }

    /**
     * Check individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolTelnetIpaliasIsenabledWithHttpInfo(Integer agentNum, String ipaddress, Integer port) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetIpaliasIsenabledValidateBeforeCall(agentNum, ipaddress, port, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check individual IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param ipaddress  (required)
     * @param port  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasIsenabledAsync(Integer agentNum, String ipaddress, Integer port, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetIpaliasIsenabledValidateBeforeCall(agentNum, ipaddress, port, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetIpaliasList
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasListCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/list"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetIpaliasListValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasList(Async)");
        }

        return protocolTelnetIpaliasListCall(agentNum, _callback);

    }

    /**
     * List all IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @return List&lt;IPAlias&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<IPAlias> protocolTelnetIpaliasList(Integer agentNum) throws ApiException {
        ApiResponse<List<IPAlias>> localVarResp = protocolTelnetIpaliasListWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * List all IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @return ApiResponse&lt;List&lt;IPAlias&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IPAlias>> protocolTelnetIpaliasListWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetIpaliasListValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<IPAlias>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all IP aliases on the agent and the simulator host (asynchronously)
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param agentNum Agent to manipulate TELNET IP alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetIpaliasListAsync(Integer agentNum, final ApiCallback<List<IPAlias>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetIpaliasListValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<IPAlias>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetServerGetConnections
     * @param agentNum Agent to show TELNET configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetConnectionsCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/connections"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetServerGetConnectionsValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetConnections(Async)");
        }

        return protocolTelnetServerGetConnectionsCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET connections
     * IDs of all connected connections
     * @param agentNum Agent to show TELNET configuration (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> protocolTelnetServerGetConnections(Integer agentNum) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = protocolTelnetServerGetConnectionsWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET connections
     * IDs of all connected connections
     * @param agentNum Agent to show TELNET configuration (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> protocolTelnetServerGetConnectionsWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetServerGetConnectionsValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET connections (asynchronously)
     * IDs of all connected connections
     * @param agentNum Agent to show TELNET configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetConnectionsAsync(Integer agentNum, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetServerGetConnectionsValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetServerGetKeymap
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetKeymapCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/keymap"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetServerGetKeymapValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetKeymap(Async)");
        }

        return protocolTelnetServerGetKeymapCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET keymap file name
     * Keymap file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetServerGetKeymap(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetServerGetKeymapWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET keymap file name
     * Keymap file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetServerGetKeymapWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetServerGetKeymapValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET keymap file name (asynchronously)
     * Keymap file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetKeymapAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetServerGetKeymapValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetServerGetRulesdb
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetRulesdbCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/rulesdb"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetServerGetRulesdbValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetRulesdb(Async)");
        }

        return protocolTelnetServerGetRulesdbCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET rules db file name
     * Rules db file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetServerGetRulesdb(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetServerGetRulesdbWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET rules db file name
     * Rules db file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetServerGetRulesdbWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetServerGetRulesdbValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET rules db file name (asynchronously)
     * Rules db file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetRulesdbAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetServerGetRulesdbValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetServerGetState
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetStateCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/state"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetServerGetStateValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetState(Async)");
        }

        return protocolTelnetServerGetStateCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET server state
     * Return 1 means accepting connections, 0 not
     * @param agentNum Agent to show TELNET statistics (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> protocolTelnetServerGetState(Integer agentNum) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = protocolTelnetServerGetStateWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET server state
     * Return 1 means accepting connections, 0 not
     * @param agentNum Agent to show TELNET statistics (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> protocolTelnetServerGetStateWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetServerGetStateValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET server state (asynchronously)
     * Return 1 means accepting connections, 0 not
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetStateAsync(Integer agentNum, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetServerGetStateValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetServerGetUserdb
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetUserdbCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/userdb"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetServerGetUserdbValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetUserdb(Async)");
        }

        return protocolTelnetServerGetUserdbCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET user db file name
     * User db file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> protocolTelnetServerGetUserdb(Integer agentNum) throws ApiException {
        ApiResponse<List<String>> localVarResp = protocolTelnetServerGetUserdbWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET user db file name
     * User db file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> protocolTelnetServerGetUserdbWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetServerGetUserdbValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET user db file name (asynchronously)
     * User db file name
     * @param agentNum Agent to show TELNET statistics (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetUserdbAsync(Integer agentNum, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetServerGetUserdbValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetServerGetUsers
     * @param agentNum Agent to show TELNET configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetUsersCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/users"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetServerGetUsersValidateBeforeCall(Integer agentNum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetUsers(Async)");
        }

        return protocolTelnetServerGetUsersCall(agentNum, _callback);

    }

    /**
     * Show the agent&#39;s TELNET users
     * List of users
     * @param agentNum Agent to show TELNET configuration (required)
     * @return List&lt;TelnetUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<TelnetUser> protocolTelnetServerGetUsers(Integer agentNum) throws ApiException {
        ApiResponse<List<TelnetUser>> localVarResp = protocolTelnetServerGetUsersWithHttpInfo(agentNum);
        return localVarResp.getData();
    }

    /**
     * Show the agent&#39;s TELNET users
     * List of users
     * @param agentNum Agent to show TELNET configuration (required)
     * @return ApiResponse&lt;List&lt;TelnetUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TelnetUser>> protocolTelnetServerGetUsersWithHttpInfo(Integer agentNum) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetServerGetUsersValidateBeforeCall(agentNum, null);
        Type localVarReturnType = new TypeToken<List<TelnetUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the agent&#39;s TELNET users (asynchronously)
     * List of users
     * @param agentNum Agent to show TELNET configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetServerGetUsersAsync(Integer agentNum, final ApiCallback<List<TelnetUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetServerGetUsersValidateBeforeCall(agentNum, _callback);
        Type localVarReturnType = new TypeToken<List<TelnetUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetSetConfig
     * @param agentNum Agent to set the TELNET configuration (required)
     * @param argument Parameter to set the TELNET configuration (required)
     * @param value Value to set the TELNET configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetSetConfigCall(Integer agentNum, String argument, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/set/config/{argument}/{value}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "argument" + "}", localVarApiClient.escapeString(argument.toString()))
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetSetConfigValidateBeforeCall(Integer agentNum, String argument, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetSetConfig(Async)");
        }

        // verify the required parameter 'argument' is set
        if (argument == null) {
            throw new ApiException("Missing the required parameter 'argument' when calling protocolTelnetSetConfig(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling protocolTelnetSetConfig(Async)");
        }

        return protocolTelnetSetConfigCall(agentNum, argument, value, _callback);

    }

    /**
     * Set the agent&#39;s TELNET configuration
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the TELNET configuration (required)
     * @param argument Parameter to set the TELNET configuration (required)
     * @param value Value to set the TELNET configuration (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolTelnetSetConfig(Integer agentNum, String argument, String value) throws ApiException {
        ApiResponse<String> localVarResp = protocolTelnetSetConfigWithHttpInfo(agentNum, argument, value);
        return localVarResp.getData();
    }

    /**
     * Set the agent&#39;s TELNET configuration
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the TELNET configuration (required)
     * @param argument Parameter to set the TELNET configuration (required)
     * @param value Value to set the TELNET configuration (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolTelnetSetConfigWithHttpInfo(Integer agentNum, String argument, String value) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetSetConfigValidateBeforeCall(agentNum, argument, value, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the agent&#39;s TELNET configuration (asynchronously)
     * Agent&#39;s TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param agentNum Agent to set the TELNET configuration (required)
     * @param argument Parameter to set the TELNET configuration (required)
     * @param value Value to set the TELNET configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetSetConfigAsync(Integer agentNum, String argument, String value, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetSetConfigValidateBeforeCall(agentNum, argument, value, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protocolTelnetSetTrace
     * @param agentNum Agent to set the TELNET tracing (required)
     * @param enableOrNot Value to set the TELNET tracing (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetSetTraceCall(Integer agentNum, String enableOrNot, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/protocol/msg/telnet/set/trace/{enableOrNot}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "enableOrNot" + "}", localVarApiClient.escapeString(enableOrNot.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protocolTelnetSetTraceValidateBeforeCall(Integer agentNum, String enableOrNot, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling protocolTelnetSetTrace(Async)");
        }

        // verify the required parameter 'enableOrNot' is set
        if (enableOrNot == null) {
            throw new ApiException("Missing the required parameter 'enableOrNot' when calling protocolTelnetSetTrace(Async)");
        }

        return protocolTelnetSetTraceCall(agentNum, enableOrNot, _callback);

    }

    /**
     * Set the agent&#39;s TELNET traffic tracing
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the TELNET tracing (required)
     * @param enableOrNot Value to set the TELNET tracing (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String protocolTelnetSetTrace(Integer agentNum, String enableOrNot) throws ApiException {
        ApiResponse<String> localVarResp = protocolTelnetSetTraceWithHttpInfo(agentNum, enableOrNot);
        return localVarResp.getData();
    }

    /**
     * Set the agent&#39;s TELNET traffic tracing
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the TELNET tracing (required)
     * @param enableOrNot Value to set the TELNET tracing (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> protocolTelnetSetTraceWithHttpInfo(Integer agentNum, String enableOrNot) throws ApiException {
        okhttp3.Call localVarCall = protocolTelnetSetTraceValidateBeforeCall(agentNum, enableOrNot, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the agent&#39;s TELNET traffic tracing (asynchronously)
     * 1 to enable, 0 to disable
     * @param agentNum Agent to set the TELNET tracing (required)
     * @param enableOrNot Value to set the TELNET tracing (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protocolTelnetSetTraceAsync(Integer agentNum, String enableOrNot, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = protocolTelnetSetTraceValidateBeforeCall(agentNum, enableOrNot, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
