/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigPROXY
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:08.940356-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigPROXY {
  public static final String SERIALIZED_NAME_T_C_P_N_O_D_E_L_A_Y = "TCP_NODELAY";
  @SerializedName(SERIALIZED_NAME_T_C_P_N_O_D_E_L_A_Y)
  private Integer TCP_NODELAY;

  public static final String SERIALIZED_NAME_CLIENT_TO_SERVER = "client_to_server";
  @SerializedName(SERIALIZED_NAME_CLIENT_TO_SERVER)
  private String clientToServer;

  public static final String SERIALIZED_NAME_DISCONNECT_DELAY = "disconnect_delay";
  @SerializedName(SERIALIZED_NAME_DISCONNECT_DELAY)
  private Integer disconnectDelay;

  public static final String SERIALIZED_NAME_MAX_CONNECTS = "max_connects";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTS)
  private Integer maxConnects;

  public static final String SERIALIZED_NAME_PORTNO = "portno";
  @SerializedName(SERIALIZED_NAME_PORTNO)
  private Integer portno;

  public static final String SERIALIZED_NAME_PRE_CONNECT = "pre_connect";
  @SerializedName(SERIALIZED_NAME_PRE_CONNECT)
  private String preConnect;

  public static final String SERIALIZED_NAME_SERVER_TO_CLIENT = "server_to_client";
  @SerializedName(SERIALIZED_NAME_SERVER_TO_CLIENT)
  private String serverToClient;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TRANSPORT = "transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private String transport;

  public ConfigPROXY() {
  }

  public ConfigPROXY TCP_NODELAY(Integer TCP_NODELAY) {
    this.TCP_NODELAY = TCP_NODELAY;
    return this;
  }

  /**
   * Get TCP_NODELAY
   * @return TCP_NODELAY
   */
  @javax.annotation.Nullable
  public Integer getTCPNODELAY() {
    return TCP_NODELAY;
  }

  public void setTCPNODELAY(Integer TCP_NODELAY) {
    this.TCP_NODELAY = TCP_NODELAY;
  }


  public ConfigPROXY clientToServer(String clientToServer) {
    this.clientToServer = clientToServer;
    return this;
  }

  /**
   * Get clientToServer
   * @return clientToServer
   */
  @javax.annotation.Nullable
  public String getClientToServer() {
    return clientToServer;
  }

  public void setClientToServer(String clientToServer) {
    this.clientToServer = clientToServer;
  }


  public ConfigPROXY disconnectDelay(Integer disconnectDelay) {
    this.disconnectDelay = disconnectDelay;
    return this;
  }

  /**
   * Get disconnectDelay
   * @return disconnectDelay
   */
  @javax.annotation.Nullable
  public Integer getDisconnectDelay() {
    return disconnectDelay;
  }

  public void setDisconnectDelay(Integer disconnectDelay) {
    this.disconnectDelay = disconnectDelay;
  }


  public ConfigPROXY maxConnects(Integer maxConnects) {
    this.maxConnects = maxConnects;
    return this;
  }

  /**
   * Get maxConnects
   * @return maxConnects
   */
  @javax.annotation.Nullable
  public Integer getMaxConnects() {
    return maxConnects;
  }

  public void setMaxConnects(Integer maxConnects) {
    this.maxConnects = maxConnects;
  }


  public ConfigPROXY portno(Integer portno) {
    this.portno = portno;
    return this;
  }

  /**
   * Get portno
   * @return portno
   */
  @javax.annotation.Nullable
  public Integer getPortno() {
    return portno;
  }

  public void setPortno(Integer portno) {
    this.portno = portno;
  }


  public ConfigPROXY preConnect(String preConnect) {
    this.preConnect = preConnect;
    return this;
  }

  /**
   * Get preConnect
   * @return preConnect
   */
  @javax.annotation.Nullable
  public String getPreConnect() {
    return preConnect;
  }

  public void setPreConnect(String preConnect) {
    this.preConnect = preConnect;
  }


  public ConfigPROXY serverToClient(String serverToClient) {
    this.serverToClient = serverToClient;
    return this;
  }

  /**
   * Get serverToClient
   * @return serverToClient
   */
  @javax.annotation.Nullable
  public String getServerToClient() {
    return serverToClient;
  }

  public void setServerToClient(String serverToClient) {
    this.serverToClient = serverToClient;
  }


  public ConfigPROXY target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public ConfigPROXY transport(String transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   */
  @javax.annotation.Nullable
  public String getTransport() {
    return transport;
  }

  public void setTransport(String transport) {
    this.transport = transport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigPROXY configPROXY = (ConfigPROXY) o;
    return Objects.equals(this.TCP_NODELAY, configPROXY.TCP_NODELAY) &&
        Objects.equals(this.clientToServer, configPROXY.clientToServer) &&
        Objects.equals(this.disconnectDelay, configPROXY.disconnectDelay) &&
        Objects.equals(this.maxConnects, configPROXY.maxConnects) &&
        Objects.equals(this.portno, configPROXY.portno) &&
        Objects.equals(this.preConnect, configPROXY.preConnect) &&
        Objects.equals(this.serverToClient, configPROXY.serverToClient) &&
        Objects.equals(this.target, configPROXY.target) &&
        Objects.equals(this.transport, configPROXY.transport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(TCP_NODELAY, clientToServer, disconnectDelay, maxConnects, portno, preConnect, serverToClient, target, transport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigPROXY {\n");
    sb.append("    TCP_NODELAY: ").append(toIndentedString(TCP_NODELAY)).append("\n");
    sb.append("    clientToServer: ").append(toIndentedString(clientToServer)).append("\n");
    sb.append("    disconnectDelay: ").append(toIndentedString(disconnectDelay)).append("\n");
    sb.append("    maxConnects: ").append(toIndentedString(maxConnects)).append("\n");
    sb.append("    portno: ").append(toIndentedString(portno)).append("\n");
    sb.append("    preConnect: ").append(toIndentedString(preConnect)).append("\n");
    sb.append("    serverToClient: ").append(toIndentedString(serverToClient)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TCP_NODELAY");
    openapiFields.add("client_to_server");
    openapiFields.add("disconnect_delay");
    openapiFields.add("max_connects");
    openapiFields.add("portno");
    openapiFields.add("pre_connect");
    openapiFields.add("server_to_client");
    openapiFields.add("target");
    openapiFields.add("transport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigPROXY
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigPROXY.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigPROXY is not found in the empty JSON string", ConfigPROXY.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigPROXY.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigPROXY` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_to_server") != null && !jsonObj.get("client_to_server").isJsonNull()) && !jsonObj.get("client_to_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_to_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_to_server").toString()));
      }
      if ((jsonObj.get("pre_connect") != null && !jsonObj.get("pre_connect").isJsonNull()) && !jsonObj.get("pre_connect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_connect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_connect").toString()));
      }
      if ((jsonObj.get("server_to_client") != null && !jsonObj.get("server_to_client").isJsonNull()) && !jsonObj.get("server_to_client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_to_client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_to_client").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("transport") != null && !jsonObj.get("transport").isJsonNull()) && !jsonObj.get("transport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigPROXY.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigPROXY' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigPROXY> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigPROXY.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigPROXY>() {
           @Override
           public void write(JsonWriter out, ConfigPROXY value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigPROXY read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigPROXY given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigPROXY
   * @throws IOException if the JSON string is invalid with respect to ConfigPROXY
   */
  public static ConfigPROXY fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigPROXY.class);
  }

  /**
   * Convert an instance of ConfigPROXY to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

