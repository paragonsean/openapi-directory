/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValuespaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ValuespaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValuespaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for add
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/add/{object}/{instance}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling add(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling add(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling add(Async)");
        }

        return addCall(agentNum, _object, instance, _callback);

    }

    /**
     * Add an entry to a table.
     * The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String add(Integer agentNum, String _object, String instance) throws ApiException {
        ApiResponse<String> localVarResp = addWithHttpInfo(agentNum, _object, instance);
        return localVarResp.getData();
    }

    /**
     * Add an entry to a table.
     * The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> addWithHttpInfo(Integer agentNum, String _object, String instance) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(agentNum, _object, instance, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an entry to a table. (asynchronously)
     * The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAsync(Integer agentNum, String _object, String instance, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(agentNum, _object, instance, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evalValue
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evalValueCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/eval/{object}/{instance}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evalValueValidateBeforeCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling evalValue(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling evalValue(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling evalValue(Async)");
        }

        return evalValueCall(agentNum, _object, instance, _callback);

    }

    /**
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String evalValue(Integer agentNum, String _object, String instance) throws ApiException {
        ApiResponse<String> localVarResp = evalValueWithHttpInfo(agentNum, _object, instance);
        return localVarResp.getData();
    }

    /**
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> evalValueWithHttpInfo(Integer agentNum, String _object, String instance) throws ApiException {
        okhttp3.Call localVarCall = evalValueValidateBeforeCall(agentNum, _object, instance, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests. (asynchronously)
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evalValueAsync(Integer agentNum, String _object, String instance, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = evalValueValidateBeforeCall(agentNum, _object, instance, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInfo
     * @param agentNum Agent to show the information of the object (required)
     * @param _object Object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInfoCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/info/{object}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getInfo(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getInfo(Async)");
        }

        return getInfoCall(agentNum, _object, _callback);

    }

    /**
     * Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
     * Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
     * @param agentNum Agent to show the information of the object (required)
     * @param _object Object (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String getInfo(Integer agentNum, String _object) throws ApiException {
        ApiResponse<String> localVarResp = getInfoWithHttpInfo(agentNum, _object);
        return localVarResp.getData();
    }

    /**
     * Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
     * Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
     * @param agentNum Agent to show the information of the object (required)
     * @param _object Object (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getInfoWithHttpInfo(Integer agentNum, String _object) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(agentNum, _object, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS. (asynchronously)
     * Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
     * @param agentNum Agent to show the information of the object (required)
     * @param _object Object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInfoAsync(Integer agentNum, String _object, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(agentNum, _object, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstances
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstancesCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/instances/{object}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstancesValidateBeforeCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getInstances(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getInstances(Async)");
        }

        return getInstancesCall(agentNum, _object, _callback);

    }

    /**
     * Display the MIB object instances for the specified object.
     * This enables MIB browsing of the MIB on the current agent.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getInstances(Integer agentNum, String _object) throws ApiException {
        ApiResponse<List<String>> localVarResp = getInstancesWithHttpInfo(agentNum, _object);
        return localVarResp.getData();
    }

    /**
     * Display the MIB object instances for the specified object.
     * This enables MIB browsing of the MIB on the current agent.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getInstancesWithHttpInfo(Integer agentNum, String _object) throws ApiException {
        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(agentNum, _object, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the MIB object instances for the specified object. (asynchronously)
     * This enables MIB browsing of the MIB on the current agent.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstancesAsync(Integer agentNum, String _object, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(agentNum, _object, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMib
     * @param agentNum Agent to show the MIB (required)
     * @param _object Object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMibCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/mib/{object}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMibValidateBeforeCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getMib(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getMib(Async)");
        }

        return getMibCall(agentNum, _object, _callback);

    }

    /**
     * Return the MIB that defines the specified object.
     * This will only return a MIB name if the object is unmistakeably defined in a MIB.
     * @param agentNum Agent to show the MIB (required)
     * @param _object Object (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String getMib(Integer agentNum, String _object) throws ApiException {
        ApiResponse<String> localVarResp = getMibWithHttpInfo(agentNum, _object);
        return localVarResp.getData();
    }

    /**
     * Return the MIB that defines the specified object.
     * This will only return a MIB name if the object is unmistakeably defined in a MIB.
     * @param agentNum Agent to show the MIB (required)
     * @param _object Object (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getMibWithHttpInfo(Integer agentNum, String _object) throws ApiException {
        okhttp3.Call localVarCall = getMibValidateBeforeCall(agentNum, _object, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the MIB that defines the specified object. (asynchronously)
     * This will only return a MIB name if the object is unmistakeably defined in a MIB.
     * @param agentNum Agent to show the MIB (required)
     * @param _object Object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMibAsync(Integer agentNum, String _object, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMibValidateBeforeCall(agentNum, _object, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getName
     * @param agentNum Agent to show the object (required)
     * @param OID OID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNameCall(Integer agentNum, String OID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/name/{OID}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "OID" + "}", localVarApiClient.escapeString(OID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNameValidateBeforeCall(Integer agentNum, String OID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getName(Async)");
        }

        // verify the required parameter 'OID' is set
        if (OID == null) {
            throw new ApiException("Missing the required parameter 'OID' when calling getName(Async)");
        }

        return getNameCall(agentNum, OID, _callback);

    }

    /**
     * Return the symbolic name of the specified object identifier.
     * Return the symbolic name of the specified object identifier.
     * @param agentNum Agent to show the object (required)
     * @param OID OID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String getName(Integer agentNum, String OID) throws ApiException {
        ApiResponse<String> localVarResp = getNameWithHttpInfo(agentNum, OID);
        return localVarResp.getData();
    }

    /**
     * Return the symbolic name of the specified object identifier.
     * Return the symbolic name of the specified object identifier.
     * @param agentNum Agent to show the object (required)
     * @param OID OID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getNameWithHttpInfo(Integer agentNum, String OID) throws ApiException {
        okhttp3.Call localVarCall = getNameValidateBeforeCall(agentNum, OID, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the symbolic name of the specified object identifier. (asynchronously)
     * Return the symbolic name of the specified object identifier.
     * @param agentNum Agent to show the object (required)
     * @param OID OID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNameAsync(Integer agentNum, String OID, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNameValidateBeforeCall(agentNum, OID, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjects
     * @param agentNum Agent to show the OID branches (required)
     * @param OID Current OID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsCall(Integer agentNum, String OID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/list/{OID}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "OID" + "}", localVarApiClient.escapeString(OID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectsValidateBeforeCall(Integer agentNum, String OID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getObjects(Async)");
        }

        // verify the required parameter 'OID' is set
        if (OID == null) {
            throw new ApiException("Missing the required parameter 'OID' when calling getObjects(Async)");
        }

        return getObjectsCall(agentNum, OID, _callback);

    }

    /**
     * Display the MIB objects below the current position
     * This command is similar to the ls or dir operating system commands to list filesystem directories.
     * @param agentNum Agent to show the OID branches (required)
     * @param OID Current OID (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getObjects(Integer agentNum, String OID) throws ApiException {
        ApiResponse<List<String>> localVarResp = getObjectsWithHttpInfo(agentNum, OID);
        return localVarResp.getData();
    }

    /**
     * Display the MIB objects below the current position
     * This command is similar to the ls or dir operating system commands to list filesystem directories.
     * @param agentNum Agent to show the OID branches (required)
     * @param OID Current OID (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getObjectsWithHttpInfo(Integer agentNum, String OID) throws ApiException {
        okhttp3.Call localVarCall = getObjectsValidateBeforeCall(agentNum, OID, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the MIB objects below the current position (asynchronously)
     * This command is similar to the ls or dir operating system commands to list filesystem directories.
     * @param agentNum Agent to show the OID branches (required)
     * @param OID Current OID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectsAsync(Integer agentNum, String OID, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectsValidateBeforeCall(agentNum, OID, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOid
     * @param agentNum Agent to show the OID (required)
     * @param _object Object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOidCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/oid/{object}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOidValidateBeforeCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getOid(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getOid(Async)");
        }

        return getOidCall(agentNum, _object, _callback);

    }

    /**
     * Return the numeric OID of the specified object.
     * Return the numeric OID of the specified object.
     * @param agentNum Agent to show the OID (required)
     * @param _object Object (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String getOid(Integer agentNum, String _object) throws ApiException {
        ApiResponse<String> localVarResp = getOidWithHttpInfo(agentNum, _object);
        return localVarResp.getData();
    }

    /**
     * Return the numeric OID of the specified object.
     * Return the numeric OID of the specified object.
     * @param agentNum Agent to show the OID (required)
     * @param _object Object (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getOidWithHttpInfo(Integer agentNum, String _object) throws ApiException {
        okhttp3.Call localVarCall = getOidValidateBeforeCall(agentNum, _object, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the numeric OID of the specified object. (asynchronously)
     * Return the numeric OID of the specified object.
     * @param agentNum Agent to show the OID (required)
     * @param _object Object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOidAsync(Integer agentNum, String _object, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOidValidateBeforeCall(agentNum, _object, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getState
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStateCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/state/get/{object}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStateValidateBeforeCall(Integer agentNum, String _object, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getState(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getState(Async)");
        }

        return getStateCall(agentNum, _object, _callback);

    }

    /**
     * Get the state of a MIB object object.
     * To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String getState(Integer agentNum, String _object) throws ApiException {
        ApiResponse<String> localVarResp = getStateWithHttpInfo(agentNum, _object);
        return localVarResp.getData();
    }

    /**
     * Get the state of a MIB object object.
     * To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getStateWithHttpInfo(Integer agentNum, String _object) throws ApiException {
        okhttp3.Call localVarCall = getStateValidateBeforeCall(agentNum, _object, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the state of a MIB object object. (asynchronously)
     * To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStateAsync(Integer agentNum, String _object, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStateValidateBeforeCall(agentNum, _object, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValue
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param variable Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValueCall(Integer agentNum, String _object, String instance, String variable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/get/{object}/{instance}/{variable}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "variable" + "}", localVarApiClient.escapeString(variable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValueValidateBeforeCall(Integer agentNum, String _object, String instance, String variable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getValue(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getValue(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling getValue(Async)");
        }

        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling getValue(Async)");
        }

        return getValueCall(agentNum, _object, instance, variable, _callback);

    }

    /**
     * Get a variable in the Value Space.
     * Get a variable in the Value Space.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param variable Object (column) of the table in the agent&#39;s value space (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String getValue(Integer agentNum, String _object, String instance, String variable) throws ApiException {
        ApiResponse<String> localVarResp = getValueWithHttpInfo(agentNum, _object, instance, variable);
        return localVarResp.getData();
    }

    /**
     * Get a variable in the Value Space.
     * Get a variable in the Value Space.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param variable Object (column) of the table in the agent&#39;s value space (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getValueWithHttpInfo(Integer agentNum, String _object, String instance, String variable) throws ApiException {
        okhttp3.Call localVarCall = getValueValidateBeforeCall(agentNum, _object, instance, variable, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a variable in the Value Space. (asynchronously)
     * Get a variable in the Value Space.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param variable Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValueAsync(Integer agentNum, String _object, String instance, String variable, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValueValidateBeforeCall(agentNum, _object, instance, variable, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariables
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/variables/{object}/{instance}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariablesValidateBeforeCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling getVariables(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling getVariables(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling getVariables(Async)");
        }

        return getVariablesCall(agentNum, _object, instance, _callback);

    }

    /**
     * Display the variables for the specified instance instance for the specified MIB object object
     * This enables variable browsing of the MIB on the current agent.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getVariables(Integer agentNum, String _object, String instance) throws ApiException {
        ApiResponse<List<String>> localVarResp = getVariablesWithHttpInfo(agentNum, _object, instance);
        return localVarResp.getData();
    }

    /**
     * Display the variables for the specified instance instance for the specified MIB object object
     * This enables variable browsing of the MIB on the current agent.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getVariablesWithHttpInfo(Integer agentNum, String _object, String instance) throws ApiException {
        okhttp3.Call localVarCall = getVariablesValidateBeforeCall(agentNum, _object, instance, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display the variables for the specified instance instance for the specified MIB object object (asynchronously)
     * This enables variable browsing of the MIB on the current agent.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesAsync(Integer agentNum, String _object, String instance, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariablesValidateBeforeCall(agentNum, _object, instance, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mevalValue
     * @param agentNum Agent of the value space (required)
     * @param objInsArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mevalValueCall(Integer agentNum, List<List<String>> objInsArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/meval/{objInsArray}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "objInsArray" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", objInsArray)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mevalValueValidateBeforeCall(Integer agentNum, List<List<String>> objInsArray, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling mevalValue(Async)");
        }

        // verify the required parameter 'objInsArray' is set
        if (objInsArray == null) {
            throw new ApiException("Missing the required parameter 'objInsArray' when calling mevalValue(Async)");
        }

        return mevalValueCall(agentNum, objInsArray, _callback);

    }

    /**
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * @param agentNum Agent of the value space (required)
     * @param objInsArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> mevalValue(Integer agentNum, List<List<String>> objInsArray) throws ApiException {
        ApiResponse<List<String>> localVarResp = mevalValueWithHttpInfo(agentNum, objInsArray);
        return localVarResp.getData();
    }

    /**
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * @param agentNum Agent of the value space (required)
     * @param objInsArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> mevalValueWithHttpInfo(Integer agentNum, List<List<String>> objInsArray) throws ApiException {
        okhttp3.Call localVarCall = mevalValueValidateBeforeCall(agentNum, objInsArray, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests. (asynchronously)
     * Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
     * @param agentNum Agent of the value space (required)
     * @param objInsArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mevalValueAsync(Integer agentNum, List<List<String>> objInsArray, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mevalValueValidateBeforeCall(agentNum, objInsArray, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mgetValue
     * @param agentNum Agent of the value space (required)
     * @param objInsVarArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mgetValueCall(Integer agentNum, List<List<String>> objInsVarArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/mget/{objInsVarArray}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "objInsVarArray" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", objInsVarArray)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mgetValueValidateBeforeCall(Integer agentNum, List<List<String>> objInsVarArray, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling mgetValue(Async)");
        }

        // verify the required parameter 'objInsVarArray' is set
        if (objInsVarArray == null) {
            throw new ApiException("Missing the required parameter 'objInsVarArray' when calling mgetValue(Async)");
        }

        return mgetValueCall(agentNum, objInsVarArray, _callback);

    }

    /**
     * Get multiple variables in the Value Space.
     * This is a performance optimization of the mimic value get command, to be used when many variables are requested.
     * @param agentNum Agent of the value space (required)
     * @param objInsVarArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> mgetValue(Integer agentNum, List<List<String>> objInsVarArray) throws ApiException {
        ApiResponse<List<String>> localVarResp = mgetValueWithHttpInfo(agentNum, objInsVarArray);
        return localVarResp.getData();
    }

    /**
     * Get multiple variables in the Value Space.
     * This is a performance optimization of the mimic value get command, to be used when many variables are requested.
     * @param agentNum Agent of the value space (required)
     * @param objInsVarArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> mgetValueWithHttpInfo(Integer agentNum, List<List<String>> objInsVarArray) throws ApiException {
        okhttp3.Call localVarCall = mgetValueValidateBeforeCall(agentNum, objInsVarArray, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multiple variables in the Value Space. (asynchronously)
     * This is a performance optimization of the mimic value get command, to be used when many variables are requested.
     * @param agentNum Agent of the value space (required)
     * @param objInsVarArray Multiple objects or object (column) of the table in the agent&#39;s value space. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mgetValueAsync(Integer agentNum, List<List<String>> objInsVarArray, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mgetValueValidateBeforeCall(agentNum, objInsVarArray, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for msetValue
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarValArray (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call msetValueCall(Integer agentNum, List<List<String>> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/mset"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call msetValueValidateBeforeCall(Integer agentNum, List<List<String>> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling msetValue(Async)");
        }

        return msetValueCall(agentNum, requestBody, _callback);

    }

    /**
     * Set multiple variables in the Value Space.
     * This is a performance optimization of the mimic value set command, to be used when many variables are to be set.
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarValArray (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String msetValue(Integer agentNum, List<List<String>> requestBody) throws ApiException {
        ApiResponse<String> localVarResp = msetValueWithHttpInfo(agentNum, requestBody);
        return localVarResp.getData();
    }

    /**
     * Set multiple variables in the Value Space.
     * This is a performance optimization of the mimic value set command, to be used when many variables are to be set.
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarValArray (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> msetValueWithHttpInfo(Integer agentNum, List<List<String>> requestBody) throws ApiException {
        okhttp3.Call localVarCall = msetValueValidateBeforeCall(agentNum, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set multiple variables in the Value Space. (asynchronously)
     * This is a performance optimization of the mimic value set command, to be used when many variables are to be set.
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarValArray (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call msetValueAsync(Integer agentNum, List<List<String>> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = msetValueValidateBeforeCall(agentNum, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for munsetValue
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarArray (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call munsetValueCall(Integer agentNum, List<List<String>> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/munset"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call munsetValueValidateBeforeCall(Integer agentNum, List<List<String>> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling munsetValue(Async)");
        }

        return munsetValueCall(agentNum, requestBody, _callback);

    }

    /**
     * Unset multiple variables in the Value Space
     * This is a performance optimization of the mimic value unset command, to be used when many variables are to be unset.
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarArray (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String munsetValue(Integer agentNum, List<List<String>> requestBody) throws ApiException {
        ApiResponse<String> localVarResp = munsetValueWithHttpInfo(agentNum, requestBody);
        return localVarResp.getData();
    }

    /**
     * Unset multiple variables in the Value Space
     * This is a performance optimization of the mimic value unset command, to be used when many variables are to be unset.
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarArray (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> munsetValueWithHttpInfo(Integer agentNum, List<List<String>> requestBody) throws ApiException {
        okhttp3.Call localVarCall = munsetValueValidateBeforeCall(agentNum, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unset multiple variables in the Value Space (asynchronously)
     * This is a performance optimization of the mimic value unset command, to be used when many variables are to be unset.
     * @param agentNum Agent of the value space (required)
     * @param requestBody objInsVarArray (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call munsetValueAsync(Integer agentNum, List<List<String>> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = munsetValueValidateBeforeCall(agentNum, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remove
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/remove/{object}/{instance}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(Integer agentNum, String _object, String instance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling remove(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling remove(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling remove(Async)");
        }

        return removeCall(agentNum, _object, instance, _callback);

    }

    /**
     * Remove an entry from a table.
     * The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String remove(Integer agentNum, String _object, String instance) throws ApiException {
        ApiResponse<String> localVarResp = removeWithHttpInfo(agentNum, _object, instance);
        return localVarResp.getData();
    }

    /**
     * Remove an entry from a table.
     * The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> removeWithHttpInfo(Integer agentNum, String _object, String instance) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(agentNum, _object, instance, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an entry from a table. (asynchronously)
     * The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (column) of the table in the agent&#39;s value space (required)
     * @param instance Object (column) of the table in the agent&#39;s value space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAsync(Integer agentNum, String _object, String instance, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(agentNum, _object, instance, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setState
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @param state State (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setStateCall(Integer agentNum, String _object, Integer state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/state/set/{object}/{state}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "state" + "}", localVarApiClient.escapeString(state.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setStateValidateBeforeCall(Integer agentNum, String _object, Integer state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling setState(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling setState(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling setState(Async)");
        }

        return setStateCall(agentNum, _object, state, _callback);

    }

    /**
     * Set the state of a MIB object object
     * To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @param state State (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String setState(Integer agentNum, String _object, Integer state) throws ApiException {
        ApiResponse<String> localVarResp = setStateWithHttpInfo(agentNum, _object, state);
        return localVarResp.getData();
    }

    /**
     * Set the state of a MIB object object
     * To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @param state State (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> setStateWithHttpInfo(Integer agentNum, String _object, Integer state) throws ApiException {
        okhttp3.Call localVarCall = setStateValidateBeforeCall(agentNum, _object, state, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the state of a MIB object object (asynchronously)
     * To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
     * @param agentNum Agent of the value space (required)
     * @param _object Object (required)
     * @param state State (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setStateAsync(Integer agentNum, String _object, Integer state, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = setStateValidateBeforeCall(agentNum, _object, state, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setValue
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @param body Value (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setValueCall(Integer agentNum, String _object, String instance, String variable, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/set/{object}/{instance}/{variable}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "variable" + "}", localVarApiClient.escapeString(variable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setValueValidateBeforeCall(Integer agentNum, String _object, String instance, String variable, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling setValue(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling setValue(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling setValue(Async)");
        }

        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling setValue(Async)");
        }

        return setValueCall(agentNum, _object, instance, variable, body, _callback);

    }

    /**
     * Set a variable in the Value Space.
     * NOTE to set a binary string value, specify a string starting with \\\\x followed by pairs of hexadecimal digits, eg. \&quot;\\\\x 01 23 45\&quot;. This command also assigns SNMP PDU action scripts for GET* and SET requests on a MIB object. The instance parameter must be 0. The following variables enable actions, g - The specified TCL script will be run on GET or GETNEXT requests. It has to exist under the simulation directory. s - The specified script will be run on SET requests. It has to exist under the simulation directory. This command also controls advanced trap generation functionality. The following variables control trap generation r, tu, c - These variables together represent the rate settings for the trap. r and tu is the actual per second rate and c represents the total duration in seconds for which the trap is sent. As soon as the c variable is set, the trap generation begins, for this reason it should be the last variable set for a particular trap. The following variables have to be set before setting the c variable to modify the behavior of the generated trap(s). OBJECT - An object name when used as a variable is looked up during the trap send and the value of that variable is included in the PDU. OBJECT.i - This type of variable will be used to assign an optional instance for the specified object in the traps varbind. The value of this variable identifies the index. e.g. The commands below will send ifIndex.2 with a value of 5 in the linkUp trap PDU. i - This variable is used to specify any extra version specific information to the trap generation code. Here is what it can be used to represent for various SNMP versions SNMPv1 - [community_string][,[enterprise][,agent_addr]] SNMPv2c - community_string SNMPv2 - source_party,destination_party,context SNMPv3 - user_name,context v - This variable lets the user override the version of the PDU being generated. The possible values are - \&quot;1\&quot;, \&quot;2c\&quot;, \&quot;2\&quot; and \&quot;3\&quot;. o - This variable is used for traps that need extra variables to be added to the PDU along with the ones defined in the MIB as its variables. This lets the user force extra objects (along with instances if needed). All variables to be sent need to be assigned to the o variable. O - To omit any variables which are defined in the MIB you can use the O (capital o) variable. This needs to be set to the list of OIDs of the variable bindings in the order defined in the MIB. ip - The variable ip is used for generating the trap from the N-th IP alias address. a - This variable associates an action script to the trap or INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. It will be executed before each instance of the trap is sent out. I - This optional variable controls the generation of INFORM PDUs. An INFORM is sent only if the variable is non-zero, else a TRAP is generated. R, T, E - This variable associates an action script to the INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. The action script associated with the R variable will be executed on receiving a INFORM RESPONSE, the one associated with the T variable on a timeout (ie. no response), the one associated with the E variable on a report PDU. eid.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine id for the destination specified by IP-ADDRESS and optionally by PORT. eb.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine boots. et.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine time.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @param body Value (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String setValue(Integer agentNum, String _object, String instance, String variable, String body) throws ApiException {
        ApiResponse<String> localVarResp = setValueWithHttpInfo(agentNum, _object, instance, variable, body);
        return localVarResp.getData();
    }

    /**
     * Set a variable in the Value Space.
     * NOTE to set a binary string value, specify a string starting with \\\\x followed by pairs of hexadecimal digits, eg. \&quot;\\\\x 01 23 45\&quot;. This command also assigns SNMP PDU action scripts for GET* and SET requests on a MIB object. The instance parameter must be 0. The following variables enable actions, g - The specified TCL script will be run on GET or GETNEXT requests. It has to exist under the simulation directory. s - The specified script will be run on SET requests. It has to exist under the simulation directory. This command also controls advanced trap generation functionality. The following variables control trap generation r, tu, c - These variables together represent the rate settings for the trap. r and tu is the actual per second rate and c represents the total duration in seconds for which the trap is sent. As soon as the c variable is set, the trap generation begins, for this reason it should be the last variable set for a particular trap. The following variables have to be set before setting the c variable to modify the behavior of the generated trap(s). OBJECT - An object name when used as a variable is looked up during the trap send and the value of that variable is included in the PDU. OBJECT.i - This type of variable will be used to assign an optional instance for the specified object in the traps varbind. The value of this variable identifies the index. e.g. The commands below will send ifIndex.2 with a value of 5 in the linkUp trap PDU. i - This variable is used to specify any extra version specific information to the trap generation code. Here is what it can be used to represent for various SNMP versions SNMPv1 - [community_string][,[enterprise][,agent_addr]] SNMPv2c - community_string SNMPv2 - source_party,destination_party,context SNMPv3 - user_name,context v - This variable lets the user override the version of the PDU being generated. The possible values are - \&quot;1\&quot;, \&quot;2c\&quot;, \&quot;2\&quot; and \&quot;3\&quot;. o - This variable is used for traps that need extra variables to be added to the PDU along with the ones defined in the MIB as its variables. This lets the user force extra objects (along with instances if needed). All variables to be sent need to be assigned to the o variable. O - To omit any variables which are defined in the MIB you can use the O (capital o) variable. This needs to be set to the list of OIDs of the variable bindings in the order defined in the MIB. ip - The variable ip is used for generating the trap from the N-th IP alias address. a - This variable associates an action script to the trap or INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. It will be executed before each instance of the trap is sent out. I - This optional variable controls the generation of INFORM PDUs. An INFORM is sent only if the variable is non-zero, else a TRAP is generated. R, T, E - This variable associates an action script to the INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. The action script associated with the R variable will be executed on receiving a INFORM RESPONSE, the one associated with the T variable on a timeout (ie. no response), the one associated with the E variable on a report PDU. eid.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine id for the destination specified by IP-ADDRESS and optionally by PORT. eb.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine boots. et.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine time.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @param body Value (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> setValueWithHttpInfo(Integer agentNum, String _object, String instance, String variable, String body) throws ApiException {
        okhttp3.Call localVarCall = setValueValidateBeforeCall(agentNum, _object, instance, variable, body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a variable in the Value Space. (asynchronously)
     * NOTE to set a binary string value, specify a string starting with \\\\x followed by pairs of hexadecimal digits, eg. \&quot;\\\\x 01 23 45\&quot;. This command also assigns SNMP PDU action scripts for GET* and SET requests on a MIB object. The instance parameter must be 0. The following variables enable actions, g - The specified TCL script will be run on GET or GETNEXT requests. It has to exist under the simulation directory. s - The specified script will be run on SET requests. It has to exist under the simulation directory. This command also controls advanced trap generation functionality. The following variables control trap generation r, tu, c - These variables together represent the rate settings for the trap. r and tu is the actual per second rate and c represents the total duration in seconds for which the trap is sent. As soon as the c variable is set, the trap generation begins, for this reason it should be the last variable set for a particular trap. The following variables have to be set before setting the c variable to modify the behavior of the generated trap(s). OBJECT - An object name when used as a variable is looked up during the trap send and the value of that variable is included in the PDU. OBJECT.i - This type of variable will be used to assign an optional instance for the specified object in the traps varbind. The value of this variable identifies the index. e.g. The commands below will send ifIndex.2 with a value of 5 in the linkUp trap PDU. i - This variable is used to specify any extra version specific information to the trap generation code. Here is what it can be used to represent for various SNMP versions SNMPv1 - [community_string][,[enterprise][,agent_addr]] SNMPv2c - community_string SNMPv2 - source_party,destination_party,context SNMPv3 - user_name,context v - This variable lets the user override the version of the PDU being generated. The possible values are - \&quot;1\&quot;, \&quot;2c\&quot;, \&quot;2\&quot; and \&quot;3\&quot;. o - This variable is used for traps that need extra variables to be added to the PDU along with the ones defined in the MIB as its variables. This lets the user force extra objects (along with instances if needed). All variables to be sent need to be assigned to the o variable. O - To omit any variables which are defined in the MIB you can use the O (capital o) variable. This needs to be set to the list of OIDs of the variable bindings in the order defined in the MIB. ip - The variable ip is used for generating the trap from the N-th IP alias address. a - This variable associates an action script to the trap or INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. It will be executed before each instance of the trap is sent out. I - This optional variable controls the generation of INFORM PDUs. An INFORM is sent only if the variable is non-zero, else a TRAP is generated. R, T, E - This variable associates an action script to the INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. The action script associated with the R variable will be executed on receiving a INFORM RESPONSE, the one associated with the T variable on a timeout (ie. no response), the one associated with the E variable on a report PDU. eid.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine id for the destination specified by IP-ADDRESS and optionally by PORT. eb.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine boots. et.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine time.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @param body Value (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setValueAsync(Integer agentNum, String _object, String instance, String variable, String body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = setValueValidateBeforeCall(agentNum, _object, instance, variable, body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitOid
     * @param agentNum Agent of the value space (required)
     * @param OID OID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitOidCall(Integer agentNum, String OID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/split/{OID}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "OID" + "}", localVarApiClient.escapeString(OID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitOidValidateBeforeCall(Integer agentNum, String OID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling splitOid(Async)");
        }

        // verify the required parameter 'OID' is set
        if (OID == null) {
            throw new ApiException("Missing the required parameter 'OID' when calling splitOid(Async)");
        }

        return splitOidCall(agentNum, OID, _callback);

    }

    /**
     * Split the numerical OID into the object OID and instance OID.
     * This is useful if you have an OID which is a combination of object and instance.
     * @param agentNum Agent of the value space (required)
     * @param OID OID (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public List<String> splitOid(Integer agentNum, String OID) throws ApiException {
        ApiResponse<List<String>> localVarResp = splitOidWithHttpInfo(agentNum, OID);
        return localVarResp.getData();
    }

    /**
     * Split the numerical OID into the object OID and instance OID.
     * This is useful if you have an OID which is a combination of object and instance.
     * @param agentNum Agent of the value space (required)
     * @param OID OID (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> splitOidWithHttpInfo(Integer agentNum, String OID) throws ApiException {
        okhttp3.Call localVarCall = splitOidValidateBeforeCall(agentNum, OID, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Split the numerical OID into the object OID and instance OID. (asynchronously)
     * This is useful if you have an OID which is a combination of object and instance.
     * @param agentNum Agent of the value space (required)
     * @param OID OID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitOidAsync(Integer agentNum, String OID, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitOidValidateBeforeCall(agentNum, OID, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsetValue
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsetValueCall(Integer agentNum, String _object, String instance, String variable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mimic/agent/{agentNum}/value/unset/{object}/{instance}/{variable}"
            .replace("{" + "agentNum" + "}", localVarApiClient.escapeString(agentNum.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "variable" + "}", localVarApiClient.escapeString(variable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsetValueValidateBeforeCall(Integer agentNum, String _object, String instance, String variable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentNum' is set
        if (agentNum == null) {
            throw new ApiException("Missing the required parameter 'agentNum' when calling unsetValue(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling unsetValue(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling unsetValue(Async)");
        }

        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling unsetValue(Async)");
        }

        return unsetValueCall(agentNum, _object, instance, variable, _callback);

    }

    /**
     * Unset a variable in the Value Space in order to free its memory.
     * Only variables that have previously been set can be unset.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public String unsetValue(Integer agentNum, String _object, String instance, String variable) throws ApiException {
        ApiResponse<String> localVarResp = unsetValueWithHttpInfo(agentNum, _object, instance, variable);
        return localVarResp.getData();
    }

    /**
     * Unset a variable in the Value Space in order to free its memory.
     * Only variables that have previously been set can be unset.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> unsetValueWithHttpInfo(Integer agentNum, String _object, String instance, String variable) throws ApiException {
        okhttp3.Call localVarCall = unsetValueValidateBeforeCall(agentNum, _object, instance, variable, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unset a variable in the Value Space in order to free its memory. (asynchronously)
     * Only variables that have previously been set can be unset.
     * @param agentNum Agent of the value space (required)
     * @param _object Single instance object or object (column) of the table in the agent&#39;s value space. (required)
     * @param instance Row of the table in the agent&#39;s value space. 0 for single instance objects (required)
     * @param variable Variable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid agent number value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsetValueAsync(Integer agentNum, String _object, String instance, String variable, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsetValueValidateBeforeCall(agentNum, _object, instance, variable, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
