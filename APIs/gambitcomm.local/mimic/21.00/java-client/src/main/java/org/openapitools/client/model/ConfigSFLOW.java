/*
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigSFLOW
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:08.940356-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigSFLOW {
  public static final String SERIALIZED_NAME_COLLECTOR = "collector";
  @SerializedName(SERIALIZED_NAME_COLLECTOR)
  private String collector;

  public static final String SERIALIZED_NAME_COLLECTORPORT = "collectorport";
  @SerializedName(SERIALIZED_NAME_COLLECTORPORT)
  private Integer collectorport;

  public static final String SERIALIZED_NAME_ENCODING_TYPE = "encoding_type";
  @SerializedName(SERIALIZED_NAME_ENCODING_TYPE)
  private String encodingType;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FLOWS_PER_MIN = "flows_per_min";
  @SerializedName(SERIALIZED_NAME_FLOWS_PER_MIN)
  private Integer flowsPerMin;

  public static final String SERIALIZED_NAME_INCLUDE_SAMPLES = "include_samples";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SAMPLES)
  private String includeSamples;

  public static final String SERIALIZED_NAME_RECORDS_PER_SAMPLE = "records_per_sample";
  @SerializedName(SERIALIZED_NAME_RECORDS_PER_SAMPLE)
  private String recordsPerSample;

  public static final String SERIALIZED_NAME_SAMPLES_PER_DATAGRAM = "samples_per_datagram";
  @SerializedName(SERIALIZED_NAME_SAMPLES_PER_DATAGRAM)
  private String samplesPerDatagram;

  public ConfigSFLOW() {
  }

  public ConfigSFLOW collector(String collector) {
    this.collector = collector;
    return this;
  }

  /**
   * Get collector
   * @return collector
   */
  @javax.annotation.Nullable
  public String getCollector() {
    return collector;
  }

  public void setCollector(String collector) {
    this.collector = collector;
  }


  public ConfigSFLOW collectorport(Integer collectorport) {
    this.collectorport = collectorport;
    return this;
  }

  /**
   * Get collectorport
   * @return collectorport
   */
  @javax.annotation.Nullable
  public Integer getCollectorport() {
    return collectorport;
  }

  public void setCollectorport(Integer collectorport) {
    this.collectorport = collectorport;
  }


  public ConfigSFLOW encodingType(String encodingType) {
    this.encodingType = encodingType;
    return this;
  }

  /**
   * Get encodingType
   * @return encodingType
   */
  @javax.annotation.Nullable
  public String getEncodingType() {
    return encodingType;
  }

  public void setEncodingType(String encodingType) {
    this.encodingType = encodingType;
  }


  public ConfigSFLOW filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public ConfigSFLOW flowsPerMin(Integer flowsPerMin) {
    this.flowsPerMin = flowsPerMin;
    return this;
  }

  /**
   * Get flowsPerMin
   * @return flowsPerMin
   */
  @javax.annotation.Nullable
  public Integer getFlowsPerMin() {
    return flowsPerMin;
  }

  public void setFlowsPerMin(Integer flowsPerMin) {
    this.flowsPerMin = flowsPerMin;
  }


  public ConfigSFLOW includeSamples(String includeSamples) {
    this.includeSamples = includeSamples;
    return this;
  }

  /**
   * Get includeSamples
   * @return includeSamples
   */
  @javax.annotation.Nullable
  public String getIncludeSamples() {
    return includeSamples;
  }

  public void setIncludeSamples(String includeSamples) {
    this.includeSamples = includeSamples;
  }


  public ConfigSFLOW recordsPerSample(String recordsPerSample) {
    this.recordsPerSample = recordsPerSample;
    return this;
  }

  /**
   * Get recordsPerSample
   * @return recordsPerSample
   */
  @javax.annotation.Nullable
  public String getRecordsPerSample() {
    return recordsPerSample;
  }

  public void setRecordsPerSample(String recordsPerSample) {
    this.recordsPerSample = recordsPerSample;
  }


  public ConfigSFLOW samplesPerDatagram(String samplesPerDatagram) {
    this.samplesPerDatagram = samplesPerDatagram;
    return this;
  }

  /**
   * Get samplesPerDatagram
   * @return samplesPerDatagram
   */
  @javax.annotation.Nullable
  public String getSamplesPerDatagram() {
    return samplesPerDatagram;
  }

  public void setSamplesPerDatagram(String samplesPerDatagram) {
    this.samplesPerDatagram = samplesPerDatagram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigSFLOW configSFLOW = (ConfigSFLOW) o;
    return Objects.equals(this.collector, configSFLOW.collector) &&
        Objects.equals(this.collectorport, configSFLOW.collectorport) &&
        Objects.equals(this.encodingType, configSFLOW.encodingType) &&
        Objects.equals(this.filename, configSFLOW.filename) &&
        Objects.equals(this.flowsPerMin, configSFLOW.flowsPerMin) &&
        Objects.equals(this.includeSamples, configSFLOW.includeSamples) &&
        Objects.equals(this.recordsPerSample, configSFLOW.recordsPerSample) &&
        Objects.equals(this.samplesPerDatagram, configSFLOW.samplesPerDatagram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collector, collectorport, encodingType, filename, flowsPerMin, includeSamples, recordsPerSample, samplesPerDatagram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigSFLOW {\n");
    sb.append("    collector: ").append(toIndentedString(collector)).append("\n");
    sb.append("    collectorport: ").append(toIndentedString(collectorport)).append("\n");
    sb.append("    encodingType: ").append(toIndentedString(encodingType)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    flowsPerMin: ").append(toIndentedString(flowsPerMin)).append("\n");
    sb.append("    includeSamples: ").append(toIndentedString(includeSamples)).append("\n");
    sb.append("    recordsPerSample: ").append(toIndentedString(recordsPerSample)).append("\n");
    sb.append("    samplesPerDatagram: ").append(toIndentedString(samplesPerDatagram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collector");
    openapiFields.add("collectorport");
    openapiFields.add("encoding_type");
    openapiFields.add("filename");
    openapiFields.add("flows_per_min");
    openapiFields.add("include_samples");
    openapiFields.add("records_per_sample");
    openapiFields.add("samples_per_datagram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigSFLOW
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigSFLOW.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigSFLOW is not found in the empty JSON string", ConfigSFLOW.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigSFLOW.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigSFLOW` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collector") != null && !jsonObj.get("collector").isJsonNull()) && !jsonObj.get("collector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collector").toString()));
      }
      if ((jsonObj.get("encoding_type") != null && !jsonObj.get("encoding_type").isJsonNull()) && !jsonObj.get("encoding_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding_type").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("include_samples") != null && !jsonObj.get("include_samples").isJsonNull()) && !jsonObj.get("include_samples").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `include_samples` to be a primitive type in the JSON string but got `%s`", jsonObj.get("include_samples").toString()));
      }
      if ((jsonObj.get("records_per_sample") != null && !jsonObj.get("records_per_sample").isJsonNull()) && !jsonObj.get("records_per_sample").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `records_per_sample` to be a primitive type in the JSON string but got `%s`", jsonObj.get("records_per_sample").toString()));
      }
      if ((jsonObj.get("samples_per_datagram") != null && !jsonObj.get("samples_per_datagram").isJsonNull()) && !jsonObj.get("samples_per_datagram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samples_per_datagram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samples_per_datagram").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigSFLOW.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigSFLOW' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigSFLOW> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigSFLOW.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigSFLOW>() {
           @Override
           public void write(JsonWriter out, ConfigSFLOW value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigSFLOW read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigSFLOW given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigSFLOW
   * @throws IOException if the JSON string is invalid with respect to ConfigSFLOW
   */
  public static ConfigSFLOW fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigSFLOW.class);
  }

  /**
   * Convert an instance of ConfigSFLOW to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

