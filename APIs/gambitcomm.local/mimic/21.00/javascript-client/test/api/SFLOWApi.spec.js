/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.SFLOWApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SFLOWApi', function() {
    describe('protocolSflowGetArgs', function() {
      it('should call protocolSflowGetArgs successfully', function(done) {
        //uncomment below and update the code to test protocolSflowGetArgs
        //instance.protocolSflowGetArgs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowGetConfig', function() {
      it('should call protocolSflowGetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolSflowGetConfig
        //instance.protocolSflowGetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowGetStatistics', function() {
      it('should call protocolSflowGetStatistics successfully', function(done) {
        //uncomment below and update the code to test protocolSflowGetStatistics
        //instance.protocolSflowGetStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowGetStatsHdr', function() {
      it('should call protocolSflowGetStatsHdr successfully', function(done) {
        //uncomment below and update the code to test protocolSflowGetStatsHdr
        //instance.protocolSflowGetStatsHdr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowGetTrace', function() {
      it('should call protocolSflowGetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolSflowGetTrace
        //instance.protocolSflowGetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowHalt', function() {
      it('should call protocolSflowHalt successfully', function(done) {
        //uncomment below and update the code to test protocolSflowHalt
        //instance.protocolSflowHalt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowReload', function() {
      it('should call protocolSflowReload successfully', function(done) {
        //uncomment below and update the code to test protocolSflowReload
        //instance.protocolSflowReload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowResume', function() {
      it('should call protocolSflowResume successfully', function(done) {
        //uncomment below and update the code to test protocolSflowResume
        //instance.protocolSflowResume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowSetConfig', function() {
      it('should call protocolSflowSetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolSflowSetConfig
        //instance.protocolSflowSetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSflowSetTrace', function() {
      it('should call protocolSflowSetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolSflowSetTrace
        //instance.protocolSflowSetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
