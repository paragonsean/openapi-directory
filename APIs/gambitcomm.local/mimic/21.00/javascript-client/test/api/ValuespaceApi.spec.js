/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.ValuespaceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ValuespaceApi', function() {
    describe('add', function() {
      it('should call add successfully', function(done) {
        //uncomment below and update the code to test add
        //instance.add(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('evalValue', function() {
      it('should call evalValue successfully', function(done) {
        //uncomment below and update the code to test evalValue
        //instance.evalValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInfo', function() {
      it('should call getInfo successfully', function(done) {
        //uncomment below and update the code to test getInfo
        //instance.getInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstances', function() {
      it('should call getInstances successfully', function(done) {
        //uncomment below and update the code to test getInstances
        //instance.getInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMib', function() {
      it('should call getMib successfully', function(done) {
        //uncomment below and update the code to test getMib
        //instance.getMib(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getName', function() {
      it('should call getName successfully', function(done) {
        //uncomment below and update the code to test getName
        //instance.getName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjects', function() {
      it('should call getObjects successfully', function(done) {
        //uncomment below and update the code to test getObjects
        //instance.getObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOid', function() {
      it('should call getOid successfully', function(done) {
        //uncomment below and update the code to test getOid
        //instance.getOid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getState', function() {
      it('should call getState successfully', function(done) {
        //uncomment below and update the code to test getState
        //instance.getState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getValue', function() {
      it('should call getValue successfully', function(done) {
        //uncomment below and update the code to test getValue
        //instance.getValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVariables', function() {
      it('should call getVariables successfully', function(done) {
        //uncomment below and update the code to test getVariables
        //instance.getVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mevalValue', function() {
      it('should call mevalValue successfully', function(done) {
        //uncomment below and update the code to test mevalValue
        //instance.mevalValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mgetValue', function() {
      it('should call mgetValue successfully', function(done) {
        //uncomment below and update the code to test mgetValue
        //instance.mgetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('msetValue', function() {
      it('should call msetValue successfully', function(done) {
        //uncomment below and update the code to test msetValue
        //instance.msetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('munsetValue', function() {
      it('should call munsetValue successfully', function(done) {
        //uncomment below and update the code to test munsetValue
        //instance.munsetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remove', function() {
      it('should call remove successfully', function(done) {
        //uncomment below and update the code to test remove
        //instance.remove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setState', function() {
      it('should call setState successfully', function(done) {
        //uncomment below and update the code to test setState
        //instance.setState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setValue', function() {
      it('should call setValue successfully', function(done) {
        //uncomment below and update the code to test setValue
        //instance.setValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('splitOid', function() {
      it('should call splitOid successfully', function(done) {
        //uncomment below and update the code to test splitOid
        //instance.splitOid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsetValue', function() {
      it('should call unsetValue successfully', function(done) {
        //uncomment below and update the code to test unsetValue
        //instance.unsetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
