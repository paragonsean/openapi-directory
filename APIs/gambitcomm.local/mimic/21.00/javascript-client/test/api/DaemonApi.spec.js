/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.DaemonApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DaemonApi', function() {
    describe('addDaemonTimerScript', function() {
      it('should call addDaemonTimerScript successfully', function(done) {
        //uncomment below and update the code to test addDaemonTimerScript
        //instance.addDaemonTimerScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cfgLoad', function() {
      it('should call cfgLoad successfully', function(done) {
        //uncomment below and update the code to test cfgLoad
        //instance.cfgLoad(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cfgNew', function() {
      it('should call cfgNew successfully', function(done) {
        //uncomment below and update the code to test cfgNew
        //instance.cfgNew(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cfgSave', function() {
      it('should call cfgSave successfully', function(done) {
        //uncomment below and update the code to test cfgSave
        //instance.cfgSave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cfgSaveas', function() {
      it('should call cfgSaveas successfully', function(done) {
        //uncomment below and update the code to test cfgSaveas
        //instance.cfgSaveas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delDaemonTimerScript', function() {
      it('should call delDaemonTimerScript successfully', function(done) {
        //uncomment below and update the code to test delDaemonTimerScript
        //instance.delDaemonTimerScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActiveDataList', function() {
      it('should call getActiveDataList successfully', function(done) {
        //uncomment below and update the code to test getActiveDataList
        //instance.getActiveDataList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActiveList', function() {
      it('should call getActiveList successfully', function(done) {
        //uncomment below and update the code to test getActiveList
        //instance.getActiveList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCfgFileChanged', function() {
      it('should call getCfgFileChanged successfully', function(done) {
        //uncomment below and update the code to test getCfgFileChanged
        //instance.getCfgFileChanged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCfgfile', function() {
      it('should call getCfgfile successfully', function(done) {
        //uncomment below and update the code to test getCfgfile
        //instance.getCfgfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangedConfigList', function() {
      it('should call getChangedConfigList successfully', function(done) {
        //uncomment below and update the code to test getChangedConfigList
        //instance.getChangedConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangedStateList', function() {
      it('should call getChangedStateList successfully', function(done) {
        //uncomment below and update the code to test getChangedStateList
        //instance.getChangedStateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getClients', function() {
      it('should call getClients successfully', function(done) {
        //uncomment below and update the code to test getClients
        //instance.getClients(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfiguredList', function() {
      it('should call getConfiguredList successfully', function(done) {
        //uncomment below and update the code to test getConfiguredList
        //instance.getConfiguredList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDaemonProtocols', function() {
      it('should call getDaemonProtocols successfully', function(done) {
        //uncomment below and update the code to test getDaemonProtocols
        //instance.getDaemonProtocols(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInterfaces', function() {
      it('should call getInterfaces successfully', function(done) {
        //uncomment below and update the code to test getInterfaces
        //instance.getInterfaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLast', function() {
      it('should call getLast successfully', function(done) {
        //uncomment below and update the code to test getLast
        //instance.getLast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLog', function() {
      it('should call getLog successfully', function(done) {
        //uncomment below and update the code to test getLog
        //instance.getLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMax', function() {
      it('should call getMax successfully', function(done) {
        //uncomment below and update the code to test getMax
        //instance.getMax(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNetaddr', function() {
      it('should call getNetaddr successfully', function(done) {
        //uncomment below and update the code to test getNetaddr
        //instance.getNetaddr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNetdev', function() {
      it('should call getNetdev successfully', function(done) {
        //uncomment below and update the code to test getNetdev
        //instance.getNetdev(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProduct', function() {
      it('should call getProduct successfully', function(done) {
        //uncomment below and update the code to test getProduct
        //instance.getProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReturn', function() {
      it('should call getReturn successfully', function(done) {
        //uncomment below and update the code to test getReturn
        //instance.getReturn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVersion', function() {
      it('should call getVersion successfully', function(done) {
        //uncomment below and update the code to test getVersion
        //instance.getVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDaemonTimerScripts', function() {
      it('should call listDaemonTimerScripts successfully', function(done) {
        //uncomment below and update the code to test listDaemonTimerScripts
        //instance.listDaemonTimerScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mgetInfo', function() {
      it('should call mgetInfo successfully', function(done) {
        //uncomment below and update the code to test mgetInfo
        //instance.mgetInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLog', function() {
      it('should call setLog successfully', function(done) {
        //uncomment below and update the code to test setLog
        //instance.setLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setNetdev', function() {
      it('should call setNetdev successfully', function(done) {
        //uncomment below and update the code to test setNetdev
        //instance.setNetdev(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startAllAgents', function() {
      it('should call startAllAgents successfully', function(done) {
        //uncomment below and update the code to test startAllAgents
        //instance.startAllAgents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopAllAgents', function() {
      it('should call stopAllAgents successfully', function(done) {
        //uncomment below and update the code to test stopAllAgents
        //instance.stopAllAgents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeExists', function() {
      it('should call storeExists successfully', function(done) {
        //uncomment below and update the code to test storeExists
        //instance.storeExists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeGet', function() {
      it('should call storeGet successfully', function(done) {
        //uncomment below and update the code to test storeGet
        //instance.storeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeList', function() {
      it('should call storeList successfully', function(done) {
        //uncomment below and update the code to test storeList
        //instance.storeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeLreplace', function() {
      it('should call storeLreplace successfully', function(done) {
        //uncomment below and update the code to test storeLreplace
        //instance.storeLreplace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storePersists', function() {
      it('should call storePersists successfully', function(done) {
        //uncomment below and update the code to test storePersists
        //instance.storePersists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeSave', function() {
      it('should call storeSave successfully', function(done) {
        //uncomment below and update the code to test storeSave
        //instance.storeSave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeSet', function() {
      it('should call storeSet successfully', function(done) {
        //uncomment below and update the code to test storeSet
        //instance.storeSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeUnset', function() {
      it('should call storeUnset successfully', function(done) {
        //uncomment below and update the code to test storeUnset
        //instance.storeUnset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('terminate', function() {
      it('should call terminate successfully', function(done) {
        //uncomment below and update the code to test terminate
        //instance.terminate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
