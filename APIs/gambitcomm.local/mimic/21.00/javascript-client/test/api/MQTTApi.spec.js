/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.MQTTApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MQTTApi', function() {
    describe('protocolMqttClientGetProtstate', function() {
      it('should call protocolMqttClientGetProtstate successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientGetProtstate
        //instance.protocolMqttClientGetProtstate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientGetState', function() {
      it('should call protocolMqttClientGetState successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientGetState
        //instance.protocolMqttClientGetState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientMessageCard', function() {
      it('should call protocolMqttClientMessageCard successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientMessageCard
        //instance.protocolMqttClientMessageCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientMessageGet', function() {
      it('should call protocolMqttClientMessageGet successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientMessageGet
        //instance.protocolMqttClientMessageGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientMessageSet', function() {
      it('should call protocolMqttClientMessageSet successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientMessageSet
        //instance.protocolMqttClientMessageSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientResubscribe', function() {
      it('should call protocolMqttClientResubscribe successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientResubscribe
        //instance.protocolMqttClientResubscribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientRuntimeAbort', function() {
      it('should call protocolMqttClientRuntimeAbort successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientRuntimeAbort
        //instance.protocolMqttClientRuntimeAbort(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientRuntimeConnect', function() {
      it('should call protocolMqttClientRuntimeConnect successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientRuntimeConnect
        //instance.protocolMqttClientRuntimeConnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientRuntimeDisconnect', function() {
      it('should call protocolMqttClientRuntimeDisconnect successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientRuntimeDisconnect
        //instance.protocolMqttClientRuntimeDisconnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetBroker', function() {
      it('should call protocolMqttClientSetBroker successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetBroker
        //instance.protocolMqttClientSetBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetCleansession', function() {
      it('should call protocolMqttClientSetCleansession successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetCleansession
        //instance.protocolMqttClientSetCleansession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetClientid', function() {
      it('should call protocolMqttClientSetClientid successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetClientid
        //instance.protocolMqttClientSetClientid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetKeepalive', function() {
      it('should call protocolMqttClientSetKeepalive successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetKeepalive
        //instance.protocolMqttClientSetKeepalive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetOnDisconnect', function() {
      it('should call protocolMqttClientSetOnDisconnect successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetOnDisconnect
        //instance.protocolMqttClientSetOnDisconnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetPassword', function() {
      it('should call protocolMqttClientSetPassword successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetPassword
        //instance.protocolMqttClientSetPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetPort', function() {
      it('should call protocolMqttClientSetPort successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetPort
        //instance.protocolMqttClientSetPort(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetUsername', function() {
      it('should call protocolMqttClientSetUsername successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetUsername
        //instance.protocolMqttClientSetUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetWillmsg', function() {
      it('should call protocolMqttClientSetWillmsg successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetWillmsg
        //instance.protocolMqttClientSetWillmsg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetWillqos', function() {
      it('should call protocolMqttClientSetWillqos successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetWillqos
        //instance.protocolMqttClientSetWillqos(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetWillretain', function() {
      it('should call protocolMqttClientSetWillretain successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetWillretain
        //instance.protocolMqttClientSetWillretain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSetWilltopic', function() {
      it('should call protocolMqttClientSetWilltopic successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSetWilltopic
        //instance.protocolMqttClientSetWilltopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSubscribeCard', function() {
      it('should call protocolMqttClientSubscribeCard successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSubscribeCard
        //instance.protocolMqttClientSubscribeCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSubscribeGet', function() {
      it('should call protocolMqttClientSubscribeGet successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSubscribeGet
        //instance.protocolMqttClientSubscribeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientSubscribeSet', function() {
      it('should call protocolMqttClientSubscribeSet successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientSubscribeSet
        //instance.protocolMqttClientSubscribeSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttClientUnsubscribe', function() {
      it('should call protocolMqttClientUnsubscribe successfully', function(done) {
        //uncomment below and update the code to test protocolMqttClientUnsubscribe
        //instance.protocolMqttClientUnsubscribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttGetArgs', function() {
      it('should call protocolMqttGetArgs successfully', function(done) {
        //uncomment below and update the code to test protocolMqttGetArgs
        //instance.protocolMqttGetArgs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttGetConfig', function() {
      it('should call protocolMqttGetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolMqttGetConfig
        //instance.protocolMqttGetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttGetStatistics', function() {
      it('should call protocolMqttGetStatistics successfully', function(done) {
        //uncomment below and update the code to test protocolMqttGetStatistics
        //instance.protocolMqttGetStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttGetStatsHdr', function() {
      it('should call protocolMqttGetStatsHdr successfully', function(done) {
        //uncomment below and update the code to test protocolMqttGetStatsHdr
        //instance.protocolMqttGetStatsHdr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttGetTrace', function() {
      it('should call protocolMqttGetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolMqttGetTrace
        //instance.protocolMqttGetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttSetConfig', function() {
      it('should call protocolMqttSetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolMqttSetConfig
        //instance.protocolMqttSetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolMqttSetTrace', function() {
      it('should call protocolMqttSetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolMqttSetTrace
        //instance.protocolMqttSetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
