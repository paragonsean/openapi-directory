/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.NETFLOWApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NETFLOWApi', function() {
    describe('protocolNetflowChangeAttr', function() {
      it('should call protocolNetflowChangeAttr successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowChangeAttr
        //instance.protocolNetflowChangeAttr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowChangeDfs', function() {
      it('should call protocolNetflowChangeDfs successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowChangeDfs
        //instance.protocolNetflowChangeDfs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowChangeTfs', function() {
      it('should call protocolNetflowChangeTfs successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowChangeTfs
        //instance.protocolNetflowChangeTfs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowGetArgs', function() {
      it('should call protocolNetflowGetArgs successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowGetArgs
        //instance.protocolNetflowGetArgs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowGetConfig', function() {
      it('should call protocolNetflowGetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowGetConfig
        //instance.protocolNetflowGetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowGetStatistics', function() {
      it('should call protocolNetflowGetStatistics successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowGetStatistics
        //instance.protocolNetflowGetStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowGetStatsHdr', function() {
      it('should call protocolNetflowGetStatsHdr successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowGetStatsHdr
        //instance.protocolNetflowGetStatsHdr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowGetTrace', function() {
      it('should call protocolNetflowGetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowGetTrace
        //instance.protocolNetflowGetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowHalt', function() {
      it('should call protocolNetflowHalt successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowHalt
        //instance.protocolNetflowHalt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowList', function() {
      it('should call protocolNetflowList successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowList
        //instance.protocolNetflowList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowReload', function() {
      it('should call protocolNetflowReload successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowReload
        //instance.protocolNetflowReload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowResume', function() {
      it('should call protocolNetflowResume successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowResume
        //instance.protocolNetflowResume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowSetCollector', function() {
      it('should call protocolNetflowSetCollector successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowSetCollector
        //instance.protocolNetflowSetCollector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowSetConfig', function() {
      it('should call protocolNetflowSetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowSetConfig
        //instance.protocolNetflowSetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowSetFileName', function() {
      it('should call protocolNetflowSetFileName successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowSetFileName
        //instance.protocolNetflowSetFileName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolNetflowSetTrace', function() {
      it('should call protocolNetflowSetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolNetflowSetTrace
        //instance.protocolNetflowSetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
