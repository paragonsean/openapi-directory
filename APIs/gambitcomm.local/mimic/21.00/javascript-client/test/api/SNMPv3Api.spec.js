/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.SNMPv3Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SNMPv3Api', function() {
    describe('protocolSnmpv3AccessAdd', function() {
      it('should call protocolSnmpv3AccessAdd successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3AccessAdd
        //instance.protocolSnmpv3AccessAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3AccessClear', function() {
      it('should call protocolSnmpv3AccessClear successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3AccessClear
        //instance.protocolSnmpv3AccessClear(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3AccessDel', function() {
      it('should call protocolSnmpv3AccessDel successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3AccessDel
        //instance.protocolSnmpv3AccessDel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3AccessList', function() {
      it('should call protocolSnmpv3AccessList successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3AccessList
        //instance.protocolSnmpv3AccessList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GetConfig', function() {
      it('should call protocolSnmpv3GetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GetConfig
        //instance.protocolSnmpv3GetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GetContextEngineid', function() {
      it('should call protocolSnmpv3GetContextEngineid successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GetContextEngineid
        //instance.protocolSnmpv3GetContextEngineid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GetEngineboots', function() {
      it('should call protocolSnmpv3GetEngineboots successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GetEngineboots
        //instance.protocolSnmpv3GetEngineboots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GetEngineid', function() {
      it('should call protocolSnmpv3GetEngineid successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GetEngineid
        //instance.protocolSnmpv3GetEngineid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GetEnginetime', function() {
      it('should call protocolSnmpv3GetEnginetime successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GetEnginetime
        //instance.protocolSnmpv3GetEnginetime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GroupAdd', function() {
      it('should call protocolSnmpv3GroupAdd successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GroupAdd
        //instance.protocolSnmpv3GroupAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GroupClear', function() {
      it('should call protocolSnmpv3GroupClear successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GroupClear
        //instance.protocolSnmpv3GroupClear(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GroupDel', function() {
      it('should call protocolSnmpv3GroupDel successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GroupDel
        //instance.protocolSnmpv3GroupDel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3GroupList', function() {
      it('should call protocolSnmpv3GroupList successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3GroupList
        //instance.protocolSnmpv3GroupList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3SetConfig', function() {
      it('should call protocolSnmpv3SetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3SetConfig
        //instance.protocolSnmpv3SetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3UserAdd', function() {
      it('should call protocolSnmpv3UserAdd successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3UserAdd
        //instance.protocolSnmpv3UserAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3UserClear', function() {
      it('should call protocolSnmpv3UserClear successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3UserClear
        //instance.protocolSnmpv3UserClear(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3UserDel', function() {
      it('should call protocolSnmpv3UserDel successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3UserDel
        //instance.protocolSnmpv3UserDel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3UserList', function() {
      it('should call protocolSnmpv3UserList successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3UserList
        //instance.protocolSnmpv3UserList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3UsmSave', function() {
      it('should call protocolSnmpv3UsmSave successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3UsmSave
        //instance.protocolSnmpv3UsmSave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3UsmSaveas', function() {
      it('should call protocolSnmpv3UsmSaveas successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3UsmSaveas
        //instance.protocolSnmpv3UsmSaveas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3VacmSave', function() {
      it('should call protocolSnmpv3VacmSave successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3VacmSave
        //instance.protocolSnmpv3VacmSave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3VacmSaveas', function() {
      it('should call protocolSnmpv3VacmSaveas successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3VacmSaveas
        //instance.protocolSnmpv3VacmSaveas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3ViewAdd', function() {
      it('should call protocolSnmpv3ViewAdd successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3ViewAdd
        //instance.protocolSnmpv3ViewAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3ViewClear', function() {
      it('should call protocolSnmpv3ViewClear successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3ViewClear
        //instance.protocolSnmpv3ViewClear(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3ViewDel', function() {
      it('should call protocolSnmpv3ViewDel successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3ViewDel
        //instance.protocolSnmpv3ViewDel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolSnmpv3ViewList', function() {
      it('should call protocolSnmpv3ViewList successfully', function(done) {
        //uncomment below and update the code to test protocolSnmpv3ViewList
        //instance.protocolSnmpv3ViewList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
