/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.AgentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AgentApi', function() {
    describe('addIpalias', function() {
      it('should call addIpalias successfully', function(done) {
        //uncomment below and update the code to test addIpalias
        //instance.addIpalias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTimerScript', function() {
      it('should call addTimerScript successfully', function(done) {
        //uncomment below and update the code to test addTimerScript
        //instance.addTimerScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentRemove', function() {
      it('should call agentRemove successfully', function(done) {
        //uncomment below and update the code to test agentRemove
        //instance.agentRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreCopy', function() {
      it('should call agentStoreCopy successfully', function(done) {
        //uncomment below and update the code to test agentStoreCopy
        //instance.agentStoreCopy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreExists', function() {
      it('should call agentStoreExists successfully', function(done) {
        //uncomment below and update the code to test agentStoreExists
        //instance.agentStoreExists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreGet', function() {
      it('should call agentStoreGet successfully', function(done) {
        //uncomment below and update the code to test agentStoreGet
        //instance.agentStoreGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreList', function() {
      it('should call agentStoreList successfully', function(done) {
        //uncomment below and update the code to test agentStoreList
        //instance.agentStoreList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreLreplace', function() {
      it('should call agentStoreLreplace successfully', function(done) {
        //uncomment below and update the code to test agentStoreLreplace
        //instance.agentStoreLreplace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStorePersists', function() {
      it('should call agentStorePersists successfully', function(done) {
        //uncomment below and update the code to test agentStorePersists
        //instance.agentStorePersists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreSet', function() {
      it('should call agentStoreSet successfully', function(done) {
        //uncomment below and update the code to test agentStoreSet
        //instance.agentStoreSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agentStoreUnset', function() {
      it('should call agentStoreUnset successfully', function(done) {
        //uncomment below and update the code to test agentStoreUnset
        //instance.agentStoreUnset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callNew', function() {
      it('should call callNew successfully', function(done) {
        //uncomment below and update the code to test callNew
        //instance.callNew(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delIpalias', function() {
      it('should call delIpalias successfully', function(done) {
        //uncomment below and update the code to test delIpalias
        //instance.delIpalias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delTimerScript', function() {
      it('should call delTimerScript successfully', function(done) {
        //uncomment below and update the code to test delTimerScript
        //instance.delTimerScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fromAdd', function() {
      it('should call fromAdd successfully', function(done) {
        //uncomment below and update the code to test fromAdd
        //instance.fromAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fromDel', function() {
      it('should call fromDel successfully', function(done) {
        //uncomment below and update the code to test fromDel
        //instance.fromDel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fromList', function() {
      it('should call fromList successfully', function(done) {
        //uncomment below and update the code to test fromList
        //instance.fromList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAgentState', function() {
      it('should call getAgentState successfully', function(done) {
        //uncomment below and update the code to test getAgentState
        //instance.getAgentState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChanged', function() {
      it('should call getChanged successfully', function(done) {
        //uncomment below and update the code to test getChanged
        //instance.getChanged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfigChanged', function() {
      it('should call getConfigChanged successfully', function(done) {
        //uncomment below and update the code to test getConfigChanged
        //instance.getConfigChanged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDelay', function() {
      it('should call getDelay successfully', function(done) {
        //uncomment below and update the code to test getDelay
        //instance.getDelay(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDrops', function() {
      it('should call getDrops successfully', function(done) {
        //uncomment below and update the code to test getDrops
        //instance.getDrops(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHost', function() {
      it('should call getHost successfully', function(done) {
        //uncomment below and update the code to test getHost
        //instance.getHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInformTimeout', function() {
      it('should call getInformTimeout successfully', function(done) {
        //uncomment below and update the code to test getInformTimeout
        //instance.getInformTimeout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInterface', function() {
      it('should call getInterface successfully', function(done) {
        //uncomment below and update the code to test getInterface
        //instance.getInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMask', function() {
      it('should call getMask successfully', function(done) {
        //uncomment below and update the code to test getMask
        //instance.getMask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMibs', function() {
      it('should call getMibs successfully', function(done) {
        //uncomment below and update the code to test getMibs
        //instance.getMibs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNumberStarts', function() {
      it('should call getNumberStarts successfully', function(done) {
        //uncomment below and update the code to test getNumberStarts
        //instance.getNumberStarts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOiddir', function() {
      it('should call getOiddir successfully', function(done) {
        //uncomment below and update the code to test getOiddir
        //instance.getOiddir(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOwner', function() {
      it('should call getOwner successfully', function(done) {
        //uncomment below and update the code to test getOwner
        //instance.getOwner(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPdusize', function() {
      it('should call getPdusize successfully', function(done) {
        //uncomment below and update the code to test getPdusize
        //instance.getPdusize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPort', function() {
      it('should call getPort successfully', function(done) {
        //uncomment below and update the code to test getPort
        //instance.getPort(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPrivdir', function() {
      it('should call getPrivdir successfully', function(done) {
        //uncomment below and update the code to test getPrivdir
        //instance.getPrivdir(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProtocols', function() {
      it('should call getProtocols successfully', function(done) {
        //uncomment below and update the code to test getProtocols
        //instance.getProtocols(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReadCommunity', function() {
      it('should call getReadCommunity successfully', function(done) {
        //uncomment below and update the code to test getReadCommunity
        //instance.getReadCommunity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScen', function() {
      it('should call getScen successfully', function(done) {
        //uncomment below and update the code to test getScen
        //instance.getScen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSim', function() {
      it('should call getSim successfully', function(done) {
        //uncomment below and update the code to test getSim
        //instance.getSim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStarttime', function() {
      it('should call getStarttime successfully', function(done) {
        //uncomment below and update the code to test getStarttime
        //instance.getStarttime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStateChanged', function() {
      it('should call getStateChanged successfully', function(done) {
        //uncomment below and update the code to test getStateChanged
        //instance.getStateChanged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatistics', function() {
      it('should call getStatistics successfully', function(done) {
        //uncomment below and update the code to test getStatistics
        //instance.getStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrace', function() {
      it('should call getTrace successfully', function(done) {
        //uncomment below and update the code to test getTrace
        //instance.getTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getValidate', function() {
      it('should call getValidate successfully', function(done) {
        //uncomment below and update the code to test getValidate
        //instance.getValidate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWriteCommunity', function() {
      it('should call getWriteCommunity successfully', function(done) {
        //uncomment below and update the code to test getWriteCommunity
        //instance.getWriteCommunity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('halt', function() {
      it('should call halt successfully', function(done) {
        //uncomment below and update the code to test halt
        //instance.halt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIpaliases', function() {
      it('should call listIpaliases successfully', function(done) {
        //uncomment below and update the code to test listIpaliases
        //instance.listIpaliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTimerScripts', function() {
      it('should call listTimerScripts successfully', function(done) {
        //uncomment below and update the code to test listTimerScripts
        //instance.listTimerScripts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseNow', function() {
      it('should call pauseNow successfully', function(done) {
        //uncomment below and update the code to test pauseNow
        //instance.pauseNow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolGetConfig', function() {
      it('should call protocolGetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolGetConfig
        //instance.protocolGetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reload', function() {
      it('should call reload successfully', function(done) {
        //uncomment below and update the code to test reload
        //instance.reload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resume', function() {
      it('should call resume successfully', function(done) {
        //uncomment below and update the code to test resume
        //instance.resume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('save', function() {
      it('should call save successfully', function(done) {
        //uncomment below and update the code to test save
        //instance.save(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDelay', function() {
      it('should call setDelay successfully', function(done) {
        //uncomment below and update the code to test setDelay
        //instance.setDelay(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDrops', function() {
      it('should call setDrops successfully', function(done) {
        //uncomment below and update the code to test setDrops
        //instance.setDrops(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setHost', function() {
      it('should call setHost successfully', function(done) {
        //uncomment below and update the code to test setHost
        //instance.setHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setInformTimeout', function() {
      it('should call setInformTimeout successfully', function(done) {
        //uncomment below and update the code to test setInformTimeout
        //instance.setInformTimeout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setInterface', function() {
      it('should call setInterface successfully', function(done) {
        //uncomment below and update the code to test setInterface
        //instance.setInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setMask', function() {
      it('should call setMask successfully', function(done) {
        //uncomment below and update the code to test setMask
        //instance.setMask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setMibs', function() {
      it('should call setMibs successfully', function(done) {
        //uncomment below and update the code to test setMibs
        //instance.setMibs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setOiddir', function() {
      it('should call setOiddir successfully', function(done) {
        //uncomment below and update the code to test setOiddir
        //instance.setOiddir(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setOwner', function() {
      it('should call setOwner successfully', function(done) {
        //uncomment below and update the code to test setOwner
        //instance.setOwner(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPdusize', function() {
      it('should call setPdusize successfully', function(done) {
        //uncomment below and update the code to test setPdusize
        //instance.setPdusize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPort', function() {
      it('should call setPort successfully', function(done) {
        //uncomment below and update the code to test setPort
        //instance.setPort(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPrivdir', function() {
      it('should call setPrivdir successfully', function(done) {
        //uncomment below and update the code to test setPrivdir
        //instance.setPrivdir(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setProtocols', function() {
      it('should call setProtocols successfully', function(done) {
        //uncomment below and update the code to test setProtocols
        //instance.setProtocols(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setReadCommunity', function() {
      it('should call setReadCommunity successfully', function(done) {
        //uncomment below and update the code to test setReadCommunity
        //instance.setReadCommunity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setStarttime', function() {
      it('should call setStarttime successfully', function(done) {
        //uncomment below and update the code to test setStarttime
        //instance.setStarttime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setTrace', function() {
      it('should call setTrace successfully', function(done) {
        //uncomment below and update the code to test setTrace
        //instance.setTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setValidate', function() {
      it('should call setValidate successfully', function(done) {
        //uncomment below and update the code to test setValidate
        //instance.setValidate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setWriteCommunity', function() {
      it('should call setWriteCommunity successfully', function(done) {
        //uncomment below and update the code to test setWriteCommunity
        //instance.setWriteCommunity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start', function() {
      it('should call start successfully', function(done) {
        //uncomment below and update the code to test start
        //instance.start(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startIpalias', function() {
      it('should call startIpalias successfully', function(done) {
        //uncomment below and update the code to test startIpalias
        //instance.startIpalias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('statusIpalias', function() {
      it('should call statusIpalias successfully', function(done) {
        //uncomment below and update the code to test statusIpalias
        //instance.statusIpalias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stop', function() {
      it('should call stop successfully', function(done) {
        //uncomment below and update the code to test stop
        //instance.stop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopIpalias', function() {
      it('should call stopIpalias successfully', function(done) {
        //uncomment below and update the code to test stopIpalias
        //instance.stopIpalias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trapConfigAdd', function() {
      it('should call trapConfigAdd successfully', function(done) {
        //uncomment below and update the code to test trapConfigAdd
        //instance.trapConfigAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trapConfigDel', function() {
      it('should call trapConfigDel successfully', function(done) {
        //uncomment below and update the code to test trapConfigDel
        //instance.trapConfigDel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trapConfigList', function() {
      it('should call trapConfigList successfully', function(done) {
        //uncomment below and update the code to test trapConfigList
        //instance.trapConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trapList', function() {
      it('should call trapList successfully', function(done) {
        //uncomment below and update the code to test trapList
        //instance.trapList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
