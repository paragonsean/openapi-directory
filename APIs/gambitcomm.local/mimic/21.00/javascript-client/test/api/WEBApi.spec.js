/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.WEBApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WEBApi', function() {
    describe('protocolWebGetArgs', function() {
      it('should call protocolWebGetArgs successfully', function(done) {
        //uncomment below and update the code to test protocolWebGetArgs
        //instance.protocolWebGetArgs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebGetConfig', function() {
      it('should call protocolWebGetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolWebGetConfig
        //instance.protocolWebGetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebGetStatistics', function() {
      it('should call protocolWebGetStatistics successfully', function(done) {
        //uncomment below and update the code to test protocolWebGetStatistics
        //instance.protocolWebGetStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebGetStatsHdr', function() {
      it('should call protocolWebGetStatsHdr successfully', function(done) {
        //uncomment below and update the code to test protocolWebGetStatsHdr
        //instance.protocolWebGetStatsHdr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebGetTrace', function() {
      it('should call protocolWebGetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolWebGetTrace
        //instance.protocolWebGetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebPortAdd', function() {
      it('should call protocolWebPortAdd successfully', function(done) {
        //uncomment below and update the code to test protocolWebPortAdd
        //instance.protocolWebPortAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebPortExists', function() {
      it('should call protocolWebPortExists successfully', function(done) {
        //uncomment below and update the code to test protocolWebPortExists
        //instance.protocolWebPortExists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebPortRemove', function() {
      it('should call protocolWebPortRemove successfully', function(done) {
        //uncomment below and update the code to test protocolWebPortRemove
        //instance.protocolWebPortRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebPortSet', function() {
      it('should call protocolWebPortSet successfully', function(done) {
        //uncomment below and update the code to test protocolWebPortSet
        //instance.protocolWebPortSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebPortStart', function() {
      it('should call protocolWebPortStart successfully', function(done) {
        //uncomment below and update the code to test protocolWebPortStart
        //instance.protocolWebPortStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebPortStop', function() {
      it('should call protocolWebPortStop successfully', function(done) {
        //uncomment below and update the code to test protocolWebPortStop
        //instance.protocolWebPortStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebSetConfig', function() {
      it('should call protocolWebSetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolWebSetConfig
        //instance.protocolWebSetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolWebSetTrace', function() {
      it('should call protocolWebSetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolWebSetTrace
        //instance.protocolWebSetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
