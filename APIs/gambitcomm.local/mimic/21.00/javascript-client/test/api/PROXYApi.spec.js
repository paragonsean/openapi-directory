/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MimicRestApi);
  }
}(this, function(expect, MimicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MimicRestApi.PROXYApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PROXYApi', function() {
    describe('protocolProxyGetArgs', function() {
      it('should call protocolProxyGetArgs successfully', function(done) {
        //uncomment below and update the code to test protocolProxyGetArgs
        //instance.protocolProxyGetArgs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyGetConfig', function() {
      it('should call protocolProxyGetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolProxyGetConfig
        //instance.protocolProxyGetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyGetStatistics', function() {
      it('should call protocolProxyGetStatistics successfully', function(done) {
        //uncomment below and update the code to test protocolProxyGetStatistics
        //instance.protocolProxyGetStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyGetStatsHdr', function() {
      it('should call protocolProxyGetStatsHdr successfully', function(done) {
        //uncomment below and update the code to test protocolProxyGetStatsHdr
        //instance.protocolProxyGetStatsHdr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyGetTrace', function() {
      it('should call protocolProxyGetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolProxyGetTrace
        //instance.protocolProxyGetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyPortAdd', function() {
      it('should call protocolProxyPortAdd successfully', function(done) {
        //uncomment below and update the code to test protocolProxyPortAdd
        //instance.protocolProxyPortAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyPortIsstarted', function() {
      it('should call protocolProxyPortIsstarted successfully', function(done) {
        //uncomment below and update the code to test protocolProxyPortIsstarted
        //instance.protocolProxyPortIsstarted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyPortList', function() {
      it('should call protocolProxyPortList successfully', function(done) {
        //uncomment below and update the code to test protocolProxyPortList
        //instance.protocolProxyPortList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyPortRemove', function() {
      it('should call protocolProxyPortRemove successfully', function(done) {
        //uncomment below and update the code to test protocolProxyPortRemove
        //instance.protocolProxyPortRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyPortStart', function() {
      it('should call protocolProxyPortStart successfully', function(done) {
        //uncomment below and update the code to test protocolProxyPortStart
        //instance.protocolProxyPortStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxyPortStop', function() {
      it('should call protocolProxyPortStop successfully', function(done) {
        //uncomment below and update the code to test protocolProxyPortStop
        //instance.protocolProxyPortStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxySetConfig', function() {
      it('should call protocolProxySetConfig successfully', function(done) {
        //uncomment below and update the code to test protocolProxySetConfig
        //instance.protocolProxySetConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('protocolProxySetTrace', function() {
      it('should call protocolProxySetTrace successfully', function(done) {
        //uncomment below and update the code to test protocolProxySetTrace
        //instance.protocolProxySetTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
