/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigSYSLOG model module.
 * @module model/ConfigSYSLOG
 * @version 21.00
 */
class ConfigSYSLOG {
    /**
     * Constructs a new <code>ConfigSYSLOG</code>.
     * @alias module:model/ConfigSYSLOG
     */
    constructor() { 
        
        ConfigSYSLOG.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigSYSLOG</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigSYSLOG} obj Optional instance to populate.
     * @return {module:model/ConfigSYSLOG} The populated <code>ConfigSYSLOG</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigSYSLOG();

            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('localport')) {
                obj['localport'] = ApiClient.convertToType(data['localport'], 'Number');
            }
            if (data.hasOwnProperty('separator')) {
                obj['separator'] = ApiClient.convertToType(data['separator'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('serverport')) {
                obj['serverport'] = ApiClient.convertToType(data['serverport'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigSYSLOG</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigSYSLOG</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client'] && !(typeof data['client'] === 'string' || data['client'] instanceof String)) {
            throw new Error("Expected the field `client` to be a primitive type in the JSON string but got " + data['client']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['separator'] && !(typeof data['separator'] === 'string' || data['separator'] instanceof String)) {
            throw new Error("Expected the field `separator` to be a primitive type in the JSON string but got " + data['separator']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }

        return true;
    }


}



/**
 * @member {String} client
 */
ConfigSYSLOG.prototype['client'] = undefined;

/**
 * @member {String} hostname
 */
ConfigSYSLOG.prototype['hostname'] = undefined;

/**
 * @member {Number} localport
 */
ConfigSYSLOG.prototype['localport'] = undefined;

/**
 * @member {String} separator
 */
ConfigSYSLOG.prototype['separator'] = undefined;

/**
 * @member {Number} sequence
 */
ConfigSYSLOG.prototype['sequence'] = undefined;

/**
 * @member {String} server
 */
ConfigSYSLOG.prototype['server'] = undefined;

/**
 * @member {Number} serverport
 */
ConfigSYSLOG.prototype['serverport'] = undefined;

/**
 * @member {String} timestamp
 */
ConfigSYSLOG.prototype['timestamp'] = undefined;






export default ConfigSYSLOG;

