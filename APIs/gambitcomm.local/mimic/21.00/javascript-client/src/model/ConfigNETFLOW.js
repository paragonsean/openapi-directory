/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigNETFLOW model module.
 * @module model/ConfigNETFLOW
 * @version 21.00
 */
class ConfigNETFLOW {
    /**
     * Constructs a new <code>ConfigNETFLOW</code>.
     * @alias module:model/ConfigNETFLOW
     */
    constructor() { 
        
        ConfigNETFLOW.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigNETFLOW</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigNETFLOW} obj Optional instance to populate.
     * @return {module:model/ConfigNETFLOW} The populated <code>ConfigNETFLOW</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigNETFLOW();

            if (data.hasOwnProperty('bundleflowsets')) {
                obj['bundleflowsets'] = ApiClient.convertToType(data['bundleflowsets'], 'Number');
            }
            if (data.hasOwnProperty('collector')) {
                obj['collector'] = ApiClient.convertToType(data['collector'], 'String');
            }
            if (data.hasOwnProperty('collectorport')) {
                obj['collectorport'] = ApiClient.convertToType(data['collectorport'], 'Number');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigNETFLOW</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigNETFLOW</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collector'] && !(typeof data['collector'] === 'string' || data['collector'] instanceof String)) {
            throw new Error("Expected the field `collector` to be a primitive type in the JSON string but got " + data['collector']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }

        return true;
    }


}



/**
 * @member {Number} bundleflowsets
 */
ConfigNETFLOW.prototype['bundleflowsets'] = undefined;

/**
 * @member {String} collector
 */
ConfigNETFLOW.prototype['collector'] = undefined;

/**
 * @member {Number} collectorport
 */
ConfigNETFLOW.prototype['collectorport'] = undefined;

/**
 * @member {String} filename
 */
ConfigNETFLOW.prototype['filename'] = undefined;






export default ConfigNETFLOW;

