/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigCOAP model module.
 * @module model/ConfigCOAP
 * @version 21.00
 */
class ConfigCOAP {
    /**
     * Constructs a new <code>ConfigCOAP</code>.
     * @alias module:model/ConfigCOAP
     */
    constructor() { 
        
        ConfigCOAP.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigCOAP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigCOAP} obj Optional instance to populate.
     * @return {module:model/ConfigCOAP} The populated <code>ConfigCOAP</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigCOAP();

            if (data.hasOwnProperty('keystore')) {
                obj['keystore'] = ApiClient.convertToType(data['keystore'], 'String');
            }
            if (data.hasOwnProperty('primary_port')) {
                obj['primary_port'] = ApiClient.convertToType(data['primary_port'], 'Number');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = ApiClient.convertToType(data['rule'], 'String');
            }
            if (data.hasOwnProperty('secure_port')) {
                obj['secure_port'] = ApiClient.convertToType(data['secure_port'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigCOAP</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigCOAP</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keystore'] && !(typeof data['keystore'] === 'string' || data['keystore'] instanceof String)) {
            throw new Error("Expected the field `keystore` to be a primitive type in the JSON string but got " + data['keystore']);
        }
        // ensure the json data is a string
        if (data['rule'] && !(typeof data['rule'] === 'string' || data['rule'] instanceof String)) {
            throw new Error("Expected the field `rule` to be a primitive type in the JSON string but got " + data['rule']);
        }

        return true;
    }


}



/**
 * @member {String} keystore
 */
ConfigCOAP.prototype['keystore'] = undefined;

/**
 * @member {Number} primary_port
 */
ConfigCOAP.prototype['primary_port'] = undefined;

/**
 * @member {String} rule
 */
ConfigCOAP.prototype['rule'] = undefined;

/**
 * @member {Number} secure_port
 */
ConfigCOAP.prototype['secure_port'] = undefined;






export default ConfigCOAP;

