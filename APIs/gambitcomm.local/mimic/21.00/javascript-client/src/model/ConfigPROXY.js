/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigPROXY model module.
 * @module model/ConfigPROXY
 * @version 21.00
 */
class ConfigPROXY {
    /**
     * Constructs a new <code>ConfigPROXY</code>.
     * @alias module:model/ConfigPROXY
     */
    constructor() { 
        
        ConfigPROXY.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigPROXY</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigPROXY} obj Optional instance to populate.
     * @return {module:model/ConfigPROXY} The populated <code>ConfigPROXY</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigPROXY();

            if (data.hasOwnProperty('TCP_NODELAY')) {
                obj['TCP_NODELAY'] = ApiClient.convertToType(data['TCP_NODELAY'], 'Number');
            }
            if (data.hasOwnProperty('client_to_server')) {
                obj['client_to_server'] = ApiClient.convertToType(data['client_to_server'], 'String');
            }
            if (data.hasOwnProperty('disconnect_delay')) {
                obj['disconnect_delay'] = ApiClient.convertToType(data['disconnect_delay'], 'Number');
            }
            if (data.hasOwnProperty('max_connects')) {
                obj['max_connects'] = ApiClient.convertToType(data['max_connects'], 'Number');
            }
            if (data.hasOwnProperty('portno')) {
                obj['portno'] = ApiClient.convertToType(data['portno'], 'Number');
            }
            if (data.hasOwnProperty('pre_connect')) {
                obj['pre_connect'] = ApiClient.convertToType(data['pre_connect'], 'String');
            }
            if (data.hasOwnProperty('server_to_client')) {
                obj['server_to_client'] = ApiClient.convertToType(data['server_to_client'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('transport')) {
                obj['transport'] = ApiClient.convertToType(data['transport'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigPROXY</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigPROXY</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_to_server'] && !(typeof data['client_to_server'] === 'string' || data['client_to_server'] instanceof String)) {
            throw new Error("Expected the field `client_to_server` to be a primitive type in the JSON string but got " + data['client_to_server']);
        }
        // ensure the json data is a string
        if (data['pre_connect'] && !(typeof data['pre_connect'] === 'string' || data['pre_connect'] instanceof String)) {
            throw new Error("Expected the field `pre_connect` to be a primitive type in the JSON string but got " + data['pre_connect']);
        }
        // ensure the json data is a string
        if (data['server_to_client'] && !(typeof data['server_to_client'] === 'string' || data['server_to_client'] instanceof String)) {
            throw new Error("Expected the field `server_to_client` to be a primitive type in the JSON string but got " + data['server_to_client']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['transport'] && !(typeof data['transport'] === 'string' || data['transport'] instanceof String)) {
            throw new Error("Expected the field `transport` to be a primitive type in the JSON string but got " + data['transport']);
        }

        return true;
    }


}



/**
 * @member {Number} TCP_NODELAY
 */
ConfigPROXY.prototype['TCP_NODELAY'] = undefined;

/**
 * @member {String} client_to_server
 */
ConfigPROXY.prototype['client_to_server'] = undefined;

/**
 * @member {Number} disconnect_delay
 */
ConfigPROXY.prototype['disconnect_delay'] = undefined;

/**
 * @member {Number} max_connects
 */
ConfigPROXY.prototype['max_connects'] = undefined;

/**
 * @member {Number} portno
 */
ConfigPROXY.prototype['portno'] = undefined;

/**
 * @member {String} pre_connect
 */
ConfigPROXY.prototype['pre_connect'] = undefined;

/**
 * @member {String} server_to_client
 */
ConfigPROXY.prototype['server_to_client'] = undefined;

/**
 * @member {String} target
 */
ConfigPROXY.prototype['target'] = undefined;

/**
 * @member {String} transport
 */
ConfigPROXY.prototype['transport'] = undefined;






export default ConfigPROXY;

