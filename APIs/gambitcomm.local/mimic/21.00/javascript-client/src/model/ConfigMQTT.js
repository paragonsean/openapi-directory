/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigMQTT model module.
 * @module model/ConfigMQTT
 * @version 21.00
 */
class ConfigMQTT {
    /**
     * Constructs a new <code>ConfigMQTT</code>.
     * @alias module:model/ConfigMQTT
     */
    constructor() { 
        
        ConfigMQTT.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigMQTT</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigMQTT} obj Optional instance to populate.
     * @return {module:model/ConfigMQTT} The populated <code>ConfigMQTT</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigMQTT();

            if (data.hasOwnProperty('broker')) {
                obj['broker'] = ApiClient.convertToType(data['broker'], 'String');
            }
            if (data.hasOwnProperty('clientid')) {
                obj['clientid'] = ApiClient.convertToType(data['clientid'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('is_tls')) {
                obj['is_tls'] = ApiClient.convertToType(data['is_tls'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('tls_conf_filename')) {
                obj['tls_conf_filename'] = ApiClient.convertToType(data['tls_conf_filename'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigMQTT</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigMQTT</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['broker'] && !(typeof data['broker'] === 'string' || data['broker'] instanceof String)) {
            throw new Error("Expected the field `broker` to be a primitive type in the JSON string but got " + data['broker']);
        }
        // ensure the json data is a string
        if (data['clientid'] && !(typeof data['clientid'] === 'string' || data['clientid'] instanceof String)) {
            throw new Error("Expected the field `clientid` to be a primitive type in the JSON string but got " + data['clientid']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['is_tls'] && !(typeof data['is_tls'] === 'string' || data['is_tls'] instanceof String)) {
            throw new Error("Expected the field `is_tls` to be a primitive type in the JSON string but got " + data['is_tls']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['tls_conf_filename'] && !(typeof data['tls_conf_filename'] === 'string' || data['tls_conf_filename'] instanceof String)) {
            throw new Error("Expected the field `tls_conf_filename` to be a primitive type in the JSON string but got " + data['tls_conf_filename']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {String} broker
 */
ConfigMQTT.prototype['broker'] = undefined;

/**
 * @member {String} clientid
 */
ConfigMQTT.prototype['clientid'] = undefined;

/**
 * @member {String} filename
 */
ConfigMQTT.prototype['filename'] = undefined;

/**
 * @member {String} is_tls
 */
ConfigMQTT.prototype['is_tls'] = undefined;

/**
 * @member {String} password
 */
ConfigMQTT.prototype['password'] = undefined;

/**
 * @member {Number} port
 */
ConfigMQTT.prototype['port'] = undefined;

/**
 * @member {String} tls_conf_filename
 */
ConfigMQTT.prototype['tls_conf_filename'] = undefined;

/**
 * @member {String} username
 */
ConfigMQTT.prototype['username'] = undefined;

/**
 * @member {String} version
 */
ConfigMQTT.prototype['version'] = undefined;






export default ConfigMQTT;

