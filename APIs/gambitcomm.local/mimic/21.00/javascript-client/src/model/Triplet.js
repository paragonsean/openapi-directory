/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Triplet model module.
 * @module model/Triplet
 * @version 21.00
 */
class Triplet {
    /**
     * Constructs a new <code>Triplet</code>.
     * @alias module:model/Triplet
     */
    constructor() { 
        
        Triplet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Triplet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Triplet} obj Optional instance to populate.
     * @return {module:model/Triplet} The populated <code>Triplet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Triplet();

            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('mib')) {
                obj['mib'] = ApiClient.convertToType(data['mib'], 'String');
            }
            if (data.hasOwnProperty('scenario')) {
                obj['scenario'] = ApiClient.convertToType(data['scenario'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Triplet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Triplet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['mib'] && !(typeof data['mib'] === 'string' || data['mib'] instanceof String)) {
            throw new Error("Expected the field `mib` to be a primitive type in the JSON string but got " + data['mib']);
        }

        return true;
    }


}



/**
 * @member {String} device
 */
Triplet.prototype['device'] = undefined;

/**
 * @member {String} mib
 */
Triplet.prototype['mib'] = undefined;

/**
 * @member {Number} scenario
 */
Triplet.prototype['scenario'] = undefined;






export default Triplet;

