/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessEntry from '../model/AccessEntry';

/**
* Access service.
* @module api/AccessApi
* @version 21.00
*/
export default class AccessApi {

    /**
    * Constructs a new AccessApi. 
    * @alias module:api/AccessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessAdd operation.
     * @callback module:api/AccessApi~accessAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds/Overwrites the user entry in the access control database.
     * Adds/Overwrites the user entry in the access control database.
     * @param {String} user Username of the simulator hosting system
     * @param {String} agents Agent range in minimal range representation
     * @param {String} mask Currently not used
     * @param {module:api/AccessApi~accessAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessAdd(user, agents, mask, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling accessAdd");
      }
      // verify the required parameter 'agents' is set
      if (agents === undefined || agents === null) {
        throw new Error("Missing the required parameter 'agents' when calling accessAdd");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling accessAdd");
      }

      let pathParams = {
        'user': user,
        'agents': agents,
        'mask': mask
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/add/{user}/{agents}/{mask}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessDel operation.
     * @callback module:api/AccessApi~accessDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears a users entry from access control database.
     * Using '*' for user clears all the users.
     * @param {String} user username of the simulator hosting system
     * @param {module:api/AccessApi~accessDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessDel(user, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling accessDel");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/del/{user}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessGetAcldb operation.
     * @callback module:api/AccessApi~accessGetAcldbCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current access control database in use.
     * If nothing is specified then this returns \"\".
     * @param {module:api/AccessApi~accessGetAcldbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessGetAcldb(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/get/acldb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessGetAdmindir operation.
     * @callback module:api/AccessApi~accessGetAdmindirCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current admin directory.
     * If nothing is specified in admin/settings.cfg then returns \"\". If no admin directory is specified then the shared area will be used where needed (e.g. for persistent info, access control data files etc. )
     * @param {module:api/AccessApi~accessGetAdmindirCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessGetAdmindir(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/get/admindir', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessGetAdminuser operation.
     * @callback module:api/AccessApi~accessGetAdminuserCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current administrator.
     * If nothing is specified in admin/settings.cfg then returns \"\".
     * @param {module:api/AccessApi~accessGetAdminuserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessGetAdminuser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/get/adminuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessGetEnabled operation.
     * @callback module:api/AccessApi~accessGetEnabledCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the state of access control checking.
     * 0 indicates that it is disabled, 1 indicates it is enabled.
     * @param {module:api/AccessApi~accessGetEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessGetEnabled(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/get/enabled', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessList operation.
     * @callback module:api/AccessApi~accessListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of entries.
     * Each entry consists of user, agents (in minimal range representation) and access mask (not used currently).
     * @param {module:api/AccessApi~accessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessEntry>}
     */
    accessList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccessEntry];
      return this.apiClient.callApi(
        '/mimic/access/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessLoad operation.
     * @callback module:api/AccessApi~accessLoadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads the specified file for access control data.
     * If filename is not specified then the currently set 'acldb' parameter is used.
     * @param {String} filename Filename to load
     * @param {module:api/AccessApi~accessLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    accessLoad(filename, callback) {
      let postBody = null;
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling accessLoad");
      }

      let pathParams = {
        'filename': filename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/access/load/{filename}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessSave operation.
     * @callback module:api/AccessApi~accessSaveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves current access control data in specified file.
     * If filename is not specified then the currently set 'acldb' parameter is used.
     * @param {String} filename Filename to save
     * @param {module:api/AccessApi~accessSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    accessSave(filename, callback) {
      let postBody = null;
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling accessSave");
      }

      let pathParams = {
        'filename': filename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/access/save/{filename}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessSetAcldb operation.
     * @callback module:api/AccessApi~accessSetAcldbCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows setting the name of the current access control database.
     * This will be used for subsequent load and save operations.
     * @param {String} databaseName Database name to use
     * @param {module:api/AccessApi~accessSetAcldbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessSetAcldb(databaseName, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling accessSetAcldb");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/set/acldb/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessSetEnabled operation.
     * @callback module:api/AccessApi~accessSetEnabledCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the user to enable/disable the access control check.
     * 0 indicates disabled, 1 indicates enabled.
     * @param {String} enabledOrNot indicator
     * @param {module:api/AccessApi~accessSetEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    accessSetEnabled(enabledOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'enabledOrNot' is set
      if (enabledOrNot === undefined || enabledOrNot === null) {
        throw new Error("Missing the required parameter 'enabledOrNot' when calling accessSetEnabled");
      }

      let pathParams = {
        'enabledOrNot': enabledOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/access/set/enabled/{enabledOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
