/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigSNMPTCP from '../model/ConfigSNMPTCP';
import IPAlias from '../model/IPAlias';

/**
* SNMPTCP service.
* @module api/SNMPTCPApi
* @version 21.00
*/
export default class SNMPTCPApi {

    /**
    * Constructs a new SNMPTCPApi. 
    * @alias module:api/SNMPTCPApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolSnmptcpGetArgs operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpGetArgsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SNMPTCP argument structure
     * Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the SNMPTCP argument structure
     * @param {module:api/SNMPTCPApi~protocolSnmptcpGetArgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolSnmptcpGetArgs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpGetArgs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/args', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpGetConfig operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSNMPTCP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SNMPTCP configuration
     * Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the SNMPTCP configuration
     * @param {module:api/SNMPTCPApi~protocolSnmptcpGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSNMPTCP}
     */
    protocolSnmptcpGetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigSNMPTCP;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpGetStatistics operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpGetStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SNMPTCP statistics
     * Statistics of fields indicated in the headers
     * @param {Number} agentNum Agent to show SNMPTCP statistics
     * @param {module:api/SNMPTCPApi~protocolSnmptcpGetStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolSnmptcpGetStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpGetStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpGetStatsHdr operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpGetStatsHdrCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the SNMPTCP statistics headers
     * The headers of statistics fields
     * @param {module:api/SNMPTCPApi~protocolSnmptcpGetStatsHdrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmptcpGetStatsHdr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/protocol/msg/snmptcp/get/stats_hdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpGetTrace operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpGetTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSNMPTCP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SNMPTCP traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param {Number} agentNum Agent to show whether SNMPTCP tracing is enabled
     * @param {module:api/SNMPTCPApi~protocolSnmptcpGetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSNMPTCP}
     */
    protocolSnmptcpGetTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpGetTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigSNMPTCP;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpIpaliasDisable operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpIpaliasDisableCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate SNMPTCP IP alias
     * @param {String} ipaddress 
     * @param {Number} port 
     * @param {module:api/SNMPTCPApi~protocolSnmptcpIpaliasDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmptcpIpaliasDisable(agentNum, ipaddress, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpIpaliasDisable");
      }
      // verify the required parameter 'ipaddress' is set
      if (ipaddress === undefined || ipaddress === null) {
        throw new Error("Missing the required parameter 'ipaddress' when calling protocolSnmptcpIpaliasDisable");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolSnmptcpIpaliasDisable");
      }

      let pathParams = {
        'agentNum': agentNum,
        'ipaddress': ipaddress,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/disable/{ipaddress}/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpIpaliasEnable operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpIpaliasEnableCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate SNMPTCP IP alias
     * @param {String} ipaddress 
     * @param {Number} port 
     * @param {module:api/SNMPTCPApi~protocolSnmptcpIpaliasEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmptcpIpaliasEnable(agentNum, ipaddress, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpIpaliasEnable");
      }
      // verify the required parameter 'ipaddress' is set
      if (ipaddress === undefined || ipaddress === null) {
        throw new Error("Missing the required parameter 'ipaddress' when calling protocolSnmptcpIpaliasEnable");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolSnmptcpIpaliasEnable");
      }

      let pathParams = {
        'agentNum': agentNum,
        'ipaddress': ipaddress,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/enable/{ipaddress}/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpIpaliasIsenabled operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpIpaliasIsenabledCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check individual IP aliases on the agent and the simulator host
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate SNMPTCP IP alias
     * @param {String} ipaddress 
     * @param {Number} port 
     * @param {module:api/SNMPTCPApi~protocolSnmptcpIpaliasIsenabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmptcpIpaliasIsenabled(agentNum, ipaddress, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpIpaliasIsenabled");
      }
      // verify the required parameter 'ipaddress' is set
      if (ipaddress === undefined || ipaddress === null) {
        throw new Error("Missing the required parameter 'ipaddress' when calling protocolSnmptcpIpaliasIsenabled");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolSnmptcpIpaliasIsenabled");
      }

      let pathParams = {
        'agentNum': agentNum,
        'ipaddress': ipaddress,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/isenabled/{ipaddress}/{port}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpIpaliasList operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpIpaliasListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IPAlias>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all IP aliases on the agent and the simulator host
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate SNMPTCP IP alias
     * @param {module:api/SNMPTCPApi~protocolSnmptcpIpaliasListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IPAlias>}
     */
    protocolSnmptcpIpaliasList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpIpaliasList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IPAlias];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpSetConfig operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's SNMPTCP configuration
     * Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to set the SNMPTCP configuration
     * @param {String} argument Parameter to set the SNMPTCP configuration
     * @param {String} value Value to set the SNMPTCP configuration
     * @param {module:api/SNMPTCPApi~protocolSnmptcpSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmptcpSetConfig(agentNum, argument, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpSetConfig");
      }
      // verify the required parameter 'argument' is set
      if (argument === undefined || argument === null) {
        throw new Error("Missing the required parameter 'argument' when calling protocolSnmptcpSetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolSnmptcpSetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'argument': argument,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/config/{argument}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmptcpSetTrace operation.
     * @callback module:api/SNMPTCPApi~protocolSnmptcpSetTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's SNMPTCP traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the SNMPTCP tracing
     * @param {String} enableOrNot Value to set the SNMPTCP tracing
     * @param {module:api/SNMPTCPApi~protocolSnmptcpSetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmptcpSetTrace(agentNum, enableOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmptcpSetTrace");
      }
      // verify the required parameter 'enableOrNot' is set
      if (enableOrNot === undefined || enableOrNot === null) {
        throw new Error("Missing the required parameter 'enableOrNot' when calling protocolSnmptcpSetTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'enableOrNot': enableOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/trace/{enableOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
