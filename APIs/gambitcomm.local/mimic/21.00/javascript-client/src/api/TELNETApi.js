/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigTELNET from '../model/ConfigTELNET';
import IPAlias from '../model/IPAlias';
import TelnetUser from '../model/TelnetUser';

/**
* TELNET service.
* @module api/TELNETApi
* @version 21.00
*/
export default class TELNETApi {

    /**
    * Constructs a new TELNETApi. 
    * @alias module:api/TELNETApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolTelnetConnectionLogon operation.
     * @callback module:api/TELNETApi~protocolTelnetConnectionLogonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the connection's current logon.
     * Logon change allows (hidden) commands for a different access mode to run.
     * @param {Number} agentNum Agent to manipulate TELNET connection
     * @param {Number} connectionID 
     * @param {String} user 
     * @param {String} password 
     * @param {module:api/TELNETApi~protocolTelnetConnectionLogonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetConnectionLogon(agentNum, connectionID, user, password, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetConnectionLogon");
      }
      // verify the required parameter 'connectionID' is set
      if (connectionID === undefined || connectionID === null) {
        throw new Error("Missing the required parameter 'connectionID' when calling protocolTelnetConnectionLogon");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling protocolTelnetConnectionLogon");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling protocolTelnetConnectionLogon");
      }

      let pathParams = {
        'agentNum': agentNum,
        'connectionID': connectionID,
        'user': user,
        'password': password
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/logon/{connectionID}/{user}/{password}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetConnectionRequest operation.
     * @callback module:api/TELNETApi~protocolTelnetConnectionRequestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes the command asynchronously .
     * Equivalent of the command typed in by the user.
     * @param {Number} agentNum Agent to manipulate TELNET connection
     * @param {Number} connectionID 
     * @param {String} command 
     * @param {module:api/TELNETApi~protocolTelnetConnectionRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetConnectionRequest(agentNum, connectionID, command, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetConnectionRequest");
      }
      // verify the required parameter 'connectionID' is set
      if (connectionID === undefined || connectionID === null) {
        throw new Error("Missing the required parameter 'connectionID' when calling protocolTelnetConnectionRequest");
      }
      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling protocolTelnetConnectionRequest");
      }

      let pathParams = {
        'agentNum': agentNum,
        'connectionID': connectionID,
        'command': command
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/request/{connectionID}/{command}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetConnectionSignal operation.
     * @callback module:api/TELNETApi~protocolTelnetConnectionSignalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers the asynchronous signal event with the specified signal name
     * Signal name is either connect or idle
     * @param {Number} agentNum Agent to manipulate TELNET connection
     * @param {Number} connectionID 
     * @param {String} signalName 
     * @param {module:api/TELNETApi~protocolTelnetConnectionSignalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetConnectionSignal(agentNum, connectionID, signalName, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetConnectionSignal");
      }
      // verify the required parameter 'connectionID' is set
      if (connectionID === undefined || connectionID === null) {
        throw new Error("Missing the required parameter 'connectionID' when calling protocolTelnetConnectionSignal");
      }
      // verify the required parameter 'signalName' is set
      if (signalName === undefined || signalName === null) {
        throw new Error("Missing the required parameter 'signalName' when calling protocolTelnetConnectionSignal");
      }

      let pathParams = {
        'agentNum': agentNum,
        'connectionID': connectionID,
        'signalName': signalName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/signal/{connectionID}/{signalName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetGetArgs operation.
     * @callback module:api/TELNETApi~protocolTelnetGetArgsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET argument structure
     * Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the TELNET argument structure
     * @param {module:api/TELNETApi~protocolTelnetGetArgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolTelnetGetArgs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetGetArgs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/get/args', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetGetConfig operation.
     * @callback module:api/TELNETApi~protocolTelnetGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigTELNET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET configuration
     * Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the TELNET configuration
     * @param {module:api/TELNETApi~protocolTelnetGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigTELNET}
     */
    protocolTelnetGetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigTELNET;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetGetStatistics operation.
     * @callback module:api/TELNETApi~protocolTelnetGetStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET statistics
     * Statistics of fields indicated in the headers
     * @param {Number} agentNum Agent to show TELNET statistics
     * @param {module:api/TELNETApi~protocolTelnetGetStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolTelnetGetStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetGetStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetGetStatsHdr operation.
     * @callback module:api/TELNETApi~protocolTelnetGetStatsHdrCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the TELNET statistics headers
     * The headers of statistics fields
     * @param {module:api/TELNETApi~protocolTelnetGetStatsHdrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetGetStatsHdr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/protocol/msg/telnet/get/stats_hdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetGetTrace operation.
     * @callback module:api/TELNETApi~protocolTelnetGetTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigTELNET} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param {Number} agentNum Agent to show whether TELNET tracing is enabled
     * @param {module:api/TELNETApi~protocolTelnetGetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigTELNET}
     */
    protocolTelnetGetTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetGetTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigTELNET;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetIpaliasDisable operation.
     * @callback module:api/TELNETApi~protocolTelnetIpaliasDisableCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate TELNET IP alias
     * @param {String} ipaddress 
     * @param {Number} port 
     * @param {module:api/TELNETApi~protocolTelnetIpaliasDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTelnetIpaliasDisable(agentNum, ipaddress, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasDisable");
      }
      // verify the required parameter 'ipaddress' is set
      if (ipaddress === undefined || ipaddress === null) {
        throw new Error("Missing the required parameter 'ipaddress' when calling protocolTelnetIpaliasDisable");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolTelnetIpaliasDisable");
      }

      let pathParams = {
        'agentNum': agentNum,
        'ipaddress': ipaddress,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/disable/{ipaddress}/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetIpaliasEnable operation.
     * @callback module:api/TELNETApi~protocolTelnetIpaliasEnableCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate TELNET IP alias
     * @param {String} ipaddress 
     * @param {Number} port 
     * @param {module:api/TELNETApi~protocolTelnetIpaliasEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTelnetIpaliasEnable(agentNum, ipaddress, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasEnable");
      }
      // verify the required parameter 'ipaddress' is set
      if (ipaddress === undefined || ipaddress === null) {
        throw new Error("Missing the required parameter 'ipaddress' when calling protocolTelnetIpaliasEnable");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolTelnetIpaliasEnable");
      }

      let pathParams = {
        'agentNum': agentNum,
        'ipaddress': ipaddress,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/enable/{ipaddress}/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetIpaliasIsenabled operation.
     * @callback module:api/TELNETApi~protocolTelnetIpaliasIsenabledCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check individual IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate TELNET IP alias
     * @param {String} ipaddress 
     * @param {Number} port 
     * @param {module:api/TELNETApi~protocolTelnetIpaliasIsenabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTelnetIpaliasIsenabled(agentNum, ipaddress, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasIsenabled");
      }
      // verify the required parameter 'ipaddress' is set
      if (ipaddress === undefined || ipaddress === null) {
        throw new Error("Missing the required parameter 'ipaddress' when calling protocolTelnetIpaliasIsenabled");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolTelnetIpaliasIsenabled");
      }

      let pathParams = {
        'agentNum': agentNum,
        'ipaddress': ipaddress,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/isenabled/{ipaddress}/{port}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetIpaliasList operation.
     * @callback module:api/TELNETApi~protocolTelnetIpaliasListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IPAlias>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all IP aliases on the agent and the simulator host
     * By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
     * @param {Number} agentNum Agent to manipulate TELNET IP alias
     * @param {module:api/TELNETApi~protocolTelnetIpaliasListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IPAlias>}
     */
    protocolTelnetIpaliasList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetIpaliasList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IPAlias];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetServerGetConnections operation.
     * @callback module:api/TELNETApi~protocolTelnetServerGetConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET connections
     * IDs of all connected connections
     * @param {Number} agentNum Agent to show TELNET configuration
     * @param {module:api/TELNETApi~protocolTelnetServerGetConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolTelnetServerGetConnections(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetConnections");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetServerGetKeymap operation.
     * @callback module:api/TELNETApi~protocolTelnetServerGetKeymapCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET keymap file name
     * Keymap file name
     * @param {Number} agentNum Agent to show TELNET statistics
     * @param {module:api/TELNETApi~protocolTelnetServerGetKeymapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetServerGetKeymap(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetKeymap");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/keymap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetServerGetRulesdb operation.
     * @callback module:api/TELNETApi~protocolTelnetServerGetRulesdbCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET rules db file name
     * Rules db file name
     * @param {Number} agentNum Agent to show TELNET statistics
     * @param {module:api/TELNETApi~protocolTelnetServerGetRulesdbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetServerGetRulesdb(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetRulesdb");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/rulesdb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetServerGetState operation.
     * @callback module:api/TELNETApi~protocolTelnetServerGetStateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET server state
     * Return 1 means accepting connections, 0 not
     * @param {Number} agentNum Agent to show TELNET statistics
     * @param {module:api/TELNETApi~protocolTelnetServerGetStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolTelnetServerGetState(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetState");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetServerGetUserdb operation.
     * @callback module:api/TELNETApi~protocolTelnetServerGetUserdbCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET user db file name
     * User db file name
     * @param {Number} agentNum Agent to show TELNET statistics
     * @param {module:api/TELNETApi~protocolTelnetServerGetUserdbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTelnetServerGetUserdb(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetUserdb");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/userdb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetServerGetUsers operation.
     * @callback module:api/TELNETApi~protocolTelnetServerGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TelnetUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TELNET users
     * List of users
     * @param {Number} agentNum Agent to show TELNET configuration
     * @param {module:api/TELNETApi~protocolTelnetServerGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TelnetUser>}
     */
    protocolTelnetServerGetUsers(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetServerGetUsers");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TelnetUser];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetSetConfig operation.
     * @callback module:api/TELNETApi~protocolTelnetSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's TELNET configuration
     * Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to set the TELNET configuration
     * @param {String} argument Parameter to set the TELNET configuration
     * @param {String} value Value to set the TELNET configuration
     * @param {module:api/TELNETApi~protocolTelnetSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTelnetSetConfig(agentNum, argument, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetSetConfig");
      }
      // verify the required parameter 'argument' is set
      if (argument === undefined || argument === null) {
        throw new Error("Missing the required parameter 'argument' when calling protocolTelnetSetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolTelnetSetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'argument': argument,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/set/config/{argument}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTelnetSetTrace operation.
     * @callback module:api/TELNETApi~protocolTelnetSetTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's TELNET traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the TELNET tracing
     * @param {String} enableOrNot Value to set the TELNET tracing
     * @param {module:api/TELNETApi~protocolTelnetSetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTelnetSetTrace(agentNum, enableOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTelnetSetTrace");
      }
      // verify the required parameter 'enableOrNot' is set
      if (enableOrNot === undefined || enableOrNot === null) {
        throw new Error("Missing the required parameter 'enableOrNot' when calling protocolTelnetSetTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'enableOrNot': enableOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/telnet/set/trace/{enableOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
