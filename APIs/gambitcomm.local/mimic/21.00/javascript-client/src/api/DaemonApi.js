/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgentState from '../model/AgentState';
import TimerScript from '../model/TimerScript';

/**
* Daemon service.
* @module api/DaemonApi
* @version 21.00
*/
export default class DaemonApi {

    /**
    * Constructs a new DaemonApi. 
    * @alias module:api/DaemonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDaemonTimerScript operation.
     * @callback module:api/DaemonApi~addDaemonTimerScriptCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new timer script to be executed at specified interval (in msec) with the specified argument.
     * Add a new timer script to be executed at specified interval (in msec) with the specified argument.
     * @param {String} script Script name
     * @param {Number} interval Interval in msec
     * @param {String} arg Arguments to the script
     * @param {module:api/DaemonApi~addDaemonTimerScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addDaemonTimerScript(script, interval, arg, callback) {
      let postBody = null;
      // verify the required parameter 'script' is set
      if (script === undefined || script === null) {
        throw new Error("Missing the required parameter 'script' when calling addDaemonTimerScript");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling addDaemonTimerScript");
      }
      // verify the required parameter 'arg' is set
      if (arg === undefined || arg === null) {
        throw new Error("Missing the required parameter 'arg' when calling addDaemonTimerScript");
      }

      let pathParams = {
        'script': script,
        'interval': interval,
        'arg': arg
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/timer/script/add/{script}/{interval}/{arg}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cfgLoad operation.
     * @callback module:api/DaemonApi~cfgLoadCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load the lab configuration file file.
     * Load agents in cfgFile from firstAgentNum to lastAgentNum on startAgentNum of current configuration
     * @param {String} cfgFile MIMIC agent configuration file to load
     * @param {Number} firstAgentNum Agent number in cfgFile to start the loading
     * @param {Number} lastAgentNum Agent number in cfgFile to end the loading
     * @param {Number} startAgentNum Agent number in current configuration to start placing the new agents
     * @param {module:api/DaemonApi~cfgLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    cfgLoad(cfgFile, firstAgentNum, lastAgentNum, startAgentNum, callback) {
      let postBody = null;
      // verify the required parameter 'cfgFile' is set
      if (cfgFile === undefined || cfgFile === null) {
        throw new Error("Missing the required parameter 'cfgFile' when calling cfgLoad");
      }
      // verify the required parameter 'firstAgentNum' is set
      if (firstAgentNum === undefined || firstAgentNum === null) {
        throw new Error("Missing the required parameter 'firstAgentNum' when calling cfgLoad");
      }
      // verify the required parameter 'lastAgentNum' is set
      if (lastAgentNum === undefined || lastAgentNum === null) {
        throw new Error("Missing the required parameter 'lastAgentNum' when calling cfgLoad");
      }
      // verify the required parameter 'startAgentNum' is set
      if (startAgentNum === undefined || startAgentNum === null) {
        throw new Error("Missing the required parameter 'startAgentNum' when calling cfgLoad");
      }

      let pathParams = {
        'cfgFile': cfgFile,
        'firstAgentNum': firstAgentNum,
        'lastAgentNum': lastAgentNum,
        'startAgentNum': startAgentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/load/{cfgFile}/{firstAgentNum}/{lastAgentNum}/{startAgentNum}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cfgNew operation.
     * @callback module:api/DaemonApi~cfgNewCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear the lab configuration.
     * Clear the lab configuration.
     * @param {Number} firstAgentNum Agent number to start clearing
     * @param {Number} lastAgentNum Agent number to end the clearing
     * @param {module:api/DaemonApi~cfgNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    cfgNew(firstAgentNum, lastAgentNum, callback) {
      let postBody = null;
      // verify the required parameter 'firstAgentNum' is set
      if (firstAgentNum === undefined || firstAgentNum === null) {
        throw new Error("Missing the required parameter 'firstAgentNum' when calling cfgNew");
      }
      // verify the required parameter 'lastAgentNum' is set
      if (lastAgentNum === undefined || lastAgentNum === null) {
        throw new Error("Missing the required parameter 'lastAgentNum' when calling cfgNew");
      }

      let pathParams = {
        'firstAgentNum': firstAgentNum,
        'lastAgentNum': lastAgentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/clear/{firstAgentNum}/{lastAgentNum}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cfgSave operation.
     * @callback module:api/DaemonApi~cfgSaveCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the lab configuration.
     * Save the lab configuration.
     * @param {module:api/DaemonApi~cfgSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    cfgSave(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/save', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cfgSaveas operation.
     * @callback module:api/DaemonApi~cfgSaveasCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the lab configuration in file.
     * Save the lab configuration in file.
     * @param {String} cfgFile MIMIC agent configuration file to save
     * @param {Number} firstAgentNum Agent number in cfgFile to start the loading
     * @param {Number} lastAgentNum Agent number in cfgFile to end the loading
     * @param {module:api/DaemonApi~cfgSaveasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    cfgSaveas(cfgFile, firstAgentNum, lastAgentNum, callback) {
      let postBody = null;
      // verify the required parameter 'cfgFile' is set
      if (cfgFile === undefined || cfgFile === null) {
        throw new Error("Missing the required parameter 'cfgFile' when calling cfgSaveas");
      }
      // verify the required parameter 'firstAgentNum' is set
      if (firstAgentNum === undefined || firstAgentNum === null) {
        throw new Error("Missing the required parameter 'firstAgentNum' when calling cfgSaveas");
      }
      // verify the required parameter 'lastAgentNum' is set
      if (lastAgentNum === undefined || lastAgentNum === null) {
        throw new Error("Missing the required parameter 'lastAgentNum' when calling cfgSaveas");
      }

      let pathParams = {
        'cfgFile': cfgFile,
        'firstAgentNum': firstAgentNum,
        'lastAgentNum': lastAgentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/saveas/{cfgFile}/{firstAgentNum}/{lastAgentNum}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delDaemonTimerScript operation.
     * @callback module:api/DaemonApi~delDaemonTimerScriptCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a timer script from the execution list.
     * The first scheduled script that matches the script name, and optionally the interval and argument will be deleted.
     * @param {String} script Script name
     * @param {Number} interval Interval in msec
     * @param {String} arg Arguments to the script
     * @param {module:api/DaemonApi~delDaemonTimerScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    delDaemonTimerScript(script, interval, arg, callback) {
      let postBody = null;
      // verify the required parameter 'script' is set
      if (script === undefined || script === null) {
        throw new Error("Missing the required parameter 'script' when calling delDaemonTimerScript");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling delDaemonTimerScript");
      }
      // verify the required parameter 'arg' is set
      if (arg === undefined || arg === null) {
        throw new Error("Missing the required parameter 'arg' when calling delDaemonTimerScript");
      }

      let pathParams = {
        'script': script,
        'interval': interval,
        'arg': arg
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/timer/script/delete/{script}/{interval}/{arg}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveDataList operation.
     * @callback module:api/DaemonApi~getActiveDataListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of {agentnum {statistics}} for agents that are currently active and whose statistics have changed since the last invocation of this command.
     * This list is guaranteed to be sorted into increasing order.
     * @param {module:api/DaemonApi~getActiveDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getActiveDataList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/get/active_data_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveList operation.
     * @callback module:api/DaemonApi~getActiveListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of {agentnum} that are currently active (running or paused).
     * This list is guaranteed to be sorted into increasing order.
     * @param {module:api/DaemonApi~getActiveListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getActiveList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/get/active_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCfgFileChanged operation.
     * @callback module:api/DaemonApi~getCfgFileChangedCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This predicate indicates if the currently loaded agent configuration file has changed.
     * Whether the loaded agent configuration file has changed since the last time this predicate was queried. This allows for a client to detect agent configuration changes and to synchronize those changes from the MIMIC daemon.
     * @param {module:api/DaemonApi~getCfgFileChangedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getCfgFileChanged(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/cfgfile_changed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCfgfile operation.
     * @callback module:api/DaemonApi~getCfgfileCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The currently loaded lab configuration file for the particular user.
     * In the case of multi-user access this command returns a different configuration file loaded for each user.
     * @param {module:api/DaemonApi~getCfgfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getCfgfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/cfgfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangedConfigList operation.
     * @callback module:api/DaemonApi~getChangedConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of {agentnum} for which a configurable parameter changed.
     * This list contains at most 5000 agent(s), and is guaranteed to be sorted into increasing order.
     * @param {module:api/DaemonApi~getChangedConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getChangedConfigList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/get/changed_config_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangedStateList operation.
     * @callback module:api/DaemonApi~getChangedStateListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AgentState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of {agentnum state} for which the state changed.
     * This list contains at most 5000 agent(s), and is guaranteed to be sorted into increasing order.
     * @param {module:api/DaemonApi~getChangedStateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AgentState>}
     */
    getChangedStateList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AgentState];
      return this.apiClient.callApi(
        '/mimic/get/changed_state_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClients operation.
     * @callback module:api/DaemonApi~getClientsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The number of clients currently connected to the daemon.
     * The number of clients currently connected to the daemon.
     * @param {module:api/DaemonApi~getClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getClients(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguredList operation.
     * @callback module:api/DaemonApi~getConfiguredListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of {agentnum} that are currently configured.
     * This list is guaranteed to be sorted into increasing order.
     * @param {module:api/DaemonApi~getConfiguredListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getConfiguredList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/get/configured_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDaemonProtocols operation.
     * @callback module:api/DaemonApi~getDaemonProtocolsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The set of protocols supported by the Simulator.
     * The set of protocols supported by the Simulator.
     * @param {module:api/DaemonApi~getDaemonProtocolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getDaemonProtocols(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/protocols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterfaces operation.
     * @callback module:api/DaemonApi~getInterfacesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The set of network interfaces that can be used for simulations.
     * The set of network interfaces that can be used for simulations.
     * @param {module:api/DaemonApi~getInterfacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getInterfaces(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLast operation.
     * @callback module:api/DaemonApi~getLastCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The last configured agent instance.
     * The last configured agent instance.
     * @param {module:api/DaemonApi~getLastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getLast(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/get/last', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLog operation.
     * @callback module:api/DaemonApi~getLogCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The current log file for the Simulator.
     * The current log file for the Simulator.
     * @param {module:api/DaemonApi~getLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getLog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMax operation.
     * @callback module:api/DaemonApi~getMaxCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The maximum number of agent instances.
     * The maximum number of agent instances.
     * @param {module:api/DaemonApi~getMaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getMax(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/get/max', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetaddr operation.
     * @callback module:api/DaemonApi~getNetaddrCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The network address of the host where the MIMIC simulator is running.
     * The network address of the host where the MIMIC simulator is running.
     * @param {module:api/DaemonApi~getNetaddrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getNetaddr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/netaddr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetdev operation.
     * @callback module:api/DaemonApi~getNetdevCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The default network device to be used for agent addresses.
     * The default network device to be used for agent addresses if the interface is not explicitly specified for an agent.
     * @param {module:api/DaemonApi~getNetdevCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getNetdev(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/netdev', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback module:api/DaemonApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The product number that is licensed.
     * The product number that is licensed.
     * @param {module:api/DaemonApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getProduct(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturn operation.
     * @callback module:api/DaemonApi~getReturnCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The return mode.
     * The OpenAPI daemon operates in two modes, nocatch, where error returns from MIMIC operations return error; or catch, where the TCL catch semantics are used (these are similar to C++ exceptions)
     * @param {module:api/DaemonApi~getReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    getReturn(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/get/return', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersion operation.
     * @callback module:api/DaemonApi~getVersionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The version of the MIMIC command interface.
     * The version of the MIMIC command interface.
     * @param {module:api/DaemonApi~getVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getVersion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/get/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDaemonTimerScripts operation.
     * @callback module:api/DaemonApi~listDaemonTimerScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimerScript>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the timer scripts currently running along with the their intervals.
     * The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}.
     * @param {module:api/DaemonApi~listDaemonTimerScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimerScript>}
     */
    listDaemonTimerScripts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimerScript];
      return this.apiClient.callApi(
        '/mimic/timer/script/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mgetInfo operation.
     * @callback module:api/DaemonApi~mgetInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command.
     * Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command.
     * @param {Array.<String>} infoArray Multiple strings of info.
     * @param {module:api/DaemonApi~mgetInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    mgetInfo(infoArray, callback) {
      let postBody = null;
      // verify the required parameter 'infoArray' is set
      if (infoArray === undefined || infoArray === null) {
        throw new Error("Missing the required parameter 'infoArray' when calling mgetInfo");
      }

      let pathParams = {
        'infoArray': infoArray
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/mimic/mget/{infoArray}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLog operation.
     * @callback module:api/DaemonApi~setLogCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The current log file for the Simulator.
     * The current log file for the Simulator.
     * @param {String} body The file name of the new log file
     * @param {module:api/DaemonApi~setLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setLog(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/set/log', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setNetdev operation.
     * @callback module:api/DaemonApi~setNetdevCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The network address of the host where the MIMIC simulator is running.
     * The network address of the host where the MIMIC simulator is running.
     * @param {module:api/DaemonApi~setNetdevCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    setNetdev(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/set/netdev', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAllAgents operation.
     * @callback module:api/DaemonApi~startAllAgentsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start MIMIC.
     * Start MIMIC.
     * @param {module:api/DaemonApi~startAllAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    startAllAgents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopAllAgents operation.
     * @callback module:api/DaemonApi~stopAllAgentsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop MIMIC.
     * Stop MIMIC.
     * @param {module:api/DaemonApi~stopAllAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    stopAllAgents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeExists operation.
     * @callback module:api/DaemonApi~storeExistsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command can be used as a predicate to ascertain the existence of a given variable.
     * It returns \"1\" if the variable exists, else \"0\".
     * @param {String} _var Variable name
     * @param {module:api/DaemonApi~storeExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storeExists(_var, callback) {
      let postBody = null;
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling storeExists");
      }

      let pathParams = {
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/store/exists/{var}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeGet operation.
     * @callback module:api/DaemonApi~storeGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the value associated with a variable.
     * The value will be returned as a string (like all Tcl values).
     * @param {String} _var Variable name
     * @param {module:api/DaemonApi~storeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storeGet(_var, callback) {
      let postBody = null;
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling storeGet");
      }

      let pathParams = {
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/store/get/{var}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeList operation.
     * @callback module:api/DaemonApi~storeListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command will return the list of variables in the said scope.
     * The list will be a Tcl format list with curly braces \"{}\" around each list element. These elements in turn are space separated.
     * @param {module:api/DaemonApi~storeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    storeList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/store/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeLreplace operation.
     * @callback module:api/DaemonApi~storeLreplaceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
     * These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
     * @param {String} _var Variable name
     * @param {Number} index Index
     * @param {Object} opts Optional parameters
     * @param {String} [body] Value
     * @param {module:api/DaemonApi~storeLreplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storeLreplace(_var, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling storeLreplace");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling storeLreplace");
      }

      let pathParams = {
        'var': _var,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/store/lreplace/{var}/{index}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storePersists operation.
     * @callback module:api/DaemonApi~storePersistsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command can be used as a predicate to ascertain the persistence of a given variable.
     * It returns \"1\" if the variable is persistent, else \"0\".
     * @param {String} _var Variable name
     * @param {module:api/DaemonApi~storePersistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storePersists(_var, callback) {
      let postBody = null;
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling storePersists");
      }

      let pathParams = {
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/store/persists/{var}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeSave operation.
     * @callback module:api/DaemonApi~storeSaveCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation flushes all global objects which need to be made persistent to disk.
     * The MIMIC daemon caches persistent objects and their changes, and writes them to disk at program termination. If it were to crash, these changes would be lost. This operation allows to checkpoint the cache, ie. write changes to persistent objects to disk. To save the lab configuration with per-agent persistent information the mimic save operation needs to be used.
     * @param {module:api/DaemonApi~storeSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    storeSave(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/set/persistent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeSet operation.
     * @callback module:api/DaemonApi~storeSetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the variable store for the global storage
     * Persist 1 means persistent , 0 means non-persistent
     * @param {String} _var Variable name
     * @param {Number} persist Persistent setting
     * @param {Object} opts Optional parameters
     * @param {String} [body] Value
     * @param {module:api/DaemonApi~storeSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storeSet(_var, persist, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling storeSet");
      }
      // verify the required parameter 'persist' is set
      if (persist === undefined || persist === null) {
        throw new Error("Missing the required parameter 'persist' when calling storeSet");
      }

      let pathParams = {
        'var': _var,
        'persist': persist
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/store/set/{var}/{persist}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeUnset operation.
     * @callback module:api/DaemonApi~storeUnsetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a variable which is currently defined.
     * This will cleanup persistent variables if needed
     * @param {String} _var Variable name
     * @param {module:api/DaemonApi~storeUnsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storeUnset(_var, callback) {
      let postBody = null;
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling storeUnset");
      }

      let pathParams = {
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/store/unset/{var}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the terminate operation.
     * @callback module:api/DaemonApi~terminateCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Number}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate the MIMIC daemon.
     * Terminate the MIMIC daemon.
     * @param {module:api/DaemonApi~terminateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Number}>}
     */
    terminate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'Number'};
      return this.apiClient.callApi(
        '/mimic/terminate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
