/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigMQTT from '../model/ConfigMQTT';

/**
* MQTT service.
* @module api/MQTTApi
* @version 21.00
*/
export default class MQTTApi {

    /**
    * Constructs a new MQTTApi. 
    * @alias module:api/MQTTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolMqttClientGetProtstate operation.
     * @callback module:api/MQTTApi~protocolMqttClientGetProtstateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's MQTT TCP connection state
     * 0 - stopped, 2 - disconnected, 3 - connecting, 4 - connected, 5 - waiting for CONNACK, 6 - waiting for SUBACK, 7 - CONNACK received, in steady state
     * @param {Number} agentNum Agent to show MQTT state
     * @param {module:api/MQTTApi~protocolMqttClientGetProtstateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientGetProtstate(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientGetProtstate");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/protstate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientGetState operation.
     * @callback module:api/MQTTApi~protocolMqttClientGetStateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's MQTT state
     * 0 means stopped, 1 means running
     * @param {Number} agentNum Agent to show MQTT state
     * @param {module:api/MQTTApi~protocolMqttClientGetStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientGetState(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientGetState");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientMessageCard operation.
     * @callback module:api/MQTTApi~protocolMqttClientMessageCardCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's current messages' cardinality
     * 0 or more
     * @param {Number} agentNum Agent to show MQTT message state
     * @param {module:api/MQTTApi~protocolMqttClientMessageCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientMessageCard(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientMessageCard");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientMessageGet operation.
     * @callback module:api/MQTTApi~protocolMqttClientMessageGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's message attributes
     * Attribute can be topic, interval, count, sent , pre, post, properties(list of PUBLISH properties), properties.i (i-th PUBLISH property), properties.PROP-NAME (PUBLISH property with name PROP-NAME)
     * @param {Number} agentNum Agent to show MQTT state
     * @param {Number} msgNum Message Number
     * @param {String} attr Attribute
     * @param {module:api/MQTTApi~protocolMqttClientMessageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientMessageGet(agentNum, msgNum, attr, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientMessageGet");
      }
      // verify the required parameter 'msgNum' is set
      if (msgNum === undefined || msgNum === null) {
        throw new Error("Missing the required parameter 'msgNum' when calling protocolMqttClientMessageGet");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling protocolMqttClientMessageGet");
      }

      let pathParams = {
        'agentNum': agentNum,
        'msgNum': msgNum,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/get/{msgNum}/{attr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientMessageSet operation.
     * @callback module:api/MQTTApi~protocolMqttClientMessageSetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's message attributes
     * Attribute can not be sent or properties . Use set/{msgNum}/count/{value} together with get/{msgNum}/count to throttle the outgoing MQTT message to the broker.
     * @param {Number} agentNum Agent to show MQTT state
     * @param {Number} msgNum Message Number
     * @param {String} attr Attribute
     * @param {String} value Value
     * @param {module:api/MQTTApi~protocolMqttClientMessageSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientMessageSet(agentNum, msgNum, attr, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientMessageSet");
      }
      // verify the required parameter 'msgNum' is set
      if (msgNum === undefined || msgNum === null) {
        throw new Error("Missing the required parameter 'msgNum' when calling protocolMqttClientMessageSet");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling protocolMqttClientMessageSet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolMqttClientMessageSet");
      }

      let pathParams = {
        'agentNum': agentNum,
        'msgNum': msgNum,
        'attr': attr,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/set/{msgNum}/{attr}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientResubscribe operation.
     * @callback module:api/MQTTApi~protocolMqttClientResubscribeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart receiving messages from a subcription of the agent
     * Restarts a subscription
     * @param {Number} agentNum Agent to change MQTT state
     * @param {Number} subNum Subscription Number
     * @param {module:api/MQTTApi~protocolMqttClientResubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolMqttClientResubscribe(agentNum, subNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientResubscribe");
      }
      // verify the required parameter 'subNum' is set
      if (subNum === undefined || subNum === null) {
        throw new Error("Missing the required parameter 'subNum' when calling protocolMqttClientResubscribe");
      }

      let pathParams = {
        'agentNum': agentNum,
        'subNum': subNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/resubscribe/{subNum}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientRuntimeAbort operation.
     * @callback module:api/MQTTApi~protocolMqttClientRuntimeAbortCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Abort agent's MQTT TCP session without sending DISCONNECT command
     * Abort a connection
     * @param {Number} agentNum Agent to set MQTT behavior
     * @param {module:api/MQTTApi~protocolMqttClientRuntimeAbortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientRuntimeAbort(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientRuntimeAbort");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/abort', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientRuntimeConnect operation.
     * @callback module:api/MQTTApi~protocolMqttClientRuntimeConnectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start agent's MQTT TCP session
     * Start a connection
     * @param {Number} agentNum Agent to set MQTT behavior
     * @param {module:api/MQTTApi~protocolMqttClientRuntimeConnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientRuntimeConnect(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientRuntimeConnect");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/connect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientRuntimeDisconnect operation.
     * @callback module:api/MQTTApi~protocolMqttClientRuntimeDisconnectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnect agent's MQTT TCP session by sending DISCONNECT command
     * Graceful disconnect
     * @param {Number} agentNum Agent to set MQTT behavior
     * @param {module:api/MQTTApi~protocolMqttClientRuntimeDisconnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientRuntimeDisconnect(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientRuntimeDisconnect");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/disconnect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetBroker operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT TCP connection target broker
     * Broker IP address
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} brokerAddr Broker address
     * @param {module:api/MQTTApi~protocolMqttClientSetBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetBroker(agentNum, brokerAddr, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetBroker");
      }
      // verify the required parameter 'brokerAddr' is set
      if (brokerAddr === undefined || brokerAddr === null) {
        throw new Error("Missing the required parameter 'brokerAddr' when calling protocolMqttClientSetBroker");
      }

      let pathParams = {
        'agentNum': agentNum,
        'brokerAddr': brokerAddr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/broker/{brokerAddr}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetCleansession operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetCleansessionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT session
     * 1 for clean session , 0 not
     * @param {Number} agentNum Agent to set MQTT config
     * @param {Number} cleanOrNot Clean session
     * @param {module:api/MQTTApi~protocolMqttClientSetCleansessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetCleansession(agentNum, cleanOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetCleansession");
      }
      // verify the required parameter 'cleanOrNot' is set
      if (cleanOrNot === undefined || cleanOrNot === null) {
        throw new Error("Missing the required parameter 'cleanOrNot' when calling protocolMqttClientSetCleansession");
      }

      let pathParams = {
        'agentNum': agentNum,
        'cleanOrNot': cleanOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/cleansession/{cleanOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetClientid operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetClientidCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT client ID
     * MQTT client ID
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} clientID Client ID
     * @param {module:api/MQTTApi~protocolMqttClientSetClientidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetClientid(agentNum, clientID, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetClientid");
      }
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling protocolMqttClientSetClientid");
      }

      let pathParams = {
        'agentNum': agentNum,
        'clientID': clientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/clientid/{clientID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetKeepalive operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetKeepaliveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT TCP keepalive
     * Keep alive the TCP connection
     * @param {Number} agentNum Agent to set MQTT config
     * @param {Number} aliveTime period to send keepalive messages
     * @param {module:api/MQTTApi~protocolMqttClientSetKeepaliveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetKeepalive(agentNum, aliveTime, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetKeepalive");
      }
      // verify the required parameter 'aliveTime' is set
      if (aliveTime === undefined || aliveTime === null) {
        throw new Error("Missing the required parameter 'aliveTime' when calling protocolMqttClientSetKeepalive");
      }

      let pathParams = {
        'agentNum': agentNum,
        'aliveTime': aliveTime
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/keepalive/{aliveTime}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetOnDisconnect operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetOnDisconnectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT disconnection action
     * Action to take when MQTT session is disconnected
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} action Action to take
     * @param {module:api/MQTTApi~protocolMqttClientSetOnDisconnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetOnDisconnect(agentNum, action, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetOnDisconnect");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling protocolMqttClientSetOnDisconnect");
      }

      let pathParams = {
        'agentNum': agentNum,
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/on_disconnect/{action}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetPassword operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT client password
     * Client password
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} password Password
     * @param {module:api/MQTTApi~protocolMqttClientSetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetPassword(agentNum, password, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetPassword");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling protocolMqttClientSetPassword");
      }

      let pathParams = {
        'agentNum': agentNum,
        'password': password
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/password/{password}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetPort operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetPortCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT TCP connection target port
     * target TCP port
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} port TCP port
     * @param {module:api/MQTTApi~protocolMqttClientSetPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetPort(agentNum, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetPort");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling protocolMqttClientSetPort");
      }

      let pathParams = {
        'agentNum': agentNum,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/port/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetUsername operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetUsernameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT client username
     * Client username
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} username User name
     * @param {module:api/MQTTApi~protocolMqttClientSetUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetUsername(agentNum, username, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetUsername");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling protocolMqttClientSetUsername");
      }

      let pathParams = {
        'agentNum': agentNum,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/username/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetWillmsg operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetWillmsgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT client's will
     * Will message
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} msg Will message
     * @param {module:api/MQTTApi~protocolMqttClientSetWillmsgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetWillmsg(agentNum, msg, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetWillmsg");
      }
      // verify the required parameter 'msg' is set
      if (msg === undefined || msg === null) {
        throw new Error("Missing the required parameter 'msg' when calling protocolMqttClientSetWillmsg");
      }

      let pathParams = {
        'agentNum': agentNum,
        'msg': msg
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willmsg/{msg}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetWillqos operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetWillqosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT will message's QOS field
     * QOS field
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} qos Quality of service field
     * @param {module:api/MQTTApi~protocolMqttClientSetWillqosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetWillqos(agentNum, qos, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetWillqos");
      }
      // verify the required parameter 'qos' is set
      if (qos === undefined || qos === null) {
        throw new Error("Missing the required parameter 'qos' when calling protocolMqttClientSetWillqos");
      }

      let pathParams = {
        'agentNum': agentNum,
        'qos': qos
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willqos/{qos}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetWillretain operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetWillretainCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT retained will
     * Retaining will
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} retain Retaining will
     * @param {module:api/MQTTApi~protocolMqttClientSetWillretainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetWillretain(agentNum, retain, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetWillretain");
      }
      // verify the required parameter 'retain' is set
      if (retain === undefined || retain === null) {
        throw new Error("Missing the required parameter 'retain' when calling protocolMqttClientSetWillretain");
      }

      let pathParams = {
        'agentNum': agentNum,
        'retain': retain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willretain/{retain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSetWilltopic operation.
     * @callback module:api/MQTTApi~protocolMqttClientSetWilltopicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT client will's topic
     * Will topic for the will message
     * @param {Number} agentNum Agent to set MQTT config
     * @param {String} topic topic
     * @param {module:api/MQTTApi~protocolMqttClientSetWilltopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSetWilltopic(agentNum, topic, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSetWilltopic");
      }
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling protocolMqttClientSetWilltopic");
      }

      let pathParams = {
        'agentNum': agentNum,
        'topic': topic
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willtopic/{topic}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSubscribeCard operation.
     * @callback module:api/MQTTApi~protocolMqttClientSubscribeCardCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's current subscriptions' cardinality
     * 0 or more
     * @param {Number} agentNum Agent to show MQTT subscription state
     * @param {module:api/MQTTApi~protocolMqttClientSubscribeCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttClientSubscribeCard(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSubscribeCard");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSubscribeGet operation.
     * @callback module:api/MQTTApi~protocolMqttClientSubscribeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's subscription attributes
     * Attribute can be topic, properties(list of SUBSCRIBE properties), properties.i (i-th SUBSCRIBE property), properties.PROP-NAME (SUBSCRIBE property with name PROP-NAME)
     * @param {Number} agentNum Agent to show MQTT state
     * @param {Number} subNum Subscribe Number
     * @param {String} attr Attribute
     * @param {module:api/MQTTApi~protocolMqttClientSubscribeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientSubscribeGet(agentNum, subNum, attr, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSubscribeGet");
      }
      // verify the required parameter 'subNum' is set
      if (subNum === undefined || subNum === null) {
        throw new Error("Missing the required parameter 'subNum' when calling protocolMqttClientSubscribeGet");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling protocolMqttClientSubscribeGet");
      }

      let pathParams = {
        'agentNum': agentNum,
        'subNum': subNum,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/get/{subNum}/{attr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientSubscribeSet operation.
     * @callback module:api/MQTTApi~protocolMqttClientSubscribeSetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's subscribe attributes
     * Attribute can not be properties .
     * @param {Number} agentNum Agent to show MQTT state
     * @param {Number} subNum Subscribe Number
     * @param {String} attr Attribute
     * @param {String} value Value
     * @param {module:api/MQTTApi~protocolMqttClientSubscribeSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttClientSubscribeSet(agentNum, subNum, attr, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientSubscribeSet");
      }
      // verify the required parameter 'subNum' is set
      if (subNum === undefined || subNum === null) {
        throw new Error("Missing the required parameter 'subNum' when calling protocolMqttClientSubscribeSet");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling protocolMqttClientSubscribeSet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolMqttClientSubscribeSet");
      }

      let pathParams = {
        'agentNum': agentNum,
        'subNum': subNum,
        'attr': attr,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/set/{subNum}/{attr}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttClientUnsubscribe operation.
     * @callback module:api/MQTTApi~protocolMqttClientUnsubscribeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops receiving messages from a subcription of the agent
     * Stops a subscription
     * @param {Number} agentNum Agent to change MQTT state
     * @param {Number} subNum Subscription Number
     * @param {module:api/MQTTApi~protocolMqttClientUnsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolMqttClientUnsubscribe(agentNum, subNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttClientUnsubscribe");
      }
      // verify the required parameter 'subNum' is set
      if (subNum === undefined || subNum === null) {
        throw new Error("Missing the required parameter 'subNum' when calling protocolMqttClientUnsubscribe");
      }

      let pathParams = {
        'agentNum': agentNum,
        'subNum': subNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/unsubscribe/{subNum}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttGetArgs operation.
     * @callback module:api/MQTTApi~protocolMqttGetArgsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's MQTT argument structure
     * Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the MQTT argument structure
     * @param {module:api/MQTTApi~protocolMqttGetArgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolMqttGetArgs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttGetArgs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/args', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttGetConfig operation.
     * @callback module:api/MQTTApi~protocolMqttGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigMQTT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's MQTT configuration
     * Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the MQTT configuration
     * @param {module:api/MQTTApi~protocolMqttGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigMQTT}
     */
    protocolMqttGetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigMQTT;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttGetStatistics operation.
     * @callback module:api/MQTTApi~protocolMqttGetStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's MQTT statistics
     * Statistics of fields indicated in the headers
     * @param {Number} agentNum Agent to show MQTT statistics
     * @param {module:api/MQTTApi~protocolMqttGetStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolMqttGetStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttGetStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttGetStatsHdr operation.
     * @callback module:api/MQTTApi~protocolMqttGetStatsHdrCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the MQTT statistics headers
     * The headers of statistics fields
     * @param {module:api/MQTTApi~protocolMqttGetStatsHdrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolMqttGetStatsHdr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/protocol/msg/mqtt/get/stats_hdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttGetTrace operation.
     * @callback module:api/MQTTApi~protocolMqttGetTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigMQTT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's MQTT traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param {Number} agentNum Agent to show whether MQTT tracing is enabled
     * @param {module:api/MQTTApi~protocolMqttGetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigMQTT}
     */
    protocolMqttGetTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttGetTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigMQTT;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttSetConfig operation.
     * @callback module:api/MQTTApi~protocolMqttSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT configuration
     * Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to set the MQTT configuration
     * @param {String} argument Parameter to set the MQTT configuration
     * @param {String} value Value to set the MQTT configuration
     * @param {module:api/MQTTApi~protocolMqttSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolMqttSetConfig(agentNum, argument, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttSetConfig");
      }
      // verify the required parameter 'argument' is set
      if (argument === undefined || argument === null) {
        throw new Error("Missing the required parameter 'argument' when calling protocolMqttSetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolMqttSetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'argument': argument,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/set/config/{argument}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolMqttSetTrace operation.
     * @callback module:api/MQTTApi~protocolMqttSetTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's MQTT traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the MQTT tracing
     * @param {String} enableOrNot Value to set the MQTT tracing
     * @param {module:api/MQTTApi~protocolMqttSetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolMqttSetTrace(agentNum, enableOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolMqttSetTrace");
      }
      // verify the required parameter 'enableOrNot' is set
      if (enableOrNot === undefined || enableOrNot === null) {
        throw new Error("Missing the required parameter 'enableOrNot' when calling protocolMqttSetTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'enableOrNot': enableOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/mqtt/set/trace/{enableOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
