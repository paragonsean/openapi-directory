/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IPAlias from '../model/IPAlias';
import IPSource from '../model/IPSource';
import TimerScript from '../model/TimerScript';
import TrapDest from '../model/TrapDest';
import Triplet from '../model/Triplet';

/**
* Agent service.
* @module api/AgentApi
* @version 21.00
*/
export default class AgentApi {

    /**
    * Constructs a new AgentApi. 
    * @alias module:api/AgentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addIpalias operation.
     * @callback module:api/AgentApi~addIpaliasCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new ipalias for the agent.
     * port defaults to 161 if not specified. mask defaults to the class-based network mask for the address. interface defaults to the default network interface.  If port is set to 0, the system will automatically select a port number. This is useful for client-mode protocols, such as TFTP or TOD. Upon start of an IP alias with a 0 (auto-assigned) port number, its port will change to contain the value of the selected system port.
     * @param {Number} agentNum Agent to add the IP alias
     * @param {String} IP IP address , IPv4 or IPv6
     * @param {Number} port SNMP port , 0 or empty for default
     * @param {String} mask Netmask, empty for default
     * @param {String} _interface Interface. Empty for default
     * @param {module:api/AgentApi~addIpaliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addIpalias(agentNum, IP, port, mask, _interface, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling addIpalias");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling addIpalias");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling addIpalias");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling addIpalias");
      }
      // verify the required parameter '_interface' is set
      if (_interface === undefined || _interface === null) {
        throw new Error("Missing the required parameter '_interface' when calling addIpalias");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port,
        'mask': mask,
        'interface': _interface
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/ipalias/add/{IP}/{port}/{mask}/{interface}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTimerScript operation.
     * @callback module:api/AgentApi~addTimerScriptCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new timer script to be executed at specified interval (in msec) with the specified argument.
     * Add a new timer script to be executed at specified interval (in msec) with the specified argument.
     * @param {Number} agentNum Agent to return the timer script list
     * @param {String} script Script name
     * @param {Number} interval Interval in msec
     * @param {String} arg Arguments to the script
     * @param {module:api/AgentApi~addTimerScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addTimerScript(agentNum, script, interval, arg, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling addTimerScript");
      }
      // verify the required parameter 'script' is set
      if (script === undefined || script === null) {
        throw new Error("Missing the required parameter 'script' when calling addTimerScript");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling addTimerScript");
      }
      // verify the required parameter 'arg' is set
      if (arg === undefined || arg === null) {
        throw new Error("Missing the required parameter 'arg' when calling addTimerScript");
      }

      let pathParams = {
        'agentNum': agentNum,
        'script': script,
        'interval': interval,
        'arg': arg
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/timer/script/add/{script}/{interval}/{arg}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentRemove operation.
     * @callback module:api/AgentApi~agentRemoveCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the current agent.
     * For speed, this operation will complete asynchronously. The same synchronization considerations apply as in /mimic/agent/start.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~agentRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentRemove(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentRemove");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreCopy operation.
     * @callback module:api/AgentApi~agentStoreCopyCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command copies the variable store from the other agent to this agent.
     * This command copies the variable store from the other agent to this agent.
     * @param {Number} agentNum Agent of the value space
     * @param {Number} otherAgent Agent of the value space
     * @param {module:api/AgentApi~agentStoreCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStoreCopy(agentNum, otherAgent, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreCopy");
      }
      // verify the required parameter 'otherAgent' is set
      if (otherAgent === undefined || otherAgent === null) {
        throw new Error("Missing the required parameter 'otherAgent' when calling agentStoreCopy");
      }

      let pathParams = {
        'agentNum': agentNum,
        'otherAgent': otherAgent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/copy/{otherAgent}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreExists operation.
     * @callback module:api/AgentApi~agentStoreExistsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command can be used as a predicate to ascertain the existence of a given variable.
     * It returns \"1\" if the variable exists, else \"0\".
     * @param {Number} agentNum Agent of the value space
     * @param {String} _var Variable name
     * @param {module:api/AgentApi~agentStoreExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStoreExists(agentNum, _var, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreExists");
      }
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling agentStoreExists");
      }

      let pathParams = {
        'agentNum': agentNum,
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/exists/{var}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreGet operation.
     * @callback module:api/AgentApi~agentStoreGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the value associated with a variable.
     * The value will be returned as a string (like all Tcl values).
     * @param {Number} agentNum Agent of the value space
     * @param {String} _var Variable name
     * @param {module:api/AgentApi~agentStoreGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStoreGet(agentNum, _var, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreGet");
      }
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling agentStoreGet");
      }

      let pathParams = {
        'agentNum': agentNum,
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/get/{var}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreList operation.
     * @callback module:api/AgentApi~agentStoreListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command will return the list of variables in the said scope.
     * The list will be a Tcl format list with curly braces \"{}\" around each list element. These elements in turn are space separated.
     * @param {Number} agentNum Agent of the value space
     * @param {module:api/AgentApi~agentStoreListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    agentStoreList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreLreplace operation.
     * @callback module:api/AgentApi~agentStoreLreplaceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
     * These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
     * @param {Number} agentNum Agent of the value space
     * @param {String} _var Variable name
     * @param {Number} index Index
     * @param {Object} opts Optional parameters
     * @param {String} [body] Value
     * @param {module:api/AgentApi~agentStoreLreplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStoreLreplace(agentNum, _var, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreLreplace");
      }
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling agentStoreLreplace");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling agentStoreLreplace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'var': _var,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/lreplace/{var}/{index}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStorePersists operation.
     * @callback module:api/AgentApi~agentStorePersistsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This command can be used as a predicate to ascertain the persistence of a given variable.
     * It returns \"1\" if the variable is persistent, else \"0\".
     * @param {Number} agentNum Agent of the value space
     * @param {String} _var Variable name
     * @param {module:api/AgentApi~agentStorePersistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStorePersists(agentNum, _var, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStorePersists");
      }
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling agentStorePersists");
      }

      let pathParams = {
        'agentNum': agentNum,
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/persists/{var}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreSet operation.
     * @callback module:api/AgentApi~agentStoreSetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * These commands allow the creation of a new variable, or changing an existing value.
     * The append sub-command will append the value to an existing variable, or create a new one. The set sub-command will overwrite an existing variable, or create a new one. The optional persist flag can be used to indicate if the variable is to be persistent as described above. By default a value of '0' will be implied for the persist flag. To avoid mistakes, for existing variables the persist flag can only be set. If you want to reset it, you first need to unset the variable.
     * @param {Number} agentNum Agent of the value space
     * @param {String} _var Variable name
     * @param {Number} persist Persistent setting
     * @param {Object} opts Optional parameters
     * @param {String} [body] Value
     * @param {module:api/AgentApi~agentStoreSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStoreSet(agentNum, _var, persist, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreSet");
      }
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling agentStoreSet");
      }
      // verify the required parameter 'persist' is set
      if (persist === undefined || persist === null) {
        throw new Error("Missing the required parameter 'persist' when calling agentStoreSet");
      }

      let pathParams = {
        'agentNum': agentNum,
        'var': _var,
        'persist': persist
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/set/{var}/{persist}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentStoreUnset operation.
     * @callback module:api/AgentApi~agentStoreUnsetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a variable which is currently defined.
     * This will cleanup persistent variables if needed
     * @param {Number} agentNum Agent of the value space
     * @param {String} _var Variable name
     * @param {module:api/AgentApi~agentStoreUnsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    agentStoreUnset(agentNum, _var, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling agentStoreUnset");
      }
      // verify the required parameter '_var' is set
      if (_var === undefined || _var === null) {
        throw new Error("Missing the required parameter '_var' when calling agentStoreUnset");
      }

      let pathParams = {
        'agentNum': agentNum,
        'var': _var
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/store/unset/{var}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callNew operation.
     * @callback module:api/AgentApi~callNewCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an agent.
     * Add an agent.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {String} IP Primary IP
     * @param {Array.<module:model/Triplet>} triplet Created agent object
     * @param {module:api/AgentApi~callNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    callNew(agentNum, IP, triplet, callback) {
      let postBody = triplet;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling callNew");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling callNew");
      }
      // verify the required parameter 'triplet' is set
      if (triplet === undefined || triplet === null) {
        throw new Error("Missing the required parameter 'triplet' when calling callNew");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/add/{IP}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delIpalias operation.
     * @callback module:api/AgentApi~delIpaliasCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing ipalias from the agent.
     * port defaults to 161 if not specified.
     * @param {Number} agentNum Agent to delete the IP alias
     * @param {String} IP IP address , IPv4 or IPv6
     * @param {Number} port SNMP port , 0 or empty for default
     * @param {module:api/AgentApi~delIpaliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    delIpalias(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling delIpalias");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling delIpalias");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling delIpalias");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/ipalias/delete/{IP}/{port}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delTimerScript operation.
     * @callback module:api/AgentApi~delTimerScriptCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a timer script from the execution list.
     * The first scheduled script that matches the script name, and optionally the interval and argument will be deleted.
     * @param {Number} agentNum Agent to return the timer script list
     * @param {String} script Script name
     * @param {Number} interval Interval in msec
     * @param {String} arg Arguments to the script
     * @param {module:api/AgentApi~delTimerScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    delTimerScript(agentNum, script, interval, arg, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling delTimerScript");
      }
      // verify the required parameter 'script' is set
      if (script === undefined || script === null) {
        throw new Error("Missing the required parameter 'script' when calling delTimerScript");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling delTimerScript");
      }
      // verify the required parameter 'arg' is set
      if (arg === undefined || arg === null) {
        throw new Error("Missing the required parameter 'arg' when calling delTimerScript");
      }

      let pathParams = {
        'agentNum': agentNum,
        'script': script,
        'interval': interval,
        'arg': arg
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/timer/script/delete/{script}/{interval}/{arg}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fromAdd operation.
     * @callback module:api/AgentApi~fromAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a source address that the agent will accept messages from.
     * An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches.
     * @param {Number} agentNum Agent to add the IP source
     * @param {String} IP IP of the port, 0.0.0.0 for any
     * @param {Number} port port of the source, 0 for any
     * @param {module:api/AgentApi~fromAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    fromAdd(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling fromAdd");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling fromAdd");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling fromAdd");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/from/add/{IP}/{port}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fromDel operation.
     * @callback module:api/AgentApi~fromDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a source address that the agent will accept messages from.
     * An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches.
     * @param {Number} agentNum Agent to delete the IP source
     * @param {String} IP IP of the source
     * @param {Number} port port of the source
     * @param {module:api/AgentApi~fromDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    fromDel(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling fromDel");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling fromDel");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling fromDel");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/from/delete/{IP}/{port}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fromList operation.
     * @callback module:api/AgentApi~fromListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IPSource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the source addresses that the agent will accept messages from.
     * This in effect implements source-address-indexing, where 2 agents with the same address can be configured, each accepting messages from different management stations.
     * @param {Number} agentNum Agent to show the IP sources
     * @param {module:api/AgentApi~fromListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IPSource>}
     */
    fromList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling fromList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IPSource];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/from/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentState operation.
     * @callback module:api/AgentApi~getAgentStateCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * current running state of the agent
     * 0-Unknown 1-Running 2-Stopped 3-Halted 4-Paused 5-Deleted 6-Stopping
     * @param {Number} agentNum Agent to return the state
     * @param {module:api/AgentApi~getAgentStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getAgentState(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getAgentState");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChanged operation.
     * @callback module:api/AgentApi~getChangedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * has the agent value space changed?
     * has the agent value space changed?
     * @param {Number} agentNum Agent to return the indicator
     * @param {module:api/AgentApi~getChangedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getChanged(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getChanged");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/changed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigChanged operation.
     * @callback module:api/AgentApi~getConfigChangedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * has the lab configuration changed?
     * has the lab configuration changed?
     * @param {Number} agentNum Agent to return the indicator
     * @param {module:api/AgentApi~getConfigChangedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getConfigChanged(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getConfigChanged");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/config_changed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDelay operation.
     * @callback module:api/AgentApi~getDelayCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * one-way transit delay in msec.
     * The minimum granularity is 10 msec.
     * @param {Number} agentNum Agent to return the delay time
     * @param {module:api/AgentApi~getDelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getDelay(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getDelay");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/delay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDrops operation.
     * @callback module:api/AgentApi~getDropsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * drop rate (every N-th PDU). 0 means no drops.
     * drop rate (every N-th PDU). 0 means no drops.
     * @param {Number} agentNum Agent to return the drop rate
     * @param {module:api/AgentApi~getDropsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getDrops(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getDrops");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/drops', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHost operation.
     * @callback module:api/AgentApi~getHostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * host address of the agent.
     * Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~getHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getHost(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getHost");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/host', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInformTimeout operation.
     * @callback module:api/AgentApi~getInformTimeoutCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * timeout in seconds for retransmitting INFORM PDUs.
     * The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager.
     * @param {Number} agentNum Agent to return the timeout setting
     * @param {module:api/AgentApi~getInformTimeoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getInformTimeout(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getInformTimeout");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/inform_timeout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterface operation.
     * @callback module:api/AgentApi~getInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * network interface card for the agent.
     * network interface card for the agent.
     * @param {Number} agentNum Agent to return the primary interface
     * @param {module:api/AgentApi~getInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getInterface(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getInterface");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/interface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMask operation.
     * @callback module:api/AgentApi~getMaskCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * subnet mask of the agent.
     * subnet mask of the agent.
     * @param {Number} agentNum Agent to return the primary interface
     * @param {module:api/AgentApi~getMaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getMask(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getMask");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/mask', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMibs operation.
     * @callback module:api/AgentApi~getMibsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Triplet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set of MIBs, simulations and scenarios
     * set of MIBs, simulations and scenarios
     * @param {Number} agentNum Agent to return the MIB triplets
     * @param {module:api/AgentApi~getMibsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Triplet>}
     */
    getMibs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getMibs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Triplet];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/mibs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNumberStarts operation.
     * @callback module:api/AgentApi~getNumberStartsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * number of starts for the agent.
     * This count is incremented each time an agent starts. It affects the SNMPv3 EngineBoots parameter.
     * @param {Number} agentNum Agent to return the count
     * @param {module:api/AgentApi~getNumberStartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getNumberStarts(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getNumberStarts");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/num_starts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOiddir operation.
     * @callback module:api/AgentApi~getOiddirCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * MIB directory of the agent.
     * MIB directory of the agent.
     * @param {Number} agentNum Agent to return the directory path
     * @param {module:api/AgentApi~getOiddirCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getOiddir(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getOiddir");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/oiddir', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwner operation.
     * @callback module:api/AgentApi~getOwnerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * owner of the agent.
     * owner of the agent.
     * @param {Number} agentNum Agent to return the owner
     * @param {module:api/AgentApi~getOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getOwner(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getOwner");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/owner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPdusize operation.
     * @callback module:api/AgentApi~getPdusizeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * maximum PDU size.
     * The limit for this configurable is 65536.
     * @param {Number} agentNum Agent to return the PDU size
     * @param {module:api/AgentApi~getPdusizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getPdusize(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getPdusize");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/pdusize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPort operation.
     * @callback module:api/AgentApi~getPortCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * port number
     * port number
     * @param {Number} agentNum Agent to return the primary SNMP port
     * @param {module:api/AgentApi~getPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getPort(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getPort");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/port', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrivdir operation.
     * @callback module:api/AgentApi~getPrivdirCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * private directory of the agent.
     * private directory of the agent.
     * @param {Number} agentNum Agent to return the directory path
     * @param {module:api/AgentApi~getPrivdirCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getPrivdir(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getPrivdir");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/privdir', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProtocols operation.
     * @callback module:api/AgentApi~getProtocolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * protocols supported by agent
     * protocols supported by agent as an array of strings
     * @param {Number} agentNum Agent to return the protocols arrary
     * @param {module:api/AgentApi~getProtocolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getProtocols(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getProtocols");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/protocol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadCommunity operation.
     * @callback module:api/AgentApi~getReadCommunityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read community string
     * read community string
     * @param {Number} agentNum Agent to return the SNMP read community string
     * @param {module:api/AgentApi~getReadCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getReadCommunity(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getReadCommunity");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/read', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScen operation.
     * @callback module:api/AgentApi~getScenCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * first scenario name
     * first scenario name
     * @param {Number} agentNum Agent to return the first scenario number
     * @param {module:api/AgentApi~getScenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getScen(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getScen");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/scen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSim operation.
     * @callback module:api/AgentApi~getSimCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * first simulation name
     * first simulation name
     * @param {Number} agentNum Agent to return the first simulation name
     * @param {module:api/AgentApi~getSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSim(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getSim");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/sim', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStarttime operation.
     * @callback module:api/AgentApi~getStarttimeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * relative start time
     * relative start time
     * @param {Number} agentNum Agent to return the relative start time
     * @param {module:api/AgentApi~getStarttimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getStarttime(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getStarttime");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/start', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStateChanged operation.
     * @callback module:api/AgentApi~getStateChangedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * has the agent state changed?
     * has the agent state changed?
     * @param {Number} agentNum Agent to return the indicator
     * @param {module:api/AgentApi~getStateChangedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getStateChanged(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getStateChanged");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/state_changed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatistics operation.
     * @callback module:api/AgentApi~getStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * current statistics of the agent instance
     * The statistics are returned as 64-bit decimal numbers for the following statistics, total, discarded, error, GET, GETNEXT, SET, GETBULK, trap, GET variables, GETNEXT variables, SET variables, GETBULK variables, INFORM sent, INFORM re-sent, INFORM timed out, INFORM acked, INFORM REPORT
     * @param {Number} agentNum Agent to return the statistics
     * @param {module:api/AgentApi~getStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrace operation.
     * @callback module:api/AgentApi~getTraceCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SNMP PDU tracing
     * SNMP PDU tracing
     * @param {Number} agentNum Agent to return the indicator
     * @param {module:api/AgentApi~getTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getValidate operation.
     * @callback module:api/AgentApi~getValidateCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SNMP SET validation policy.
     * Is a bitmask in which with the following bits (from LSB) check for type, length, range, access
     * @param {Number} agentNum Agent to return the bitmask integer
     * @param {module:api/AgentApi~getValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getValidate(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getValidate");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWriteCommunity operation.
     * @callback module:api/AgentApi~getWriteCommunityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * write community string
     * write community string
     * @param {Number} agentNum Agent to return the SNMP write community string
     * @param {module:api/AgentApi~getWriteCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getWriteCommunity(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling getWriteCommunity");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/get/write', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the halt operation.
     * @callback module:api/AgentApi~haltCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Halt the current agent.
     * Halt the current agent.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~haltCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    halt(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling halt");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/halt', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIpaliases operation.
     * @callback module:api/AgentApi~listIpaliasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IPAlias>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the additional ipaliases configured for the agent.
     * The agent host address (set with mimic agent set host) is not in this list, since it is already accessible separately with mimic agent get host.
     * @param {Number} agentNum Agent to show the IP alias list
     * @param {module:api/AgentApi~listIpaliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IPAlias>}
     */
    listIpaliases(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling listIpaliases");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IPAlias];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/ipalias/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTimerScripts operation.
     * @callback module:api/AgentApi~listTimerScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimerScript>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the timer scripts currently running along with the their intervals.
     * The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}.
     * @param {Number} agentNum Agent to return the timer script list
     * @param {module:api/AgentApi~listTimerScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimerScript>}
     */
    listTimerScripts(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling listTimerScripts");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimerScript];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/timer/script/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pauseNow operation.
     * @callback module:api/AgentApi~pauseNowCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause the current agent.
     * Pause the current agent.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~pauseNowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pauseNow(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling pauseNow");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/pause', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolGetConfig operation.
     * @callback module:api/AgentApi~protocolGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the protocol's configuration.
     * Returns the protocol's configuration.
     * @param {Number} agentNum Agent to show the protocol configuration
     * @param {String} prot Protocol to show configuration
     * @param {module:api/AgentApi~protocolGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolGetConfig(agentNum, prot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolGetConfig");
      }
      // verify the required parameter 'prot' is set
      if (prot === undefined || prot === null) {
        throw new Error("Missing the required parameter 'prot' when calling protocolGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'prot': prot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/{prot}/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reload operation.
     * @callback module:api/AgentApi~reloadCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reload the current agent.
     * This only works for halted agents. The net effect is the same as restarting an agent (ie. stop, start, halt), but without disconnecting the network (and thus existing connections).
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~reloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    reload(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling reload");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/reload', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resume operation.
     * @callback module:api/AgentApi~resumeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume the current agent.
     * Resume the current agent.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~resumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    resume(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling resume");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/resume', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the save operation.
     * @callback module:api/AgentApi~saveCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save agent MIB values.
     * Save agent MIB values.
     * @param {Number} agentNum Agent to save
     * @param {module:api/AgentApi~saveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    save(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling save");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/save', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDelay operation.
     * @callback module:api/AgentApi~setDelayCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * one-way transit delay in msec
     * The minimum granularity is 10 msec.
     * @param {Number} agentNum Agent to set the delay time
     * @param {Number} delay Delay time of the agent
     * @param {module:api/AgentApi~setDelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    setDelay(agentNum, delay, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setDelay");
      }
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling setDelay");
      }

      let pathParams = {
        'agentNum': agentNum,
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/delay/{delay}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDrops operation.
     * @callback module:api/AgentApi~setDropsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * drop rate (every N-th PDU)
     * 0 means no drops
     * @param {Number} agentNum Agent to set the drop rate
     * @param {Number} drops Drop rate of the agent
     * @param {module:api/AgentApi~setDropsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    setDrops(agentNum, drops, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setDrops");
      }
      // verify the required parameter 'drops' is set
      if (drops === undefined || drops === null) {
        throw new Error("Missing the required parameter 'drops' when calling setDrops");
      }

      let pathParams = {
        'agentNum': agentNum,
        'drops': drops
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/drops/{drops}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setHost operation.
     * @callback module:api/AgentApi~setHostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * host address of the agent.
     * Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent.
     * @param {Number} agentNum Agent to set the primary IP
     * @param {String} host Primary IP of the agent
     * @param {module:api/AgentApi~setHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setHost(agentNum, host, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setHost");
      }
      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling setHost");
      }

      let pathParams = {
        'agentNum': agentNum,
        'host': host
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/host/{host}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setInformTimeout operation.
     * @callback module:api/AgentApi~setInformTimeoutCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * timeout in seconds for retransmitting INFORM PDUs
     * The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager.
     * @param {Number} agentNum Agent to set the timeout setting
     * @param {Number} informTimeout Tmeout setting
     * @param {module:api/AgentApi~setInformTimeoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    setInformTimeout(agentNum, informTimeout, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setInformTimeout");
      }
      // verify the required parameter 'informTimeout' is set
      if (informTimeout === undefined || informTimeout === null) {
        throw new Error("Missing the required parameter 'informTimeout' when calling setInformTimeout");
      }

      let pathParams = {
        'agentNum': agentNum,
        'inform_timeout': informTimeout
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/inform_timeout/{inform_timeout}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setInterface operation.
     * @callback module:api/AgentApi~setInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * network interface card for the agent
     * network interface card for the agent
     * @param {Number} agentNum Agent to set the primary interface
     * @param {String} _interface Primary interface of the agent
     * @param {module:api/AgentApi~setInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setInterface(agentNum, _interface, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setInterface");
      }
      // verify the required parameter '_interface' is set
      if (_interface === undefined || _interface === null) {
        throw new Error("Missing the required parameter '_interface' when calling setInterface");
      }

      let pathParams = {
        'agentNum': agentNum,
        'interface': _interface
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/interface/{interface}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMask operation.
     * @callback module:api/AgentApi~setMaskCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * subnet mask of the agent.
     * subnet mask of the agent.
     * @param {Number} agentNum Agent to set the primary IP address mask
     * @param {String} mask Mask to set for the agent primary IP address
     * @param {module:api/AgentApi~setMaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setMask(agentNum, mask, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setMask");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling setMask");
      }

      let pathParams = {
        'agentNum': agentNum,
        'mask': mask
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/mask/{mask}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMibs operation.
     * @callback module:api/AgentApi~setMibsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set of MIBs, simulations and scenarios
     * set of MIBs, simulations and scenarios
     * @param {Number} agentNum Agent to return the MIB triplets
     * @param {Array.<module:model/Triplet>} triplet 
     * @param {module:api/AgentApi~setMibsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setMibs(agentNum, triplet, callback) {
      let postBody = triplet;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setMibs");
      }
      // verify the required parameter 'triplet' is set
      if (triplet === undefined || triplet === null) {
        throw new Error("Missing the required parameter 'triplet' when calling setMibs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/mibs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setOiddir operation.
     * @callback module:api/AgentApi~setOiddirCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * MIB directory of the agent.
     * MIB directory of the agent.
     * @param {Number} agentNum Agent to set the directory path
     * @param {String} oiddir Directory path for the agent
     * @param {module:api/AgentApi~setOiddirCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setOiddir(agentNum, oiddir, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setOiddir");
      }
      // verify the required parameter 'oiddir' is set
      if (oiddir === undefined || oiddir === null) {
        throw new Error("Missing the required parameter 'oiddir' when calling setOiddir");
      }

      let pathParams = {
        'agentNum': agentNum,
        'oiddir': oiddir
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/oiddir/{oiddir}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setOwner operation.
     * @callback module:api/AgentApi~setOwnerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * owner of the agent
     * owner of the agent
     * @param {Number} agentNum Agent to set the owner
     * @param {String} owner Owner of the agent
     * @param {module:api/AgentApi~setOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setOwner(agentNum, owner, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setOwner");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling setOwner");
      }

      let pathParams = {
        'agentNum': agentNum,
        'owner': owner
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/owner/{owner}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPdusize operation.
     * @callback module:api/AgentApi~setPdusizeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * maximum PDU size
     * The limit for this configurable is 65536
     * @param {Number} agentNum Agent to return the PDU size
     * @param {Number} pdusize PDU size setting for the agent
     * @param {module:api/AgentApi~setPdusizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    setPdusize(agentNum, pdusize, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setPdusize");
      }
      // verify the required parameter 'pdusize' is set
      if (pdusize === undefined || pdusize === null) {
        throw new Error("Missing the required parameter 'pdusize' when calling setPdusize");
      }

      let pathParams = {
        'agentNum': agentNum,
        'pdusize': pdusize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/pdusize/{pdusize}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPort operation.
     * @callback module:api/AgentApi~setPortCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * port number
     * port number
     * @param {Number} agentNum Agent to set the primary SNMP port
     * @param {Number} port Primary SNMP port of the agent
     * @param {module:api/AgentApi~setPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setPort(agentNum, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setPort");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling setPort");
      }

      let pathParams = {
        'agentNum': agentNum,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/port/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPrivdir operation.
     * @callback module:api/AgentApi~setPrivdirCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * private directory of the agent.
     * private directory of the agent.
     * @param {Number} agentNum Agent to set the directory path
     * @param {String} privdir Directory path for the agent
     * @param {module:api/AgentApi~setPrivdirCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setPrivdir(agentNum, privdir, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setPrivdir");
      }
      // verify the required parameter 'privdir' is set
      if (privdir === undefined || privdir === null) {
        throw new Error("Missing the required parameter 'privdir' when calling setPrivdir");
      }

      let pathParams = {
        'agentNum': agentNum,
        'privdir': privdir
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/privdir/{privdir}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setProtocols operation.
     * @callback module:api/AgentApi~setProtocolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * protocols supported by agent as a comma-separated list
     * protocols supported by agent as a comma-separated list
     * @param {Number} agentNum Agent to return the protocols arrary
     * @param {Array.<String>} requestBody Created agent object
     * @param {module:api/AgentApi~setProtocolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    setProtocols(agentNum, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setProtocols");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling setProtocols");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/protocol', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setReadCommunity operation.
     * @callback module:api/AgentApi~setReadCommunityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read community string
     * read community string
     * @param {Number} agentNum Agent to return the SNMP read community string
     * @param {String} read SNMP read community string
     * @param {module:api/AgentApi~setReadCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setReadCommunity(agentNum, read, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setReadCommunity");
      }
      // verify the required parameter 'read' is set
      if (read === undefined || read === null) {
        throw new Error("Missing the required parameter 'read' when calling setReadCommunity");
      }

      let pathParams = {
        'agentNum': agentNum,
        'read': read
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/read/{read}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setStarttime operation.
     * @callback module:api/AgentApi~setStarttimeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * relative start time
     * relative start time
     * @param {Number} agentNum Agent to return the relative start time
     * @param {Number} start Relative start time of the agent
     * @param {module:api/AgentApi~setStarttimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setStarttime(agentNum, start, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setStarttime");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling setStarttime");
      }

      let pathParams = {
        'agentNum': agentNum,
        'start': start
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/start/{start}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTrace operation.
     * @callback module:api/AgentApi~setTraceCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SNMP PDU tracing
     * SNMP PDU tracing
     * @param {Number} agentNum Agent to set trace setting
     * @param {Number} trace Trace setting for the agent
     * @param {module:api/AgentApi~setTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    setTrace(agentNum, trace, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setTrace");
      }
      // verify the required parameter 'trace' is set
      if (trace === undefined || trace === null) {
        throw new Error("Missing the required parameter 'trace' when calling setTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'trace': trace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/trace/{trace}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setValidate operation.
     * @callback module:api/AgentApi~setValidateCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SNMP SET validation policy
     * Is a bitmask in which with the following bits (from LSB) check for type, length, range, access. A default value of 65535 does all validation checking.
     * @param {Number} agentNum Agent to set the bitmask integer
     * @param {Number} validate Bitmask integer to set
     * @param {module:api/AgentApi~setValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    setValidate(agentNum, validate, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setValidate");
      }
      // verify the required parameter 'validate' is set
      if (validate === undefined || validate === null) {
        throw new Error("Missing the required parameter 'validate' when calling setValidate");
      }

      let pathParams = {
        'agentNum': agentNum,
        'validate': validate
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/validate/{validate}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setWriteCommunity operation.
     * @callback module:api/AgentApi~setWriteCommunityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * write community string
     * write community string
     * @param {Number} agentNum Agent to set the SNMP write community string
     * @param {String} write SNMP write community string
     * @param {module:api/AgentApi~setWriteCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    setWriteCommunity(agentNum, write, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling setWriteCommunity");
      }
      // verify the required parameter 'write' is set
      if (write === undefined || write === null) {
        throw new Error("Missing the required parameter 'write' when calling setWriteCommunity");
      }

      let pathParams = {
        'agentNum': agentNum,
        'write': write
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/set/write/{write}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the start operation.
     * @callback module:api/AgentApi~startCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the current agent.
     * For speed, this operation will complete asynchronously. A successful return from this command means the starting of the agent is in progress. If you need to rely on the agent to have completed startup, you should wait for it's state to become RUNNING.
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~startCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    start(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling start");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startIpalias operation.
     * @callback module:api/AgentApi~startIpaliasCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an existing ipalias for the agent.
     * port defaults to 161 if not specified.
     * @param {Number} agentNum Agent to start the IP alias
     * @param {String} IP IP address , IPv4 or IPv6
     * @param {Number} port SNMP port , 0 or empty for default
     * @param {module:api/AgentApi~startIpaliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    startIpalias(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling startIpalias");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling startIpalias");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling startIpalias");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/ipalias/start/{IP}/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusIpalias operation.
     * @callback module:api/AgentApi~statusIpaliasCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status (0=down, 1=up) of an existing ipalias for the agent.
     * port defaults to 161 if not specified.
     * @param {Number} agentNum Agent to show status of the IP alias
     * @param {String} IP IP address , IPv4 or IPv6
     * @param {Number} port SNMP port , 0 or empty for default
     * @param {module:api/AgentApi~statusIpaliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    statusIpalias(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling statusIpalias");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling statusIpalias");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling statusIpalias");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/ipalias/status/{IP}/{port}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stop operation.
     * @callback module:api/AgentApi~stopCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's primary IP address
     * Agent primary IP address
     * @param {Number} agentNum Agent to return the primary IP
     * @param {module:api/AgentApi~stopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    stop(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling stop");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopIpalias operation.
     * @callback module:api/AgentApi~stopIpaliasCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an existing ipalias for the agent.
     * port defaults to 161 if not specified.
     * @param {Number} agentNum Agent to stop the IP alias
     * @param {String} IP IP address , IPv4 or IPv6
     * @param {Number} port SNMP port , 0 or empty for default
     * @param {module:api/AgentApi~stopIpaliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    stopIpalias(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling stopIpalias");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling stopIpalias");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling stopIpalias");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/ipalias/stop/{IP}/{port}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trapConfigAdd operation.
     * @callback module:api/AgentApi~trapConfigAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a trap destination to the set of destinations.
     * Add a trap destination to the set of destinations.
     * @param {Number} agentNum Agent to add the destination
     * @param {String} IP IP of the destination
     * @param {Number} port port of the destination
     * @param {module:api/AgentApi~trapConfigAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    trapConfigAdd(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling trapConfigAdd");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling trapConfigAdd");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling trapConfigAdd");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/trap/config/add/{IP}/{port}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trapConfigDel operation.
     * @callback module:api/AgentApi~trapConfigDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a trap destination from the set of destinations.
     * Remove a trap destination from the set of destinations.
     * @param {Number} agentNum Agent to delete the destination
     * @param {String} IP IP of the destination
     * @param {Number} port port of the destination
     * @param {module:api/AgentApi~trapConfigDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    trapConfigDel(agentNum, IP, port, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling trapConfigDel");
      }
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling trapConfigDel");
      }
      // verify the required parameter 'port' is set
      if (port === undefined || port === null) {
        throw new Error("Missing the required parameter 'port' when calling trapConfigDel");
      }

      let pathParams = {
        'agentNum': agentNum,
        'IP': IP,
        'port': port
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/trap/config/delete/{IP}/{port}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trapConfigList operation.
     * @callback module:api/AgentApi~trapConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrapDest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the set of trap destinations for this agent instance.
     * Each trap destination is identified with an IP address and a port number. The default port number is the standard SNMP trap port 162.
     * @param {Number} agentNum Agent to show the IP alias list
     * @param {module:api/AgentApi~trapConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrapDest>}
     */
    trapConfigList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling trapConfigList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrapDest];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/trap/config/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trapList operation.
     * @callback module:api/AgentApi~trapListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the outstanding asynchronous traps for this agent instance.
     * List the outstanding asynchronous traps for this agent instance.
     * @param {Number} agentNum Agent to list the traps
     * @param {module:api/AgentApi~trapListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    trapList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling trapList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/trap/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
