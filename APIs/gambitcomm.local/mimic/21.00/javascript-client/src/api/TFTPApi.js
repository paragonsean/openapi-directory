/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigTFTP from '../model/ConfigTFTP';

/**
* TFTP service.
* @module api/TFTPApi
* @version 21.00
*/
export default class TFTPApi {

    /**
    * Constructs a new TFTPApi. 
    * @alias module:api/TFTPApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolTftpGetArgs operation.
     * @callback module:api/TFTPApi~protocolTftpGetArgsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TFTP argument structure
     * Agent's TFTP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the TFTP argument structure
     * @param {module:api/TFTPApi~protocolTftpGetArgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolTftpGetArgs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpGetArgs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/get/args', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpGetConfig operation.
     * @callback module:api/TFTPApi~protocolTftpGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigTFTP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TFTP configuration
     * Agent's TFTP configuration
     * @param {Number} agentNum Agent to show the TFTP configuration
     * @param {module:api/TFTPApi~protocolTftpGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigTFTP}
     */
    protocolTftpGetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigTFTP;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpGetStatistics operation.
     * @callback module:api/TFTPApi~protocolTftpGetStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TFTP statistics
     * Statistics of fields indicated in the headers
     * @param {Number} agentNum Agent to show TFTP statistics
     * @param {module:api/TFTPApi~protocolTftpGetStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolTftpGetStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpGetStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpGetStatsHdr operation.
     * @callback module:api/TFTPApi~protocolTftpGetStatsHdrCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the TFTP statistics headers
     * The headers of statistics fields
     * @param {module:api/TFTPApi~protocolTftpGetStatsHdrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolTftpGetStatsHdr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/protocol/msg/tftp/get/stats_hdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpGetTrace operation.
     * @callback module:api/TFTPApi~protocolTftpGetTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigTFTP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's TFTP traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param {Number} agentNum Agent to show whether TFTP tracing is enabled
     * @param {module:api/TFTPApi~protocolTftpGetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigTFTP}
     */
    protocolTftpGetTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpGetTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigTFTP;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionGetParameter operation.
     * @callback module:api/TFTPApi~protocolTftpSessionGetParameterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a parameter of a TFTP sesssion
     * Parameter is server , port , or dstfile
     * @param {Number} agentNum Agent to show TFTP parameter
     * @param {String} sessionID SessionID
     * @param {String} parameter Parameter to show
     * @param {module:api/TFTPApi~protocolTftpSessionGetParameterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSessionGetParameter(agentNum, sessionID, parameter, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionGetParameter");
      }
      // verify the required parameter 'sessionID' is set
      if (sessionID === undefined || sessionID === null) {
        throw new Error("Missing the required parameter 'sessionID' when calling protocolTftpSessionGetParameter");
      }
      // verify the required parameter 'parameter' is set
      if (parameter === undefined || parameter === null) {
        throw new Error("Missing the required parameter 'parameter' when calling protocolTftpSessionGetParameter");
      }

      let pathParams = {
        'agentNum': agentNum,
        'sessionID': sessionID,
        'parameter': parameter
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/get/{parameter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionRead operation.
     * @callback module:api/TFTPApi~protocolTftpSessionReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a read session to download srcfile from server
     * Session ID is returned
     * @param {Number} agentNum Agent to show TFTP statistics
     * @param {String} srcfile File name to retrieve from server
     * @param {module:api/TFTPApi~protocolTftpSessionReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolTftpSessionRead(agentNum, srcfile, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionRead");
      }
      // verify the required parameter 'srcfile' is set
      if (srcfile === undefined || srcfile === null) {
        throw new Error("Missing the required parameter 'srcfile' when calling protocolTftpSessionRead");
      }

      let pathParams = {
        'agentNum': agentNum,
        'srcfile': srcfile
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/session/read/server/{srcfile}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionSetParameter operation.
     * @callback module:api/TFTPApi~protocolTftpSessionSetParameterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a parameter of a TFTP sesssion
     * Parameter is server , port , or dstfile
     * @param {Number} agentNum Agent to set TFTP parameter
     * @param {String} sessionID SessionID
     * @param {String} parameter Parameter to set
     * @param {String} value Value to set
     * @param {module:api/TFTPApi~protocolTftpSessionSetParameterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSessionSetParameter(agentNum, sessionID, parameter, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionSetParameter");
      }
      // verify the required parameter 'sessionID' is set
      if (sessionID === undefined || sessionID === null) {
        throw new Error("Missing the required parameter 'sessionID' when calling protocolTftpSessionSetParameter");
      }
      // verify the required parameter 'parameter' is set
      if (parameter === undefined || parameter === null) {
        throw new Error("Missing the required parameter 'parameter' when calling protocolTftpSessionSetParameter");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolTftpSessionSetParameter");
      }

      let pathParams = {
        'agentNum': agentNum,
        'sessionID': sessionID,
        'parameter': parameter,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/set/{parameter}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionStart operation.
     * @callback module:api/TFTPApi~protocolTftpSessionStartCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a TFTP sesssion
     * Start uploading or downloading the file
     * @param {Number} agentNum Agent to start TFTP transaction
     * @param {String} sessionID SessionID
     * @param {module:api/TFTPApi~protocolTftpSessionStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSessionStart(agentNum, sessionID, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionStart");
      }
      // verify the required parameter 'sessionID' is set
      if (sessionID === undefined || sessionID === null) {
        throw new Error("Missing the required parameter 'sessionID' when calling protocolTftpSessionStart");
      }

      let pathParams = {
        'agentNum': agentNum,
        'sessionID': sessionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionStatus operation.
     * @callback module:api/TFTPApi~protocolTftpSessionStatusCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a TFTP sesssion's status
     * Status includes running state, bytes transfered, and time elapsed
     * @param {Number} agentNum Agent to show TFTP transaction
     * @param {String} sessionID SessionID
     * @param {module:api/TFTPApi~protocolTftpSessionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSessionStatus(agentNum, sessionID, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionStatus");
      }
      // verify the required parameter 'sessionID' is set
      if (sessionID === undefined || sessionID === null) {
        throw new Error("Missing the required parameter 'sessionID' when calling protocolTftpSessionStatus");
      }

      let pathParams = {
        'agentNum': agentNum,
        'sessionID': sessionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionStop operation.
     * @callback module:api/TFTPApi~protocolTftpSessionStopCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a TFTP sesssion
     * Stop uploading or downloading the file
     * @param {Number} agentNum Agent to stop TFTP transaction
     * @param {String} sessionID SessionID
     * @param {module:api/TFTPApi~protocolTftpSessionStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSessionStop(agentNum, sessionID, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionStop");
      }
      // verify the required parameter 'sessionID' is set
      if (sessionID === undefined || sessionID === null) {
        throw new Error("Missing the required parameter 'sessionID' when calling protocolTftpSessionStop");
      }

      let pathParams = {
        'agentNum': agentNum,
        'sessionID': sessionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSessionWrite operation.
     * @callback module:api/TFTPApi~protocolTftpSessionWriteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a read session to upload srcfile to server
     * Session ID is returned
     * @param {Number} agentNum Agent to show TFTP statistics
     * @param {String} srcfile File name to upload to server
     * @param {module:api/TFTPApi~protocolTftpSessionWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolTftpSessionWrite(agentNum, srcfile, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSessionWrite");
      }
      // verify the required parameter 'srcfile' is set
      if (srcfile === undefined || srcfile === null) {
        throw new Error("Missing the required parameter 'srcfile' when calling protocolTftpSessionWrite");
      }

      let pathParams = {
        'agentNum': agentNum,
        'srcfile': srcfile
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/session/write/server/{srcfile}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSetConfig operation.
     * @callback module:api/TFTPApi~protocolTftpSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's TFTP configuration
     * Agent's TFTP configuration
     * @param {Number} agentNum Agent to set the TFTP configuration
     * @param {String} argument Parameter to set the TFTP configuration
     * @param {String} value Value to set the TFTP configuration
     * @param {module:api/TFTPApi~protocolTftpSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSetConfig(agentNum, argument, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSetConfig");
      }
      // verify the required parameter 'argument' is set
      if (argument === undefined || argument === null) {
        throw new Error("Missing the required parameter 'argument' when calling protocolTftpSetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolTftpSetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'argument': argument,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/set/config/{argument}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolTftpSetTrace operation.
     * @callback module:api/TFTPApi~protocolTftpSetTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's TFTP traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the TFTP tracing
     * @param {String} enableOrNot Value to set the TFTP tracing
     * @param {module:api/TFTPApi~protocolTftpSetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolTftpSetTrace(agentNum, enableOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolTftpSetTrace");
      }
      // verify the required parameter 'enableOrNot' is set
      if (enableOrNot === undefined || enableOrNot === null) {
        throw new Error("Missing the required parameter 'enableOrNot' when calling protocolTftpSetTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'enableOrNot': enableOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/tftp/set/trace/{enableOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
