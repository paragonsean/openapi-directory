/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigCOAP from '../model/ConfigCOAP';

/**
* COAP service.
* @module api/COAPApi
* @version 21.00
*/
export default class COAPApi {

    /**
    * Constructs a new COAPApi. 
    * @alias module:api/COAPApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolCoapGetArgs operation.
     * @callback module:api/COAPApi~protocolCoapGetArgsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's COAP argument structure
     * Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the COAP argument structure
     * @param {module:api/COAPApi~protocolCoapGetArgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolCoapGetArgs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolCoapGetArgs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/coap/get/args', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolCoapGetConfig operation.
     * @callback module:api/COAPApi~protocolCoapGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigCOAP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's COAP configuration
     * Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the COAP configuration
     * @param {module:api/COAPApi~protocolCoapGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigCOAP}
     */
    protocolCoapGetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolCoapGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigCOAP;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/coap/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolCoapGetStatistics operation.
     * @callback module:api/COAPApi~protocolCoapGetStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's COAP statistics
     * Statistics of fields indicated in the headers
     * @param {Number} agentNum Agent to show COAP statistics
     * @param {module:api/COAPApi~protocolCoapGetStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolCoapGetStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolCoapGetStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/coap/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolCoapGetStatsHdr operation.
     * @callback module:api/COAPApi~protocolCoapGetStatsHdrCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the COAP statistics headers
     * The headers of statistics fields
     * @param {module:api/COAPApi~protocolCoapGetStatsHdrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolCoapGetStatsHdr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/protocol/msg/coap/get/stats_hdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolCoapGetTrace operation.
     * @callback module:api/COAPApi~protocolCoapGetTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigCOAP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's COAP traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param {Number} agentNum Agent to show whether COAP tracing is enabled
     * @param {module:api/COAPApi~protocolCoapGetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigCOAP}
     */
    protocolCoapGetTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolCoapGetTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigCOAP;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/coap/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolCoapSetConfig operation.
     * @callback module:api/COAPApi~protocolCoapSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's COAP configuration
     * Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to set the COAP configuration
     * @param {String} argument Parameter to set the COAP configuration
     * @param {String} value Value to set the COAP configuration
     * @param {module:api/COAPApi~protocolCoapSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolCoapSetConfig(agentNum, argument, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolCoapSetConfig");
      }
      // verify the required parameter 'argument' is set
      if (argument === undefined || argument === null) {
        throw new Error("Missing the required parameter 'argument' when calling protocolCoapSetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolCoapSetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'argument': argument,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/coap/set/config/{argument}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolCoapSetTrace operation.
     * @callback module:api/COAPApi~protocolCoapSetTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's COAP traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the COAP tracing
     * @param {String} enableOrNot Value to set the COAP tracing
     * @param {module:api/COAPApi~protocolCoapSetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolCoapSetTrace(agentNum, enableOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolCoapSetTrace");
      }
      // verify the required parameter 'enableOrNot' is set
      if (enableOrNot === undefined || enableOrNot === null) {
        throw new Error("Missing the required parameter 'enableOrNot' when calling protocolCoapSetTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'enableOrNot': enableOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/coap/set/trace/{enableOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
