/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigSNMPv3 from '../model/ConfigSNMPv3';

/**
* SNMPv3 service.
* @module api/SNMPv3Api
* @version 21.00
*/
export default class SNMPv3Api {

    /**
    * Constructs a new SNMPv3Api. 
    * @alias module:api/SNMPv3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolSnmpv3AccessAdd operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3AccessAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new access entry with the specified parameters.
     * Adds a new access entry with the specified parameters.
     * @param {Number} agentNum Agent to add the SNMPv3 access
     * @param {String} groupName SNMPv3 access name
     * @param {String} prefix SNMPv3 prefix
     * @param {String} securityModel SNMPv3 access security model
     * @param {String} securityLevel SNMPv3 access security level
     * @param {String} contextMatch SNMPv3 access context match
     * @param {String} readView SNMPv3 access read view
     * @param {String} writeView SNMPv3 access write view
     * @param {String} notifyView SNMPv3 access notify view
     * @param {module:api/SNMPv3Api~protocolSnmpv3AccessAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3AccessAdd(agentNum, groupName, prefix, securityModel, securityLevel, contextMatch, readView, writeView, notifyView, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'securityModel' is set
      if (securityModel === undefined || securityModel === null) {
        throw new Error("Missing the required parameter 'securityModel' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'securityLevel' is set
      if (securityLevel === undefined || securityLevel === null) {
        throw new Error("Missing the required parameter 'securityLevel' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'contextMatch' is set
      if (contextMatch === undefined || contextMatch === null) {
        throw new Error("Missing the required parameter 'contextMatch' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'readView' is set
      if (readView === undefined || readView === null) {
        throw new Error("Missing the required parameter 'readView' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'writeView' is set
      if (writeView === undefined || writeView === null) {
        throw new Error("Missing the required parameter 'writeView' when calling protocolSnmpv3AccessAdd");
      }
      // verify the required parameter 'notifyView' is set
      if (notifyView === undefined || notifyView === null) {
        throw new Error("Missing the required parameter 'notifyView' when calling protocolSnmpv3AccessAdd");
      }

      let pathParams = {
        'agentNum': agentNum,
        'groupName': groupName,
        'prefix': prefix,
        'securityModel': securityModel,
        'securityLevel': securityLevel,
        'contextMatch': contextMatch,
        'readView': readView,
        'writeView': writeView,
        'notifyView': notifyView
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/add/{groupName}/{prefix}/{securityModel}/{securityLevel}/{contextMatch}/{readView}/{writeView}/{notifyView}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3AccessClear operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3AccessClearCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all access entries.
     * Clears all access entries.
     * @param {Number} agentNum Agent to add the SNMPv3 access
     * @param {module:api/SNMPv3Api~protocolSnmpv3AccessClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3AccessClear(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessClear");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/clear', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3AccessDel operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3AccessDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified access entry.
     * Deletes the specified access entry.
     * @param {Number} agentNum Agent to add the SNMPv3 access
     * @param {String} accessName SNMPv3 access name
     * @param {module:api/SNMPv3Api~protocolSnmpv3AccessDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3AccessDel(agentNum, accessName, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessDel");
      }
      // verify the required parameter 'accessName' is set
      if (accessName === undefined || accessName === null) {
        throw new Error("Missing the required parameter 'accessName' when calling protocolSnmpv3AccessDel");
      }

      let pathParams = {
        'agentNum': agentNum,
        'accessName': accessName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/del/{accessName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3AccessList operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3AccessListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current acccess entries as an array of strings.
     * Returns the current acccess entries as an array of strings.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3AccessListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3AccessList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3AccessList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GetConfig operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSNMPv3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the SNMPv3 configuration.
     * Returns the SNMPv3 configuration.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3GetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSNMPv3}
     */
    protocolSnmpv3GetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigSNMPv3;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GetContextEngineid operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GetContextEngineidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the contextEngineID for the agent instance.
     * Retrieves the contextEngineID for the agent instance.
     * @param {Number} agentNum Agent to show the SNMPv3 engine
     * @param {module:api/SNMPv3Api~protocolSnmpv3GetContextEngineidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3GetContextEngineid(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetContextEngineid");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/context_engineid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GetEngineboots operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GetEnginebootsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the number of times the agent has been restarted.
     * Retrieves the number of times the agent has been restarted.
     * @param {Number} agentNum Agent to show the SNMPv3 engine
     * @param {module:api/SNMPv3Api~protocolSnmpv3GetEnginebootsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    protocolSnmpv3GetEngineboots(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetEngineboots");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineboots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GetEngineid operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GetEngineidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For started agents, retrieves the current engineID in use by the snmpv3 module.
     * For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \\x01 23 45 67 89...
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3GetEngineidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3GetEngineid(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetEngineid");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GetEnginetime operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GetEnginetimeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the time in seconds for which the agent has been running.
     * Retrieves the time in seconds for which the agent has been running.
     * @param {Number} agentNum Agent to show the SNMPv3 engine
     * @param {module:api/SNMPv3Api~protocolSnmpv3GetEnginetimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    protocolSnmpv3GetEnginetime(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GetEnginetime");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/enginetime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GroupAdd operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GroupAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new group entry with the specified parameters.
     * Adds a new group entry with the specified parameters.
     * @param {Number} agentNum Agent to add the SNMPv3 group
     * @param {String} groupName SNMPv3 group name
     * @param {String} securityModel SNMPv3 group security model
     * @param {String} securityName SNMPv3 group security name
     * @param {module:api/SNMPv3Api~protocolSnmpv3GroupAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3GroupAdd(agentNum, groupName, securityModel, securityName, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupAdd");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling protocolSnmpv3GroupAdd");
      }
      // verify the required parameter 'securityModel' is set
      if (securityModel === undefined || securityModel === null) {
        throw new Error("Missing the required parameter 'securityModel' when calling protocolSnmpv3GroupAdd");
      }
      // verify the required parameter 'securityName' is set
      if (securityName === undefined || securityName === null) {
        throw new Error("Missing the required parameter 'securityName' when calling protocolSnmpv3GroupAdd");
      }

      let pathParams = {
        'agentNum': agentNum,
        'groupName': groupName,
        'securityModel': securityModel,
        'securityName': securityName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/add/{groupName}/{securityModel}/{securityName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GroupClear operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GroupClearCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all group entries.
     * Clears all group entries.
     * @param {Number} agentNum Agent to add the SNMPv3 group
     * @param {module:api/SNMPv3Api~protocolSnmpv3GroupClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3GroupClear(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupClear");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/clear', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GroupDel operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GroupDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified group entry.
     * Deletes the specified group entry.
     * @param {Number} agentNum Agent to add the SNMPv3 group
     * @param {String} groupName SNMPv3 group name
     * @param {module:api/SNMPv3Api~protocolSnmpv3GroupDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3GroupDel(agentNum, groupName, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupDel");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling protocolSnmpv3GroupDel");
      }

      let pathParams = {
        'agentNum': agentNum,
        'groupName': groupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/del/{groupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3GroupList operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3GroupListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current group entries as an array of strings.
     * Returns the current group entries as an array of strings.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3GroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3GroupList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3GroupList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3SetConfig operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3SetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the SNMPv3 configuration.
     * Changes the SNMPv3 configuration.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {String} parameter SNMPv3 configuration parameter
     * @param {String} value SNMPv3 parameter value
     * @param {module:api/SNMPv3Api~protocolSnmpv3SetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3SetConfig(agentNum, parameter, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3SetConfig");
      }
      // verify the required parameter 'parameter' is set
      if (parameter === undefined || parameter === null) {
        throw new Error("Missing the required parameter 'parameter' when calling protocolSnmpv3SetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolSnmpv3SetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'parameter': parameter,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/set/config/{parameter}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3UserAdd operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3UserAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new user entry with the specified parameters.
     * Adds a new user entry with the specified parameters.
     * @param {Number} agentNum Agent to add the SNMPv3 user
     * @param {String} userName SNMPv3 user name
     * @param {String} securityName SNMPv3 user security name
     * @param {String} authProtocol SNMPv3 user authentication protocol
     * @param {String} authKey SNMPv3 user authentication key
     * @param {String} privProtocol SNMPv3 user privacy encryption protocol
     * @param {String} privKey SNMPv3 user privacy encryption key
     * @param {module:api/SNMPv3Api~protocolSnmpv3UserAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3UserAdd(agentNum, userName, securityName, authProtocol, authKey, privProtocol, privKey, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserAdd");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling protocolSnmpv3UserAdd");
      }
      // verify the required parameter 'securityName' is set
      if (securityName === undefined || securityName === null) {
        throw new Error("Missing the required parameter 'securityName' when calling protocolSnmpv3UserAdd");
      }
      // verify the required parameter 'authProtocol' is set
      if (authProtocol === undefined || authProtocol === null) {
        throw new Error("Missing the required parameter 'authProtocol' when calling protocolSnmpv3UserAdd");
      }
      // verify the required parameter 'authKey' is set
      if (authKey === undefined || authKey === null) {
        throw new Error("Missing the required parameter 'authKey' when calling protocolSnmpv3UserAdd");
      }
      // verify the required parameter 'privProtocol' is set
      if (privProtocol === undefined || privProtocol === null) {
        throw new Error("Missing the required parameter 'privProtocol' when calling protocolSnmpv3UserAdd");
      }
      // verify the required parameter 'privKey' is set
      if (privKey === undefined || privKey === null) {
        throw new Error("Missing the required parameter 'privKey' when calling protocolSnmpv3UserAdd");
      }

      let pathParams = {
        'agentNum': agentNum,
        'userName': userName,
        'securityName': securityName,
        'authProtocol': authProtocol,
        'authKey': authKey,
        'privProtocol': privProtocol,
        'privKey': privKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/add/{userName}/{securityName}/{authProtocol}/{authKey}/{privProtocol}/{privKey}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3UserClear operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3UserClearCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all user entries.
     * Clears all user entries.
     * @param {Number} agentNum Agent to add the SNMPv3 user
     * @param {module:api/SNMPv3Api~protocolSnmpv3UserClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3UserClear(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserClear");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/clear', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3UserDel operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3UserDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified user entry.
     * Deletes the specified user entry.
     * @param {Number} agentNum Agent to add the SNMPv3 user
     * @param {String} userName SNMPv3 user name
     * @param {module:api/SNMPv3Api~protocolSnmpv3UserDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3UserDel(agentNum, userName, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserDel");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling protocolSnmpv3UserDel");
      }

      let pathParams = {
        'agentNum': agentNum,
        'userName': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/del/{userName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3UserList operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3UserListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current user entries as a Tcl list.
     * Returns the current user entries as a Tcl list.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3UserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3UserList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3UserList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3UsmSave operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3UsmSaveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves current user settings in the currently loaded USM config file.
     * Saves current user settings in the currently loaded USM config file.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3UsmSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3UsmSave(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3UsmSave");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/save', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3UsmSaveas operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3UsmSaveasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves current user settings in the specified USM config file.
     * Saves current user settings in the specified USM config file.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {String} filename Filename to save
     * @param {module:api/SNMPv3Api~protocolSnmpv3UsmSaveasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3UsmSaveas(agentNum, filename, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3UsmSaveas");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling protocolSnmpv3UsmSaveas");
      }

      let pathParams = {
        'agentNum': agentNum,
        'filename': filename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/saveas/{filename}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3VacmSave operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3VacmSaveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3VacmSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3VacmSave(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3VacmSave");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/save', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3VacmSaveas operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3VacmSaveasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves current group, access, view settings in the specified VACM config file.
     * Saves current group, access, view settings in the specified VACM config file.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {String} filename Filename to save
     * @param {module:api/SNMPv3Api~protocolSnmpv3VacmSaveasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3VacmSaveas(agentNum, filename, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3VacmSaveas");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling protocolSnmpv3VacmSaveas");
      }

      let pathParams = {
        'agentNum': agentNum,
        'filename': filename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/saveas/{filename}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3ViewAdd operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3ViewAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new view entry with the specified parameters.
     * Adds a new view entry with the specified parameters.
     * @param {Number} agentNum Agent to add the SNMPv3 view
     * @param {String} viewName SNMPv3 view name
     * @param {String} viewType SNMPv3 view type
     * @param {String} subtree SNMPv3 view subtree
     * @param {String} mask SNMPv3 view mask
     * @param {module:api/SNMPv3Api~protocolSnmpv3ViewAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3ViewAdd(agentNum, viewName, viewType, subtree, mask, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewAdd");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling protocolSnmpv3ViewAdd");
      }
      // verify the required parameter 'viewType' is set
      if (viewType === undefined || viewType === null) {
        throw new Error("Missing the required parameter 'viewType' when calling protocolSnmpv3ViewAdd");
      }
      // verify the required parameter 'subtree' is set
      if (subtree === undefined || subtree === null) {
        throw new Error("Missing the required parameter 'subtree' when calling protocolSnmpv3ViewAdd");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling protocolSnmpv3ViewAdd");
      }

      let pathParams = {
        'agentNum': agentNum,
        'viewName': viewName,
        'viewType': viewType,
        'subtree': subtree,
        'mask': mask
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/add/{viewName}/{viewType}/{subtree}/{mask}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3ViewClear operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3ViewClearCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all view entries.
     * Clears all view entries.
     * @param {Number} agentNum Agent to add the SNMPv3 view
     * @param {module:api/SNMPv3Api~protocolSnmpv3ViewClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3ViewClear(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewClear");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/clear', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3ViewDel operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3ViewDelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified view entry.
     * Deletes the specified view entry.
     * @param {Number} agentNum Agent to add the SNMPv3 view
     * @param {String} viewName SNMPv3 view name
     * @param {module:api/SNMPv3Api~protocolSnmpv3ViewDelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSnmpv3ViewDel(agentNum, viewName, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewDel");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling protocolSnmpv3ViewDel");
      }

      let pathParams = {
        'agentNum': agentNum,
        'viewName': viewName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/del/{viewName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSnmpv3ViewList operation.
     * @callback module:api/SNMPv3Api~protocolSnmpv3ViewListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current view entries as an array of strings.
     * Returns the current view entries as an array of strings.
     * @param {Number} agentNum Agent to show the SNMPv3 configuration
     * @param {module:api/SNMPv3Api~protocolSnmpv3ViewListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSnmpv3ViewList(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSnmpv3ViewList");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
