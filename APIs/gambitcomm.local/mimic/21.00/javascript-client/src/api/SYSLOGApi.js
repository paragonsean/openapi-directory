/**
 * MIMIC REST API
 * This is the API for MIMIC client to connect to MIMIC daemon.
 *
 * The version of the OpenAPI document: 21.00
 * Contact: support@gambitcomm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigSYSLOG from '../model/ConfigSYSLOG';
import SyslogMsg from '../model/SyslogMsg';

/**
* SYSLOG service.
* @module api/SYSLOGApi
* @version 21.00
*/
export default class SYSLOGApi {

    /**
    * Constructs a new SYSLOGApi. 
    * @alias module:api/SYSLOGApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protocolSyslogGetArgs operation.
     * @callback module:api/SYSLOGApi~protocolSyslogGetArgsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SYSLOG argument structure
     * Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the SYSLOG argument structure
     * @param {module:api/SYSLOGApi~protocolSyslogGetArgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    protocolSyslogGetArgs(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogGetArgs");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/get/args', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogGetAttr operation.
     * @callback module:api/SYSLOGApi~protocolSyslogGetAttrCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the outgoing message's attributes
     * Attribute can be server , sequence , separator , hostname , timestamp
     * @param {Number} agentNum Agent to set the SYSLOG tracing
     * @param {String} attr Attribute
     * @param {module:api/SYSLOGApi~protocolSyslogGetAttrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSyslogGetAttr(agentNum, attr, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogGetAttr");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling protocolSyslogGetAttr");
      }

      let pathParams = {
        'agentNum': agentNum,
        'attr': attr
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/get/{attr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogGetConfig operation.
     * @callback module:api/SYSLOGApi~protocolSyslogGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSYSLOG} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SYSLOG configuration
     * Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to show the SYSLOG configuration
     * @param {module:api/SYSLOGApi~protocolSyslogGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSYSLOG}
     */
    protocolSyslogGetConfig(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogGetConfig");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigSYSLOG;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/get/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogGetStatistics operation.
     * @callback module:api/SYSLOGApi~protocolSyslogGetStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SYSLOG statistics
     * Statistics of fields indicated in the headers
     * @param {Number} agentNum Agent to show SYSLOG statistics
     * @param {module:api/SYSLOGApi~protocolSyslogGetStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    protocolSyslogGetStatistics(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogGetStatistics");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/get/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogGetStatsHdr operation.
     * @callback module:api/SYSLOGApi~protocolSyslogGetStatsHdrCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the SYSLOG statistics headers
     * The headers of statistics fields
     * @param {module:api/SYSLOGApi~protocolSyslogGetStatsHdrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    protocolSyslogGetStatsHdr(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/mimic/protocol/msg/syslog/get/stats_hdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogGetTrace operation.
     * @callback module:api/SYSLOGApi~protocolSyslogGetTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigSYSLOG} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the agent's SYSLOG traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param {Number} agentNum Agent to show whether SYSLOG tracing is enabled
     * @param {module:api/SYSLOGApi~protocolSyslogGetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigSYSLOG}
     */
    protocolSyslogGetTrace(agentNum, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogGetTrace");
      }

      let pathParams = {
        'agentNum': agentNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigSYSLOG;
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/get/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogSend operation.
     * @callback module:api/SYSLOGApi~protocolSyslogSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's SYSLOG traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the SYSLOG tracing
     * @param {Number} pri Message Priority
     * @param {module:model/SyslogMsg} syslogMsg 
     * @param {module:api/SYSLOGApi~protocolSyslogSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSyslogSend(agentNum, pri, syslogMsg, callback) {
      let postBody = syslogMsg;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogSend");
      }
      // verify the required parameter 'pri' is set
      if (pri === undefined || pri === null) {
        throw new Error("Missing the required parameter 'pri' when calling protocolSyslogSend");
      }
      // verify the required parameter 'syslogMsg' is set
      if (syslogMsg === undefined || syslogMsg === null) {
        throw new Error("Missing the required parameter 'syslogMsg' when calling protocolSyslogSend");
      }

      let pathParams = {
        'agentNum': agentNum,
        'pri': pri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/send/{pri}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogSetAttr operation.
     * @callback module:api/SYSLOGApi~protocolSyslogSetAttrCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the outgoing message's attributes
     * Attribute can be server , sequence , separator , hostname , timestamp
     * @param {Number} agentNum Agent to set the SYSLOG tracing
     * @param {String} attr Attribute
     * @param {String} value 
     * @param {module:api/SYSLOGApi~protocolSyslogSetAttrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSyslogSetAttr(agentNum, attr, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogSetAttr");
      }
      // verify the required parameter 'attr' is set
      if (attr === undefined || attr === null) {
        throw new Error("Missing the required parameter 'attr' when calling protocolSyslogSetAttr");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolSyslogSetAttr");
      }

      let pathParams = {
        'agentNum': agentNum,
        'attr': attr,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/set/{attr}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogSetConfig operation.
     * @callback module:api/SYSLOGApi~protocolSyslogSetConfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's SYSLOG configuration
     * Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param {Number} agentNum Agent to set the SYSLOG configuration
     * @param {String} argument Parameter to set the SYSLOG configuration
     * @param {String} value Value to set the SYSLOG configuration
     * @param {module:api/SYSLOGApi~protocolSyslogSetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSyslogSetConfig(agentNum, argument, value, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogSetConfig");
      }
      // verify the required parameter 'argument' is set
      if (argument === undefined || argument === null) {
        throw new Error("Missing the required parameter 'argument' when calling protocolSyslogSetConfig");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling protocolSyslogSetConfig");
      }

      let pathParams = {
        'agentNum': agentNum,
        'argument': argument,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/set/config/{argument}/{value}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protocolSyslogSetTrace operation.
     * @callback module:api/SYSLOGApi~protocolSyslogSetTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the agent's SYSLOG traffic tracing
     * 1 to enable, 0 to disable
     * @param {Number} agentNum Agent to set the SYSLOG tracing
     * @param {String} enableOrNot Value to set the SYSLOG tracing
     * @param {module:api/SYSLOGApi~protocolSyslogSetTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    protocolSyslogSetTrace(agentNum, enableOrNot, callback) {
      let postBody = null;
      // verify the required parameter 'agentNum' is set
      if (agentNum === undefined || agentNum === null) {
        throw new Error("Missing the required parameter 'agentNum' when calling protocolSyslogSetTrace");
      }
      // verify the required parameter 'enableOrNot' is set
      if (enableOrNot === undefined || enableOrNot === null) {
        throw new Error("Missing the required parameter 'enableOrNot' when calling protocolSyslogSetTrace");
      }

      let pathParams = {
        'agentNum': agentNum,
        'enableOrNot': enableOrNot
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/mimic/agent/{agentNum}/protocol/msg/syslog/set/trace/{enableOrNot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
