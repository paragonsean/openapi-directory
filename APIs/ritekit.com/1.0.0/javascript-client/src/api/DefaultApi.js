/**
 * RiteKit API
 * RiteKit API is based on REST principles.  Authentication uses standard OAuth 2.0 process  ##Getting started  1. Sign up for [RiteKit](https://ritekit.com/)  1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)  1. Click \"Create a token\" button to get your **Client ID** and **Client secret**  1. When you reach your free limit of calls per month, [upgrade to paid tiers](https://ritekit.com/developer/)  ## Options for authorizing API Calls  #### Using Client ID directly  You can directly connect to our API using your **client ID** by sending it as a GET query parameter. This option is simple (no need for oAuth) but it should be used only in case the Client ID is not exposed publicly.  GET  https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the animateImage operation.
     * @callback module:api/DefaultApi~animateImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Animate Image
     * Returns URL of an animated GIF.
     * @param {String} url URL of the company
     * @param {String} type URL of the company
     * @param {module:api/DefaultApi~animateImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    animateImage(url, type, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling animateImage");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling animateImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/gif'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/images/animate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoEmojify operation.
     * @callback module:api/DefaultApi~autoEmojifyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auto-Emojify
     * Returns text of the post with emoji added
     * @param {String} text Text of the post
     * @param {module:api/DefaultApi~autoEmojifyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    autoEmojify(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling autoEmojify");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/emoji/auto-emojify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoHashtag operation.
     * @callback module:api/DefaultApi~autoHashtagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auto-Hashtag
     * Returns auto-hashtagged text of the post.
     * @param {String} post Text of the post
     * @param {Object} opts Optional parameters
     * @param {Number} [maxHashtags = 2)] Max number of hashtags.
     * @param {String} [hashtagPosition = 'auto')] Position of hashtags: end => at the end, auto => anywhere
     * @param {module:api/DefaultApi~autoHashtagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    autoHashtag(post, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'post' is set
      if (post === undefined || post === null) {
        throw new Error("Missing the required parameter 'post' when calling autoHashtag");
      }

      let pathParams = {
      };
      let queryParams = {
        'post': post,
        'maxHashtags': opts['maxHashtags'],
        'hashtagPosition': opts['hashtagPosition']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/stats/auto-hashtag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyLogo operation.
     * @callback module:api/DefaultApi~companyLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Company Logo
     * Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.  Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side.
     * @param {String} domain URL of the company
     * @param {module:api/DefaultApi~companyLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companyLogo(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling companyLogo");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/png'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/images/logo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emojiSuggestions operation.
     * @callback module:api/DefaultApi~emojiSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Emoji Suggestions
     * Returns list of emoji suggestions for a given text of the post
     * @param {String} text Text of the post
     * @param {module:api/DefaultApi~emojiSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emojiSuggestions(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling emojiSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/emoji/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hashtagHistory operation.
     * @callback module:api/DefaultApi~hashtagHistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hashtag History
     * Returns historical stats for a given hashtag from the last 30 days
     * @param {String} hashtag Hashtag without # mark
     * @param {module:api/DefaultApi~hashtagHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hashtagHistory(hashtag, callback) {
      let postBody = null;
      // verify the required parameter 'hashtag' is set
      if (hashtag === undefined || hashtag === null) {
        throw new Error("Missing the required parameter 'hashtag' when calling hashtagHistory");
      }

      let pathParams = {
        'hashtag': hashtag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/stats/history/{hashtag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hashtagStats operation.
     * @callback module:api/DefaultApi~hashtagStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hashtag Stats
     * Returns real-time stats for up to 100 hashtags (updated hourly).
     * @param {Array.<Object>} tags Hashtag(s) without # mark
     * @param {module:api/DefaultApi~hashtagStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hashtagStats(tags, callback) {
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling hashtagStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(tags, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/stats/multiple-hashtags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hashtagSuggestions operation.
     * @callback module:api/DefaultApi~hashtagSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hashtag Suggestions
     * Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity.
     * @param {String} text Topic
     * @param {module:api/DefaultApi~hashtagSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hashtagSuggestions(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling hashtagSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/stats/hashtag-suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hashtagsCleaner operation.
     * @callback module:api/DefaultApi~hashtagsCleanerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hashtags cleaner
     * Remove banned hashtags before posting to Instagram
     * @param {String} post post
     * @param {module:api/DefaultApi~hashtagsCleanerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hashtagsCleaner(post, callback) {
      let postBody = null;
      // verify the required parameter 'post' is set
      if (post === undefined || post === null) {
        throw new Error("Missing the required parameter 'post' when calling hashtagsCleaner");
      }

      let pathParams = {
      };
      let queryParams = {
        'post': post
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/instagram/hashtags-cleaner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfCTAs operation.
     * @callback module:api/DefaultApi~listOfCTAsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of CTAs
     * Returns list of available CTA for current user. Requires each user to authenticate with RiteKit
     * @param {module:api/DefaultApi~listOfCTAsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listOfCTAs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/link/cta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shortenLink operation.
     * @callback module:api/DefaultApi~shortenLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shorten Link
     * Returns a shorten link with a given CTA.
     * @param {String} url URL
     * @param {Number} cta cta id
     * @param {module:api/DefaultApi~shortenLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shortenLink(url, cta, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling shortenLink");
      }
      // verify the required parameter 'cta' is set
      if (cta === undefined || cta === null) {
        throw new Error("Missing the required parameter 'cta' when calling shortenLink");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'cta': cta
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/link/short-link', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the textToImage operation.
     * @callback module:api/DefaultApi~textToImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Text to Image
     * Returns URL of an image created from text according to given style parameters
     * @param {String} quote Text of the quote
     * @param {String} author Name of the author/source
     * @param {Number} fontSize Font size for the quote (author font size is calculated automatically)
     * @param {String} quoteFont Font-family used for quote text
     * @param {String} quoteFontColor Font color of the quote text
     * @param {String} authorFont Font-family used for author name
     * @param {String} authorFontColor Font color of the author
     * @param {Number} enableHighlight Enable highlight on quote text
     * @param {String} highlightColor Color used for highlight
     * @param {String} bgType Background type (gradient/solid)
     * @param {String} backgroundColor Background color for solid background type
     * @param {String} gradientType Type of gradient background (linear/radial)
     * @param {String} gradientColor1 First color for gradient background type
     * @param {String} gradientColor2 Second color for gradient background type
     * @param {String} brandLogo URL of the brand logo
     * @param {String} animation Animation type: none, rays, glint, circle
     * @param {Object} opts Optional parameters
     * @param {Number} [showQuoteMark] showing/hiding quote mark
     * @param {module:api/DefaultApi~textToImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    textToImage(quote, author, fontSize, quoteFont, quoteFontColor, authorFont, authorFontColor, enableHighlight, highlightColor, bgType, backgroundColor, gradientType, gradientColor1, gradientColor2, brandLogo, animation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'quote' is set
      if (quote === undefined || quote === null) {
        throw new Error("Missing the required parameter 'quote' when calling textToImage");
      }
      // verify the required parameter 'author' is set
      if (author === undefined || author === null) {
        throw new Error("Missing the required parameter 'author' when calling textToImage");
      }
      // verify the required parameter 'fontSize' is set
      if (fontSize === undefined || fontSize === null) {
        throw new Error("Missing the required parameter 'fontSize' when calling textToImage");
      }
      // verify the required parameter 'quoteFont' is set
      if (quoteFont === undefined || quoteFont === null) {
        throw new Error("Missing the required parameter 'quoteFont' when calling textToImage");
      }
      // verify the required parameter 'quoteFontColor' is set
      if (quoteFontColor === undefined || quoteFontColor === null) {
        throw new Error("Missing the required parameter 'quoteFontColor' when calling textToImage");
      }
      // verify the required parameter 'authorFont' is set
      if (authorFont === undefined || authorFont === null) {
        throw new Error("Missing the required parameter 'authorFont' when calling textToImage");
      }
      // verify the required parameter 'authorFontColor' is set
      if (authorFontColor === undefined || authorFontColor === null) {
        throw new Error("Missing the required parameter 'authorFontColor' when calling textToImage");
      }
      // verify the required parameter 'enableHighlight' is set
      if (enableHighlight === undefined || enableHighlight === null) {
        throw new Error("Missing the required parameter 'enableHighlight' when calling textToImage");
      }
      // verify the required parameter 'highlightColor' is set
      if (highlightColor === undefined || highlightColor === null) {
        throw new Error("Missing the required parameter 'highlightColor' when calling textToImage");
      }
      // verify the required parameter 'bgType' is set
      if (bgType === undefined || bgType === null) {
        throw new Error("Missing the required parameter 'bgType' when calling textToImage");
      }
      // verify the required parameter 'backgroundColor' is set
      if (backgroundColor === undefined || backgroundColor === null) {
        throw new Error("Missing the required parameter 'backgroundColor' when calling textToImage");
      }
      // verify the required parameter 'gradientType' is set
      if (gradientType === undefined || gradientType === null) {
        throw new Error("Missing the required parameter 'gradientType' when calling textToImage");
      }
      // verify the required parameter 'gradientColor1' is set
      if (gradientColor1 === undefined || gradientColor1 === null) {
        throw new Error("Missing the required parameter 'gradientColor1' when calling textToImage");
      }
      // verify the required parameter 'gradientColor2' is set
      if (gradientColor2 === undefined || gradientColor2 === null) {
        throw new Error("Missing the required parameter 'gradientColor2' when calling textToImage");
      }
      // verify the required parameter 'brandLogo' is set
      if (brandLogo === undefined || brandLogo === null) {
        throw new Error("Missing the required parameter 'brandLogo' when calling textToImage");
      }
      // verify the required parameter 'animation' is set
      if (animation === undefined || animation === null) {
        throw new Error("Missing the required parameter 'animation' when calling textToImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'quote': quote,
        'author': author,
        'fontSize': fontSize,
        'quoteFont': quoteFont,
        'quoteFontColor': quoteFontColor,
        'authorFont': authorFont,
        'authorFontColor': authorFontColor,
        'enableHighlight': enableHighlight,
        'highlightColor': highlightColor,
        'bgType': bgType,
        'backgroundColor': backgroundColor,
        'gradientType': gradientType,
        'gradientColor1': gradientColor1,
        'gradientColor2': gradientColor2,
        'brandLogo': brandLogo,
        'animation': animation,
        'showQuoteMark': opts['showQuoteMark']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/images/quote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trendingHashtags operation.
     * @callback module:api/DefaultApi~trendingHashtagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trending Hashtags
     * Returns list of hashtags currently trending on Twitter
     * @param {Object} opts Optional parameters
     * @param {Boolean} [green = false)] Restrict results only to green hashtags. Hides overused (red) hashtags.
     * @param {Boolean} [latin = false)] Restrict results only to hashtags with latin characters
     * @param {module:api/DefaultApi~trendingHashtagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    trendingHashtags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'green': opts['green'],
        'latin': opts['latin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/search/trending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
