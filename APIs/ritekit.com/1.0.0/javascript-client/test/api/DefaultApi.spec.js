/**
 * RiteKit API
 * RiteKit API is based on REST principles.  Authentication uses standard OAuth 2.0 process  ##Getting started  1. Sign up for [RiteKit](https://ritekit.com/)  1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)  1. Click \"Create a token\" button to get your **Client ID** and **Client secret**  1. When you reach your free limit of calls per month, [upgrade to paid tiers](https://ritekit.com/developer/)  ## Options for authorizing API Calls  #### Using Client ID directly  You can directly connect to our API using your **client ID** by sending it as a GET query parameter. This option is simple (no need for oAuth) but it should be used only in case the Client ID is not exposed publicly.  GET  https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RiteKitApi);
  }
}(this, function(expect, RiteKitApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RiteKitApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('animateImage', function() {
      it('should call animateImage successfully', function(done) {
        //uncomment below and update the code to test animateImage
        //instance.animateImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autoEmojify', function() {
      it('should call autoEmojify successfully', function(done) {
        //uncomment below and update the code to test autoEmojify
        //instance.autoEmojify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('autoHashtag', function() {
      it('should call autoHashtag successfully', function(done) {
        //uncomment below and update the code to test autoHashtag
        //instance.autoHashtag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('companyLogo', function() {
      it('should call companyLogo successfully', function(done) {
        //uncomment below and update the code to test companyLogo
        //instance.companyLogo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emojiSuggestions', function() {
      it('should call emojiSuggestions successfully', function(done) {
        //uncomment below and update the code to test emojiSuggestions
        //instance.emojiSuggestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hashtagHistory', function() {
      it('should call hashtagHistory successfully', function(done) {
        //uncomment below and update the code to test hashtagHistory
        //instance.hashtagHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hashtagStats', function() {
      it('should call hashtagStats successfully', function(done) {
        //uncomment below and update the code to test hashtagStats
        //instance.hashtagStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hashtagSuggestions', function() {
      it('should call hashtagSuggestions successfully', function(done) {
        //uncomment below and update the code to test hashtagSuggestions
        //instance.hashtagSuggestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hashtagsCleaner', function() {
      it('should call hashtagsCleaner successfully', function(done) {
        //uncomment below and update the code to test hashtagsCleaner
        //instance.hashtagsCleaner(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOfCTAs', function() {
      it('should call listOfCTAs successfully', function(done) {
        //uncomment below and update the code to test listOfCTAs
        //instance.listOfCTAs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shortenLink', function() {
      it('should call shortenLink successfully', function(done) {
        //uncomment below and update the code to test shortenLink
        //instance.shortenLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('textToImage', function() {
      it('should call textToImage successfully', function(done) {
        //uncomment below and update the code to test textToImage
        //instance.textToImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trendingHashtags', function() {
      it('should call trendingHashtags successfully', function(done) {
        //uncomment below and update the code to test trendingHashtags
        //instance.trendingHashtags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
