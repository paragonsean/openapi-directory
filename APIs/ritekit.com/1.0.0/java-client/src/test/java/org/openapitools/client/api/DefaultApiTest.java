/*
 * RiteKit API
 * RiteKit API is based on REST principles.  Authentication uses standard OAuth 2.0 process  ##Getting started  1. Sign up for [RiteKit](https://ritekit.com/)  1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)  1. Click \"Create a token\" button to get your **Client ID** and **Client secret**  1. When you reach your free limit of calls per month, [upgrade to paid tiers](https://ritekit.com/developer/)  ## Options for authorizing API Calls  #### Using Client ID directly  You can directly connect to our API using your **client ID** by sending it as a GET query parameter. This option is simple (no need for oAuth) but it should be used only in case the Client ID is not exposed publicly.  GET  https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Animate Image
     *
     * Returns URL of an animated GIF.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void animateImageTest() throws ApiException {
        String url = null;
        String type = null;
        api.animateImage(url, type);
        // TODO: test validations
    }

    /**
     * Auto-Emojify
     *
     * Returns text of the post with emoji added
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autoEmojifyTest() throws ApiException {
        String text = null;
        api.autoEmojify(text);
        // TODO: test validations
    }

    /**
     * Auto-Hashtag
     *
     * Returns auto-hashtagged text of the post.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autoHashtagTest() throws ApiException {
        String post = null;
        Integer maxHashtags = null;
        String hashtagPosition = null;
        api.autoHashtag(post, maxHashtags, hashtagPosition);
        // TODO: test validations
    }

    /**
     * Company Logo
     *
     * Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.  Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyLogoTest() throws ApiException {
        String domain = null;
        api.companyLogo(domain);
        // TODO: test validations
    }

    /**
     * Emoji Suggestions
     *
     * Returns list of emoji suggestions for a given text of the post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emojiSuggestionsTest() throws ApiException {
        String text = null;
        api.emojiSuggestions(text);
        // TODO: test validations
    }

    /**
     * Hashtag History
     *
     * Returns historical stats for a given hashtag from the last 30 days
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashtagHistoryTest() throws ApiException {
        String hashtag = null;
        api.hashtagHistory(hashtag);
        // TODO: test validations
    }

    /**
     * Hashtag Stats
     *
     * Returns real-time stats for up to 100 hashtags (updated hourly).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashtagStatsTest() throws ApiException {
        List<Object> tags = null;
        api.hashtagStats(tags);
        // TODO: test validations
    }

    /**
     * Hashtag Suggestions
     *
     * Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashtagSuggestionsTest() throws ApiException {
        String text = null;
        api.hashtagSuggestions(text);
        // TODO: test validations
    }

    /**
     * Hashtags cleaner
     *
     * Remove banned hashtags before posting to Instagram
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashtagsCleanerTest() throws ApiException {
        String post = null;
        api.hashtagsCleaner(post);
        // TODO: test validations
    }

    /**
     * List of CTAs
     *
     * Returns list of available CTA for current user. Requires each user to authenticate with RiteKit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfCTAsTest() throws ApiException {
        api.listOfCTAs();
        // TODO: test validations
    }

    /**
     * Shorten Link
     *
     * Returns a shorten link with a given CTA.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shortenLinkTest() throws ApiException {
        String url = null;
        Integer cta = null;
        api.shortenLink(url, cta);
        // TODO: test validations
    }

    /**
     * Text to Image
     *
     * Returns URL of an image created from text according to given style parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void textToImageTest() throws ApiException {
        String quote = null;
        String author = null;
        Integer fontSize = null;
        String quoteFont = null;
        String quoteFontColor = null;
        String authorFont = null;
        String authorFontColor = null;
        Integer enableHighlight = null;
        String highlightColor = null;
        String bgType = null;
        String backgroundColor = null;
        String gradientType = null;
        String gradientColor1 = null;
        String gradientColor2 = null;
        String brandLogo = null;
        String animation = null;
        Integer showQuoteMark = null;
        api.textToImage(quote, author, fontSize, quoteFont, quoteFontColor, authorFont, authorFontColor, enableHighlight, highlightColor, bgType, backgroundColor, gradientType, gradientColor1, gradientColor2, brandLogo, animation, showQuoteMark);
        // TODO: test validations
    }

    /**
     * Trending Hashtags
     *
     * Returns list of hashtags currently trending on Twitter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trendingHashtagsTest() throws ApiException {
        Boolean green = null;
        Boolean latin = null;
        api.trendingHashtags(green, latin);
        // TODO: test validations
    }

}
