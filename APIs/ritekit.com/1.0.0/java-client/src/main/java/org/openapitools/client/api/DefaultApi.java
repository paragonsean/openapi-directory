/*
 * RiteKit API
 * RiteKit API is based on REST principles.  Authentication uses standard OAuth 2.0 process  ##Getting started  1. Sign up for [RiteKit](https://ritekit.com/)  1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)  1. Click \"Create a token\" button to get your **Client ID** and **Client secret**  1. When you reach your free limit of calls per month, [upgrade to paid tiers](https://ritekit.com/developer/)  ## Options for authorizing API Calls  #### Using Client ID directly  You can directly connect to our API using your **client ID** by sending it as a GET query parameter. This option is simple (no need for oAuth) but it should be used only in case the Client ID is not exposed publicly.  GET  https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for animateImage
     * @param url URL of the company (required)
     * @param type URL of the company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call animateImageCall(String url, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/images/animate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "image/gif"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call animateImageValidateBeforeCall(String url, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling animateImage(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling animateImage(Async)");
        }

        return animateImageCall(url, type, _callback);

    }

    /**
     * Animate Image
     * Returns URL of an animated GIF.
     * @param url URL of the company (required)
     * @param type URL of the company (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void animateImage(String url, String type) throws ApiException {
        animateImageWithHttpInfo(url, type);
    }

    /**
     * Animate Image
     * Returns URL of an animated GIF.
     * @param url URL of the company (required)
     * @param type URL of the company (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> animateImageWithHttpInfo(String url, String type) throws ApiException {
        okhttp3.Call localVarCall = animateImageValidateBeforeCall(url, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Animate Image (asynchronously)
     * Returns URL of an animated GIF.
     * @param url URL of the company (required)
     * @param type URL of the company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call animateImageAsync(String url, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = animateImageValidateBeforeCall(url, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoEmojify
     * @param text Text of the post (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoEmojifyCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/emoji/auto-emojify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoEmojifyValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling autoEmojify(Async)");
        }

        return autoEmojifyCall(text, _callback);

    }

    /**
     * Auto-Emojify
     * Returns text of the post with emoji added
     * @param text Text of the post (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void autoEmojify(String text) throws ApiException {
        autoEmojifyWithHttpInfo(text);
    }

    /**
     * Auto-Emojify
     * Returns text of the post with emoji added
     * @param text Text of the post (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoEmojifyWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = autoEmojifyValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Auto-Emojify (asynchronously)
     * Returns text of the post with emoji added
     * @param text Text of the post (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoEmojifyAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoEmojifyValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoHashtag
     * @param post Text of the post (required)
     * @param maxHashtags Max number of hashtags. (optional, default to 2)
     * @param hashtagPosition Position of hashtags: end &#x3D;&gt; at the end, auto &#x3D;&gt; anywhere (optional, default to auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoHashtagCall(String post, Integer maxHashtags, String hashtagPosition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stats/auto-hashtag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (post != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post", post));
        }

        if (maxHashtags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHashtags", maxHashtags));
        }

        if (hashtagPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hashtagPosition", hashtagPosition));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoHashtagValidateBeforeCall(String post, Integer maxHashtags, String hashtagPosition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'post' is set
        if (post == null) {
            throw new ApiException("Missing the required parameter 'post' when calling autoHashtag(Async)");
        }

        return autoHashtagCall(post, maxHashtags, hashtagPosition, _callback);

    }

    /**
     * Auto-Hashtag
     * Returns auto-hashtagged text of the post.
     * @param post Text of the post (required)
     * @param maxHashtags Max number of hashtags. (optional, default to 2)
     * @param hashtagPosition Position of hashtags: end &#x3D;&gt; at the end, auto &#x3D;&gt; anywhere (optional, default to auto)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void autoHashtag(String post, Integer maxHashtags, String hashtagPosition) throws ApiException {
        autoHashtagWithHttpInfo(post, maxHashtags, hashtagPosition);
    }

    /**
     * Auto-Hashtag
     * Returns auto-hashtagged text of the post.
     * @param post Text of the post (required)
     * @param maxHashtags Max number of hashtags. (optional, default to 2)
     * @param hashtagPosition Position of hashtags: end &#x3D;&gt; at the end, auto &#x3D;&gt; anywhere (optional, default to auto)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> autoHashtagWithHttpInfo(String post, Integer maxHashtags, String hashtagPosition) throws ApiException {
        okhttp3.Call localVarCall = autoHashtagValidateBeforeCall(post, maxHashtags, hashtagPosition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Auto-Hashtag (asynchronously)
     * Returns auto-hashtagged text of the post.
     * @param post Text of the post (required)
     * @param maxHashtags Max number of hashtags. (optional, default to 2)
     * @param hashtagPosition Position of hashtags: end &#x3D;&gt; at the end, auto &#x3D;&gt; anywhere (optional, default to auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoHashtagAsync(String post, Integer maxHashtags, String hashtagPosition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoHashtagValidateBeforeCall(post, maxHashtags, hashtagPosition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyLogo
     * @param domain URL of the company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyLogoCall(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/images/logo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyLogoValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling companyLogo(Async)");
        }

        return companyLogoCall(domain, _callback);

    }

    /**
     * Company Logo
     * Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.  Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side.
     * @param domain URL of the company (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void companyLogo(String domain) throws ApiException {
        companyLogoWithHttpInfo(domain);
    }

    /**
     * Company Logo
     * Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.  Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side.
     * @param domain URL of the company (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> companyLogoWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = companyLogoValidateBeforeCall(domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Company Logo (asynchronously)
     * Returns a company logo based on website domain. If the logo is not in our database yet, it will be extracted from the site on the fly. White logo background is automatically removed to make the logo look better on color backgrounds.  Note: It is not possible to access our company logo API publicly without authentication. If you wish to do so, you have to create proxy on your own server that calls our API from the server side.
     * @param domain URL of the company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyLogoAsync(String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyLogoValidateBeforeCall(domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for emojiSuggestions
     * @param text Text of the post (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emojiSuggestionsCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/emoji/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emojiSuggestionsValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling emojiSuggestions(Async)");
        }

        return emojiSuggestionsCall(text, _callback);

    }

    /**
     * Emoji Suggestions
     * Returns list of emoji suggestions for a given text of the post
     * @param text Text of the post (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void emojiSuggestions(String text) throws ApiException {
        emojiSuggestionsWithHttpInfo(text);
    }

    /**
     * Emoji Suggestions
     * Returns list of emoji suggestions for a given text of the post
     * @param text Text of the post (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> emojiSuggestionsWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = emojiSuggestionsValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Emoji Suggestions (asynchronously)
     * Returns list of emoji suggestions for a given text of the post
     * @param text Text of the post (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emojiSuggestionsAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = emojiSuggestionsValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hashtagHistory
     * @param hashtag Hashtag without # mark (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagHistoryCall(String hashtag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stats/history/{hashtag}"
            .replace("{" + "hashtag" + "}", localVarApiClient.escapeString(hashtag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashtagHistoryValidateBeforeCall(String hashtag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hashtag' is set
        if (hashtag == null) {
            throw new ApiException("Missing the required parameter 'hashtag' when calling hashtagHistory(Async)");
        }

        return hashtagHistoryCall(hashtag, _callback);

    }

    /**
     * Hashtag History
     * Returns historical stats for a given hashtag from the last 30 days
     * @param hashtag Hashtag without # mark (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void hashtagHistory(String hashtag) throws ApiException {
        hashtagHistoryWithHttpInfo(hashtag);
    }

    /**
     * Hashtag History
     * Returns historical stats for a given hashtag from the last 30 days
     * @param hashtag Hashtag without # mark (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hashtagHistoryWithHttpInfo(String hashtag) throws ApiException {
        okhttp3.Call localVarCall = hashtagHistoryValidateBeforeCall(hashtag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hashtag History (asynchronously)
     * Returns historical stats for a given hashtag from the last 30 days
     * @param hashtag Hashtag without # mark (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagHistoryAsync(String hashtag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hashtagHistoryValidateBeforeCall(hashtag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hashtagStats
     * @param tags Hashtag(s) without # mark (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagStatsCall(List<Object> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stats/multiple-hashtags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashtagStatsValidateBeforeCall(List<Object> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling hashtagStats(Async)");
        }

        return hashtagStatsCall(tags, _callback);

    }

    /**
     * Hashtag Stats
     * Returns real-time stats for up to 100 hashtags (updated hourly).
     * @param tags Hashtag(s) without # mark (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void hashtagStats(List<Object> tags) throws ApiException {
        hashtagStatsWithHttpInfo(tags);
    }

    /**
     * Hashtag Stats
     * Returns real-time stats for up to 100 hashtags (updated hourly).
     * @param tags Hashtag(s) without # mark (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hashtagStatsWithHttpInfo(List<Object> tags) throws ApiException {
        okhttp3.Call localVarCall = hashtagStatsValidateBeforeCall(tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hashtag Stats (asynchronously)
     * Returns real-time stats for up to 100 hashtags (updated hourly).
     * @param tags Hashtag(s) without # mark (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagStatsAsync(List<Object> tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hashtagStatsValidateBeforeCall(tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hashtagSuggestions
     * @param text Topic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagSuggestionsCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stats/hashtag-suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashtagSuggestionsValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling hashtagSuggestions(Async)");
        }

        return hashtagSuggestionsCall(text, _callback);

    }

    /**
     * Hashtag Suggestions
     * Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity.
     * @param text Topic (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void hashtagSuggestions(String text) throws ApiException {
        hashtagSuggestionsWithHttpInfo(text);
    }

    /**
     * Hashtag Suggestions
     * Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity.
     * @param text Topic (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hashtagSuggestionsWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = hashtagSuggestionsValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hashtag Suggestions (asynchronously)
     * Returns list of hashtag suggestions for a single-word topic or a shorter text up to 1000 characters. Takes into account both semantic relevancy and real-time hashtag popularity.
     * @param text Topic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagSuggestionsAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hashtagSuggestionsValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hashtagsCleaner
     * @param post post (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagsCleanerCall(String post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/instagram/hashtags-cleaner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (post != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post", post));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashtagsCleanerValidateBeforeCall(String post, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'post' is set
        if (post == null) {
            throw new ApiException("Missing the required parameter 'post' when calling hashtagsCleaner(Async)");
        }

        return hashtagsCleanerCall(post, _callback);

    }

    /**
     * Hashtags cleaner
     * Remove banned hashtags before posting to Instagram
     * @param post post (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void hashtagsCleaner(String post) throws ApiException {
        hashtagsCleanerWithHttpInfo(post);
    }

    /**
     * Hashtags cleaner
     * Remove banned hashtags before posting to Instagram
     * @param post post (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hashtagsCleanerWithHttpInfo(String post) throws ApiException {
        okhttp3.Call localVarCall = hashtagsCleanerValidateBeforeCall(post, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hashtags cleaner (asynchronously)
     * Remove banned hashtags before posting to Instagram
     * @param post post (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hashtagsCleanerAsync(String post, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hashtagsCleanerValidateBeforeCall(post, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOfCTAs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOfCTAsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/link/cta";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOfCTAsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listOfCTAsCall(_callback);

    }

    /**
     * List of CTAs
     * Returns list of available CTA for current user. Requires each user to authenticate with RiteKit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void listOfCTAs() throws ApiException {
        listOfCTAsWithHttpInfo();
    }

    /**
     * List of CTAs
     * Returns list of available CTA for current user. Requires each user to authenticate with RiteKit
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listOfCTAsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listOfCTAsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of CTAs (asynchronously)
     * Returns list of available CTA for current user. Requires each user to authenticate with RiteKit
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOfCTAsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOfCTAsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shortenLink
     * @param url URL (required)
     * @param cta cta id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortenLinkCall(String url, Integer cta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/link/short-link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (cta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cta", cta));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shortenLinkValidateBeforeCall(String url, Integer cta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling shortenLink(Async)");
        }

        // verify the required parameter 'cta' is set
        if (cta == null) {
            throw new ApiException("Missing the required parameter 'cta' when calling shortenLink(Async)");
        }

        return shortenLinkCall(url, cta, _callback);

    }

    /**
     * Shorten Link
     * Returns a shorten link with a given CTA.
     * @param url URL (required)
     * @param cta cta id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void shortenLink(String url, Integer cta) throws ApiException {
        shortenLinkWithHttpInfo(url, cta);
    }

    /**
     * Shorten Link
     * Returns a shorten link with a given CTA.
     * @param url URL (required)
     * @param cta cta id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> shortenLinkWithHttpInfo(String url, Integer cta) throws ApiException {
        okhttp3.Call localVarCall = shortenLinkValidateBeforeCall(url, cta, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Shorten Link (asynchronously)
     * Returns a shorten link with a given CTA.
     * @param url URL (required)
     * @param cta cta id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortenLinkAsync(String url, Integer cta, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = shortenLinkValidateBeforeCall(url, cta, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for textToImage
     * @param quote Text of the quote (required)
     * @param author Name of the author/source (required)
     * @param fontSize Font size for the quote (author font size is calculated automatically) (required)
     * @param quoteFont Font-family used for quote text (required)
     * @param quoteFontColor Font color of the quote text (required)
     * @param authorFont Font-family used for author name (required)
     * @param authorFontColor Font color of the author (required)
     * @param enableHighlight Enable highlight on quote text (required)
     * @param highlightColor Color used for highlight (required)
     * @param bgType Background type (gradient/solid) (required)
     * @param backgroundColor Background color for solid background type (required)
     * @param gradientType Type of gradient background (linear/radial) (required)
     * @param gradientColor1 First color for gradient background type (required)
     * @param gradientColor2 Second color for gradient background type (required)
     * @param brandLogo URL of the brand logo (required)
     * @param animation Animation type: none, rays, glint, circle (required)
     * @param showQuoteMark showing/hiding quote mark (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textToImageCall(String quote, String author, Integer fontSize, String quoteFont, String quoteFontColor, String authorFont, String authorFontColor, Integer enableHighlight, String highlightColor, String bgType, String backgroundColor, String gradientType, String gradientColor1, String gradientColor2, String brandLogo, String animation, Integer showQuoteMark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/images/quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quote", quote));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (fontSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fontSize", fontSize));
        }

        if (quoteFont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteFont", quoteFont));
        }

        if (quoteFontColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteFontColor", quoteFontColor));
        }

        if (authorFont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorFont", authorFont));
        }

        if (authorFontColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorFontColor", authorFontColor));
        }

        if (enableHighlight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableHighlight", enableHighlight));
        }

        if (highlightColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlightColor", highlightColor));
        }

        if (bgType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bgType", bgType));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (gradientType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gradientType", gradientType));
        }

        if (gradientColor1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gradientColor1", gradientColor1));
        }

        if (gradientColor2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gradientColor2", gradientColor2));
        }

        if (brandLogo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brandLogo", brandLogo));
        }

        if (animation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("animation", animation));
        }

        if (showQuoteMark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showQuoteMark", showQuoteMark));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textToImageValidateBeforeCall(String quote, String author, Integer fontSize, String quoteFont, String quoteFontColor, String authorFont, String authorFontColor, Integer enableHighlight, String highlightColor, String bgType, String backgroundColor, String gradientType, String gradientColor1, String gradientColor2, String brandLogo, String animation, Integer showQuoteMark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quote' is set
        if (quote == null) {
            throw new ApiException("Missing the required parameter 'quote' when calling textToImage(Async)");
        }

        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling textToImage(Async)");
        }

        // verify the required parameter 'fontSize' is set
        if (fontSize == null) {
            throw new ApiException("Missing the required parameter 'fontSize' when calling textToImage(Async)");
        }

        // verify the required parameter 'quoteFont' is set
        if (quoteFont == null) {
            throw new ApiException("Missing the required parameter 'quoteFont' when calling textToImage(Async)");
        }

        // verify the required parameter 'quoteFontColor' is set
        if (quoteFontColor == null) {
            throw new ApiException("Missing the required parameter 'quoteFontColor' when calling textToImage(Async)");
        }

        // verify the required parameter 'authorFont' is set
        if (authorFont == null) {
            throw new ApiException("Missing the required parameter 'authorFont' when calling textToImage(Async)");
        }

        // verify the required parameter 'authorFontColor' is set
        if (authorFontColor == null) {
            throw new ApiException("Missing the required parameter 'authorFontColor' when calling textToImage(Async)");
        }

        // verify the required parameter 'enableHighlight' is set
        if (enableHighlight == null) {
            throw new ApiException("Missing the required parameter 'enableHighlight' when calling textToImage(Async)");
        }

        // verify the required parameter 'highlightColor' is set
        if (highlightColor == null) {
            throw new ApiException("Missing the required parameter 'highlightColor' when calling textToImage(Async)");
        }

        // verify the required parameter 'bgType' is set
        if (bgType == null) {
            throw new ApiException("Missing the required parameter 'bgType' when calling textToImage(Async)");
        }

        // verify the required parameter 'backgroundColor' is set
        if (backgroundColor == null) {
            throw new ApiException("Missing the required parameter 'backgroundColor' when calling textToImage(Async)");
        }

        // verify the required parameter 'gradientType' is set
        if (gradientType == null) {
            throw new ApiException("Missing the required parameter 'gradientType' when calling textToImage(Async)");
        }

        // verify the required parameter 'gradientColor1' is set
        if (gradientColor1 == null) {
            throw new ApiException("Missing the required parameter 'gradientColor1' when calling textToImage(Async)");
        }

        // verify the required parameter 'gradientColor2' is set
        if (gradientColor2 == null) {
            throw new ApiException("Missing the required parameter 'gradientColor2' when calling textToImage(Async)");
        }

        // verify the required parameter 'brandLogo' is set
        if (brandLogo == null) {
            throw new ApiException("Missing the required parameter 'brandLogo' when calling textToImage(Async)");
        }

        // verify the required parameter 'animation' is set
        if (animation == null) {
            throw new ApiException("Missing the required parameter 'animation' when calling textToImage(Async)");
        }

        return textToImageCall(quote, author, fontSize, quoteFont, quoteFontColor, authorFont, authorFontColor, enableHighlight, highlightColor, bgType, backgroundColor, gradientType, gradientColor1, gradientColor2, brandLogo, animation, showQuoteMark, _callback);

    }

    /**
     * Text to Image
     * Returns URL of an image created from text according to given style parameters
     * @param quote Text of the quote (required)
     * @param author Name of the author/source (required)
     * @param fontSize Font size for the quote (author font size is calculated automatically) (required)
     * @param quoteFont Font-family used for quote text (required)
     * @param quoteFontColor Font color of the quote text (required)
     * @param authorFont Font-family used for author name (required)
     * @param authorFontColor Font color of the author (required)
     * @param enableHighlight Enable highlight on quote text (required)
     * @param highlightColor Color used for highlight (required)
     * @param bgType Background type (gradient/solid) (required)
     * @param backgroundColor Background color for solid background type (required)
     * @param gradientType Type of gradient background (linear/radial) (required)
     * @param gradientColor1 First color for gradient background type (required)
     * @param gradientColor2 Second color for gradient background type (required)
     * @param brandLogo URL of the brand logo (required)
     * @param animation Animation type: none, rays, glint, circle (required)
     * @param showQuoteMark showing/hiding quote mark (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void textToImage(String quote, String author, Integer fontSize, String quoteFont, String quoteFontColor, String authorFont, String authorFontColor, Integer enableHighlight, String highlightColor, String bgType, String backgroundColor, String gradientType, String gradientColor1, String gradientColor2, String brandLogo, String animation, Integer showQuoteMark) throws ApiException {
        textToImageWithHttpInfo(quote, author, fontSize, quoteFont, quoteFontColor, authorFont, authorFontColor, enableHighlight, highlightColor, bgType, backgroundColor, gradientType, gradientColor1, gradientColor2, brandLogo, animation, showQuoteMark);
    }

    /**
     * Text to Image
     * Returns URL of an image created from text according to given style parameters
     * @param quote Text of the quote (required)
     * @param author Name of the author/source (required)
     * @param fontSize Font size for the quote (author font size is calculated automatically) (required)
     * @param quoteFont Font-family used for quote text (required)
     * @param quoteFontColor Font color of the quote text (required)
     * @param authorFont Font-family used for author name (required)
     * @param authorFontColor Font color of the author (required)
     * @param enableHighlight Enable highlight on quote text (required)
     * @param highlightColor Color used for highlight (required)
     * @param bgType Background type (gradient/solid) (required)
     * @param backgroundColor Background color for solid background type (required)
     * @param gradientType Type of gradient background (linear/radial) (required)
     * @param gradientColor1 First color for gradient background type (required)
     * @param gradientColor2 Second color for gradient background type (required)
     * @param brandLogo URL of the brand logo (required)
     * @param animation Animation type: none, rays, glint, circle (required)
     * @param showQuoteMark showing/hiding quote mark (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> textToImageWithHttpInfo(String quote, String author, Integer fontSize, String quoteFont, String quoteFontColor, String authorFont, String authorFontColor, Integer enableHighlight, String highlightColor, String bgType, String backgroundColor, String gradientType, String gradientColor1, String gradientColor2, String brandLogo, String animation, Integer showQuoteMark) throws ApiException {
        okhttp3.Call localVarCall = textToImageValidateBeforeCall(quote, author, fontSize, quoteFont, quoteFontColor, authorFont, authorFontColor, enableHighlight, highlightColor, bgType, backgroundColor, gradientType, gradientColor1, gradientColor2, brandLogo, animation, showQuoteMark, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Text to Image (asynchronously)
     * Returns URL of an image created from text according to given style parameters
     * @param quote Text of the quote (required)
     * @param author Name of the author/source (required)
     * @param fontSize Font size for the quote (author font size is calculated automatically) (required)
     * @param quoteFont Font-family used for quote text (required)
     * @param quoteFontColor Font color of the quote text (required)
     * @param authorFont Font-family used for author name (required)
     * @param authorFontColor Font color of the author (required)
     * @param enableHighlight Enable highlight on quote text (required)
     * @param highlightColor Color used for highlight (required)
     * @param bgType Background type (gradient/solid) (required)
     * @param backgroundColor Background color for solid background type (required)
     * @param gradientType Type of gradient background (linear/radial) (required)
     * @param gradientColor1 First color for gradient background type (required)
     * @param gradientColor2 Second color for gradient background type (required)
     * @param brandLogo URL of the brand logo (required)
     * @param animation Animation type: none, rays, glint, circle (required)
     * @param showQuoteMark showing/hiding quote mark (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textToImageAsync(String quote, String author, Integer fontSize, String quoteFont, String quoteFontColor, String authorFont, String authorFontColor, Integer enableHighlight, String highlightColor, String bgType, String backgroundColor, String gradientType, String gradientColor1, String gradientColor2, String brandLogo, String animation, Integer showQuoteMark, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = textToImageValidateBeforeCall(quote, author, fontSize, quoteFont, quoteFontColor, authorFont, authorFontColor, enableHighlight, highlightColor, bgType, backgroundColor, gradientType, gradientColor1, gradientColor2, brandLogo, animation, showQuoteMark, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for trendingHashtags
     * @param green Restrict results only to green hashtags. Hides overused (red) hashtags. (optional, default to false)
     * @param latin Restrict results only to hashtags with latin characters (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trendingHashtagsCall(Boolean green, Boolean latin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/search/trending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (green != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("green", green));
        }

        if (latin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latin", latin));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trendingHashtagsValidateBeforeCall(Boolean green, Boolean latin, final ApiCallback _callback) throws ApiException {
        return trendingHashtagsCall(green, latin, _callback);

    }

    /**
     * Trending Hashtags
     * Returns list of hashtags currently trending on Twitter
     * @param green Restrict results only to green hashtags. Hides overused (red) hashtags. (optional, default to false)
     * @param latin Restrict results only to hashtags with latin characters (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void trendingHashtags(Boolean green, Boolean latin) throws ApiException {
        trendingHashtagsWithHttpInfo(green, latin);
    }

    /**
     * Trending Hashtags
     * Returns list of hashtags currently trending on Twitter
     * @param green Restrict results only to green hashtags. Hides overused (red) hashtags. (optional, default to false)
     * @param latin Restrict results only to hashtags with latin characters (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> trendingHashtagsWithHttpInfo(Boolean green, Boolean latin) throws ApiException {
        okhttp3.Call localVarCall = trendingHashtagsValidateBeforeCall(green, latin, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Trending Hashtags (asynchronously)
     * Returns list of hashtags currently trending on Twitter
     * @param green Restrict results only to green hashtags. Hides overused (red) hashtags. (optional, default to false)
     * @param latin Restrict results only to hashtags with latin characters (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trendingHashtagsAsync(Boolean green, Boolean latin, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trendingHashtagsValidateBeforeCall(green, latin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
