/**
 * RiteKit API
 * RiteKit API is based on REST principles.  Authentication uses standard OAuth 2.0 process  ##Getting started  1. Sign up for [RiteKit](https://ritekit.com/)  1. Go to [developer dashboard](https://ritekit.com/developer/dashboard/)  1. Click \"Create a token\" button to get your **Client ID** and **Client secret**  1. When you reach your free limit of calls per month, [upgrade to paid tiers](https://ritekit.com/developer/)  ## Options for authorizing API Calls  #### Using Client ID directly  You can directly connect to our API using your **client ID** by sending it as a GET query parameter. This option is simple (no need for oAuth) but it should be used only in case the Client ID is not exposed publicly.  GET  https://api.ritekit.com/v1/stats/multiple-hashtags?tags=php&client_id=292c6912e7710c838347ae178b4a
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    * @param[in]  type QString [required]
    */
    virtual void animate_Image(const QString &url, const QString &type);

    /**
    * @param[in]  text QString [required]
    */
    virtual void autoEmojify(const QString &text);

    /**
    * @param[in]  post QString [required]
    * @param[in]  max_hashtags qint32 [optional]
    * @param[in]  hashtag_position QString [optional]
    */
    virtual void autoHashtag(const QString &post, const ::OpenAPI::OptionalParam<qint32> &max_hashtags = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hashtag_position = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain QString [required]
    */
    virtual void company_Logo(const QString &domain);

    /**
    * @param[in]  text QString [required]
    */
    virtual void emoji_Suggestions(const QString &text);

    /**
    * @param[in]  hashtag QString [required]
    */
    virtual void hashtag_History(const QString &hashtag);

    /**
    * @param[in]  tags QList<QJsonValue> [required]
    */
    virtual void hashtag_Stats(const QList<QJsonValue> &tags);

    /**
    * @param[in]  text QString [required]
    */
    virtual void hashtag_Suggestions(const QString &text);

    /**
    * @param[in]  post QString [required]
    */
    virtual void hashtags_cleaner(const QString &post);


    virtual void list_of_CTAs();

    /**
    * @param[in]  url QString [required]
    * @param[in]  cta qint32 [required]
    */
    virtual void shorten_Link(const QString &url, const qint32 &cta);

    /**
    * @param[in]  quote QString [required]
    * @param[in]  author QString [required]
    * @param[in]  font_size qint32 [required]
    * @param[in]  quote_font QString [required]
    * @param[in]  quote_font_color QString [required]
    * @param[in]  author_font QString [required]
    * @param[in]  author_font_color QString [required]
    * @param[in]  enable_highlight qint32 [required]
    * @param[in]  highlight_color QString [required]
    * @param[in]  bg_type QString [required]
    * @param[in]  background_color QString [required]
    * @param[in]  gradient_type QString [required]
    * @param[in]  gradient_color1 QString [required]
    * @param[in]  gradient_color2 QString [required]
    * @param[in]  brand_logo QString [required]
    * @param[in]  animation QString [required]
    * @param[in]  show_quote_mark qint32 [optional]
    */
    virtual void text_to_Image(const QString &quote, const QString &author, const qint32 &font_size, const QString &quote_font, const QString &quote_font_color, const QString &author_font, const QString &author_font_color, const qint32 &enable_highlight, const QString &highlight_color, const QString &bg_type, const QString &background_color, const QString &gradient_type, const QString &gradient_color1, const QString &gradient_color2, const QString &brand_logo, const QString &animation, const ::OpenAPI::OptionalParam<qint32> &show_quote_mark = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  green bool [optional]
    * @param[in]  latin bool [optional]
    */
    virtual void trending_Hashtags(const ::OpenAPI::OptionalParam<bool> &green = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &latin = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void animate_ImageCallback(OAIHttpRequestWorker *worker);
    void autoEmojifyCallback(OAIHttpRequestWorker *worker);
    void autoHashtagCallback(OAIHttpRequestWorker *worker);
    void company_LogoCallback(OAIHttpRequestWorker *worker);
    void emoji_SuggestionsCallback(OAIHttpRequestWorker *worker);
    void hashtag_HistoryCallback(OAIHttpRequestWorker *worker);
    void hashtag_StatsCallback(OAIHttpRequestWorker *worker);
    void hashtag_SuggestionsCallback(OAIHttpRequestWorker *worker);
    void hashtags_cleanerCallback(OAIHttpRequestWorker *worker);
    void list_of_CTAsCallback(OAIHttpRequestWorker *worker);
    void shorten_LinkCallback(OAIHttpRequestWorker *worker);
    void text_to_ImageCallback(OAIHttpRequestWorker *worker);
    void trending_HashtagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void animate_ImageSignal();
    void autoEmojifySignal();
    void autoHashtagSignal();
    void company_LogoSignal();
    void emoji_SuggestionsSignal();
    void hashtag_HistorySignal();
    void hashtag_StatsSignal();
    void hashtag_SuggestionsSignal();
    void hashtags_cleanerSignal();
    void list_of_CTAsSignal();
    void shorten_LinkSignal();
    void text_to_ImageSignal();
    void trending_HashtagsSignal();


    void animate_ImageSignalFull(OAIHttpRequestWorker *worker);
    void autoEmojifySignalFull(OAIHttpRequestWorker *worker);
    void autoHashtagSignalFull(OAIHttpRequestWorker *worker);
    void company_LogoSignalFull(OAIHttpRequestWorker *worker);
    void emoji_SuggestionsSignalFull(OAIHttpRequestWorker *worker);
    void hashtag_HistorySignalFull(OAIHttpRequestWorker *worker);
    void hashtag_StatsSignalFull(OAIHttpRequestWorker *worker);
    void hashtag_SuggestionsSignalFull(OAIHttpRequestWorker *worker);
    void hashtags_cleanerSignalFull(OAIHttpRequestWorker *worker);
    void list_of_CTAsSignalFull(OAIHttpRequestWorker *worker);
    void shorten_LinkSignalFull(OAIHttpRequestWorker *worker);
    void text_to_ImageSignalFull(OAIHttpRequestWorker *worker);
    void trending_HashtagsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use animate_ImageSignalError() instead")
    void animate_ImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void animate_ImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoEmojifySignalError() instead")
    void autoEmojifySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoEmojifySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoHashtagSignalError() instead")
    void autoHashtagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoHashtagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use company_LogoSignalError() instead")
    void company_LogoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void company_LogoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emoji_SuggestionsSignalError() instead")
    void emoji_SuggestionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emoji_SuggestionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtag_HistorySignalError() instead")
    void hashtag_HistorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hashtag_HistorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtag_StatsSignalError() instead")
    void hashtag_StatsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hashtag_StatsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtag_SuggestionsSignalError() instead")
    void hashtag_SuggestionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hashtag_SuggestionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtags_cleanerSignalError() instead")
    void hashtags_cleanerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hashtags_cleanerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use list_of_CTAsSignalError() instead")
    void list_of_CTAsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void list_of_CTAsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shorten_LinkSignalError() instead")
    void shorten_LinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shorten_LinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use text_to_ImageSignalError() instead")
    void text_to_ImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void text_to_ImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trending_HashtagsSignalError() instead")
    void trending_HashtagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void trending_HashtagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use animate_ImageSignalErrorFull() instead")
    void animate_ImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void animate_ImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoEmojifySignalErrorFull() instead")
    void autoEmojifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoEmojifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoHashtagSignalErrorFull() instead")
    void autoHashtagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoHashtagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use company_LogoSignalErrorFull() instead")
    void company_LogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void company_LogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emoji_SuggestionsSignalErrorFull() instead")
    void emoji_SuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emoji_SuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtag_HistorySignalErrorFull() instead")
    void hashtag_HistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hashtag_HistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtag_StatsSignalErrorFull() instead")
    void hashtag_StatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hashtag_StatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtag_SuggestionsSignalErrorFull() instead")
    void hashtag_SuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hashtag_SuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hashtags_cleanerSignalErrorFull() instead")
    void hashtags_cleanerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hashtags_cleanerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use list_of_CTAsSignalErrorFull() instead")
    void list_of_CTAsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void list_of_CTAsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shorten_LinkSignalErrorFull() instead")
    void shorten_LinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shorten_LinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use text_to_ImageSignalErrorFull() instead")
    void text_to_ImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void text_to_ImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trending_HashtagsSignalErrorFull() instead")
    void trending_HashtagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trending_HashtagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
