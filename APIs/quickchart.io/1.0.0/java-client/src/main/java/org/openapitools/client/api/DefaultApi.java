/*
 * QuickChart API
 * An API to generate charts and QR codes using QuickChart services.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChartPostRequest;
import java.io.File;
import org.openapitools.client.model.QrPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for chartGet
     * @param chart The chart configuration in Chart.js format (JSON or Javascript). (optional)
     * @param width The width of the chart in pixels. (optional)
     * @param height The height of the chart in pixels. (optional)
     * @param format The output format of the chart, &#39;png&#39;, &#39;jpg&#39;, &#39;svg&#39;, or &#39;webp&#39;. (optional)
     * @param backgroundColor The background color of the chart. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chartGetCall(String chart, Integer width, Integer height, String format, String backgroundColor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chart", chart));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        final String[] localVarAccepts = {
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "image/webp"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chartGetValidateBeforeCall(String chart, Integer width, Integer height, String format, String backgroundColor, final ApiCallback _callback) throws ApiException {
        return chartGetCall(chart, width, height, format, backgroundColor, _callback);

    }

    /**
     * Generate a chart (GET)
     * Generate a chart based on the provided parameters.
     * @param chart The chart configuration in Chart.js format (JSON or Javascript). (optional)
     * @param width The width of the chart in pixels. (optional)
     * @param height The height of the chart in pixels. (optional)
     * @param format The output format of the chart, &#39;png&#39;, &#39;jpg&#39;, &#39;svg&#39;, or &#39;webp&#39;. (optional)
     * @param backgroundColor The background color of the chart. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public File chartGet(String chart, Integer width, Integer height, String format, String backgroundColor) throws ApiException {
        ApiResponse<File> localVarResp = chartGetWithHttpInfo(chart, width, height, format, backgroundColor);
        return localVarResp.getData();
    }

    /**
     * Generate a chart (GET)
     * Generate a chart based on the provided parameters.
     * @param chart The chart configuration in Chart.js format (JSON or Javascript). (optional)
     * @param width The width of the chart in pixels. (optional)
     * @param height The height of the chart in pixels. (optional)
     * @param format The output format of the chart, &#39;png&#39;, &#39;jpg&#39;, &#39;svg&#39;, or &#39;webp&#39;. (optional)
     * @param backgroundColor The background color of the chart. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> chartGetWithHttpInfo(String chart, Integer width, Integer height, String format, String backgroundColor) throws ApiException {
        okhttp3.Call localVarCall = chartGetValidateBeforeCall(chart, width, height, format, backgroundColor, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a chart (GET) (asynchronously)
     * Generate a chart based on the provided parameters.
     * @param chart The chart configuration in Chart.js format (JSON or Javascript). (optional)
     * @param width The width of the chart in pixels. (optional)
     * @param height The height of the chart in pixels. (optional)
     * @param format The output format of the chart, &#39;png&#39;, &#39;jpg&#39;, &#39;svg&#39;, or &#39;webp&#39;. (optional)
     * @param backgroundColor The background color of the chart. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chartGetAsync(String chart, Integer width, Integer height, String format, String backgroundColor, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = chartGetValidateBeforeCall(chart, width, height, format, backgroundColor, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chartPost
     * @param chartPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chartPostCall(ChartPostRequest chartPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chartPostRequest;

        // create path and map variables
        String localVarPath = "/chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/jpeg",
            "image/png",
            "image/svg+xml",
            "image/webp"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chartPostValidateBeforeCall(ChartPostRequest chartPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chartPostRequest' is set
        if (chartPostRequest == null) {
            throw new ApiException("Missing the required parameter 'chartPostRequest' when calling chartPost(Async)");
        }

        return chartPostCall(chartPostRequest, _callback);

    }

    /**
     * Generate a chart (POST)
     * Generate a chart based on the provided configuration in the request body.
     * @param chartPostRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public File chartPost(ChartPostRequest chartPostRequest) throws ApiException {
        ApiResponse<File> localVarResp = chartPostWithHttpInfo(chartPostRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a chart (POST)
     * Generate a chart based on the provided configuration in the request body.
     * @param chartPostRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> chartPostWithHttpInfo(ChartPostRequest chartPostRequest) throws ApiException {
        okhttp3.Call localVarCall = chartPostValidateBeforeCall(chartPostRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a chart (POST) (asynchronously)
     * Generate a chart based on the provided configuration in the request body.
     * @param chartPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated chart image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chartPostAsync(ChartPostRequest chartPostRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = chartPostValidateBeforeCall(chartPostRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrGet
     * @param text The text to be encoded in the QR code. (optional)
     * @param width The width of the QR code in pixels. (optional)
     * @param height The height of the QR code in pixels. (optional)
     * @param format The output format of the QR code, e.g., &#39;png&#39; or &#39;svg&#39;. (optional)
     * @param margin The margin around the QR code in pixels. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrGetCall(String text, Integer width, Integer height, String format, Integer margin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (margin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("margin", margin));
        }

        final String[] localVarAccepts = {
            "image/png",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrGetValidateBeforeCall(String text, Integer width, Integer height, String format, Integer margin, final ApiCallback _callback) throws ApiException {
        return qrGetCall(text, width, height, format, margin, _callback);

    }

    /**
     * Generate a QR code (GET)
     * Generate a QR code based on the provided parameters.
     * @param text The text to be encoded in the QR code. (optional)
     * @param width The width of the QR code in pixels. (optional)
     * @param height The height of the QR code in pixels. (optional)
     * @param format The output format of the QR code, e.g., &#39;png&#39; or &#39;svg&#39;. (optional)
     * @param margin The margin around the QR code in pixels. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public File qrGet(String text, Integer width, Integer height, String format, Integer margin) throws ApiException {
        ApiResponse<File> localVarResp = qrGetWithHttpInfo(text, width, height, format, margin);
        return localVarResp.getData();
    }

    /**
     * Generate a QR code (GET)
     * Generate a QR code based on the provided parameters.
     * @param text The text to be encoded in the QR code. (optional)
     * @param width The width of the QR code in pixels. (optional)
     * @param height The height of the QR code in pixels. (optional)
     * @param format The output format of the QR code, e.g., &#39;png&#39; or &#39;svg&#39;. (optional)
     * @param margin The margin around the QR code in pixels. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> qrGetWithHttpInfo(String text, Integer width, Integer height, String format, Integer margin) throws ApiException {
        okhttp3.Call localVarCall = qrGetValidateBeforeCall(text, width, height, format, margin, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a QR code (GET) (asynchronously)
     * Generate a QR code based on the provided parameters.
     * @param text The text to be encoded in the QR code. (optional)
     * @param width The width of the QR code in pixels. (optional)
     * @param height The height of the QR code in pixels. (optional)
     * @param format The output format of the QR code, e.g., &#39;png&#39; or &#39;svg&#39;. (optional)
     * @param margin The margin around the QR code in pixels. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrGetAsync(String text, Integer width, Integer height, String format, Integer margin, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrGetValidateBeforeCall(text, width, height, format, margin, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrPost
     * @param qrPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrPostCall(QrPostRequest qrPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qrPostRequest;

        // create path and map variables
        String localVarPath = "/qr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrPostValidateBeforeCall(QrPostRequest qrPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qrPostRequest' is set
        if (qrPostRequest == null) {
            throw new ApiException("Missing the required parameter 'qrPostRequest' when calling qrPost(Async)");
        }

        return qrPostCall(qrPostRequest, _callback);

    }

    /**
     * Generate a QR code (POST)
     * Generate a QR code based on the provided configuration in the request body.
     * @param qrPostRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public File qrPost(QrPostRequest qrPostRequest) throws ApiException {
        ApiResponse<File> localVarResp = qrPostWithHttpInfo(qrPostRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a QR code (POST)
     * Generate a QR code based on the provided configuration in the request body.
     * @param qrPostRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> qrPostWithHttpInfo(QrPostRequest qrPostRequest) throws ApiException {
        okhttp3.Call localVarCall = qrPostValidateBeforeCall(qrPostRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a QR code (POST) (asynchronously)
     * Generate a QR code based on the provided configuration in the request body.
     * @param qrPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A generated QR code image. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrPostAsync(QrPostRequest qrPostRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrPostValidateBeforeCall(qrPostRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
