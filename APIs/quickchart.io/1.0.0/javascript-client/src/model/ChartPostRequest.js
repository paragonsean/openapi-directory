/**
 * QuickChart API
 * An API to generate charts and QR codes using QuickChart services.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChartPostRequest model module.
 * @module model/ChartPostRequest
 * @version 1.0.0
 */
class ChartPostRequest {
    /**
     * Constructs a new <code>ChartPostRequest</code>.
     * @alias module:model/ChartPostRequest
     */
    constructor() { 
        
        ChartPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartPostRequest} obj Optional instance to populate.
     * @return {module:model/ChartPostRequest} The populated <code>ChartPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartPostRequest();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('chart')) {
                obj['chart'] = ApiClient.convertToType(data['chart'], Object);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
            throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }

        return true;
    }


}



/**
 * The background color of the chart.
 * @member {String} backgroundColor
 */
ChartPostRequest.prototype['backgroundColor'] = undefined;

/**
 * The chart configuration in Chart.js format (JSON or Javascript).
 * @member {Object} chart
 */
ChartPostRequest.prototype['chart'] = undefined;

/**
 * The output format of the chart, 'png', 'jpg', 'svg', or 'webp'.
 * @member {String} format
 */
ChartPostRequest.prototype['format'] = undefined;

/**
 * The height of the chart in pixels.
 * @member {Number} height
 */
ChartPostRequest.prototype['height'] = undefined;

/**
 * The width of the chart in pixels.
 * @member {Number} width
 */
ChartPostRequest.prototype['width'] = undefined;






export default ChartPostRequest;

