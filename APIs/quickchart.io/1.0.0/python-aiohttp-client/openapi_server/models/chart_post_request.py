# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str=None, chart: object=None, format: str=None, height: int=None, width: int=None):
        """ChartPostRequest - a model defined in OpenAPI

        :param background_color: The background_color of this ChartPostRequest.
        :param chart: The chart of this ChartPostRequest.
        :param format: The format of this ChartPostRequest.
        :param height: The height of this ChartPostRequest.
        :param width: The width of this ChartPostRequest.
        """
        self.openapi_types = {
            'background_color': str,
            'chart': object,
            'format': str,
            'height': int,
            'width': int
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'chart': 'chart',
            'format': 'format',
            'height': 'height',
            'width': 'width'
        }

        self._background_color = background_color
        self._chart = chart
        self._format = format
        self._height = height
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _chart_post_request of this ChartPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this ChartPostRequest.

        The background color of the chart.

        :return: The background_color of this ChartPostRequest.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this ChartPostRequest.

        The background color of the chart.

        :param background_color: The background_color of this ChartPostRequest.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def chart(self):
        """Gets the chart of this ChartPostRequest.

        The chart configuration in Chart.js format (JSON or Javascript).

        :return: The chart of this ChartPostRequest.
        :rtype: object
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this ChartPostRequest.

        The chart configuration in Chart.js format (JSON or Javascript).

        :param chart: The chart of this ChartPostRequest.
        :type chart: object
        """

        self._chart = chart

    @property
    def format(self):
        """Gets the format of this ChartPostRequest.

        The output format of the chart, 'png', 'jpg', 'svg', or 'webp'.

        :return: The format of this ChartPostRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ChartPostRequest.

        The output format of the chart, 'png', 'jpg', 'svg', or 'webp'.

        :param format: The format of this ChartPostRequest.
        :type format: str
        """

        self._format = format

    @property
    def height(self):
        """Gets the height of this ChartPostRequest.

        The height of the chart in pixels.

        :return: The height of this ChartPostRequest.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ChartPostRequest.

        The height of the chart in pixels.

        :param height: The height of this ChartPostRequest.
        :type height: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this ChartPostRequest.

        The width of the chart in pixels.

        :return: The width of this ChartPostRequest.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ChartPostRequest.

        The width of the chart in pixels.

        :param width: The width of this ChartPostRequest.
        :type width: int
        """

        self._width = width
