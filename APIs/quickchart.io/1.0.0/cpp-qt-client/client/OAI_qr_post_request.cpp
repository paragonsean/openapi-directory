/**
 * QuickChart API
 * An API to generate charts and QR codes using QuickChart services.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_qr_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_qr_post_request::OAI_qr_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_qr_post_request::OAI_qr_post_request() {
    this->initializeModel();
}

OAI_qr_post_request::~OAI_qr_post_request() {}

void OAI_qr_post_request::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_margin_isSet = false;
    m_margin_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAI_qr_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_qr_post_request::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_margin_isValid = ::OpenAPI::fromJsonValue(m_margin, json[QString("margin")]);
    m_margin_isSet = !json[QString("margin")].isNull() && m_margin_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAI_qr_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_qr_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_margin_isSet) {
        obj.insert(QString("margin"), ::OpenAPI::toJsonValue(m_margin));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAI_qr_post_request::getFormat() const {
    return m_format;
}
void OAI_qr_post_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAI_qr_post_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAI_qr_post_request::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAI_qr_post_request::getHeight() const {
    return m_height;
}
void OAI_qr_post_request::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAI_qr_post_request::is_height_Set() const{
    return m_height_isSet;
}

bool OAI_qr_post_request::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAI_qr_post_request::getMargin() const {
    return m_margin;
}
void OAI_qr_post_request::setMargin(const qint32 &margin) {
    m_margin = margin;
    m_margin_isSet = true;
}

bool OAI_qr_post_request::is_margin_Set() const{
    return m_margin_isSet;
}

bool OAI_qr_post_request::is_margin_Valid() const{
    return m_margin_isValid;
}

QString OAI_qr_post_request::getText() const {
    return m_text;
}
void OAI_qr_post_request::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAI_qr_post_request::is_text_Set() const{
    return m_text_isSet;
}

bool OAI_qr_post_request::is_text_Valid() const{
    return m_text_isValid;
}

qint32 OAI_qr_post_request::getWidth() const {
    return m_width;
}
void OAI_qr_post_request::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAI_qr_post_request::is_width_Set() const{
    return m_width_isSet;
}

bool OAI_qr_post_request::is_width_Valid() const{
    return m_width_isValid;
}

bool OAI_qr_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_qr_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
