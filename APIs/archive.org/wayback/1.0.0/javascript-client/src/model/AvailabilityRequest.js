/**
 * Wayback API
 * API for Internet Archive's Wayback Machine
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailabilityRequest model module.
 * @module model/AvailabilityRequest
 * @version 1.0.0
 */
class AvailabilityRequest {
    /**
     * Constructs a new <code>AvailabilityRequest</code>.
     * @alias module:model/AvailabilityRequest
     * @param url {String} The URL requested
     */
    constructor(url) { 
        
        AvailabilityRequest.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>AvailabilityRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityRequest} obj Optional instance to populate.
     * @return {module:model/AvailabilityRequest} The populated <code>AvailabilityRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityRequest();

            if (data.hasOwnProperty('closest')) {
                obj['closest'] = ApiClient.convertToType(data['closest'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailabilityRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['closest'] && !(typeof data['closest'] === 'string' || data['closest'] instanceof String)) {
            throw new Error("Expected the field `closest` to be a primitive type in the JSON string but got " + data['closest']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

AvailabilityRequest.RequiredProperties = ["url"];

/**
 * The direction to find the closest snapshot to the requested timestamp
 * @member {module:model/AvailabilityRequest.ClosestEnum} closest
 */
AvailabilityRequest.prototype['closest'] = undefined;

/**
 * A user-supplied tag, used for collation
 * @member {String} tag
 */
AvailabilityRequest.prototype['tag'] = undefined;

/**
 * Timestamp requested in ISO 8601 format. The following formats are acceptable: - YYYY - YYYY-MM - YYYY-MM-DD - YYYY-MM-DDTHH:mm:SSz - YYYY-MM-DD:HH:mm+00:00 
 * @member {String} timestamp
 */
AvailabilityRequest.prototype['timestamp'] = undefined;

/**
 * The URL requested
 * @member {String} url
 */
AvailabilityRequest.prototype['url'] = undefined;





/**
 * Allowed values for the <code>closest</code> property.
 * @enum {String}
 * @readonly
 */
AvailabilityRequest['ClosestEnum'] = {

    /**
     * value: "either"
     * @const
     */
    "either": "either",

    /**
     * value: "after"
     * @const
     */
    "after": "after",

    /**
     * value: "before"
     * @const
     */
    "before": "before"
};



export default AvailabilityRequest;

