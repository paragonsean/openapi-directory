/**
 * Wayback API
 * API for Internet Archive's Wayback Machine
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityRequest::OAIAvailabilityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityRequest::OAIAvailabilityRequest() {
    this->initializeModel();
}

OAIAvailabilityRequest::~OAIAvailabilityRequest() {}

void OAIAvailabilityRequest::initializeModel() {

    m_closest_isSet = false;
    m_closest_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAvailabilityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityRequest::fromJsonObject(QJsonObject json) {

    m_closest_isValid = ::OpenAPI::fromJsonValue(m_closest, json[QString("closest")]);
    m_closest_isSet = !json[QString("closest")].isNull() && m_closest_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAvailabilityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_closest_isSet) {
        obj.insert(QString("closest"), ::OpenAPI::toJsonValue(m_closest));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAvailabilityRequest::getClosest() const {
    return m_closest;
}
void OAIAvailabilityRequest::setClosest(const QString &closest) {
    m_closest = closest;
    m_closest_isSet = true;
}

bool OAIAvailabilityRequest::is_closest_Set() const{
    return m_closest_isSet;
}

bool OAIAvailabilityRequest::is_closest_Valid() const{
    return m_closest_isValid;
}

QString OAIAvailabilityRequest::getTag() const {
    return m_tag;
}
void OAIAvailabilityRequest::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIAvailabilityRequest::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIAvailabilityRequest::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIAvailabilityRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIAvailabilityRequest::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAvailabilityRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAvailabilityRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIAvailabilityRequest::getUrl() const {
    return m_url;
}
void OAIAvailabilityRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAvailabilityRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAvailabilityRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAvailabilityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
