# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot import Snapshot
from openapi_server import util


class ArchivedResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot: Snapshot=None, tag: str=None, timestamp: str=None, url: str=None):
        """ArchivedResult - a model defined in OpenAPI

        :param snapshot: The snapshot of this ArchivedResult.
        :param tag: The tag of this ArchivedResult.
        :param timestamp: The timestamp of this ArchivedResult.
        :param url: The url of this ArchivedResult.
        """
        self.openapi_types = {
            'snapshot': Snapshot,
            'tag': str,
            'timestamp': str,
            'url': str
        }

        self.attribute_map = {
            'snapshot': 'snapshot',
            'tag': 'tag',
            'timestamp': 'timestamp',
            'url': 'url'
        }

        self._snapshot = snapshot
        self._tag = tag
        self._timestamp = timestamp
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchivedResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchivedResult of this ArchivedResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot(self):
        """Gets the snapshot of this ArchivedResult.


        :return: The snapshot of this ArchivedResult.
        :rtype: Snapshot
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this ArchivedResult.


        :param snapshot: The snapshot of this ArchivedResult.
        :type snapshot: Snapshot
        """
        if snapshot is None:
            raise ValueError("Invalid value for `snapshot`, must not be `None`")

        self._snapshot = snapshot

    @property
    def tag(self):
        """Gets the tag of this ArchivedResult.

        The user-supplied tag for use in collation

        :return: The tag of this ArchivedResult.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ArchivedResult.

        The user-supplied tag for use in collation

        :param tag: The tag of this ArchivedResult.
        :type tag: str
        """

        self._tag = tag

    @property
    def timestamp(self):
        """Gets the timestamp of this ArchivedResult.

        The _intepreted_ timestamp requested, in [RFC 3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html) format

        :return: The timestamp of this ArchivedResult.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ArchivedResult.

        The _intepreted_ timestamp requested, in [RFC 3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html) format

        :param timestamp: The timestamp of this ArchivedResult.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def url(self):
        """Gets the url of this ArchivedResult.

        The URL requested

        :return: The url of this ArchivedResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArchivedResult.

        The URL requested

        :param url: The url of this ArchivedResult.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
