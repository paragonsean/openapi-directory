# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archived_result import ArchivedResult
from openapi_server import util


class AvailabilityResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results: List[ArchivedResult]=None):
        """AvailabilityResults - a model defined in OpenAPI

        :param results: The results of this AvailabilityResults.
        """
        self.openapi_types = {
            'results': List[ArchivedResult]
        }

        self.attribute_map = {
            'results': 'results'
        }

        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailabilityResults of this AvailabilityResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self):
        """Gets the results of this AvailabilityResults.

        A list of results

        :return: The results of this AvailabilityResults.
        :rtype: List[ArchivedResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AvailabilityResults.

        A list of results

        :param results: The results of this AvailabilityResults.
        :type results: List[ArchivedResult]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results
