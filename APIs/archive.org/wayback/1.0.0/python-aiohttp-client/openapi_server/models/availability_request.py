# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closest: str=None, tag: str=None, timestamp: str=None, url: str=None):
        """AvailabilityRequest - a model defined in OpenAPI

        :param closest: The closest of this AvailabilityRequest.
        :param tag: The tag of this AvailabilityRequest.
        :param timestamp: The timestamp of this AvailabilityRequest.
        :param url: The url of this AvailabilityRequest.
        """
        self.openapi_types = {
            'closest': str,
            'tag': str,
            'timestamp': str,
            'url': str
        }

        self.attribute_map = {
            'closest': 'closest',
            'tag': 'tag',
            'timestamp': 'timestamp',
            'url': 'url'
        }

        self._closest = closest
        self._tag = tag
        self._timestamp = timestamp
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailabilityRequest of this AvailabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closest(self):
        """Gets the closest of this AvailabilityRequest.

        The direction to find the closest snapshot to the requested timestamp

        :return: The closest of this AvailabilityRequest.
        :rtype: str
        """
        return self._closest

    @closest.setter
    def closest(self, closest):
        """Sets the closest of this AvailabilityRequest.

        The direction to find the closest snapshot to the requested timestamp

        :param closest: The closest of this AvailabilityRequest.
        :type closest: str
        """
        allowed_values = ["either", "after", "before"]  # noqa: E501
        if closest not in allowed_values:
            raise ValueError(
                "Invalid value for `closest` ({0}), must be one of {1}"
                .format(closest, allowed_values)
            )

        self._closest = closest

    @property
    def tag(self):
        """Gets the tag of this AvailabilityRequest.

        A user-supplied tag, used for collation

        :return: The tag of this AvailabilityRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AvailabilityRequest.

        A user-supplied tag, used for collation

        :param tag: The tag of this AvailabilityRequest.
        :type tag: str
        """

        self._tag = tag

    @property
    def timestamp(self):
        """Gets the timestamp of this AvailabilityRequest.

        Timestamp requested in ISO 8601 format. The following formats are acceptable: - YYYY - YYYY-MM - YYYY-MM-DD - YYYY-MM-DDTHH:mm:SSz - YYYY-MM-DD:HH:mm+00:00 

        :return: The timestamp of this AvailabilityRequest.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AvailabilityRequest.

        Timestamp requested in ISO 8601 format. The following formats are acceptable: - YYYY - YYYY-MM - YYYY-MM-DD - YYYY-MM-DDTHH:mm:SSz - YYYY-MM-DD:HH:mm+00:00 

        :param timestamp: The timestamp of this AvailabilityRequest.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def url(self):
        """Gets the url of this AvailabilityRequest.

        The URL requested

        :return: The url of this AvailabilityRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AvailabilityRequest.

        The URL requested

        :param url: The url of this AvailabilityRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
