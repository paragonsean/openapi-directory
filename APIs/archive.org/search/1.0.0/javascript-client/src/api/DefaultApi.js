/**
 * Search Services
 * API for Internet Archive's Search-related services 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import OrganicResult from '../model/OrganicResult';
import ScrapeResult from '../model/ScrapeResult';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchV1FieldsGet operation.
     * @callback module:api/DefaultApi~searchV1FieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fields that can be requested
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.
     * @param {module:api/DefaultApi~searchV1FieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    searchV1FieldsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/search/v1/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchV1OrganicGet operation.
     * @callback module:api/DefaultApi~searchV1OrganicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganicResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return relevance-based results from search queries 
     * @param {Object} opts Optional parameters
     * @param {String} [q] Lucene-type search query
     * @param {String} [field = 'identifier')] Metadata field
     * @param {Number} [size = 1000)] Number of query results to return
     * @param {Boolean} [totalOnly = false)] Request total only; do not return hits
     * @param {String} [callback] Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.
     * @param {module:api/DefaultApi~searchV1OrganicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganicResult}
     */
    searchV1OrganicGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'field': opts['field'],
        'size': opts['size'],
        'total_only': opts['totalOnly'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json'];
      let returnType = OrganicResult;
      return this.apiClient.callApi(
        '/search/v1/organic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchV1ScrapeGet operation.
     * @callback module:api/DefaultApi~searchV1ScrapeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScrapeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scrape search results from Internet Archive, allowing a scrolling cursor 
     * @param {Object} opts Optional parameters
     * @param {String} [q] Lucene-type search query
     * @param {String} [field = 'identifier')] Metadata field
     * @param {String} [sort] sort collations
     * @param {Number} [size = 1000)] Number of query results to return
     * @param {String} [cursor] Cursor for scrolling (used for subsequent calls)
     * @param {Boolean} [totalOnly = false)] Request total only; do not return hits
     * @param {String} [callback] Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.
     * @param {module:api/DefaultApi~searchV1ScrapeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScrapeResult}
     */
    searchV1ScrapeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'field': opts['field'],
        'sort': opts['sort'],
        'size': opts['size'],
        'cursor': opts['cursor'],
        'total_only': opts['totalOnly'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/javascript', 'application/json'];
      let returnType = ScrapeResult;
      return this.apiClient.callApi(
        '/search/v1/scrape', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
