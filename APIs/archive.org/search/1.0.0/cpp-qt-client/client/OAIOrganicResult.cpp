/**
 * Search Services
 * API for Internet Archive's Search-related services 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganicResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganicResult::OAIOrganicResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganicResult::OAIOrganicResult() {
    this->initializeModel();
}

OAIOrganicResult::~OAIOrganicResult() {}

void OAIOrganicResult::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIOrganicResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganicResult::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIOrganicResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganicResult::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIOrganicResult::getCount() const {
    return m_count;
}
void OAIOrganicResult::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIOrganicResult::is_count_Set() const{
    return m_count_isSet;
}

bool OAIOrganicResult::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIObject> OAIOrganicResult::getItems() const {
    return m_items;
}
void OAIOrganicResult::setItems(const QList<OAIObject> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrganicResult::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrganicResult::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIOrganicResult::getTotal() const {
    return m_total;
}
void OAIOrganicResult::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOrganicResult::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrganicResult::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIOrganicResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganicResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
