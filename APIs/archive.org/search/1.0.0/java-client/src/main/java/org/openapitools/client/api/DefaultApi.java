/*
 * Search Services
 * API for Internet Archive's Search-related services 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.OrganicResult;
import org.openapitools.client.model.ScrapeResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchV1FieldsGet
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields that can be requested </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV1FieldsGetCall(String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchV1FieldsGetValidateBeforeCall(String paramCallback, final ApiCallback _callback) throws ApiException {
        return searchV1FieldsGetCall(paramCallback, _callback);

    }

    /**
     * 
     * Fields that can be requested
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields that can be requested </td><td>  -  </td></tr>
     </table>
     */
    public List<String> searchV1FieldsGet(String paramCallback) throws ApiException {
        ApiResponse<List<String>> localVarResp = searchV1FieldsGetWithHttpInfo(paramCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Fields that can be requested
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields that can be requested </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> searchV1FieldsGetWithHttpInfo(String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = searchV1FieldsGetValidateBeforeCall(paramCallback, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fields that can be requested
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fields that can be requested </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV1FieldsGetAsync(String paramCallback, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchV1FieldsGetValidateBeforeCall(paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchV1OrganicGet
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param size Number of query results to return (optional, default to 1000)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organic Search API. Returns results in descending relevance order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV1OrganicGetCall(String q, String field, Integer size, Boolean totalOnly, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/organic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (totalOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_only", totalOnly));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchV1OrganicGetValidateBeforeCall(String q, String field, Integer size, Boolean totalOnly, String paramCallback, final ApiCallback _callback) throws ApiException {
        return searchV1OrganicGetCall(q, field, size, totalOnly, paramCallback, _callback);

    }

    /**
     * 
     * Return relevance-based results from search queries 
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param size Number of query results to return (optional, default to 1000)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @return OrganicResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organic Search API. Returns results in descending relevance order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public OrganicResult searchV1OrganicGet(String q, String field, Integer size, Boolean totalOnly, String paramCallback) throws ApiException {
        ApiResponse<OrganicResult> localVarResp = searchV1OrganicGetWithHttpInfo(q, field, size, totalOnly, paramCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Return relevance-based results from search queries 
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param size Number of query results to return (optional, default to 1000)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @return ApiResponse&lt;OrganicResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organic Search API. Returns results in descending relevance order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganicResult> searchV1OrganicGetWithHttpInfo(String q, String field, Integer size, Boolean totalOnly, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = searchV1OrganicGetValidateBeforeCall(q, field, size, totalOnly, paramCallback, null);
        Type localVarReturnType = new TypeToken<OrganicResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return relevance-based results from search queries 
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param size Number of query results to return (optional, default to 1000)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organic Search API. Returns results in descending relevance order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV1OrganicGetAsync(String q, String field, Integer size, Boolean totalOnly, String paramCallback, final ApiCallback<OrganicResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchV1OrganicGetValidateBeforeCall(q, field, size, totalOnly, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<OrganicResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchV1ScrapeGet
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param sort sort collations (optional)
     * @param size Number of query results to return (optional, default to 1000)
     * @param cursor Cursor for scrolling (used for subsequent calls) (optional)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scaping API </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV1ScrapeGetCall(String q, String field, String sort, Integer size, String cursor, Boolean totalOnly, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/scrape";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (totalOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_only", totalOnly));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/javascript",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchV1ScrapeGetValidateBeforeCall(String q, String field, String sort, Integer size, String cursor, Boolean totalOnly, String paramCallback, final ApiCallback _callback) throws ApiException {
        return searchV1ScrapeGetCall(q, field, sort, size, cursor, totalOnly, paramCallback, _callback);

    }

    /**
     * 
     * Scrape search results from Internet Archive, allowing a scrolling cursor 
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param sort sort collations (optional)
     * @param size Number of query results to return (optional, default to 1000)
     * @param cursor Cursor for scrolling (used for subsequent calls) (optional)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @return ScrapeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scaping API </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ScrapeResult searchV1ScrapeGet(String q, String field, String sort, Integer size, String cursor, Boolean totalOnly, String paramCallback) throws ApiException {
        ApiResponse<ScrapeResult> localVarResp = searchV1ScrapeGetWithHttpInfo(q, field, sort, size, cursor, totalOnly, paramCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Scrape search results from Internet Archive, allowing a scrolling cursor 
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param sort sort collations (optional)
     * @param size Number of query results to return (optional, default to 1000)
     * @param cursor Cursor for scrolling (used for subsequent calls) (optional)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @return ApiResponse&lt;ScrapeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scaping API </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScrapeResult> searchV1ScrapeGetWithHttpInfo(String q, String field, String sort, Integer size, String cursor, Boolean totalOnly, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = searchV1ScrapeGetValidateBeforeCall(q, field, sort, size, cursor, totalOnly, paramCallback, null);
        Type localVarReturnType = new TypeToken<ScrapeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Scrape search results from Internet Archive, allowing a scrolling cursor 
     * @param q Lucene-type search query (optional)
     * @param field Metadata field (optional, default to identifier)
     * @param sort sort collations (optional)
     * @param size Number of query results to return (optional, default to 1000)
     * @param cursor Cursor for scrolling (used for subsequent calls) (optional)
     * @param totalOnly Request total only; do not return hits (optional, default to false)
     * @param paramCallback Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as &#x60;callback(data)&#x60;, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scaping API </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchV1ScrapeGetAsync(String q, String field, String sort, Integer size, String cursor, Boolean totalOnly, String paramCallback, final ApiCallback<ScrapeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchV1ScrapeGetValidateBeforeCall(q, field, sort, size, cursor, totalOnly, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<ScrapeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
