# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganicResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, items: List[object]=None, total: int=None):
        """OrganicResult - a model defined in OpenAPI

        :param count: The count of this OrganicResult.
        :param items: The items of this OrganicResult.
        :param total: The total of this OrganicResult.
        """
        self.openapi_types = {
            'count': int,
            'items': List[object],
            'total': int
        }

        self.attribute_map = {
            'count': 'count',
            'items': 'items',
            'total': 'total'
        }

        self._count = count
        self._items = items
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganicResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganicResult of this OrganicResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this OrganicResult.

        Number of results returned

        :return: The count of this OrganicResult.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OrganicResult.

        Number of results returned

        :param count: The count of this OrganicResult.
        :type count: int
        """
        if count is not None and count > 10000:
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `10000`")
        if count is not None and count < 0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")

        self._count = count

    @property
    def items(self):
        """Gets the items of this OrganicResult.


        :return: The items of this OrganicResult.
        :rtype: List[object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrganicResult.


        :param items: The items of this OrganicResult.
        :type items: List[object]
        """

        self._items = items

    @property
    def total(self):
        """Gets the total of this OrganicResult.

        Approximate number of results meeting query

        :return: The total of this OrganicResult.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrganicResult.

        Approximate number of results meeting query

        :param total: The total of this OrganicResult.
        :type total: int
        """
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total
